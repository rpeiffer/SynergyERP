! pmu_venditem_fix - product / product warehouse convert vendor item codes to upper case
!
! loadsave -w -n 100,10 -o prog/util/pmu_venditem_fix.dl4 src/pmu_venditem_fix.src
!
! PMUPGRADER ROUTINE

external lib "ubsfunc.dl4"
declare intrinsic sub programdump,datetojulian
Declare Intrinsic Sub InpBuf,String,Time
Declare Intrinsic Function findchannel
Declare Intrinsic Sub env,findf
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300],i$[200]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"

! fields for conversion of ccctype

Declare Function FixProd,FixProdWH

dim tmp$[200]

dim k2$[100],k2_check$[100]
dim fixIt$[1]
dim fileName$[100]

dim A$[156],W1$[32]

dim 3%

try close #1 else rem
ropen #1,"cntrl/cntrl"+Str$(COID)
Let COL=0;Row=23

fileName$ = "2/SPROD"+str$(COID)
Let FCode$="PROD"
LET OWRITE$="ne 'venditem_fix'"
LET MODE=0 ! "copy file as we are modifying in place
GOSUB DO_BACKUP: ! "ALWAYS BACKUP EXISTING!!!
open #2,fileName$
gosub FixProd:
close #2

fileName$ = "2/SPRODWHSE"+str$(COID)
Let FCode$="PRODWHSE"
LET OWRITE$="ne 'venditem_fix'"
LET MODE=0 ! "copy file as we are modifying in place
GOSUB DO_BACKUP: ! "ALWAYS BACKUP EXISTING!!!
open #2,fileName$
gosub FixProdWH:
close #2

goto do_exit:

!************************************************************************
! S U B R O U T I N E   A N D   E X I T   C O D E
!************************************************************************
FixProd: !
	LOGMSG$ = "******************************"
	GOSUB DO_WRITE_LOG:
	LOGMSG$ = "CHECKING "+fileName$+" FOR LOWER CASE VENDOR ITEM CODES"
	GOSUB DO_WRITE_LOG:
	retval = 0 ! default ok
	k2$ = " ",k2$
	do
		search #2,3,4;k2$,r2,e
		if e exit do
		mat read #2,r2,0;a$
		badOne = 0
		! first check to see if the key matches
		! the data
		if a$[140,151] <> k2$[21,32]
			LOGMSG$ = "KEY MISMATCH: "+k2$+" PROD: "+a$[140,151]+" REC: "+str$(r2)
			GOSUB DO_WRITE_LOG:
			badOne = 1
		end if
		if a$[93,112] <> k2$[1,20]
			LOGMSG$ = "KEY MISMATCH: "+k2$+" VENDOR ITEM: "+a$[93,112]+" REC: "+str$(r2)
			GOSUB DO_WRITE_LOG:
			badOne = 1
		end if
		if badOne
			LOGMSG$ = "    *** Product key / data mismatch - cannot fix issue!"
			GOSUB DO_WRITE_LOG:
			retval = 0 ! can't be sure no dups if key issues
		else
			! check for lower case product - can't fix if we find it
			if k2$[21,32] <> ucase$(k2$[21,32])
				LOGMSG$ = "LOWER CASE IN KEY FOR PRODUCT: "+k2$+" REC: "+str$(r2)
				GOSUB DO_WRITE_LOG:
				LOGMSG$ = "    Cannot fix this issue!"
				GOSUB DO_WRITE_LOG:
				retval = 0
			else
				if ucase$(k2$[1,20]) <> k2$[1,20] ! any lower case?
					LOGMSG$ = "LOWER CASE IN KEY: "+k2$+" REC: "+str$(r2)
					GOSUB DO_WRITE_LOG:
					k2_check$ = ucase$(k2$)
					search #2,2,4;k2_check$,r2_check,e
					if not(e)
						retval = 0
						LOGMSG$ = "    Duplicate key in upper case exists - cannot fix!"
						GOSUB DO_WRITE_LOG:
					else
						! update data record
						a$[93,112] = ucase$(a$[93,112])
						mat write #2,r2,0;a$;
						! delete original key
						k2_check$ = k2$
						search #2,5,4;k2_check$,r2,e \ if e error 11000
						! re-add fixed key
						k2_check$ = ucase$(k2$)
						search #2,4,4;k2_check$,r2,e \ if e error 11000
						LOGMSG$ = "    No duplicate exists - record fixed."
						GOSUB DO_WRITE_LOG:
					end if
				end if
			end if
		end if
	loop
return

FixProdWH: !
	LOGMSG$ = "******************************"
	GOSUB DO_WRITE_LOG:
	LOGMSG$ = "CHECKING "+fileName$+" FOR LOWER CASE VENDOR ITEM CODES"
	GOSUB DO_WRITE_LOG:
	retval = 0 ! default ok
	k2$ = " ",k2$
	do
		search #2,3,4;k2$,r2,e
		if e exit do
		mat read #2,r2,0;W1$
		badOne = 0
		! first check to see if the key matches
		! the data
		if w1$[1,12] <> k2$[23,34]
			LOGMSG$ = "KEY MISMATCH: "+k2$+" PROD: "+w1$[1,12]+" REC: "+str$(r2)
			GOSUB DO_WRITE_LOG:
			badOne = 1
		end if
		if w1$[13,32] <> k2$[3,22]
			LOGMSG$ = "KEY MISMATCH: "+k2$+" VENDOR ITEM: "+w1$[3,22]+" REC: "+str$(r2)
			GOSUB DO_WRITE_LOG:
			badOne = 1
		end if
		if badOne
			LOGMSG$ = "    *** Product key / data mismatch - cannot fix issue!"
			GOSUB DO_WRITE_LOG:
			retval = 0 ! can't be sure no dups if key issues
		else
			! check for lower case product - can't fix if we find it
			if k2$[23,34] <> ucase$(k2$[23,34])
				LOGMSG$ = "LOWER CASE IN KEY FOR PRODUCT: "+k2$+" REC: "+str$(r2)
				GOSUB DO_WRITE_LOG:
				LOGMSG$ = "    Cannot fix this issue!"
				GOSUB DO_WRITE_LOG:
				retval = 0
			else
				if ucase$(k2$[3,22]) <> k2$[3,22] ! any lower case?
					LOGMSG$ = "LOWER CASE IN KEY: "+k2$+" REC: "+str$(r2)
					GOSUB DO_WRITE_LOG:
					k2_check$ = ucase$(k2$)
					search #2,2,4;k2_check$,r2_check,e
					if not(e)
						retval = 0
						LOGMSG$ = "    Duplicate key in upper case exists - cannot fix!"
						GOSUB DO_WRITE_LOG:
					else
						! update data record
						w1$[13,32] = ucase$(w1$[13,32])
						mat write #2,r2,0;w1$;
						! delete original key
						k2_check$ = k2$
						search #2,5,4;k2_check$,r2,e \ if e error 11000
						! re-add fixed key
						k2_check$ = ucase$(k2$)
						search #2,4,4;k2_check$,r2,e \ if e error 11000
						LOGMSG$ = "    No duplicate exists - record fixed."
						GOSUB DO_WRITE_LOG:
					end if
				end if
			end if
		end if
	loop
return

DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
try close #4 Else Rem
try close #5 Else Rem
try close #6 Else Rem
try close #7 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try
end

