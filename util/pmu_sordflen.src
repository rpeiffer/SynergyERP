! loadsave -w -n 100,10 -o prog/util/pmu_sordflen.dl4 src/pmu_sordflen.src
!
! PMUPGRADER ROUTINE

! task 25703

external lib "ubsfunc.dl4"
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
include "src/dim.pmupgrade.i"

Dim k0$[60],k1$[60],k2$[60],k3$[60],k4$[60],k5$[60],k6$[60],k7$[60],k8$[60]
Dim k9$[60],k10$[60],k11$[60],FType$[5]
Dim FFIle$[60],Work$[128],Fle$[16],DPWIDX$[200]
Dim 1%,X1[9]
Dim 2%,X2[9]
Dim 3%,R[99]

DIM SN1$[54],L1$[20]
dim 1%,sn1
DIM 2%,SN0[1]
dIM 3%,sninvo

try close #1 else rem
Open #1,"cntrl/cntrl"+Str$(COID)

Let COL=0;Row=23

Let FCode$="SORDFLEN"
LET OWRITE$="ye '25703'"
LET MODE=1 ! "move existing file
GOSUB DO_BACKUP: ! "ALWAYS BACKUP EXISTING!!!
LET DPWIDX$=DFILE$ ! "retain old file
Let FCODE$="SORDFLEN"
LET PTH$=""
LET OWRITE$="y"
LET WORK$=DFILE$
GOSUB DO_BUILD:
LET FFILE$=DFILE$
LET DFILE$=WORK$
ROpen #2,DPWIDX$ ! "back'd up file (wherever do_backup: sent it)
Open #3,FFile$  ! "new empty file for expanded POLINE

Read #1,88,1888;Fle$;    !! sordflel
ropen #4,fle$
Read #1,88,1792;Fle$;    !! prod
ropen #5,fle$

K2$=" ",K2$
srch_loop: SEARCH #2,3,1;K2$,REC2,E
if e>2
	LOGMSG$ = "ERROR "+str$(e)+" during search of backed up file"
	gosub DO_WRITE_LOG
	call programdump()
endif
IF not(e)
	mat read #2,REC2,0;SN1$;
	MAT READ #2,REC2,54;SN0;
	mat read #2,rec2,62;sn1;
	mat read #2,rec2,64;sninvno;
	if sn0[0]<>val(k2$[1,6])
		logmsg$="Error - sordflen key and data don't match for order number"
		gosub do_write_log
		goto srch_loop:
	endif
	k1$=" ",k1$
	k1$[1,12]=sn1$[1,12]
	search #5,2,1;k1$,rec5,e
	if e>2 
		logmsg$="Bad error reading prod file "+k1$
		gosub DO_WRITE_LOG
		call programdump()
	endif
	if e goto srch_loop:
	k4$=" ",k4$
	k4$=sn0[0] using "######"
rol_loop: search #4,3,1;k4$,rec4,e
	if e or k4$[1,6]<>(sn0[0] using "######")
		goto srch_loop:
	else
		mat read #4,rec4,140;L1$;
		if L1$[1,12]=sn1$[1,12]
			k3$=" ",k3$
			e=2 \ search #3,1,0;k3$,rec3,e 
			if e 
				logmsg$="Error in new sordflen file"
				gosub DO_WRITE_LOG
				call programdump()
			endif
			mat write #3,REC3,0;SN1$
			MAT write #3,REC3,54;SN0
			mat write #3,rec3,62;sn1
			mat write #3,rec3,64;sninvno;
			k3$=" ",k3$
			k3$[1,6]=sn0[0] using "######"
			k3$[7,9]=k4$[7,9]
			k3$[10]=sn1$[25,54]+""
			search #3,4,1;k3$,rec3,e
			if e
				logmsg$="Error during sordflen insert dir #1 "+k3$
				gosub do_write_log
				call programdump()
			endif
			k3$=" ",k3$
			k3$[1,30]=sn1$[25,54]
			k3$[31,36]=rec5 using "######"
			K3$[37]=""
			search #3,4,2;k3$,rec3,e
			if e
				logmsg$="Error during sordflen insert dir #2 "+k3$
				gosub do_write_log
				call programdump()
			endif
		else
			goto rol_loop:
		ENDIF
	endif
	goto srch_loop:
endif

Close #1,#2,#3,#4,#5

DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: Rem"Backup the given file
	Call "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return
DO_BUILD: Rem"Build the given file
	Call "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return

include "src/rtn.pmupgrade.i"

OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
	FOR X=1 to 20 ! "close ALL files but the Log File
		try CLOSE #X else rem
	Next X
END 

else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try
