Rem BEDIT Version: 2.5 OBJECT CODE     Created: DEC 11, 2013  11:08:33
Rem /x/w2/pm/r2005//x/usracct/dave/work/custom/xrev9/chkonpoupdate.src (synergyux.synergy.n) [dd] {26922}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
rem ! loadsave -w -n 100,10 -o prog/util/pmu_fixonpoqty.dl4 src/pmu_fixonpoqty.src
external lib "ubsfunc.dl4"
Declare Intrinsic Sub Logic
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
include "src/utilcopyright.inc"
Option Default Dialect IRIS1
Rem BEDIT Version: 2.5 OBJECT CODE     Created: DEC  4, 2013  13:01:24
Rem /x/w2/pm/r2005//x/usracct/dave/work/custom/xrev9/chkonpo.src (synergyux.synergy.n) [dd] {24785}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3],PRD3
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Dim 1%,POL1[5],POL0[4],POMISC[2]
Dim 2%,POL2[2]
Dim 3%,POL3[6],POL[5],POL4[23],POL5[9],POL6[9]
Dim POL1$[120]
Dim F$[16],K2$[50],K3$[50],K4$[50]
dim e$[300]
include "src/dim.pmupgrade.i"
ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main
let e=99
Ropen #1,"cntrl/cntrl"+STR$(COID)
CH_PROD = 2
Mat Read #1,88,1792;F$;
Open #CH_PROD,F$
CH_PRODWHSE = 3
Mat Read #1,88,1744;F$;
Open #CH_PRODWHSE,F$
CH_POLINE = 4
Mat Read #1,88,2432;F$;
Ropen #CH_POLINE,F$
Let LOGMSG$="Starting to recalc on PO qty "
	Gosub DO_WRITE_LOG:
LOOP_: Search #CH_PROD,3,1;K2$,REC2,E
If E = 2
	let e=0
	Goto OUTEND
end if
If E  Error 11000
PRD_TOTAL = 0
Mat Read #CH_PROD,REC2,256;A
COUNT = COUNT + 1
WH_TOTAL = 0
K3$ = " ",K3$
K3$[1,12] = K2$[1,12]
LOOP2: Search #CH_PRODWHSE,3,1;K3$,REC3,E
If E > 2 Error 11000
If E = 2
  Gosub UPDATE2
  Goto LOOP_
End If 
If K3$[1,12] <> K2$[1,12]
  Gosub UPDATE2
  Goto LOOP_
End If 
If E = 0 And K3$[1,12] = K2$[1,12]
  WHSE = K3$[13,14]
  Mat Read #CH_PRODWHSE,REC3,78;W3;
  WH_TOTAL = W3[1]
  Gosub GETPOLINES ! add up po lines
End If 
Goto LOOP2
GETPOLINES: Rem
TOTONPO = 0
K4$ = " ",K4$
K4$[1,6] = REC2 Using "######"
POLINE_LOOP: Rem
Search #CH_POLINE,3,2;K4$,REC_POLINE,E
If E Goto CHKTOTALS
X2 = K4$[1,6]
If X2 <> REC2 Goto CHKTOTALS
Mat Read #CH_POLINE,REC_POLINE,0;POL1;
Mat Read #CH_POLINE,REC_POLINE,12;POL2;
Mat Read #CH_POLINE,REC_POLINE,24;POL3;
Mat Read #CH_POLINE,REC_POLINE,66;POL1$;
Mat Read #CH_POLINE,REC_POLINE,186;POL;
Mat Read #CH_POLINE,REC_POLINE,222;POL0;
Mat Read #CH_POLINE,REC_POLINE,232;POL4;
Mat Read #CH_POLINE,REC_POLINE,376;POMISC;
Mat Read #CH_POLINE,REC_POLINE,382;POL5;
Mat Read #CH_POLINE,REC_POLINE,442;POL6;
If POL1 >= 3 Goto POLINE_LOOP
If POMISC[0] = 0 Goto POLINE_LOOP ! not into stock
Call Logic(1,2 ^ 0,POL1[3],E) \ If E Goto POLINE_LOOP
Call Logic(1,2 ^ 2,POL1[3],E) \ If E Goto POLINE_LOOP
If POL1[1] <> WHSE Goto POLINE_LOOP !
TOTONPO = TOTONPO + (POL3[2] + PL4[1] - POL3[3])
Goto POLINE_LOOP !
CHKTOTALS: Rem do we balance
If WH_TOTAL <> TOTONPO
  Gosub UPDATE
End If 
PRD_TOTAL = PRD_TOTAL + TOTONPO
Return 
UPDATE: Rem
W3[1] = TOTONPO
Mat Write #CH_PRODWHSE,REC3,78;W3;
Return 
UPDATE2: Rem prod file
A[2] = PRD_TOTAL
Mat Write #CH_PROD,REC2,256;A
Return 
include "src/rtn.pmupgrade.i"

OUTEND: Rem
Let LOGMSG$="Complete PO qtys recalculated "
	Gosub DO_WRITE_LOG:
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
try Close #4 Else Rem
End 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try


