! program: pmu_add_sordtypes
!
! loadsave -w -n 100,10 -o prog/util/pmu_add_sordtypes.dl4 src/pmu_add_sordtypes.src
!
! PMUPGRADER ROUTINE
!
! This routine will add/initialize order type fields 
!

Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

! BO Auto Whse Xfer - add control field
! and initialize values

Enter COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
E = 99
include "src/dim.pmupgrade.i"
Dim Ftemp$[16],BLANK$[80]
dim k1$[60],P61$[256]
Dim 1%,OOt2[8],ot2[10]
dim 3%

BLANK$ = " ",BLANK$
TRUE = 1;FALSE = Not(TRUE)
open #1,"cntrl/cntrl" + Str$(COID)
ROW = 22;COL = 0
Open #2,"3/sordtype"+Str$(COID)

mat read #1,61;p61$
if p61$[119,119]<>"Y" let p61$[119,119]="N" ! this is for task 37480
let p61$[120,120]="N" ! default = not used
let p61$[121,121]="N" ! default = not used
mat write #1,61;p61$;

k1$=" ",k1$ 
SOTLoop: ! loop thru all order types set up
search #2,3,1;k1$,r,e \ if e=2 goto do_exit
clear ot2[] ! clear new size
mat read #2,r,32;oot2;
for x=0 to 8 \ let ot2[x]=oot2[x] \ next x ! transfer old to new
mat write #2,r,32;ot2;
goto sotloop

DO_EXIT: Rem---------------- Exit the upgrade -----------------------------------
	E = 0
Goto OUTEND

DO_BACKUP: Rem"Backup the given file
	Call "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return
DO_BUILD: Rem"Build the given file
	Call "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return

include "src/rtn.pmupgrade.i"


OUTEND: Rem"Final exit (be sure to set e=0 if successful before branching here)
	try ! "close any possible file opened herein
		Close #1
		close #2
	else
		rem
	end try
End

else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try
