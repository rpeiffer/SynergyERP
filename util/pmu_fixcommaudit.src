! COMMAUDIT and COMMAUDITH
!
! If DIR 2 is not 32 bytes, for some reason, built short (found cases of 30).
! this causes issues of course.  fix it.
!
! loadsave -w -n 100,10 -o prog/util/pmu_fixcommaudit.dl4 src/pmu_fixcommaudit.src
!
! PMUPGRADER ROUTINE

external lib "ubsfunc.dl4"
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"

DIM Ftemp$[16],KDir1$[50],KDir2$[50]
DIM 1%,FFILE$[200],WORK$[200]


dim 1%,as1[3],as4[1]
dim 2%,as2[1]
dim 3%,as3[5],AORIGCOMM,as5[6]
dim source$[10],as_$[60],spare$[26]

dim 3%

LET TRUE=1;FALSE=NOT(TRUE)
try close #1 else rem
ROPEN #1,"cntrl/cntrl"+STR$(COID)
LET ROW=23;COL=0

gosub fix_commaudit
try close #2 else rem
try close #3 else rem
gosub fix_commaudith
goto do_exit



fix_commaudit: !
	!
	! see if the index is already properly sized
	!
	doingHistory = 0
	ftemp$="4/commaudit"+str$(coid)
	open #2,ftemp$
	search #2,1,2;work$,r,e
	if e error 11000
	if r>=16 ! words
		Let LOGMSG$="File "+Ftemp$+" index 2 is properly sized - bypassing"
		Gosub DO_WRITE_LOG:
		return ! nothing to do
	end if
	close #2

	LET ORIG$=""
	LET OWRITE$="ne 'fcomma'"
	LET ROW=23;COL=0
	LET FCODE$="COMMAUDIT"
	LET MODE=1 ! move it as we are rebuilding it
	GOSUB DO_BACKUP:
	ropen #2,dfile$ ! backed up file

	! rebuild file
	LET FCODE$="COMMAUDIT"
	LET PTH$=""
	LET OWRITE$="y"
	GOSUB DO_BUILD:
	open #3,dfile$

	KDir1$ = " ",KDir1$
	do
		search #2,3,1;KDir1$,rOld,e \ if e>2 error 11000
		if e exit do
		gosub ReadOld:

		gosub WriteNew:
	loop
return

fix_commaudith: !
	!
	! see if the index is already properly sized
	!
	doingHistory = 1
	ftemp$="4/commaudith"+str$(coid)
	open #2,ftemp$
	search #2,1,2;work$,r,e
	if e error 11000
	if r>=16 ! words
		Let LOGMSG$="File "+Ftemp$+" index 2 is properly sized - bypassing"
		Gosub DO_WRITE_LOG:
		return ! nothing to do
	end if
	close #2
	LET ORIG$=""
	LET OWRITE$="ne 'fcomma'"
	LET ROW=23;COL=0
	LET FCODE$="COMMAUDITH"
	LET MODE=1 ! move it as we are rebuilding it
	GOSUB DO_BACKUP:
	ropen #2,dfile$ ! backed up file

	! rebuild file
	LET FCODE$="COMMAUDITH"
	LET PTH$=""
	LET OWRITE$="y"
	GOSUB DO_BUILD:
	open #3,dfile$

	KDir1$ = " ",KDir1$
	do
		search #2,3,1;KDir1$,rOld,e \ if e>2 error 11000
		if e exit do
		gosub ReadOld:
		gosub WriteNew:
	loop
return


ReadOld:
	MAT READ #2,rOld,0;AS1;
	MAT READ #2,rOld,8;AS2;
	MAT READ #2,rOld,16;AS3;
	MAT READ #2,rOld,52;SOURCE$;
	MAT READ #2,rOld,62;AS_$;
	MAT READ #2,rOld,122;AORIGCOMM;
	MAT READ #2,rOld,128;AS4;
	MAT READ #2,rOld,132;AS5;
	MAT READ #2,rOld,174;SPARE$;
return

WriteNew:
	LET E=2;rNew=0
	SEARCH #3,1,0;work$,rNew,E \ IF E error 11000
	SEARCH #3,4,1;KDir1$,rNew,E \ IF E error 11000
	KDir2$ = " ",KDir2$
	KDir2$[1,6] = as2[0] using "######"
	KDir2$[7,29] = KDir1$[4,26]
	KDir2$[30,32] = KDir1$[1,3]
	SEARCH #3,4,2;KDir2$,rNew,E \ IF E error 11000
	MAT WRITE #3,rNew,0;AS1;
	MAT WRITE #3,rNew,8;AS2;
	MAT WRITE #3,rNew,16;AS3;
	MAT WRITE #3,rNew,52;SOURCE$;
	MAT WRITE #3,rNew,62;AS_$;
	MAT WRITE #3,rNew,122;AORIGCOMM;
	MAT WRITE #3,rNew,128;AS4;
	MAT WRITE #3,rNew,132;AS5;
	MAT WRITE #3,rNew,174;SPARE$;
return

DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try