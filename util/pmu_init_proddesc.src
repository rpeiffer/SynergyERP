! program: pmu_init_proddesc
!
! loadsave -w -n 100,10 -o prog/util/pmu_init_proddesc.dl4 src/pmu_init_proddesc.src
!
! PMUPGRADER ROUTINE
!
! This routine will initialize sales order non-stock (sproddesc) fields 
!
! initializes the following fields


Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

! BO Auto Whse Xfer - add control field
! and initialize values

Enter COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository

! for manual update
! dim dbak$[500],logname$[500]
! let dbak$="files/databak/" \ let coid =1 \ let groupid=0
! let logname$="/tmp/initvar"
! let learnflag=0
! if learnflag<>0 let logname$=logname$+"lrn"
! build #0,+logname$
! close #0
! open #0,logname$




try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
E = 99
include "src/dim.pmupgrade.i"
Dim Ftemp$[16],BLANK$[80]
dim k1$[60],P61$[256]
Dim 1%
dim 3%,nsfrt1[1]
! initalize new fields - task #51999
!23 FRT COST              T        NSFRT1[0]       6   190  
! 24 PREV ACC FRT COST     T        NSFRT1[1]       6   196  
mat read #1,61,0;p61$;
BLANK$ = " ",BLANK$
TRUE = 1;FALSE = Not(TRUE)
open #1,"cntrl/cntrl" + Str$(COID)
ROW = 22;COL = 0
mat read #1,88,2128;ftemp$;
LET ORIG$=""
LET OWRITE$="ne 'initvar'"
LET ROW=23;COL=0

UPDATE=0

LET FCODE$="SPRODDESC"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:


OPEN #2,FTEMP$

k1$=" ",k1$ 
prdLoop: ! loop thru all order types set up
search #2,3,1;k1$,r,e \ if e=2 goto startquote: 
mat read #2,r,190;nsfrt1;
if p61$[132,132]<>"Y"
	let nsfrt1[0]=0
	let nsfrt1[1]=0
else
	if nsfrt1[0]<0 or nsfrt1[0]>999999.99
		let nsfrt1[0]=0
	endif
	if nsfrt1[1]<0 or nsfrt1[1]>999999.99
		let nsfrt1[1]=0
	endif
endif
mat write #2,r,190;nsfrt1;
goto prdloop

startquote: ! 
try 
	close #2
else
end try
mat read #1,88,1424;ftemp$;
LET ORIG$=""
LET OWRITE$="ne 'initvar'"
LET ROW=23;COL=0

UPDATE=0

LET FCODE$="QPRODDESC"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:


OPEN #2,FTEMP$

k1$=" ",k1$ 
QTELoop: ! loop thru all order types set up
search #2,3,1;k1$,r,e \ if e=2 goto endquote: 
mat read #2,r,190;nsfrt1;
if p61$[132,132]<>"Y"
	let nsfrt1[0]=0
	let nsfrt1[1]=0
else
	if nsfrt1[0]<0 or nsfrt1[0]>999999.99
		let nsfrt1[0]=0
	endif
	if nsfrt1[1]<0 or nsfrt1[1]>999999.99
		let nsfrt1[1]=0
	endif
endif
mat write #2,r,190;nsfrt1;
goto QTEloop

EndQuote: ! 
goto do_exit

DO_EXIT: Rem---------------- Exit the upgrade -----------------------------------
	E = 0
Goto OUTEND

DO_BACKUP: Rem"Backup the given file
	Call "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return
DO_BUILD: Rem"Build the given file
	Call "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return

include "src/rtn.pmupgrade.i"


OUTEND: Rem"Final exit (be sure to set e=0 if successful before branching here)
	try ! "close any possible file opened herein
		Close #1
		close #2
	else
		rem
	end try
End

else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try
