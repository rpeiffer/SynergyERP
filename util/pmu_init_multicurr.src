! program: pmu_init_multicurr
!
! loadsave -w -n 100,10 -o prog/util/pmu_init_multicurr.dl4 src/pmu_init_multicurr.src
!
! PMUPGRADER ROUTINE
!
! This routine will initialize file fields: 
! custnotes  - customer multicurrency id
! vendtag    - vendor multicurrency id
! initializes the following fields


Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]



Enter COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository

! for manual update
! dim dbak$[500],logname$[500]
! let dbak$="files/databak/" \ let coid =1 \ let groupid=0
! let logname$="/tmp/initvar"
! let learnflag=0
! if learnflag<>0 let logname$=logname$+"lrn"
! build #0,+logname$
! close #0
! open #0,logname$




try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
E = 99
include "src/dim.pmupgrade.i"
Dim Ftemp$[16],BLANK$[80]
dim k1$[60],P61$[256],custom_customer$[30]
DIM S3$[50]
Dim 1%,ccurrid ! for customer file
dim 3%,vcurrid ! for vendor file
dim 1%,currid,3%,currfact
Dim 3%,glcacct ! for glarcntrl and glpocntrl
dim 2%,apcurrid,3%,glexchacct,glvaramt,vcvaramt

! initalize new fields - task #56940
! 
open #1,"cntrl/cntrl" + Str$(COID)
mat read #1,61,0;p61$;
mat read #1,115,60;custom_customer$;
let custom_customer$=rtrim$(custom_customer$)
BLANK$ = " ",BLANK$
TRUE = 1;FALSE = Not(TRUE)
ROW = 22;COL = 0
mat read #1,88,1824;ftemp$;
LET ORIG$=""
LET OWRITE$="ne 'initmultcurr'"
LET ROW=23;COL=0
mat read #1,61,0;p61$;
mat read #1,115,60;custom_customer$;
let custom_customer$=rtrim$(custom_customer$)

UPDATE=0
!  Customer notes file - init multi curr id
mat read #1,88,720;FTEMP$;
LET FCODE$="CUSTNOTES"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
custnoteLoop: ! loop thru all order types set up
search #2,3,1;k1$,r,e \ if e=2 goto endcustnoteloop: 
if e<>0 error 11000
MAT read #2,R,434;ccurrid;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET ccurrid=0
else
	if ccurrid<0 or ccurrid>7999
		let ccurrid=0
	endif
endif
MAT WRITE #2,R,434;ccurrid;	
goto custnoteloop: ! 
Endcustnoteloop: ! 
try
	close #2
else
	rem
end try

! vendor file
mat read #1,88,2400;ftemp$;
UPDATE=0
!  Vendor file - init multi curr id
LET FCODE$="A80VM"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
VendLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endvendloop: 
if e<>0 error 11000
MAT read #2,R,504;Vcurrid;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET Vcurrid=0
else
	if Vcurrid<0 or Vcurrid>7999
		let Vcurrid=0
	endif
endif
MAT WRITE #2,R,504;Vcurrid;	
goto vendloop: ! 
Endvendloop: ! 
try
	close #2
else
	rem
end try

! glarcntrl
update=0
mat read #1,88,464;ftemp$;
LET FCODE$="GLARCNTRL"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
glarLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endglarloop: 
if e<>0 error 11000
MAT read #2,R,74;glacct;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET glacct=0
else
	if glacct<0 or glacct>99999999
		let glacct=0
	endif
endif
MAT WRITE #2,R,74;glacct;	
goto glarloop: ! 
Endglarloop: ! 
try
	close #2
else
	rem
end try
! glpocntrl
update=0
ftemp$="6/GLPOCNTRL"+STR$(COID)
LET FCODE$="GLPOCNTRL"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
glpoLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endglpoloop: 
if e<>0 error 11000
MAT read #2,R,92;glacct;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET glacct=0
else
	if glacct<0 or glacct>99999999
		let glacct=0
	endif
endif
MAT WRITE #2,R,92;glacct;	
goto glPOloop: ! 
EndglPOloop: ! 
try
	close #2
else
	rem
end try
! next file here

! pohead file
mat read #1,88,2416;ftemp$;
UPDATE=0
!  Pohead file - init multi curr id
LET FCODE$="POHEAD"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
pohLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endpohloop: 
if e<>0 error 11000
MAT read #2,R,612;currid;
mat read #2,r,614;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,612;currid;	
mat write #2,r,614;currfact;
goto pohloop: ! 
Endpohloop: ! 
try
	close #2
else
	rem
end try

! poline file
mat read #1,88,2432;ftemp$;
UPDATE=0
!  PoLINE file - init multi curr id
LET FCODE$="POLINE"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
polLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endpolloop: 
if e<>0 error 11000
MAT read #2,R,548;currid;
mat read #2,r,550;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,548;currid;	
mat write #2,r,550;currfact;
goto polloop: ! 
Endpolloop: ! 
try
	close #2
else
	rem
end try


! poctfle file
ftemp$="2/POCTFLE"+STR$(COID)
UPDATE=0
!  PoLINE file - init multi curr id
LET FCODE$="POCTFLE"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
pocLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endpocloop: 
if e<>0 error 11000
MAT read #2,R,292;currid;
mat read #2,r,282;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,292;currid;	
mat write #2,r,282;currfact;
goto pocloop: ! 
Endpocloop: ! 
try
	close #2
else
	rem
end try

! APBTH file
ftemp$="2/APBTH"+STR$(COID)+STR$(GROUPID)
UPDATE=0
!  APBTH file - init multi curr id
LET FCODE$="APBATCH"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
apbLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endapbloop: 
if e<>0 error 11000
MAT read #2,R,52;currid;
mat read #2,r,54;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,52;currid;	
mat write #2,r,54;currfact;
goto apbloop: ! 
Endapbloop: ! 
try
	close #2
else
	rem
end try


! A20OI file
ftemp$="2/A20OI"+STR$(COID)+STR$(GROUPID)
UPDATE=0
!  A20OI file - init multi curr id
LET FCODE$="AP.A20OI"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
aoiLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endaoiloop: 
if e<>0 error 11000
MAT read #2,R,116;currid;
mat read #2,r,122;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,116;currid;	
mat write #2,r,122;currfact;
goto aoiloop: ! 
Endaoiloop: ! 
try
	close #2
else
	rem
end try


! APPOH file
ftemp$="2/APPOH"+STR$(COID)+STR$(GROUPID)
UPDATE=0
LET FCODE$="APPOH"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
apohLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endapohloop: 
if e<>0 error 11000
MAT read #2,R,28;currid;
mat read #2,r,88;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,28;currid;	
mat write #2,r,88;currfact;
goto apohloop: ! 
Endapohloop: ! 
try
	close #2
else
	rem
end try


! APPOHH file
ftemp$="2/APPOHH"+STR$(COID)
UPDATE=0
LET FCODE$="APPOHH"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$

k1$=" ",k1$ 
apohHLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endapohHloop: 
if e<>0 error 11000
MAT read #2,R,28;currid;
mat read #2,r,88;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,28;currid;	
mat write #2,r,88;currfact;
goto apohHloop: ! 
EndapohHloop: ! 
try
	close #2
else
	rem
end try

! apcash file
ftemp$="2/APCASH"+STR$(COID)
UPDATE=0
LET FCODE$="APCASH"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:
!dim 2%,apcurrid,3%,glexchacct
!APCASH   
!2%,CURRID		DSP:54
!GL CURRENCY EXCHANGE  T        GLEXCHACCT      6   116

OPEN #2,FTEMP$

k1$=" ",k1$ 
apcashLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endapcashloop: 
if e<>0 error 11000
MAT read #2,R,54;apcurrid;
mat read #2,r,116;glexchacct;
mat read #2,r,122;glvaramt;
mat read #2,r,128;vcvaramt;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET apcurrid=0
	let glexchacct=0
	let glvaramt=0
	let vcvaramt=0
else
	if apcurrid<=0 or apcurrid>7999
		let apcurrid=0
		let glexchacct=0
		let glvaramt=0
		let vcvaramt=0
	endif
endif
MAT WRITE #2,R,54;apcurrid;	
mat write #2,r,116;glexchacct;
mat write #2,r,122;glvaramt;
mat write #2,r,128;vcvaramt;
goto apcashloop: ! 
Endapcashloop: ! 
try
	close #2
else
	rem
end try



goto do_exit

DO_EXIT: Rem---------------- Exit the upgrade -----------------------------------
	E = 0
Goto OUTEND

DO_BACKUP: Rem"Backup the given file
	Call "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return
DO_BUILD: Rem"Build the given file
	Call "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return

include "src/rtn.pmupgrade.i"


OUTEND: Rem"Final exit (be sure to set e=0 if successful before branching here)
	try ! "close any possible file opened herein
		Close #1
		close #2
	else
		rem
	end try
End

else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try
