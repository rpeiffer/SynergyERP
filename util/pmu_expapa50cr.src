! Rebuild / Expand File from AP.A50CR
!
! loadsave -w -n 100,10 -o prog/util/pmu_expapa50cr.dl4 src/pmu_expapa50cr.src
!
! PMUPGRADER ROUTINE

external lib "ubsfunc.dl4"
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
if restart<>0 
 dim dbak$[50],logname$[50]
 let dbak$="files/databak/"
 let coid=1;groupid=0
 let logname$="/tmp/marylog"
 try
	open #0,logname$
 else
	build #0,+logname$
	close #0
	open #0,logname$
end try
endif
! 
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"

DIM ANS$[20],FILE$[20],FT$[2],X$[20],CMD$[256]
DIM K1$[30],LU$[2],NK1$[30],NK2$[50],K2$[50]
DIM 1%,FLAG,K1SIZE,K2SIZE,DSLS$[200]
DIM Ftemp$[16],F$[16]
DIM 1%,FFILE$[200],WORK$[200]
DIM 2%,D3[1],X2,CR[1]

DIM 3%,R1,R2,R3

DIM 2%,ARDT,DATE
DIM 3%,EMONTH,EYEAR,EDATE,ARDATE,ARYEAR,ARMONTH,CHKDATE,MONTHS[12]
DIM LONGYEAR$[10],SHORTYEAR$[10]
DIM BLANK$[60]
! 1 VENDOR CODE           D        C1[0]           4     0                     
! 2 CHECK NUMBER          D        C1[1]           4     4                     
! 3 CHECK DATE            D        C1[2]           4     8  JULIAN             
! 4 CHECK AMOUNT          T        C2[0]           6    12                     
! 5 TIE BREAKER           S        C3[0]           2    18                     
! 6 PROCESS FLAG          S        C3[1]           2    20                     
! 7 PAYEE NAME            C        C$[1,30]       30    22                     
! 8 BANK NUMBER           S        C4[0]           2    52                     
! 9 CURRID                S        CURRID          2    54                     
!10 CURRENCY FACT         T        CURRFACT        6    56                     
! 11 SPARE$                C        SPARE$         38    62                     
                                                               
            
dim 2%,C1[2],1%,C4
dim 1%,C3[1],CURRID
dim spare$[38],C$[30]
dim 3%,currfact,C2

DIM 3%,E
dim list$[1],listline$[100]

LET BLANK$=" ",BLANK$
LET TRUE=1;FALSE=NOT(TRUE)
try close #1 else rem
ROPEN #1,"cntrl/cntrl"+STR$(COID)
LET ROW=23;COL=0

! ***** ap.A50CR file ****
ftemp$="2/A50CR"+STR$(COID)+STR$(GROUPID)
LET ORIG$=""
LET OWRITE$="ne 'multcurr'"
LET ROW=23;COL=0
Open #2,Ftemp$
Let X2=CHF(302) ! "rec size in words
Close #2
UPDATE=0
If X2>=50 ! "it's already done
	Let LOGMSG$="File "+Ftemp$+" is already expanded - bypassing"
	Gosub DO_WRITE_LOG:
	Goto Do_exit: ! DO_EXIT
Endif
LET FCODE$="AP.A50CR"
LET MODE=0
GOSUB DO_BACKUP:
ffile$=ftemp$


CONVERT_FILE: REM"Convert the given file
LET ROW=23;COL=0
if not(fromUpgrade) PRINT @COL,ROW;"Converting "+FFILE$;
LET COL=COL+13+LEN(FFILE$)
OPEN #2,DFILE$ ! open file in new location
LET CH=2 \ GOSUB GET_ACTIVE_RECS:
LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
GOSUB DO_WRITE_LOG:
LET FCODE$="AP.A50CR"
LET PTH$=""
LET OWRITE$="y"
LET WORK$=DFILE$
GOSUB DO_BUILD:
LET FFILE$=DFILE$
LET DFILE$=WORK$
system "chmod go+rw files/2/A50CR"+str$(coid)+str$(groupid) ! all -- for permissions
system "chmod go+rw files/2/a50cr"+str$(coid)+str$(groupid)  ! all -- for permissions
system "chmod go+rw files/2/a50cr"+str$(coid)+str$(groupid) +".idx" ! all -- for permissions
OPEN #3,FFILE$
LET K1$=" ",K1$;REC=0

OLDFLELOOP: REM "Loop thru all old Dir 1
	SEARCH #2,3,1;K1$,R2,E \ IF E=2 GOTO Do_exit:
	IF E Error 11000
	LET ch_cash=2;rec_cash=R2
	GOSUB READ_rec:
	let spare$=" ",spare$
	let currid=0
	let currfact=0	 
	LET NK1$=" ",NK1$
	LET NK1$=K1$
	SEARCH #3,2,1;NK1$,R3,E \ IF E=0 GOTO OLDFLELOOP:
	IF E>1 error 11000
	LET E=2;R3=0
	SEARCH #3,1,0;NK1$,R3,E \ IF E error 11000
	SEARCH #3,4,1;NK1$,R3,E \ IF E error 11000
	LET NK2$=" ",NK2$
	LET NK2$[1,2]=C4 USING "##"
	LET NK2$[3,8]=C1[2] USING "######"
	LET NK2$[9,14]=C1[1] USING "######"
	LET NK2$[15,16]=C3 USING "##"
	SEARCH #3,4,2;NK2$,R3,E\ IF E error 11000
	LET ch_cash=3;rec_cash=R3
	GOSUB WRITE_rec:
	LET LIST$=" ",LIST$         
	LET LISTDATE=0              
	LET LISTLINE$=" ",LISTLINE$ 
	LET REC=REC+1
	IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS:
GOTO OLDFLELOOP:

 
READ_rec: REM Read File   
	MAT read  #ch_cash,rec_cash,0;c1;       
	MAT read  #ch_cash,rec_cash,12;c2; 
	MAT read  #ch_cash,rec_cash,18;c3;  
	MAT read  #ch_cash,rec_cash,22;c$;
	MAT read  #ch_cash,rec_cash,52;c4;        	
RETURN 

WRITE_rec: REM Write
	MAT write  #ch_cash,rec_cash,0;c1;       
	MAT write  #ch_cash,rec_cash,12;c2; 
	MAT write  #ch_cash,rec_cash,18;c3;  
	MAT write  #ch_cash,rec_cash,22;c$;
	MAT write  #ch_cash,rec_cash,52;c4;  
	MAT WRITE #ch_cash,rec_cash,54;currid;
	mat write #ch_cash,rec_cash,56;currfact;
	mat write #ch_cash,rec_cash,62;spare$;
RETURN 


COPYDONE: REM "Copy is Done 
XferDone: ! "
LET LOGMSG$="Finished with file expand & transfer"
GOSUB DO_WRITE_LOG:
CLOSE #2,#3
Goto DO_EXIT:

COPYDONE1: REM "Copy is Done for sordcashh
LET LOGMSG$="Finished with file expand & transfer"
GOSUB DO_WRITE_LOG:
CLOSE #2,#3
Goto DO_EXIT:

DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try