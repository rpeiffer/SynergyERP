!
! loadsave -w -n 100,10 -o prog/util/alert_costchange.dl4 src/alert_costchange.src
!
! cpi_costchange_alert - based on 268ccn
!
! Meant to be run as a cron job.  Takes the following form:
!
! cpi_costchange_alert company# [warehouse] [daysOut]
!
! if the warehouse is not passed in, it will default to 1
! if daysOut not passed in, it will default to 180
!
! It will first process the last price file and see if there cost / price
! changes for pending adjustments based on "daysOut"
!
! It will then process the current changes (things put in costchange queue as the
! result of direct changes to costs through maintenance, etc.)
!

!
! 1.0 mm/dd/yyyy change??
!

include "src/utilcopyright.inc"
External Lib "utillib.lib"
Declare External Function ParseArguments,UtilOpenMySQLChan

include "src/inc/mysql_lib.inc"

include "src/inc/sql_alertcostchange.inc"


External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,Pdate$
External Lib "libprice.lib"
Declare External Sub SysPriceCalc
Declare Intrinsic Sub DateToJulian,FormatDate,InpBuf,JulianToDate,String,VerifyDate
Declare Intrinsic Sub programdump

! local subroutines
Declare Sub GetCommandParameters,OpenFilesReadCntrl,SetReportParamenters
Declare Sub ProcessFutureChanges,ReadCustomer,ProcessCustomerLastPrice
Declare Sub ReadLastPrice,ReadProduct,ReadProductWarehouse,CheckDate,Convert
Declare Sub SendAlert, ProcessCurrentChanges,ProcessProductLastPrice
Declare Function DidPriceChange,VerifyCPI


try
dim alertcc. as sql_alertcostchange

dim 1%,PFU1[20],CNVTU[2],UN[2],ch[99],ProcessingCurrentChanges
dim 3%,PFU2[6],CNVTA,A[33],AMOUNT,passinfo[99]
dim args$[5,80],sql$[1000]

Rem {begin src/inc/dim.cust.i}
Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142]
Dim 2%,A0[3],C1[12],REC,C3[1]
Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8,C11[2]
Dim 3%,C4[6],C10[5],CFIN[8],U1,C9,C5[5],C6[9],C12[1]
Rem {end dim.cust.i}

Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}

Rem {begin src/inc/dim.lastpr.i}
Dim LP$[12],LP2$[84],LPMT$[2]
Dim 1%,LPC3[4],AI,LPEUN[2],LPWH,LPCPT,PPPUSERID
Dim 2%,LPDF,LPC1[2],LPR1[3],LPC5[3],LPPCDATE,LPCSDT,LPDEPT,PPPCID[1]
Dim 3%,LPC2[2],LPC4[3],LPR[4],LPUNF[6],PERM[1],LPLPERM,LPCURR[1]
Dim 3%,LPFPERM[1],LPUNIT[1]
Rem {end dim.lastpr.i}

Rem {begin src/inc/dim.prwh.i}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i}

Rem {begin src/inc/dim.custnotes.i}
Dim 1%,CNA$[100],CNA0$[68]
Dim 2%,CNODATE
Rem {end dim.custnotes.i}

Dim 1%,RESP$[10],MSGDESC$[150],LAST_DATE$[8],CURRENT_DATE$[8],DASH$[132]
Dim 1%,JULIAN_LAST_DATE$[8],JULIAN_CURRENT_DATE$[8],F$[16],P60$[50],P9$[50]
Dim 1%,KCUST$[50],KLP$[50],KSORT$[50],KPROD$[50],KINVH$[50],KCCODES$[50]
Dim 1%,KCMDTY$[50],SPACES$[132],KCUSTNOTES$[50],TITLE$[80],KPRWH$[50]
Dim 1%,WORK$[1023]
Dim 1%,NOLOWER,FIRSTFF,scrn,CostChange
Dim 1%,XPOS,YPOS,PT[37],FUTURE,CURRENT,TRUE,FALSE,PRICE_CHANGED,PRICE_MAY_CHANGE
Dim 1%,STATE,PRT_SELECTED,CH_CNTRL
Dim 2%,CURRENT_DATE,LAST_DATE,JULIAN_LAST_DATE,JULIAN_CURRENT_DATE,EFF_DATE
Dim 2%,JULIAN_EFF_DATE,D5,DFT_DAYS
Dim 2%,BEGIN_EFFDATE,ENDING_EFFDATE,JULIAN_BEGIN_EFFDATE,JULIAN_ENDING_EFFDATE
Dim 3%,FLEPTR[15,1],SPECS[50],PRICE[1],FLEPTR2[20],COST1[1],exspecs[50]
Dim PPU$[6],3%,PTYPE[1],Contr[1],RContr[1],DPRICE[1],DCOST1[1],CurrentProduct$[12]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],msg$[100],Message$[400],WebStr$[600]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]

MAIN: Rem"================

TRUE = 1;FALSE = 0
FUTURE = 1;CURRENT = 0

call GetCommandParameters()
if not(intCo) goto OutEnd:
call SetUtilSession(e$,intCo)
call OpenFilesReadCntrl()

call SetReportParamenters()
call ProcessFutureChanges()
call ProcessCurrentChanges()


Goto OUTEND ! PROMPT_ACTION

OUTEND: Rem"========= exit
chain ""
End
else ! MAIN try statment
	include "src/utilcallmainerr.inc"
end try

!-----------------------------------------------------------------------
! subroutines and functions
!-----------------------------------------------------------------------

Sub GetCommandParameters()
try
	argc = ParseArguments(e$,args$[], msc$(4))
	! First arg is company
	intCo = args$[1]
	if intCo < 1 or intCo > 99
		print "Invalid company number.  Exiting."
		intCo = 0
		exit sub
	end if
	! second arg is warehouse - may not be there...
	whse = args$[2]
	if whse = 0 let whse = 1
	! third arg is number of days to look forward for future cost updates
	daysOut = args$[3]
	if daysOut = 0 let daysOut = 180
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub


Sub OpenFilesReadCntrl()
try
	CH_CNTRL = 1 ! done in SetUtilSession
	Mat Read #CH_CNTRL,60,50;P60$;
	Mat Read #CH_CNTRL,19,50;P9$;
	Mat Read #1,3,172;D5;
	ch_cust = OpenFile(-1808,intCo) \ if ch_cust<0 error 42
	ch_prod = OpenFile(-1792,intCo) \ if ch_prod<0 error 42
	ch_prwh = OpenFile(-1744,intCo) \ if ch_prwh<0 error 42
	ch_cmdty = OpenFile(-2288,intCo) \ if ch_cmdty<0 error 42
	ch_lastpr = OpenFile(-1376,intCo) \ if ch_lastpr<0 error 42
	ch_specprice = OpenFile(-1936,intCo) \ if ch_specprice<0 error 42
	ch_contracth = OpenFile(-2880,intCo) \ if ch_contracth<0 error 42
	ch_ccodes = OpenFile(-1728,intCo) \ if ch_ccodes<0 error 42
	ch_brktbl = OpenFile(-1952,intCo) \ if ch_brktbl<0 error 42
	ch_prctype = OpenFile(-752,intCo) \ if ch_prctype<0 error 42
	ch_vend = OpenFile(-2400,intCo) \ if ch_vend<0 error 42
	ch_custnotes = OpenFile(-720,intCo) \ if ch_custnotes<0 error 42
	ch_slsm = OpenFile(-1824,intCo) \ if ch_slsm<0 error 42
	ch_sql = UtilOpenMySQLChan(e$, "BatchUser", "!BaTcHuSeR8899", 1) \ if ch_sql < 0 error 42
	! sql2 used to update table while processing rows at same time
	ch_sql2 = UtilOpenMySQLChan(e$, "BatchUser", "!BaTcHuSeR8899", 1) \ if ch_sql2 < 0 error 42
	! for libalertproc call
	ch[1] = ch_cntrl
	ch[2] = ch_slsm
	ch[3] = ch_cust
	ch[4] = ch_prod
	ch[5] = ch_prwh
	ch[6] = ch_sql
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

Sub SetReportParamenters()
try
	SSLSM = 0;ESLSM = 999
	SCUST = 0;ECUST = 999999
! 	SCUST = 17911;ECUST = 17911  ! for testing
	DFT_DAYS = 365
	If P9$[32,32] = "Y" Let WHSEPR = TRUE Else Let WHSEPR = FALSE
	! warehouse either passed in or defaulted - if not whsepr, unset this value
	If not(WHSEPR) WHSE = 0
	!CURRENT_DATE$ = D5 Using "&&&&&&" ! ON demo/learn CAN BE TOO OLD!!!
	current_date$=Tim(8) using "&&"+tim(9) using "&&"+Tim(10) using "&&"
	CURRENT_DATE = CURRENT_DATE$
	Call DateToJulian(1,CURRENT_DATE$,JULIAN_CURRENT_DATE$,E) \ If E JULIAN_CURRENT_DATE$=Str$(Tim(6))
	JULIAN_CURRENT_DATE = JULIAN_CURRENT_DATE$
	BEGIN_EFFDATE = CURRENT_DATE
	JULIAN_BEGIN_EFFDATE = JULIAN_CURRENT_DATE
	JULIAN_ENDING_EFFDATE = JULIAN_BEGIN_EFFDATE + daysOut
	WORK$ = JULIAN_ENDING_EFFDATE Using "&&&&&"
	Call JulianToDate(1,WORK$,WORK$,E) \ If E error 11000
	Call VerifyDate(WORK$,WORK$,E) \ If E error 11000
	ENDING_EFFDATE = WORK$
	NOLOWER = 0
	CostChange=1 ! cost changes only
	RESP$="R" ! ALWAYS A REPORT (sort by slsm)
	! new prompt - type of price to check (0=all, 1=mtrx/10b, 2=special, 3=perm, 4=cpi only)
	Prctype=4
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ProcessFutureChanges()
try
	KCUST$ = " "
	If SCUST Let KCUST$ = SCUST - 1 Using "######"
	do
	LOOP_CUSTOMER: !
		Search #CH_CUST,3,1;KCUST$,REC_CUST,E \ If E > 2 error 11000
		IF E exit do
		call ReadCustomer()
		If C1[1] > ECUST exit do
		If C1[2] < SSLSM Goto SkipCustomer
		If C1[2] > ESLSM Goto SkipCustomer
		DFT_COST = 0
		REC_PRCTYPE = C1[7]
		If REC_PRCTYPE <= 0 Or REC_PRCTYPE > 100 Let REC_PRCTYPE = 1
		Mat Read #CH_PRCTYPE,REC_PRCTYPE,28;PT;
		DFT_COST = PT[0]
		If Not(DFT_COST) Let DFT_COST = P60$[29,29]
		call ProcessCustomerLastPrice()
	SkipCustomer: !
	loop
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ProcessCurrentChanges()
try
	ProcessingCurrentChanges = TRUE
	sql$ = "SELECT * FROM alertcostchange"
	SEARCH #ch_sql;sql$
	Map Record #ch_sql as sql_alertcostchange
	do
		! loop through queue
		try read record #ch_sql;alertcc. else exit do
		! OK - got a product ID / warehouse combination
		! this row will be processed, so delete the original
		! right away to avoid possible updates to existing record
		! while we are processing it
		e = alertcostchange_SQLDelete(e$,ch_sql2,alertcc.)
		if not(e) error 11000 ! delete failed
		call ProcessProductLastPrice()
	loop
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ReadCustomer()
try
	Mat Read #CH_CUST,REC_CUST,0;A1$
	Mat Read #CH_CUST,REC_CUST,142;C1
	Mat Read #CH_CUST,REC_CUST,194;C2
	Mat Read #CH_CUST,REC_CUST,200;C3
	Mat Read #CH_CUST,REC_CUST,208;C0
	Mat Read #CH_CUST,REC_CUST,210;C4
	Mat Read #CH_CUST,REC_CUST,252;C5
	Mat Read #CH_CUST,REC_CUST,288;C6
	Mat Read #CH_CUST,REC_CUST,348;A2$
	Mat Read #CH_CUST,REC_CUST,378;C7
	Mat Read #CH_CUST,REC_CUST,388;A3$
	Mat Read #CH_CUST,REC_CUST,410;C8
	Mat Read #CH_CUST,REC_CUST,412;C9
	Mat Read #CH_CUST,REC_CUST,418;SUB_
	Mat Read #CH_CUST,REC_CUST,420;U1
	Mat Read #CH_CUST,REC_CUST,426;U2$
	Mat Read #CH_CUST,REC_CUST,486;A0
	Mat Read #CH_CUST,REC_CUST,502;S0
	Mat Read #CH_CUST,REC_CUST,544;CFIN
	Mat Read #CH_CUST,REC_CUST,598;SZN
	Mat Read #CH_CUST,REC_CUST,600;BT$
	Mat Read #CH_CUST,REC_CUST,620;REC
	Mat Read #CH_CUST,REC_CUST,624;C10
	Mat Read #CH_CUST,REC_CUST,660;C11
	Mat Read #CH_CUST,REC_CUST,668;C12
	! mat read #ch_cust,Rec_cust,728;PPu$
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ProcessCustomerLastPrice()
try
	KLP$ = KCUST$
	do
		Search #CH_LASTPR,3,1;KLP$,REC_LASTPR,E
		If E > 2 error 11000
		if e or klp$[1,6] <> kcust$[1,6] exit do
		call ReadLastPrice()
		if prctype <> 4 ! don't check for last purchased for cpi
			LAST_DATE = LPC1[2]
			LAST_DATE$ = LAST_DATE Using "&&&&&&"
			Call DateToJulian(1,LAST_DATE$,JULIAN_LAST_DATE$,E) \ If E Goto SkipLastPrice
			JULIAN_LAST_DATE = JULIAN_LAST_DATE$
			! DFT_DAYS
			If (JULIAN_CURRENT_DATE - JULIAN_LAST_DATE) > DFT_DAYS goto SkipLastPrice !"within the (WAS) 365 day purchase limit
		end if
		KPROD$ = LP$
		call ReadProduct()
		If E Goto SkipLastPrice ! no nonstks 
		WHSE_FOUND = FALSE
		If WHSEPR
			call ReadProductWarehouse()
			If Not(E) WHSE_FOUND = TRUE
		end if
		notify = DidPriceChange()
		if notify
			call SendAlert()
		end if
	SkipLastPrice: !
	loop
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ProcessProductLastPrice()
try
	CurrentProduct$ = alertcc.ProductID$,"            "
	KLP$ = CurrentProduct$
	KCUST$ = ""
	KPROD$ = CurrentProduct$
	call ReadProduct()
	If E exit sub ! no nonstks 
	do
		Search #CH_LASTPR,3,5;KLP$,REC_LASTPR,E
		If E > 2 error 11000
		if e or klp$[1,12] <> CurrentProduct$[1,12] exit do
		KCUST$[1,6] = KLP$[21,26]
		Search #CH_CUST,2,1;KCUST$,REC_CUST,E \ If E > 2 error 11000
		IF E goto SkipLastPriceProduct
		call ReadCustomer()
		call ReadLastPrice()
		if prctype <> 4 ! don't check for last purchased for cpi
			LAST_DATE = LPC1[2]
			LAST_DATE$ = LAST_DATE Using "&&&&&&"
			Call DateToJulian(1,LAST_DATE$,JULIAN_LAST_DATE$,E) \ If E Goto SkipLastPriceProduct
			JULIAN_LAST_DATE = JULIAN_LAST_DATE$
			! DFT_DAYS
			If (JULIAN_CURRENT_DATE - JULIAN_LAST_DATE) > DFT_DAYS goto SkipLastPriceProduct !"within the (WAS) 365 day purchase limit
		end if
		WHSE_FOUND = FALSE
		If WHSEPR
			call ReadProductWarehouse()
			If Not(E) WHSE_FOUND = TRUE
		end if
		notify = DidPriceChange()
		if notify
			call SendAlert()
		end if
	SkipLastPriceProduct: !
	loop
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub



sub ReadLastPrice()
try
	Rem {begin src/inc/read.lastpr.i}
	Mat Read #CH_LASTPR,REC_LASTPR,0;LP$
	Read #CH_LASTPR,REC_LASTPR,12;LPDF
	Mat Read #CH_LASTPR,REC_LASTPR,16;LPC1
	Mat Read #CH_LASTPR,REC_LASTPR,28;LPC2
	Mat Read #CH_LASTPR,REC_LASTPR,46;LPC3
	Mat Read #CH_LASTPR,REC_LASTPR,56;LP2$
	Mat Read #CH_LASTPR,REC_LASTPR,140;LPC4
	Mat Read #CH_LASTPR,REC_LASTPR,164;LPMT$
	Read #CH_LASTPR,REC_LASTPR,166;AI
	Mat Read #CH_LASTPR,REC_LASTPR,168;LPR
	Mat Read #CH_LASTPR,REC_LASTPR,198;LPR1
	Mat Read #CH_LASTPR,REC_LASTPR,214;LPEUN
	Mat Read #CH_LASTPR,REC_LASTPR,220;LPUNF
	Mat Read #CH_LASTPR,REC_LASTPR,262;PERM
	Read #CH_LASTPR,REC_LASTPR,274;LPWH
	Mat Read #CH_LASTPR,REC_LASTPR,276;LPC5
	Read #CH_LASTPR,REC_LASTPR,292;LPPCDATE
	Read #CH_LASTPR,REC_LASTPR,296;LPLPERM
	Mat Read #CH_LASTPR,REC_LASTPR,302;LPCURR
	Read #CH_LASTPR,REC_LASTPR,314;LPCPT
	Read #CH_LASTPR,REC_LASTPR,316;LPCSDT
	Read #CH_LASTPR,REC_LASTPR,320;LPDEPT
	Mat Read #CH_LASTPR,REC_LASTPR,324;LPFPERM
	Mat Read #CH_LASTPR,REC_LASTPR,336;PPPUSERID
	Mat Read #CH_LASTPR,REC_LASTPR,340;LPUNIT
	Mat Read #CH_LASTPR,REC_LASTPR,352;PPPCID
	Rem {end read.lastpr.i}
	Unlock #CH_LASTPR
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ReadProduct()
try
	Search #CH_PROD,2,1;KPROD$,REC_PROD,E
	If E > 2 error 11000
	If E exit sub ! no nonstks 
	Rem {begin src/inc/read.prod.i}
	Mat Read #CH_PROD,REC_PROD,0;A$
	Mat Read #CH_PROD,REC_PROD,156;B
	Mat Read #CH_PROD,REC_PROD,256;A
	Mat Read #CH_PROD,REC_PROD,460;A1
	Mat Read #CH_PROD,REC_PROD,508;A2
	Mat Read #CH_PROD,REC_PROD,512;PFU1
	Mat Read #CH_PROD,REC_PROD,554;PFU2
	Mat Read #CH_PROD,REC_PROD,596;PRPARC
	Mat Read #CH_PROD,REC_PROD,620;LM
	Mat Read #CH_PROD,REC_PROD,624;PR_PO
	Mat Read #CH_PROD,REC_PROD,628;AGEDAY
	Read #CH_PROD,REC_PROD,630;LLC
	Mat Read #CH_PROD,REC_PROD,632;PSN$
	Mat Read #CH_PROD,REC_PROD,652;PSN
	Mat Read #CH_PROD,REC_PROD,660;U2
	Mat Read #CH_PROD,REC_PROD,664;LBSORD
	Mat Read #CH_PROD,REC_PROD,670;U4
	Read #CH_PROD,REC_PROD,678;U3
	Mat Read #CH_PROD,REC_PROD,684;U3$
	Mat Read #CH_PROD,REC_PROD,744;HZ$
	Mat Read #CH_PROD,REC_PROD,834;A3
	Mat Read #CH_PROD,REC_PROD,846;PFTB
	Read #CH_PROD,REC_PROD,854;UPCT
	Mat Read #CH_PROD,REC_PROD,856;C1$
	Mat Read #CH_PROD,REC_PROD,894;PR_C4
	Read #CH_PROD,REC_PROD,938;PF_LOAD2
	Mat Read #CH_PROD,REC_PROD,944;PR_A2$
	Mat Read #CH_PROD,REC_PROD,974;PFCO
	Mat Read #CH_PROD,REC_PROD,990;PLV
	Mat Read #CH_PROD,REC_PROD,1002;PLC
	Mat Read #CH_PROD,REC_PROD,1018;PFN
	Mat Read #CH_PROD,REC_PROD,1030;STK
	Mat Read #CH_PROD,REC_PROD,1048;FDT
	Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
	Mat Read #CH_PROD,REC_PROD,1066;PRBASE
	Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
	Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
	Mat Read #CH_PROD,REC_PROD,1088;FUT
	Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
	Mat Read #CH_PROD,REC_PROD,1108;PRREDI
	Mat Read #CH_PROD,REC_PROD,1120;PIC$
	Mat Read #CH_PROD,REC_PROD,1270;PRD0
	Mat Read #CH_PROD,REC_PROD,1282;PRIML$
	Mat Read #CH_PROD,REC_PROD,1294;PRD1
	Mat Read #CH_PROD,REC_PROD,1304;PRD2
	Rem {end read.prod.i}
	Unlock #CH_PROD
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub ReadProductWarehouse()
try
	KPRWH$ = " ",KPRWH$
	KPRWH$[1,12] = A$[140,151]
	KPRWH$[13,14] = WHSE Using "##"
	Search #CH_PRWH,2,1;KPRWH$,REC_PRWH,E
	If E > 2 error 11000
	If E exit sub
	Rem {begin src/inc/read.prwh.i}
	Mat Read #CH_PRWH,REC_PRWH,0;W1$
	Mat Read #CH_PRWH,REC_PRWH,32;W1
	Mat Read #CH_PRWH,REC_PRWH,38;W2
	Mat Read #CH_PRWH,REC_PRWH,78;W3
	Mat Read #CH_PRWH,REC_PRWH,228;W5
	Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
	Read #CH_PRWH,REC_PRWH,396;WHLPOOL
	Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
	Read #CH_PRWH,REC_PRWH,404;FCWGT
	Mat Read #CH_PRWH,REC_PRWH,420;W0
	Mat Read #CH_PRWH,REC_PRWH,428;WH7
	Mat Read #CH_PRWH,REC_PRWH,444;WH8
	Mat Read #CH_PRWH,REC_PRWH,540;WH9
	Mat Read #CH_PRWH,REC_PRWH,696;W7
	Mat Read #CH_PRWH,REC_PRWH,756;WH3$
	Mat Read #CH_PRWH,REC_PRWH,780;WHLV
	Read #CH_PRWH,REC_PRWH,798;WHRPLN
	Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
	Mat Read #CH_PRWH,REC_PRWH,842;WHLM
	Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
	Read #CH_PRWH,REC_PRWH,894;RESTRICTED
	Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
	Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
	Read #CH_PRWH,REC_PRWH,922;VLIST
	Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
	Read #CH_PRWH,REC_PRWH,938;WHBASE
	Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
	Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
	Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
	Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
	Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
	Rem {end read.prwh.i}
	Unlock #CH_PRWH
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

Function DidPriceChange()
try
	PRICE_CHANGED = FALSE
	PRICE_MAY_CHANGE = FALSE
	JULIAN_EFF_DATE = 0
	if ProcessingCurrentChanges
		PRICE_MAY_CHANGE = TRUE
	else ! processing future
		! looking for "future" changes
		If PLC[0] And PLC[1] !"is there a pending last cost change?
			WORK$ = PLC[1] Using "&&&&&&"
			call CheckDate()
		End If 
		If PFCO[0] And PFCO[1] !"is there a pending base cost change?
			WORK$ = PFCO[1] Using "&&&&&&"
			call CheckDate()
		End If 
		If FUT[1] And FDT[0]
			WORK$ = FDT[0] Using "&&&&&&"
			call CheckDate()
		End If 
		If FUT[1] And FDT[1]
			WORK$ = FDT[1] Using "&&&&&&"
			call CheckDate()
		End If 
		If LPFPERM[0] And LPFPERM[1] ! "future pending
			WORK$ = LPFPERM[1] Using "&&&&&&"
			call CheckDate()
		End If 
		If WHSEPR And WHSE_FOUND !"check for warehouse specific cost changes
			If W7[7] And W7[13] !"is there an pending last cost change?
				WORK$ = W7[13] Using "&&&&&&"
				call CheckDate()
			End If 
			If W7[2] And W7[3] !"is there an pending base cost change?
				WORK$ = W7[3] Using "&&&&&&"
				call CheckDate()
			End If 
			If WHFUT[1] And WHFDT[0]
				WORK$ = WHFDT[0] Using "&&&&&&"
				call CheckDate()
			End If 
			If WHFUT[1] And WHFDT[1]
				WORK$ = WHFDT[1] Using "&&&&&&"
				call CheckDate()
			End If 
		End If !"end of warehouse specific pending cost changes
		!! we want call price to determine price/cost change so ALL PASS THRU
		! If Not(PRICE_MAY_CHANGE) Return 
		If not(price_may_change) ! still need eff_date!!
			Julian_eff_date=JULIAN_ENDING_EFFDATE ! set to end date
		Endif
		WORK$ = JULIAN_EFF_DATE Using "&&&&&"
		Call JulianToDate(1,WORK$,WORK$,E) \ If E error 11000
		Call VerifyDate(WORK$,WORK$,E) \ If E error 11000
		EFF_DATE = Val(WORK$)
	end if ! processing future changes
	KCMDTY$ = A$[152,155]
	Search #CH_CMDTY,2,1;KCMDTY$,REC_CMDTY,E \ If E error 11000
	! when processing for current changes (not future):
	!   STATE=CURRENT = PAST PRICE / COST based on what cost factors were at
	!                  before changes was made
	!   STATE=FUTURE = CURRENT PRICE / COST (after changes made)
	For STATE = CURRENT To FUTURE
		FLEPTR[1,0] = CH_PROD;FLEPTR[1,1] = REC_PROD
		FLEPTR[2,0] = CH_PRWH;FLEPTR[2,1] = 0
		If WHSE_FOUND Let FLEPTR[2,1] = REC_PRWH
		FLEPTR[3,0] = CH_CMDTY;FLEPTR[3,1] = REC_CMDTY
		FLEPTR[4,0] = CH_LASTPR;FLEPTR[4,1] = REC_LASTPR
		FLEPTR[5,0] = CH_SPECPRICE;FLEPTR[5,1] = 0
		FLEPTR[6,0] = CH_CONTRACTH;FLEPTR[6,1] = 0
		FLEPTR[7,0] = CH_CCODES;FLEPTR[7,1] = 0
		FLEPTR[8,0] = CH_BRKTBL;FLEPTR[8,1] = 0
		SPECS[0] = 0
		SPECS[1] = LPC2[0]
		SPECS[2] = LPR1[0] * SPECS[1]
		SPECS[3] = LPC1[0]
		SPECS[4] = WHSE
		clear exspecs[]
		If STATE = CURRENT
			SPECS[5] = CURRENT_DATE
			if ProcessingCurrentChanges
				! when processing current changes
				! we are looking to review the price
				! based on OLD costs, so load 'em
				! up for the pricing routine
				exspecs[2] = alertcc.Warehouse
				if not(alertcc.Warehouse) exspecs[2] = -1
				if alertcc.OldLoadedCost <> SQLNULL() let exspecs[3] = alertcc.OldLoadedCost
				if alertcc.OldLoaded2Cost <> SQLNULL() let exspecs[4] = alertcc.OldLoaded2Cost
				if alertcc.OldPOCost <> SQLNULL() let exspecs[5] = alertcc.OldPOCost
				if alertcc.OldNetPOCost <> SQLNULL() let exspecs[6] = alertcc.OldNetPOCost
				if alertcc.OldBaseCost <> SQLNULL() let exspecs[7] = alertcc.OldBaseCost
				if alertcc.OldAvgCost <> SQLNULL() let exspecs[8] = alertcc.OldAvgCost
				exspecs[9] = -1 \ exspecs[10] = -1 ! default no change to load tables
				if alertcc.OldLoadTable <> SQLNULL() let exspecs[9] = alertcc.OldLoadTable
				if alertcc.OldLoad2Table <> SQLNULL() let exspecs[10] = alertcc.OldLoad2Table
			end if
		Else 
			if ProcessingCurrentChanges
				SPECS[5] = CURRENT_DATE
			else ! looking for future date
				SPECS[5] = - ENDING_EFFDATE ! EFF_DATE
			end if
		End If 
		SPECS[6] = LPDEPT
		SPECS[7] = REC_PRCTYPE
		SPECS[8] = 1
		SPECS[9] = DFT_COST
		SPECS[10] = 0
		SPECS[11] = 0
		If STATE = CURRENT
			SPECS[12] = 0
		Else 
			SPECS[12] = NOLOWER
		End If 
		SPECS[13] = LPC3[2]
		SPECS[14] = LPC3[3]
		SPECS[15] = LPC3[4]
		SPECS[16] = 0
		SPECS[17] = 0
		SPECS[18] = 0
		SPECS[19] = 0
		SPECS[20] = 0
		SPECS[21] = 0
		!Call "price",FLEPTR[],SPECS[],MSGDESC$
		call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,0,"","",exspecs[])
		If SPECS[0] Return 
		PRICE[STATE] = SPECS[23]
		COST1[STATE] = SPECS[17]
		PTYPE[STATE] = SPECS[25] ! pricing type
		CONTR[STATE] = SPECS[27] ! contract number
		RCONTR[STATE] = SPECS[24] ! rebate contract #
		If STATE = 0 And LPEUN[2] = -7 ! LPC3[0] = -7 !if current and it's a permanent price
			! is this only fixed permprice or any manual permprice?
			! this sets the cost to perm cost so will appear on report if different from future!
			If PPU$[1] <> "P"
				If PERM[1] Let COST1[STATE] = PERM[1]
			End If 
		End If ! Burke 191642 - (does not read ppu$)?
		LET X1=PTYPE[STATE]
		IF X1=2 OR X1=3 OR X1=4 OR x1=6 or X1=7 or x1=8 or x1=11 or x1=12 or x1=13
			IF CONTR[STATE]=0 LET CONTR[STATE]=0-X1 ! IT'S SPECIAL, NOT A CONTRACT
		End if
		! need to check display cost/prices (not base)
		CNVTA = PRICE[STATE]
		CNVTU[0] = 0
		CNVTU[1] = LPC3[3]
		CNVTU[2] = 2
		call Convert()
		DPRICE[STATE] = AMOUNT
		CNVTA = COST1[STATE]
		CNVTU[0] = 0
		CNVTU[1] = LPC3[3]
		CNVTU[2] = 2
		call Convert()
		DCOST1[STATE] = AMOUNT
	Next STATE
	If DPRICE[CURRENT] <> DPRICE[FUTURE] AND PRICE_MAY_CHANGE = TRUE Let PRICE_CHANGED = TRUE ! per 241721 ** Only show products with a cost change ** 
	!Rem next line, if report only, cost change=margin change so print it
	If DCOST1[CURRENT] <> DCOST1[FUTURE] Let PRICE_CHANGED = TRUE
	if costchange ! only want where cost increased
		if dcost1[future]=Dcost1[current] let price_changed=false ! did not change cost
	Endif
	! ADD - CHECK IF WANTED PRICE TYPE changed
	IF PRCTYPE=1 ! PRODUCT PRICED
		IF LPEUN[2]=-7 Let PRICE_CHANGED = FALSE ! PERM
		let x1=ptype[CURRENT] ! Curr price type from call price
		if x1=2 or x1=3 or x1=4 or x1=6 or X1=7 or x1=8 or x1=11 or x1=12 or x1=13 Let PRICE_CHANGED = FALSE
	Endif
	if PRCTYPE=2 ! SPECIAL/CONTRACT ONLY
		IF LPEUN[2]=-7 Let PRICE_CHANGED = FALSE ! PERM
		let x1=ptype[CURRENT] ! curr price type from call price
		IF X1<2 OR X1=5 OR X1=9 OR x1=10 or x1=14 Let PRICE_CHANGED = FALSE
	Endif
	if prctype=3 ! PERM ONLY
		if LPEUN[2]<>-7 Let PRICE_CHANGED = FALSE ! NOT PERM
	Endif
	if prctype=4 and PRICE_CHANGED ! CPI ONLY
		if LPEUN[2]=-7 Let PRICE_CHANGED = FALSE ! PERM
		let x1=ptype[CURRENT] ! Curr price type from call price
		IF X1<2 OR X1=5 OR X1=9 OR x1=10 or x1=14 Let PRICE_CHANGED = FALSE
		LET PRICE_CHANGED = VerifyCPI(CONTRACT[CURRENT])
	endif 
	iF Ptype[current]=14 and ptype[future]=14 ! man gtm - works differently
		if DPRICE[CURRENT]=DPRICE[FUTURE] LET PRICE_CHANGED=FALSE ! same price - diff cost?
	Endif ! cost may have changed above (PPU$) - but price still the same
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Function PRICE_CHANGED

sub CheckDate()
try
	Call DateToJulian(1,WORK$,WORK$,E)
	If Not(E)
		If Val(WORK$) >= JULIAN_BEGIN_EFFDATE And Val(WORK$) <= JULIAN_ENDING_EFFDATE
			If JULIAN_EFF_DATE < Val(WORK$) Let JULIAN_EFF_DATE = Val(WORK$)
			PRICE_MAY_CHANGE = TRUE
		End If 
	End If 
else ! main try
	include "src/utilcallsuberr.inc"
end try
End sub

Function VerifyCPI(contractNo)
try
	dim 1%,cpiFlag
	dim 3%
	CPIOK = FALSE
	tmp$ = "C",contr[CURRENT] using "#####"
	search #ch_contracth,2,1;tmp$,rec_contracth,e \ if e>1 error 11000
	if not(e)
		mat read #ch_contracth,rec_contracth,50;cpiFlag;
		if (cpiFlag) let CPIOK = TRUE
	end if
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Function CPIOK

sub SendAlert()
try
	! see if this alert has already been sent, if so, don't do it again
	sql$ = "SELECT AlertDec2, AlertDec4 "
	sql$ = sql$+"FROM alertheader H "
	sql$ = sql$+"INNER JOIN alertdata D ON D.AlertID = H.AlertID "
	sql$ = sql$+"INNER JOIN alerttrailer T ON D.AlertID = T.AlertID "
	sql$ = sql$+"WHERE `AlertType` = 41 AND "
	sql$ = sql$+"`CustID` = " + SQLDT$(C1[1]) + " AND "
	sql$ = sql$+"`SlspID` = " + SQLDT$(C1[2]) + " AND "
	sql$ = sql$+"`ProdID` = " + SQLDT$(rtrim$(a$[140,151])) + " "
	sql$ = sql$+"ORDER BY PurgeAfterDate DESC"
	SEARCH #ch_sql;sql$
	if (chf(ch_sql) >= 1) ! at least 1 result - Maybe already out there
		read #ch_sql;AlertNewCost,AlertNewPrice
		if AlertNewCost = DCOST1[FUTURE]
			if not(CostChange) ! not just cost changes, but price as well
				! cost and price the same, nothing new
				if AlertNewPrice = DPRICE[FUTURE] exit sub
			else ! don't care about price, just the cost, and it's the same
				exit sub
			end if
		end if
		! delete any prior - for this salesrep, this customer, this product,
		! should only be 1 notification - delete from header CASCADEs to
		! data and trailer
		sql$ = "DELETE FROM alertheader WHERE AlertID IN "
		sql$ = sql$+"(SELECT AlertID FROM alertdata WHERE "
		sql$ = sql$+"`AlertType` = 41 AND "
		sql$ = sql$+"`CustID` = " + SQLDT$(C1[1]) + " AND "
		sql$ = sql$+"`SlspID` = " + SQLDT$(C1[2]) + " AND "
		sql$ = sql$+"`ProdID` = " + SQLDT$(rtrim$(a$[140,151])) + ")"
		SEARCH #ch_sql;sql$
	end if
	clear passinfo[]
	clear msg$
	passinfo[0] = 41 ! alert number
	passinfo[1] = C1[2] ! salesrep number
	passinfo[2] = C1[1] ! customer number
	passinfo[3] = REC_PROD ! product record
	if WHSE_FOUND
		passinfo[4] = REC_PRWH! warehouse product record
	else
		passinfo[4] = 0
	end if
	if not(ProcessingCurrentChanges) passinfo[5] = EFF_DATE ! effective date only for future
	passinfo[6] = PTYPE[CURRENT] ! old price type
	passinfo[7] = PTYPE[FUTURE] ! new price type
	passinfo[8] = DCOST1[CURRENT] ! old cost
	passinfo[9] = DCOST1[FUTURE] ! new cost
	passinfo[10] = DPRICE[CURRENT] ! old price
	passinfo[11] = DPRICE[FUTURE] ! new price
	passinfo[12] = CONTR[CURRENT] ! old contract number
	passinfo[13] = CONTR[FUTURE] ! new contract number
	passinfo[14] = RCONTR[CURRENT] ! old rebate contract number
	passinfo[15] = RCONTR[FUTURE] ! new rebate contract number
	call "libalertproc.lib",passinfo[],ch[],msg$,1
else ! main try
	include "src/utilcallsuberr.inc"
end try
End Sub

sub Convert()
try
	Rem {begin rtn.convert.s}
	CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
	If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
	If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
	If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
	If CNVTU[2] = 0 Goto CVTSTARTA
	If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
	CVTSTARTA: Rem ALL UB 5+!!  IF SPC 4>1280 GOTO cvtstartb: ! "unibasic 5+
	Rem REM "======= unibasic <5 logic
	Rem SWAP 1,"MXPRCONV"
	Rem IF CNVTU[2]=3 or CNVTU[2]=4 GOTO cvtdone: ! "um window
	Rem cvttry: ! "this is a remark
	Rem SIGNAL 2,X1,AMOUNT,FLAG \ IF X1=-1 LET E=0 \ GOSUB err_search:
	Rem IF X1<>SPC(6) GOTO cvttry:
	Rem IF CNVTU[2]=0 GOTO cvtdone: !!TEST IF VALID CONVERSION
	Rem IF FLAG LET E=FLAG \ GOSUB err_search:
	Rem GOTO cvtdone:
	CVTSTARTB: Rem "====== unibasic 5+ logic
	Call "MXPRCONV5.DL4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
	If CNVTU[2] = 0 Goto CVTDONE
	If FLAG Let E = FLAG \ error 11000
	AMOUNT = CNVTA
	CVTDONE: ! goodbye
	Rem {end rtn.convert.s}
else ! main try
	include "src/utilcallsuberr.inc"
end try
End sub

