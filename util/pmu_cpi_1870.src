! pmu_cpi_1870 - initialize add'l fields - qty allocated and occassional
!
! loadsave -w -n 100,10 -o prog/util/pmu_cpi_1870.dl4 src/pmu_cpi_1870.src
!
! PMUPGRADER ROUTINE

external lib "ubsfunc.dl4"
declare intrinsic sub programdump,datetojulian
Declare Intrinsic Sub InpBuf,String,Time
Declare Intrinsic Function findchannel
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"


DIM tmp$[200],p61$[256]
DIM 3%

try close #1 else rem
Open #1,"cntrl/cntrl"+Str$(COID)
Mat Read #1,61,0;p61$;

Let COL=0;Row=23

if p61$[111,111] <> "Y"
	Let LOGMSG$="CPI FLAG NOT SET - SKIPPING."
	Gosub DO_WRITE_LOG:
	Goto DO_Exit:
end if

Let FCode$="CPIDET"
LET OWRITE$="ye 'cpi_1870'"
LET MODE=0 ! "copy existing file
GOSUB DO_BACKUP: ! "ALWAYS BACKUP EXISTING!!!
Let FCODE$="CPICUST"
LET OWRITE$="ye 'cpi_1870'"
LET MODE=0 ! "copy existing file
GOSUB DO_BACKUP:

open #2,"2/CPIDET"+str$(coid)
gosub UpdateCPIDET
close #2
open #2,"2/CPICUST"+str$(coid)
gosub UpdateCPICUST
close #2
goto do_exit:

UpdateCPIDET: !
	dim 3%,allocqty
	
	allocqty = 0
	tmp$ = " ",tmp$
	LET LOGMSG$="Initialize quantity allocated for CPIDET records."
	GOSUB DO_WRITE_LOG:
	LET CH=2 \ GOSUB GET_ACTIVE_RECS:
	LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
	GOSUB DO_WRITE_LOG:
	REC = 0
	do
		search #2,3,1;tmp$,r,e \ if e>2 error 11000
		LET REC=REC+1
		IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS: ! to screen or log
		mat write #2,r,68;allocqty;
		if e exit do
	loop
RETURN


UpdateCPICUST: !
	dim 1%,occassional,3%
	
	occassional = 0
	tmp$ = " ",tmp$
	LET LOGMSG$="Initialize occassional flag for CPICUST records."
	GOSUB DO_WRITE_LOG:
	LET CH=2 \ GOSUB GET_ACTIVE_RECS:
	LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
	GOSUB DO_WRITE_LOG:
	REC = 0
	do
		search #2,3,1;tmp$,r,e \ if e>2 error 11000
		LET REC=REC+1
		IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS: ! to screen or log
		mat write #2,r,14;occassional;
		if e exit do
	loop
RETURN

DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
try close #4 Else Rem
try close #5 Else Rem
try close #6 Else Rem
try close #7 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try