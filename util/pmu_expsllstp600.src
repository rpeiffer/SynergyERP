! Expandsllastp600 - Rebuild / Expand shiplist last price File to 600 bytes
! check if dir 5 have product code first
!
! loadsave -w -n 100,10 -o prog/util/pmu_expsllstp600.dl4 src/pmu_expsllstp600.src
!
! PMUPGRADER ROUTINE

! task 18828!

external lib "ubsfunc.dl4"
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"

dim lp$[12], lp2$[84], lpmt$[2], tmpprod$[20],cslk$[14],B4Key$[8]
dim 1%, lpc3[4], ai, lpeun[2], lpwh, lpcpt, PPPUserID
dim 2%, lpsl,lpc1[2],lpr1[3],lpc5[3],lpPCDate,lpCSDT,LPDept,PPPCID[1]
Dim 2%, prvod[2], 3%,prvoq[3] ! new flds
dim 3%, lpc2[2], lpc4[3], lpr[4], lpunf[6], perm[1], lpLPerm, lpcurr[1]
dim 3%, lpfperm[1],lpunit[1], InvNum


DIM ANS$[20],FILE$[20],FT$[2],X$[20],DPWIDX$[200]
DIM K1$[50],LU$[2],NK1$[50],K2$[50],K3$[50],K4$[50],K5$[50]
DIM 1%,FLAG,K1SIZE,K2SIZE,DSLS$[200]
DIM Ftemp$[16],F$[16],P9$[50],CMD$[400]
DIM 1%,FFILE$[200],WORK$[200],blank$[200]
DIM 2%,D3[1],X2,SC2[8]
DIM 3%,R1,R2,R3,i
B4Key$=" ",B4Key$
blank$=" ",blank$
LET TRUE=1;FALSE=NOT(TRUE)
try close #1 else rem
ROPEN #1,"cntrl/cntrl"+STR$(COID)
MAT READ #1,19,50;P9$;
ftemp$="3/sllstprc"+Str$(COID)
LET ROW=23;COL=0
Open #2,Ftemp$

x2=chf(302) ! file size wrds
Close #2
if x2>192 let efbig=1
!#comment! loope through anyway
!If X2>192 ! "it's already done
!	Let LOGMSG$="File "+Ftemp$+" is already expanded "
!	Gosub DO_WRITE_LOG:
 !	Goto DO_Exit:
!Endif
! #endcomment
LET ORIG$=""
LET OWRITE$="ye 'xpdc'" ! "overwrite existing BU and add .xpdc to name
LET FCODE$="SLLSTPRICE"
LET MODE=1 ! "move file as we're rebuilding it
GOSUB DO_BACKUP:
ffile$=ftemp$

read #1,88,1376;f$;
Open #4,f$ !! last price
Read #1,88,1792;F$;
ropen #5,F$		!! PROD FILE

CONVERT_FILE: REM"Convert the given file
LET ROW=23;COL=0
if not(fromUpgrade) PRINT @COL,ROW;"Converting "+FFILE$;
LET COL=COL+13+LEN(FFILE$)
OPEN #2,DFILE$ ! "file in new location
LET CH=2 \ GOSUB GET_ACTIVE_RECS:
LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
GOSUB DO_WRITE_LOG:
LET FCODE$="SLLSTPRICE"
LET PTH$=""
LET OWRITE$="y"
LET WORK$=DFILE$
GOSUB DO_BUILD:
LET FFILE$=DFILE$ ! "new file & location
LET DFILE$=WORK$
cmd$="chmod go+rw files/3/sllstprc*" ! all
system cmd$
OPEN #3,FFILE$
LET K1$=" ",K1$;REC=0
let lpdir5=0
search #3,1,5;k1$,lpdir5,e
if not(e) let lpdir5=1
maxrec=0

OLDFLELOOP: REM "Loop thru all old Dir 1
SEARCH #2,3,1;K1$,R2,E \ IF E=2 GOTO COPYDONE:
if e>2
	LOGMSG$ = "ERROR "+str$(e)+" during search of backed up file"
	gosub DO_WRITE_LOG
	call programdump()
endif
let CH_LastPr=2;Rec_LastPr=r2
GOSUB READ_rec: ! "read orig file info (custsls included!)
tmpprod$=" ",tmpprod$
tmpprod$[1,12]=lp$[1,12]
if lpc4[3] ! nonstock
	if lp2$[1,3]<>"   " ! is anytihing in vendor item code?
		k5$=" ",k5$
		k5$[1,20]=lp2$[1,20]
		search #5,2,1;k5$,rec5,e ! \ if e>2 gosub err_search:
		if e
			tmpprod$=lp2$[1,20]
		endif
	endif
endif
k4$=" ",k4$ ! see if lastprice is there? - lets
k4$[1,6] = K1$[1,6] ! cust
  k4$[7,30] = K1$[13,36] ! dept/prod
  !k4$[31,36] = lpc4[1] using "######" ! vendor was K1$[7,12]-shiplist#
  !k4$[37,40] = K1$[37,40] ! commodity
  k4$[31]="" ! cut off vendor/commod
  Rem "so ends up same as cust lpr dir 1!
Search #4,2,1;k4$,R4,e
if e=1 
	Logmsg$="SLKEY1= "+k1$+" not in LP K1 = "+k4$
	gosub do_write_log
	goto OLDFLELOOP ! not there - bypass?
Endif
IF E>1
	LOGMSG$ = "ERROR "+str$(e)+" during search of lastprice file"
	gosub DO_WRITE_LOG
	call programdump()
endif
Mat write #4,r4,460;b4key$; ! blank for key
LET NK1$=" ",NK1$
LET NK1$=K1$
SEARCH #3,2,1;NK1$,R3,E \ IF E=0 GOTO OLDFLELOOP:
IF E>1
	LOGMSG$ = "ERROR "+str$(e)+" during search of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
Let E=2;R3=0
Search #3,1,0;NK1$,R3,E
if e 
	LOGMSG$ = "ERROR "+str$(e)+" during search of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
LET k2$=" ",k2$
!LET k2$=lpC1 USING "######" ! "cust
!LET K2$[7,12] = LPSL Using "&&&&&&"
!If P9$[44,44] = "Y" LET k2$[13,16]=LPDept USING "####" Else Let K5$[13,16] = "   0" ! "dept
!LET k2$[17,36]=tmpprod$  !  lP$[1,12] ! "prod
! k2$[31,36]=lpC4[1] USING "######" ! no vendor
let k2$=K1$ ! let's not rebuild it! Use original!
!LET k2$[37]=lP2$[81,84]," "
SEARCH #3,4,1;k2$,R3,E
if e 
	LOGMSG$ = "ERROR "+str$(e)+" during insert dir 1 of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
 !
let CH_LastPr=3;Rec_LastPr=r3
GOSUB WRITE_rec: ! "write new record (custsls included!)
LET k3$=" ",k3$;k3$=K2$[1,16] + k2$[37,40] + k2$[17,36]
Let R1=R3
SEARCH #3,4,2;k3$,R1,E
if e 
	LOGMSG$ = "ERROR "+str$(e)+" during insert dir 2 of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
LET k3$=" ",k3$;k3$=k2$[1,16];k3$[17,22]=999999-LPR1[2] USING "######"
LET k3$[23,46]=k2$[17,40]
Let R1=R3
SEARCH #3,4,3;k3$,R1,E
if e 
	LOGMSG$ = "ERROR "+str$(e)+" during insert dir 3 of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
LET k3$=" ",k3$;k3$[1,6]=k2$[1,6];k3$[7,30] = k2$[13,36]
LET k3$[31,36] = k2$[7,12] ! normally vendor
Let k3$[37,40] = k2$[37,40]
Rem "so ends up same as cust lpr dir 1!
Let R1=R3
SEARCH #3,4,4;k3$,R1,E
if e 
	LOGMSG$ = "ERROR "+str$(e)+" during insert dir 4 of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
LET k3$=" ",k3$;k3$=k2$[17,36]
Let k3$[21,36]=k2$[1,16];k3$[37]=k2$[37]
Let R1=R3;e=0
if lpdir5 Search #3,4,5;K3$,R1,E
if e 
	LOGMSG$ = "ERROR "+str$(e)+" during insert dir 5 of new file"
	gosub DO_WRITE_LOG
	call programdump()
endif
LET REC=REC+1
IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS: ! to screen or log
GOTO OLDFLELOOP:


COPYDONE: REM "Copy is Done 
XferDone: ! "
LET LOGMSG$="Finished with file expand & transfer"
GOSUB DO_WRITE_LOG:
CLOSE #2,#3,#4,#5
Goto DO_EXIT:


READ_rec: REM Read File
! Read last price file
Mat Read #CH_LastPr,Rec_LastPr,  0; LP$
	Read #CH_LastPr,Rec_LastPr, 12; LPSL
Mat Read #CH_LastPr,Rec_LastPr, 16; LPC1
Mat Read #CH_LastPr,Rec_LastPr, 28; LPC2
Mat Read #CH_LastPr,Rec_LastPr, 46; LPC3
Mat Read #CH_LastPr,Rec_LastPr, 56; LP2$
Mat Read #CH_LastPr,Rec_LastPr,140; LPC4
Mat Read #CH_LastPr,Rec_LastPr,164; LPMT$
	Read #CH_LastPr,Rec_LastPr,166; AI
Mat Read #CH_LastPr,Rec_LastPr,168; LPR
Mat Read #CH_LastPr,Rec_LastPr,198; LPR1
Mat Read #CH_LastPr,Rec_LastPr,214; LPEUN
Mat Read #CH_LastPr,Rec_LastPr,220; LPUNF
Mat Read #CH_LastPr,Rec_LastPr,262; PERM
	Read #CH_LastPr,Rec_LastPr,274; LPWH
Mat Read #CH_LastPr,Rec_LastPr,276; LPC5
	Read #CH_LastPr,Rec_LastPr,292; LPPCDate
	Read #CH_LastPr,Rec_LastPr,296; LPLPerm
Mat Read #CH_LastPr,Rec_LastPr,302; LPCurr
	Read #CH_LastPr,Rec_LastPr,314; LPCPT
	Read #CH_LastPR,Rec_LastPr,316; LPCSDT
	Read #CH_LastPR,Rec_LastPR,320; LPDept
Mat Read #CH_LastPr,Rec_LastPr,324; LPFPerm
Mat Read #CH_LastPr,Rec_LastPr,336; PPPUserId
Mat Read #CH_LastPr,Rec_LastPr,340; LPUnit
Mat Read #CH_LastPr,Rec_LastPr,352; PPPCID
MAT READ #CH_LASTPR,REC_LASTPR,360; CSLK$
if efbig ! already expanded - read extra
	Mat read #cH_LASTPR,REC_LASTPR,424;prvod
	mat read #CH_LASTPR,REC_LASTPR,436;prvoq
	mat read #ch_LastPr,Rec_lastpr,468;Invnum
Else
	clear prvod[]
	clear prvoq[]
	InvNum=0
Endif
UNLOCK #CH_LastPr
RETURN 

WRITE_rec: REM Write
! Write last price file
Mat Write #CH_LastPr,Rec_LastPr,  0; LP$
	Write #CH_LastPr,Rec_LastPr, 12; LPSL
Mat Write #CH_LastPr,Rec_LastPr, 16; LPC1
Mat Write #CH_LastPr,Rec_LastPr, 28; LPC2
Mat Write #CH_LastPr,Rec_LastPr, 46; LPC3
Mat Write #CH_LastPr,Rec_LastPr, 56; LP2$
Mat Write #CH_LastPr,Rec_LastPr,140; LPC4
Mat Write #CH_LastPr,Rec_LastPr,164; LPMT$
	Write #CH_LastPr,Rec_LastPr,166; AI
Mat Write #CH_LastPr,Rec_LastPr,168; LPR
Mat Write #CH_LastPr,Rec_LastPr,198; LPR1
Mat Write #CH_LastPr,Rec_LastPr,214; LPEUN
Mat Write #CH_LastPr,Rec_LastPr,220; LPUNF
Mat Write #CH_LastPr,Rec_LastPr,262; PERM
	Write #CH_LastPr,Rec_LastPr,274; LPWH
Mat Write #CH_LastPr,Rec_LastPr,276; LPC5
	Write #CH_LastPr,Rec_LastPr,292; LPPCDate
	Write #CH_LastPr,Rec_LastPr,296; LPLPerm
Mat Write #CH_LastPr,Rec_LastPr,302; LPCurr
	Write #CH_LastPr,Rec_LastPr,314; LPCPT
	Write #CH_LastPr,Rec_LastPr,316; LPCSDT
	Write #CH_LastPr,Rec_LastPr,320; LPDept
Mat Write #CH_LastPr,Rec_LastPr,324; LPFPerm
Mat Write #CH_LastPr,Rec_LastPr,336; PPPUserId
Mat Write #CH_LastPr,Rec_LastPr,340; LPUnit
Mat Write #CH_LastPr,Rec_LastPr,352; PPPCID;
MAT Write #CH_LASTPR,REC_LASTPR,360; CSLK$;
! bunch of stuff on lastprice related to pricing - not for sl last price
Mat Write #cH_LASTPR,REC_LASTPR,424;prvod
mat Write #CH_LASTPR,REC_LASTPR,436;prvoq;
mat write #CH_LASTPR,REC_LASTPR,460;b4key$;
mat write #ch_lastpr,rec_lastpr,468;Invnum;
RETURN 

DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
try close #4 Else Rem
try close #5 Else Rem
try close #6 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try