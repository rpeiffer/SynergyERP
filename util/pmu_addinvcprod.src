! Add / initialize new inventory class fields - Product & Prodwhse --
!
! loadsave -w -n 100,10 -o prog/util/pmu_addinvcprod.dl4 src/pmu_addinvcprod.src
!
! PMUPGRADER ROUTINE

external lib "ubsfunc.dl4"
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"

DIM ANS$[20],FILE$[20],FT$[2],X$[20],CMD$[256]
DIM K1$[30],LU$[2],NK1$[30],NK2$[50],K2$[50]
DIM 1%,FLAG,K1SIZE,K2SIZE,DSLS$[200]
DIM Ftemp$[16],F$[16]
DIM 1%,FFILE$[200],WORK$[200]
DIM 2%,D3[1],X2
DIM 3%,R1,R2,R3

DIM 2%,ARDT,DATE
DIM 3%,EMONTH,EYEAR,EDATE,ARDATE,ARYEAR,ARMONTH,CHKDATE,MONTHS[12]
DIM LONGYEAR$[10],SHORTYEAR$[10]
DIM BLANK$[60]
DIM 1%,whprd1[1],prd1[4],CntWeek
DIM 2%,c4[10],w7[14]
DIM 3%
Dim spare$[16],Transid2$[30],auth1$[10],auth2$[10],spareme$[60]
DIM 3%,E
dim list$[1],listline$[100]

LET BLANK$=" ",BLANK$
LET TRUE=1;FALSE=NOT(TRUE)
try close #1 else rem
ROPEN #1,"cntrl/cntrl"+STR$(COID)
LET ROW=23;COL=0
!
! no need for backup - using existing fields!!
! WRONG!!! - always back up in the event there is a bug
! or something goes badly worong
LET ORIG$=""
LET OWRITE$="ne 'addinvcprod'"
LET FCODE$="PROD"
LET MODE=0 ! just copy it
GOSUB DO_BACKUP:

Read #1,88,1792;dfile$;
ffile$=dfile$ ! both name used

CONVERT_FILE: REM"Convert the given file
LET ROW=23;COL=0
if not(fromUpgrade) PRINT @COL,ROW;"Converting "+FFILE$;
LET COL=COL+13+LEN(FFILE$)
OPEN #2,DFILE$ ! open file in same location
LET CH=2 \ GOSUB GET_ACTIVE_RECS:
LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
GOSUB DO_WRITE_LOG:

!OPEN #3,FFILE$
LET K1$=" ",K1$;REC=0

OLDFLELOOP: REM "Loop thru all old Dir 1
	SEARCH #2,3,1;K1$,R2,E \ IF E=2 GOTO ProdDONE:
	IF E Error 11000
	GOSUB READ_prec:
	let c4[8]=0;prd1[4]=0 ! existing variables - now have product inv class 1 & 2 !!
	CntWeek=0
	GOSUB WRITE_prec:
	
	LET REC=REC+1
	IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS:
GOTO OLDFLELOOP:

ProdDone: ! now the prodwhse
Close #2

!
! no need for backup - using existing fields!!
! WRONG!!! - always back up in the event there is a bug
! or something goes badly worong
LET ORIG$=""
LET OWRITE$="ne 'addinvcprod'"
LET FCODE$="PRODWHSE"
LET MODE=0 ! just copy it
GOSUB DO_BACKUP:

read #1,88,1744;DFile$;
let FFile$=DFile$ ! both names used

CONVERT_FILE1: REM"Convert the given file
LET ROW=23;COL=0
if not(fromUpgrade) PRINT @COL,ROW;"Converting "+FFILE$;
LET COL=COL+13+LEN(FFILE$)
OPEN #2,DFILE$ ! open file in same location
LET CH=2 \ GOSUB GET_ACTIVE_RECS:
LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
GOSUB DO_WRITE_LOG:

! OPEN #3,FFILE$
LET K1$=" ",K1$;REC=0
OLDFLELOOP1: REM "Loop thru all old Dir 1
	SEARCH #2,3,1;K1$,R2,E \ IF E=2 GOTO COPYDONE:
	IF E Error 11000
	GOSUB READ_pwrec:
	! w7[6]=current inv class (still used) - new whprd1[0] - prodwhse inv class 2
	! whprd1[1]=Count Week (added for Mayfield)
	let whprd1[0]=0;whprd1[1]=0
	GOSUB WRITE_pwrec:
	
	LET REC=REC+1
	IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS:
GOTO OLDFLELOOP1:



READ_prec: REM Read File
	MAT read  #2,r2,894;c4;
	mat read #2,r2,1294;prd1;
	Read #2,r2,1268;CntWeek;
RETURN 

WRITE_prec: REM Write
	MAT write  #2,r2,894;c4;
	mat write #2,r2,1294;prd1;
	Write #2,r2,1268;CntWeek;
RETURN 

READ_pwrec: REM Read File
	! MAT read  #2,r2,696;w7;
	mat read #2,r2,1038;whprd1;
	
RETURN 

WRITE_pwrec: REM Write
	! MAT write  #2,r2,696;w7;
	mat write #2,r2,1038;whprd1;
	
RETURN 

COPYDONE: REM "Copy is Done 
LET LOGMSG$="Finished with file expand & transfer"
GOSUB DO_WRITE_LOG:
CLOSE #2
Goto DO_EXIT:


DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try