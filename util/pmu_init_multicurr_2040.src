! program: pmu_init_multicurr_2040
!
! loadsave -w -n 100,10 -o prog/util/pmu_init_multicurr_2040.dl4 src/pmu_init_multicurr_2040.src
!
! PMUPGRADER ROUTINE
!
! This routine will initialize file fields: 
! custnotes  - customer multicurrency id
! vendtag    - vendor multicurrency id
! initializes the following fields
!==============================================================================
! notes -- pmu_init_multcurr - released version 2030
! for g/l, customer master, vendor master, and a/p files
! initialized the following file
! custnote, a80vm, glarcntrl,glpocntrl,pohead, poline, poctfle, apbth, a20oi
! appoh, appohh, appol, appolh, apcash
!===============================================================================

Declare Intrinsic Sub InpBuf,String,Time,FindF
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]



Enter COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository

! for manual update
! dim dbak$[500],logname$[500]
! let dbak$="files/databak/" \ let coid =1 \ let groupid=0
! let logname$="/tmp/initvar"
! let learnflag=0
! if learnflag<>0 let logname$=logname$+"lrn"
! build #0,+logname$
! close #0
! open #0,logname$




try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
E = 99
include "src/dim.pmupgrade.i"
Dim Ftemp$[16],BLANK$[80]
dim k1$[60],P61$[256],custom_customer$[30]
DIM S3$[50]
 
dim 1%,currid
dim 3%,currfact,rec,acurrid
 
! initalize new fields - task #56940
! 
open #1,"cntrl/cntrl" + Str$(COID)
mat read #1,61,0;p61$;
mat read #1,115,60;custom_customer$;
let custom_customer$=rtrim$(custom_customer$)
BLANK$ = " ",BLANK$
TRUE = 1;FALSE = Not(TRUE)
ROW = 22;COL = 0
mat read #1,88,1824;ftemp$;
LET ORIG$=""
LET OWRITE$="ne 'initmcurr2040'"
LET ROW=23;COL=0
mat read #1,61,0;p61$;
mat read #1,115,60;custom_customer$;
let custom_customer$=rtrim$(custom_customer$)

UPDATE=0
!  Sarup - Direct A/R Entry
mat read #1,88,1520;FTEMP$;
LET FCODE$="ARUP"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:

OPEN #2,FTEMP$
try
	! if file never used, rec 0 will fail
	for rec=0 to chf(2)-1
		mat read #2,rec,84;acurrid;
		mat read #2,rec,342;currfact;
		if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
			LET acurrid=0
			let currfact=0
		else
			if acurrid<0 or acurrid>7999
				let acurrid=0
				let currfact=0
			endif
		endif
		mat write #2,rec,84;acurrid;
		mat write #2,rec,342;currfact;
	next rec 
else
	rem
end try
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
	rem
end try




! SARACT FILE
mat read #1,88,1504;FTEMP$;
LET FCODE$="SARACT" 
UPDATE=0 
LET MODE=0 ! COPY
GOSUB DO_BACKUP:
OPEN #2,FTEMP$
gosub UpdArFile:
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
	rem
end try

! SARACTH FILE
mat read #1,88,1408;FTEMP$;
LET FCODE$="SARACTH" 
UPDATE=0 
LET MODE=0 ! COPY
! GOSUB DO_BACKUP: ! no backup on history file
OPEN #2,FTEMP$
gosub UpdArFile:
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
	rem
end try


! SARACTFROZ FILE
LET FTEMP$=COID USING "2/SARACT#.FROZ"
Call FindF(ftemp$,fileflag) 
if fileflag<>0 
	LET FCODE$="SARACTF" 
	UPDATE=0 
	LET MODE=0 ! COPY
	GOSUB DO_BACKUP: ! no backup on history file
	OPEN #2,FTEMP$
	gosub UpdArFile:
	LET LOGMSG$="Finished with file "+FTEMP$
	GOSUB DO_WRITE_LOG:
	try
		close #2
	else
		rem
	end try
endif


!  Cash Acc file - C/R Bank File
mat read #1,88,1520;FTEMP$;
LET FCODE$="CASHACC"
LET MODE=0 ! COPY
GOSUB DO_BACKUP:
OPEN #2,FTEMP$
try
for rec=0 to chf(2)-1
	mat read #2,rec,248;currid;
	if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
		LET currid=0
	else
		if currid<0 or currid>7999
			let currid=0
		endif
	endif
	mat write #2,rec,248;currid;
next rec 
else
rem
end try
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
	rem
end try

! Order Header
mat read #1,88,1840;FTEMP$;
LET FCODE$="ROH"
UPDATE=0 
LET MODE=0 ! COPY
GOSUB DO_BACKUP:
OPEN #2,FTEMP$
gosub UpdOrdHFile:
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
		rem
end try
! order Line
mat read #1,88,1888;FTEMP$;
LET FCODE$="ROLNEW"
UPDATE=0 
LET MODE=0 ! COPY
GOSUB DO_BACKUP:
OPEN #2,FTEMP$
gosub UpdOrdLFile:
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
		rem
end try

! invoice Header
mat read #1,88,1136;FTEMP$;
LET FCODE$="INVH"
UPDATE=0 
LET MODE=0 ! COPY
! GOSUB DO_BACKUP: >> NO BACKUP ON HISTORY 
OPEN #2,FTEMP$
gosub UpdOrdHFile:
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
		rem
end try

! invoice Line
mat read #1,88,1184;FTEMP$;
LET FCODE$="INVL"
UPDATE=0 
LET MODE=0 ! COPY
! GOSUB DO_BACKUP:>> NO BACKUP ON HISTORY 
OPEN #2,FTEMP$
gosub UpdOrdLFile:
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
		rem
end try

! lastprice

mat read #1,88,1376;FTEMP$;
LET FCODE$="LASTPRICE"
UPDATE=0 
LET MODE=0 ! COPY
! GOSUB DO_BACKUP:>> NO BACKUP ON HISTORY 
OPEN #2,FTEMP$
LET K1$=" ",K1$
do
	search #2,3,1;k1$,rec,e
	if e exit do
	mat read #2,rec,474;currid;
	mat read #2,rec,476;currfact;
	if p61$[136,136]<>"Y"
		let currid=0
		let currfact=0
	else
		if currid<=0 or currid>9999 let currid=0
		if not(currid)
			let currfact=0
		endif
	endif
	mat write #2,rec,474;currid;
	mat write #2,rec,476;currfact;
loop
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
		rem
end try

! 
LET FTEMP$=COID USING "3/SLLSTPRC#"
LET FCODE$="SLLSTPRICE"
UPDATE=0 
LET MODE=0 ! COPY
! GOSUB DO_BACKUP:>> NO BACKUP ON HISTORY 
OPEN #2,FTEMP$
LET K1$=" ",K1$
do
	search #2,3,1;k1$,rec,e
	if e exit do
	mat read #2,rec,474;currid;
	mat read #2,rec,476;currfact;
	if p61$[136,136]<>"Y"
		let currid=0
		let currfact=0
	else
		if currid<=0 or currid>9999 let currid=0
		if not(currid)
			let currfact=0
		endif
	endif
	mat write #2,rec,474;currid;
	mat write #2,rec,476;currfact;
loop
LET LOGMSG$="Finished with file "+FTEMP$
GOSUB DO_WRITE_LOG:
try
	close #2
else
		rem
end try




goto do_exit

UpdArFile: ! for saract, saracth, and saract.froz
k1$=" ",k1$ 
saractLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endsaractloop: 
if e<>0 error 11000
MAT read #2,R,150;currid;
mat read #2,r,342;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,150;currid;	
mat write #2,r,342;currfact;
goto saractloop: ! 
endsaractloop: ! end of saract update
return



UpdOrdHFile: ! for Order (ROH) and Invoice Header (INVH)
k1$=" ",k1$ 
ordhLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endordhloop: 
if e<>0 error 11000
MAT read #2,R,624;currid;
mat read #2,r,626;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,624;currid;	
mat write #2,r,626;currfact;
goto ordhloop: ! 
endordhloop: ! end of order header update
return

UpdOrdLFile: ! for Order (ROLNEW) and Invoice Lines (INVL)
k1$=" ",k1$ 
ordlLoop: ! loop  
search #2,3,1;k1$,r,e \ if e=2 goto endordlloop: 
if e<>0 error 11000
MAT read #2,R,624;currid;
mat read #2,r,626;currfact;
if p61$[136,136]<>"Y" 	! INITIALIZE NEW VARIABLES
	LET currid=0
	let currfact=0
else
	if currid<=0 or currid>7999
		let currid=0
		let currfact=0
	endif
endif
MAT WRITE #2,R,624;currid;	
mat write #2,r,626;currfact;
goto ordlloop: ! 
endordlloop: ! end of order line update
return


DO_EXIT: Rem---------------- Exit the upgrade -----------------------------------
	E = 0
Goto OUTEND

DO_BACKUP: Rem"Backup the given file
	Call "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return
DO_BUILD: Rem"Build the given file
	Call "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
	If E Goto OUTEND
Return

include "src/rtn.pmupgrade.i"


OUTEND: Rem"Final exit (be sure to set e=0 if successful before branching here)
	try ! "close any possible file opened herein
		Close #1
		close #2
	else
		rem
	end try
End

else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try
