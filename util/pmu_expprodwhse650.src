! Rebuild / Expand prodwhse File to 1300 bytes
!
! loadsave -w -n 100,10 -o prog/util/pmu_expprodwhse650.dl4 src/pmu_expprodwhse650.src
!
! PMUPGRADER ROUTINE

external lib "ubsfunc.dl4"
declare intrinsic sub programdump
Declare Intrinsic Sub InpBuf,String,Time
! Option Default Dialect IRIS1
include "src/utilcopyright.inc"
dim e$[300]

ENTER COID,GROUPID,DBAK$,CH_LOG,COREDUMP,E,...
! if "fromUpgrade" don't send print statements with
! control strings as this is being executed via
! a job not attached to terminal.  Be sure to send
! all output to ch_log as this will be reviewed and
! sent back to software repository
try
	enter fromUpgrade
else
	dim 1%,fromUpgrade
end try
try ! main try
LET E=99
!
include "src/dim.pmupgrade.i"

DIM ANS$[20],FILE$[20],FT$[2],X$[20],CMD$[256]
DIM K1$[30],LU$[2],NK1$[30],NK2$[50],K2$[50]
DIM 1%,FLAG,K1SIZE,K2SIZE,DSLS$[200]
DIM Ftemp$[16],F$[16]
DIM 1%,FFILE$[200],WORK$[200]
DIM 2%,D3[1],X2,CR[1],cpiholddate
dim cpirevby$[10]
DIM 3%,R1,R2,R3

DIM 2%,ARDT,DATE
DIM 3%,EMONTH,EYEAR,EDATE,ARDATE,ARYEAR,ARMONTH,CHKDATE,MONTHS[12]
DIM LONGYEAR$[10],SHORTYEAR$[10]

dim w1$[32],wcomm$[4],wha2$[14],wh3$[24],whflg$[10],whmkuptyp$[4]
dim list$[1],listline$[100],whspr$[12]
dim 1%,w1[2],whparc[5],fcwgt,w0[3],wh8[47],whrpln,whlm[1]
dim 1%,restricted,whbase,whparc2[3],whfct[2]
DIM 2%,w2[9],whlpool,wh7[3],w7[14],whfdt[1],whmkup[4],whprd0[1]
dim 2%,listdate
DIM 3%,w3[24],w5[25],wh9[25],whlv[2],whmisc[6],whmisc2[7],whfut[2]
dim 3%,vlist,whredi[1],whlbs[1],whfcf,whcsf[1]


LET TRUE=1;FALSE=NOT(TRUE)
try close #1 else rem
ROPEN #1,"cntrl/cntrl"+STR$(COID)
LET ROW=23;COL=0

mat read #1,88,1744;ftemp$;
LET ORIG$=""
LET OWRITE$="ne 'pwxpd650'"
LET ROW=23;COL=0
Open #2,Ftemp$
Let X2=CHF(302) ! "rec size in words
Close #2
UPDATE=0
If X2>512 ! "it's already done
	!Let LOGMSG$="File "+Ftemp$+" is already expanded - bypassing"
	!Gosub DO_WRITE_LOG:
	!Goto DO_Exit:
	UPDATE=1 ! we are just fixing
Endif
if update LET OWRITE$="ne 'pwxpd650a'" ! keep orig if there!
LET FCODE$="PRODWHSE"
LET MODE=0
GOSUB DO_BACKUP:
ffile$=ftemp$

cpirevby$ = " ",cpirevby$
whspr$=" ",whspr$
CONVERT_FILE: REM"Convert the given file
LET ROW=23;COL=0
if not(fromUpgrade) PRINT @COL,ROW;"Converting "+FFILE$;
LET COL=COL+13+LEN(FFILE$)
OPEN #2,DFILE$ ! open file in new location
LET CH=2 \ GOSUB GET_ACTIVE_RECS:
LET LOGMSG$="Estimated number of records to process: "+STR$(ACTRECS)
GOSUB DO_WRITE_LOG:
LET FCODE$="PRODWHSE"
LET PTH$=""
LET OWRITE$="y"
LET WORK$=DFILE$
GOSUB DO_BUILD:
LET FFILE$=DFILE$
LET DFILE$=WORK$
system "chmod go+rw files/2/sprodwhse*" ! all
OPEN #3,FFILE$
LET K1$=" ",K1$;REC=0

OLDFLELOOP: REM "Loop thru all old Dir 1
	SEARCH #2,3,1;K1$,R2,E \ IF E=2 GOTO COPYDONE:
	IF E Error 11000
	LET ch_prwh=2;rec_prwh=R2
	GOSUB READ_rec:
	LET NK1$=" ",NK1$
	LET NK1$=K1$
	SEARCH #3,2,1;NK1$,R3,E \ IF E=0 GOTO OLDFLELOOP:
	IF E>1 error 11000
	LET E=2;R3=0
	SEARCH #3,1,0;NK1$,R3,E \ IF E error 11000
	SEARCH #3,4,1;NK1$,R3,E \ IF E error 11000
	nk2$=" ",nk2$
	nk2$[1,2]=w1[0] using "##"
	NK2$[3,5]=w1[2] USING "###"
	nk2$[6,17]=w1$[1,12]
	nk2$[18]=" "
	SEARCH #3,4,2;NK2$,R3,E \ IF E error 11000
	nk2$=" ",nk2$             
	nk2$[1,2]=w1[0] using "##"
	nk2$[3,8]=w2[3] using "######"
	nk2$[9]=w1$[1,12]
	search #3,4,3;nk2$,r3,e \ if e error 11000
	nk2$=" ",nk2$             
	nk2$[1,2]=w1[0] using "##"
	nk2$[3,22]=w1$[13,32]
	nk2$[23]=w1$[1,12]
	search #3,4,4;nk2$,r3,e \ if e error 11000
	LET ch_prwh=3;rec_prwh=R3
	GOSUB WRITE_rec:
	LET LIST$=" ",LIST$         
	LET LISTDATE=0              
	LET LISTLINE$=" ",LISTLINE$ 
	LET REC=REC+1
	IF NOT(FRA(REC/100)) GOSUB DISPLAY_PROGRESS:
GOTO OLDFLELOOP:


READ_rec: REM Read File
	MAT read  #ch_prwh,rec_prwh,0;w1$       
	MAT read  #ch_prwh,rec_prwh,32;w1  
	MAT read  #ch_prwh,rec_prwh,38;w2   
	MAT read  #ch_prwh,rec_prwh,78;w3  
	mat  read #ch_prwh,rec_prwh,228;w5
	MAT read  #ch_prwh,rec_prwh,384;whparc
	READ #ch_prwh,rec_prwh,396;WHLPOOL
	MAT  READ #ch_prwh,rec_prwh,400;WCOMM$   
	READ #ch_prwh,rec_prwh,404;FCWGT         
	MAT read  #ch_prwh,rec_prwh,406;wha2$
	MAT read  #ch_prwh,rec_prwh,420;w0
	mat  read #ch_prwh,rec_prwh,428;wh7
	MAT read  #ch_prwh,rec_prwh,444;wh8
	MAT read  #ch_prwh,rec_prwh,540;wh9
	MAT read  #ch_prwh,rec_prwh,696;w7
	mat  read #ch_prwh,rec_prwh,756;wh3$
	MAT read  #ch_prwh,rec_prwh,780;whlv
	MAT read  #ch_prwh,rec_prwh,798;whrpln
	MAT read  #ch_prwh,rec_prwh,800;whmisc
	mat  read #ch_prwh,rec_prwh,842;whlm
	MAT  READ #ch_prwh,rec_prwh,846;WHMISC2     
	MAT  READ #ch_prwh,rec_prwh,894;RESTRICTED     
	MAT  READ #ch_prwh,rec_prwh,896;WHFUT          
	MAT  READ #ch_prwh,rec_prwh,914;WHFDT          
	MAT  READ #ch_prwh,rec_prwh,922;VLIST          
	MAT  READ #ch_prwh,rec_prwh,928;WHFLG$         
	MAT  READ #ch_prwh,rec_prwh,938;WHBASE         
	MAT  READ #ch_prwh,rec_prwh,940;WHMKUP         
	MAT  READ #ch_prwh,rec_prwh,956;WHMKUPTYP$     
	MAT  READ #ch_prwh,rec_prwh,960;WHPARC2        
	MAT  READ #ch_prwh,rec_prwh,968;WHREDI         
	MAT  READ #ch_prwh,rec_prwh,980;WHLBS    
	!MAT  READ #ch_prwh,rec_prwh,992;WHFCT ! NOT ON erp inc
	!MAT  READ #ch_prwh,rec_prwh,998;WHFCF 
	MAT  READ #ch_prwh,rec_prwh,1004;WHPRD0  
	MAT  READ #ch_prwh,rec_prwh,1012;WHcsf  
	if update ! already expanded - read new fields
		mat read #ch_prwh,rec_prwh,1024;cpiholddate              
		mat read #ch_prwh,rec_prwh,1028;cpirevby$;
		if cpiholddate<0 or cpiholddate>991231 or fra(cpiholddate) let cpiholddate=0
		if cpirevby$="" let cpirevby$ = " ",cpirevby$
	Endif
	UNLOCK #ch_prwh
RETURN 

WRITE_rec: REM Write
	MAT write #ch_prwh,rec_prwh,0;w1$           
	MAT write #ch_prwh,rec_prwh,32;w1           
	MAT write #ch_prwh,rec_prwh,38;w2           
	MAT write #ch_prwh,rec_prwh,78;w3           
	mat write #ch_prwh,rec_prwh,228;w5          
	MAT write #ch_prwh,rec_prwh,384;whparc      
	write #ch_prwh,rec_prwh,396;WHLPOOL          
	MAT write #ch_prwh,rec_prwh,400;WCOMM$      
	write #ch_prwh,rec_prwh,404;FCWGT            
	MAT write #ch_prwh,rec_prwh,406;wha2$         
	MAT write #ch_prwh,rec_prwh,420;w0          
	mat write #ch_prwh,rec_prwh,428;wh7         
	MAT write #ch_prwh,rec_prwh,444;wh8         
	MAT write #ch_prwh,rec_prwh,540;wh9         
	MAT write #ch_prwh,rec_prwh,696;w7          
	mat write #ch_prwh,rec_prwh,756;wh3$        
	MAT write #ch_prwh,rec_prwh,780;whlv        
	MAT write #ch_prwh,rec_prwh,798;whrpln      
	MAT write #ch_prwh,rec_prwh,800;whmisc      
	mat write #ch_prwh,rec_prwh,842;whlm        
	MAT write #ch_prwh,rec_prwh,846;WHMISC2     
	MAT write #ch_prwh,rec_prwh,894;RESTRICTED  
	MAT write #ch_prwh,rec_prwh,896;WHFUT       
	MAT write #ch_prwh,rec_prwh,914;WHFDT        
	MAT write #ch_prwh,rec_prwh,922;VLIST        
	MAT write #ch_prwh,rec_prwh,928;WHFLG$       
	MAT write #ch_prwh,rec_prwh,938;WHBASE       
	MAT write #ch_prwh,rec_prwh,940;WHMKUP       
	MAT write #ch_prwh,rec_prwh,956;WHMKUPTYP$   
	MAT write #ch_prwh,rec_prwh,960;WHPARC2      
	MAT write #ch_prwh,rec_prwh,968;WHREDI       
	MAT write #ch_prwh,rec_prwh,980;WHLBS  
	Mat write #ch_prwh,rec_prwh,992;whspr$ ! what erp inc has
	!MAT write #ch_prwh,rec_prwh,992;WHFCT  ! not on erp inc
	!MAT write #ch_prwh,rec_prwh,998;WHFCF        
	MAT write #ch_prwh,rec_prwh,1004;WHPRD0      
	MAT write #ch_prwh,rec_prwh,1012;WHcsf       
	mat write #ch_prwh,rec_prwh,1024;cpiholddate              
	mat write #ch_prwh,rec_prwh,1028;cpirevby$;
RETURN 


COPYDONE: REM "Copy is Done 
XferDone: ! "
LET LOGMSG$="Finished with file expand & transfer"
GOSUB DO_WRITE_LOG:
CLOSE #2,#3
Goto DO_EXIT:



DO_EXIT: REM---------------- Exit the upgrade -----------------------------------
LET E=0
GOTO OUTEND:

DO_BACKUP: REM"Backup the given file
CALL "sysfbackup",FCODE$,COID,GROUPID,ORIG$,DBAK$,OWRITE$,MODE,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

DO_BUILD: REM"Build the given file
CALL "Sysfbuild",FCODE$,COID,GROUPID,PTH$,OWRITE$,ROW,COL,CH_LOG,DFILE$,REASON$,E,fromUpgrade
IF E GOTO OUTEND:
RETURN 

include "src/rtn.pmupgrade.i"


OUTEND: REM"Final exit (be sure to set e=0 if successful before branching here)
try CLOSE #1 Else Rem
try Close #2 Else Rem
try Close #3 Else Rem
END 
else ! main try
	e = spc(8)
	If Spc(8) <> 10000
		dim msc4$[100] \ msc4$=msc$(4)
		if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
		call env(2,"PROGNAME",msc4$)
		if spc(8) = 11000
			call utilsearcherr(e$, e, Spc(10))
		else
			Call utilsuberr(e$,Spc(8),Spc(10),Msc$(2))
		end if
		call programdump()
	End If
	Call utilmainerr(e$,Spc(8))
	If ch_log <> -1
		Print #ch_log;e$
	End If
end try