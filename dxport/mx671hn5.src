! --- mx671hn5
! description Hazardous shipping name maintenance 
!
! loadsave -w -n 100,10 -o prog/dxport/mx671hn5.dl4 src/mx671hn5.src
!
Rem     MX671HN    Hazardous shipping name maintenance
Rem     LAST UPDATE:
Rem     UNIVERSAL BUSINESS SYSTEMS
! 9/1/98 tc cct115758 if delete last file entry, can still pick it!
! 3/27/00 jliu cct134326 - hit Esc will close the window and pass no
!                          data back
! 04/17/00 jliu cct134326 - make the callable program
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN  5, 2001  14:13:33
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx/mx671hn5.src (univ2) [kag] {17434}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
!
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
!
External Lib "ubsfunc.dl4"
Declare External Function FormatDate$,OpenFile,PDate$,buildsort
Declare External Sub UserCntrl
!
Declare Intrinsic Sub InpBuf,String,programdump
Declare Function CHKPRD
! Option Default Dialect IRIS1
Try
! Enter SR,SC,Z9[]
	Dim 1%,W1,X,X1[9],Z9[9],2%,J2,J3,J4,J5,J6,J8,J9[5],K,R3,R6,W,X2[9],4%,J1
	Dim J$[50],J0$[12],J1$[60],J2$[60],J4$[60],J5$[60],J6$[60],J7$[90]
	Dim J9$[60],K0$[60],K2$[60],U5$[90],X$[30],3%,R2,R[99]
	Dim A$[160],SAVEA$[30],K3$[30],F9$[40],TOP$[40],U9$[10],D6$[50]
	Dim 1%,F9[4],3%,D2,maxcnt
	dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
	dim action$[30],options$[30],userid$[8],blank$[200],action1$[30],Action2$[30]
	Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
	dim tmp$[1200],tmp1$[300],webstr$[1000],msg$[200],message$[200]
	maxcnt=100
	dim List$[maxcnt,1000]
	blank$=" ",blank$

	! call dxopen() ! done in menu
	call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
	e$=""

z9[1]=OpenFile(-2784,IntCo) \ if z9[1]=-1 error 42
! start as readonly (list,get)
Action$=UCase$(Action$)
	ACtion$=RTrim$(Action$) ! make sure UPPERCASE and No blanks at end
	Action1$=UCase$(action1$)
	Action1$=RTrim$(action1$) ! UC and trimmed
	Action2$=UCase$(action2$)
	Action2$=RTrim$(action2$) ! UC and trimmed
	returnstatus=0
	message$="Invalid action1"
	select case action1$
	
	case "DROPLIST" !   send droplist						doc=HSN-GetHSNList.doc
		! show existing
		returnstatus=1
		message$="OK"
		clear list$[]
		list$[0]=bsdel$,"HSNLIST",fdel$
		webstr$="HSNID",fdel$,"DESC1",fdel$,"DESC2",fdel$,"DESC3",fdel$,"DESC4",fdel$
		list$[1]=webstr$
		row=2;tmpcnt=maxcnt
		f9$=" ",f9$
		do
			Search #Z9[1],3,1;F9$,F9,E
			if e exit do
			Mat Read #Z9[1],F9;A$;
			webstr$=Str$(F9),fdel$
			webstr$=webstr$,RTrim$(A$[1,40]),fdel$
			webstr$=webstr$,RTrim$(A$[41,80]),fdel$
			webstr$=webstr$,RTrim$(A$[81,120]),fdel$
			webstr$=webstr$,RTrim$(A$[121,160]),fdel$
			list$[row]=webstr$
			row=row+1
			If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
		loop
		list$[row]=esdel$
		call AddToStr(e$,rstr$,List$[])
		! end of droplist
	Case "GETHSN" ! get existing/default new				doc=HSN-GetSafetyHaz.doc
		returnstatus=1
		message$="OK"
		call dxget("HSNID",tmp$)
		if trim$(tmp$)="" or tmp$="0"
			let a$=" ",a$
		Else
			F9=tmp$
			if f9<=0 or F9>CHF(Z9[1])-1
				returnstatus=0
				message$="ID is out of range"
				goto HNPDone
			Endif
			try ! allow for rec not written
				Mat Read #Z9[1],F9;A$;
			Else ! not written
				F9=0
				a$=" ",a$
			End try
		Endif
		Clear List$[]
		list$[0]=bsdel$,"HSNDATA",fdel$
		webstr$="HSNID",fdel$,"DESC1",fdel$,"DESC2",fdel$,"DESC3",fdel$,"DESC4",fdel$
		WEBSTR$=webstr$,"NEWREC",fdel$,"PFUSED",fdel$
		list$[1]=webstr$
		webstr$=Str$(F9),fdel$
		webstr$=webstr$,RTrim$(A$[1,40]),fdel$
		webstr$=webstr$,RTrim$(A$[41,80]),fdel$
		webstr$=webstr$,RTrim$(A$[81,120]),fdel$
		webstr$=webstr$,RTrim$(A$[121,160]),fdel$
		tmp$="N" \ if f9<=0 let tmp$="Y"
		webstr$=webstr$,tmp$,fdel$ ! new=Y exist=N
		HIUBP=0
		HIUBP=CHKPRD()
		tmp$="N" \ if hiubp let tmp$="Y"
		webstr$=webstr$,tmp$,fdel$ ! in use by prodfile N or Y
		list$[2]=webstr$
		list$[3]=esdel$
		call AddToStr(e$,rstr$,List$[])
		! done 
	Case "SUBMITHSN" ! submit/write new & existing			doc=HSN-SubmitSafetyHaz.doc
		close #z9[1] ! close readonly
		z9[1]=OpenFile(2784,IntCo) \ if z9[1]=-1 error 42
		returnstatus=1;nod1=0
		message$="OK"
		call dxget("HSNID",tmp$)
		F9=tmp$
		if trim$(tmp$)="" or f9=0 ! new
			let savea$=" ",savea$
		Else
			
			if f9<=0 or F9>CHF(Z9[1])-1
				returnstatus=0
				message$="ID is out of range"
				goto HNPDone
			Endif
			try ! allow for rec not written
				Read #Z9[1],F9;SaveA$;
				nod1=0 ! existing default
				K2$=" ",k2$
				k2$[1,24]=savea$[1,24]
				k2$[25,30]=F9 Using "######"
				search #z9[1],2,1;k2$,R,E
				if e ! no key - deleted previously?
					savea$=" ",savea$ ! no key saved - treat as change
					nod1=1
				Endif
			Else ! not written / deleted? get new rec
				F9=0;nod1=1
				a$=" ",a$
				savea$=a$
			End try
		Endif
		call dxget("DESC1",tmp$)
		if trim$(tmp$)=""
			returnstatus=0
			message$="Description 1 is required!"
			goto HNPDone
		Endif
		A$[1,40]=UCase$(RTrim$(tmp$))+Blank$ ! uppercase
		call dxget("DESC2",tmp$)
		A$[41,80]=RTrim$(tmp$)+Blank$
		call dxget("DESC3",tmp$)
		A$[81,120]=RTrim$(tmp$)+Blank$
		call dxget("DESC4",tmp$)
		A$[121,160]=RTrim$(tmp$)+Blank$
		R2=F9
		If F9>0 and nod1=0 and savea$[1,24]<>A$[1,24] ! changed existing
			savea$[25,30]=F9 Using "######"
			savea$[31]="" ! cut to length
			Search #Z9[1],5,1;SAVEA$,R,E
			If E > 1 Gosub ERR_SEARCH
			nod1=1 ! create new one
		Endif
		if F9>0 and nod1 ! add to dir
			K2$ = " ",K2$
			K2$[1,24] = A$[1,24]
			K2$[25,30] = R2 Using "######"
			k2$[31]="" ! cut to length
			Search #Z9[1],4,1;K2$,R2,E
			If E Gosub ERR_SEARCH
		Endif
		if f9<=0 ! not found/add new
			K2$ = " ",K2$
			K2$[1,24] = A$[1,24]
			
			let e=2;r2=0
			search #z9[1],1,0;k2$,r2,e
			if e gosub err_search
			K2$[25,30] = R2 Using "######"
			K2$[31]="" ! cut to length
			Search #Z9[1],4,1;K2$,R2,E
			If E Gosub ERR_SEARCH
		Endif
		mat write #Z9[1],R2,0;a$;

		! done
	Case "DELETEHSN" ! delete the record					doc=HSN-DeleteSafetyHaz.doc
		close #z9[1] ! close readonly
		z9[1]=OpenFile(2784,IntCo) \ if z9[1]=-1 error 42
		returnstatus=1
		message$="OK"
		call dxget("HSNID",tmp$)
		F9=tmp$ ! allow zero/null? (is new record not written?)
		if f9<0 or F9>CHF(Z9[1])-1
			returnstatus=0
			message$="ID is out of range"
			goto HNPDone
		Endif
		If f9<=0 goto L_6200 ! new record?
		try ! allow for rec not written
			Mat Read #Z9[1],F9;A$;
		Else ! not written
			F9=0
			a$=" ",a$
		End try
		If f9<=0 goto L_6200 ! not written yet?
		R2=f9 ! uses r2 as record
		D6$ = " ",D6$ ! search thru whole file for it(as 671hn5 does)
		do
			Search #Z9[1],3,1;D6$,D5,E
			If E exit do
			D9=0 ! delete key flag
			If D5 = R2 let d9=1 ! file rec match - delete it
			D4=d6$[25,30] ! rec in key
			if d4 = r2 let d9=1 ! key rec match - delete it (cleanup)
			if d9
				Search #Z9[1],5,1;D6$,D5,E
				If E Gosub ERR_SEARCH
			endif
		loop ! continue search
		! done - native mode no return rec (prevent be when delete existing?)
		!let e=3 ! return record to freelist (not done is 671hn5?)
		!search #z9[1],1,0;d6$,R2,E
		!If E Gosub ERR_SEARCH
		
		L_6200: ! done 
	End select
	HNPDone: ! done
	! status section                                                       
	Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)                 
	Call AddToStr(e$,rstr$,WebStr$)                                        
	Call SetOutPut(e$,rstr$)    
Goto OutEnd

ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM ",MSC$(4)
call programdump("tmp/mx671hn5se!","")
returnstatus=0;message$=msg$
Goto HNPDone 

OUTEND: Rem OUT

try close #z9[1] Else rem

Else 
	Include "src/callmainerrnet.inc"
End Try 
End ! of whole program
!--------------------------------------------------------------------------
Function CHKPRD()
! get 0/1 on if used in product file
Try
	x1=0;ch_prod=0
	ch_prod=openfile(-1792,Intco) \ if ch_prod=-1 goto cpdone
	if f9<=0 goto cpdone ! can't check new/no haz rec
	Dim 2%,A3[2],k1$[60]
	k1$=" ",k1$
	do
		search #ch_prod,3,1;k1$,R,E
		if e exit do
		mat read #ch_prod,r,834;a3;
		if a3[2]=f9 exit function 1
	loop

	cpdone: ! finished
	if ch_prod>0
		try close #ch_prod else rem
	endif

Else
   include "src/callsuberr.inc"
End Try 
end function x1
!--------------------------------------------------------------------------