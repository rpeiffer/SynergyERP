! >>> Program 346
!
! description RASL Replenishment PART 1
!
! loadsave -w -n 100,10 -o prog/dxport/346.dl4 src/346.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX346  REPLENISHMENT ALLOCATION
Rem AUTHOR: MTG 4/97
Rem LAST UPDATE: cct# 97596
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG 23, 2005  15:32:34
Rem /w/papermaster/r2002//usr/acct/jliu/work/custom/acme/mx346.src (univ2) [jliu] {56348}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function AddToMYReports
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String
Declare Intrinsic Function Findchannel
! Option Default Dialect IRIS1

Com 1%,RPTWHSE,2%,SHPDATE
Com RPHFLE$[20],RPLFLE$[20],RPTYPE$[1],SLoc$[6],ELoc$[6],E$[500],Rstr$[2000]
If Err 0 Gosub ERR_TRAP
Dim 1%,S,WHS,OVFLAG,FLAG,RASL[5],WHSE,TMPLINE
Dim 1%,CH_CNTRL,CH_ROH,CH_ROL,CH_PRDL,CH_SORT,CH_PROD,CH_ORDL
Dim 1%,CH_PLOC,CH_WLOC,CH_WINFO,CH_RPH,CH_RPL,CH_SPLT,CH_ROT,CH_ROS
Dim 2%,X8,D9[5],COMP,SDATE,JODATE,JSDATE,DT3[2],FOUND,TMPORDER
Dim 3%,REC_ROH,REC_WINFO,REC_RPH,REC_RPL,REC_ROL,REC_PROD,REC_PLOC,REC_ORDL
Dim 3%,REC_SPLT,REC_PRDL,PRIM_REC_PRDL,R[30],R98
Dim 3%,TOTALLOC,QTY,QTYALLOC,QTYOVFL,T2[25],QTYSHIP,T9[11],ORDALLOC,QTYAVAILABLE
Dim P9$[50],P61$[256],U9$[30],FILENAME$[16],KEYORDH$[20],KEYRPH$[26],KEYRPL$[40]
Dim KEYROL$[20],KEYSORT$[50],KEYSORT1$[50],KEYSPLT$[50],KEYPLOC$[20]
Dim KEYORDL$[60],KEYPRDL$[50],TRUCK$[256]
Dim DFLTRCVLOC$[6],PRIM$[6],I$[50],CMD$[50],SCRATCH$[80],F$[16],K98$[50]
Dim 1%,RPH0[3]
Dim RPH0$[24]
Dim 3%,RPH1[1]
Dim 1%,RPL0[2]
Dim RPL$[24]
Dim 2%,RPL1,S5
Dim 3%,RPL2
Dim N2$[118],2%,N4[3]
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Rem {begin src/inc/dim.roh.i}
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8],HFAX[1]
Dim 2%,HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Rem {end dim.roh.i}
Rem {begin src/inc/dim.rol.i}
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME,GWGT[1]
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,QPB,GWGT1
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Rem {end dim.rol.i}
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.prdl.i}
Dim 1%,P1[1],P4
Dim 2%,P2[2]
Dim 3%,P3[4],PLTR
Dim PLT$[66],PLT1$[6]
Rem {end dim.prdl.i}
Rem {begin src/inc/dim.ordl.i}
Dim S0$[36],OL2$[16]
Dim 1%,OL1[3]
Dim 2%,OL2[3]
Dim 3%,OL3[5]
Rem {end dim.ordl.i}
Dim 3%
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128]
B$=" ",B$
!call dxopen() ! NEEDS FOR DXTEST RUN!!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
CH_CNTRL = 1
!X8 = Spc(5)
COMP = IntCo ! Int((X8 - Int(X8 / 16384) * 16384) / 64)
J$ = "CNTRL" + Str$(COMP)
Read #1,3;U9$;
!Print 'CS';@0,0;"-MX346-";
!Print @20,0;" ** REPLENISHMENT ALLOCATION ** ";
!Print @25,1;U9$[1,30];
Mat Read #CH_CNTRL,19,50;P9$;
Mat Read #CH_CNTRL,61,0;P61$;
If P9$[41,41] = "N"
  Message$="RASL NOT CURRENTLY AVAILABLE..."
  ! Print @0,23;'CL RB';"PRESS <CR> TO RETURN TO THE MENU "; \ Input ""J$
  Goto OUTEND
End If 
S = 0
If S
  Message$="MISCELLEANEOUS RECEIPTS TO STOCK IN PROCESS...."
  !Print @0,23;'CL RB';"PRESS <CR> TO RETURN TO THE MENU "; \ Input ""J$
  Goto OUTEND
End If 
Mat Read #CH_CNTRL,20,12;S;
If S
  Message$="774 - WAREHOUSE TRANSFER IN PROCESS...."
  !Print @0,23;'CL RB';"PRESS <CR> TO RETURN TO THE MENU "; \ Input ""J$
  Goto OUTEND
End If 
CH_ROH = 2 \ Read #CH_CNTRL,88,1840;FILENAME$; \ Ropen #CH_ROH,FILENAME$
CH_ROL = 3 \ Read #CH_CNTRL,88,1888;FILENAME$; \ Ropen #CH_ROL,FILENAME$
CH_PRDL = 4 \ Read #CH_CNTRL,88,2528;FILENAME$; \ Ropen #CH_PRDL,FILENAME$
CH_ORDL = 5 \ Read #CH_CNTRL,88,2320;FILENAME$; \ Ropen #CH_ORDL,FILENAME$
CH_PLOC = 6 \ Read #CH_CNTRL,88,208;FILENAME$; \ Ropen #CH_PLOC,FILENAME$
CH_WLOC = 7 \ Read #CH_CNTRL,88,2736;FILENAME$; \ Ropen #CH_WLOC,FILENAME$
CH_WINFO = 8 \ Read #CH_CNTRL,88,2768;FILENAME$; \ Open #CH_WINFO,FILENAME$
CH_SORT = 9
CH_RPH = 10
RPHFLE$ = "3/REPLENH" + Str$(Spc(6))
CH_RPL = 11
RPLFLE$ = "3/REPLENL" + Str$(Spc(6))
CH_PROD = 12 \ Read #CH_CNTRL,88,1792;FILENAME$; \ Ropen #CH_PROD,FILENAME$
CH_ROT = 14 \ Read #CH_CNTRL,88,1872;FILENAME$; \ Ropen #CH_ROT,FILENAME$
CH_ROS = 15 \ Read #CH_CNTRL,88,1856;FILENAME$; \ Ropen #CH_ROS,FILENAME$
I$ = " ",I$
I$ = "[1:256] 6/SRTPLOTTMP";I$[Len(I$) + 1] = Spc(6) Using "&&&&","!"
CH_SPLT = 30
Build #CH_SPLT,I$
REC_SPLT = 50 \ Search #CH_SPLT,0,1;I$,REC_SPLT,E \ If E Gosub ERR_SEARCH
REC_SPLT = 1 \ Search #CH_SPLT,0,0;I$,REC_SPLT,E \ If E Gosub ERR_SEARCH
Call FindF(RPHFLE$,FOUND)
If FOUND
  Kill RPHFLE$
End If 
I$ = " ",I$
I$ = "[5:32] " + RPHFLE$
Build #CH_RPH,I$
REC_RPH = 20
Search #CH_RPH,0,1;I$,REC_RPH,E \ If E Gosub ERR_SEARCH
REC_RPH = 26
Search #CH_RPH,0,2;I$,REC_RPH,E \ If E Gosub ERR_SEARCH
REC_RPH = 5 \ Search #CH_RPH,0,0;I$,REC_RPH,E \ If E Gosub ERR_SEARCH
Call FindF(RPLFLE$,FOUND)
If FOUND
  Kill RPLFLE$
End If 
I$ = " ",I$;I$ = "[5:32] " + RPLFLE$
Build #CH_RPL,I$
REC_RPL = 40
Search #CH_RPL,0,1;I$,REC_RPL,E \ If E Gosub ERR_SEARCH
REC_RPL = 5 \ Search #CH_RPL,0,0;I$,REC_RPL,E \ If E Gosub ERR_SEARCH
ESTAT = 6
OSTAT = 1 \ If P9$[45,45] = "Y" Let OSTAT = 2
KEYORDH$ = OSTAT Using "##"
Search #CH_ROH,3,1;KEYORDH$,REC_ROH,E
If E And E <> 2 Gosub ERR_SEARCH
X2 = KEYORDH$[1,2]
If E = 2 Or X2 > ESTAT ! include status up to 6
  Message$="No Orders Available to be Processed...."
  !Print @0,23;'CL';"Press <CR> to Return to the Menu ";
  !Input Len 16384 + 1;""J$
  Goto OUTEND
End If 
Mat Read #CH_CNTRL,115;D9;
Mat Read #CH_CNTRL,69,52;DFLTRCVLOC$;
Gosub CLEAR_SORT98 ! build sort file (not on #98!)
Gosub GETWHSE ! whse (must enter)
Gosub PROMPTSDATE ! Ship Date
Gosub EDT_TRUCK
Goto PROMPTALLOC
GETWHSE: Rem enter warehouse to use
!Print @0,5;'CL';"1.Warehouse: ";
!J0$ = "3000021405"
J1 = 0 \ If WHS Let J1 = WHS
!J5$ = "Enter warehouse/branch to process or <CR> to end"
Call dxget("WHSE",tmp$) ! Gosub ISINPUT
J1=tmp$ ! If J4$ = "" And J1 = 0 Goto OUTEND
If J1 > D9[5] Or J1 < 1
  Message$="Invalid Warehouse!!!" ! ; \ Signal 3,20
  Goto OutEnd ! Print @0,23;'CL RB'; \ Goto GETWHSE
End If 
WHSE = J1
Call "CHKWRASL",WHSE,RASL[]
If Not(RASL) ! "the whse selected doesn't do rasl!
  Message$ = "WAREHOUSE " + Str$(WHSE) + " DOES NOT USE RASL!"
  !Gosub ISERRMSG
  Goto OutEnd ! GETWHSE
End If 
WHS = J1
J5$ = ""
REC_WINFO = WHS - 1
Mat Read #CH_WINFO,REC_WINFO,4;N2$;
! Print @18,5;N2$[1,30];
Return 
PROMPTSDATE: Rem prompt for ship date
!Print @0,7;'CL';"2.Date: ";
!J0$ = "5 00061407"
!J1 = 0 \ If SDATE Let J1 = SDATE
!J5$ = "Enter shipping date for stock replenishment allocation or <CR> to end"
Call dxget("SHIPDATE",tmp$) ! sends as MMDDYY Gosub ISINPUT
if RTrim$(tmp$)="" ! none - load today's date?!
	tmp$[1,2]=Tim(9) using "&&" ! month
	tmp$[3,4]=Tim(10) using "&&" ! day
	tmp$[5,6]=Tim(8) using "&&" ! year
Endif
j4$=tmp$[5,6],tmp$[1,4] ! to yymmdd
j1=j4$
! If J4$ = "" And J1 = 0 Goto OUTEND
SDATE = J1
X2 = SDATE;E=0
Gosub YMD2JUL \ Let E=E ! Goto PROMPTSDATE
If E
	message$="INVALID SHIPPING DATE"
	goto OutEnd
Endif
JSDATE = X2
Call dxget("EXTMTCH",tmp$)
XDMTCH=0 \ if tmp$="Y" let XDMTCH=1
Return 
EDT_TRUCK: Rem cct193045
ISELECT = 0
!Print @0,9;'CL';"3.Enter Starting Truck#,  <CR> First,  I: Individual selects ";
!Print @0,10;'CL';"  Ending Truck#,  <CR> Last ";
!Print @64,9;'CL'; \ Input ""TRUCK$
call dxget("ITRUCK",tmp$)
If Trim$(tmp$)<>"" ! sent a truck list
	let Truck$="I"+Rtrim$(tmp$) ! load into variable
Else ! just the start/end
	Call dxget("STRUCK",tmp$) ! could start with I
	Truck$=UCase$(tmp$)
Endif
If TRUCK$[1,1] = "I" Gosub L_10000 \ Goto END_EDTTRUCK
STRUCK = TRUCK$
If STRUCK < 0 Or STRUCK > 999999
  Message$="INVALID Start Truck!!" \ Goto OUTEND ! Signal 3,15 \ Goto EDT_TRUCK
End If 
!Print @64,10;'CL'; \ Input ""TRUCK$
Call dxget("ETRUCK",tmp$)
Truck$=tmp$
ETRUCK = TRUCK$
If ETRUCK < 0 Or ETRUCK > 999999
  Message$="INVALID End Truck!!" \ Goto OutEnd ! Signal 3,15 \ Goto EDT_TRUCK
End If 
If Not(ETRUCK) Let ETRUCK = 999999
If ETRUCK < STRUCK
  Message$="ENDING TRUCK MUST BE GREATER THAN OR EQUAL TO STARTING TRUCK !" ! ;'RB CE';
  Goto OutEnd ! Signal 3,50 \ Print @0,22;'CL' \ Goto EDT_TRUCK
End If 
END_EDTTRUCK: Rem
Return 
PROMPTALLOC: ! additional prompts from 346a are entered NOW
Call dxget("RPTTYPE",tmp$)
Let j$=UCase$(RTrim$(tmp$))
If J$ <> "S" If J$ <> "D" If J$ <> "F" ! Goto GET_RPTTYPE
	message$="Invalid Report Type S D F Only"
	goto OutEnd
Endif
RPTYPE$ = J$
Call dxget("SLOC",tmp$)
Let J$=UCase$(RTrim$(tmp$))
if j$="" let j$=B$
let SLoc$=j$
Call dxget("ELOC",tmp$)
J$=UCase$(RTrim$(tmp$))
if j$="" let j$="zzzzzz"
let ELoc$=J$+B$
if SLoc$>Eloc$
	message$="Invalid Location Range"
	goto OutEnd
Endif
Rem prompt if ok to start
!Print @0,23;'CL';"Enter #: Field to edit  A: start allocate  E: end ";
!Input Len 16384 + 2;""J$
!J$="A" ! we're doing it!
!If J$ = "E" Or J$ = "e" Goto OUTEND
!If J$ = "A" Or J$ = "a" Goto SRCHPHS1
!X = J$
!On X Gosub GETWHSE,PROMPTSDATE,EDT_TRUCK
!Goto OutEnd ! PROMPTALLOC

SRCHPHS1: Rem main allocation process - Phase 1 sort by product
! Print @0,23;'CL';"Determining Allocation....please wait.....";
N4[2] = 5;N4[3] = SDATE
DEBUG = 0 ! activate to send a detail list as part of the report
Call dxget("PRNTDBG",tmp$) ! let's let customer choose
if UCase$(RTrim$(tmp$))="Y" let DEBUG=1
If DEBUG ! "don't use channel 0 is PRINTER!!!

  ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	BaseName1$ = "replen_alloc_"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
	StatusFile$ = ReportDir$ + "/"+BaseName1$
	Call FindF(StatusFile$,tmp)
	If tmp Kill StatusFile$
	StatChan = FindChannel() ! channel to build text file 
	Try Close #statchan Else Rem
	Try
		Build #StatChan,StatusFile$ As "TEXT"
	Else
		returnstatus=1
		let message$="Error in Building Status File "
		goto OutEnd
	end TRY
	Try Close #StatChan Else Rem
	Try
		Open #StatChan,StatusFile$
	else
		returnstatus=1
		let message$="Error in Opening Status File "
		goto OutEnd
	end TRY
	Print #StatChan;"Replenishment Process Started..."
	! PAUSE 20
	e = AddToMYReports(BaseName1$) 
	if e<0
		message$="Error adding to my reports!" 
		returnstatus=1
		goto OutEnd
	endif
	returnstatus=0 ! or is it 1?
	message$="Please check under My Reports "+basename1$+" for status and completion"
	Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
	Call AddToStr(e$,rstr$,WebStr$)                            
	Call SetOutPut(e$,rstr$)
  Print #StatChan; Using "######";"WAREHOUSE: ";WHS;" SHIP DATE: ";N4[3]
  Print #StatChan;"-----------PHASE 1 find orders/lines to process ----"
Else ! no debug - send in process
	Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
OSTAT = 1 \ If P9$[45,45] = "Y" Let OSTAT = 2
KEYORDH$ = OSTAT Using "##"
SRCHORDH: Rem Search order header
Search #CH_ROH,3,1;KEYORDH$,REC_ROH,E \ If E = 2 Goto SRCHPHS2
If E Gosub ERR_SEARCH
X2 = KEYORDH$[1,2] \ If X2 > ESTAT Goto SRCHPHS2
Rem {begin src/inc/read.roh.i}
Mat Read #CH_ROH,REC_ROH,0;H0
Mat Read #CH_ROH,REC_ROH,52;H3
Mat Read #CH_ROH,REC_ROH,56;TOT_SELL
Mat Read #CH_ROH,REC_ROH,64;LOCKPORT
Mat Read #CH_ROH,REC_ROH,66;V0$
Mat Read #CH_ROH,REC_ROH,78;H4
Mat Read #CH_ROH,REC_ROH,84;H0$
Mat Read #CH_ROH,REC_ROH,104;H5
Mat Read #CH_ROH,REC_ROH,172;ST3
Mat Read #CH_ROH,REC_ROH,272;H1$
Mat Read #CH_ROH,REC_ROH,278;SLSM
Mat Read #CH_ROH,REC_ROH,318;SCOM
Mat Read #CH_ROH,REC_ROH,348;SMER
Mat Read #CH_ROH,REC_ROH,378;SCST
Mat Read #CH_ROH,REC_ROH,408;H6
Mat Read #CH_ROH,REC_ROH,444;HMAT$
Mat Read #CH_ROH,REC_ROH,446;P0$
Mat Read #CH_ROH,REC_ROH,466;HFAX
Mat Read #CH_ROH,REC_ROH,474;HSTI
Mat Read #CH_ROH,REC_ROH,482;H2
Mat Read #CH_ROH,REC_ROH,486;OWHT
Mat Read #CH_ROH,REC_ROH,490;OWHT1
Mat Read #CH_ROH,REC_ROH,498;TOTGL
Mat Read #CH_ROH,REC_ROH,504;PICKBY
Rem {end read.roh.i}
Read #CH_ROS,H0[2],146;S5;
If ISELECT
  K98$ = " ",K98$
  K98$ = "{",S5 Using "######"
  Search #SChan,2,1;K98$,R98,E
  If E
    If DEBUG
      Print #StatChan; Using "######";"ORDER: ";H0[7];" failed truck number "
    End If 
    Goto SRCHORDH
  End If 
End If 
If Not(ISELECT) If (S5 < STRUCK Or S5 > ETRUCK)
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" failed truck number "
  End If 
  Goto SRCHORDH
End If 
X2 = H0[10]
If X2 And X2 <> 999999 Gosub YMD2JUL \ X2 = 0
JODATE = X2
If (Not(XDMTCH) and JSDATE < JODATE) or (XDMTCH and JSDATE<>JODATE)
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" failed ship date: ";H0[10]
  End If 
  Goto SRCHORDH
End If 
Mat Read #CH_ROT,H0[3],8;T2;
X2 = T2[21] \ For K = 0 To 11
  T9[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K
If T9[0]
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" failed credit check: "
  End If 
  Goto SRCHORDH
End If 
KEYROL$ = H0[7] Using "######"
If DEBUG
  Print #StatChan; Using "######";"ORDER: ";H0[7];" processing lines "
End If 
SRCHROL: Rem Search order line
Search #CH_ROL,3,1;KEYROL$,REC_ROL,E
If E = 2 Goto SRCHORDH
If E Gosub ERR_SEARCH
If KEYROL$[1,6] <> KEYORDH$[3,8] Goto SRCHORDH
Gosub READROL
If WHS <> L4[3]
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" LINE: ";L3[2];" no whs match";L4[3]
  End If 
  Goto SRCHROL
End If 
If Not(L7[4])
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" LINE: ";L3[2];" no qty to ship"
  End If 
  Goto SRCHROL
End If 
If L3[0]
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" LINE: ";L3[2];" non-inventory item"
  End If 
  Goto SRCHROL
End If 
If Not(L3[1])
  If DEBUG
    Print #StatChan; Using "######";"ORDER: ";H0[7];" LINE: ";L3[2];" not flagged to update stock"
  End If 
  Goto SRCHROL
End If 
If S2[0] = 3 Goto SRCHROL
REC_PROD = L4[0]
Rem {begin src/inc/read.prod.i}
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Rem {end read.prod.i}
KEYSORT$ = " ",KEYSORT$;KEYSORT$[1,12] = A$[140,151];KEYSORT$[13,14] = L4[3] Using "##"
KEYSORT$[15] = KEYROL$
Search #CH_SORT,4,1;KEYSORT$,REC_ROL,E \ If E Gosub ERR_SEARCH
KEYSORT$[15] = "000000000"
REC_ROL = 0
Search #CH_SORT,4,1;KEYSORT$,REC_ROL,E \ If E > 1 Gosub ERR_SEARCH
Goto SRCHROL
SRCHPHS2: Rem allocation process
If DEBUG
  Print #StatChan;"-------PHASE 2:  Allocate Products For Replenishment "
End If 
KEYSORT$ = " ",KEYSORT$;KEYSORT1$ = ""
TOTALLOC = 0;TMPORDER = 999999;TMPLINE = 999
SRCHSORT: Rem search sort file
Search #CH_SORT,3,1;KEYSORT$,REC_ROL,E
If E = 2 Goto ENDRPALLOC
If E Gosub ERR_SEARCH
If KEYSORT$[1,14] <> KEYSORT1$[1,14]
  If DEBUG
    Print #StatChan;"Product: ";KEYSORT$[1,12];" processing"
  End If 
  TOTALLOC = 0;OVFLAG = 0;ORDALLOC = 0;QTYAVAILABLE = 0
  KEYSORT1$[1,14] = KEYSORT$[1,14]
  KEYSPLT$ = " ",KEYSPLT$;ORDALLOC = 0
  PRIM_REC_PRDL = 0
CLEARSORT: Rem clear prodlotsort file
  Search #CH_SPLT,3,1;KEYSPLT$,REC_SPLT,E
  If E = 2 Goto ENDCLEARSORT
  If E Gosub ERR_SEARCH
  Search #CH_SPLT,5,1;KEYSPLT$,REC_SPLT,E
  If E Gosub ERR_SEARCH
  Goto CLEARSORT
ENDCLEARSORT: Rem end sort clear
  KEYPLOC$ = " ",KEYPLOC$;KEYPLOC$[1,14] = KEYSORT$[1,14]
  Search #CH_PLOC,3,1;KEYPLOC$,REC_PLOC,E
  If E And E <> 2 Gosub ERR_SEARCH
  If E = 2 Or KEYPLOC$[1,14] <> KEYSORT$[1,14]
    If DEBUG
      Print #StatChan;"PRODUCT: ";KEYSORT$[1,12];" primary location not found"
    End If 
    ! Print @0,23;'CL';"Determining Allocation....please wait.....";
    KEYSORT$[13,14] = "99"
    Goto SRCHSORT
  End If 
  PRIM$[1,6] = KEYPLOC$[15]
  KEYPRDL$ = " ",KEYPRDL$;KEYPRDL$[1,14] = KEYSORT$[1,14]
SRCHPRDL: Rem search sprodlot file to sort by date
  Search #CH_PRDL,3,2;KEYPRDL$,REC_PRDL,E
  If E If E <> 2 Gosub ERR_SEARCH
  If KEYPRDL$[1,14] <> KEYSORT$[1,14] Or E = 2 Goto ENDSRCHPRDL
  If KEYPRDL$[1,20] = KEYPLOC$[1,20]
    PRIM_REC_PRDL = REC_PRDL
    Gosub READPRDL
    QTYAVAILABLE = P3[0] - P3[1] - P3[3]
    If QTYAVAILABLE < 0
      Goto ISPRIM
    End If 
    Goto SRCHPRDL
  End If 
  If KEYPRDL$[15,19] = "STOCK" And DFLTRCVLOC$[1,5] <> "STOCK" Goto SRCHPRDL
  If KEYPRDL$[15,18] = "NONE" Goto SRCHPRDL
  Gosub READPRDL
  KEYSPLT$ = " ",KEYSPLT$
ISPRIM: If PLT1$[1,6] = DFLTRCVLOC$[1,6] Let P2[0] = 999999
  KEYSPLT$[1,14] = KEYPRDL$[1,14];KEYSPLT$[15,20] = P2[0] Using "&&&&&&"
  KEYSPLT$[21,26] = KEYPRDL$[15]
  Search #CH_SPLT,4,1;KEYSPLT$,REC_PRDL,E \ If E > 1 Gosub ERR_SEARCH
  Goto SRCHPRDL
ENDSRCHPRDL: Rem end sort of sprodlot
End If 
If REC_ROL = 0 ! check overflow on primary
  If PRIM_REC_PRDL = 0 Goto SRCHSORT
  REC_PRDL = PRIM_REC_PRDL
  Gosub READPRDL
  If P3[0] - P3[1] - P3[3] < 0 ! negative primary qty
    ORDALLOC = 0;L7[4] = P3[3]
    OL3[0] = L7[4];OL3[1] = L7[4]
    Goto OFJUMP
  End If 
  TOTALLOC = TOTALLOC + P3[3]
  Goto SRCHSORT
End If 
Gosub READROL
KEYORDL$ = " ",KEYORDL$;KEYORDL$[1,6] = L2[1] Using "######"
KEYORDL$[7] = L3[2] Using "###";ORDALLOC = 0
SRCHORDL: Rem search order lot file
Search #CH_ORDL,3,3;KEYORDL$,REC_ORDL,E
If E = 2 Goto SRCHSORT
X2 = KEYORDL$[1,6] \ If X2 <> L2[1] Goto SRCHSORT
X2 = KEYORDL$[7,9] \ If X2 <> L3[2] Goto SRCHSORT
X2 = KEYORDL$[10,11] \ If X2 <> WHS Goto SRCHSORT
If KEYORDL$[12,17] <> "NONE  " And KEYORDL$[12,16] <> "STOCK"
  Goto SRCHORDL
End If 
Rem {begin src/inc/read.ordl.i}
Mat Read #CH_ORDL,REC_ORDL,0;S0$
Mat Read #CH_ORDL,REC_ORDL,36;OL1
Mat Read #CH_ORDL,REC_ORDL,44;OL2
Mat Read #CH_ORDL,REC_ORDL,60;OL3
Mat Read #CH_ORDL,REC_ORDL,96;OL2$
Rem {end read.ordl.i}
If OL1[1] <> 2 Goto SRCHORDL
OFJUMP: QTYALLOC = OL3[1]
If OVFLAG Goto SETKEYSPLT
KEYPRDL$ = KEYPLOC$
Search #CH_PRDL,3,2;KEYPRDL$,REC_PRDL,E
If E = 2 Goto SETKEYSPLT
If E Gosub ERR_SEARCH
If KEYPRDL$[1,20] <> KEYPLOC$[1,20] Goto SETKEYSPLT
Gosub READPRDL
If (P3[0] - P3[1] - TOTALLOC) >= QTYALLOC
  TOTALLOC = TOTALLOC + QTYALLOC;ORDALLOC = ORDALLOC + QTYALLOC
  Goto SRCHORDL
Else 
  If (P3[0] - P3[1] - TOTALLOC) > 0
    QTY = P3[0] - P3[1] - TOTALLOC \ If QTY < 0 Let QTY = 0
    TOTALLOC = TOTALLOC + QTY;ORDALLOC = ORDALLOC + QTY
    QTYALLOC = QTYALLOC - QTY
  End If 
End If 
SETKEYSPLT: Gosub ALLOCOF
If ORDALLOC < L7[4]
  If DEBUG
    Print #StatChan;"Product: ";KEYSORT$[1,12];" not enough for complete allocation"
  End If 
  KEYSORT$[13,14] = "99"
  Goto SRCHSORT
End If 
ORDALLOC = 0
Goto SRCHSORT
ALLOCOF: Rem set up key to search product lots
KEYSPLT$ = " ",KEYSPLT$;KEYSPLT$[1,14] = KEYSORT$[1,14]
SRCHOVFL: Rem search overflow locations for products
OVFLAG = 99
Search #CH_SPLT,3,1;KEYSPLT$,REC_PRDL,E
If E = 2 Goto ENDORDL
If E Gosub ERR_SEARCH
If KEYSPLT$[1,14] <> KEYSORT$[1,14] Goto ENDORDL
Gosub READPRDL
RPH1[0] = 0
KEYRPH$[1,2] = P1[0] Using "##";KEYRPH$[3,8] = PLT1$[1,6]
KEYRPH$[9,20] = PLT$[1,12]
Search #CH_RPH,2,1;KEYRPH$,REC_RPH,E
If E And E <> 1 Gosub ERR_SEARCH
If Not(E) Mat Read #CH_RPH,REC_RPH,32;RPH1;
If (P3[0] - P3[1] - P3[3] - RPH1[0]) >= QTYALLOC
  QTYOVFL = QTYALLOC;TOTALLOC = TOTALLOC + QTYALLOC;ORDALLOC = ORDALLOC + QTYALLOC
  QTYALLOC = 0
  Gosub UPDATEREPL
  If ORDALLOC >= L7[4] Goto ENDORDL
  Return 
Else 
  If (P3[0] - P3[1] - P3[3] - RPH1[0]) > 0
    QTYOVFL = P3[0] - P3[1] - P3[3] - RPH1[0]
    Gosub UPDATEREPL
    TOTALLOC = TOTALLOC + QTYOVFL;ORDALLOC = ORDALLOC + QTYOVFL
    If ORDALLOC >= L7[4] Goto ENDORDL
    QTYALLOC = QTYALLOC - QTYOVFL
    Goto SRCHOVFL
  End If 
End If 
Goto SRCHOVFL
ENDORDL: Rem end searching thru order lot
Return 
ENDRPALLOC: Rem end allocation reset flags
KEYRPH$ = " ",KEYRPH$
Search #CH_RPH,3,1;KEYRPH$,REC_RPH,E \ If E And E <> 2 Gosub ERR_SEARCH
If E = 2
  Message$="No Primary Location Replenishments Have Been Allocated"
  Print #StatChan;Message$
  N4[2] = 0
  END ! Goto OUTEND
End If 
If DEBUG
  Print #StatChan;"ALLOCATION COMPLETE!  CHAINING TO MX346A for Report"
  Close #StatChan
End If 
N4[2] = 1
RPTWHSE = WHS;SHPDATE = SDATE
Chain "346a.dl4"
Goto OUTEND
READROL: Rem read line item file
Rem {begin src/inc/read.rol.i}
Mat Read #CH_ROL,REC_ROL,0;L2
Mat Read #CH_ROL,REC_ROL,8;L3
Mat Read #CH_ROL,REC_ROL,16;L4
Mat Read #CH_ROL,REC_ROL,32;L5
Mat Read #CH_ROL,REC_ROL,56;L6
Mat Read #CH_ROL,REC_ROL,80;L6$
Mat Read #CH_ROL,REC_ROL,140;L1$
Mat Read #CH_ROL,REC_ROL,160;L9
Mat Read #CH_ROL,REC_ROL,168;L7
Mat Read #CH_ROL,REC_ROL,246;PL
Mat Read #CH_ROL,REC_ROL,250;UN
Mat Read #CH_ROL,REC_ROL,256;S2
Mat Read #CH_ROL,REC_ROL,260;S3
Mat Read #CH_ROL,REC_ROL,368;MT$
Mat Read #CH_ROL,REC_ROL,370;S3$
Mat Read #CH_ROL,REC_ROL,404;OLM
Mat Read #CH_ROL,REC_ROL,446;EUN
Mat Read #CH_ROL,REC_ROL,452;UNF
Mat Read #CH_ROL,REC_ROL,494;LCO
Mat Read #CH_ROL,REC_ROL,502;CST
Mat Read #CH_ROL,REC_ROL,508;LTAX1
Mat Read #CH_ROL,REC_ROL,514;CTWT
Mat Read #CH_ROL,REC_ROL,524;GWGT
Mat Read #CH_ROL,REC_ROL,532;GWGT1
Mat Read #CH_ROL,REC_ROL,538;LTAX2
Mat Read #CH_ROL,REC_ROL,542;QPB
Read #CH_ROL,REC_ROL,548;LPRINTED
Read #CH_ROL,REC_ROL,550;OWHS
Read #CH_ROL,REC_ROL,552;LP_DATE
Read #CH_ROL,REC_ROL,556;LP_TIME
Rem {end read.rol.i}
Return 
READPRDL: Rem read sprodlot file
Rem {begin src/inc/read.prdl.i}
Mat Read #CH_PRDL,REC_PRDL,0;PLT$
Mat Read #CH_PRDL,REC_PRDL,66;P1
Mat Read #CH_PRDL,REC_PRDL,70;P2
Mat Read #CH_PRDL,REC_PRDL,82;P3
Mat Read #CH_PRDL,REC_PRDL,112;P4
Mat Read #CH_PRDL,REC_PRDL,114;PLT1$
Mat Read #CH_PRDL,REC_PRDL,120;PLTR
Rem {end read.prdl.i}
Return 
READRPH: Rem read replenishment header
Mat Read #CH_RPH,REC_RPH,0;RPH0;
Mat Read #CH_RPH,REC_RPH,8;RPH0$;
Mat Read #CH_RPH,REC_RPH,32;RPH1
Return 
WRITERPH: Rem write replenishment header
Mat Write #CH_RPH,REC_RPH,0;RPH0
Mat Write #CH_RPH,REC_RPH,8;RPH0$
Mat Write #CH_RPH,REC_RPH,32;RPH1;
Return 
READRPL: Rem read replenishment lines
Mat Read #CH_RPL,REC_RPL,0;RPL0;
Mat Read #CH_RPL,REC_RPL,6;RPL$;
Mat Read #CH_RPL,REC_RPL,30;RPL1;
Mat Read #CH_RPL,REC_RPL,46;RPL2
Return 
WRITERPL: Rem write replenishment lines
Mat Write #CH_RPL,REC_RPL,0;RPL0
Mat Write #CH_RPL,REC_RPL,6;RPL$
Mat Write #CH_RPL,REC_RPL,30;RPL1
Mat Write #CH_RPL,REC_RPL,46;RPL2;
Return 
UPDATEREPL: Rem update replenishment files
KEYRPH$ = " ",KEYRPH$
KEYRPH$[1,2] = P1[0] Using "##";KEYRPH$[3,8] = PLT1$[1,6];KEYRPH$[9,20] = PLT$[1,12]
Search #CH_RPH,2,1;KEYRPH$,REC_RPH,E
If E And E <> 1 Gosub ERR_SEARCH
If E = 1
  For X = 0 To 3 \ RPH0[X] = 0 \ Next X
  RPH0$ = " ",RPH0$;RPH1[0] = 0;RPH1[1] = 0
  RPH0[0] = P1[0];RPH0[3] = PFU1[8]
  RPH0$[1,12] = PLT$[1,12]
  RPH0$[13,18] = PLT1$[1,6]
  RPH0$[19,24] = PRIM$
  E = 2 \ Search #CH_RPH,1,0;KEYRPH$,REC_RPH,E \ If E Gosub ERR_SEARCH
  Gosub WRITERPH
  KEYRPH$ = " ",KEYRPH$
  KEYRPH$[1,2] = P1[0] Using "##"
  KEYRPH$[3,8] = PRIM$
  KEYRPH$[9,20] = PLT$[1,12]
  KEYRPH$[21,26] = PLT1$[1,6]
  Search #CH_RPH,4,2;KEYRPH$,REC_RPH,E \ If E Gosub ERR_SEARCH
  KEYRPH$ = " ",KEYRPH$
  KEYRPH$[1,2] = P1[0] Using "##"
  KEYRPH$[3,8] = PLT1$[1,6]
  KEYRPH$[9,20] = PLT$[1,12]
  Search #CH_RPH,4,1;KEYRPH$,REC_RPH,E \ If E Gosub ERR_SEARCH
End If 
Gosub READRPH
RPH1[0] = RPH1[0] + QTYOVFL
Gosub WRITERPH
KEYRPL$ = " ",KEYRPL$;KEYRPL$[1,20] = KEYRPH$[1,20]
If REC_ROL = 0
  KEYRPL$[21,26] = TMPORDER Using "######"
  KEYRPL$[27] = TMPLINE Using "###"
Else 
  KEYRPL$[21,26] = OL2[0] Using "######"
  KEYRPL$[27] = OL1[0] Using "###"
End If 
Search #CH_RPL,2,1;KEYRPL$,REC_RPL,E
If E And E <> 1 Gosub ERR_SEARCH
If E = 1
  For X = 0 To 2 \ RPL0[X] = 0 \ Next X
  RPL$ = " ",RPL$;RPL1 = 0;RPL2 = 0
  RPL0[0] = P1[0]
  If REC_ROL = 0
    RPL0[1] = TMPLINE
  Else 
    RPL0[1] = OL1[0]
  End If 
  RPL$[1,12] = PLT$[1,12];RPL$[13,18] = PLT1$[1,6];RPL$[19,24] = PRIM$[1,6]
  If REC_ROL = 0
    RPL1 = TMPORDER
  Else 
    RPL1 = OL2[0]
  End If 
  E = 2 \ Search #CH_RPL,1,0;KEYRPL$,REC_RPL,E \ If E Gosub ERR_SEARCH
  Gosub WRITERPL
  Search #CH_RPL,4,1;KEYRPL$,REC_RPL,E \ If E Gosub ERR_SEARCH
End If 
Gosub READRPL
RPL2 = RPL2 + QTYOVFL
Gosub WRITERPL
Return 

CLEAR_SORT98: Rem ==========================clear the sort file
SChan=Findchannel()
  Gosub OPEN_SORT98

Return 
OPEN_SORT98: Rem
SCRATCH$ = "[1:1] 6/SORTWORKT" + Str$(Spc(6)) + "!"
Build #SChan,SCRATCH$
R[9] = 25 \ Search #SChan,0,1;F$,R[9],E \ If E Gosub ERR_SEARCH
R[9] = 1 \ Search #SChan,0,0;F$,R[9],E \ If E Gosub ERR_SEARCH
R[9] = 0 \ Search #SChan,1,0;F$,R[9],E \ If E Gosub ERR_SEARCH
Return 
L_10000: Rem
ISELECT = 1
!Print @10,22;'CE';"  ENTER ADDITIONAL TRUCK NUMBER, WHEN DONE ENTER /"
!Print @0,10;'CL';"Enter Truck Number: ";
!Input Len 16384 + 6;""TRUCK$
clear tmp$
tmp$=Truck$[2] ! drop the first I
! sent as comma delimited
		CPOS=1
		stloop: ! loop it
		Search tmp$[CPOS],",",EPOS
		If EPOS
			x1 = cpos + epos - 2 ! move to before comma
			tmp1$=tmp$[CPOS,X1]
			
			let x2=tmp1$
			if x2>0 and x2<100
				clear truck$
				truck$=tmp1$
				gosub L_1720 ! add to sort
			Endif
			cpos = cpos + epos ! start after comma
			EPOS=0
			Goto STLoop ! look for next
		Else ! no more commas, was there no comma at end?
			if cpos>1 and CPOS<=Len(tmp$) ! found one comma
				tmp1$=tmp$[CPOS]
				
				let x2=tmp1$
				if x2>0 and x2<100
					clear truck$
					truck$=tmp1$
					gosub L_1720 ! add to sort
				Endif
			Endif
		Endif
Return
L_1720: Rem INSERT SELECTED TRUCK INTO SORTFILE
K98$ = " ",K98$
TRUCK = TRUCK$
K98$ = "{",TRUCK Using "######"
Search #SChan,4,1;K98$,R98,E \ If E > 1 Gosub ERR_SEARCH
Return 

Rem {begin src/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
If X2 <= 0 Let X$ = " ",X$ \ Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Let E=1 \ Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
If X2 <= 0 Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
Rem {end rtn.date.i}
Rem {begin call.input.i}
ISINPUT: Rem  Drop-in change to Call Input   G.Doscher  10/29/96
Return 
ISERRMSG: Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end call.input.i}
OUTEND: Rem"Exit entirely
If Err 0 Rem
Close #CH_RPH
Close #CH_RPL
Kill RPHFLE$
Kill RPLFLE$
If Err 0 Gosub ERR_TRAP
Returnstatus=1 ! if here - something wrong
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
END
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
call programdump("tmp/ir346se!","")
Error 11000
End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
if statchan
	print #statchan;message$
	print #statchan;"The accept has ended in an error"
Else
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
Endif
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End