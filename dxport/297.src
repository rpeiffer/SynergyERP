!!>>> Program 297
!
! description  CREDIT MEMOS FROM INVOICES REPORT   
!
! loadsave -w -n 100,10 -o prog/dxport/297.dl4 src/297.src
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP 27, 2004  12:25:34
Rem /w/papermaster/r2002//usr/acct/jcs/work/devl/mx2/mx297.src (univ2) [jcs] {53194}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem  MX297 - is this custom?  no, it is standard
Rem     c/m from inv in the same month report
Rem     originally for central lewmar 961001 cct# 93921
!
Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate
!!Option Default Dialect IRIS1
Rem {begin dim.rtn.input}
If Err 0 Gosub ERR_TRAP
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Rem {begin srcdevl/inc/dim.invh.i}
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8]
Dim 2%,HFAX[1],HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL,OREF[5]
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Rem {end dim.invh.i}
Rem {begin srcdevl/inc/dim.invl.i}
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,INVNO,QPB,ROL0
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Rem {end dim.invl.i}
Rem {begin srcdevl/inc/dim.invt.i}
Dim 1%,DCLVL,MCTXBL[9]
Dim 2%,MCODE[9],T1[1],JRNL
Dim 3%,MCHARGE[9,1],T2[25],TOT[4],INVNO
Rem {end dim.invt.i}
Rem {begin srcdevl/inc/dim.cust.i}
Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142]
Dim 2%,A0[3],C1[12],REC,C3[1]
Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8,C11[2]
Dim 3%,C4[6],C10[5],CFIN[8],U1,C9,C5[5],C6[9],C12[1]
Rem {end dim.cust.i}
Dim 1%,LJ1,LJ2,LJ9,FLAG
Dim 2%,IH0[12],Q0[1],ARDATE,D3[1]
Dim 3%,CMGLCOST,INVGLCOST,TOTGLCOST,CMTOT,INVTOT,INVLOAD,CMLOAD
Dim 3%,CMGLCOSTTOT,INVGLCOSTTOT,CMTOTTOT,INVTOTTOT,INVLOADTOT,CMLOADTOT
Dim 3%,IOREF[5],X3[1],INVL
Dim ANS$[2],ARDATE$[8],CMDATE$[6],CNAME$[30],CUST$[6],F$[50]
Dim INVDATE$[6],INVHHKEY$[45],INVHKEY$[30],INVL$[40],K9$[50],PMASK$[12]
Dim EDATE$[6],SDATE$[6],LINE_$[131] 
!
dim tmp$[900],tmp1$[100]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
Rem {end dim.rtn.input}
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!!Window On \ Print 'CS'; \ Window Off 
LINE_$ = "-",LINE_$
CH_CNTRL = 1
COID = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
Mat Read #CH_CNTRL,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
!
If Err 0 Let SCRN = Spc(8)
SCRN = 0 \ LJ9 = Chf(0)
!!If Err 0 Gosub ERR_ESCAPE
If SCRN If SCRN <> 49 Goto ERR_TRAP
LJ1 = 99
LJ9 = 62 \ If SCRN Let LJ9 = 20
j8=SCRN
!
Mat Read #CH_CNTRL,0,100;ARDATE$;
Read #CH_CNTRL,0,108;ARDATE;
Read #CH_CNTRL,3;CNAME$;
J1$[1,2] = Tim(8) Using "&&"
J1$[3,4] = Tim(9) Using "&&"
J1$[5,6] = Tim(10) Using "&&"
SDATE$ = J1$;EDATE$ = J1$
Mat Read #1,88,1136;F$;
CH_INVH = 2
Ropen #CH_INVH,F$
CH_INVL = 4
Mat Read #1,88,1184;F$;
Ropen #CH_INVL,F$
CH_CUST = 5
Mat Read #1,88,1808;F$;
Ropen #CH_CUST,F$
CH_INVT = 6
Mat Read #1,88,1168;F$;
Ropen #CH_INVT,F$
!
! -  dx add xport reporting code
call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
CH_INVHHKEY = 3
F$ = "4/sordflehhkey" + Str$(intCO)
Ropen #CH_INVHHKEY,F$
!
if J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"297",fdel$,rdel$
  call addtostr(e$,rstr$,tmp$)
End if
!
call dxget("SDATE",TMP$)
call dxget("EDATE",TMP1$)
!
! start date
X$ = TMP$  
tmp$ = X$[5,6],X$[1,2],X$[3,4]
X$ = tmp$  \ X2=X$ \ GOSUB ISDUNPACK
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) 
if E or X2 = 0 let JSDATE = -1 else let JSDATE = X$[1,5]
If JSDATE < 0  let e$="Invalid date, must be <= 123199!" \ error 10000 
SDATE$ = tmp$
!
! end date
X$ = TMP1$  
tmp1$ = X$[5,6],X$[1,2],X$[3,4]
X$ = tmp1$  \ X2=X$ \ GOSUB ISDUNPACK
Call VerifyDate(X$,X$,E) \ If E LET  X$ = "    "
 X2 = X$[1,6] \ X$=X2 USING "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E   let e$="Invalid date, must be <= 123199!" \ error 10000
X2 = X$[1,5] \ JEDATE = X2 \ EDATE$ = tmp1$
!
If JSDATE > JEDATE LET e$="Invalid ending date, must be between starting date and 123199!" \ error 10000

if j8
  tmp$="INVOICE NUMBER",fdel$
  tmp$=tmp$,"INVOICE DATE",fdel$
  tmp$=tmp$,"CREDIT MEMO NUMBER",fdel$
  tmp$=tmp$,"CREDIT MEMO DATE",fdel$
  tmp$=tmp$,"CUSTOMER NUMBER",fdel$
  tmp$=tmp$,"CUSTOMER  NAME",fdel$
  tmp$=tmp$,"SALES PRICE INVOICE",fdel$
  tmp$=tmp$,"SALES PRICE CR MEMO",fdel$
  tmp$=tmp$,"LOAD COST INVOICE",fdel$
  tmp$=tmp$,"LOAD COST CR MEMO",fdel$
  tmp$=tmp$,"GL COST INVOICE",fdel$
  tmp$=tmp$,"GL COST CR MEMO",fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
end if 
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If
!
!!Gosub PRINT_SCREEN
!!Gosub GET_START_DATE
!!Gosub GET_END_DATE
!!PROMPT: !!Print @0,23;'CL'; Tab 10;"Enter #:Field,  E: Exit,  P: Print  ";
!!Input Len 2;""ANS$
!!Call String(1,ANS$)
!!If ANS$ = "E" Goto OUTEND
!!If ANS$ = "P" Goto START_SORT
!!If ANS$ = "1" Gosub GET_START_DATE
!!If ANS$ = "2" Gosub GET_END_DATE
!!Goto PROMPT
!!PRINT_SCREEN: Rem  input screen
!!Print 'CS';
!!Print @30,0;"CREDIT MEMOS FROM INVOICES REPORT ";
!!Print @2,2;" This report searches the history file selecting C/M's created"
!!Print @2,3;" from invoices during the same month as the invoice date.  "
!!Print @5,7;" 1> Start Date: ";
!!Print @5,8;" 2> End   Date: ";
!!Return 
!!GET_START_DATE: Rem
!!J1 = SDATE$
!!J0$ = "5 00062107"
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!!Call "input",J1,J$,J0$,J1$,J4$,J5$
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!!X2 = J1 \ Gosub YMD2JUL \ Goto GET_START_DATE
!!SDATE$ = J1 Using "######"
!!JSDATE = X2
!!Return 
!!GET_END_DATE: Rem
!!J1 = EDATE$
!!J0$ = "5 00062108"
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!!Call "input",J1,J$,J0$,J1$,J4$,J5$
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!!X2 = J1 \ Gosub YMD2JUL \ Goto GET_END_DATE
!!EDATE$ = J1 Using "######"
!!JEDATE = X2
!!If JSDATE > JEDATE Goto GET_END_DATE
!!Return 
!
START_SORT: Rem
INVHHKEY$ = " ",INVHHKEY$
INVHHKEY$[1,6] = JSDATE Using "######"
INVHHKEY$[7,8] = "31"
LOOP_INVH: Rem
Search #CH_INVHHKEY,3,2;INVHHKEY$,REC_INVH,E 
If E Goto DONE
X2 = INVHHKEY$[1,6] \ If X2 > JEDATE Goto DONE
If INVHHKEY$[7,8] <> "31" Goto LOOP_INVH
Gosub READ_INVH
If OREF[1] = H0[7] Goto LOOP_INVH
CMDATE$ = H0[8] Using "######"
INVHKEY$ = " ",INVHKEY$;INVHKEY$ = OREF[1] Using "30##########"
Search #CH_INVH,2,1;INVHKEY$,REC_INV,E \ If E Goto LOOP_INVH
Mat Read #CH_INVH,REC_INV,0;IH0;
Mat Read #CH_INVH,REC_INV,512;IOREF;
INVDATE$ = IH0[8] Using "######"
If CMDATE$[1,4] <> INVDATE$[1,4] Goto LOOP_INVH
Gosub GET_CUSTOMER
INVT = IOREF[5] \ Gosub GET_INVT \ INVTOT = T2[0];INVLOAD = T2[17]
INVT = OREF[5] \ Gosub GET_INVT \ CMTOT = T2[0];CMLOAD = T2[17]
INVL = OREF[1] \ Gosub GET_GLCOST \ INVGLCOST = TOTGLCOST
INVL = H0[7] \ Gosub GET_GLCOST \ CMGLCOST = TOTGLCOST
Gosub PRINT_LINE
Goto LOOP_INVH
!
PRINT_HEADING: Rem "==================================== headings
if j8 return ! dx xml
!
If LJ1 < LJ9 Return 
!!If LJ2 If SCRN Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
if not(j8) If LJ2 If Not(SCRN) Print #0;"\14\";
LJ2 = LJ2 + 1 \ LJ1 = 6
Print #0;"\12\"; 
Print #0;" - 297 - ";Msc$(3);
Print #0; Tab (60 - Len(CNAME$) / 2);CNAME$;
Print #0; Using "PAGE ####"; Tab 122;LJ2
Print #0; Tab 45;"CREDIT MEMOS FROM INVOICES REPORT"
Print #0;""
Print #0; Tab 4;"INVOICE"; Tab 18;"CREDIT MEMO"; Tab 38;"CUSTOMER";
Print #0; Tab 71;"SALES PRICE"; Tab 95;"LOAD COST"; Tab 119;"GL COST"
Print #0; Tab 0;"NUMBER"; Tab 9;"DATE"; Tab 17;"NUMBER"; Tab 26;"DATE";
Print #0; Tab 34;"NUMBER"; Tab 42;"NAME"; Tab 67;"INVOICE";
Print #0; Tab 78;"CR MEMO"; Tab 90;"INVOICE"; Tab 101;"CR MEMO";
Print #0; Tab 113;"INVOICE"; Tab 124;"CR MEMO"
Print #0;LINE_$
Return 
!
PRINT_LINE: Rem
Gosub PRINT_HEADING
if j8 !!xml
  tmp$= OREF[1] Using "########",fdel$
  X2 = IH0[8] \ Gosub ISDUNPACK
  tmp$=tmp$,X$,fdel$
  tmp$=tmp$,H0[7] Using "######",fdel$
  X2 = H0[8] \ Gosub ISDUNPACK
  tmp$=tmp$, X$,fdel$
  tmp$=tmp$,H0[4] Using "######",fdel$
  tmp$=tmp$,rtrim$(A1$[31,50]),fdel$
  tmp$=tmp$,INVTOT Using PMASK$,fdel$
  tmp$=tmp$,CMTOT Using PMASK$,fdel$
  tmp$=tmp$,INVLOAD Using PMASK$,fdel$
  tmp$=tmp$,CMLOAD Using PMASK$,fdel$
  tmp$=tmp$,INVGLCOST Using PMASK$,fdel$
  tmp$=tmp$,CMGLCOST Using PMASK$,fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
else  !!pdf
  Print #0; Using "########"; Tab 0;OREF[1];
  X2 = IH0[8] \ Gosub ISDUNPACK
  Print #0; Tab 9;X$;
  Print #0; Using "######"; Tab 18;H0[7];
  X2 = H0[8] \ Gosub ISDUNPACK
  Print #0; Tab 25;X$;
  Print #0; Using "######"; Tab 34;H0[4];
  Print #0; Tab 42;A1$[31,50];
  Print #0; Using PMASK$; Tab 64;INVTOT; Tab 75;CMTOT;
  Print #0; Using PMASK$; Tab 87;INVLOAD; Tab 98;CMLOAD;
  Print #0; Using PMASK$; Tab 110;INVGLCOST; Tab 121;CMGLCOST
end if
LJ1 = LJ1 + 1
Gosub ACCUM_TOTALS
Return 
!
PRINT_TOTALS: Rem
if j8 return ! dx xml
!
LJ1 = LJ1 + 2
Gosub PRINT_HEADING
Print #0;""
Print #0; Tab 20;"TOTALS ";
Print #0; Using PMASK$; Tab 64;INVTOTTOT; Tab 75;CMTOTTOT;
Print #0; Using PMASK$; Tab 87;INVLOADTOT; Tab 98;CMLOADTOT;
Print #0; Using PMASK$; Tab 110;INVGLCOSTTOT; Tab 121;CMGLCOSTTOT
Return 
!
GET_INVT: Rem
REC_INVT = OREF[5]
Rem {begin srcdevl/inc/read.invt.i}
Mat Read #CH_INVT,REC_INVT,0;T1
Mat Read #CH_INVT,REC_INVT,8;T2
Mat Read #CH_INVT,REC_INVT,164;JRNL
Mat Read #CH_INVT,REC_INVT,168;MCODE
Mat Read #CH_INVT,REC_INVT,208;MCHARGE
Mat Read #CH_INVT,REC_INVT,328;TOT
Mat Read #CH_INVT,REC_INVT,358;MCTXBL
Mat Read #CH_INVT,REC_INVT,378;DCLVL
Mat Read #CH_INVT,REC_INVT,400;INVNO
Rem {end read.invt.i}
Return 
!
GET_GLCOST: Rem
TOTGLCOST = 0
INVL$ = " ",INVL$;INVL$ = INVL Using "##########"
LOOP_INVL: Search #CH_INVL,3,1;INVL$,REC_INVL,E \ If E Return 
Gosub READ_INVL
X3[1] = INVL$[1,10]
If INVL <> X3[1] Return 
TOTGLCOST = TOTGLCOST + L7[10]
Goto LOOP_INVL
!
GET_CUSTOMER: Rem
CUST$ = " ",CUST$;CUST$ = H0[4] Using "######"
Search #CH_CUST,2,1;CUST$,REC_CUST,E 
if E let A1$=" ",A1$
if E=0 Mat Read #CH_CUST,REC_CUST,0;A1$;
Return 
!
ACCUM_TOTALS: Rem
TOTFLAG = 1
INVTOTTOT = INVTOTTOT + INVTOT;CMTOTTOT = CMTOTTOT + CMTOT
INVLOADTOT = INVLOADTOT + INVLOAD;CMLOADTOT = CMLOADTOT + CMLOAD
INVGLCOSTTOT = INVGLCOSTTOT + INVGLCOST;CMGLCOSTTOT = CMGLCOSTTOT + CMGLCOST
Return 
!
READ_INVH: Rem
Rem {begin srcdevl/inc/read.invh.i}
Mat Read #CH_INVH,REC_INVH,0;H0
Mat Read #CH_INVH,REC_INVH,52;H3
Mat Read #CH_INVH,REC_INVH,56;TOT_SELL
Mat Read #CH_INVH,REC_INVH,64;LOCKPORT
Mat Read #CH_INVH,REC_INVH,66;V0$
Mat Read #CH_INVH,REC_INVH,78;H4
Mat Read #CH_INVH,REC_INVH,84;H0$
Mat Read #CH_INVH,REC_INVH,104;H5
Mat Read #CH_INVH,REC_INVH,172;ST3
Mat Read #CH_INVH,REC_INVH,272;H1$
Mat Read #CH_INVH,REC_INVH,278;SLSM
Mat Read #CH_INVH,REC_INVH,318;SCOM
Mat Read #CH_INVH,REC_INVH,348;SMER
Mat Read #CH_INVH,REC_INVH,378;SCST
Mat Read #CH_INVH,REC_INVH,408;H6
Mat Read #CH_INVH,REC_INVH,444;HMAT$
Mat Read #CH_INVH,REC_INVH,446;P0$
Mat Read #CH_INVH,REC_INVH,466;HFAX
Mat Read #CH_INVH,REC_INVH,474;HSTI
Mat Read #CH_INVH,REC_INVH,482;H2
Mat Read #CH_INVH,REC_INVH,486;OWHT
Mat Read #CH_INVH,REC_INVH,490;OWHT1
Mat Read #CH_INVH,REC_INVH,498;TOTGL
Mat Read #CH_INVH,REC_INVH,504;PICKBY
Mat Read #CH_INVH,REC_INVH,512;OREF
Rem {end read.invh.i}
Return 
!
READ_INVL: Rem
Rem {begin srcdevl/inc/read.invl.i}
Mat Read #CH_INVL,REC_INVL,0;L2
Mat Read #CH_INVL,REC_INVL,8;L3
Mat Read #CH_INVL,REC_INVL,16;L4
Mat Read #CH_INVL,REC_INVL,32;L5
Mat Read #CH_INVL,REC_INVL,56;L6
Mat Read #CH_INVL,REC_INVL,80;L6$
Mat Read #CH_INVL,REC_INVL,140;L1$
Mat Read #CH_INVL,REC_INVL,160;L9
Mat Read #CH_INVL,REC_INVL,168;L7
Mat Read #CH_INVL,REC_INVL,246;PL
Mat Read #CH_INVL,REC_INVL,250;UN
Mat Read #CH_INVL,REC_INVL,256;S2
Mat Read #CH_INVL,REC_INVL,260;S3
Mat Read #CH_INVL,REC_INVL,368;MT$
Mat Read #CH_INVL,REC_INVL,370;S3$
Mat Read #CH_INVL,REC_INVL,404;OLM
Mat Read #CH_INVL,REC_INVL,446;EUN
Mat Read #CH_INVL,REC_INVL,452;UNF
Mat Read #CH_INVL,REC_INVL,494;LCO
Mat Read #CH_INVL,REC_INVL,502;CST
Mat Read #CH_INVL,REC_INVL,508;LTAX1
Mat Read #CH_INVL,REC_INVL,514;CTWT
Mat Read #CH_INVL,REC_INVL,518;INVNO
Mat Read #CH_INVL,REC_INVL,538;LTAX2
Mat Read #CH_INVL,REC_INVL,542;QPB
Read #CH_INVL,REC_INVL,548;LPRINTED
Read #CH_INVL,REC_INVL,550;OWHS
Read #CH_INVL,REC_INVL,552;LP_DATE
Read #CH_INVL,REC_INVL,556;LP_TIME
Read #CH_INVL,REC_INVL,564;ROL0
Rem {end read.invl.i}
Return 
!
READ_INVT: Rem
Rem {begin srcdevl/inc/read.invt.i}
Mat Read #CH_INVT,REC_INVT,0;T1
Mat Read #CH_INVT,REC_INVT,8;T2
Mat Read #CH_INVT,REC_INVT,164;JRNL
Mat Read #CH_INVT,REC_INVT,168;MCODE
Mat Read #CH_INVT,REC_INVT,208;MCHARGE
Mat Read #CH_INVT,REC_INVT,328;TOT
Mat Read #CH_INVT,REC_INVT,358;MCTXBL
Mat Read #CH_INVT,REC_INVT,378;DCLVL
Mat Read #CH_INVT,REC_INVT,400;INVNO
Rem {end read.invt.i}
Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
!
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&"
X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6]
Return 
!
DONE: Rem
If TOTFLAG Gosub PRINT_TOTALS
!!If SCRN Print @0,23;'CL';"PRESS <CR> TO CONTINUE "; \ Input ""ANS$
!
OUTEND: 
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
!
Call dxclose()
End 
!
!!Close 
!!Chain "mx000"
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!!Rem {end rtn.error.s}
!
include "src/callmainerrnet.inc"
End 