! >>> Program 391b
!
! description Purchasing P.O. Open Line Detail Report
!
! loadsave -w -n 100,10 -o prog/dxport/391b.dl4 src/391b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR  7, 2003  12:00:55
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/po/po391b.src (univ2) [jcs] {11554}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem PO391b  PURCHASE ORDER OPEN LINE DETAIL
Rem       tc 3/24/97 cct101404 print page break after buyer total even if 0 total
Rem       tc 6/18/97 cct104203 ask warehouse and select for it
!
Declare Intrinsic Sub InpBuf,Logic,String
declare Intrinsic function FindChannel
!
! - Option Default Dialect IRIS1
Com 1%,PFU1[20],CNVTU[9]
Com 3%,PFU2[6],CNVTA[4],A[33]
If Err 0 Gosub ERR_TRAP
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Confirm$[20]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim 1%,L1[5],L4[5],NSD1[7],X1[9],H4[3],TBS[20],PO1[9],SGNT,L,P,BUYER,J1,J9
Dim 1%,W1[2],BU,OT,FLAGS[11]
Dim 2%,D1[6],H0[5],H3[4],H5,L2[2],N1,N2,R4,R5,T1[4],V5,X2[9],R15
Dim 2%,B[24],NSD2[4],TOTQTY,VN,PO,BB,EB,BV,EB,BP,EP,OFLG,D9[5]
DIM 3%,R3,R8,R9
Dim 3%,H2[7],L3[17],L3[6],NSD3[9],Q1[9],X3[9],H8[4],TOTCUBE,A1[7],CB
Dim 3%,EXT_WGT,PL4[23],DISC,PO3[12],TOTORD,TOTREC,TOTOPEN,R2
Dim 4%,TOTEXT,VCOST,PCOST,LCOST
Dim A$[156],C1$[146],NSD$[96],KPROD$[14],P60$[50]
Dim D1$[30],D2$[30],D3$[30],D4$[30],C$[2],BUYER$[4],U$[6],PREV_BUYER$[4]
Dim H$[82],H1$[116],H2$[12],K1$[50],K2$[50],K3$[50],J$[50]
Dim L1$[92],M1$[14],M2$[50],P0$[10],S$[50],S1$[30],S2$[30],BUYCL$[30]
Dim S3$[30],S4$[30],U5$[50],V1$[100],PT$[80],PT1$[80],N1$[4],N2$[117]
Dim X$[20],K9$[50],F$[60],FILE$[60],D8$[8],2%,R[99],PO$[6],VN$[6]
For J = 2 To 14
  Read J1
  If J1 = -1 Goto L_860
  Read #1,88,Abs(J1);U5$;
  If J1 <= 0 Ropen #J,U5$ Else Open #J,U5$
L_860: Next J
Data "-1744","-1792","-1","-2400","-1","-2432","-2416","-1","-1","-1","-1","-1728","-2448"
Mat Read #1,0,100;D8$;
Mat Read #1,60,50;P60$;
Mat Read #1,115;D9;
SGNT = findchannel()
J$ = "2/BUYERS"
Open #SGNT,J$
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0)
If J8 If J8 <> 49 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
J9 = 55 \ If J8 Let J9 = 19
J1 = 70;J2 = 0
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
! - Gosub L_13000 ! build sort
FLG = 1 \ NFLG = 1
VN = 0;PO = 0
!
! dx add xport reporting code
DXSetup:
Dim tmp$[500],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"391b",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("begbuyer",tmp$) \ BB=tmp$ ! starting buyer
call dxget("endbuyer",tmp$) \ if rtrim$(tmp$)="" let EB=999 else EB=tmp$ ! ending buyer
call dxget("begvendor",tmp$) \ BV=tmp$ ! starting vendor
call dxget("endvendor",tmp$) \ if rtrim$(tmp$)="" let EV=999999 else EV=tmp$ ! ending vendor
call dxget("begpo",tmp$) \ BP=tmp$ ! starting po
call dxget("endpo",tmp$) \ if rtrim$(tmp$)="" let EP=999999 else EP=tmp$ ! ending po
call dxget("ordertype",tmp$) \ OT=tmp$ ! order type
call dxget("whse",tmp$) ! \ if rtrim$(tmp$)="" let tmp$="1"
whse=tmp$ ! warehouse (zero allowed!!)
!let whse=whse+1
if whse<0 or whse>99 let e$="Invalid Warehouse!" \ error 10000
!  dx end
!
! buyer section
If BB<0 Or BB>999 let e$="Invalid starting buyer, must be between 0 and 999!" \ error 10000
if EB<BB or EB>999 let e$="Invalid ending buyer, must be between starting buyer and 999!" \ error 10000
!
! vendor section
If BV<0 Or BV>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
if EV<BV or EV>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
! p.o. section
If BP<0 Or BP>999999 let e$="Invalid starting p.o., must be between 0 and 999999!" \ error 10000
if EP<BP or EP>999999 let e$="Invalid ending p.o., must be between starting p.o. and 999999!" \ error 10000
!
! warehouse
If WHSE<0 Or WHSE>D9[5] let e$="Invalid warehouse, must be between 0 and ",D9[5],"!" \ error 10000
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!
! - L_1000: Print 'CS CR';
! - L_1010: Input @0,5;"Enter Beginning Buyer,  <CR> for all,  or  E: Exit "U$
! - If U$ = "" Let BB = 0 \ EB = 999999 \ Print @51,5;"ALL   " \ Goto L_1100
! - If U$ = "E" Goto L_9030
! - If U$ >= "A" Or U$ < "0" Print @49,5;'CL' \ Goto L_1010
! - BB = Val(U$)
! - L_1060: Input @0,6;"Enter Ending Buyer,     <CR> for last, or  E: Exit "U$
! - If U$ = "" Let EB = 999999 \ Print @51,6;"LAST    " \ Goto L_1100
! - If U$ = "E" Goto L_9030
! - If U$ >= "A" Or U$ < "0" Print @49,6;'CL' \ Goto L_1060
! - EB = Val(U$)
! - If EB < BB Print @48,7;"INVALID RANGE" \ Signal 3,10 \ Print @0,7;'CL' \ Goto L_1000
! - L_1100: Rem get vendor
! - Input @0,8;"Enter Beginning Vendor, <CR> for all,  or  E: Exit "U$
! - If U$ = "" Let BV = 0 \ EV = 999999 \ Print @51,8;"ALL   " \ Goto L_1200
! - If U$ = "E" Goto L_9030
! - If U$ >= "A" Or U$ < "0" Print @49,8;'CL' \ Goto L_1100
! - BV = Val(U$)
! - L_1160: Input @0,9;"Enter Ending Vendor,    <CR> for last, or  E: Exit "U$
! - If U$ = "" Let EV = 999999 \ Print @51,9;"LAST    " \ Goto L_1200
! - If U$ = "E" Goto OUTEND
! - If U$ >= "A" Or U$ <= "0" Print @49,9;'CL' \ Goto L_1160
! - EV = Val(U$)
! - If EV < BV Print @50,10;"INVALID RANGE" \ Signal 3,10 \ Print @0,10;'CL' \ Goto L_1100
! - L_1200: Rem get po
! - Input @0,11;"Enter Beginning PO,    <CR> for all,  or  E: Exit "U$
! - If U$ = "" Let BP = 0 \ EP = 999999 \ Print @51,11;"ALL   " \ Goto L_1300
! - If U$ = "E" Goto L_9030
! - If U$ >= "A" Or U$ < "0" Print @49,11;'CL' \ Goto L_1200
! - BP = Val(U$)
! - L_1260: Input @0,12;"Enter Ending PO,       <CR> for last, or  E: Exit "U$
! - If U$ = "" Let EP = 999999 \ Print @51,12;"LAST    " \ Goto L_1300
! - If U$ = "E" Goto L_9030
! - If U$ >= "A" Or U$ <= "0" Print @49,12;'CL' \ Goto L_1260
! - EP = Val(U$)
! - If EP < BP Print @40,13;"INVALID RANGE" \ Signal 3,10 \ Print @0,13;'CL' \ Goto L_1200
! - L_1300: Rem GET ORDER TYPE
! - Print @0,14;'CE';"ENTER ORDER TYPE:  0: Warehouse,  1: Direct,    2: Indirect  ";
! - If P60$[46,46] = "Y" Print @18,15;" 4: Imp Whse,   5: Imp Dir.,  6: Imp Indir   ";
! - Input Len 16385;""U$
! - OT = U$
! - If P60$[46,46] = "Y" If OT < 0 Or OT > 6 Goto L_1300
! - If P60$[46,46] <> "Y" If OT < 0 Or OT > 2 Goto L_1300
! - ASK_WH: Rem ask for warehouse
! - WHSE = 1 \ If D9[5] = 1 Goto DONE_ASK_WH
! - Print @0,16;"Enter warehouse to use (1-";
! - Print Using "##";D9[5];") ,  0: for all, or  E: to exit ";'CE';
! - Input Len 16386;""U$ \ If U$ = "E" Goto L_9030
! - If Len(U$) = 0 Goto ASK_WH
! - WHSE = U$
! - If WHSE < 0 Or WHSE > D9[5] Print 'RB'; \ Goto ASK_WH
! - DONE_ASK_WH: Rem
! - ASK_PRINT: Rem
! - Print @0,22;'CL'; \ Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "U$
! - If U$ = "E" Goto L_9030
! - If U$ = "R" Goto L_1000
! - If U$ <> "P" Goto ASK_PRINT
!
! *** Process Section
! - Print @0,22;'CL';
! - If Err 0 Gosub ERR_ESCAPE
Gosub L_12000  ! sort
!
if J8 ! dx xml headings
  !
  tmp$="BUYER",fdel$,"VENDOR",fdel$,"NAME",fdel$
  tmp$=tmp$,"VEND PART#",fdel$,"PO NUM",fdel$,"TYPE",fdel$
  tmp$=tmp$,"LINE",fdel$,"UNIT",fdel$
  tmp$=tmp$,"PROD CODE",fdel$,"PRODUCT DESCRIPTION",fdel$
  tmp$=tmp$,"QTY ORD",fdel$,"QTY REC",fdel$
  tmp$=tmp$,"DATE REC",fdel$,"UNIT COST",fdel$
  tmp$=tmp$,"OPEN_COST",fdel$,"PO DATE",fdel$
  tmp$=tmp$,"DUE DATE",fdel$,"CONFIRMED",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! - Print 'CS'
L_1545:
Search #9,3,1;K9$,R8,E 
If E  Let OFLG = 1 \ Goto RPT_DONE
K1$ = " ",K1$
K1$ = K9$[16,23]
! - If Not(J8) Print @0,22;"PRINTING....PLEASE WAIT"
! - Signal 3,0
Gosub L_2000
Goto L_1545
!
! - L_1680: Rem PRINT @0,3;'CE';
! - Goto OUTEND
!
L_2000: Rem PRINT ORDER REC# R8
Mat Read #8,R8;H0;
Mat Read #8,R8,24;H$;
Mat Read #8,R8,106;H1$;
Mat Read #8,R8,222;H3;
Mat Read #8,R8,242;H4;
Mat Read #8,R8,250;H8;
Mat Read #8,R8,330;PO1;
Mat Read #8,R8,350;PO3;
R3 = H0[1]
If Not(J2) Let BUYER = K9$[1,3];PREV_BUYER$ = K9$[1,3]
if Confirm$="" let Confirm$=rtrim$(H$[59,68])
Mat Read #5,R3;C1$;
Read #5,R3,268;V5
Gosub L_5800
Gosub L_4500 \ Gosub L_4600 \ Gosub L_5200
PREV_BUYER$ = K9$[1,3]
K2$ = H0[2] Using "######" \ K2$[7,9] = K9$[45,47]
Search #7,2,1;K2$,R9,E 
If E Return 
X2 = K2$[1,6] \ If X2 <> H0[2] Return 
Gosub L_6200
Gosub L_2800
Gosub L_4000
Gosub L_5000 
Return 
!
L_2800: Rem GET PRODUCT
Call Logic(1,2 ^ 0,L1[3],X1)
If Not(X1)
  Gosub L_6000
Else 
  Gosub L_6500
  For X1 = 0 To 20
    If X1 < 21 Let PFU1[X1] = 0
    If X1 < 4 Let PFU1[X1] = NSD1[X1 + 2]
    If X1 < 7 Let PFU2[X1] = 0
    If X1 < 3 Let PFU2[X1] = NSD3[X1 + 3]
  Next X1
  A[5] = NSD3[7] \ A[6] = NSD3[6] \ B[23] = NSD3[2]
  PFU1[8] = NSD1[5] \ PFU1[10] = NSD1[4] \ PFU1[11] = NSD1[3]
  A$[9,38] = NSD$[13,42] \ A$[63,92] = NSD$[43,72]
  A$[140,151] = NSD$[1,12]
End If 
Return 
!
L_4000: Rem CONV REC=>DSPL
CNVTA = L2[0] \ CNVTU[0] = 0 \ CNVTU[1] = L1[5] \ CNVTU[2] = 2
Gosub L_20000 !\ Q1[0] = X3
LET Q1[0]=AMOUNT
CNVTA = L3[2] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_20000 !\ Q1[1] = X3
LET Q1[1]=AMOUNT
CNVTA = L3[3] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_20000 !\ Q1[2] = X3
LET Q1[2]=AMOUNT
CNVTA = L3[4] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
CNVTA = PL4[1] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
CNVTA = PL4[0] \ CNVTU[0] = 0 \ CNVTU[1] = L1[5] \ CNVTU[2] = 2
CNVTA = PL4[3] \ CNVTU[0] = 0 \ CNVTU[1] = L1[5] \ CNVTU[2] = 2
If NSD3[8] Let CB = B[23] / NSD3[8] * L3[2] Else Let CB = 0
If A[5] Let EXT_WGT = A[6] / A[5] * L3[2] Else Let EXT_WGT = 0
Return 
!
! - L_4200: Rem CALL CONV
! - Swap 1,"MXPRCONV"
! - L_4220: Signal 2,X1,X3,E \ rem ! - If X1 = -1 Gosub ERR_SEARCH
! - If X1 <> Spc(6) Goto L_4220
! - If E Gosub ERR_SEARCH
! - Return 
!
L_4300: Rem GET UNITS
If X1 = -1 Let M1$ = "CWT " \ Goto L_4330
If X1 = -3 Let M1$ = "LB  " \ Goto L_4330
If X1 Read #13,X1,10;M1$;
L_4330: Return 
T9 = L3[2] * L2[0]
L3[5] = A[6] * L3[2] / A[5]
Return 
!
L_4500: Rem PO TOTALS
if J8 goto POTotalExit ! dx xml
!
Gosub L_5800
If PO$ = K9$[19,24] Return 
If OFLG Goto L_4520
If Not(PO) Let PO = Val(K9$[19,24]) \ PO$ = K9$[19,24] \ Return 
L_4520: Print #0; Tab 100;"PO TOTAL";
Print #0; Tab 110;PCOST Using "########.##";
Print #0; Tab 122;Confirm$;
Print #0;""
!
POTotalExit:
If OFLG Return 
PO$ = K9$[19,24] \ PO = H0[2] \ Confirm$=rtrim$(H$[59,68])
PORD = 0;PREC = 0;PCOST = 0
J1 = J1 + 2
Return 
!
L_4600: Rem VENDOR TOTALS
if J8 return ! dx xml
!
Gosub L_5800
If OFLG Goto L_4620
If VN$ = K9$[5,10] And BUYER = Val(K9$[1,3]) Return 
If Not(VN) Let VN = V5 \ VN$ = K9$[5,10] \ Goto L_4690
If Not(TOTEXT) Goto L_4645
L_4620: Print #0; Tab 0;VN Using "TOTAL FOR VENDOR ######";
Print #0; Tab 110;VCOST Using "########.##"
Print #0;""
L_4645: If OFLG Return 
VN$ = K9$[5,10];VN = V5
VORD = 0;VREC = 0;VCOST = 0
J1 = J1 + 2
Gosub L_5200
L_4690: If NFLG Print #0; Tab 0;V5 Using "VENDOR= ###### ";C1$[1,30]
J1 = J1 + 1
Return 
!
L_5000: Rem PRINT DETAIL LINE
LCOST = FNR(L2[0] * (L3[2] - L3[3]))
if pl4[13]<=0 let pl4[13]=1 ! lb factor <> 0 !!
If L1[5] < 0 ! "special Handling!
  If L1[5] = -1 Let LCOST = FNR(Q1[0] * (PL4[12] * (L3[2] - L3[3]) / PL4[13]) / 100)
  If L1[5] = -2 Let LCOST = FNR(Q1[0])
  If L1[5] = -3 Let LCOST = FNR(Q1[0] * (PL4[12] * (L3[2] - L3[3]) / PL4[13]))
End If 
VCOST = VCOST + LCOST
TOTEXT = TOTEXT + LCOST
PCOST = PCOST + LCOST
Call Logic(1,2 ^ 0,L1[3],NS)
!
if J8
  tmp$=PREV_BUYER$,fdel$,V5 Using "######",fdel$,rtrim$(C1$[1,30]),fdel$
  tmp$=tmp$,L1$[61,70],fdel$,H0[2] Using "######",fdel$
  
  If H3[2] let tmp1$="-",Str$(H3[2]) else tmp1$=""
  tmp$=tmp$,tmp1$,fdel$
  tmp$=tmp$,L1[2] Using "###",fdel$
  X1 = L1[4] \ Gosub L_4300 
  tmp$=tmp$,M1$,fdel$
  tmp$=tmp$,rtrim$(A$[140,151]),fdel$,rtrim$(A$[9,33]),fdel$
  tmp$=tmp$,Q1[1] Using "######",fdel$
  tmp$=tmp$,Q1[2] Using "######",fdel$
  X2 = PL4[22] \ Gosub L_7700
  tmp$=tmp$,X$,fdel$
  tmp$=tmp$,Q1[0] Using "#####.##",fdel$
  tmp$=tmp$,LCOST Using "#######.##",fdel$
  X2 = H0[3] \ Gosub L_7700
  tmp$=tmp$,X$,fdel$
  X2 = L2[2] \ Gosub L_7700
  tmp$=tmp$,X$,fdel$
  tmp$=tmp$,Confirm$,fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
!
Print #0; Tab 2;L1$[61,70];
Print #0; Using "######"; Tab 13;H0[2];
If H3[2] Print #0;"-";Str$(H3[2]);
Print #0; Using "###"; Tab 21;L1[2];
X1 = L1[4] \ Gosub L_4300 \ Print #0; Tab 25;M1$;
Print #0; Tab 30;A$[140,151];
Print #0; Tab 43;A$[9,33];
Print #0; Tab 70;Q1[1] Using "######";
Print #0; Tab 77;Q1[2] Using "######";
X2 = PL4[22] \ Gosub L_7700
Print #0; Tab 85;X$;
Print #0; Tab 94;Q1[0] Using "#####.##";
Print #0; Using "#######.##"; Tab 103;LCOST;
X2 = H0[3] \ Gosub L_7700
Print #0; Tab 114;X$;
X2 = L2[2] \ Gosub L_7700
Print #0; Tab 123;X$
J1 = J1 + 1
Return 
!
L_5200: Rem            PRINT BUYER
if J8 return ! dx xml
!
Gosub L_5800
If FLG If Not(TOTEXT) Let BUYER = K9$[1,3] \ Return 
If K9$[3,3] <> " " If BUYER = Val(K9$[1,3]) Return 
If K9$[3,3] <> " " Let BU = Val(K9$[1,3])
Mat Read #SGNT,BU;BUYCL$;
Print #0; Tab 0;"TOTALS FOR BUYER ";BUYER;
Print #0; Tab 110;TOTEXT Using "########.##"
TOTEXT = 0;TOTORD = 0;TOTOPEN = 0;TOTREC = 0
PREV_BUYER$ = K9$[1,3]
If OFLG Return 
J1 = J1 + 2
J1 = 90 \ Gosub L_5800
Print #0;""
If NFLG Print #0; Tab 0;BU Using "BUYER=###"; Tab 11;BUYCL$
BUYER = K9$[1,3] \ J1 = J1 + 1
FLG = 0
Return 
!
L_5800: Rem "=========================================== headings
if J8 return ! dx xml
!
If J1 < J9 Return 
! - If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 8
If Not(J8) Print #0;"\12\";
Print #0; Tab 2;"DATE ";D8$;
Print #0; Tab 120;"PAGE";J2
If OT = 0 Print #0;"WAREHOUSE ORDERS";
If OT = 1 Print #0;"DIRECT ORDERS";
If OT = 2 Print #0;"INDIRECT ORDERS";
IF OT = 3 PRINT #0;"ALL PURCHASE ORDERS";		! "cct102777
If OT = 4 Print #0;"IMPORT WHSE ORDERS";
If OT = 5 Print #0;"IMPORT DIR. ORDERS";
If OT = 6 Print #0;"IMPORT INDIR ORDERS";
Print #0; Tab 36;"O P E N   P U R C H A S E   O R D E R   R E P O R T / D E T A I L";
If WHSE Print #0; Tab 113;"WAREHOUSE ";WHSE Else Print #0; Tab 112;"ALL WAREHOUSES"
Print #0;""
Print #0; Tab 1;"VEND PART#";
Print #0; Tab 13;"PO NUM";
Print #0; Tab 20;"LNE";
Print #0; Tab 25;"UNIT";
Print #0; Tab 30;"PROD CODE";
Print #0; Tab 43;"PRODUCT DESCRIPTION";
Print #0; Tab 70;"QTY_O";
Print #0; Tab 77;"QTY_R";
Print #0; Tab 85;"DATE REC";
Print #0; Tab 94;"UN_COST";
Print #0; Tab 103;"OPEN_COST";
Print #0; Tab 114;"PO DATE";
Print #0; Tab 123;"DUE DATE"
Print #0; Tab 122;"CONFIRMED"
Print #0;""
Print #0;"BUYER=";PREV_BUYER$;
If J2 <= 1 Print #0;""
If J2 > 1 Print #0;VN Using "  VENDOR=######  " \ J1 = J1 + 1
J1 = 6
Return 
!
L_6000: Rem READ PRODUCT FILE
If Not(L3[1]) Let A$[140,151] = "*NO PRODUCT*" \ Return 
Mat Read #3,L3[1];A$;
Mat Read #3,L3[1],156;B;
Mat Read #3,L3[1],256;A;
Mat Read #3,L3[1],460;A1;
Mat Read #3,L3[1],512;PFU1;
Mat Read #3,L3[1],554;PFU2;
Return 
!
L_6200: Rem READ LINE ITEM
Mat Read #7,R9;L1
Mat Read #7,R9,12;L2
Mat Read #7,R9,24;L3;
Mat Read #7,R9,66;L1$;
Mat Read #7,R9,232;PL4;
if pl4[13]<=0 let pl4[13]=1
Return 
!
! - Print #0; Tab 1;"CONFIRMED"; Tab 13;"CONF. DATE";
! - Print #0; Tab 25;"VENDOR"; Tab 32;"TERMS";
! - Print #0; Tab 47;"F.O.B."; Tab 59;"SHIP VIA"; Tab 71;"DATE REQ"
! - V9[1] = V9[1] + 1
! - Print #0; Tab 1;PT$[1,10]; Tab 13;PT$[13,22]; Tab 25;PT$[25,30];
! - Print #0; Tab 32;PT$[32,45]; Tab 47;PT$[47,56];
! - Print #0; Tab 59;PT$[59,68]; Tab 71;PT$[71,78]
! - V9[1] = V9[1] + 1
! - Return 
!
L_6500: Rem READ NSTKDESC
Mat Read #14,L3[1];NSD$
Mat Read #14,L3[1],96;NSD1
Mat Read #14,L3[1],112;NSD2
Mat Read #14,L3[1],132;NSD3
Return 
!
! - If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
! - Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
! - Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
! - Print @0,Msc(34) - 1;'CL'; \ Return 
!
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
! - X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
! - X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
! - Return 
!
RPT_DONE: Rem EXIT
If K9$[3,3] = " " Goto L_9010
K9$ = " ",K9$ \ NFLG = 0;FLG = 0 \ Gosub L_4500 \ Gosub L_4600 \ Gosub L_5200
L_9010: 
! - If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
OUTEND: Rem   want it here
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!

End 
!
! - L_9030: Close 
! - Chain "MX000"
! - End 
!
! *** Sort Section
L_12000: Rem write to sort file    buyer/vendor/po#/line#
For S1 = 1 To 6
  K1$ = S1 Using "##     "
  K1$[3] = BP Using "######"
L_12030: 
  Search #8,3,1;K1$,R8,E 
  If E = 2 Goto PRINT_
  If Val(K1$[1,2]) > 13 Goto L_12030
  If Val(K1$[1,2]) = 7 Goto L_12030
  If Val(K1$[3,8]) > EP Goto L_12060
  If Not(E) Goto L_12130
L_12060: Next S1
Goto PRINT_
!
L_12130: Rem LEAVE THIS HERE
Mat Read #8,R8;H0;
If H0[2] < BP Or H0[2] > EP Goto L_12030
Mat Read #8,R8,242;H4
Mat Read #8,R8,330;PO1;
BUYER = PO1[6]
If OT<>3 and H4[0] <> OT Goto L_12030
If WHSE If WHSE <> H4[1] Goto L_12030
R3 = H0[1]
Read #5,R3,268;V5
If V5 < BV Or V5 > EV Goto L_12030
K2$ = H0[2] Using "######   "
L_12180: Search #7,3,1;K2$,R9,E 
If E Goto L_12030
If Val(K2$[1,6]) <> H0[2] Goto L_12030
Mat Read #7,R9,24;L3;
If L3[1] <= 0 Goto L_12180
Mat Read #7,R9;L1; \ Gosub L_13500
If L1[0] > 2 Goto L_12180
If FLAGS[2] Goto L_12180
If Not(FLAGS[0]) Mat Read #3,L3[1];A$;
If FLAGS[0] !"nonstock
  Gosub L_6500
  A$[140,151] = NSD$[1,12];BUYER = PO1[6] \ Goto L_12270
End If 
L_12270: If BUYER < BB Or BUYER > EB Goto L_12030
K9$ = " ",K9$
K9$[1,3] = BUYER Using "###"
K9$[4,4] = H4[0] Using "#"
K9$[5,16] = V5 Using "######"
K9$[17,24] = K1$
K9$[33,44] = A$[140,151]
K9$[45,47] = K2$[7,9]
Search #9,4,1;K9$,R8,E
! - Print @0,22;"SORTING.....PLEASE WAIT"
Goto L_12180
!
PRINT_: Rem
K9$ = " ",K9$
Return 
!
! - L_13000: Rem "======== create indexed sort file for various functions
! - F$ = Spc(6) Using "6/SORTWORK&&&&!"
! - FILE$ = "[1:1] ",F$
! - L_13025: E = 0 \ If Err 0 Let E = Spc(8)
! - Build #99,FILE$
! - If E = 40 Close #99 \ Goto L_13025
! - If E Gosub ERR_SEARCH
! - If Err 0 Gosub ERR_ESCAPE
! - R[99] = 50 \ Search #99,0,1;F$,R[99],E \ If E Gosub ERR_SEARCH
! - R[99] = 1 \ Search #99,0,0;F$,R[99],E \ If E Gosub ERR_SEARCH
! - R[99] = 0 \ Search #99,1,0;F$,R[99],E \ If E Gosub ERR_SEARCH
! - Return
!
L_13500: Rem UNPACK L1[3] TO FLAGS[x]
X2 = L1[3] \ For K = 0 To 11
  FLAGS[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120 ! - was If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ rem ! - Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
!
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
