! libproddisplay.lib
!
! supporting library of product: one record, can have multiple pages
!
! 1.0 08/15/07
! 1.5 05/07/2008 - revised prodfile struct
!
! loadsave -w -n 100,10 -o prog/dxport/libproddisplay.lib src/libproddisplay.src
!
include "src/copyright.inc"
!
! sub & functions for list library
!
!  S   PriceBookDisplay       creates product price book display
!  S   SafetyHazardDisplay    creates product safety / hazardous display
!  S   ShelfLifeDisplay       creates product shelf life display
!  S   ProdInfoSection        sets the product id & desc for .net 
!  S   ProdSizeDisplay        creates product size display
!  S   UnitOfMeasureDisplay   creates product unit of measure display
!  S   ValidBaseUMUnits       sets the valid units & base units
!  S   ProdItemDisplay        creates product item display
!  S   VendorMfgDisplay       creates product vendor/manufacturing screen
!  S   PriceControlDisplay    creates product price control screen
!  S   MarkupTableDisplay     creates product markup table screen
!  S   MaskMarkup             masks price or product markup
!  S   UserDefineDisplay      creates product user define fields screen
!
include "src/inc/fileprod.inc" ! product
!include "src/inc/fileprodprbk.inc" ! product price book
include "src/inc/filesyngprbk.inc" ! Synergy Price Book
include "src/inc/filegbkcolor.inc" ! product, GBK color
include "src/inc/filegbkfinish.inc" ! product, GBK finish
include "src/inc/filegbksection.inc" ! product, GBK section
include "src/inc/filegbkgrade.inc" ! product, GBK grade
include "src/inc/filegbkgclass.inc" ! GBK - Grade Class
include "src/inc/filefsctable.inc" ! GBK - FSC ID
include "src/inc/filehazname.inc" ! product, hazard ship to name
include "src/inc/fileptaxtype.inc" ! product, tax type
include "src/inc/filea80vm.inc" ! vendor master
include "src/inc/filespricemark.inc" ! price markup table
include "src/inc/filesprodmark.inc" ! product markup table
include "src/inc/fileproduda.inc" ! product user define
!
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetDelimiters
!
External Lib "libgeneralcode.lib"
Declare External Function MaskUpCharge$
!
External Lib "liblookuptable.lib"
Declare External Sub PriceBookStatusDesc,BreakTableDesc
Declare External Function PriceTypeDesc$
!
External Lib "libproddisplay.lib"
Declare External Sub ProdInfoSection,ValidBaseUMUnits,MaskMarkup
!
External Lib "ubsprconv.dl4"
Declare External Function XUnit$
!
External Lib "ubsfunc.dl4"
Declare External Function PDate$,JDate$
Declare External Sub UserCntrl
!
Declare Intrinsic Sub Env,FormatDate
!
!
!--------------------------------------------------------------------
External Sub PriceBookDisplay(e$,ProdRec,List$[],PBChan,GCChan,GFChan,GSChan,GGChan,GBGC,FSC,Prod. as prod)
  !
  ! Creates a product price book display (2 screens)
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : price book display (two screens)
  ! PBChan     : channel, price book
  ! GCChan     : channel, GBK color
  ! GFChan     : channel, GBK finish
  ! GSChan     : channel, GBK section
  ! GGChan     : channel, GBK grade
  ! GBGC	   : channel, GBK Grade Class
  ! FSC			: channel, GBK FSC ID
  ! Prod.      : product recor
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2,tmpcnt
    dim 3%,tmp3,ProdRec,PBRec,GCRec,GFRec,GSRec,GGRec
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[600]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim ProdKey$[64],SearKey$[64]
	dim Mode$[3]
	dim Heading1$[500],Heading2$[500]
	dim StatusDesc$[10]
	dim blank$[200] \ blank$=" ",blank$
    dim M6$[6] \ M6$="######"
	dim M42$[8] \ M42$="#####.##"
	dim M52$[9] \ M52$="######.##"
	dim M62$[10] \ M62$="#######.##"
	dim M25$[10] \ M25$="####.#####"
    !
	dim PB. as syngprbk ! prodprbk ! price book
	dim GC. as gbkcolor ! gbk color
	dim GF. as gbkfinish ! gbk finish
	dim GS. as gbksection ! gbk section"
	dim GG. as gbkgrade ! gbk grade
	dim GCL. as gbkgclass ! gbk grade class
	dim FSC. as fsctable ! fsc id
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
    !
	clear List$[]
	!
	! setup page headings
	Heading1$="ID",fdel$
	Heading1$=Heading1$,"Status",fdel$,"Status Desc",fdel$
	Heading1$=Heading1$,"Grade",fdel$,"Grade Desc",fdel$
	Heading1$=Heading1$,"Grade Class",fdel$,"GClass Desc",fdel$
	Heading1$=Heading1$,"Grain",fdel$,"Basis Wght",fdel$,"Size Width",fdel$
	Heading1$=Heading1$,"Size Length",fdel$,"Color",fdel$,"Color Desc",fdel$
	Heading1$=Heading1$,"Finish",fdel$,"Finish Desc",fdel$,"Brightness",fdel$
	Heading1$=Heading1$,"Recycled",fdel$,"Cotton cont",fdel$
	Heading1$=Heading1$,"Laser",fdel$,"Grade Number",fdel$,"Envelope",fdel$
	Heading1$=Heading1$,"Adhesive Type",fdel$,"Caliper",fdel$
	Heading1$=Heading1$,"FSC Cert",fdel$,"SFI Cert",fdel$
	Heading1$=Heading1$,"Digital",fdel$,"Ink Jet",fdel$
	Heading1$=Heading1$,"Indigo",fdel$,"Wind Power",fdel$
	Heading1$=Heading1$,"Durable Paper",fdel$,"Cast Coat",fdel$
	!
	Heading2$="ID",fdel$
	Heading2$=Heading2$,"Book ID",fdel$,"Cost Group",fdel$,"Cost (cont)",fdel$
	Heading2$=Heading2$,"Item Group",fdel$,"Section",fdel$,"Section Desc",fdel$
	Heading2$=Heading2$,"Opacity",fdel$,"Roll Diameter",fdel$,"Roll Weight",fdel$
	Heading2$=Heading2$,"Lineal Ft/Roll",fdel$,"Pages/Inch",fdel$
	Heading2$=Heading2$,"Recycled Cont",fdel$,"FSC ID",fdel$,"FSC Desc",fdel$
	Heading2$=Heading2$,"Acid Free",fdel$,"Archival",fdel$,"PCF",fdel$
	Heading2$=Heading2$,"ECF",fdel$,"GSM",fdel$,"PEFC",fdel$
	Heading2$=Heading2$,"PreCons Content",fdel$,"PostCons Content",fdel$
	!
	! product price book page 1
 	List$[0]=bsdel$,"PriceBookPage1",fdel$
    List$[1]=Heading1$
	!
    if ProdRec>0 ! Product record found
	  !
	  SearKey$=Prod.ProdCode$ ! price book
	  !PBRec=filegetprodprbk(e$,PBChan,"=",1,SearKey$,PB.)
	  PBRec=filegetsyngprbk(e$,PBChan,"=",1,SearKey$,PB.)
      if PBRec<0 Clear PB. ! price book not found
	  !
	  SearKey$=PB.ColorID$[1,10] ! color
	  GCRec=filegetgbkcolor(e$,GCChan,"=",1,SearKey$,GC.)
	  if GCRec<0 Clear GC. ! color not found
	  !
	  SearKey$=PB.Finish$[1,10] ! finish
	  GFRec=filegetgbkfinish(e$,GFChan,"=",1,SearKey$,GF.)
	  if GFRec<0 Clear GF. ! finish not found
	  !
	  SearKey$=PB.Section$[1,10] ! section
	  GSRec=filegetgbksection(e$,GSChan,"=",1,SearKey$,GS.)
	  if GSRec<0 Clear GS.
	  !
	  SearKey$=Prod.Grade$[1,10] ! grade
	  GGRec=filegetgbkgrade(e$,GGChan,"=",1,SearKey$,GG.)
	  if GGRec<0 Clear GG.
	  !
	  SearKey$=PB.GradeCl$
	  GCLRec=filegetgbkgclass(e$,GBGC,"=",1,SearKey$,GCL.)
	  if GCLRec<0 clear GCL.
	  !
	  SearKey$=PB.FSCID using "##"
	  FSCRec=filegetfsctable(e$,FSC,"=",1,SearKey$,FSC.)
	  If FSCRec<0 clear FSC.
	  !
	  call PriceBookStatusDesc(e$,PB.Status,StatusDesc$)
	  !
	  WebStr$=Prod.ProdCode$,fdel$
      WebStr$=WebStr$,PB.Status using "#",fdel$,StatusDesc$,fdel$ ! status code & desc
	  WebStr$=WebStr$,Rtrim$(Prod.Grade$),fdel$,rtrim$(GG.Description$),fdel$ ! grade & desc
	  Webstr$=Webstr$,RTrim$(PB.GradeCl$),fdel$,RTrim$(GCL.GBKGCDesc$),fdel$ ! grade cl/desc
	  WebStr$=WebStr$,rtrim$(Prod.Grain$),fdel$ ! grain
	  WebStr$=Webstr$,Prod.BasisWgt using M42$,fdel$ ! basis weight
	  WebStr$=WebStr$,Prod.SizeWidth using M42$,fdel$ ! size width
	  WebStr$=WebStr$,Prod.SizeLength using M42$,fdel$ ! size length
	  WebStr$=WebStr$,rtrim$(PB.ColorID$),fdel$,rtrim$(GC.Description$),fdel$ ! color & desc
      WebStr$=WebStr$,rtrim$(PB.Finish$),fdel$,rtrim$(GF.Description$),fdel$ ! finish & desc
	  WebStr$=WebStr$,rtrim$(PB.Brightness$),fdel$ ! brightness
	  
	  tmp$="N" \ if PB.RecCont=1 let tmp$="Y"
	  Webstr$=Webstr$,tmp$,fdel$ ! any recycled content
	  WebStr$=WebStr$,Ltrim$(PB.CottonCont using "###"),fdel$ ! cotton content
	  tmp$="N" \ if PB.Laser=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! laser
	  WebStr$=WebStr$,rtrim$(PB.GradeNo$),fdel$ ! grade #
	  tmp$="N" \ if PB.Envelope=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! envelope
	  WebStr$=WebStr$,rtrim$(PB.AdhvType$),fdel$ ! adhesive type
	  WebStr$=WebStr$,PB.Caliper using M25$,fdel$ ! caliper
	  tmp$="N" \ if PB.FSCCert=1 LET TMP$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! fsc cert
	  tmp$="N" \ if PB.SFICert=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! sfi cert
	  tmp$="N" \ if PB.Digital=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! digital
	  tmp$="N" \ if PB.InkJet=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! inkjet
	  tmp$="N" \ if PB.Indigo=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! indigo
	  tmp$="N" \ if PB.WindPower=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! wind
	  tmp$="N" \ if PB.DurPaper=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! durable
	  tmp$="N" \ if PB.CastCoat=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! cast coat
	 
	  !
	  List$[2]=WebStr$ ! price book page 1 data
      List$[3]=esdel$ ! end of section
	  !
	  ! Product Price Book Page 2
 	  List$[4]=bsdel$,"PriceBookPage2",fdel$
	  List$[5]=Heading2$
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  WebStr$=WebStr$,rtrim$(PB.BookId$),fdel$ ! book id
	  tmp$=PB.CostGrp$[1,50] ! 1st 50 chars
	  WebStr$=WebStr$,rtrim$(tmp$),fdel$ ! cost group, pos 1-50
	  tmp$=PB.CostGrp$[51,100] ! last 50 chars
	  WebStr$=WebStr$,rtrim$(tmp$),fdel$ ! cost group, pos 51-100
	  WebStr$=WebStr$,rtrim$(PB.ItemGrp$),fdel$ ! item group
	  WebStr$=WebStr$,rtrim$(PB.Section$),fdel$ ! section
	  WebStr$=WebStr$,rtrim$(GS.Description$),fdel$ ! section desc
	  WebStr$=WebStr$,rtrim$(PB.Opacity$),fdel$ ! opacity
	  WebStr$=WebStr$,rtrim$(PB.RollDiam$),fdel$ ! roll diameter
	  WebStr$=WebStr$,PB.RollWgt using M52$,fdel$ ! roll weight
	  WebStr$=WebStr$,PB.FTRoll using M62$,fdel$ ! lineal foot/roll
	   WebStr$=WebStr$,PB.PgPinch using M52$,fdel$ ! page per inch
	  WebStr$=WebStr$,rtrim$(PB.RecyCont$),fdel$ ! recycled content
	  Webstr$=webstr$,Str$(PB.FSCID),fdel$,RTrim$(FSC.FSCDESC$),fdel$ ! fsc id/desc
	  if PB.AcidFree let tmp$="Y" else tmp$="N"
	  WebStr$=WebStr$,tmp$,fdel$ ! acid free
	  if PB.Archival let tmp$="Y" else tmp$="N"
	  WebStr$=WebStr$,tmp$,fdel$ ! archival
	  if PB.Pcf let tmp$="Y" else tmp$="N"
	  WebStr$=WebStr$,tmp$,fdel$ ! PCF
	  if PB.Ecf let tmp$="Y" else tmp$="N"
	  WebStr$=WebStr$,tmp$,fdel$ ! ECF
	  WebStr$=WebStr$,PB.Gsm using M52$,fdel$ ! GSM
	  tmp$="N" \ if PB.PEFC=1 let tmp$="Y"
	  WebStr$=WebStr$,tmp$,fdel$ ! PEFC
	  WebStr$=WebStr$,LTrim$(PB.PreCCont using "###"),fdel$ ! pre-Cons
	  WebStr$=WebStr$,LTrim$(PB.PstCCont using "###"),fdel$ ! post-Cons
	  !
	  List$[6]=WebStr$ ! price book page 1 data
	  List$[7]=esdel$ ! end of section
	  !
    else ! product not found
	  List$[2]=esdel$ ! end of section
	  List$[3]=bsdel$,"PRICEBOOKPAGE2",fdel$
	  List$[4]=Heading2$
	  List$[5]=esdel$ ! end of section
    endif
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! PriceBookDisplay
!
!--------------------------------------------------------------------
External Sub SafetyHazardDisplay(e$,ProdRec,List$[],HNChan,Prod. as prod)
  !
  ! Creates a product safety & hazardous display
  !
  ! e$         : error message
  ! ProdRec    : Product record #
  ! List$[]    : safety & hazard display
  ! HNChan     : channel, hazardous ship to name 
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2,tmpcnt
    dim 3%,tmp3,ProdRec,HnRec
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[600]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim ProdKey$[64],SearKey$[64],action2$[20]
	dim Mode$[3]
	dim StatusDesc$[10]
	dim blank$[200] \ blank$=" ",blank$
    dim M6$[6] \ M6$="######"
	dim M42$[10] \ M42$="#######.##"
	dim M52$[11] \ M52$="########.##"
	dim M62$[10] \ M62$="#######.##"
	dim M25$[10] \ M25$="####.#####"
    !
	dim HN. as hazname ! hazard ship to name
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	call dxget("ACTION2",action2$)
	action2$=UCASE$(RTRIM$(action2$))
	clear List$[]
	!
	! product safety/hazardous page
 	List$[0]=bsdel$,"SafetyHazard",fdel$
	!
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		webstr$="PSNREC",fdel$
	Else
		WebStr$="ID",fdel$
	Endif
	WebStr$=WebStr$,"Ship Name1",fdel$,"Ship Name2",fdel$
	WebStr$=WebStr$,"Ship Name3",fdel$,"Ship Name4",fdel$
	WebStr$=WebStr$,"Hazard Class",fdel$,"I.D. No",fdel$
	WebStr$=WebStr$,"Guide Book",fdel$,"Other Desc",fdel$
	WebStr$=WebStr$,"Packing Group",fdel$
	if action2$="" ! inquiry
		webstr$=webstr$,"MSDS",fdel$
	Endif
    List$[1]=WebStr$
	!
	row=2
    if ProdRec>0 ! Product record found
	  !
	  HNRec=Prod.ProdShipName ! hazard name record #
	  if hnrec>0
		read record #HNChan,HNRec,0;HN.;
	  Else
		clear hn.
	  Endif
	  !
	  If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		webstr$=Str$(HNRec),fdel$
	  Else
		WebStr$=Prod.ProdCode$,fdel$
	  Endif
	  WebStr$=WebStr$,rtrim$(HN.HazShippingName1$),fdel$ ! hazard ship to name 1
	  WebStr$=WebStr$,rtrim$(HN.HazShippingName2$),fdel$ ! hazard ship to name 2
	  WebStr$=WebStr$,rtrim$(HN.HazShippingName3$),fdel$ ! hazard ship to name 3
	  WebStr$=WebStr$,rtrim$(HN.HazShippingName4$),fdel$ ! hazard ship to name 4
	  WebStr$=WebStr$,rtrim$(Prod.HazardClass$),fdel$ ! hazard class
	  WebStr$=WebStr$,rtrim$(Prod.HazIDNum$),fdel$ ! hazard id #
	  WebStr$=WebStr$,rtrim$(Prod.ERGuildXref$),fdel$ ! e.r. guide book #
	  WebStr$=WebStr$,rtrim$(Prod.OtherHazDesc$),fdel$ ! other hazard desc
	  WebStr$=WebStr$,rtrim$(Prod.HazPackingGrp$),fdel$ ! packing group
	  if action2$=""
		webstr$=webstr$,Str$(prod.Msds),fdel$
	  Endif
	  !
	  List$[row]=WebStr$
	  row=row+1
	  !
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! SafetyHazardDisplay
!
!--------------------------------------------------------------------
External Sub ShelfLifeDisplay(e$,ProdRec,List$[],Prod. as prod)
  !
  ! Creates a product size display
  !
  ! e$         : error message
  ! ProdRec    : Product rec #
  ! List$[]    : price book display (two screens)
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2,tmpcnt
    dim 3%,tmp3,ProdRec,HnRec
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[600]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim ProdKey$[64],SearKey$[64],action2$[20]
	dim Mode$[3]
	dim StatusDesc$[10]
	dim blank$[200] \ blank$=" ",blank$
    dim M3$[6] \ M3$="######"
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	call dxget("ACTION2",action2$)
	action2$=UCASE$(RTRIM$(action2$))
	clear List$[]
	!
	! product safety/hazardous page
 	List$[0]=bsdel$,"SHELFLIFE",fdel$ \ row=row+1
	!
	WebStr$="ID",fdel$
	WebStr$=WebStr$,"Mfr Shelf Life",fdel$,"Dist Shelf Life",fdel$
	WebStr$=WebStr$,"Cust Shelf Life",fdel$
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		webstr$=webstr$,"PKDDESC",fdel$,"PKDFORMAT",fdel$
	Endif
    List$[1]=WebStr$
	!
	! process product record
	row=2
    if ProdRec>0 ! Product record found
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  WebStr$=WebStr$,Prod.ShelfLifeMos using M3$,fdel$ ! manufacturer shelf life
	  WebStr$=WebStr$,Prod.DistribShelLife  using M3$,fdel$ ! distributor shelf life
	  WebStr$=WebStr$,Prod.CustShelfLife using M3$,fdel$ ! customer shelf life
	  If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		webstr$=webstr$,RTrim$(prod.PackingDateDesc$),fdel$
		webstr$=webstr$,RTrim$(prod.PackingDateFormat$),fdel$
	  Endif
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! ShelfLifeDisplay
!
!--------------------------------------------------------------------
External Sub ProdInfoSection(e$,row,List$[],Prod. as prod)
  !
  ! Creates a section for the product id & and the 2 descriptions for the .net
  !
  ! e$         : error message
  ! row        : row in list$ array
  ! List$[]    : .net, string output
  ! Prod.      : Product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2
    dim 3%,tmp3
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim tmp$[200],WebStr$[500]
	dim blank$[200] \ blank$=" ",blank$
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
 	List$[row]=bsdel$,"PRODUCTINFO",fdel$ \ row=row+1
    !
    WebStr$="Prod Code",fdel$,"Prod Desc1",fdel$,"Prod Desc2",fdel$
	List$[row]=WebStr$ \ row=row+1
	!
    WebStr$=Prod.ProdCode$,fdel$ ! product id
    WebStr$=WebStr$,rtrim$(Prod.Desc1$),fdel$ ! prod desc 1
    WebStr$=WebStr$,rtrim$(Prod.Desc2$),fdel$ ! prod desc 2
	List$[row]=WebStr$ \ row=row+1
	!
	List$[row]=esdel$ \ row=row+1
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! ProdInfoSection
!
!--------------------------------------------------------------------
External Sub ProdSizeDisplay(e$,ProdRec,List$[],UMChan,Prod. as prod)
  !
  ! Creates a product size display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! UMChan     : channel, unit of measure
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2
    dim 3%,tmp3
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],action2$[20]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim blank$[200] \ blank$=" ",blank$
	!
    dim M3$[6] \ M3$="######"
	dim M32$[8] \ M32$="#####.##"
	dim M42$[9] \ M42$="######.##"
	dim M44$[11] \ M44$="######.####"
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	clear List$[]
	call dxget("ACTION2",action2$)
	action2$=UCASE$(RTRIM$(action2$))
	!
	! product safety/hazardous page
 	List$[0]=bsdel$,"SIZE",fdel$
	!
	WebStr$="ID",fdel$
	WebStr$=WebStr$,"Lbs/Qty",fdel$,"Lbs/Qty U/M",fdel$
	WebStr$=WebStr$,"Cubic Feet",fdel$,"Cubic Feet U/M",fdel$
	WebStr$=WebStr$,"Height",fdel$,"Width",fdel$,"Length",fdel$
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		WebStr$="ID",fdel$
		WebStr$=WebStr$,"LbsQty",fdel$,"LbsQty UM",fdel$
		WebStr$=WebStr$,"Cubic Feet",fdel$,"Cubic Feet UM",fdel$
		WebStr$=WebStr$,"Height",fdel$,"Width",fdel$,"Length",fdel$
	Endif
    List$[1]=WebStr$ 
	!
	row=2
    if ProdRec>0 ! Product record found
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  WebStr$=WebStr$,Prod.LbsUnit  using M44$,fdel$ ! pounds/quantity
	  X2=Prod.LbsFact;x1=0
	  if x2<=1 let x1=prod.BaseUM
	  If X2>1
		  if x2=prod.UM2Fact let x1=prod.UM2
		  if x2=prod.UM3Fact let x1=prod.UM3
		  if x2=prod.UM4Fact let x1=prod.UM4
		  if x2=prod.UM5Fact let x1=prod.UM5
		  if x2=prod.UM6Fact let x1=prod.UM6
		  if x2=prod.UM7Fact let x1=prod.UM7
		  if x2=prod.UM8Fact let x1=prod.UM8
	  Endif
	  If x1 tmp$=Xunit$(X1,UMChan) ! get u/m desc
	  if not(x1) let tmp$=LTrim$(X2 Using "########")
	  WebStr$=WebStr$,tmp$,fdel$
	  WebStr$=WebStr$,Prod.CubicFeet using M42$,fdel$ ! cubic ft
	  X2=Prod.CubicFtFactor;x1=0
	  if x2<=1 let x1=prod.BaseUM
	  If X2>1
		  if x2=prod.UM2Fact let x1=prod.UM2
		  if x2=prod.UM3Fact let x1=prod.UM3
		  if x2=prod.UM4Fact let x1=prod.UM4
		  if x2=prod.UM5Fact let x1=prod.UM5
		  if x2=prod.UM6Fact let x1=prod.UM6
		  if x2=prod.UM7Fact let x1=prod.UM7
		  if x2=prod.UM8Fact let x1=prod.UM8
	  Endif
	  If x1 tmp$=Xunit$(X1,UMChan) ! get u/m desc
	  if not(x1) let tmp$=LTrim$(X2 Using "########")
	  WebStr$=WebStr$,tmp$,fdel$
	  WebStr$=WebStr$,Prod.HeightOfStkUM using M32$,fdel$ ! height
	  WebStr$=WebStr$,Prod.WidthOfStkUM using M32$,fdel$ ! width
	  WebStr$=WebStr$,Prod.LengthOfStkUM using M32$,fdel$ ! length
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! ProdSizeDisplay
!
!--------------------------------------------------------------------
External Sub UnitOfMeasureDisplay(e$,ProdRec,List$[],CTLChan,UMChan,Prod. as prod)
  !
  ! Creates a product unit of measure display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! CTLChan    : channel, control file
  ! UMChan     : channel, unit of measure
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2
    dim 3%,tmp3
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim P9$[50],action2$[20]
	dim blank$[200] \ blank$=" ",blank$
	!
	dim M42$[9] \ M42$="######.##"
	dim M6$[12] \ M6$="#########"
	!
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	matread #CTLChan,19,50;P9$; ! control file
	!
	clear List$[]
	row=0
	call dxget("action2",action2$)
	action2$=UCase$(RTrim$(action2$))
	if action2$="" Let M6$="###,###,###"
	!
	! product unit of measure section
	WebStr$=bsdel$,"U/M",fdel$
    List$[row]=WebStr$ \ row=row+1
	!
	WebStr$="ID",fdel$,"Base UM",fdel$
    List$[row]=WebStr$ \ row=row+1
	!
	if ProdRec>0 ! Product record found
	  WebStr$=Prod.ProdCode$,fdel$ ! ID
      WebStr$=WebStr$,Xunit$(Prod.BaseUM,UMChan),fdel$ ! base u/m
      List$[row]=WebStr$ \ row=row+1
    endif
	List$[row]=esdel$ \ row=row+1 ! end of section
	!
	! Valid & Base units section (list)
	WebStr$=bsdel$,"Valid/BaseUnits",fdel$
    List$[row]=WebStr$ \ row=row+1
	!
	WebStr$="Valid Units",fdel$,"Base Units",fdel$
    List$[row]=WebStr$ \ row=row+1
    !
	if ProdRec>0 ! Product record found
	  call ValidBaseUMUnits(e$,M6$,Prod.UM2,Prod.UM2Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	  call ValidBaseUMUnits(e$,M6$,Prod.UM3,Prod.UM3Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	  call ValidBaseUMUnits(e$,M6$,Prod.UM4,Prod.UM4Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	  call ValidBaseUMUnits(e$,M6$,Prod.UM5,Prod.UM5Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	  call ValidBaseUMUnits(e$,M6$,Prod.UM6,Prod.UM6Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	  call ValidBaseUMUnits(e$,M6$,Prod.UM7,Prod.UM7Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	  call ValidBaseUMUnits(e$,M6$,Prod.UM8,Prod.UM8Fact,tmp$,tmp1$,UMChan)
	  WebStr$=tmp$,fdel$,tmp1$,fdel$
      List$[row]=WebStr$ \ row=row+1
	endif
	List$[row]=esdel$ \ row=row+1 ! end of section
    ! 
	! Default U/M section
	WebStr$=bsdel$,"DefaultU/M",fdel$
    List$[row]=WebStr$ \ row=row+1
	!
	WebStr$="Stock",fdel$,"Sell",fdel$
	WebStr$=WebStr$,"Purchase",fdel$,"Cost",fdel$
	tmp$="POS/Prod" \ if p9$[2,2]="M" let tmp$="POS/PWO"
	if action2$<>"" let tmp$="Production" ! needs set field name - entry/edit
	WebStr$=WebStr$,"Price",fdel$,RTrim$(tmp$),fdel$
    List$[row]=WebStr$ \ row=row+1
	!
	if ProdRec>0 ! Product record found
      WebStr$=Xunit$(Prod.UMStkDefault,UMChan),fdel$ ! stock u/m
      WebStr$=WebStr$,Xunit$(Prod.UMSellDefault,UMChan),fdel$ ! sell u/m
      WebStr$=WebStr$,Xunit$(Prod.UMPurchDefault,UMChan),fdel$ ! purchase u/m
      WebStr$=WebStr$,Xunit$(Prod.UMCostDefault,UMChan),fdel$ ! cost u/m
      WebStr$=WebStr$,Xunit$(Prod.UMPriceDefault,UMChan),fdel$ ! price u/m
	  if Prod.UMPrdtnDefault let tmp$=Xunit$(Prod.UMPrdtnDefault,UMChan) else tmp$=" "
      WebStr$=WebStr$,tmp$,fdel$ ! pos/production u/m
      List$[row]=WebStr$ \ row=row+1
	endif
	List$[row]=esdel$ \ row=row+1 ! end of section
    !
	! Reference U/M, package & serving section
	WebStr$=bsdel$,"ReferenceU/M",fdel$
    List$[row]=WebStr$ \ row=row+1
	!
	WebStr$="Up Charge",fdel$,"Broken Qty",fdel$
    WebStr$=WebStr$,"Packing",fdel$,"Prod Size",fdel$
	WebStr$=WebStr$,"Vendor Order",fdel$,"Pack Size",fdel$
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		WebStr$=WebStr$,"Serving Size",fdel$,"Serving U/M No",fdel$
	Else ! inquiry
	WebStr$=WebStr$,"Serving Size",fdel$,"Serving U/M #",fdel$
	Endif
	WebStr$=WebStr$,"Serving U/M Desc",fdel$
    List$[row]=WebStr$ \ row=row+1
	!
    if ProdRec>0 ! Product record found
	  !
	  ! reference U/M
      WebStr$=Xunit$(Prod.UMUpChrg,UMChan),fdel$ ! up charge u/m
      WebStr$=WebStr$,Xunit$(Prod.UMBrknQty,UMChan),fdel$ ! broken quantity u/m
      WebStr$=WebStr$,Xunit$(Prod.UMPack,UMChan),fdel$ ! packing u/m
      WebStr$=WebStr$,Xunit$(Prod.UMSize,UMChan),fdel$ ! product size u/m
      WebStr$=WebStr$,Xunit$(Prod.UMVendOrd,UMChan),fdel$ ! price u/m
	  !
	  ! package & serving
      WebStr$=WebStr$,Prod.PackSize$,fdel$ ! package size
	  WebStr$=WebStr$,Prod.ServingSize$,fdel$ ! serving size
	  WebStr$=WebStr$,Prod.NumOfServing using M42$,fdel$ ! serving u/m #
	  X2=Prod.ServingFactor;x1=0
	  if x2<=1 let x1=prod.BaseUM
	  If X2>1
		  if x2=prod.UM2Fact let x1=prod.UM2
		  if x2=prod.UM3Fact let x1=prod.UM3
		  if x2=prod.UM4Fact let x1=prod.UM4
		  if x2=prod.UM5Fact let x1=prod.UM5
		  if x2=prod.UM6Fact let x1=prod.UM6
		  if x2=prod.UM7Fact let x1=prod.UM7
		  if x2=prod.UM8Fact let x1=prod.UM8
	  Endif
	  If x1 tmp$=Xunit$(X1,UMChan) ! get u/m desc
	  if not(x1) let tmp$=LTrim$(X2 Using "########")
	  WebStr$=WebStr$,TMP$,fdel$ ! serving u/m desc
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	endif
	!
	List$[row]=esdel$ \ row=row+1 ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! UnitofMeasureDisplay
!
!--------------------------------------------------------------------
External Sub ValidBaseUMUnits(e$,Mask$,ValidUM,BaseUnit,ValidUM$,BaseUnit$,UMChan)
  try
  !
  ! Sets up the products valid units and base units
  !
  ! e$         : error message
  ! ValidUM    : valid units (PFU1)
  ! BaseUnit   : base units (PFU2)
  ! ValidUM$   : valid units desc (output)
  ! BaseUnit$  : base units desc (output)
  ! UMChan     : channel, unit of measure
  !
  if BaseUnit let BaseUnit$=BaseUnit using Mask$ else BaseUnit$=""
  ValidUM$=Xunit$(ValidUM,UMChan) ! get valid u/m desc
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! ValidBaseUMUnits
!
!-------------------------------------------------------------------- 
External Sub ProdItemDisplay(e$,ProdRec,List$[],PTChan,Prod. as prod)
  !
  ! Creates a product item control display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! PTChan     : product tax type chan
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2,tmpcnt
    dim 3%,tmp3,HnRec
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],action2$[20]
    dim tmp$[200],tmp1$[200],WebStr$[1200],Message$[200]
	Dim p61$[256],p60$[50]
	dim blank$[200] \ blank$=" ",blank$
	!
    dim M2$[4] \ M2$="####"
    !
	dim PT. as ptaxtype ! product tax type
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	Mat Read #1,61,0;P61$;
	MAT  READ #1,60,50;P60$;
	clear List$[]
	call dxget("action2",action2$)
	action2$=ucase$(RTrim$(action2$))
	!
	! product safety/hazardous page
 	List$[0]=bsdel$,"ITEMCONTROL",fdel$
	!
	WebStr$="ID",fdel$
	WebStr$=WebStr$,"Date Establish",fdel$,"Lot Control",fdel$
	WebStr$=WebStr$,"Serial Numbers",fdel$,"Send to Web",fdel$
	WebStr$=WebStr$,"Tax Type Code",fdel$,"Tax Type Desc",fdel$
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		webstr$=webstr$,"ExceptSale",fdel$,"ExceptLtd",fdel$
	Endif
	Webstr$=webstr$,"DOTHazardous",fdel$,"ROLL/LB",fdel$
	If action2$="EDIT" or action2$="ADD" or action2$="COPY" ! always send
		webstr$=webstr$,"ROLLINV",fdel$
	Else ! inquiry - only if y
		if p61$[104,104]="Y" let webstr$=webstr$,"ROLLINV",fdel$
	Endif
	If action2$="EDIT" or action2$="ADD" or action2$="COPY" ! always send
		If p60$[46,46]="Y" ! import
			webstr$=webstr$,"OceanFreight",fdel$
			webstr$=webstr$,"CustomDuty",fdel$
		else
			webstr$=webstr$,"",fdel$
			webstr$=webstr$,"",fdel$
		endif
	endif
	! task 49939 - add 2 inventory class fields to main product (could be b4 import flds?)
	webstr$=webstr$,"INVCLASS1",fdel$,"INVCLASS2",fdel$
	webstr$=webstr$,"CNTWEEK",fdel$
	List$[1]=WebStr$ 
	!
	row=2
    if ProdRec>0 ! Product record found
	  !
	  read record #PTChan,Prod.TaxType;PT.;
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  ! Call FormatDate(str$(Prod.DateRecEstab),tmp$,tmp,4)
	  tmp$=PDate$(Prod.DateRecEstab)
	  if Prod.DateRecEstab<=0 let tmp$=""
	  WebStr$=WebStr$,tmp$,fdel$ ! date record established
	  WebStr$=WebStr$,Prod.LotCtrl$,fdel$ ! lot control
	  WebStr$=WebStr$,Prod.SerNoTrack$,fdel$ ! serial numbers
	  if Prod.eccosflag=1 let tmp$="Y" else tmp$="N"
	  if Prod.eccosflag=2 let tmp$="P" ! NEW - private label
	  if Prod.eccosflag=3 let tmp$="D" ! NEW - mill/direct
	  WebStr$=WebStr$,tmp$,fdel$ ! send to web
	  WebStr$=WebStr$,Prod.TaxType using M2$,fdel$ ! tax type code
	  WebStr$=WebStr$,rtrim$(PT.Desc$),fdel$ ! tax type desc
	  If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		webstr$=webstr$,LTrim$(prod.ExceptSale using "-------#.##"),fdel$
		Webstr$=webstr$,LTrim$(prod.ExceptLtd using "-------#.##"),fdel$
	  Endif
	  tmp$="N" \ if prod.DotHazardous=1 let tmp$="Y"
	  if prod.DotHazardous=2 let tmp$="S"
	  webstr$=webstr$,tmp$,fdel$ ! hazardous
	  tmp$="N" \ if prod.RollLbItem$="Y" let tmp$="Y"
	  webstr$=webstr$,tmp$,fdel$ ! roll lb
	  If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		tmp$=prod.ROLLINV$ \ if p61$[104,104]<>"Y" let tmp$="N"
		if tmp$<>"Y" let tmp$="N"
		webstr$=webstr$,tmp$,fdel$
	  Else
		tmp$=prod.ROLLINV$ \ if tmp$<>"Y" let tmp$="N"
		if p61$[104,104]="Y" let webstr$=webstr$,tmp$,fdel$
	  Endif
	  If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		If p60$[46,46]="Y" ! import
			if prod.OceanFrgtRec<0 or prod.OceanFrgtRec>99
				let prod.OceanFrgtRec=0
			endif
			webstr$=webstr$,str$(prod.OceanFrgtRec),fdel$
			if prod.CustomDutyRec<0 or prod.CustomDutyRec>999
				let prod.customdutyrec=0
			endif
			webstr$=webstr$,str$(prod.CustomDutyRec),fdel$
		else
			webstr$=webstr$,"",fdel$
			webstr$=webstr$,"",fdel$
		endif
	 endif
	  ! add for task 49939 - always send
	  WEBSTR$=webstr$,Str$(prod.InventClass1),fdel$,Str$(prod.InventClass2),fdel$
	  WEBSTR$=webstr$,Str$(prod.CntWeek),fdel$
	  ! class1=pr_c4[8] (was existing fld), class2=PRD1[4] ! 1% 
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! ProdItemDisplay
!
!--------------------------------------------------------------------
External Sub VendorMfgDisplay(e$,ProdRec,List$[],CTLChan,UMChan,VNChan,Prod. as prod)
  !
  ! Creates a product vendor / manufacturing display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! CTLChan    : channel, control file
  ! UMChan     : channel, unit of measure
  ! VNChan     : channel, vendor
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1,MthDays,ARMonth
	dim 2%,tmp2,tmpcnt,BDays[24]
    dim 3%,tmp3,VNRec
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim P9$[50],SearKey$[64],action2$[30]
	dim blank$[200] \ blank$=" ",blank$
	!
    dim M32$[10] \ M32$="#######.##"
	dim M64$[14] \ M64$="########.####"
    !
	dim VN. as a80vm ! vendor master
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	matread #CTLChan,19,50;P9$; ! control file
	mat read #CTLChan,11,0;BDays; ! business days per month
	read #CTLChan,0,120;ARMonth; 
	MthDays=Bdays[ARMonth]
	If MthDays<=0 let MthDays=21
	call dxget("action2",action2$)
	action2$=ucase$(RTrim$(action2$)) !if if edit, price up and cost up type is sent separately
	!
	clear List$[]
	!
	! product safety/hazardous page
 	List$[0]=bsdel$,"VENDORMFG",fdel$
	!
	WebStr$="ID",fdel$
	
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		WebStr$=WebStr$,"MakeBuy Flag",fdel$,"Primary Vendor",fdel$
	Else
		WebStr$=WebStr$,"Make/Buy Flag",fdel$,"Primary Vendor",fdel$
	Endif
	WebStr$=WebStr$,"Vendor Name",fdel$,"Vendor Item No",fdel$
	WebStr$=WebStr$,"Avg Lead Time",fdel$,"Default Purch Unit",fdel$
	WebStr$=WebStr$,"Vendor Order Unit",fdel$,"Revision Level",fdel$
	
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		WebStr$=WebStr$,"QuantityBatch",fdel$,"Default Production Unit",fdel$
	Else
		WebStr$=WebStr$,"Quantity/Batch",fdel$,"Default Production Unit",fdel$
	Endif
    List$[1]=WebStr$ 
	!
	row=2
    if ProdRec>0 ! Product record found
	  !
	  SearKey$=Prod.PrimVend using "######" ! vendor master
      VNRec=filegeta80vm(e$,VNChan,"=",1,SearKey$,VN.)
	  if VNRec<0 clear VN.
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  WebStr$=WebStr$,Prod.MBFlg$,fdel$ ! make buy flag
	  WebStr$=WebStr$,Prod.PrimVend using "######",fdel$ ! vendor id
	  WebStr$=WebStr$,rtrim$(VN.Name$),fdel$ ! vendor name
	  WebStr$=WebStr$,rtrim$(Prod.VendItem$),fdel$ ! vendor item 
	  x3=Prod.LeadTime*MthDays
	  WebStr$=WebStr$,X3 using M32$,fdel$ ! lead time sent days
      WebStr$=WebStr$,Xunit$(Prod.UMPurchDefault,UMChan),fdel$ ! default purchase u/m
      WebStr$=WebStr$,Xunit$(Prod.UMVendOrd,UMChan),fdel$ ! default vendor order u/m
	  WebStr$=WebStr$,Prod.RevLvl$,fdel$ ! revision level
	  WebStr$=WebStr$,Prod.QtyPerStrkBtch using M64$,fdel$ ! quantity / batch
	  if P9$[2,2]="M" let tmp$=Xunit$(Prod.UMPrdtnDefault,UMChan) else tmp$=""
      WebStr$=WebStr$,tmp$,fdel$ ! default production u/m
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! VendorMfgDisplay
!
!--------------------------------------------------------------------
External Sub PriceControlDisplay(e$,Intco,ProdRec,List$[],BRChan,UMChan,PTChan,Prod. as prod)
  !
  ! Creates a product price control display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! BRChan     : channel, break table
  ! UMChan     : channel, unit of measure
  ! PTChan     : channel, product tax
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2
    dim 3%,tmp3
    !
	Dim 1%,FndUID,Comm_Lev,UA5[10],Cost_Lev[3] ! vars for call usercntrl
	Dim UserID$[8],UA2$[50],TUID$[10] ! vars for call usercntrl
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim SearKey$[64],action2$[20],P60$[50]
	dim blank$[200] \ blank$=" ",blank$
	!
	dim M2$[4] \ M2$="####"
	dim M22$[7] \ M22$="####.##"
    dim M3$[5] \ M3$="#####"
    !
    dim PT. as ptaxtype ! product tax type
	!
	MAT READ #1,60,50;P60$;
	call dxget("action2",action2$)
	action2$=ucase$(RTRIM$(action2$)) !if if edit, price up and cost up type is sent separately
	!
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!! get costlev
	Call DXGet("S_USER.ID",tmp$) ! get from system variable
	Let UserID$=UCase$(tmp$) ! make sure it's UPPERCASE as that's what PM uses
	let TUID$=UserID$+"          " ! set up temp var
	If Len(TUID$)>10 Let TUID$[11]="" ! Cut it at max as usercntrl is 10 chars vs 8 for .net
	If TUID$[1,10]<>"          " !  no blank users!
	  Call UserCntrl(TUID$,UA2$,UA5[],FndUID,intCo)
	  If FndUID=0 ! means found it, =1 is not found
	    Cost_Lev[0]=UA5[0];Cost_Lev[1]=UA5[1] ! avg / load
		Cost_Lev[2]=UA5[2];Cost_Lev[3]=UA5[3] ! PO / base
		try comm_lev=UA5[4] Else Comm_lev=1000
	  Endif ! if not found would be zeroes from dim
	Endif
	!
	Try read record #PTChan,Prod.TaxType;PT.; else clear PT. ! product tax
	!
	clear List$[]
	!
	! product safety/hazardous page
 	List$[0]=bsdel$,"PRICECONTROL",fdel$ 
	!
	WebStr$="ID",fdel$
	WebStr$=WebStr$,"Price Type",fdel$,"Price Type Desc",fdel$
	WebStr$=WebStr$,"Markup Table",fdel$
	WebStr$=WebStr$,"Break Table No",fdel$,"Break Table Desc",fdel$
	WebStr$=WebStr$,"Price Up Charge",fdel$,"Cost Up Charge",fdel$
	WebStr$=WebStr$,"Up Charge Unit",fdel$,"Bypass GP%",fdel$
	WebStr$=WebStr$,"Supersede Pricing",fdel$
	IF P60$[46,46]="Y" ! and action2$=""
		WebStr$=WebStr$,"Ocean Freight",fdel$,"Custom Duty",fdel$
	eNDIF
	WebStr$=WebStr$,"Cost Update Group",fdel$
	If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		WebStr$=WebStr$,"Commission",fdel$,"Default Price UM",fdel$
		WebStr$=WebStr$,"Default Costing UM",fdel$,"Catchweight Item",fdel$
	Else
	WebStr$=WebStr$,"Commission %",fdel$,"Default Price U/M",fdel$
	WebStr$=WebStr$,"Default Costing U/M",fdel$,"Catchweight Item",fdel$
	Endif
	WebStr$=WebStr$,"Tax Type",fdel$,"Tax Type Desc",fdel$
	if action2$="EDIT" or action2$="COPY" let WebStr$=WebStr$,"PriceUpType",fdel$,"CostUpType",fdel$
    List$[1]=WebStr$ 
	!
	row=2
    if ProdRec>0 ! Product record found
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  WebStr$=WebStr$,Prod.PriceType,fdel$ ! price type code
	  WebStr$=WebStr$,PriceTypeDesc$(e$,Prod.PriceType),fdel$ ! price type desc
	  WebStr$=WebStr$,Prod.MUpTbl using M3$,fdel$ ! makrup table code
	  WebStr$=WebStr$,Prod.BrkTbl using M3$,fdel$ ! break table code
	  call BreakTableDesc(e$,BRChan,Prod.BrkTbl,tmp$)
	  WebStr$=WebStr$,tmp$,fdel$ ! break table desc
	  tmp$=MaskUpCharge$(e$,Prod.PriceUpchrg,Prod.PriceUpchrgType,Prod.UMUpChrg,UMChan)
	  if action2$="EDIT" or action2$="COPY" let tmp$=Prod.PriceUpchrg using "###.##"
	  WebStr$=WebStr$,tmp$,fdel$ ! price up charge
	  tmp$=MaskUpCharge$(e$,Prod.LoadCostUpchrg,Prod.LoadUpchgType,Prod.UMUpChrg,UMChan)
	  if action2$="EDIT" or action2$="COPY" let tmp$=Prod.LoadCostUpchrg using "###.##"
	  WebStr$=WebStr$,tmp$,fdel$ ! cost up charge
  	  tmp$=Xunit$(Prod.UMUpChrg,UMChan) ! get u/m desc
	  WebStr$=WebStr$,tmp$,fdel$ ! up charge u/m
	  WebStr$=WebStr$,Prod.ByPassGPMerch$,fdel$ ! bypass GP %
	  TMP$=Prod.SuperPrcCalc$
	  if tmp$<>"F" and tmp$<>"M" let tmp$="N"
	  WebStr$=WebStr$,tmp$,fdel$ ! supersede pricing
	  IF P60$[46,46]="Y"
	  WebStr$=WebStr$,Prod.OceanFrgtRec using M2$,fdel$ ! ocean freight
	  WebStr$=WebStr$,Prod.CustomDutyRec using M2$,fdel$ ! custom duty
	  Endif
	  WebStr$=WebStr$,rtrim$(Prod.CostUpdGrp$),fdel$ ! cost update group (add desc?)
	  if comm_lev=1000
		  WebStr$=WebStr$,Prod.CommPct using M22$,fdel$ ! commission %
	  Else
		Webstr$=webstr$," ",fdel$ ! no
	  Endif
	  tmp$=Xunit$(Prod.UMPriceDefault,UMChan) ! get u/m desc
	  WebStr$=WebStr$,tmp$,fdel$ ! default price u/m
	  tmp$=Xunit$(Prod.UMCostDefault,UMChan) ! get u/m desc
	  WebStr$=WebStr$,tmp$,fdel$ ! default cost u/m
	  if Prod.CatchWgtItm=-3 let tmp$="Y" else tmp$="N" 
	  WebStr$=WebStr$,tmp$,fdel$ ! catch weight item
	  WebStr$=WebStr$,Prod.TaxType using M3$,fdel$ ! product tax type
	  WebStr$=WebStr$,rtrim$(PT.Desc$),fdel$ ! product tax type desc
	  if action2$="EDIT" or action2$="COPY"
	   tmp$="%" \ if Prod.PriceUpchrgType let tmp$="$"  !type drop list default
	   WebStr$=WebStr$,tmp$,fdel$
	   tmp$="%" \ if Prod.LoadUpchgType let tmp$="$"
	   WebStr$=WebStr$,tmp$,fdel$
	  end if
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! PriceControlDisplay
!
!--------------------------------------------------------------------
External Sub MarkupTableDisplay(e$,ProdRec,List$[],PRMChan,SPMChan,CTLChan,Prod. as prod)
  !
  ! Creates a product price control display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! PRMChan    : channel, price markup 
  ! SPMChan    : channel, product markup
  ! CTLChan    : channel, control file
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1,pm5[5,4]
	dim 2%,tmp2,tmpcnt
    dim 3%,tmp3,RecNo,Offset,pm6[5,3]
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim SearKey$[64],TableDesc$[50],FieldName$[10],Costdesc$[6,20]
	dim blank$[200] \ blank$=" ",blank$
	dim MkupType$[3] \ MkupType$="%$G"
	CostDesc$[0]="BASE COST"
	CostDesc$[1]="P.O. COST"
	CostDesc$[2]="LOAD COST"
	CostDesc$[3]="LOAD2 COST"
	CostDesc$[4]="Aver. COST"
	CostDesc$[5]="Net PO CST"
	!
	dim M2$[4] \ M2$="####"
	dim M22$[7] \ M22$="####.##"
    dim M3$[5] \ M3$="#####"
    !
	dim PRM. as spricemark ! price markup table
	dim SPM. as sprodmark ! product markup table
	!
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	clear List$[]
	!
	! markup table id & desc
	List$[0]=bsdel$,"MARKUPTABLEID",fdel$
	!
	List$[1]="ID",fdel$,"Markup Table",fdel$,"Markup Table Desc",fdel$
	!
	row=2
    if ProdRec>0 ! Product record found
	  TableDesc$=""
      if Prod.PriceType=1 read #PRMChan,Prod.MUpTbl,0;TableDesc$[1,16];
      if Prod.PriceType=2 matread #SPMChan,10000+Prod.MUpTbl,0;TableDesc$;
	  If Prod.MUpTbl=0 let TableDesc$=""
	  TableDesc$=TableDesc$,"  (Base Cost + Markup Values)"
	  WebStr$=Prod.ProdCode$,fdel$ ! ID
	  ! WebStr$=WebStr$,str$(Prod.PriceType),fdel$,TableDesc$,fdel$ ! table & desc
	  WebStr$=WebStr$,str$(Prod.MUpTbl),fdel$,TableDesc$,fdel$ ! table & desc
	  List$[row]=Webstr$ \ row=row+1
	endif
	List$[row]=esdel$ \ row=row+1 ! end of section
	!
	! markup table values
 	List$[row]=bsdel$,"MARKUPTABLE",fdel$ \ row=row+1
	!
	WebStr$="Field Desc",fdel$
	WebStr$=WebStr$,"Markup 1",fdel$
	WebStr$=WebStr$,"Markup 2",fdel$
	WebStr$=WebStr$,"Markup 3",fdel$
	WebStr$=WebStr$,"Markup 4",fdel$
	List$[row]=WebStr$ \ row=row+1
	!
    if ProdRec>0 and Prod.MUpTbl>0! Product record found and has a table
	  !
	  if Prod.PriceType=1 ! matrix
		!
	    for cnt=2 to 7 ! 0 to 5 ! leave for price desc
		  RecNo=Prod.MUpTbl ! (cnt*1000)-1000+Prod.MUpTbl
		  !read record #PRMChan,RecNo;PRM.; ! use matrix
		  Mat read #PRMChan,RecNo,18;pm5;
		  mat read #PRMChan,RecNo,78;PM6;
		  Offset=(cnt+12)*10 
		  READ #1,18,offset;FieldName$;
		  !
  		  X0=cnt-2 ! for the matrix
		  WebStr$=rtrim$(FieldName$)," - BASE: ",RTrim$(CostDesc$[pm5[x0,4]]),fdel$ ! field desc
		  !
		  call MaskMarkup(e$,pm5[x0,0],PM6[x0,0],fdel$,WebStr$) ! markup1
		  call MaskMarkup(e$,pm5[x0,1],PM6[x0,1],fdel$,WebStr$) ! markup2
		  call MaskMarkup(e$,pm5[x0,2],PM6[x0,2],fdel$,WebStr$) ! markup3
		  call MaskMarkup(e$,pm5[x0,3],PM6[x0,3],fdel$,WebStr$) ! markup4
		  List$[row]=WebStr$ \ row=row+1
		next cnt
	  endif
	  !
	  if Prod.PriceType=2 ! bracket
		!
	    for cnt=1 to 10
		  RecNo=(cnt*1000)-1000+Prod.MUpTbl
		  read record #SPMChan,RecNo;SPM.;
 		  !
		  WebStr$=str$(cnt),fdel$ ! field desc
		  !
		  call MaskMarkup(e$,SPM.CalculationCode1,SPM.Value1,fdel$,WebStr$) ! markup1
		  call MaskMarkup(e$,SPM.CalculationCode2,SPM.Value2,fdel$,WebStr$) ! markup2
		  call MaskMarkup(e$,SPM.CalculationCode3,SPM.Value3,fdel$,WebStr$) ! markup3
		  call MaskMarkup(e$,SPM.CalculationCode4,SPM.Value4,fdel$,WebStr$) ! markup4
		  List$[row]=WebStr$ \ row=row+1
		next cnt
	    !
      endif
	endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! MarkupTableDisplay
!
!--------------------------------------------------------------------
External Sub MaskMarkup(e$,MkupCode,MkupValue,fdel$,WebStr$)
  !
  ! Sets up the products valid units and base units
  !
  ! e$         : error message
  ! MkupCode   : markup code
  ! MkUpValue  : markup value
  ! WebStr$    : string to write to (output)
  !
  try
    !
	dim Markup$[20]
    dim Types$[3] \ Types$="%$GH"
	dim M52$[11] \ M52$="------#.##"
	!
    if MkupValue let Markup$=MkupValue using M52$ else Markup$=""
    if Markup$ if MkupCode>=0 if MkupCode<=3 let Markup$=Markup$," ",Types$[MkupCode+1,MkupCode+1]
	WebStr$=WebStr$,Markup$,fdel$
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! MaskMarkup
!
!-------------------------------------------------------------------- 
External Sub UserDefineDisplay(e$,ProdRec,List$[],UDAChan,Prod. as prod)
  !
  ! Creates a product vendor / manufacturing display
  !
  ! e$         : error message
  ! ProdRec    : product record #
  ! List$[]    : product size display
  ! UDAChan    : channel, user control fields
  ! Prod.      : product record
  !
  try
    !
    dim 1%,tmp1
	dim 2%,tmp2,tmpcnt
    dim 3%,tmp3,VNRec
    !
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim tmp$[200],tmp1$[200],WebStr$[600],Message$[200]
	dim P9$[50],SearKey$[64],Uda$[56],PULBL$[340],action2$[20]
	dim blank$[200] \ blank$=" ",blank$
	!
	dim M59$[20] \ M59$="--------#.#########"
    !
	dim UDA. as produda ! product user define
	Dim LUDA. as produda ! labels (not layout)
	!
	call dxget("ACTION2",ACTION2$)
	action2$=UCase$(RTrim$(action2$))
    !
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	!
	clear List$[]
	!
	mat read #1,67,0;UDA$; ! prod uda labels
	! "!!!LABEL KEY" & REC 67 FOR UDA LABELS!
	SearKey$="!!!LABEL KEY"
	  UDARec=filegetproduda(e$,UDAChan,"=",1,SearKey$,LUDA.)
	  if UDARec>0 
		MAT READ #udachan,UDARec,12;PULBL$;
	  Else
		clear pulbl$
	  Endif
 	List$[0]=bsdel$,"USERDEFINE",fdel$
	!
	WebStr$="ID",fdel$
	WebStr$=WebStr$,"UDA Desc 1",fdel$,"UDA Desc 2",fdel$
	WebStr$=WebStr$,"UDA Desc 3",fdel$,"UDA Desc 4",fdel$
	WebStr$=WebStr$,"UDA Desc 5",fdel$,"UDA Desc 6",fdel$
	WebStr$=WebStr$,"UDA Desc 7",fdel$,"UDA Desc 8",fdel$
	WebStr$=WebStr$,"UDA Desc 9",fdel$,"UDA Desc 10",fdel$
	WebStr$=WebStr$,"UDA Desc 11",fdel$,"UDA Desc 12",fdel$
	WebStr$=WebStr$,"UDA Desc 13",fdel$,"UDA Desc 14",fdel$
	WebStr$=WebStr$,"UDA Desc 15",fdel$,"UDA Desc 16",fdel$
	WebStr$=WebStr$,"UDA Number 1",fdel$,"UDA Number 2",fdel$
	WebStr$=WebStr$,"UDA Number 3",fdel$,"UDA Number 4",fdel$
	WebStr$=WebStr$,"UDA Number 5",fdel$
    !
    List$[1]=WebStr$ 
	!
	row=2
    if ProdRec>0 ! Product record found
	  !
	  SearKey$=Prod.ProdCode$
	  UDARec=filegetproduda(e$,UDAChan,"=",1,SearKey$,UDA.)
	Else
	  UDARec=-1 ! no prod - no uda
	endif
	  if UDARec<0 clear UDA.
	  !
	  WebStr$=Prod.ProdCode$,fdel$
	  tmp1$="Product UDA"
	  tmp$=rtrim$(Prod.UdAlpha1$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #14 (prod #1)
	  tmp$=rtrim$(Prod.UdAlpha2$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #15 (prod #2)
	  tmp$=rtrim$(Prod.UdAlpha3$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #16 (prod #3)
	  tmp$=rtrim$(UDA.ANUda1$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #1
	  tmp$=rtrim$(UDA.ANUda2$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #2
	  tmp$=rtrim$(UDA.ANUda3$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #3
	  tmp$=rtrim$(UDA.ANUda4$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #4
	  tmp$=rtrim$(UDA.ANUda5$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #5
	  tmp$=rtrim$(UDA.ANUda6$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #6
	  tmp$=rtrim$(UDA.ANUda7$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #7
	  tmp$=rtrim$(UDA.ANUda8$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #8
	  tmp$=rtrim$(UDA.ANUda9$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #9
	  tmp$=rtrim$(UDA.ANUda10$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #10
	  tmp$=rtrim$(UDA.ANUda11$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #11
	  tmp$=rtrim$(UDA.ANUda12$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #12
	  tmp$=rtrim$(UDA.ANUda13$) !\ if tmp$="" let tmp$=tmp1$
	  WebStr$=WebStr$,tmp$,fdel$ ! uda desc #13
	  
	  !
	  WebStr$=WebStr$,Prod.UdNumeric using M59$,fdel$ ! uda amount #5 (prod #1)
	  WebStr$=WebStr$,UDA.NumUda1 using M59$,fdel$ ! uda amount #1
	  WebStr$=WebStr$,UDA.NumUda2 using M59$,fdel$ ! uda amount #2
	  WebStr$=WebStr$,UDA.NumUda3 using M59$,fdel$ ! uda amount #3
	  WebStr$=WebStr$,UDA.NumUda4 using M59$,fdel$ ! uda amount #4
	  
	  !
	  List$[row]=WebStr$ \ row=row+1
	  !
	! was endif
	!If action2$="EDIT" or action2$="ADD" or action2$="COPY"
		! list$[row]=esdel$ ! as row 2
		Webstr$="UDALABELS",fdel$
		tmp1$="PRODFLE UDA "
		tmp$=RTrim$(UDA$[15,28]) \ if tmp$="" let tmp$=tmp1$+"2"
		webstr$=webstr$,tmp$,fdel$
		tmp$=RTrim$(UDA$[29,42]) \ if tmp$="" let tmp$=tmp1$+"3"
		webstr$=webstr$,tmp$,fdel$
		tmp$=RTrim$(UDA$[43,56]) \ if tmp$="" let tmp$=tmp1$+"4"
		webstr$=webstr$,tmp$,fdel$
		tmp1$="UDA FILE UDA "
		For X=1 to 13
			dsp=((x-1)*20)+1
			tmp$=RTrim$(PULBL$[dsp,dsp+19])
			if tmp$="" let tmp$=tmp1$+Str$(x)
			webstr$=webstr$,tmp$,fdel$
		Next X
		tmp1$="PRODFLE UDA "
		tmp$=RTrim$(UDA$[1,14]) \ if tmp$="" let tmp$=tmp1$+"1"
		webstr$=webstr$,tmp$,fdel$
		tmp1$="UDA FILE UDA "
		for x=14 to 17
			dsp=((x-1)*20)+1
			tmp$=RTrim$(PULBL$[dsp,dsp+19])
			if tmp$="" let tmp$=tmp1$+Str$(x)
			webstr$=webstr$,tmp$,fdel$
		Next X
		list$[row]=webstr$
		row=row+1
	!
	! Endif
	!
	List$[row]=esdel$ ! end of section
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! UserDefineDisplay
!
!--------------------------------------------------------------------
