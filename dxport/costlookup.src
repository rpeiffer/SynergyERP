!! costlookup - look up inv/line in 4/invcost
!
! loadsave -w -n 100,10 -o prog/dxport/costlookup.dl4 src/costlookup.src
!
include "src/copyright.inc"
Rem costlookup - veiw costs captured at accept time
Rem Author: rjs 09/14/05
Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC  6, 2006  14:48:31
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/acme.r9/costlookup.src (univ2) [jcs] {00021}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub GetDelimiters
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
Declare Intrinsic Sub InpBuf,String
Declare Intrinsic Function FindChannel
!Option Default Dialect IRIS1

!Enter REC_INVL,COST_LEV[] ! not passed
Enter e$,Intco,Custid,Refid,Lineno,rstr$
If Err 0 Gosub ERR_TRAP
Dim buttonlist$[5,50],nextlist$[5,100] ! error handling variables
Dim 1%,STARTCHAN,CNVTU[2],3%,AMOUNT,CNVTA
Dim 1%,cost_lev[3],3%,Rec_Invl
Rem {begin src/inc/dim.invl.i}
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,INVNO,QPB,ROL0
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Rem {end dim.invl.i}
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.ccodes.i}
Dim 1%,CCD$[14]
Rem {end dim.ccodes.i}
Dim 2%,Q0[1]
Dim TITLE$[40],C$[16],P9$[50],KLINE$[50],KPROD$[50],F$[16],U9$[50],PMASK$[15]
Dim 3%,MASK6$[15],J4$[20],X1[10],ARYR$[2],D1$[10],UserID$[10],tmp$[1000]
Dim K_INVCOST$[50],INVCST$[22],CHK_INVCOST$[50],X$[14],X1$[14],J7$[50]
Dim 3%,INVCST[13],DCOST[7],GP[7],LINECOST,LINEPRICE,GPINVOICE,GLCOST,GLGP
DIm k1$[50],msg$[200],List$[50,500],GPMask$[20]
Dim fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
!Call String(5,U9$)
call dxget("S_USER.ID",tmp$)
let userid$=UCase$(tmp$)+"          "
Call GetCostLevels(e$,cost_lev[],IntCo,Userid$)
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
CH_INVH = OpenFile(-1136,Intco) 
CH_INVL = OpenFile(-1184,Intco)
CH_CCODES = OpenFile(-1728,Intco)
CH_PROD = OpenFile(-1792,Intco)
CH_INVCOST = Findchannel() ! 32
F$="4/INVCOST"+STR$(INTCO)
ROPEN #CH_INVCOST,F$
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0; \ If Q0[1] = 0 Let Q0[1] = 2
MASK6$ = "#",MASK6$
PMASK$ = "######.",MASK6$[1,Q0[1]]
GPMask$="-----#.##%"
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
If Not(SC) Let SC = 2
SR = 1
NC = 70 \ NR = 19
If SC + NC > 78 Let SC = 78 - NC
If SR + NR > 23 Let SR = 23 - NR
k1$=" ",k1$
K1$[1,10]=Refid using "##########"
k1$[11]=LineNo using "###"
Search #ch_invl,2,1;k1$,rec_invl,E
if e goto noinvl
Rem {begin src/inc/read.invl.i}
Mat Read #CH_INVL,REC_INVL,0;L2
Mat Read #CH_INVL,REC_INVL,8;L3
Mat Read #CH_INVL,REC_INVL,16;L4
Mat Read #CH_INVL,REC_INVL,32;L5
Mat Read #CH_INVL,REC_INVL,56;L6
Mat Read #CH_INVL,REC_INVL,80;L6$
Mat Read #CH_INVL,REC_INVL,140;L1$
Mat Read #CH_INVL,REC_INVL,160;L9
Mat Read #CH_INVL,REC_INVL,168;L7
Mat Read #CH_INVL,REC_INVL,246;PL
Mat Read #CH_INVL,REC_INVL,250;UN
Mat Read #CH_INVL,REC_INVL,256;S2
Mat Read #CH_INVL,REC_INVL,260;S3
Mat Read #CH_INVL,REC_INVL,368;MT$
Mat Read #CH_INVL,REC_INVL,370;S3$
Mat Read #CH_INVL,REC_INVL,404;OLM
Mat Read #CH_INVL,REC_INVL,446;EUN
Mat Read #CH_INVL,REC_INVL,452;UNF
Mat Read #CH_INVL,REC_INVL,494;LCO
Mat Read #CH_INVL,REC_INVL,502;CST
Mat Read #CH_INVL,REC_INVL,508;LTAX1
Mat Read #CH_INVL,REC_INVL,514;CTWT
Mat Read #CH_INVL,REC_INVL,518;INVNO
Mat Read #CH_INVL,REC_INVL,538;LTAX2
Mat Read #CH_INVL,REC_INVL,542;QPB
Read #CH_INVL,REC_INVL,548;LPRINTED
Read #CH_INVL,REC_INVL,550;OWHS
Read #CH_INVL,REC_INVL,552;LP_DATE
Read #CH_INVL,REC_INVL,556;LP_TIME
Read #CH_INVL,REC_INVL,564;ROL0
Rem {end read.invl.i}
If S2[0] = 3 Goto NoInvl
If Not(L3[0])
  REC_PROD = L4[0]
  Rem {begin src/inc/READ.PROD.I}
  Mat Read #CH_PROD,REC_PROD,0;A$
  Mat Read #CH_PROD,REC_PROD,156;B
  Mat Read #CH_PROD,REC_PROD,256;A
  Mat Read #CH_PROD,REC_PROD,460;A1
  Mat Read #CH_PROD,REC_PROD,508;A2
  Mat Read #CH_PROD,REC_PROD,512;PFU1
  Mat Read #CH_PROD,REC_PROD,554;PFU2
  Mat Read #CH_PROD,REC_PROD,596;PRPARC
  Mat Read #CH_PROD,REC_PROD,620;LM
  Mat Read #CH_PROD,REC_PROD,624;PR_PO
  Mat Read #CH_PROD,REC_PROD,628;AGEDAY
  Read #CH_PROD,REC_PROD,630;LLC
  Mat Read #CH_PROD,REC_PROD,632;PSN$
  Mat Read #CH_PROD,REC_PROD,652;PSN
  Mat Read #CH_PROD,REC_PROD,660;U2
  Mat Read #CH_PROD,REC_PROD,664;LBSORD
  Mat Read #CH_PROD,REC_PROD,670;U4
  Read #CH_PROD,REC_PROD,678;U3
  Mat Read #CH_PROD,REC_PROD,684;U3$
  Mat Read #CH_PROD,REC_PROD,744;HZ$
  Mat Read #CH_PROD,REC_PROD,834;A3
  Mat Read #CH_PROD,REC_PROD,846;PFTB
  Read #CH_PROD,REC_PROD,854;UPCT
  Mat Read #CH_PROD,REC_PROD,856;C1$
  Mat Read #CH_PROD,REC_PROD,894;PR_C4
  Read #CH_PROD,REC_PROD,938;PF_LOAD2
  Mat Read #CH_PROD,REC_PROD,944;PR_A2$
  Mat Read #CH_PROD,REC_PROD,974;PFCO
  Mat Read #CH_PROD,REC_PROD,990;PLV
  Mat Read #CH_PROD,REC_PROD,1002;PLC
  Mat Read #CH_PROD,REC_PROD,1018;PFN
  Mat Read #CH_PROD,REC_PROD,1030;STK
  Mat Read #CH_PROD,REC_PROD,1048;FDT
  Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
  Mat Read #CH_PROD,REC_PROD,1066;PRBASE
  Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
  Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
  Mat Read #CH_PROD,REC_PROD,1088;FUT
  Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
  Mat Read #CH_PROD,REC_PROD,1108;PRREDI
  Mat Read #CH_PROD,REC_PROD,1120;PIC$
  Mat Read #CH_PROD,REC_PROD,1270;PRD0
  Mat Read #CH_PROD,REC_PROD,1282;PRIML$
  Mat Read #CH_PROD,REC_PROD,1294;PRD1
  Mat Read #CH_PROD,REC_PROD,1304;PRD2
  Rem {end READ.PROD.I}
  A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
  B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
  PFU1[0] = EUN[0];PFU1[1] = UN[0]
  PFU1[2] = UN[1];PFU1[3] = UN[2]
  PFU1[4] = EUN[1]
  PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
  PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
  PFU1[11] = UN[2];PFU1[12] = UN[1]
  PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
  PFU1[15] = CTWT
  PFU1[18] = UN[0];PFU1[19] = UN[0]
  PFU2[0] = UNF[0];PFU2[1] = UNF[1]
  PFU2[2] = UNF[2];PFU2[3] = UNF[3]
  PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
End If 
K_INVCOST$ = " ",K_INVCOST$
K_INVCOST$[1,10] = INVNO Using "##########"
K_INVCOST$[11] = L3[2] Using "###"
CHK_INVCOST$ = " ",CHK_INVCOST$
CHK_INVCOST$ = K_INVCOST$[1,13]
fndinvch=0
CHECKCOSTHISTORY: Rem let's check the cost history file
Search #CH_INVCOST,3,1;K_INVCOST$,REC_INVC,E
If E Or K_INVCOST$[1,13] <> CHK_INVCOST$[1,13]
  goto l_4000
End If 
Mat Read #CH_INVCOST,REC_INVC;INVCST$
Mat Read #CH_INVCOST,REC_INVC,22;INVCST
If INVCST[12] <> REC_INVL Goto CHECKCOSTHISTORY
let fndinvch=1
L_4000: Rem TRANSFER BASE TO DISPLAY COSTS
if not(fndinvch) clear INVCST[]
DCOST[0] = INVCST[2]
DCOST[1] = INVCST[0]
DCOST[2] = INVCST[3]
DCOST[3] = INVCST[5]
DCOST[4] = INVCST[1]
DCOST[5] = INVCST[4]
DCOST[6] = INVCST[6]
For X0 = 0 To 6
  GP[X0] = 0
  If L5[2] Let GP[X0] = FNN(((L5[2] - DCOST[X0]) / L5[2]) * 100)
Next X0
GPINVOICE = 0
If L5[2] Let GPINVOICE = FNN(((L5[2] - L5[1]) / L5[2]) * 100)
GLCOST = 0
If L7[4] Let GLCOST = L7[10] / L7[4]
GLGP = 0
If L5[3] Let GLGP = FNN(((L5[3] - L7[10]) / L5[3]) * 100)
For X0 = 0 To 6
  CNVTA = DCOST[X0] \ CNVTU[0] = 0
  CNVTU[1] = PFU1[11] \ CNVTU[2] = 2
  Gosub CONVERT
  DCOST[X0] = AMOUNT
Next X0
CNVTA = L5[1] \ CNVTU[0] = 0
CNVTU[1] = PFU1[11] \ CNTVTU[2] = 2
Gosub CONVERT
LINECOST = AMOUNT
CNVTA = L5[2] \ CNVTU[0] = 0
CNVTU[1] = PFU1[12] \ CNTVTU[2] = 2
Gosub CONVERT
LINEPRICE = AMOUNT
CNVTA = GLCOST \ CNVTU[0] = 0
CNVTU[1] = PFU1[11] \ CNTVTU[2] = 2
Gosub CONVERT
GLCOST = AMOUNT
If PFU1[11] = -1 Let X$ = "HUNDRED WTCWT "
If PFU1[11] = -3 Let X$ = "CATCH WGT LB  "
If PFU1[11] > 0 Read #CH_CCODES,PFU1[11];X$;
If PFU1[12] = -1 Let X1$ = "HUNDRED WTCWT "
If PFU1[12] = -3 Let X1$ = "CATCH WGT LB  "
If PFU1[12] > 0 Read #CH_CCODES,PFU1[12];X1$;
PRT_LINE: Rem print line info
TITLE$ = " ",TITLE$
TITLE$ = A$[140,151] + " " + A$[9,38]
!Window Open @0,5; Size 70,17; Using TITLE$
list$[0]=bsdel$,"COSTLOOKUP",fdel$
List$[1]="PRODID",fdel$,"DESC1",fdel$,"PRICE",fdel$,"COST",FDEL$,"LINEGP",FDEL$,"REBATE CONT",fdel$
TMP$=A$[140,151],fdel$,A$[9,38],fdel$
tmp$=tmp$,LINEPRICE Using PMASK$,"/",X1$[11,14],fdel$
row=2
If COST_LEV[1]
 tmp$=tmp$,LINECOST Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GPINVOICE Using GPMask$,fdel$
Else
	tmp$=tmp$,"",fdel$,"",fdel$ ! no cost/gp
End If 
! use row - tmp$
!tmp$="Rebate Contract # ",fdel$
If INVCST[13]
  tmp$=tmp$,INVCST[13] Using "######",fdel$
Else 
  tmp$=tmp$,"N/A",fdel$
End If 
List$[row]=tmp$ \ row=row+1
List$[row]=esdel$ \ row=row+1
List$[row]=bsdel$,"COSTDATA",fdel$ \ row=row+1
List$[ROW]="NAME",fdel$,"DATA",fdel$,"GP Prct",fdel$
row=row+1
if not(fndinvch) goto NOInvCH
If COST_LEV[0] ! averagePrint @4,4;"..............:";
 Let J0 = 14 \ Gosub L_5200 !\ Print @4,4;D1$;
 tmp$=D1$,fdel$
  tmp$=tmp$,DCOST[0] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[0] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
End If 
If COST_LEV[1] ! load & redi  Print @4,5;"..............:";
 Let J0 = 13 \ Gosub L_5200 !\ Print @4,5;D1$;
 tmp$=D1$,fdel$
  tmp$=tmp$,DCOST[1] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[1] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
   Let J0 = 23 \ Gosub L_5200 ! \ Print @4,6;D1$;
   tmp$=D1$,fdel$
  tmp$=tmp$,DCOST[4] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[4] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
End If 
If COST_LEV[2] ! PO & NET PO ! Print @4,7;"..............:";
 Let J0 = 12 \ Gosub L_5200 ! \ Print @4,7;D1$;
 tmp$=D1$,fdel$
 tmp$=tmp$,DCOST[2] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[2] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
 Let J0 = 24 \ Gosub L_5200 ! \ Print @4,8;D1$;
 tmp$=D1$,fdel$  
  tmp$=tmp$,DCOST[5] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[5] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
End If 
If COST_LEV[3] ! Base & rebate
  tmp$="BASE COST",fdel$
  tmp$=tmp$,DCOST[3] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[3] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
  tmp$="REBATE COST",fdel$
  tmp$=tmp$,DCOST[6] Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GP[6] Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
End If 
NoINVCH: ! no hist
If COST_LEV[0] ! G/L
  tmp$="G/L COST",fdel$
  tmp$=tmp$,GLCOST Using PMASK$,"/",X$[11,14],fdel$
  tmp$=tmp$,GLGP Using GPMask$,fdel$
  List$[row]=tmp$ \ row=row+1
End If 
SELECT_: Rem HIT BOTTOM NOW WHAT
List$[row]=esdel$
call addtostr(e$,rstr$,List$[])
!Print @0,Msc(34) - 1;'CE';"Enter <CR> to exit ";
!Input ""U9$
Goto OUTEND
Return 
L_5200: Rem GET FL
J2 = (J0 - 1) * 10
Read #1,18,J2;D1$;
Return 
NoInvl: ! no history - so return what?
list$[0]=bsdel$,"COSTLOOKUP",fdel$
List$[1]="PRODID",fdel$,"DESC1",fdel$,"PRICE",fdel$,"COST",FDEL$,"LINEGP",FDEL$,"REBATE CONT",fdel$
List$[2]="NO DATA",fdel$,"NO DATA FOUND IN COST HISTORY FILE",fdel$,"",fdel$,"",FDEL$,"",FDEL$,"",FDEL$
List$[3]=esdel$
row=4
List$[row]=bsdel$,"COSTDATA",fdel$ \ row=row+1
List$[ROW]="NAME",fdel$,"DATA",fdel$,"GP Prct",fdel$
row=row+1
goto SELECT_
!
OUTEND: Rem
Try close #CH_INVH Else Rem
Try close #CH_INVL Else Rem
Try close #CH_CCODES Else Rem
Try close #CH_PROD Else Rem
Try close #CH_INVCOST Else Rem
End 
ERRMESSAGE:  Return 
Rem {begin src/inc/RTN.CONVERTI.I}
CONVERT: Rem "convert quantities, costs & prices
!Mat Read #1,115,40;Q0;
!Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
!Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
!Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
!Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
!Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
If CNVTU[2] = 3 Goto Convend ! Gosub DISPVALIDUNITS \ Goto CONVEND
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] ! "qty units same
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[0] = -2 Or CNVTU[1] = -2 ! "lot price
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[2] ! "all but valid conversion test
  If Not(CNVTA) ! "nothing there
    AMOUNT = 0
    Goto CONVEND
  End If 
End If 
Gosub DOCONVERT
If CNVTU[2] <> 0 And CNVTU[2] <> 3 ! "conversion types
  If FLAG Let E = FLAG \ Gosub ERR_SEARCH
End If 
CONVEND: Rem "go back
Return 
DOCONVERT: Rem "go for it
CONVFLAG = 0;SR = 8;SC = 12
If CNVTU[2] = 5 ! "no rounding of quantity
  CONVFLAG = 1
  CNVTU[2] = 1
End If 
If CNVTU[2] = 6 ! "no rounding of price/cost
  CONVFLAG = 1
  CNVTU[2] = 2
End If 
On CNVTU[2] + 1 Goto CHECKVALID1,DOCONVERT1,DOCONVERT1
E = 0 \ Gosub ERR_SEARCH
CHECKVALID1: Rem "see if valid conversion
For X1[1] = 0 To 1
  If CNVTU[X1[1]] > 0
    For X1[2] = 0 To 7
      If CNVTU[X1[1]] = PFU1[X1[2]] Goto VALID
    Next X1[2]
    FLAG = 1 \ Return 
  End If 
VALID: Rem "o.k.
Next X1[1]
FLAG = 0
Return 
DOCONVERT1: Rem "convert cost/price/quantity
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] <> 0 ! "not base
    If CNVTU[X1[1]] > 0 ! "not cwt
      For CUNIT = 0 To 7
        If PFU1[CUNIT] = CNVTU[X1[1]] Goto CONVVALID
      Next CUNIT
      FLAG = 0 \ Return 
CONVVALID: Rem "continue on
      If Not(CUNIT) Goto LOOPBACK
    End If 
    If CNVTU[2] = 2 Let CMODE = - CMODE
    If CNVTU[X1[1]] = -1 ! "cwt calculation
      If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
      If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Else 
      If CNVTU[X1[1]] = -3 ! "catch weight
        If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
        If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
      Else 
        If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
        If PFU2[CUNIT - 1] And CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
      End If 
    End If 
  End If 
LOOPBACK: Rem "get next x1[1]
Next X1[1]
If CNVTU[2] = 1 And Not(CONVFLAG) ! "convert quantity
  If CNVTU[1] And CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
  If Fra(AMOUNT) And (Not(CNVTU[1]) Or CNVTU[1] = PFU1[0]) Let AMOUNT = FNU(AMOUNT)
End If 
If CNVTU[2] = 2 And CNVTU[1] ! "cost/price (not base) to round
  If Not(CONVFLAG) ! "round away
    If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
    If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
    If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
  End If 
End If 
FLAG = 0
Return 
ERR_SEARCH: Rem
	ENUM = E ;ELINE = Spc(16);CTERR = 0
	If E = 5 Let CTERR = Err(8)
	msg$ = "RETURN STATUS",(E + (CTERR * .001))
	msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
	E$=msg$
	error 11000
End
Err_trap:
!include "src/callmainerrnet.inc"
include "src/callmainerrnet_call.inc"
End