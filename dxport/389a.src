! >>> Program 389a
!
! description Purchasing Receipts to Stock History (Stocked Items)
!
! loadsave -w -n 100,10 -o prog/dxport/389a.dl4 src/389a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR 16, 2004  16:46:08
Rem /w/papermaster/r2002//usr/acct/txc/work/r2002/po/po389a.src (univ2) [txc] {19870}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem BEDIT Version: 1.9 OBJECT CODE     Created: OCT  8, 1998  10:25:27
Rem /usr/acct/xindist/src/po389a.cott.s (univ2) [dave] {28294}
Rem  Copyright (c) 1998 Universal Business Systems, Inc.
!
include "src/inc/fileprod.inc"

Declare Intrinsic Sub DateToJulian,InpBuf,JulianToDate,String,Time
! - Option Default Dialect IRIS1
Com 1%,COST,UNIT
Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
External Lib "libprodconv.lib"             
Declare External Function ConvProdAmount 

Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim 1%,LN,LT1[3],PRONTO,CH_PROD,CH_INVTRNS,CH_CCODES,CH_CNTRL,CH_SORT
Dim 1%,CH_POHEAD,CH_POLINE,STAT,CH_VEND,L1[5],ctlc
Dim 1%,DPORT[1024],SORT,SPOKE,SORTPO,PAGEBREAK,BUYER,H4[3]
Dim 2%,B[24],UNIT$[4],LT3[1],POLINENO
Dim 2%,D1,D2,W1,CURDAT,OFFSET,Q0[1]
Dim 2%,H0[5],H3[4],C1[6],L2[2]
Dim 3%,LT2[5],TOTEXT,PTTOTEXT,REC_PROD,REC_POHEAD,REC_POLINE,R3
Dim 3%,J,X3,T9[20],REC_POL,Q1[9],L3[6],TOTQTY,gltotqty[99],gltotcost[99]
Dim 3%,POTOTQTY,BUYERTOTQTY,GRANDTOTQTY,POTOTEXT,BUYERTOTEXT,GRANDTOTEXT
Dim K1$[50],K2$[20],K3$[20],T9$[26],KPOHEAD$[8],KPROD$[12],KPOLINE$[16],KPOL$[9]
Dim LT0$[56],LT1$[6],A$[156],T1$[12],T2$[12],PREVCODE$[50],DATE$[10],WHEEL$[4]
Dim UM$[15],SCRATCH$[80],J8$[8],TC$[1],PRONTO$[1],CONAM$[30],DPORTS$[80],Z$[20]
Dim LINE_$[131],MASK$[11],PREVPO$[50],U9$[131],H$[82],V$[30],L1$[120],PREVBUYER$[50]
Dim SDATE$[8],EDATE$[8],POL1$[120],A1$[10],scratch2$[80]
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim tmp$[600],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]

Dim PR. as prod

Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
REPORT_PROMPT: Rem
X$ = " ",X$
! - Print 'CS';
! - Print @0,5;"Print:  1> STOCK ITEM  or ";
! - Print @0,6;"        2> NON STOCK ITEM  (<1>/2) ";
! - Input Len 16385;""X$
! - Call String(1,X$)
! - If X$ = "2" Chain "po389b"
! - If X$ <> "1" And X$ <> "2" And X$ <> "" Goto REPORT_PROMPT
For J = 2 To 7
	Read JA1
	If Not(JA1) Goto L_830
	Read #1,88,JA1;J$;
	Ropen #J,J$
L_830: Next J
Data "2512","1792","1728","2416","2432","2400"

ROPEN #8,"cntrl/USERCNTRL"
maxrec=chf(8)
!OPENING TO FIND USER ACCESS CODE(& DESCRIPTION) TO RF RELATED TRANSACTIONS

CH_CNTRL = 1
CH_INVTRNS = 2
CH_PROD = 3
CH_CCODES = 4
CH_POHEAD = 5
CH_POLINE = 6
CH_VEND = 7
CH_USERCNTRL=8
CH_SORT = 9
SORT = 0
! - Window On 
PREVCODE$ = " ",PREVCODE$
Mat Read #1,0,100;J8$;
Read #1,3;CONAM$;
If Err 0 Let J8 = Spc(8)
J8 = 0 \ PGLEN = Chf(0) 
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
PGLEN = 60 \ If JA8 Let PGLEN = 18
LN = PGLEN
WHEEL$ = "|/-"
Call String(4,220,WHEEL$[4])
LINE_$ = "-",LINE_$;U9$ = "=",U9$
Mat Read #1,115,40;Q0;
MASK$ = "#",MASK$
If Q0[1]
	SCR = Len(MASK$) - Q0[1]
	MASK$[SCR,SCR] = "."
End If 
CURDAT=Tim(4) ! send mmddyy!
tmp$=curdat using "&&&&&&"
x$=tmp$[5,6],tmp$[1,4] ! to yymmdd
! - X = Int(Tim(4) / 100)
! - CURDAT = ((Tim(4) - X * 100) * 10000) + X
!
! dx add xport reporting code
DXSetup: !

Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
	!<section>
	tmp$ = bsdel$,"389a",fdel$,rdel$
	Call addtostr(e$,rstr$,tmp$)
End If 
!
!call dxsave(0,"tmp/389asv.txt!")
!  dx add xport reporting code
call dxget("costs",tmp$) \ if tmp$="" let COST=0 else COST=1 ! print costs
call dxget("um",tmp$) \ UnitType=tmp$ ! unit type for report
call dxget("begprod",K2$) \ K2$=UCase$(K2$),Blank$ ! starting product
call dxget("endprod",K3$) \ K3$=UCase$(K3$),EndParam$ ! ending product
call dxget("begdate",tmp$) \ if tmp$="" let D1=CURDAT else D1=tmp$ ! starting date
call dxget("enddate",tmp$) \ if tmp$="" let D2=CURDAT else D2=tmp$ ! ending date
call dxget("whse",tmp$) \ W1=tmp$ ! warehouse
call dxget("receipts",TC$) ! receipt type
call dxget("sortby",tmp$) \ if tmp$="" let SortPO=0 else SortPO=1 ! sort by
if sortpo
	call dxget("popagebreak", tmp$) \ if tmp$="" popb=0 else popb=1
else
	popb=0
end if
call dxget("pronto",PRONTO$) ! pronto  p=pronto  n=normal  b=both
!  dx end
!
! unit of measure type
UM$ = " ",UM$
If UnitType = 1 Let UM$ = "STOCK U/M "
If UnitType = 2 Let UM$ = "SELL U/M "
If UnitType = 3 Let UM$ = "PURCH. U/M "
If UnitType = 4 Let UM$ = "COSTING U/M"
If UnitType = 5 Let UM$ = "PRICING U/M"
!
! product section
if K3$<K2$ let e$="Invalid ending product, must be >= starting product!" \ error 10000
!
! starting date
tmp$ = D1 Using "&&&&&&" \ DATE$=tmp$[5,6],tmp$[1,4]
Call DateToJulian(1,DATE$,DATE$,E)
If E let e$="Invalid starting date!" \ error 10000
D1 = DATE$
!
! ending date
tmp$ = D2 Using "&&&&&&" \ DATE$=tmp$[5,6],tmp$[1,4]
Call DateToJulian(1,DATE$,DATE$,E)
If E let e$="Invalid ending date!" \ error 10000
D2 = DATE$
if D2<D1 let e$="Invalid ending date, must be >= to the starting date!" \ error 10000
!
! warehouse
If W1<0 Or W1>99 let e$="Invalid warehouse, must be between 0 and 99!" \ error 10000
!
! sort by
if TC$="P" ! po receipts only
	if SortPO=1 let PAGEBREAK=1 else PAGEBREAK=0
else
	SortPO=0 \ PageBreak=0
endif
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
	Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
	! try call dxclose() else rem
End If 
!
! - ASK_QUEST: Rem
! - Print 'CS';
! - Print @0,0;"PO389A";@20,0;"  RECEIPTS TO STOCK TRANSACTIONS"
! - Print @1,2;" 1> Print Costs (<Y>/N) : ";
! - Print @10,4;" 1: STOCK      3: PURCHASING     5: PRICING "
! - Print @10,5;" 2: SELL       4: COST"
! - Print @1,6;" 2> Unit to use on the report :";
! - Print @1,8;" 3> Starting Item Code, <CR> for First : ";
! - Print @1,9;" 4> Ending   Item Code, <CR> for Last  : ";
! - Print @1,10;" 5> Starting Date (MMDDYY) : ";
! - Print @1,11;" 6> Ending   Date (MMDDYY) : ";
! - Print @0,12;'CL';
! - Print @1,13;" 7> Warehouse #, <CR> for All : ";
! - Print @1,14;" 8> P: P.O. receipts,  M: misc receipts, or  B: both : ";
! - Print @1,16;" 9> P: pronto accepted,  N: normal accepted, or  B: both : ";
! - For PROMPT = 1 To 9 \ Gosub PROMPT_SUBS \ Next PROMPT
! - Goto PROCEED_QUEST
! - PROMPT_SUBS: Rem
! - Print @0,23;'CL';
! - If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On PROMPT Gosub COST_QUEST,UNIT_QUEST,PROD_QUEST_1,PROD_QUEST_2
! - On PROMPT - 4 Gosub DATE1_QUEST,DATE2_QUEST,WHSE_QUEST,TC_QUEST
! - On PROMPT - 8 Gosub PRONTO_QUEST
! - If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
! - COST_QUEST: Rem
! - J1 = 1
! - J0$ = "6 00012902"
! - Gosub ISINPUT
! - COST = J1
! - Return 
! - UNIT_QUEST: Rem
! - J1 = 1
! - J0$ = "3 00013406"
! - Gosub ISINPUT
! - UNIT = J1
! - If UNIT < 1 Or UNIT > 5 Goto UNIT_QUEST
! - UM$ = " ",UM$
! - If UNIT = 1 Let UM$ = "STOCK U/M "
! - If UNIT = 2 Let UM$ = "SELL U/M "
! - If UNIT = 3 Let UM$ = "PURCH. U/M "
! - If UNIT = 4 Let UM$ = "COSTING U/M"
! - If UNIT = 5 Let UM$ = "PRICING U/M"
! - Return 
! - PROD_QUEST_1: Rem
! - J1$ = "            "
! - J0$ = "2 00124208"
! - Gosub ISINPUT
! - K2$ = J$
! - PROD_CHECK = 0
! - Gosub PROD_QUEST_CHECK
! - If PROD_CHECK Goto PROD_QUEST_1
! - Return 
! - PROD_QUEST_2: Rem
! - J1$ = "zzzzzzzzzzzz"
! - J0$ = "2 00124209"
! - Gosub ISINPUT
! - K3$ = J$
! - PROD_CHECK = 0
! - Gosub PROD_QUEST_CHECK
! - If PROD_CHECK Goto PROD_QUEST_2
! - Return 
! - PROD_QUEST_CHECK: Rem
! - If K3$ = "" Let K3$ = "zzzzzzzzzzzz"
! - If K2$ > K3$
! -   Print @0,23;"INVALID RANGE ! ";'CE';
! -   Signal 3,15
! -   PROD_CHECK = 1
! - End If 
! - Return 
! - DATE1_QUEST: Rem
! - D1 = 0
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00063010"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto DATE1_QUEST
! - D1 = DATE$
! - DATE_CHECK = 0
! - Gosub DATE_QUEST_CHECK
! - If DATE_CHECK Goto DATE1_QUEST
! - Return 
! - DATE2_QUEST: Rem
! - D2 = 0
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00063011"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto DATE2_QUEST
! - D2 = DATE$
! - DATE_CHECK = 0
! - Gosub DATE_QUEST_CHECK
! - If DATE_CHECK Goto DATE2_QUEST
! - Return 
! - DATE_QUEST_CHECK: Rem
! - If D2 And D1 > D2
! -   Print @0,23;"INVALID RANGE ! ";'CE';
! -   Signal 3,15
! -   DATE_CHECK = 1 \ Return 
! - End If 
! - Return 
! - WHSE_QUEST: Rem
! - J1 = 0
! - J1$ = ""
! - J0$ = "3 00023313"
! - Gosub ISINPUT
! - W1 = J1
! - Return 
! - TC_QUEST: Rem
! - Print @1,15;'CL';
! - J1$ = "P"
! - J0$ = "2 00015614"
! - Gosub ISINPUT
! - If J$ <> "P" And J$ <> "B" And J$ <> "M"
! -   Print 'RB';
! -   Goto TC_QUEST
! - End If 
! - TC$ = J$
! - If TC$ = "P"
! -   Print @1,15;"    Sort by BUYER/PO (<Y>/N) ? "
! -   J1 = 1
! -   J0$ = "6 00013315"
! -   Gosub ISINPUT
! -   SORTPO = J1
! -   If SORTPO
! -     PAGEBREAK = 1
! -   Else 
! -     PAGEBREAK = 0
! -   End If 
! - Else 
! -   SORTPO = 0;PAGEBREAK = 0
! - End If 
! - Return 
! - PRONTO_QUEST: Rem
! - J1$ = "B"
! - J0$ = "2 00016016"
! - Gosub ISINPUT
! - If J$ <> "P" And J$ <> "B" And J$ <> "N"
! -   Print 'RB';
! -   Goto PRONTO_QUEST
! - End If 
! - PRONTO$ = J$
! - Return 
! - PROCEED_QUEST: Rem
! - Print @0,23;'CL';"ENTER #:Field to edit,  P: print,  R: reselect all,  E: exit ";
! - Input ""SCRATCH$
! - PROMPT = SCRATCH$
! - If PROMPT Gosub PROMPT_SUBS \ Goto PROCEED_QUEST
! - If SCRATCH$ = "E" Goto OUTEND
! - If SCRATCH$ = "R" Goto ASK_QUEST
! - If SCRATCH$ <> "P" Print 'RB'; \ Goto PROCEED_QUEST
!
! *** Main Section
T1$ = K2$ \ T2$ = K3$
K1$ = D1 Using "&&&&&"
K3$ = D2 Using "&&&&&"
! - MAIN: Rem
! - If J8 Print 'CS';
! - If Err 0 Gosub ERR_ESCAPE
If SORT Or SORTPO
	Gosub DO_SORT
	CH = CH_SORT
	K1$ = " ",K1$
Else 
	CH = CH_INVTRNS
End If 
!
if J8 ! dx xml headings
	!
	if SORTPO ! sort by buyer / po
		tmp$="BUYER",fdel$,"PO #",fdel$,"DATE",fdel$
		tmp$=tmp$,"VENDOR",fdel$,"VENDOR NAME",fdel$
		tmp$=tmp$,"VENDOR REF #",fdel$,"TYPE",fdel$
		tmp$=tmp$,"LINE",fdel$,"PRODUCT CODE",fdel$
		tmp$=tmp$,"DESCRIPTION",fdel$,"DESCRIPTION 2",fdel$
		tmp$=tmp$,"VENDOR ITEM #",fdel$,"PACK",fdel$
		tmp$=tmp$,"ORDERED QUANTITY",fdel$,"ORDERED U/M",fdel$
		tmp$=tmp$,"RECEIVED QUANTITY",fdel$,"DUE QUANTITY",fdel$
		if COST let tmp$=tmp$,"EXT COST",fdel$
	else
		tmp$="TRANS#",fdel$,"LOT CODE",fdel$,"ITEM CODE",fdel$
		tmp$=tmp$,"DESCRIPTION",fdel$,"DESCRIPTION 2",fdel$
		tmp$=tmp$,"SOURCE/DEST",fdel$,"COMMENT",fdel$,"TC",fdel$
		tmp$=tmp$,"TYPE",fdel$,"DATE",fdel$,"LOCATION",fdel$
		tmp$=tmp$,"WH",fdel$,"PORT",fdel$,"PRONTO",fdel$
		tmp$=tmp$,"QUANTITY",fdel$,"QTY U/M",fdel$
		if COST
			tmp$=tmp$,"PO COST",fdel$,"PO U/M",fdel$
			tmp$=tmp$,"AVG COST",fdel$,"AVG U/M",fdel$
			tmp$=tmp$,"EXTENDED PO",fdel$
		endif
	endif
	!
	call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
If SORT And SORTPO Let OFFSET = SORT * 12
If SORT And Not(SORTPO) Let OFFSET = 6
If Not(SORT) And SORTPO Let OFFSET = 14
If Not(SORT) And Not(SORTPO) Let OFFSET = 0
If SORTPO Let PREVPO$ = "" \ PREVBUYER$ = "" \ FIRSTTIME = 1

! - Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
MAIN_LOOP: Rem
	Search #CH,3,1;K1$,R1,E
	If E Or K1$[1 + OFFSET,(Len(K3$)) + OFFSET] > K3$ Goto DONE
	PREVCODE$[1,5] = K1$[1 + OFFSET,5 + OFFSET]
	If SORTPO
		didBreak = 0
		If PREVBUYER$[1,3] <> K1$[1,3]
			If Not(FIRSTTIME) Gosub PRINT_PO_TOTAL
			If Not(FIRSTTIME) Gosub PRINT_BUYER_TOTAL
			PREVBUYER$[1,3] = K1$[1,3]
			If PAGEBREAK
				Let LN = PGLEN
				didBreak = 1
			end if
			Gosub SORTPO_HEADER
			FIRSTTIME = 1
		End If 
		If PREVPO$[1,6] <> K1$[4,9]
			If Not(FIRSTTIME) Gosub PRINT_PO_TOTAL
			PREVPO$[1,6] = K1$[4,9]
			if popb and not(didBreak)
				let LN = PGLEN
				gosub SORTPO_HEADER
			end if
			NEED_SUBHEADER = 1
			Gosub SUB_HEADER
			NEED_SUBHEADER = 0
		End If 
	End If 
	If SORTPO Let FIRSTTIME = 0
	LT2[2] = 0
	If R1
		Mat Read #CH_INVTRNS,R1,0;LT0$;
		Mat Read #CH_INVTRNS,R1,56;LT1;
		Mat Read #CH_INVTRNS,R1,64;LT2;
		Mat Read #CH_INVTRNS,R1,100;LT1$;
		Mat Read #CH_INVTRNS,R1,106;LT3;
		Mat Read #CH_INVTRNS,R1,114;PRONTO;
		gosub get_access_code:
	End If 
	if sortpo
		lt2[2]=k1$[30]   !! accumlated in sort
	endif
	If SORTPO Goto PROCESS_SORTPO
	If Not(SORT) And Not(SORTPO)
		If LT0$[1,12] < T1$[1,12] Goto MAIN_LOOP
		If LT0$[1,12] > T2$[1,12] Goto MAIN_LOOP
		If W1 If W1 <> LT1[1] Goto MAIN_LOOP
		If PRONTO$ = "P" And Not(PRONTO) Goto MAIN_LOOP
		If PRONTO$ = "N" And PRONTO Goto MAIN_LOOP
		If LT1[0] <> 1 And LT1[0] <> 7 And LT1[0] <> 30 Goto MAIN_LOOP
		If TC$ = "P" And LT1[0] <> 1 Goto MAIN_LOOP
		If TC$ = "M" And LT1[0] = 1 Goto MAIN_LOOP
		! If DPORT And DPORT[LT1[2]] = 0 Goto MAIN_LOOP
		IF DPORT AND LT1[2]>0
			IF DPORT[LT1[2]]=0 GOTO MAIN_LOOP:
		ENDIF
	End If 
	UNIT$ = "    "
	A$ = "NOT FOUND ",A$
	J2$ = LT0$[1,12]
	Search #3,2,1;J2$,REC_PROD,E 
	If E Goto L_2100
	read record #ch_prod,rec_prod,0;pr.
	Mat Read #CH_PROD,REC_PROD,0;A$
	Mat Read #CH_PROD,REC_PROD,156;B
	Mat Read #CH_PROD,REC_PROD,256;A
	Mat Read #CH_PROD,REC_PROD,460;A1
	Mat Read #CH_PROD,REC_PROD,508;A2
	Mat Read #CH_PROD,REC_PROD,512;PFU1
	Mat Read #CH_PROD,REC_PROD,554;PFU2
	Mat Read #CH_PROD,REC_PROD,596;PRPARC
	Mat Read #CH_PROD,REC_PROD,620;LM
	Mat Read #CH_PROD,REC_PROD,624;PR_PO
	Read #CH_PROD,REC_PROD,630;LLC
	Mat Read #CH_PROD,REC_PROD,632;PSN$
	Mat Read #CH_PROD,REC_PROD,652;PSN
	Mat Read #CH_PROD,REC_PROD,660;U2
	Mat Read #CH_PROD,REC_PROD,670;U4
	Read #CH_PROD,REC_PROD,678;U3
	Mat Read #CH_PROD,REC_PROD,684;U3$
	Mat Read #CH_PROD,REC_PROD,744;HZ$
	Mat Read #CH_PROD,REC_PROD,834;A3
	Mat Read #CH_PROD,REC_PROD,846;PFTB
	Read #CH_PROD,REC_PROD,854;UPCT
	Mat Read #CH_PROD,REC_PROD,856;C1$
	Mat Read #CH_PROD,REC_PROD,894;PR_C4
	Read #CH_PROD,REC_PROD,938;PF_LOAD2
	Mat Read #CH_PROD,REC_PROD,944;PR_A2$
	Mat Read #CH_PROD,REC_PROD,974;PFCO
	Mat Read #CH_PROD,REC_PROD,990;PLV
	Mat Read #CH_PROD,REC_PROD,1002;PLC
	Mat Read #CH_PROD,REC_PROD,1018;PFN
	Gosub DO_CONVERSIONS
	L_2100: Rem.
	If LT1 >= 15 Let LT2[2] = 0 - LT2[2]
	J = LT1 - 1
	Read #1,108,(J * 15);J3$[1,15];
	If Not(SORTPO) And Not(SORT) Gosub HEADER
	PROCESS_SORTPO: Rem
	If SORTPO
		Gosub SUB_HEADER
		Gosub SORTPO_PRINT_LINE
		NEED_SUBHEADER = 0
	Else 
		Gosub PRINT_LINE
	End If 
	! - Signal 2,J0,A,B \ If J0 <> -1 Gosub L_9615
Goto MAIN_LOOP
!
DO_SORT: Rem
K1$ = " ",K1$
SORTCLEAR_LOOP: Rem
	Search #CH_SORT,5,1;K1$,R1,E
If Not(E) Goto SORTCLEAR_LOOP
!
! - Print @0,23;'CL';"Sorting...";'K0';
K1$ = " ",K1$
K1$ = D1 Using "&&&&&"
SORT_LOOP: Rem
	Search #CH_INVTRNS,3,1;K1$,R1,E
	X2 = K1$[1,5]
	! not error and not beyond end date
	! If Not(E) And K1$[1,Len(K3$)] <= K3$ And X2 <= D2 GOTO END_SORT_LOOP
	If E OR K1$[1,Len(K3$)] > K3$ or X2 > D2 GOTO END_SORT_LOOP
	SPOKE = SPOKE + 1
	If SPOKE > 40 Let SPOKE = 1
	! -  If Not(Fra(SPOKE / 10))
	! -    SCR = Int(SPOKE / 10)
	! -    Print @12,23;WHEEL$[SCR,SCR];
	! -  End If 
	PREVCODE$[1,5] = K1$[1,5]
	Mat Read #CH_INVTRNS,R1,0;LT0$;
	Mat Read #CH_INVTRNS,R1,64;LT2;
	Mat Read #CH_INVTRNS,R1,56;LT1;
	Mat Read #CH_INVTRNS,R1,100;LT1$;
	Mat Read #CH_INVTRNS,R1,106;LT3;
	Mat Read #CH_INVTRNS,R1,114;PRONTO;
	If LT0$[1,12] < T1$[1,12] Goto SORT_LOOP
	If LT0$[1,12] > T2$[1,12] Goto SORT_LOOP
	If W1 If W1 <> LT1[1] Goto SORT_LOOP
	If PRONTO$ = "P" And Not(PRONTO) Goto SORT_LOOP
	If PRONTO$ = "N" And PRONTO Goto SORT_LOOP
	If LT1[0] <> 1 And LT1[0] <> 7 And LT1[0] <> 30 Goto SORT_LOOP
	If TC$ = "P" And LT1[0] <> 1 Goto SORT_LOOP
	If TC$ = "M" And LT1[0] = 1 Goto SORT_LOOP
	gosub get_access_code:
	SCRATCH$ = " ",SCRATCH$
	If SORT ! ? never gets set in this module
		If Not(SORTPO)
			SCRATCH$ = LT1[2] Using "######"
		Else 
			SCRATCH$ = LT1[2] Using "######"
			SCRATCH$ = SCRATCH$ + LT0$[29,34]
		End If 
		GOTO INSERT_IT
	END IF
	! "SORT" not set (NOTE SORT IS NEVER SET IN THIS MODULE...)
	if not(SORTPO) GOTO INSERT_IT
	! "SORTPO" set
	gosub parseponum: ! need po num BEFORE BUYER!
	Gosub GET_BUYER
	KPOLINE$ = " ",KPOLINE$
	! KPOLINE$[1,6] = LT0$[29,34]
	foundLine = 0 ! have we found the po line with the product?
	IF POLINENO<>0
		LET KPOLINE$=""
		LET KPOLINE$[1,6]=PONUM USING "######"
		LET KPOLINE$[7]=POLINENO USING "###"
		SEARCH #CH_POLINE,2,1;KPOLINE$,REC_POLINE,E
		IF NOT(E)
			MAT READ #CH_POLINE,REC_POLINE,0;L1;
			MAT READ #CH_POLINE,REC_POLINE,66;POL1$
			IF LT0$[1,12] = POL1$[81,92] GOTO SETSORTKEY:
		ENDIF
	ENDIF
	LET KPOLINE$[1,6]=ponum using "######"
	NEXT_POLINE: ! loop through all PO lines associated with this INVTRANS
		Search #CH_POLINE,3,1;KPOLINE$,REC_POLINE,E
		If E Goto SORT_LOOP
		!If KPOLINE$[1,6] <> LT0$[29,34] Goto SORT_LOOP
		IF val(KPOLINE$[1,6])<>ponum GOTO SORT_LOOP:
		Mat Read #CH_POLINE,REC_POLINE,0;L1;
		Mat Read #CH_POLINE,REC_POLINE,66;POL1$;
		! IF closed and not for product in transaction
		If L1[0] = 3 And LT0$[1,12] <> POL1$[81,92] Goto NEXT_POLINE
		SETSORTKEY: ! SET SORT KEY FOR 
		!RECNO = R1
		!If LT0$[1,12] <> POL1$[81,92] Let RECNO = 0
		SCRATCH$ = " ",SCRATCH$
		SCRATCH$ = BUYER Using "###" ! 1,3
		! SCRATCH$ = SCRATCH$ + LT0$[29,34]
		SCRATCH$=SCRATCH$+kpoline$[1,6] ! 4,9
		SCRATCH$ = SCRATCH$ + KPOLINE$[7,9] ! 10,12
		SCRATCH$ = SCRATCH$ + STAT Using "##" ! 13,14
		scratch2$=scratch$
		if LT0$[1,12] = POL1$[81,92] ! the same product
			! if we've already added this invtrans
			! amount, we don't want to add it again
			! in the event the product is on the
			! PO more than 1 time
			if foundLine ! already added for this product on more than once
				tmpqty=0
			else
				tmpqty=lt2[2]
				foundLine = 1
			end if
		else ! not the same product - don't add trans qty
			tmpqty=0
		end if
		! see if key for this buyer/po/line/status exists
		search #ch_sort,3,1;scratch2$,recno,e
		if e>2 Let e$ = "syserrorfile 389a sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K1$ \ error 10000
		if e=0 and scratch2$[1,14]=scratch$[1,14]  !! dup key
			! we already have a trans for this po, this line
			! add quantity to new key value, delete old key
			tmpqty2=scratch2$[30]
			tmpqty=tmpqty+tmpqty2
			search #ch_sort,5,1;scratch2$,recno,e
			if e Let e$ = "syserrorfile 389a sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K1$ \ error 10000
		endif
		LET RECNO=R1                           
		! no product match, blank out inv trans record new for insert
		! to sort file
		IF LT0$[1,12]<>POL1$[81,92] LET RECNO=0
		scratch$=scratch$+k1$
		scratch$=scratch$+tmpqty using "#########"
		! add new key
		Search #CH_SORT,4,1;SCRATCH$,RECNO,E
		If E
			Let e$ = "syserrorfile 389a sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K1$ \ error 10000
			!If LT0$[1,12] = POL1$[81,92]
			!  Search #CH_SORT,5,1;SCRATCH$,RECNO,E
			!  SCRATCH$ = " ",SCRATCH$
			!  SCRATCH$ = BUYER Using "###"
			!  SCRATCH$ = SCRATCH$ + LT0$[29,34]
			!  SCRATCH$ = SCRATCH$ + KPOLINE$[7,9]
			!  SCRATCH$ = SCRATCH$ + STAT Using "##"
			!  RECNO = R1
			!  Search #CH_SORT,4,1;SCRATCH$,RECNO,E
			!  If E Goto NEXT_POLINE
			!End If 
		End If 
	Goto NEXT_POLINE

	INSERT_IT: Rem
	SCRATCH$ = SCRATCH$ + K1$
	Search #CH_SORT,4,1;SCRATCH$,R1,E
	If E Goto SORT_LOOP
	Goto SORT_LOOP
	!
END_SORT_LOOP: 
! - Print 'K2';
Return 
!
get_access_code: rem get access code from usercntrl
	LET A1$=" ",A1$
	if lt1[2]<maxrec-1 and lt1[2]>0
		mat read #8,lt1[2],260;a1$;
	else
		let a1$=" ",a1$
		let a1$="NOT VALID "
	endif
	if lt1[2]=-1       !"super user
		let a1$=" ",a1$
		let a1$="SYSTEM    "
	endif
return

parseponum: !
	search lt0$[25,36],"PO#",e
	if E<>0
		let ponum=lt0$[27+e]
		let polineno=0
		return
	else
		if lt0$[25,26]="PO" and lt0$[33,33]="-"
			let ponum=lt0$[27,32] ! and e=0
			let polineno=lt0$[34,36] 
			if polineno<0 or polineno>999
				let polineno=0
			endif
			return
		else
			ponum=0 
			polineno=0
			 return
		endif
	endif


return
!
GET_BUYER: Rem get buyer from pohead
	if ponum=0 then buyer=0 \ return
	KPOHEAD$ = " ",KPOHEAD$
	PASS = 0
	For STATUS = 1 To 7
		KPOHEAD$[1,2] = STATUS Using "##"
		! KPOHEAD$[3,8] = LT0$[29,34]
		LET KPOHEAD$[3,8]=ponum using "######"
		Search #CH_POHEAD,2,1;KPOHEAD$,REC_POHEAD,E
		If Not(E)
			PASS = 1
			STAT = STATUS
			STATUS = 7
		End If 
	Next STATUS
	If PASS
		Read #CH_POHEAD,REC_POHEAD,342;BUYER;
	Else 
		BUYER = 0
	End If 
Return 
!
GET_POLINE_NUMBER: Rem get po line #
	KPROD$ = " ",KPROD$;KPOLINE$ = " ",KPOLINE$
	KPROD$[1,12] = LT0$[1,12]
	Search #3,2,1;KPROD$,R3,E
	If Not(E)
		
		! KPOLINE$[7,12] = LT0$[29,34]
		gosub parseponum:
		if polineno<>0
			let kpoline$[1,6]=ponum using "######"
			let kpoline$[7,9]=polineno using "###"
			search #ch_poline,2,1;kpoline$,rec_poline,e
			if not(e)
				mat read #ch_poline,rec_poline,24;L3;
				IF L3[1]=R3 RETURN
			ENDIF
			LET POLINENO=0
		ENDIF
		KPOLINE$[1,6] = R3 Using "######"
		LET KPOLINE$[7,12]=ponum using "######"

		Search #CH_POLINE,3,2;KPOLINE$,REC_POLINE,E
		! If Not(E) And KPOLINE$[7,12] = LT0$[29,34]
		IF NOT(E) AND val(KPOLINE$[7,12])=ponum
			POLINENO = KPOLINE$[13,15]
		Else 
			POLINENO = 0
		End If 
	Else 
		POLINENO = 0
	End If 
Return 
!
DO_CONVERSIONS: Rem CONVERSIONS HERE
	Mat UWORK = Zer
	UWORK[0] = 0
	UN[0] = 0
	UN[0] = PFU1[UnitType + 7]
	CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
	CNVTA = LT2[2] \ Gosub CONVERT
	LT2[2] = AMOUNT
	CNVTU[2] = 2;CNVTA = LT2[5]
	If COST
		Gosub CONVERT \ UWORK[0] = AMOUNT
		CNVTU[2] = 2;CNVTA = LT2[3]
		Gosub CONVERT \ UWORK[1] = AMOUNT
		CNVTU[2] = 2;CNVTA = LT2[4]
		Gosub CONVERT \ UWORK[2] = AMOUNT
	End If 
	CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
	CNVTA = A[0] \ Gosub CONVERT
	A[0] = AMOUNT
	UNIT$ = "    "
	If UN[0] > 0 Read #CH_CCODES,UN[0],10;UNIT$;
Return 
!
POQTY_CONVERSION: Rem "Convert
	Mat UWORK = Zer
	UWORK[0] = 0
	UN[0] = 0
	UN[0] = PFU1[UnitType + 7]
	CNVTU[0] = 0;CNVTU[1] = UN[0]
	If COST
		!! CNVTU[2] = 2;CNVTA = L2[0]
		CNVTU[2] = 6;CNVTA = L2[0]
		Gosub CONVERT \ UWORK[1] = AMOUNT
	End If 
	CNVTA = L2[0] \ CNVTU[0] = 0 ! \ CNVTU[1] = L1[5] \ CNVTU[2] = 2
	CNVTU[2] = 2
	Gosub CONVERT \ Q1[0] = AMOUNT
	CNVTA = L3[2] \ CNVTU[0] = 0 ! \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
	CNVTU[2] = 1
	Gosub CONVERT \ Q1[1] = AMOUNT
	CNVTA = LT2[2] \ CNVTU[0] = 0 ! \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
	CNVTU[2] = 1
	Gosub CONVERT \ Q1[2] = AMOUNT
	CNVTA = L3[4] \ CNVTU[0] = 0 ! \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
	CNVTU[2] = 1
	Gosub CONVERT \ Q1[3] = AMOUNT
	CNVTA = L3[3] \ CNVTU[0] = 0 ! \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
	CNVTU[2] = 1
	Gosub CONVERT \ Q1[4] = AMOUNT
	CNVTA = L2[0] \ CNVTU[0] = 0 ! \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2
	CNVTU[2] = 2
	Gosub CONVERT \ Q1[5] = AMOUNT
	UNIT$ = "    "
	!! If L1[4] > 0 Read #CH_CCODES,L1[4],10;UNIT$;
	If UN[0] > 0 Read #CH_CCODES,UN[0],10;UNIT$;
Return 
!
HEADER: Rem HEADINGS ROUTINE
	if J8 return ! dx xml
	!
	If LN < PGLEN Return 
	If JA2
		If J8
			! - Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
		Else 
			Print #0;"\14\";
		End If 
	End If 
	JA2 = JA2 + 1 \ LN = 10
	If Not(J8) Print #0;"\15\";
	T9$ = "" \ Call Time(T9$)
	Print #0; Tab 10;J8$; Tab (64 - Len(CONAM$) / 2);CONAM$; Tab 120;"PAGE";JA2
	Print #0;" - 389A - ";T9$;
	Print #0; Tab 52;"RECEIPTS TO STOCK HISTORY "
	Print #0;" "
	Print #0; Tab 20;"IN DATE/TIME ORDER"
	Print #0; Tab 1;"TRANS#";
	Print #0; Tab 8;"LOT CODE";
	Print #0; Tab 20;"ITEM CODE";
	Print #0; Tab 32;"DESCRIPTION";
	Print #0; Tab 62;"SOURCE/DEST";
	Print #0; Tab 74;"COMMENT";
	Print #0; Tab 94;"TC";
	Print #0; Tab 109;"DATE";
	Print #0; Tab 117;"LOCATION";
	Print #0; Tab 130;"WH"
	Print #0; Tab 66;"QUANTITY UM";
	Print #0; Tab 84;"PO COST";
	Print #0; Tab 99;"AVG COST";
	Print #0; Tab 115;"EXTEND PO";
	Print #0;""
	Print #0;LINE_$
	Print #0;" "
Return 
!
SORTPO_HEADER: Rem HEADINGS ROUTINE
	if J8 return ! dx xml
	!
	If LN < PGLEN Return 
	If JA2
		If J8
			! - Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
		Else 
			Print #0;"\14\";
		End If 
	End If 
	JA2 = JA2 + 1 \ LN = 6
	If Not(J8) Print #0;"\15\";
	T9$ = "" \ Call Time(T9$)
	X2 = D1 \ Gosub L_7700 \ SDATE$[1,8] = X$
	X2 = D2 \ Gosub L_7700 \ EDATE$[1,8] = X$
	Print #0; Tab 10;J8$; Tab (64 - Len(CONAM$) / 2);CONAM$; Tab 120;"PAGE";JA2
	Print #0;" - 389A - ";T9$;
	Print #0; Tab 52;"RECEIPTS TO STOCK HISTORY (WORK SHEET FORMAT)"
	Print #0; Tab 52;"       BUYER: ";K1$[1,3]
	Print #0; Tab 52;"FOR ";SDATE$;" TO ";EDATE$
	Print #0;" "
	NEED_SUBHEADER = 1
Return 
!
SUB_HEADER: Rem NEW P.O. HEADINGS
	if J8 return ! dx xml
	!
	If LN + 3 > 56
		LN = 99 \ Gosub SORTPO_HEADER
	End If 
	If Not(NEED_SUBHEADER) Return 
	Print #0;U9$ \ LN = LN + 1
	PRINT_SUB_HEADER: Rem print sub header
	Gosub READ_POHEAD
	Print #0;"  PO #"; Tab 12;"DATE"; Tab 34;"VENDOR"; Tab 70;"VENDOR REF#";
	Print #0; Tab 88;"TYPE" \ LN = LN + 1
	X2 = H0[3] \ Gosub L_7750
	Print #0; Using "######";H0[2]; Tab 10;X$;
	Print #0; Using "######:  "; Tab 30;C1[1];V$; Tab 70;H$[1,14]; Tab 87;
	If H4[0] = 0 Print #0;"WAREHOUSE #";H4[1];
	If H4[0] = 4 Print #0;"IMPT WHSE #";H4[1];
	If H4[0] = 1 Print #0;" DIRECT";
	If H4[0] = 5 Print #0;"IMPT DIRECT";
	Print #0;"" \ LN = LN + 1
	Print #0;LINE_$ \ LN = LN + 1
	Print #0; Tab 69;"ORDERED"; Tab 85;"RECEIVED";
	Print #0; Tab 105;"DUE"
	Print #0;"LN#  PRODUCT CODE";
	Print #0; Tab 20;"DESCRIPTION"; Tab 49;"PACK"; Tab 69;"QUANTITY";
	Print #0; Tab 85;"QUANTITY"; Tab 103;"QUANTITY";
	Print #0; Tab 118;"EXT COST" \ LN = LN + 1
	Print #0;U9$ \ LN = LN + 1
	F1 = 99
Return 
!
PRINT_LINE: Rem PRINT LINE ! **** line 1 ****
	if J8 ! dx xml, not sorted by po
		tmp$=R1 Using "#######",fdel$,rtrim$(LT0$[13,24]),fdel$
		tmp$=tmp$,rtrim$(LT0$[1,12]),fdel$,rtrim$(A$[9,38]),fdel$
		tmp$=tmp$,rtrim$(A$[63,92]),fdel$,rtrim$(LT0$[25,36]),fdel$
		tmp$=tmp$,rtrim$(LT0$[37,56]),fdel$
		tmp$=tmp$,LT1[0] Using "##",fdel$,J3$[1,8],fdel$
		X2 = LT3[0] \ Gosub L_7700 ! date
		tmp$=tmp$,X$[1,8],fdel$,rtrim$(LT1$),fdel$
		tmp$=tmp$,LT1[1] Using "##",fdel$,str$(LT1[2]),fdel$
		If PRONTO let tmp1$="PRONTO" else tmp1$=""
		tmp$=tmp$,tmp1$,fdel$
		tmp$=tmp$,LT2[2] Using "-------#.##",fdel$,UNIT$[1,4],fdel$
		If COST
			tmp$=tmp$,UWORK[1] Using MASK$,fdel$,UNIT$,fdel$
			tmp$=tmp$,UWORK[2] Using MASK$,fdel$,UNIT$,fdel$
			tmp$=tmp$,FNR(LT2[2] * UWORK[1]) Using "-------#.##",fdel$
		endif
		!
		call addtostr(e$,rstr$,tmp$+rdel$)
		return
	end if
	!
	Print #0; Using "#######"; Tab 0;R1;
	Print #0; Tab 8;LT0$[13,24];
	Print #0; Tab 20;LT0$[1,12];
	Print #0; Tab 32;A$[9,38];
	Print #0; Tab 62;LT0$[25,36];
	Print #0; Tab 74;LT0$[37,56];
	Print #0; Using "##"; Tab 94;LT1[0];" ";J3$[1,8];
	X2 = LT3[0] \ Gosub L_7700
	Print #0; Tab 107;X$[1,8];
	Print #0; Tab 116;LT1$;
	Print #0; Using "##"; Tab 130;LT1[1];
	Print #0;""
	!Print #0; Tab (8);"Port: ";LT1[2];
	PRINT #0; TAB(8);"Access Code: ";A1$[1,10];
	If PRONTO Print #0;" PRONTO";
	IF PRONTO
		PRINT #0; TAB 40;A$[63,84];
	ELSE
		PRINT #0; TAB 32;A$[63,92];
	ENDIF
	!Print #0; Tab 32;A$[63,92];
	Print #0; Using "-------#.##"; Tab 62;LT2[2];
	Print #0;UNIT$[1,4];
	If COST
		Print #0; Using MASK$; Tab 80;UWORK[1];"/";UNIT$;
		Print #0; Using MASK$; Tab 95;UWORK[2];"/";UNIT$;
		Print #0; Using "-------#.##"; Tab 115;FNR(LT2[2] * UWORK[1]);
	End If 
	Print #0;" "
	Print #0;" "
	LN = LN + 3
	ExtCost=FNR(LT2[2] * UWORK[1])
	TOTEXT = TOTEXT + ExtCost;PTTOTEXT = PTTOTEXT + ExtCost
	TOTQTY = TOTQTY + LT2[2]
Return 
!
SORTPO_PRINT_LINE: Rem print detail
	Gosub READ_POLINE
	J2$ = L1$[81,92]
	Search #3,2,1;J2$,REC_PROD,E 
	If E Return 
	read record #ch_prod,rec_prod,0;pr.
	Mat Read #CH_PROD,REC_PROD,0;A$
	Mat Read #CH_PROD,REC_PROD,156;B
	Mat Read #CH_PROD,REC_PROD,256;A
	Mat Read #CH_PROD,REC_PROD,460;A1
	Mat Read #CH_PROD,REC_PROD,508;A2
	Mat Read #CH_PROD,REC_PROD,512;PFU1
	Mat Read #CH_PROD,REC_PROD,554;PFU2
	Mat Read #CH_PROD,REC_PROD,596;PRPARC
	Mat Read #CH_PROD,REC_PROD,620;LM
	Mat Read #CH_PROD,REC_PROD,624;PR_PO
	Read #CH_PROD,REC_PROD,630;LLC
	Mat Read #CH_PROD,REC_PROD,632;PSN$
	Mat Read #CH_PROD,REC_PROD,652;PSN
	Mat Read #CH_PROD,REC_PROD,660;U2
	Mat Read #CH_PROD,REC_PROD,670;U4
	Read #CH_PROD,REC_PROD,678;U3
	Mat Read #CH_PROD,REC_PROD,684;U3$
	Mat Read #CH_PROD,REC_PROD,744;HZ$
	Mat Read #CH_PROD,REC_PROD,834;A3
	Mat Read #CH_PROD,REC_PROD,846;PFTB
	Read #CH_PROD,REC_PROD,854;UPCT
	Mat Read #CH_PROD,REC_PROD,856;C1$
	Mat Read #CH_PROD,REC_PROD,894;PR_C4
	Read #CH_PROD,REC_PROD,938;PF_LOAD2
	Mat Read #CH_PROD,REC_PROD,944;PR_A2$
	Mat Read #CH_PROD,REC_PROD,974;PFCO
	Mat Read #CH_PROD,REC_PROD,990;PLV
	Mat Read #CH_PROD,REC_PROD,1002;PLC
	Mat Read #CH_PROD,REC_PROD,1018;PFN
	Gosub POQTY_CONVERSION
	!
	If J8 ! dx xml
		! po /vendor
		Gosub READ_POHEAD
		tmp$=K1$[1,3],fdel$
		X2 = H0[3] \ Gosub L_7750
		tmp$=tmp$,H0[2] Using "######",fdel$,X$,fdel$
		tmp$=tmp$,C1[1] Using "######",fdel$,rtrim$(V$),fdel$
		tmp$=tmp$,rtrim$(H$[1,14]),fdel$
		tmp1$=""
		If H4[0] = 0 let tmp1$="WAREHOUSE #",H4[1] using "##"
		If H4[0] = 4 let tmp1$="IMPT WHSE #",H4[1] using "##"
		If H4[0] = 1 let tmp1$="DIRECT"
		If H4[0] = 5 let tmp1$="IMPT DIRECT"
		tmp$=tmp$,tmp1$,fdel$
		!
		tmp$=tmp$,L1[2] Using "###",fdel$,rtrim$(L1$[81,92]),fdel$
		tmp$=tmp$,rtrim$(L1$[1,30]),fdel$,rtrim$(L1$[31,60]),fdel$
		If (L1$[31,31] = "" Or L1$[31,40] = "          ") And (A$[93,93] = "" Or A$[93,96] = "    ") Goto L_5480
		If L1$[61,62] = "  " Or L1$[61,61] = "" Let Z$ = A$[93,112] Else Let Z$ = L1$[61,80]
		tmp$=tmp$,rtrim$(Z$),fdel$,rtrim$(PR_A2$[13,27]),fdel$
		tmp$=tmp$,Q1[1] Using "----,--#.##",fdel$,UNIT$[1,4],fdel$
		tmp$=tmp$,Q1[2] Using "----,--#.##",fdel$
		X3 = Q1[1] - Q1[4] \ If X3 < 0 Let X3 = 0
		tmp$=tmp$,X3 Using "----,--#.##",fdel$
		If COST let tmp$=tmp$,FNR(Q1[2] * UWORK[1]) Using "---,---,--#.##",fdel$
		!
		call addtostr(e$,rstr$,tmp$+rdel$)
		return
	end if
	!
	Print #0; Using "###";L1[2];
	Print #0; Tab 5;L1$[81,92]; Tab 18;L1$[1,30];
	Print #0;" ";PR_A2$[13,27];
	Print #0; Using "----,--#.## "; Tab 64;Q1[1];
	Print #0;UNIT$[1,4];
	Print #0; Using "----,--#.## "; Tab 81;Q1[2];
	X3 = Q1[1] - Q1[4] \ If X3 < 0 Let X3 = 0
	Print #0; Using "----,--#.##"; Tab 99;X3;
	If COST
		Print #0; Using "---,---,--#.##"; Tab 111;FNR(Q1[2] * UWORK[1]);
	End If 
	Print #0;""
	LN = LN + 1
	If (L1$[31,31] = "" Or L1$[31,40] = "          ") And (A$[93,93] = "" Or A$[93,96] = "    ") Goto L_5480
	Print #0; Tab 18;L1$[31,60];
	If L1$[61,62] = "  " Or L1$[61,61] = "" Let Z$ = A$[93,112] Else Let Z$ = L1$[61,80]
	Print #0; Tab 50;"VENDOR ITEM #: ";Z$
	LN = LN + 1
	L_5480: Print #0;"" \ LN = LN + 1
	POTOTQTY = POTOTQTY + Q1[2]
	BUYERTOTQTY = BUYERTOTQTY + Q1[2]
	GRANDTOTQTY = GRANDTOTQTY + Q1[2]
	POTOTEXT = POTOTEXT + FNR(Q1[2] * UWORK[1])
	BUYERTOTEXT = BUYERTOTEXT + FNR(Q1[2] * UWORK[1])
	GRANDTOTEXT = GRANDTOTEXT + FNR(Q1[2] * UWORK[1])
	PTTOTEXT = PTTOTEXT + FNR(Q1[2] * UWORK[1])
	extcost=FNR(Q1[2] * UWORK[1])
	IF sortpo ! H0[2]<>0 and sortpo
		gltotqty[b[11]]=gltotqty[b[11]]+lt2[2]
		gltotcost[b[11]]=gltotcost[b[11]]+extcost
	endif
Return 
!
PRINT_PO_TOTAL: Rem
	if J8 return ! dx xml
	!
	Print #0;""
	Print #0; Tab 30;"PO TOTAL: ";
	Print #0; Using "----,--#.##"; Tab 81;POTOTQTY;
	If COST
		Print #0; Using "---,---,--#.##"; Tab 111;POTOTEXT;
	End If 
	Print #0;""
	! Print #0;""
	POTOTQTY = 0;POTOTEXT = 0
	LN = LN + 3
	if COST ! only if cost prints!
		!"cct198924
		let ln=ln+5	
		if sortpo
			gosub sortpo_header:
		else
			gosub header:
		end if
		print #0;""
		print #0;tab 0;"SUMMARY BY PRODUCT CATEGORY" 
		print #0;tab 0;"----------------------------" 
		print #0;tab 0;"SALES CAT";TAB 20;"AMOUNT" ! ;TAB 40;"GL CODE" 
		for i=1 to 99
			if gltotcost[i]
				if sortpo
					gosub sortpo_header:
				else
					gosub header:
				end if
				print #0;using "#####";tab 0;i;
				print #0;USING "-----------#.##";tab 11;gltotcost[i] ! ;
				! print #0;using "######";tab 40;glcode[i]
				let ln=ln+1
			endif
		next i

	Endif ! of if cost print - print catgys
	Print #0;""
	!pttotqty=0
	!pttotext=0
	for i=1 to 99             
		let gltotqty[i]=0     
		let gltotcost[i]=0    
	next i               
Return 
!
PRINT_BUYER_TOTAL: Rem
	if J8 return ! dx xml
	!
	Print #0;""
	Print #0; Tab 30;"BUYER  TOTAL: ";
	Print #0; Using "----,--#.##"; Tab 81;BUYERTOTQTY;
	If COST
		Print #0; Using "---,---,--#.##"; Tab 111;BUYERTOTEXT;
	End If 
	Print #0;""
	BUYERTOTQTY = 0;BUYERTOTEXT = 0
	LN = LN + 2
Return 
!
PRINT_GRAND_TOTAL: Rem
	if J8 return ! dx xml
	!
	Print #0;""
	Print #0; Tab 30;"GRAND  TOTAL: ";
	Print #0; Using "----,--#.##"; Tab 81;GRANDTOTQTY;
	If COST
		Print #0; Using "---,---,--#.##"; Tab 111;GRANDTOTEXT;
	End If 
	Print #0;""
	GRANDTOTQTY = 0;GRANDTOTEXT = 0
	LN = LN + 2
Return 
!
PRINT_TOTAL: Rem
	if J8 return ! dx xml
	!
	If Not(COST) Return 
	if sortpo
		gosub sortpo_header:
	else
		gosub header:
	end if
	Print #0; Tab 61;"------------"; Tab 111;"---------------"
	Print #0;"REPORT TOTAL:";
	Print #0; Using "--------#.##"; Tab 61;TOTQTY;
	Print #0; Using "------------.##"; Tab 111;TOTEXT
	TOTEXT = 0;TOTQTY = 0
	LN = LN + 2
Return 
!
READ_POHEAD: Rem read data from pohead
	KPOHEAD$ = " ",KPOHEAD$
	KPOHEAD$[1,2] = K1$[13,14];KPOHEAD$[3,8] = K1$[4,9]
	Search #CH_POHEAD,2,1;KPOHEAD$,REC_POHEAD,E
	If Not(E)
		Mat Read #CH_POHEAD,REC_POHEAD;H0;
		Mat Read #CH_POHEAD,REC_POHEAD,24;H$;
		Mat Read #CH_POHEAD,REC_POHEAD,222;H3;
		Mat Read #CH_POHEAD,REC_POHEAD,242;H4;
		Mat Read #CH_VEND,H0[1];V$;
		Mat Read #CH_VEND,H0[1],264;C1;
	Else 
		V$ = " ",V$
	End If 
Return 
!
READ_POLINE: Rem get vendor item # from poline
	KPOL$ = " ",KPOL$
	KPOL$[1,6] = K1$[4,9];KPOL$[7,9] = K1$[10,12]
	Search #CH_POLINE,2,1;KPOL$,REC_POL,E
	If Not(E)
		Mat Read #CH_POLINE,REC_POL,0;L1;
		Mat Read #CH_POLINE,REC_POL,12;L2;
		Mat Read #CH_POLINE,REC_POL,24;L3;
		Mat Read #CH_POLINE,REC_POL,66;L1$;
	Else 
		L1$[61,80] = " ",L1$[61,80]
	End If 
Return 
!
L_7700: Rem CONVERT FROM JULIAN
DATE$ = " ",DATE$;X$ = " ",X$
DATE$ = X2 Using "&&&&&"
Call JulianToDate(1,DATE$,DATE$,E) 
X$ = DATE$
Return 
!
L_7750: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
!
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
ctlc=1
amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,pr.)
CVTDONE: Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
DONE: Rem
If SORTPO
	Gosub PRINT_PO_TOTAL
	Gosub PRINT_BUYER_TOTAL
	Gosub PRINT_GRAND_TOTAL
Else 
	Gosub PRINT_TOTAL
End If 
! - If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
For K = 0 To 20
	T9[K] = 0
Next K
!
OUTEND: Rem
! dx close
If j8 ! dx xml
	Call addtostr(e$,rstr$,esdel$) !end section
	Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
try call dxclose() else rem
End 
!
! - Print 'CS'
! - Close 
! - Chain "MX000"
!
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
