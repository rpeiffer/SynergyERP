! >>> Program LA525a
!
! description Accounts Payable Check Register- General Ledger Interface
!
! loadsave -w -n 100,10 -o prog/dxport/la525a.dl4 src/la525a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx

Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY 12, 2009  14:29:53
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/ap/la525a.src (univ2) [bill] {15027}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Rem LA525A CHECK REGISTER PART 2  GENERAL LEDGER INTERFACE
Rem LAST UPDATE: MTK 3/91 - MULTIPLE BANKS - V4
Rem #2-A80VM,#3-A20CR,#4-A2OOI,#5-A10VL,#6-A50DB,#7-A50DD,#8-AM0CR
Try
  Enter spec[],message$,IntCo,rstr$,e$ 
  dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
  dim e$[500]!,message$[600]
	dIM GROUPID$[1]
	Dim 2%,C4[4],3%,Q[6],T[7],2%,jrnl
	Dim 1%,PRGNUM,EFLAG,RETURNSTATUS,bankid
	DIM 3%,REC_UAC
Comp = spec[0] ! company #                     
intCo = spec[0]                                
C4[0] = spec[1] ! CURRENT/NEXT MONTH
C4[1]= spec[2] ! POSTING PERIOD                              
C4[2] = spec[3]  ! POSTING date (mmddyy)                            
C4[3] = spec[4] !  LOGICAL UNIT NUMBER FOR A10IN
C4[4] = SPEC[5] ! POSTING DATE YYMMDD
JRNL = SPEC[6] !BATCH NUMBER /JRNL # IF NOT IN BATCH MODE

PRGNUM=SPEC[7] ! PROGRAM NUMBER
rec_uac = spec[8]                              
returnstatus = spec[9] 
eflag=spec[10]
for ctr=0 to 7
	let t[ctr]=spec[11+ctr]
next ctr 
bankid=spec[25]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
!Print 'CR CR';"UPDATING GENERAL LEDGER --- PLEASE WAIT!!!";
    dim 1%,currpass
	dim 1%,apbCURRID,3%,apbCURRFACT,keycurr$[30],currdesc$[30],2%,bnk_currid,3%,curr_rate
	dim 1%,cnvcu[10],3%,cnvca[10]
	dim 1%,oiCURRID,3%,oicurrfact
	dim 1%,aph_CURRID,3%,aph_currfact
	dim 1%,a2ccurrid,3%,a2ccurrfact
	dim 3%,aphmerch,aphfreight,aphmisc,grossapamt,discapamt,netapamt,currvaramt,grosspayamt, discamt, checkamt,totcurrvaramt
	dim p61$[256],currdesc$[30],keybank$[30],rec_bnk
	dim 3%,glexchamt,glexchacct
Dim 1%,D1[2],E,N1[2],N3,O1[2],S6,S7,S[1],X1,C0[6],O4[1],DEPT
Dim 1%,D4[1],ACCTTYPE,BLANKOUT_RESTOF_RECORD
Dim 2%,D[1]
Dim 2%,D3[1],D5[1],N2,N5,N[1],O2[6],O5,S1[8],S5[1],X,X2,DT3[1]
Dim 3%,R[50],RECA,RECB
Dim 3%,A6[1],D7,H1,O3[9],S2[4],S8[2],T9[4],DIVTOT[3],BNKTOT[2]
Dim B$[30],D1$[25],D2$[70],D5$[8],H$[68],H1$[68],H9$[2],K1$[30],K2$[30]
Dim K4$[10]
Dim K3$[30],K5$[30],N1$[12],O$[6],O1$[12],P$[8],S$[12],S5$[12],S6$[12],U5$[10]
Dim A5$[30],X$[10],K18$[12],DV1$[12],DV2$[12],DV3$[12],K49$[20],K50$[20]
Dim F$[16],G8$[2],Q$[9],R$[63],2%,G9[3]
Dim LETTER$[1]
Dim VENDNAME$[30],CLIENT$[4],P9$[50],K7$[30],D$[30]
Dim 3%,D2[2]
Dim GLACCT$[12],4%,GLACCT,GLAMOUNT
Dim 2%,COMP,CLIENT
rem dim apdett
dim 1%,apt1[1],2%,apt2,3%,apt3[1],apt1$[12]
Rem dim glcd detail file
Dim 2%,GLD[6],GLD$[12],GLD1$[30],4%,GLD1,1%,GLD2[3],3%,GLD0
Dim 3%,REC_GLD,GLDKEY1$[50],GLDKEY2$[50]
Rem dim glcp temp file
Dim 3%,GLA1[1],2%,GLA2[3],GLA1$[30],1%,GLA3[1]
Dim KEYGLAP$[50],3%,REC_GLA
Dim KEY47$[30],1%,CDTMP0[1],2%,CDTMP1[1],3%,CDTMP2
Dim 3%
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
RESTART = 0 \ PORTNUM = rec_uac
!G9[0] = Spc(5) \ G9[1] = Int(G9[0] / 16384) \ G9[2] = Int((G9[0] - G9[1] * 16384) / 64)
!G9[3] = G9[0] - (G9[1] * 16384 + G9[2] * 64) \ G8$[1,1] = G9[2] Using "#"
!G8$[2,2] = G9[3] Using "#"
G8$[1,1]=intco using "#"
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
g8$[2,2]=groupid$
if not(restart) mat read #1,61,0;p61$;
Goto L_900
Rem RESTART SECTION
Rem LET C4[0]=CURRENT =0  OR NEXT MONTH =1
Rem LET C4[1]=POSTING PERIOD (YYMM)
Rem LET C4[2]=POSTING DATE (MMDDYY)
Rem LET C4[3]=LOGICAL UNIT NUMBER FOR A10IN
Rem LET C4[4]=POSTING DATE (YYMMDD)
Rem LET PORT=port number 525 register originally generated
Rem let jrnl=jrnl # restarting from
F$ = COMP Using "cntrl/CNTRL#"
Open #1,F$
Mat Read #1,19,50;P9$;
mat read #1,61,0;p61$;
Mat Read #1,88,16;F$; \ Open #15,F$
Mat Read #1,88,48;F$; \ Open #16,F$
K2$ = " 0"
Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif
Mat Read #15,R[15],2;R$;
F$ = R$[31,31],"/A80VM",G8$[1,2] \ Open #2,F$
F$ = R$[56,56],"/A20CR",G8$[1,2] \ Open #3,F$
F$ = R$[53,53],"/A20OI",G8$[1,2] \ Open #4,F$
F$ = R$[58,58],"/A10VL",G8$[1,2] \ Open #5,F$
F$ = R$[39,39],"/A50DB",G8$[1,2] \ Open #6,F$
F$ = R$[40,40],"/A50DD",G8$[1,2] \ Open #7,F$
F$ = R$[43,43],"/A50CR",G8$[1,2] \ Open #17,F$
R$[60,60] = C4[3] Using "#"
Mat Read #1,88,432;F$; \ Open #12,F$
Mat Read #1,88,448;F$; \ Open #13,F$
Mat Read #1,88,112;F$; \ Open #14,F$
F$ = COMP Using "2/APDETT#"
Open #81,F$
X$ = C4[1] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G8$[1,2],X$[1,4] \ Open #8,F$
F$ = R$[42,42],"/AM0CD",G8$[1,2],X$[1,4] \ Open #9,F$
If P9$[17,17] <> "Y"
  F$ = R$[60,60],"/A10IN",G8$[1,2],X$[1,4] \ Open #11,F$
End If 
If P9$[17,17] = "Y"
  F$ = COMP Using "6/GLCDTEMP#"
  Open #75,F$
  F$ = COMP Using "4/GLCDDETL#"
  Open #77,F$
End If 
If Not(PORTNUM) Let PORTNUM = rec_uac
Rem check summary file
F$ = PORTNUM Using "2/APCDTEMP&&&&"
Open #47,F$
Mat Read #1,51,10;DEPT; \ Mat Read #1,51,18;C0;
If C0[6] ! ap by divisions
  F$ = R$[1,1],"/APDIV",G8$[1,2] \ Open #18,F$
  F$ = R$[2,2],"/APVDV",G8$[1,2] \ Open #19,F$
  F$ = PORTNUM Using "2/APCRTEMP&&&&"
  Open #49,F$
  F$ = PORTNUM Using "2/APBNKTEMP&&&&"
  Open #50,F$
End If 
L_900: K2$ = "10" \ Search #15,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Read #15,R[15],2;CLIENT$;
CLIENT = CLIENT$
Read #15,R[15],6;Q$;
Q[0] = Q$
Read #15,R[15],24;Q$;
Q[1] = Q$
Read #15,R[15],132;Q$;
Q[2] = Q$
Read #15,R[15],96;Q$;
Q[3] = Q$
Read #15,R[15],114;Q$;
Q[4] = Q$
Read #15,R[15],150;Q$;
Q[5] = Q$
Mat Read #1,51,10;DEPT; \ Mat Read #1,51,18;C0;
Mat Read #1,19,50;P9$;
K2$ = "20"
Search #15,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15],10;H9$;
If P9$[17,17] = "Y" Goto UPDATEGL
STARTA10IN: Rem start a10in interface here
R[11] = Chf(11)
R[11] = R[11] - 1
L_910: Read #11,R[11];H1$;
H1$[63,63] = "9" \ If H1$[1,1] = "*" Goto L_940
R[11] = R[11] - 1
If R[11] >= 0 Goto L_910
!Print @0,23;'CL RB';"ERROR IN INTERFACE FILE!!!!";
!Gosub ERR_TRAP
	eflag=eflag+1
	message$=message$+"ERROR IN INTERFACE FILE!!!"
	goto err_search:
L_940: Rem START HERE
If C0[6] Goto L_2000
For X = 0 To 5
  If Not(T[X]) Goto L_1095
  If X = 2 Goto L_1095
  If X = 3 Goto L_1095
  H1 = T[X]
  H$ = " ",H$
  H$[1,1] = H9$[2,2]
  H$[2,10] = Q[X] Using "#########"
  If JRNL
    H$[14,19] = JRNL Using "######"
  Else 
    H$[14,19] = C4[2] Using "######"
  End If 
  H$[20,25] = C4[2] Using "######"
  H$[26,50] = D2$[X * 10 + 1,X * 10 + 10],"/CHECK REGISTER "
  H$[59,62] = R[11] + 1 Using "####"
  H$[63,63] = "0"
  B$ = Q[X] Using "#########"
  Gosub L_4500
L_1095: Next X
K1$ = " ",K1$
if bankid>0 let k1$[1,2]=(bankid-1) using "##"
L_1110: Search #14,3,1;K1$,R[14],E
If E = 2 Goto L_3000
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid goto L_3000:
	if tmp3<>bankid goto L_1110:
endif
Mat Read #14,R[14],32;A6;
If a6[1]<>0 ! Not(A6[1]) Goto L_1110
	Mat Read #14,R[14],2;A5$; \ B$ = " ",B$
	B$[2,9] = A6 Using "########"
	D7 = A6[1] \ D3 = 0
	D1$ = A5$
	Gosub L_4200
endif
IF P61$[136,136]="Y"  ! currency variance
	mat read #14,r[14],122;GLEXCHAMT;
	!let glexchamt=0
	!mat write #14,r[14],122;GLEXCHAMT;
	if glexchamt<>0
		mat read #14,r[14],116;GLEXCHACCT;
		Mat Read #14,R[14],2;A5$; \ B$ = " ",B$
		B$[2,9] = A6 Using "########"
		D7 = GLEXCHACCT \ D3 = 0
		D1$ = A5$
		Gosub L_4200
	endif
endif
Goto L_1110
L_2000: Rem UPDATE SECTION FOR MULTIPLE DIVISION
K50$ = " ",K50$
L_2010: Search #50,3,1;K50$,R[50],E \ If E = 2 Goto L_2200
If E Gosub ERR_SEARCH
Mat Read #50,R[50],0;DIVTOT;
K18$ = K50$
Search #18,2,1;K18$,R[18],E \ If E Goto L_2050
Mat Read #18,R[18],42;DV1$;
Mat Read #18,R[18],54;DV2$;
Mat Read #18,R[18],66;DV3$; \ Goto L_2065
L_2050: DV1$[1,9] = Q[0] Using "#########"
DV2$[1,9] = Q[1] Using "#########"
DV3$[1,9] = Q[3] Using "#########"
L_2065: D3 = 0 \ B$ = " ",B$
If Not(DIVTOT[0]) Goto L_2090
B$[2,9] = DV1$[2,9]
D1$ = "ACCT PAYABLE DIVISION-",K18$[1,2],"  "
D7 = DIVTOT[0] \ Gosub L_4200
L_2090: If Not(DIVTOT[1]) Goto L_2120
B$[2,9] = DV2$[2,9]
D1$ = "A/P CREDITS DIVISION-",K18$[1,2],"  "
D7 = DIVTOT[1] \ Gosub L_4200
L_2120: If Not(DIVTOT[2]) Goto L_2150
B$[2,9] = DV3$[2,9]
D1$ = "A/P DISCOUNT DIVISION-",K18$[1,2],"  "
D7 = DIVTOT[2] \ Gosub L_4200
L_2150: Goto L_2010
Goto L_2010
L_2200: Rem BANKS AMOUNTS BY DIVISION
K49$ = " ",K49$
L_2210: Search #49,3,1;K49$,R[49],E \ If E = 2 Goto L_3000
If E Gosub ERR_SEARCH
Mat Read #49,R[49],0;BNKTOT;
If Not(BNKTOT[0]) Goto L_2210
B$[2,9] = BNKTOT[1] Using "#########"
D1$ = "A/P CASH DIVISION-",K49$[3,4],"        "
D7 = BNKTOT[0] \ Gosub L_4200
Goto L_2210
Goto L_3000
L_3000: Rem DIRECT DISBURSEMENT UPDATE
K1$ = " ",K1$
L_3010: Search #7,3,2;K1$,R[7],E
If E = 2 Goto L_4600
If E Gosub ERR_SEARCH
Mat Read #7,R[7],0;D5;
Mat Read #6,D5,8;D1;
If D1[2] <> 4 Goto L_3010
Mat Read #7,R[7],8;D1$; \ Mat Read #7,R[7],38;D5$;
Mat Read #7,R[7],46;D7; \ Mat Read #7,R[7],54;N1$;
B$ = " ",B$ \ B$[2,9] = D5$[1,8]
Mat Read #6,D5,162;D3;
Gosub L_4200
Goto L_3010
L_4200: Rem ... SET UP G/L DETAIL RECORD
H$ = " ",H$
H$[1,1] = H9$[2,2]
H$[2,10] = B$[1,9]
If JRNL
  H$[14,19] = JRNL Using "######"
Else 
  H$[14,19] = C4[2] Using "######"
End If 
H$[20,25] = C4[2] Using "######"
X2 = D3[0] \ Gosub L_8900
If Not(D3) Let P$ = " CHK REG"
H$[26,58] = D1$[1,24],":",P$[1,8]
H$[59,62] = R[11] + 1 Using "####"
H$[63,63] = "0"
H1 = D7
Goto L_4500
L_4500: Rem WRITE TO GLHISTORY
K2$ = " ",K2$ \ K2$[1,9] = B$[1,9]
Write #11,R[11];H$;
Write #11,R[11],1;H1;
R[11] = R[11] + 1
T9 = T9 + H1
Return 
L_4600: Rem SUSPENSE ACCOUNT POSTING
If Not(T9) Goto L_4700
H$ = " ",H$ \ H$[1,1] = H9$[2,2]
H$[2,10] = Q[5] Using "#########"
If JRNL
  H$[14,19] = JRNL Using "######"
Else 
  H$[14,19] = C4[2] Using "######"
End If 
H$[20,25] = C4[2] Using "######"
H$[26,40] = D2$[61,70],"/CHECK REGISTER"
H$[59,62] = R[11] - 1 Using "####"
H$[63,63] = "0"
H1 = - T9
B$[1,9] = Q[5] Using "#########"
Gosub L_4500
!Print @0,22;'CL RB';"SUSPENSE ACCOUNT POSTING HAS BEEN MADE FOR ";H1
!Print @0,23;'CL RB';"PRESS <CR> TO CONTINUE UPDATE ";
!Input ""X$
eflag=eflag+1
message$=message$+" SUSPENSE ACCOUNT POSTING HAS BEEN MADE FOR "+STR$(H1)
L_4700: Write #11,R[11];H1$;
Write #11,R[11],1;H1;
Goto L_5000
UPDATEGL: Rem update section for gl accts
K1$ = " ",K1$
if bankid<>0 let k1$[1,2]=bankid using "##"
SRCHA20CR: E = 0 \ Search #3,3,1;K1$,R[3],E
If E = 2 Goto L_5000
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid goto L_5000
	if tmp3<>bankid goto srcha20cr:
endif
Mat Read #3,R[3],0;N;
Mat Read #3,R[3],8;N1;
Mat Read #3,R[3],14;N2;
Mat Read #3,R[3],18;N1$;
Mat Read #3,R[3],30;N3; \ Mat Read #3,R[3],32;N5;
Mat Read #3,r[3],56; A2CCURRID;              
Mat Read #3,r[3],58; A2CCURRFACT;
If N1 = 9 Goto SRCHA20CR
O3[2] = 0;O3[4] = 0
CDTMP2 = 0
KEY47$ = " ",KEY47$
KEY47$[1,2] = N3 Using "##"
KEY47$[3,6] = N Using "######"
KEY47$[7,12] = N5 Using "######"
Search #47,2,1;KEY47$,R[47],E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #47,R[47],12;CDTMP2;
End If 
If Not(N1[1])
  Gosub L_6300
  Rem READ VENDOR FILE *PAYTO VENDOR CODE*
  K2$ = N5 Using "######"
  VENDNAME$ = " ",VENDNAME$
  Search #2,2,1;K2$,R[2],E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #2,R[2],148;VENDNAME$;
  Else 
    VENDNAME$[1,27] = "*** Vendor Not On File *** "
  End If 
  If O3[4] ! ap amt
    ACCTTYPE = 0
    GLAMOUNT = O3[4]
    GLACCT = 0;DETFLAG = 0
    If C0[6] ! divisiongetapacct: ! o3[4]
      K18$ = " ",K18$ \ K18$[1,2] = O4[1] Using "##"
      Search #18,2,1;K18$,R[18],E \ If E > 1 Gosub ERR_SEARCH
      If O1 = 2
        Mat Read #18,R[18],54;GLACCT$;
        GLACCT = GLACCT$
      Else 
        Mat Read #18,R[18],42;GLACCT$;
        GLACCT = GLACCT$
      End If 
    End If 
    If Not(GLACCT)
      If O1 = 2
        GLACCT = Q[1]
      Else 
        GLACCT = Q[0]
      End If 
    End If 
    Gosub UPGLCDTEMP ! 
    Gosub UPGLDET ! 
  End If 
End If 
If N1[1] = 1 ! direct disbursement
  Rem READ DIR DISB
  Mat Read #6,N2,0;D; \ Mat Read #6,N2,8;D1;
  If D1[2] <> 4 Goto SRCHA20CR
  Mat Read #6,N2,14;D$; \ Mat Read #6,N2,144;D2;
  Mat Read #6,N2,162;D3;
  Mat Read #6,N2,212;D4;
  VENDNAME$ = D$[1,30]
  O2[1] = D3[1] \ O2[2] = D3[0]
  O3[4] = D2 \ O3[2] = D2[1] \ O2[0] = D \ O4[1] = D4[1]
  O5 = D
  oiCURRID = 0 
  oiCURRFACT = 0
  Rem update allocations geta20dd:
  K7$ = " ",K7$;K7$[1,5] = N2 Using "#####"
SRCHA50DD: Search #7,3,1;K7$,R[7],E \ If E = 2 Goto ENDSRCHA50DD
  If E Gosub ERR_SEARCH
  X = K7$[1,5] \ If X <> N2 Goto ENDSRCHA50DD
  Mat Read #7,R[7],38;D5$;
  Mat Read #7,R[7],46;D7;
  GLACCT = D5$
  GLAMOUNT = D7
  ACCTTYPE = 0
  K5$ = " ",K5$;K5$[1,9] = GLACCT Using "#########"
  DETFLAG = 0
  Search #5,2,1;K5$,R[5],E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #5,R[5],0;B$;
    If B$[28,28] = "D" Let DETFLAG = 99
  End If 
  Gosub UPGLCDTEMP
  Gosub UPGLDET
  Goto SRCHA50DD
ENDSRCHA50DD: Rem end the update
End If 
Rem update discount account
If O3[2] ! discount amount
  GLACCT = 0;DETFLAG = 0
  If C0[6] ! by divisions
    K18$ = " ",K18$ \ K18$[1,2] = O4[1] Using "##"
    Search #18,2,1;K18$,R[18],E \ If E > 1 Gosub ERR_SEARCH
    If Not(E)
      Mat Read #18,R[18],66;GLACCT$;
      GLACCT = GLACCT$
    End If 
  End If 
  If Not(GLACCT)
    GLACCT = Q[4]
  End If 
  ACCTTYPE = 2
  GLAMOUNT = - (O3[2])
  Gosub UPGLCDTEMP
  Gosub UPGLDET
End If 
let checkamt=O3[4]-O3[2]
currvaramt=0
If p61$[136,136]="Y" and oicurrfact<>0 and A2CCURRFACT<>0 	
	IF oicurrfact<>A2CCURRFACT
		let currvaramt=fnr(checkamt) ! keep for original checkamt in open item value
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=oicurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
		let checkamt=cnvca[0]
		let cnvcu[0]=2
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=a2ccurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring down to base currency based upon check print rate
		let checkamt=FNR(cnvca[0])
		let currvaramt=currvaramt-checkamt
	endif
endif
If (checkamt) ! post cash
  GLACCT = 0;DETFLAG = 0
  K4$ = N3 Using "##"
  Search #14,2,1;K4$,R[14],E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #14,R[14],32;A6;
    GLACCT = A6
    If DEPT <> 0 And C0[6] <> 0 And O4[1] <> 0
      K5$ = " ",K3$ \ K5$[1,9] = A6 Using "#########"
      K5$[8,9] = O4[1] Using "&&"
      Search #5,2,1;K5$,R[5],E \ If E > 1 Gosub ERR_SEARCH
      If Not(E)
        GLACCT = K5$[1,9]
      End If 
    End If 
  End If 
  If Not(GLACCT) Let GLACCT = Q[2]
  GLAMOUNT = -  checkamt ! (O3[4] - O3[2])
  ACCTTYPE = 1
  Gosub UPGLCDTEMP
  Gosub UPGLDET
End If 
if p61$[136,136]="Y" and currvaramt<>0
	GLACCT = 0;DETFLAG = 0
	K4$ = N3 Using "##"
	Search #14,2,1;K4$,R[14],E \ If E > 1 Gosub ERR_SEARCH
	If Not(E)
		mat read #14,r[14],116;GLEXCHACCT;
		GLACCT = GLEXCHACCT
		If DEPT <> 0 And C0[6] <> 0 And O4[1] <> 0
			K5$ = " ",K3$ \ K5$[1,9] = GLEXCHACCT Using "#########"
			K5$[8,9] = O4[1] Using "&&"
			Search #5,2,1;K5$,R[5],E \ If E > 1 Gosub ERR_SEARCH
			If Not(E)
				GLACCT = K5$[1,9]
			End If 
		End If 
  End If 
  If Not(GLACCT) Let GLACCT = Q[2]
  GLAMOUNT = - currvaramt
  ACCTTYPE = 3 
  Gosub UPGLCDTEMP
  Gosub UPGLDET
End If 



Goto SRCHA20CR
L_5000: Rem UPDATE AP HISTORY FILES
K1$ = " ",K1$ \ N9 = 0
if bankid<>0 let k1$[1,2]=bankid using "##"
L_5020: Search #3,3,1;K1$,R[3],E
If E = 2 Goto OUTEND
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]\if tmp3>bankid goto outend:
	if tmp3<>bankid goto L_5020
endif
Mat Read #3,R[3],8;N1;
If N1 = 9 Goto L_5020
If N1[1] Goto L_5020
Mat Read #3,R[3],0;N;
Mat Read #3,R[3],14;N2;
Mat Read #3,R[3],32;N5;
Mat Read #3,r[3],56; A2CCURRID;              
Mat Read #3,r[3],58; A2CCURRFACT;
Gosub L_6300 ! read open item
K2$ = " ",K2$ \ K2$[1,6] = O2[0] Using "######"
K2$[7,18] = O1$[1,12] \ K2$[19,20] = O1 Using "##"
Search #12,2,1;K2$,R[12],E
If E Gosub ERR_SEARCH
Gosub L_6000 ! read apdeth
S1[5] = O2[6] \ S1[6] = O2[1]
S2[2] = S2[2] + O3[4] \ S2[3] = S2[3] + O3[2]
If O1 <> 2 If S2[2] >= S2[0] Let S[1] = 1
If O1 = 2 If S2[2] <= S2[0] Let S[1] = 1
S2[4] = O5
Gosub L_6100 ! write apdeth
E = 2 \ Search #13,1,0;K3$,R[13],E
If E Gosub ERR_SEARCH
K3$[1,6] = R[12] Using "######" \ K3$[7,12] = O2[0] Using "######"
K3$[13,18] = R[13] Using "######"
If R[13] > 999999
  RECA = Int((R[13] - 1000000) / 100000)
  RECB = Fra(R[13] / 100000) * 100000
  Call String(4,RECA + 193,LETTER$)
  K3$[13,13] = LETTER$[1,1]
  K3$[14,18] = RECB Using "&&&&&"
End If 
S5 = R[12] \ S5[1] = O2[0] \ S6 = O1 \ S5$[1,12] = O1$[1,12]
S7 = 9 \ S6$ = " ",S6$ \ S6$[1,6] = O2[6] Using "######"
S8[0] = O3[4] \ S8[1] = O3[2] \ S8[2] = O5
Gosub L_6200 ! write apdetl
Search #13,4,1;K3$,R[13],E
If E Gosub ERR_SEARCH
currvaramt=0
If p61$[136,136]="Y" and oicurrfact<>0 and A2CCURRFACT<>0 	
	IF oicurrfact<>A2CCURRFACT
		let checkamt=O3[4]-O3[2]
		currvaramt=0
		let currvaramt=fnr(checkamt) ! keep for original checkamt in open item value
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=oicurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
		let checkamt=cnvca[0]
		let cnvcu[0]=2
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=a2ccurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring down to base currency based upon check print rate
		let checkamt=FNR(cnvca[0])
		let currvaramt=currvaramt-checkamt
	endif
endif
K2$ = " ",K2$ \ K2$[1,6] = O2[0] Using "######"
K2$[7,18] = O1$[1,12] \ K2$[19,20] = O1 Using "##"
Search #81,2,1;K2$,rec_aptt,E
if e>1 gosub err_search:
if e=1
	let apt1[0]=o1  ! transtype 
	let apt1[1]=a2ccurrid ! test
	let apt2=o2[0] ! vendor
	let apt1$=" ",apt1$;apt1$[1,12]=o1$[1,12] ! trans type
	let apt3[0]=a2ccurrfact ! 
	let apt3[1]=0
	let e=2\search #81,1,0;k2$,rec_aptt,e\if e<>0 gosub err_search:
	search #81,4,1;k2$,rec_aptt,e \if e<>0 gosub err_search:
	mat write #81,rec_aptt,0;apt1;
	mat write #81,rec_aptt,4;apt2;
	mat write #81,rec_aptt,12;apt1$;
	mat write #81,rec_aptt,82;apt3;
endif
if p61$[136,136]="Y" and currvaramt<>0
	mat read #81,rec_aptt,0;apt1;
	mat read #81,rec_aptt,4;apt2;
	mat read #81,rec_aptt,12;apt1$;
	mat read #81,rec_aptt,82;apt3;
	if not(apt1[1]) and not (apt3[0])
		let apt1[1]=oicurrid
		let apt3[0]=a2ccurrfact
	endif
	let apt3[1]=apt3[1]+currvaramt
	mat write #81,rec_aptt,0;apt1;
	mat write #81,rec_aptt,4;apt2;
	mat write #81,rec_aptt,12;apt1$;
	mat write #81,rec_aptt,82;apt3;
endif

K2$ = " ",K2$ \ K2$[1,6] = O5 Using "######"
K2$[7,12] = O2[6] Using "######" \ K2$[19,20] = " 9"
Search #12,2,1;K2$,R[12],E
If Not(E) Goto L_5520
If E > 1 Gosub ERR_SEARCH
S[0] = 9 \ S[1] = 1 \ S$ = " ",S$ \ S$[1,6] = O2[6] Using "######"
For X = 0 To 8
  S1[X] = 0
  If X < 5 Let S2[X] = 0
Next X
BLANKOUT_RESTOF_RECORD = 0
S1[0] = O5 \ S1[1] = O2[1] \ S1[2] = C4[4] \ S2[4] = O5
X2 = S1[1] \ Gosub L_7870 \ X2 = 0
If X2 Let S1[1] = X2 Else Let S1[1] = Tim(6)
E = 2 \ Search #12,1,0;K2$,R[12],E
If E Gosub ERR_SEARCH
Gosub L_6100 ! WRITE RECORD
Search #12,4,1;K2$,R[12],E
If E Gosub ERR_SEARCH
K3$ = " ",K3$ \ K3$[1,6] = O5 Using "######"
K3$[7,12] = S1[1] Using "######" \ K3$[13,18] = R[12] Using "######"
Search #12,4,2;K3$,R[12],E
If E Gosub ERR_SEARCH
K5$ = " ",K5$;K5$[1,6] = S2[4] Using "######";K5$[7,24] = K3$[1,18]
Search #12,4,3;K5$,R[12],E \ If E Gosub ERR_SEARCH
L_5520: Gosub L_6000 ! READ RECORD
S2[0] = S2[0] + O3[4] \ S2[2] = S2[2] + O3[4]
S2[3] = S2[3] + O3[2]
Gosub L_6100
! create the currency variance
currvaramt=0
If p61$[136,136]="Y" and oicurrfact<>0 and A2CCURRFACT<>0 	
	IF oicurrfact<>A2CCURRFACT
		let checkamt=O3[4]-O3[2]
		currvaramt=0
		let currvaramt=fnr(checkamt) ! keep for original checkamt in open item value
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=oicurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
		let checkamt=cnvca[0]
		let cnvcu[0]=2
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=a2ccurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring down to base currency based upon check print rate
		let checkamt=FNR(cnvca[0])
		let currvaramt=currvaramt-checkamt
	endif
endif
K2$ = " ",K2$ \ K2$[1,6] = O5 Using "######"
K2$[7,12] = O2[6] Using "######" \ K2$[19,20] = " 9"
Search #81,2,1;K2$,rec_aptt,E
if e>1 gosub err_search:
if e=1
	K2$ = " ",K2$ \ K2$[1,6] = O5 Using "######"
	K2$[7,12] = O2[6] Using "######" \ K2$[19,20] = " 9"
	let apt1[0]=9  ! transtype 
	let apt1[1]=a2ccurrid ! test
	let apt2=o5 ! payto vendor
	let apt1$=" ",apt1$
	let apt1$[1,6]=o2[6] using "######" 
	let apt3[0]=a2ccurrfact ! 
	let apt3[1]=0
	let e=2\search #81,1,0;k2$,rec_aptt,e\if e<>0 gosub err_search:
	search #81,4,1;k2$,rec_aptt,e \if e<>0 gosub err_search:
	mat write #81,rec_aptt,0;apt1;
	mat write #81,rec_aptt,4;apt2;
	mat write #81,rec_aptt,12;apt1$;
	mat write #81,rec_aptt,82;apt3;
endif
if p61$[136,136]="Y" and currvaramt<>0
	mat read #81,rec_aptt,0;apt1;
	mat read #81,rec_aptt,4;apt2;
	mat read #81,rec_aptt,12;apt1$;
	mat read #81,rec_aptt,82;apt3;
	if not(apt1[1]) and not (apt3[0])
		let apt1[1]=a2ccurrid
		let apt3[0]=a2ccurrfact
	endif
	let apt3[1]=apt3[1]+currvaramt
	mat write #81,rec_aptt,0;apt1;
	mat write #81,rec_aptt,4;apt2;
	mat write #81,rec_aptt,12;apt1$;
	mat write #81,rec_aptt,82;apt3;
endif	
Goto L_5700
L_5700: Rem CREATE INVOICE TRANSACTION FOR PAYMENT
S5[0] = R[12] \ S5[1] = O2[0] \ S6 = 9
S5$ = " ",S5$ \ S5$[1,6] = O2[6] Using "######"
S7 = O1 \ S6$[1,12] = O1$[1,12] \ S8[0] = O3[4]
S8[1] = O3[2] \ S8[2] = O5
E = 2 \ Search #13,1,0;K3$,R[13],E
If E Gosub ERR_SEARCH
Gosub L_6200
K3$ = " ",K3$ \ K3$[1,6] = R[12] Using "######"
K3$[7,12] = O5 Using "######"
K3$[13,18] = R[13] Using "######"
If R[13] > 999999
  RECA = Int((R[13] - 1000000) / 100000)
  RECB = Fra(R[13] / 100000) * 100000
  Call String(4,RECA + 193,LETTER$)
  K3$[13,13] = LETTER$[1,1]
  K3$[14,18] = RECB Using "&&&&&"
End If 
Search #13,4,1;K3$,R[13],E
If E Gosub ERR_SEARCH
Goto L_5020
L_6000: Rem READ APDETH FILE
Mat Read #12,R[12],0;S;
Mat Read #12,R[12],4;S$;
Mat Read #12,R[12],16;S1;
Mat Read #12,R[12],52;S2;
Return 
L_6100: Rem WRITE APDETH FILE
Mat Write #12,R[12],0;S;
Mat Write #12,R[12],4;S$;
Mat Write #12,R[12],82;BLANKOUT_RESTOF_RECORD;
Mat Write #12,R[12],16;S1;
Mat Write #12,R[12],52;S2;
Return 
L_6200: Rem WRITE APDETL
Mat Write #13,R[13],0;S5;
Mat Write #13,R[13],8;S6;
Mat Write #13,R[13],10;S5$;
Mat Write #13,R[13],22;S7;
Mat Write #13,R[13],24;S6$;
Mat Write #13,R[13],36;S8;
Return 
L_6300: Rem READ OPEN ITEM FILE
Mat Read #4,N2,0;O$;
Mat Read #4,N2,6;O1;
Mat Read #4,N2,12;O2;
Mat Read #4,N2,40;O3;
Mat Read #4,N2,100;O1$;
Mat Read #4,N2,112;O4;
Mat Read #4,N2,118;O5;
Mat Read #4,N2,116;oiCURRID;
Mat Read #4,N2,122;oiCURRFACT;
Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7870: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8900: Rem PUT DATE FROM X2 INTO P$
U5$ = X2 Using "&&&&&&&"
P$[1,2] = U5$[4,5]
P$[3,3] = "/"
P$[4,5] = U5$[6,7]
P$[6,6] = "/"
P$[7,8] = U5$[2,3]
Return 
UPGLCDTEMP: Rem update gl ap temp file (#75)
For X = 0 To 1 \ GLA1[X] = 0 \ Next X
For X = 0 To 3 \ GLA2[X] = 0 \ Next X
GLA1$ = " ",GLA1$
GLA3 = 0;GLA3[1] = 0
GLA1[0] = GLACCT
GLA2[0] = JRNL
GLA2[1] = CLIENT
If DETFLAG
  GLA2[2] = N5
  GLA2[3] = N[0]
  GLA1$[1,30] = VENDNAME$[1,30]
  GLA3[0] = N3
  GLA3[1] = N1[1]
End If 
KEYGLAP$ = " ",KEYGLAP$
KEYGLAP$[1,4] = GLA2[1] Using "####"
KEYGLAP$[5,12] = GLA1[0] Using "########"
KEYGLAP$[13,14] = GLA3[0] Using "##"
KEYGLAP$[15,20] = GLA2[3] Using "######"
KEYGLAP$[21,26] = GLA2[2] Using "######"
KEYGLAP$[27,28] = GLA3 Using "##"
Search #75,2,1;KEYGLAP$,REC_GLA,E \ If E > 1 Gosub ERR_SEARCH
If E
  E = 2 \ Search #75,1,0;KEYGLAP$,REC_GLA,E \ If E Gosub ERR_SEARCH
  Mat Write #75,REC_GLA,0;GLA1;
  Mat Write #75,REC_GLA,12;GLA2;
  Mat Write #75,REC_GLA,40;GLA1$;
  Mat Write #75,REC_GLA,70;GLA3;
  Search #75,4,1;KEYGLAP$,REC_GLA,E \ If E Gosub ERR_SEARCH
End If 
Mat Read #75,REC_GLA,0;GLA1
GLA1[1] = GLA1[1] + GLAMOUNT
Mat Write #75,REC_GLA,0;GLA1;
Return 
UPGLDET: Rem up gl detail file
For X9 = 0 To 6 \ GLD[X9] = 0 \ Next X9
For X9 = 0 To 3 \ GLD2[X9] = 0 \ Next X9
GLD$ = " ",GLD$;GLD1$ = " ",GLD1$
GLD1 = 0
GLD0 = CDTMP2
GLD[0] = CLIENT
GLD[1] = C4[1]
GLD[2] = N5
GLD[3] = N[0]
GLD[4] = O2[1]
GLD[5] = C4[4]
GLD[6] = JRNL
GLD$[1,9] = GLACCT Using "#########"
GLD1$[1,30] = VENDNAME$[1,30]
GLD2[0] = 9
GLD2[1] = N1[1]
GLD2[2] = N3
GLD2[3] = ACCTTYPE
GLDKEY1$ = " ",GLDKEY1$
GLDKEY1$[1,4] = GLD[1] Using "&&&&"
GLDKEY1$[5,16] = GLD$[1,12]
GLDKEY1$[17,22] = GLD[6] Using "######"
GLDKEY1$[23,24] = GLD2[2] Using "##"
GLDKEY1$[25,30] = GLD[3] Using "######"
GLDKEY1$[31,36] = GLD[2] Using "######"
GLDKEY1$[37,38] = GLD2[0] Using "##"
Search #77,2,1;GLDKEY1$,REC_GLD,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  E = 2 \ Search #77,1,0;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  Mat Write #77,REC_GLD,0;GLD;
  Mat Write #77,REC_GLD,34;GLD0;
  Mat Write #77,REC_GLD,40;GLD$;
  Mat Write #77,REC_GLD,52;GLD1$;
  Mat Write #77,REC_GLD,82;GLD1;
  Mat Write #77,REC_GLD,90;GLD2;
  Search #77,4,1;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  GLDKEY2$ = " ",GLDKEY2$
  GLDKEY2$[1,6] = GLD[2] Using "######"
  GLDKEY2$[7,8] = GLD2[2] Using "##"
  GLDKEY2$[9,14] = GLD[3] Using "######"
  GLDKEY2$[15,16] = GLD2[0] Using "##"
  GLDKEY2$[17,20] = GLD[1] Using "&&&&"
  GLDKEY2$[21,26] = GLD[6] Using "######"
  GLDKEY2$[27,38] = GLD$[1,12]
  Search #77,4,2;GLDKEY2$,REC_GLD,E \ If E Gosub ERR_SEARCH
End If 
Rem add amount into transaction
Mat Read #77,REC_GLD,82;GLD1
GLD1 = GLD1 + GLAMOUNT
Mat Write #77,REC_GLD,82;GLD1;
Return 

ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$ = msg$ 
call programdump("/tmp/la525a!","")
call programdump()
ReturnStatus=0! need report to print still
Message$=E$
Error 10000                      
Return ! End 

If Msg$<>"" let e$=msg$ !  Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump("/tmp/la525a!","")
call programdump()
ReturnStatus=0! need report to print still
Message$=E$
! goto err_msg ! Error 10000
Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)







OUTEND: Rem END

Comp = spec[0] ! company #                     
spec[0]=intco                               
spec[1]=c4[0] ! CURRENT/NEXT MONTH
spec[2]=c4[1] ! POSTING PERIOD                              
spec[3]=c4[2] ! POSTING date (mmddyy)                            
spec[4]=c4[3] !  LOGICAL UNIT NUMBER FOR A10IN
SPEC[5]=c4[4]! POSTING DATE YYMMDD
SPEC[6]=jrnl !BATCH NUMBER /JRNL # IF NOT IN BATCH MODE
SPEC[7]=525! PROGRAM NUMBER
spec[8]=rec_uac                             
spec[9]=returnstatus 
spec[10]=eflag
for ctr=0 to 7
	spec[11+ctr]=t[ctr]
next ctr
Call "LA525B.dl4",spec[],message$,IntCo,rstr$,e$
 
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
