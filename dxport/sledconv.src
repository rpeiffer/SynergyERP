!! --- sledconv
! description Sales Lead Converter
!
! loadsave -w -n 100,10 -o prog/dxport/sledconv.dl4 src/sledconv.src
! 1.0 mm/dd/yyyy change??
! 
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
!
!include structure,filehandler libs & default structure dims
External Lib "libcustlist.lib"
Declare External Sub CustList
!
! *declare additional dl4 intrinsic subs & functions
Declare Intrinsic Function FindChannel
Declare Intrinsic Sub Logic,FormatDate,JuliantoDate, programdump, env, FindF

External Lib "libgeneral.lib"
Declare External Sub SubErr,CreateNetStatus
!
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$,FormatDate$
Declare External Sub UserCntrl
!External Lib "cslkeywrd.dl4"
!Declare External Sub cslkeywrd
! program subs / functions
Declare Sub SLtoCust,CusttoSL,Readcust,readsled,writecust,writesled,CusttoSLRng
Try
	dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
	dim action$[30],options$[30],userid$[8],blank$[200],action1$[30],action2$[30]
	Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
	dim tmp$[1200],tmp1$[300],J$[20],J1$[30]
	dim Message$[200],WebStr$[600],SessionID$[200]
	Dim k1$[60],k2$[60],CXR$[4],p9$[50],p60$[50],p61$[256]
	Dim CDESC$[30],PDESC$[16]
	Dim 2%,PChan[9],3%,passinfo[9],Msg$[200] ! alertfile
	Dim 1%,x1[9],tmp1
	Dim 2%,x2[9],tmp2,maxcnt \ maxcnt=50
	Dim 3%,r[99],tmp,tmp3
	dim List$[maxcnt,600] ! for .net 
	! --- saleslead file --------------------------

	DIM SLM$[360],SLM1$[8]
	DIM 4%,SLM1[5]
	DIM 2%,SLM2[13],CXR
	DIM 1%,SLM3[6]

	! --- customer file ---------------------------

	DIM A1$[142],A2$[30],A3$[22],U2$[60],BT$[20],PPU$[6],BPO$[20]
	DIM 2%,C1[12],C3[1],A0[3],REC8,C13[0],LPCF[1]
	DIM 1%,C2[2],C0,C7[4],C8,SUBST,S1,S0[20],SZN,C11[3],DWH
	DIM 1%,LPSEC,C14[1]
	DIM 2%,CUSTGRP,LPPPCUST,BUDGD[1]
	DIM 3%,C4[6],C5[5],C6[9],C9,U1,CFIN[8],BUDG[1]
	DIM 3%,S2[12,2],S3[5],C10[5],C12[3],PPDMIN

	Blank$=" ",Blank$

	call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
	!
	! OPTIONS$ & ACTION$ used in SLMENU.dl4 for routing
	COID = IntCo
	! open sledcntrl
	Read #CTLC,88,1072;J$[1,16];  ! Sledcntrl
	X1=j$[1,1]
	if x1=0 ! no lu
		tmp$="files/1/"+J$
		Open #5,tmp$
	Else ! has lu
		Open #5,J$[1,16] ! sledcntrl
	Endif
	J$ = "##########" \ Search #5,2,1;J$,FCR,E
	If E ! Gosub ERR_SEARCH
		ReturnStatus=0
		Message$="FILE CONTROL KEY NOT FOUND!"
		Goto OutDone
	Endif
	For X1 = 2 To 10
		Read X2
		If X2 <> -1
			If Abs(X2) < 10 ^ 4
				Read #CTLC,88,Abs(X2);J$[1,16];
			Else 
				Read #5,FCR,(Abs(X2) - 10 ^ 4);J$[1,16];
			End If 
			tmp$="files/"+J$[1,16] ! need this??
			If X2 > 0 Open #X1,J$[1,16] Else Ropen #X1,J$[1,16]
		End If 
	Next X1
	Data "10016","10032","10048","-1","1824","10064","1808","2064","2096"
	! catxr= DATA -10016,-10032,10048,-1,-1,10064,1808
	! frcust=DATA 10016,-10032,10048,-1,-1824,10064,1808
	! tocust=DATA 10016,-10032,10048,-1,-1824,10064,1808,2064
	! #2-SLEDMAIN  #3-SLEDDETL  #4-SLEDCODES  #5-SLEDCNTRL  #6-SLSM  #7-CATXREF
	! #8-CUSTOMER  #9-CUSTSLS, #10-CUSTCAT
	Mat Read #1,19,50;P9$;
	Mat Read #1,60,50;P60$;
	Mat Read #1,61,0;P61$;
	Action1$=UCase$(Action1$) ! upper case
	Action1$=RTrim$(Action1$) ! trim
	Action2$=UCase$(Action2$)
	Action2$=RTrim$(Action2$) ! make sure UPPERCASE and No blanks at end
	ReturnStatus=0
	Message$="ACTION1 NOT FOUND"
	Select Case Action1$
		Case "CTGXRF" ! Prosp <--> cust Catgy					doc=SLC-CustCatgyList.doc
			ReturnStatus=0
			Message$="ACTION2 NOT FOUND"
			If action2$="CCTGYLIST"
				! cust catgy list ! customer ctgy droplist
				ReturnStatus=1
				Message$="OK"
				Clear List$[]
				tmpcnt=maxcnt
				List$[0]=bsdel$,"CCTGYLIST",fdel$
				List$[1]="ID",fdel$,"DESC",fdel$
				Row=2
				For X1=1 to CHF(10)-1
					Try
						Mat Read #10,X1,0;J1$;
					Else
						j1$=""
					End try
					tmp$=RTrim$(j1$)
					If tmp$<>"" ! got something
						WebStr$=Str$(X1),fdel$,tmp$,fdel$
						List$[row]=WebStr$
						row=row+1
						if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
					Endif
				Next X1
				List$[row]=esdel$
				call AddToStr(e$,rstr$,List$[]) ! add droplist to string
			Endif
			If action2$="PCTGYLIST" ! prospect ctgy droplist	doc=SLC-ProspCatgyList.doc
				!taken from sledcodes
				ReturnStatus=1
				Message$="OK"
				Clear List$[]
				tmpcnt=maxcnt
				List$[0]=bsdel$,"PCTGYLIST",fdel$
				List$[1]="ID",fdel$,"DESC",fdel$
				Row=2
				J$=" ",j$
				do
					Search #4,3,1;J$,r4,E \ if e exit do
					Try ! as sled seems to have problems with BE 52!
					Mat read #4,r4,0;J1$;
					List$[row]=J$,fdel$,j1$[1,15],fdel$
					row=row+1
					if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
					Else
						REM
					End try
				loop
				List$[row]=esdel$
				call AddToStr(e$,rstr$,List$[]) ! add droplist to string
			Endif ! of prospect file catgy list
			If action2$="CURRXREF" ! list current xref			doc=SLC-CurrXRefList.doc
				! taken from sledcatxr
				ReturnStatus=1
				Message$="OK"
				Clear List$[]
				tmpcnt=maxcnt
				List$[0]=bsdel$,"XREFLIST",fdel$
				List$[1]="CCTGY",fdel$,"CDESC",fdel$,"PCTGY",fdel$,"PDESC",fdel$
				Row=2
				J$=" ",j$
				do
					Search #7,3,2;j$,R[7],E ! cust ctgy order
					If E exit do
					Try
					MAT READ #7,R[7];CXR$;
					MAT READ #7,R[7],4;CXR;
					CDESC$="INVALID CATEGORY"
					PDESC$="CTGY MISSING"
					If CXR>0 and CXR<CHF(10)
						Mat read #10,CXR,0;CDESC$;
					Endif
					K1$=CXR$+Blank$
					Search #4,2,1;K1$,R[4],E
					If Not(E)
						Try
							Mat read #4,R[4],0;PDesc$;
						Else
							PDesc$="NO DESC"
						End try
					Endif
					WebStr$=Str$(CXR),fdel$,CDesc$,fdel$,CXR$,fdel$,PDesc$,fdel$
					List$[row]=WebStr$
					row=row+1
					if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
					Else
						REM
					End try
				loop
				List$[row]=esdel$
				call AddToStr(e$,rstr$,List$[]) ! add droplist to string
			Endif ! of list curr
			If action2$="CLEARALL" ! clear all entries			doc=SLC-ClearXRefFile.doc
				ReturnStatus=1
				Message$="OK"
				K1$=" ",k1$
				Do
					Search #7,3,1;k1$,R[1],E
					If E exit do
					Search #7,5,1;k1$,R,E
					If E
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" DELETING XREF KEY1"
					Endif
				Loop
				K2$=" ",k2$
				Do
					Search #7,3,2;k2$,R[1],E
					If E exit do
					Search #7,5,2;K2$,R,E
					If E
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" DELETING XREF KEY2"
					Endif
					E=3;R=R[1]
					Search #7,1,0;k1$,R,E
					If E
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" RETURNING XREF RECORD"
					Endif
				Loop
			Endif ! of clear all
			If action2$="SVENTRY" ! enter/edit/delete			doc=SLC-SubmitXRefEntry.doc
				! enter / edit 
				ReturnStatus=1
				Message$="OK"
				Call DXGet("CCTGY",tmp$)
				X2=tmp$
				If X2<1 or X2>CHF(10)-1 or FRA(X2)
					ReturnStatus=0
					Message$="INVALID CUSTOMER CATEGORY"
					Goto OutDone
				Endif
				CCAT=X2
				Call DXGet("PCTGY",tmp$)
				J$=RTrim$(tmp$)
				If tmp$="" ! NONE = it's a delete? we'll try that
					K2$=CCAT Using "####"
					Search #7,2,2;K2$,R[7],E
					If E goto Outdone ! not found - leave
					MAT READ #7,R[7];CXR$;
					k1$=cxr$+Blank$
					K1$[5]=""
					Search #7,5,1;k1$,R,e
					Search #7,5,2;k2$,R,E
					if e 
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" DELETING XREF KEY2"
					Endif
					E=3;R=R[7]
					Search #7,1,0;k1$,R,E
					If E
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" RETURNING XREF RECORD"
					Endif
				Else ! add/edit
					K1$=J$+Blank$
					K1$[5]=""
					Search #4,2,1;k1$,R[4],E
					If E
						ReturnStatus=0
						Message$="Prospect Category not found!"
						Goto OutDone:
					Endif
					SEARCH #7,2,1;K1$,R7,E ! \ IF E>1 GOSUB ERR_SEARCH:
					IF NOT(E)
						MAT READ #7,R[7],4;CXR;
						If CXR<>CCAT
							ReturnStatus=0
							Message$="CATEGORY ALREADY ASSIGNED TO CUSTOMER CATEGORY "+Str$(CXR)
							Goto OutDone
						Endif
					ENDIF
					K2$=CCat Using "####"
					Search #7,2,2;K2$,R[7],E
					If NOT(E) ! existing ctgy - delete any old one
						Mat read #7,R[7];CXR$
						K1$=CXR$
						Search #7,5,1;k1$,R,E
						Search #7,5,2;K2$,r,e
						E=3;R=r[7]
						Search #7,1,0;k1$,R,E
					Endif
					CXR$=K1$[1,4]
					CXR=CCAT
					K1$=CXR$
					K2$=CXR Using "####"
					E=2 \ SEARCH #7,1,0;K1$,R[7],E 
					IF E ! GOSUB ERR_SEARCH:
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" GET NEW XREF RECORD"
						Goto OutDone
					Endif
					MAT WRITE #7,R[7];CXR$;
					MAT WRITE #7,R[7],4;CXR;
					SEARCH #7,4,1;K1$,R[7],E
					IF E ! GOSUB ERR_SEARCH:
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" INSERT NEW XREF KEY1"
					Endif
					SEARCH #7,4,2;K2$,R[7],E
					IF E ! GOSUB ERR_SEARCH:
						ReturnStatus=0
						Message$="S ERROR "+Str$(E)+" INSERT NEW XREF KEY2"
					Endif
				Endif
			Endif
		! end of catxref
		Case "PTOCUST" ! prosp to cust
			! routines for prospect to customer
			ReturnStatus=0
			Message$="ACTION2 NOT FOUND"
			If Action2$="SHODEFCUST" ! get default cust name	doc=SLC-ShowDefaultCust.doc
				ReturnStatus=1
				Message$="OK"
				Clear List$[]
				List$[0]=bsdel$,"DEFLTCUST",fdel$
				List$[1]="CUSTID",fdel$,"NAME",fdel$
				Row=2
				Call DXGet("DFCUSTID",tmp$)
				If tmp$="" let tmp$="999999"
				X2=tmp$ \ if x2<=0 or x2>999999 or fra(x2) let x2=999999
				K1$=X2 Using "######"
				Search #8,2,1;K1$,R[8],E
				if E ! no good
					ReturnStatus=0
					Message$="DEFAULT CUSTOMER "+STR$(X2)+" NOT FOUND!"
					Goto OutDone
				Endif
				Mat Read #8,r[8],0;A1$;
				List$[2]=Str$(X2),fdel$,RTrim$(A1$[31,60]),fdel$
				List$[3]=esdel$
				call AddToStr(e$,rstr$,List$[]) ! add droplist to string
			Endif ! of get deflt cust 
			If Action2$="CUSTLIST" ! customer search			doc=SLC-CusttoScan.doc
				ReturnStatus=1
				Message$="OK"
				CuC=8
				Call CustList(e$,IntCo,List$[],maxcnt,ctlc,cuc,0,"",UserId$)
				If E$<>""
					Let ReturnStatus=0
					Message$=E$
				Endif
				call AddToStr(e$,rstr$,List$[])
			Endif ! of customer list
			If Action2$="PROSPLIST" ! list prospects			doc=SLC-ToProspectList.doc
				! list prospects from start name
				ReturnStatus=1
				Message$="OK"
				Call DXGet("STRTNAME",tmp$)
				tmp$=RTrim$(tmp$) ! NO UPPERCASE? Yes - name U/L case  ID=UC
				K2$=tmp$
				Clear List$[]
				tmpcnt=maxcnt
				List$[0]=bsdel$,"PROSPLIST",fdel$
				List$[1]="PROSPID",fdel$,"NAME",fdel$
				Row=2
				Do
					Search #2,3,2;k2$,R2,e \ if e exit do
					Mat read #2,R2,0;SLM$;
					Mat Read #2,R2,360;SLM1$
					List$[row]=SLM1$,fdel$,RTrim$(SLM$[1,30]),fdel$
					row=row+1
					if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
				loop
				List$[row]=esdel$
				call AddToStr(e$,rstr$,List$[]) ! add droplist to string
				!end of customer list
			Endif ! end of prospect list
			If Action2$="CHKCUSTID" ! check if new id used		doc=SLC-CheckCustID.doc
				ReturnStatus=1
				Message$="OK"
				Call DXGet("CUSTID",tmp$)
				X2=tmp$
				If X2<=0 or X2>999999 or fra(X2)
					ReturnStatus=0
					Message$="INVALID CUSTOMER ID NUMBER!"
					Goto Outdone
				Endif
				Let k1$=X2 Using "######"
				Search #8,2,1;k1$,R[8],E
				If Not(E) ! found
					ReturnStatus=0
					Message$="CUSTOMER ID IS IN USE!"
				Endif
			Endif ! of check cust id
			If Action2$="SUBMITTOCP" ! submit & copy			doc=SLC-SubmitNewCust.doc
				ReturnStatus=1
				Message$="OK"
				Call SLtoCust()
			Endif
		! end of prosp to cust
		Case "PFRCUST" ! cust to prosp
			! routines for prospect from customer
			ReturnStatus=0
			Message$="ACTION2 NOT FOUND"
			If Action2$="CUSTLIST" ! customer search			doc=SLC-FromCustScan.doc
				ReturnStatus=1
				Message$="OK"
				CuC=8
				Call CustList(e$,IntCo,List$[],maxcnt,ctlc,cuc,0,"",UserId$)
				If E$<>""
					Let ReturnStatus=0
					Message$=E$
				Endif
				call AddToStr(e$,rstr$,List$[])
			Endif ! of customer list
			If Action2$="CHKPROSPID" ! check if prospect ID is used	doc=SLC-CheckProspID.doc
				ReturnStatus=1
				Message$="OK"
				Call DXGet("PROSPID",tmp$)
				Let J$=UCASE$(RTRIM$(tmp$)) ! UC & Trimmed
				If j$="" Goto OutDone ! null=auto gen code so it's ok
				If Len(J$)<6
					ReturnStatus=0
					Message$="ID TOO SHORT! IT MUST BE AT LEAST 6 CHARACTERS"
					Goto OutDone
				Endif
				Let K1$=J$+Blank$
				k1$[9]=""
				Search #2,2,1;k1$,R[2],E
				! call programdump("/tmp/sllog1!","")
				If Not(E)
					ReturnStatus=0
					Message$="PROSPECT ID IS IN USE!"
				Endif
			Endif ! of check new prospect ID
			If Action2$="SUBMITFRCP" ! submit & copy to sled	doc=SLC-SubmitNewProsp.doc
				ReturnStatus=1
				Message$="OK"
				Call CusttoSL()
			Endif ! of cust to sled
			If Action2$="SBMTFRCPRNG" ! submit & copy to sled	doc=SLC-SbmtRngProsp.doc 
				ReturnStatus=1
				Message$="OK"
				Call CusttoSLRng()
			Endif ! of cust to sled
		! end of prosp from cust

		! end of main select
	
	End Select
	OutDone: ! finished
	! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
Else
	include "src/callmainerrnet.inc"
end try
End ! the whole program
! ---------------------------------------------------------------------------------
Sub READCUST()  ! REM --- read customer file ----------------------
Try
	MAT  READ #8,r[8],0;A1$
	MAT  READ #8,r[8],142;C1
	MAT  READ #8,r[8],192;C2
	MAT  READ #8,r[8],200;C3
	MAT  READ #8,r[8],208;C0
	MAT  READ #8,r[8],210;C4
	MAT  READ #8,r[8],252;C5
	MAT  READ #8,r[8],288;C6
	MAT  READ #8,r[8],348;A2$
	MAT  READ #8,r[8],378;C7
	MAT  READ #8,r[8],388;A3$
	MAT  READ #8,r[8],410;C8
	MAT  READ #8,r[8],412;C9
	MAT  READ #8,r[8],418;S1
	MAT  READ #8,r[8],420;U1
	MAT  READ #8,r[8],426;U2$
	MAT  READ #8,r[8],486;A0
	MAT  READ #8,r[8],502;S0
	MAT  READ #8,r[8],544;CFIN
	MAT  READ #8,r[8],598;SZN
	MAT  READ #8,r[8],600;BT$
	MAT  READ #8,r[8],624;C10
	mat READ #8,r[8],660;c11;
	mat READ #8,r[8],668;c12;
	mat READ #8,r[8],692;c13;
	mat READ #8,r[8],696;dwh;
	mat READ #8,r[8],698;ppdmin;
	mat READ #8,r[8],704;lpcf;
	mat READ #8,r[8],712;lpsec;
	mat READ #8,r[8],714;custgrp;
	mat READ #8,r[8],720;c14;
	mat READ #8,r[8],724;lpppcust;
	mat READ #8,r[8],728;ppu$;
	mat READ #8,r[8],734;bpo$;
	mat READ #8,r[8],754;budg;
	mat READ #8,r[8],766;budgd;
  else
    include "src/callsuberr.inc"
  end try
end sub ! Readcust
! 
!--------------------------------------------------------------------
Sub WRITECUST() ! REM --- write customer file ----------------------
Try
	MAT  WRITE #8,r[8],0;A1$
	MAT  WRITE #8,r[8],142;C1
	MAT  WRITE #8,r[8],192;C2
	MAT  WRITE #8,r[8],200;C3
	MAT  WRITE #8,r[8],208;C0
	MAT  WRITE #8,r[8],210;C4
	MAT  WRITE #8,r[8],252;C5
	MAT  WRITE #8,r[8],288;C6
	MAT  WRITE #8,r[8],348;A2$
	MAT  WRITE #8,r[8],378;C7
	MAT  WRITE #8,r[8],388;A3$
	MAT  WRITE #8,r[8],410;C8
	MAT  WRITE #8,r[8],412;C9
	MAT  WRITE #8,r[8],418;S1
	MAT  WRITE #8,r[8],420;U1
	MAT  WRITE #8,r[8],426;U2$
	MAT  WRITE #8,r[8],486;A0
	MAT  WRITE #8,r[8],502;S0
	MAT  WRITE #8,r[8],544;CFIN
	MAT  WRITE #8,r[8],598;SZN
	MAT  WRITE #8,r[8],600;BT$
	Rec8=r[8]
	WRITE #8,r[8],620;rec8
	MAT  WRITE #8,r[8],624;C10;
	mat write #8,r[8],660;c11;
	mat write #8,r[8],668;c12;
	mat write #8,r[8],692;c13;
	mat write #8,r[8],696;dwh;
	mat write #8,r[8],698;ppdmin;
	mat write #8,r[8],704;lpcf;
	mat write #8,r[8],712;lpsec;
	mat write #8,r[8],714;custgrp;
	mat write #8,r[8],720;c14;
	mat write #8,r[8],724;lpppcust;
	mat write #8,r[8],728;ppu$;
	mat write #8,r[8],734;bpo$;
	mat write #8,r[8],754;budg;
	mat write #8,r[8],766;budgd;
	! as more fields added - add 'em here
	WRITE #9,r[8],0;C1[1]
	MAT  WRITE #9,r[8],4;S2
	MAT  WRITE #9,r[8],238;S2
	MAT  WRITE #9,r[8],472;S3
	WRITE #9,r[8],508;C3[0]; ! "last invoice date
else
    include "src/callsuberr.inc"
  end try
end sub ! writecust
! 
!--------------------------------------------------------------------
Sub READSLED() ! REM --- read sales lead file --------------------
Try
	MAT  READ #2,r[2],0;SLM$
	MAT  READ #2,r[2],360;SLM1$
	MAT  READ #2,r[2],368;SLM1
	MAT  READ #2,r[2],416;SLM2
	MAT  READ #2,r[2],472;SLM3
else
    include "src/callsuberr.inc"
  end try
end sub ! Readsled
! 
!--------------------------------------------------------------------
Sub WRITESLED() ! REM --- write sales lead file --------------------
Try
	MAT  WRITE #2,r[2],0;SLM$
	MAT  WRITE #2,r[2],360;SLM1$
	MAT  WRITE #2,r[2],368;SLM1
	MAT  WRITE #2,r[2],416;SLM2
	MAT  WRITE #2,r[2],472;SLM3
else
    include "src/callsuberr.inc"
  end try
end sub ! writesled
! 
!--------------------------------------------------------------------
Sub SLtoCust() ! copy sales lead to customer
Try
	Dim Nk1$[60],NK2$[60],NK3$[60],Nk4$[60],NK5$[60]
	Dim Work$[50],Work1$[50]
	DIM CUSTNOTEA$[100],CUSTNOTEA0$[68]
	DIM CSZ$[14]
	DIM 1%,CSZ1[6]
	DIM 2%,CSZCUST[2]
	Dim 2%,TODAY,odate,DfltCust,NewCust
	Dim 3%
	Work$=Tim(8) Using "&&" ! curr yr
	Work$[3]=Tim(9) Using "&&" ! curr mo
	Work$[5]=Tim(10) Using "&&" ! curr day
	Today=Work$[1,6]
	Call DXGet("DFLTCUST",tmp$)
	J$=RTrim$(tmp$)
	If J$=""
		ReturnStatus=0
		Message$="MISSING DEFAULT CUSTOMER ID!"
		Exit sub
	Endif
	X2=tmp$
	If X2<=0 or X2>999999 or fra(X2)
		ReturnStatus=0
		Message$="INVALID CUSTOMER ID NUMBER!"
		Exit sub
	Endif
	Let k1$=X2 Using "######"
	Search #8,2,1;k1$,R8,E
	If (E) ! not found
		ReturnStatus=0
		Message$="CUSTOMER ID IS NOT FOUND!"
		exit sub
	Endif ! of check cust id
	DFLTCUST=X2
	Call DXGet("NEWCUSTID",tmp$)
	J$=RTrim$(tmp$)
	If J$=""
		ReturnStatus=0
		Message$="MISSING NEW CUSTOMER ID!"
		Exit sub
	Endif
	X2=tmp$
	If X2<=0 or X2>999999 or fra(X2)
		ReturnStatus=0
		Message$="INVALID NEW CUSTOMER ID NUMBER!"
		Exit sub
	Endif
	Let k1$=X2 Using "######"
	Search #8,2,1;k1$,R[8],E
	If Not(E) ! found
		ReturnStatus=0
		Message$="NEW CUSTOMER ID IS IN USE!"
		exit sub
	Endif ! of check cust id
	NewCust=X2
	Call DXGet("PROSPID",tmp$)
	J$=UCASE$(RTRIM$(tmp$))
	k2$=J$+Blank$
	K2$[9]=""
	Search #2,2,1;K2$,R[2],E
	If E
		ReturnStatus=0
		Message$="PROSPECT ID NOT FOUND!"
		exit sub
	Endif
	Call ReadSled() ! read sledmain
	tmp$=SLM$[1,30] ! name
	if rtrim$(tmp$)="" ! NO NAME - NO COPY!
		ReturnStatus=0
		Message$="PROSPECT HAS NO NAME!"
		exit sub
	Endif
	! okay now start
	R[8]=R8 ! read default Customer
	Call READCUST()
	! transfer
	NK1$=K1$ ! new customer key1
	LET A1$[1,20]=SLM$[128,147] ! contact
	! --- phone number --------------
	LET WORK1$=Blank$
	IF SLM1[0]
		LET WORK$=STR$(SLM1[0])
		LET WORK1$=WORK$+Blank$
	ENDIF 
	LET A1$[21,30]=WORK1$[1,10]
	! transfer name/address
	LET A1$[31,137]=SLM$[1,107] ! name/addr/city
	A1$=UCase$(A1$) ! "cct99914- convert to all upper case 
	LET A2$[1,10]=SLM$[108,117] ! zip code
	LET C1[1]=K1$ \ LET SLM2[0]=C1[1] ! customer code - sledmain
	LET C1[2]=SLM2[9] ! salesman code
	LET C1[4]=C1[1] ! bill to code
	LET C1[6]=0 ! last edit date
	LET A3$[1,6]=C1[1] USING "######" ! alpha customer code
	a0[0]=SLM2[6] ! sic code
	c12[1]=c1[1] ! AR POST
	LET CFIN[7]=ToDay ! EDDATE
	LET C10[3]=TODAY ! EDDATE
	Let A2$[11,28]=Blank$ ! no tax exempt # copy
	!GOSUB CATGYSET: \ GOTO MAIN:
	IF SLM3[0]<=0 OR SLM3[0]>CHF(4)-1 LET WORK$="";E=1 \ GOTO L_3540:
	READ #4,SLM3[0],16;WORK$[1,4]; \ LET WORK$[5]=""
	IF WORK$="" LET E=1 \ GOTO L_3540 ! GOSUB ERR_SEARCH: ! missing category code
	SEARCH #7,2,1;WORK$,REC7,E ! \ IF E>1 GOSUB ERR_SEARCH:
	L_3540: ! HERE FOR PROSPECT CTGY PROBLEMS
	IF E
		ReturnStatus=0
		Message$="PROSP CATEGORY "+WORK$+" NOT DEFINED. NO CUSTOMER CREATED."
		exit sub ! fail
	ENDIF 
	READ #7,REC7,4;CXR;
	If CXR<=0 Or CXR>CHF(10)-1 or Fra(CXR)
		ReturnStatus=0
		Message$="CUST CATEGORY "+STR$(CXR)+" NOT DEFINED. NO CUSTOMER CREATED."
		exit sub ! fail
	ENDIF 
	! ====== CATEGORY VARIABLE IN CUSTOMER FILE =======
	LET C1[9]=CXR ! customer category
	!gosub clrsls
	LET C1[5]=0;C1[10]=0;C1[11]=0;C1[12]=0
	LET C3[0]=0;C3[1]=0;C9=0;CFIN[5]=0
	FOR X=0 TO 9
		IF X<=6 LET C4[X]=0
		IF X<=5 LET C5[X]=0;C10[X]=0
		LET C6[X]=0
		IF X<=3 LET CFIN[X]=0
	NEXT X
	LET C12[2]=1 \ LET C12[3]=0 ! abc
	BUDG[1]=0 ! budget used
	bt$=BLANK$ ! can't use default's bank info
	! -- set-up key 2
	LET NK2$=UCase$(A1$[31,60])+Blank$ \ LET NK2$[15]=NK1$
	! CALL $STRING,1,nk2$ ! cct99914 -already converted at line #2655 
	! -- directory 3 ----------
	LET NK3$=A3$[1,6]
	! -- directory 4 ----------
	LET NK4$=BT$[1,20];NK4$[21]=NK1$
	! -- directory 5 ----------                   
	LET NK5$[1,3]=C1[2] USING "###"             
	LET NK5$[4,9]=NK1$[1,6]                           
	LET NK5$[10,10]=" "
	NK5$[11]=""
	LET E=2 \ SEARCH #8,1,0;NK1$,REC8,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" GETTING NEW CUSTOMER RECORD"
		Exit sub ! get out now
	Endif
	R[8]=REC8 ! set to new record
	CALL WRITESLED() ! to save customer code
	Call WRITECUST()
	SEARCH #8,4,1;NK1$,REC8,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW CUSTOMER KEY1"
		Exit sub ! get out now
	Endif
	SEARCH #8,4,2;NK2$,REC8,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW CUSTOMER KEY2"
		!Exit sub ! get out now
	Endif
	SEARCH #8,4,3;NK3$,REC8,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW CUSTOMER KEY3"
		!Exit sub ! get out now
	Endif
	SEARCH #8,4,4;NK4$,REC8,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW CUSTOMER KEY4"
		!Exit sub ! get out now
	Endif
	SEARCH #8,4,5;NK5$,REC8,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW CUSTOMER KEY5"
		!Exit sub ! get out now
	Endif
	! NOW ANY ADDITIONAL NEW FILES (Notes, keyword, multizone, commission, etc)
	! notes first
	CH_NOTES=OpenFile(720,IntCo) \ if ch_notes=-1 Error 42
	ODAte=TIM(6) ! ToDay (julian)
	!K1$=DFLTCust Using "######"
	!Search #ch_notes,2,1;K1$,R[20],E
	!If Not(E) ! has notes (NOTHING TO COPY FROM DEFAULT HERE
	!	Mat read #ch_notes,R[20],0;CUSTNOTEA$;   
	!	Mat Read #ch_Notes,R[20],100;CUSTNOTEA0$;
	! ELSE
		CustNotea$=" ",CustNotea$ ! clear notes
		CustNoteA0$=" ",CustNotea0$ ! clear ap
	! ENDIF
	LET WORK1$=Blank$
	If SLM1[2] ! fax no
		LET WORK$=STR$(SLM1[2])
		LET WORK1$=WORK$+Blank$
	ENDIF 
	LET CustNoteA0$[9,28]=WORK1$[1,10]+Blank$
	Let K2$=NewCust Using "######"
	Search #ch_notes,2,1;K2$,R[21],E
	If E=1
		Let E=2;R[21]=0
		Search #ch_notes,1,0;k2$,R[21],E
		If Not(E) ! okay
			Mat Write #ch_notes,R[21],0;CUSTNOTEA$;  
			Mat Write #ch_Notes,R[21],100;CUSTNOTEA0$;
			MAT WRITE #ch_notes,R[21],168;ODATE;
			Mat Write #ch_Notes,R[21],172;NewCust;
			Search #ch_notes,4,1;K2$,R[21],E
			LET REC_LEN=((CHF(300+ch_NOTES)*2)-2)
			MAT  WRITE #ch_Notes,R[21],REC_LEN;BLANK$[1,1];
		Endif
	Endif ! of no existing
	Close #CH_Notes ! all done
	! Multizone (if needed)
	IF P61$[34,34]="Y" ! yes, uses multizones
		j$="3/CSZONE"+STR$(IntCo)
		Call FindF(J$,FOUND)
		If Not(Found) Goto CSMZDONE
		CH_CSZ=OpenFile(9997,IntCo) \ if ch_csz=-1 Error 42
		K1$=DFLTCust Using "######"
		K1$[7,13]=".000000"
		K1$[14]="" ! key is ALWAYS cccccc.ssssss
		Search #CH_CSZ,2,1;K1$,R[22],E
		If Not(E) ! found it
			MAT  READ #CH_CSZ,R[22],0;CSZCUST;
			MAT  READ #CH_CSZ,R[22],12;CSZ1;  
			MAT  READ #CH_CSZ,R[22],26;CSZ$;
			k2$=k1$
			k2$[1,6]=NewCust Using "######"
			Search #ch_csz,2,1;k2$,R[23],E
			If E=1
				Let E=2;R[23]=0
				Search #ch_csz,1,0;K2$,R[23],E
				If Not(E)
					Let CSZCust[0]=NewCust
					Let CSZCust[1]=0 ! shiplist (none)
					MAT  WRITE #CH_CSZ,R[23],0;CSZCUST;
					MAT  WRITE #CH_CSZ,R[23],12;CSZ1;  
					MAT  WRITE #CH_CSZ,R[23],26;CSZ$;
					Search #ch_csz,4,1;K2$,R[23],E
				Endif ! only write on got record
			Endif ! only add on not found
		Endif ! of found default
		Close #CH_CSZ
	CSMZDONE: ! finito
	Endif
	! now keywords (for customer data) uses a library call to autoupdate
	LET X1[1]=7;J1=R[8] ! K1  MODE & CustRec #             
	LET X1=0  ! shiplist record
	J$=" ",J$ ! not used here
	!J4$,K1,SLR,MODE,e$,Intco
	CALL "CSLKEYWRD.dl4",J$,J1,X1,X1[1],e$,IntCo
	! now send an alert
	CUR=rec8
	passinfo[0]=CTLC;passinfo[1]=CUR;passinfo[2]=newcust ! alert#,rec,custid
	pchan[1]=ctlc;pchan[2]=8;pchan[3]=0;pchan[4]=0 ! cntrl,cust,slsm,cspec
	msg$="New Customer Created from Prospect "+K2$
	call "libalertproc.lib",Passinfo[],Pchan[],msg$
	! all DONE?
else
    include "src/callsuberr.inc"
  end try
end sub ! sltocust
! 
!--------------------------------------------------------------------
Sub CusttoSL() ! copy customer to sales lead
Try
	Dim NK1$[60],NK2$[60],Work$[60],Work1$[60]
	DIM CODELIST$[40]
	CODELIST$="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	Dim 3%
	Call DXGet("CUSTID",tmp$)
	J$=RTrim$(tmp$)
	If J$=""
		ReturnStatus=0
		Message$="MISSING CUSTOMER ID!"
		Exit sub
	Endif
	X2=tmp$
	If X2<=0 or X2>999999 or fra(X2)
		ReturnStatus=0
		Message$="INVALID CUSTOMER ID NUMBER!"
		Exit sub
	Endif
	Let k1$=X2 Using "######"
	Search #8,2,1;k1$,R[8],E
	If E ! not found
		ReturnStatus=0
		Message$="CUSTOMER ID IS NOT FOUND!"
		exit sub
	Endif ! of check cust id
	Call ReadCust() ! read customer data
	Call DXGet("PROSPID",tmp$)
	J$=UCASE$(RTRIM$(tmp$))
	k2$=J$+Blank$
	K2$[9]=""
	If J$<>""
		Search #2,2,1;K2$,R[2],E
		If NOT(E)
			ReturnStatus=0
			Message$="PROSPECT ID IS IN USE!"
			exit sub
		Endif
		NK1$=K2$ ! NEW KEY
	Else ! create new one as it's null
		WORK$ = A1$[31,60]
		Work$=UCase$(WORK$) ! uppercase
		!GOSUB ALPHASIFT: (copied next)
		WORK1$=""
		FOR POS1=1 TO LEN(WORK$)
		   IF WORK$[POS1,POS1]>="A" IF WORK$[POS1,POS1]<="Z"
			   WORK1$ = WORK1$,WORK$[POS1,POS1]
		   ENDIF
		NEXT POS1
		WORK$=WORK1$
		NK1$ = WORK$[1,7]," "
		FOR K1=1 TO 8
			PI[K1] = 0
		NEXT K1

		CGCONT1: !
		SEARCH #2,2,1;NK1$, DUMMY, E

		IF NOT(E)
			PI=8
			CGCONT2: !
			PI[PI]=PI[PI]+1
			IF PI[PI] > LEN(CODELIST$)
				PI[PI]=1
				PI=PI-1
				IF PI<1
					ReturnStatus=0
					Message$="TOO MANY DUPLICATE CODES!"
					exit sub
				ENDIF
				NK1$[PI,PI] = CODELIST$[PI[PI],PI[PI]]
				GOTO CGCONT2:
			ENDIF
			NK1$[8,8] = CODELIST$[PI[8],PI[8]]
			GOTO CGCONT1:
		ENDIF
	Endif
	! clear sales lead variables
	SLM$  = " ",slm$ ! Blank$
	SLM1$ = " ",slm1$ ! Blank$
	FOR K1 = 0 TO 5
		SLM1[K1] = 0
	NEXT K1
	FOR K1 = 0 TO 13
		SLM2[K1] = 0
	NEXT K1
	FOR K1 = 0 TO 6
		SLM3[K1] = 0
	NEXT K1
	SLM2[1] = TIM(6) ! creation date
	! transfer name/address
	SLM$[1,107]=A1$[31,137] ! name/addr/city
	SLM$[108,117]=A2$[1,10] ! zip code
	SLM$[128,147]=A1$[1,20] ! contact
	WORK$=A1$[21,30]
	! GOSUB NUMSIFT: (copied next)
	WORK1$=""
	FOR POS1=1 TO LEN(WORK$)
	   IF WORK$[POS1,POS1]>="0" IF WORK$[POS1,POS1]<="9"
		   WORK1$ = WORK1$,WORK$[POS1,POS1]
	   ENDIF
	NEXT POS1
	WORK$=WORK1$
	SLM1[0]=WORK$ ! phone
	SLM2[0] = C1[1] ! customer code
	SLM2[9] = C1[2] ! salesman code
	catgy_bad=0
	! GOSUB CATGYSET: (copied into next lines)
	! ====== CATEGORY VARIABLE IN CUSTOMER FILE =======
	WORK$=C1[9] USING "####"
	SEARCH #7,2,2;WORK$,REC7,E ! \ IF E>1 GOSUB ERR_SEARCH:
	IF E
		Message$="CATEGORY "+WORK$+" NOT DEFINED."
		ReturnStatus=0
		catgy_bad=1
		exit sub ! return
	ENDIF

	READ #7,REC7;WORK$[1,4]; \ WORK$[5]=""
	Work$=Work$+Blank$
	Work$[5]=""
	! GOSUB PAD:
	SEARCH #4,2,1;WORK$,X2,E ! \ IF E>2 GOSUB ERR_SEARCH:
	IF NOT(E)
		SLM3[0] = X2
	ELSE
		SLM3[0] = 0
	ENDIF
	!if catgy_bad<>0 then return
	SLM1$ = NK1$+Blank$
	! IF LEN(SLM1$)<8 PRINT "KEY TOO SHORT!" \ STOP
	NK2$=SLM$ \ NK2$[17]=SLM1$
	NK2$=UCase$(NK2$)

	E=2 \ SEARCH #2,1,0;WORK$,REC3,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" GETTING NEW RECORD"
		exit sub
	Endif
	R[2]=Rec3
	Call WRITESLED()
	SEARCH #2,4,1;NK1$,REC3,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW KEY1"
		exit sub
	Endif
	SEARCH #2,4,2;NK2$,REC3,E
	IF E ! GOSUB ERR_SEARCH:
		ReturnStatus=0
		Message$="S ERROR "+Str$(E)+" INSERTING NEW KEY2"
		exit sub
	Endif
	! that's all for create sled
else
    include "src/callsuberr.inc"
  end try
end sub ! custtosl
! 
!--------------------------------------------------------------------
Sub CusttoSLRng() ! copy Range of customer to sales lead
Try
	Dim NK1$[60],NK2$[60],Work$[60],Work1$[60]
	DIM CODELIST$[40]
	CODELIST$="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	Dim 2%,SCustId,ECustId
	Dim 3%
	Call DXGet("SCUSTID",tmp$)
	J$=RTrim$(tmp$)
	If J$=""
		ReturnStatus=0
		Message$="MISSING CUSTOMER ID!"
		Exit sub
	Endif
	X2=tmp$
	If X2<0 or X2>999999 or fra(X2)
		ReturnStatus=0
		Message$="INVALID CUSTOMER ID NUMBER!"
		Exit sub
	Endif
	SCustid=X2
	Call DXGet("ECUSTID",tmp$)
	J$=RTrim$(tmp$)
	If J$=""
		ReturnStatus=0
		Message$="MISSING CUSTOMER ID!"
		Exit sub
	Endif
	X2=tmp$
	If X2<0 or X2>999999 or fra(X2)
		ReturnStatus=0
		Message$="INVALID CUSTOMER ID NUMBER!"
		Exit sub
	Endif
	ECustId=X2
	If ECustId<SCustId ! bad range
		ReturnStatus=0
		Message$="RANGE OF CUSTOMERS IS INVALID"
		Exit sub
	Endif
	X2=SCustID-1
	If SCustID=0 Let X2=0 ! as we can only do mode 3 in do...loop
	Let k1$=X2 Using "######"
	NumRec=0
	Do
		Search #8,3,1;K1$,R[8],E
		If E>1 exit do
		x2=K1$ \ if x2>ECustID exit do
		Call ReadCust() ! read customer data
		! create new one as it's null
		WORK$ = A1$[31,60]
		Work$=UCase$(WORK$) ! uppercase
		!GOSUB ALPHASIFT: (copied next)
		WORK1$=""
		FOR POS1=1 TO LEN(WORK$)
		   IF WORK$[POS1,POS1]>="A" IF WORK$[POS1,POS1]<="Z"
			   WORK1$ = WORK1$,WORK$[POS1,POS1]
		   ENDIF
		NEXT POS1
		WORK$=WORK1$
		NK1$ = WORK$[1,7]," "
		FOR K1=1 TO 8
			PI[K1] = 0
		NEXT K1

		RCGCONT1: !
		SEARCH #2,2,1;NK1$, DUMMY, E

		IF NOT(E)
			PI=8
			RCGCONT2: !
			PI[PI]=PI[PI]+1
			IF PI[PI] > LEN(CODELIST$)
				PI[PI]=1
				PI=PI-1
				IF PI<1
					ReturnStatus=0
					Message$="TOO MANY DUPLICATE CODES!"
					exit sub
				ENDIF
				NK1$[PI,PI] = CODELIST$[PI[PI],PI[PI]]
				GOTO RCGCONT2:
			ENDIF
			NK1$[8,8] = CODELIST$[PI[8],PI[8]]
			GOTO RCGCONT1:
		ENDIF
		! Endif
		! clear sales lead variables
		SLM$  = " ",slm$ ! Blank$
		SLM1$ = " ",slm1$ ! Blank$
		FOR K1 = 0 TO 5
			SLM1[K1] = 0
		NEXT K1
		FOR K1 = 0 TO 13
			SLM2[K1] = 0
		NEXT K1
		FOR K1 = 0 TO 6
			SLM3[K1] = 0
		NEXT K1
		SLM2[1] = TIM(6) ! creation date
		! transfer name/address
		SLM$[1,107]=A1$[31,137] ! name/addr/city
		SLM$[108,117]=A2$[1,10] ! zip code
		SLM$[128,147]=A1$[1,20] ! contact
		WORK$=A1$[21,30]
		! GOSUB NUMSIFT: (copied next)
		WORK1$=""
		FOR POS1=1 TO LEN(WORK$)
		   IF WORK$[POS1,POS1]>="0" IF WORK$[POS1,POS1]<="9"
			   WORK1$ = WORK1$,WORK$[POS1,POS1]
		   ENDIF
		NEXT POS1
		WORK$=WORK1$
		SLM1[0]=WORK$ ! phone
		SLM2[0] = C1[1] ! customer code
		SLM2[9] = C1[2] ! salesman code
		catgy_bad=0
		! GOSUB CATGYSET: (copied into next lines)
		! ====== CATEGORY VARIABLE IN CUSTOMER FILE =======
		WORK$=C1[9] USING "####"
		SEARCH #7,2,2;WORK$,REC7,E ! \ IF E>1 GOSUB ERR_SEARCH:
		IF E
			Message$="CATEGORY "+WORK$+" NOT DEFINED."
			ReturnStatus=0
			catgy_bad=1
			exit sub ! return
		ENDIF

		READ #7,REC7;WORK$[1,4]; \ WORK$[5]=""
		Work$=Work$+Blank$
		Work$[5]=""
		! GOSUB PAD:
		SEARCH #4,2,1;WORK$,X2,E ! \ IF E>2 GOSUB ERR_SEARCH:
		IF NOT(E)
			SLM3[0] = X2
		ELSE
			SLM3[0] = 0
		ENDIF
		!if catgy_bad<>0 then return
		SLM1$ = NK1$+Blank$
		! IF LEN(SLM1$)<8 PRINT "KEY TOO SHORT!" \ STOP
		NK2$=SLM$ \ NK2$[17]=SLM1$
		NK2$=UCase$(NK2$)

		E=2 \ SEARCH #2,1,0;WORK$,REC3,E
		IF E ! GOSUB ERR_SEARCH:
			ReturnStatus=0
			Message$="S ERROR "+Str$(E)+" GETTING NEW RECORD"
			exit sub
		Endif
		R[2]=Rec3
		Call WRITESLED()
		SEARCH #2,4,1;NK1$,REC3,E
		IF E ! GOSUB ERR_SEARCH:
			ReturnStatus=0
			Message$="S ERROR "+Str$(E)+" INSERTING NEW KEY1"
			exit sub
		Endif
		SEARCH #2,4,2;NK2$,REC3,E
		IF E ! GOSUB ERR_SEARCH:
			ReturnStatus=0
			Message$="S ERROR "+Str$(E)+" INSERTING NEW KEY2"
			exit sub
		Endif
		NumRec=NumRec+1
	Loop
	! that's all for create sled
	Message$="COMPLETE. "+Str$(NumRec)+" NEW PROSPECTS ADDED"
else
    include "src/callsuberr.inc"
  end try
end sub ! custtoslrng
! 
!--------------------------------------------------------------------