! >>> Program 262
!
! description Back Order Release Register
!
! loadsave -w -n 100,10 -o prog/dxport/262.dl4 src/262.src
!
! 1.0 mm/dd/yyyy change??
!
! ERP Assistant Enabled
!
include "src/copyright.inc" ! dx
Rem MX262 - PRODUCT BACK ORDER REGISTER
Rem AUTHOR: DAFFY DAN   MAR 26, 1987
Rem LAST UPDATE: rjs 11/24/93 add non-stock logic
!              vst 03/17/97 cct100981 changed wording in line #10510 
!              jlp 04/26/97 b/o in process flag moved to mx262b, CCT102571
!              jliu 12/03/97 remove div and whse from the prompt
! jliu 10/13/03 cct171339 add new prompt - only print released back order
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN 23, 2005  14:30:00
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx2/mx262.src (univ2) [txc] {27503}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault
Declare Intrinsic Sub DateToJulian
Declare External Function OpenFile,PDate$,getuidrec,JDate$
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub ERPCronSuccess
Declare Intrinsic Sub InpBuf,String,Time,FindF
!Option Default Dialect IRIS1

Com 1%,PFU1[20],CNVTU[2],UN[2],PRNTRBO,SSort,IntCo
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10],BASE,FIELD
Com 2%,C4[8],E$[500],Rstr$[1500]
If Err 0 Gosub ERR_TRAP

Dim L1$[60],L2$[20],C1$[30],B0$[12]
Dim 1%,L3[3],H4[2],S9,EUN[2],UN[2],DIV,WHSE,OLDS9,FOUNDALLORDERS
Dim 2%,L2[1],L4[3],L6[5],H0[12],H5[16],tmp
Dim 3%,L5[3],B0[12],L7[12],OLM[5],UNF[6],SCR,QB0[12]
Dim J$[40],J2$[20],J3$[40],J8$[8],U5$[10]
Dim J0$[15],J1$[50],J4$[75],J5$[70],unit$[4]
Dim 1%,F,X1,2%,X2,3%,J,X3,T9[20],bologging
Dim K1$[50],K2$[20],K3$[20],X$[10],T9$[26]
Dim S2$[12],P9$[50],2%
Dim SCRATCH$[80],msg$[100],linein$[80],logname$[100],spaces$[100]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
spaces$=" ",spaces$
!Try 
!call dxopen() ! may not need this! NEEDS FOR DXTEST RUN!!
!Else
	Rem
!End try
call env(1,"ERP_FROM_CRON",tmp$) \ erpCron = tmp$

Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=IntCo
gosub check_261264
Close #1 ! as getsession opens READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
For J = 2 To 7
  Read J1
  If Not(J1) Goto L_830
  Read #1,88,Abs(J1);J$;
  If J1 < 0 Ropen #J,J$ Else Open #J,J$
L_830: Next J
Data "-1888","-1840","-1808","-1792","2576","-1728"
Mat Read #1,0,100;J8$;
Mat Read #1,19,50;P9$;
Read #1,3;J1$;
linein$="check S9 " \ gosub Write_261264_log:
Read #1,20,2;S9;
OLDS9 = S9
if s9<=0 
	gosub check_reset
	if s9<=0 goto l_8900
endif
! move set to after okay to go
ASK: Rem----------------------------------------questions and stuff
!Print 'CS'; Tab (30);"BACKORDER REGISTER";
!Print @2,5;"1> Print released B/O's only ?";
!Gosub FLD1
INPUTS: Rem
!Print @0,23;"Enter #:field to edit,  P: Print, or  E: Exit";'CL';
!Input @47,23;""X$
call dxget("RN262",tmp$)
if erpCron tmp$ = "" ! running from cron - of course we want to do it!
X$="P" \ if tmp$<>"" Let X$="E"
!If X$ = "P" Goto L_1900
If X$ = "E" Goto DONE
!If X$ = "" Goto INPUTS
!X = X$
!If X <= 0 Or X > 1 Goto INPUTS
!On X Gosub FLD1
!Goto INPUTS
FLD1: Rem
!J0$ = "6    14505" \ J1 = 0
!J5$ = "Enter  Y or N "
!Call "INPUT",J1,J$,J0$,J1$,J4$,J5$
! Call DXGet("PRBO",tmp$) ! no need for prompt - ONLY RELEASED HERE!
!J1=0 \ if tmp$<>"" Let J1=1
PRNTRBO = 1 !  J1

L_1900: !Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
S9 = -2
Write #1,20,2;S9;
gosub write_log:
linein$="set S9 to -2 " \ gosub Write_261264_log:
IF ERR 0 GOSUB Err_Trap1:
!If Err 0 Let J8 = Spc(8)
J8 = 0;j2=0
Try J9 = Chf(0) Else Let J8=49 !  \ If Err 0 Gosub ERR_TRAP
!If Err 0 Gosub ERR_TRAP
!If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 62 \ If J8 Let J9 = 20
J1 = 999
If J8  ! can allow xml as EACH REPORT SEPARATE
		! <section>
		tmp$ = bsdel$,"262",fdel$,rdel$
		Call addtostr(e$,rstr$,tmp$)
		Tmp$="ITEM CODE",fdel$,"DESCRIPTION",fdel$,"DESCRIPTION2",fdel$
		Tmp$=Tmp$,"CUST #",fdel$,"CUSTOMER NAME",fdel$,"ORDER",fdel$
		tmp$=tmp$,"LNE",fdel$,"PRI",fdel$,"DUE DATE",fdel$,"QTY AVAILABLE",fdel$,"QTY B/O",fdel$
		tmp$=tmp$,"QTY REL",fdel$,"QTY LEFT",fdel$,"UM",fdel$
		call addtostr(e$,rstr$,tmp$+rdel$)
Endif
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!If Err 0 Gosub ERR_ESCAPE
FOUNDALLORDERS=1  ! SET AS IF ALL WILL BE OK
K1$ = " ",K1$
L_2000: Search #6,3,1;K1$,R6,E
If E Goto L_9100
linein$=" read bowork "+k1$ \ gosub Write_261264_log:
Mat Read #6,R6,0;B0$;
Mat Read #6,R6,12;B0;
R1 = B0[3]
Mat Read #2,R1,0;L2;
Mat Read #2,R1,8;L3;
Mat Read #2,R1,16;L4;
Mat Read #2,R1,32;L5;
Mat Read #2,R1,56;L6;
Mat Read #2,R1,80;L1$;
Mat Read #2,R1,140;L2$; \ Mat Read #2,R1,250;UN;
Mat Read #2,R1,404;OLM; \ Mat Read #2,R1,446;EUN; \ Mat Read #2,R1,452;UNF;
If B0[7] <> 1 And B0[7] <> 2 Goto L_2000
L7[3] = B0[6]
If B0[8] Let L7[3] = B0[8]
If L3 Let L2$[2,12] = L2$[1,11] \ L2$[1,1] = "+"
If S2$ <> "" If S2$ <> L2$[1,12] Gosub L_4500
If L3[0] Gosub L_30000
If Not(L3) Mat Read #5,L4,256;A;
If Not(L3) Mat Read #5,L4,512;PFU1; \ Mat Read #5,L4,554;PFU2;
h0[0]=999 ! fake flag setting
Gosub L_2500 !\ Goto L_2000
if h0[0]>7
	FOUNDALLORDERS=0  !! STATUS NOT RIGHT or just not found
	H0[4]=0
	if h0[0]=999
		C1$="Order not found"+spaces$
	else
		C1$="Order at status "+(h0[0] using "##")+spaces$
	endif
	h0[7]=l2[1]
	x$=spaces$
	gosub l_5800
	gosub l_5000
	goto L_2000
endif
Gosub L_3000
! If Not(L7[3]) Let L7[3] = L4[3] ! ??? IF NO BO LET BO=WHSE??
IF NOT(L7[3]) AND B0[8] LET L7[3]=B0[8] !! SOUNDS BETTER - IF NO BO LET BO=ORIG BO
If Not(L7[3]) and b0[6] let l7[3]=B0[6] !!
If Not(L7[3]) Let L7[3] = L7[4]
L5[3] = FNR(OLM[3] * L7[3])
Gosub L_5800
CNVTU[0] = 0 \ CNVTU[1] = PFU1[8] \ CNVTU[2] = 1
CNVTA = L7[3] \ Gosub L_7500
L7[3] = AMOUNT
CNVTA = B0[6] \ Gosub L_7500
QB0[6] = AMOUNT
CNVTA = B0[12] \ Gosub L_7500
QB0[12] = AMOUNT
If PFU1[8] > 0 Mat Read #7,PFU1[8],10;UNIT$;
If PFU1[8] = -1 Let UNIT$ = "CWT "
IF PFU1[8] = -3 LET UNIT$ = "LB  "
X2 = H5[1] \ Gosub L_7700
Gosub L_5000
Gosub L_2200
B0[7] = 2
Mat Write #6,R6,12;B0;
Goto L_2000
L_2200: Rem TOTALS CALC
T8[9] = T8[9] + L7[3] \ T9[9] = T9[9] + L7[3]
T8[10] = T8[10] + QB0[6] \ T9[10] = T9[10] + QB0[6]
Return 
L_2500: Rem GET ORDER HEADER
J2$ = " ",J2$ \ X2 = L2[1]
For J = 1 To 99
  J2$ = J Using "##"
  J2$[3] = X2 Using "######"
  Search #3,2,1;J2$,R3,E
  If Not(E) Goto L_2600
Next J
FOUNDALLORDERS=0  !! ORDER KEY NOT FOUND
Return 
L_2600: Rem FOUND ONE
Mat Read #3,R3;H0;
If H0 > 7 Return 
Mat Read #3,R3,78;H4;
Mat Read #3,R3,104;H5;
Return
L_3000: Rem GET CUSTOMER INFO
J3$ = " ",J3$ \ J3$ = H0[4] Using "######"
Search #4,2,1;J3$,R4,E
If E Goto L_3070
Mat Read #4,R4,30;C1$;
Return 
L_3070: Rem NOT FOUND
C1$ = "** ERROR ** CUSTOMER NOT FOUND"
Return 
L_4000: Rem TOTAL PRINT
If J8 goto L_4187
Goto L_4187
Print #0;"\15\** TOTALS **";
Print #0; Using "########.##"; Tab 110;T9[9];
Print #0; Using "########.##"; Tab 121;T9[10];
! Print #0;"\14\"; ! top of form
L_4187: Rem
Return 
L_4500: Rem PROD TOTAL
If Not(J8)
	Gosub L_5800
	Print #0;"\15\** PRODUCT TOTALS **";
	Print #0; Using "#######.##"; Tab 100;T8[9];
	Print #0; Using "########.##"; Tab 110;T8[10];
	Print #0; Using "########.##"; Tab 121;T8[9] - T8[10];
	Print #0;"\15\"
	J1 = J1 + 2
Endif
T8[9] = 0 \ T8[10] = 0
S2$ = ""
Return 
L_5000: Rem PRINT LINE
linein$=" print line " \ gosub Write_261264_log:
If J8 ! xml
	tmp$=L2$[1,12],fdel$,L1$[1,30],fdel$,L1$[31,57],fdel$
	tmp$=tmp$,H0[4] Using "######",fdel$,C1$[1,25],fdel$
	tmp$=tmp$,H0[7] Using "######",fdel$,L3[2] Using "###",fdel$
	tmp$=tmp$,(9 - B0[11]) Using "###",fdel$
	tmp$=tmp$,X$[1,10],fdel$
	tmp$=tmp$,qb0[12] Using "--------.##",fdel$,L7[3] Using "#######.##",fdel$
	tmp$=tmp$,QB0[6] Using "########.##",fdel$
	tmp$=tmp$,(L7[3] - QB0[6]) Using "########.##",fdel$
	tmp$=tmp$,unit$,fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
Else
	If S2$ = L2$[1,12] Goto L_5015
	Print #0; Tab 0;L2$[1,12];
	Print #0; Tab 13;L1$[1,30];tab 44;l1$[31,60]
	J1 = J1 + 1

	L_5015: Print #0; Using "######"; Tab 25;H0[4];
	Print #0; Tab 32;C1$[1,25];
	Print #0; Using "######"; Tab 58;H0[7];
	Print #0; Using "###"; Tab 62;L3[2];
	Print #0; Using "###"; Tab 69;9 - B0[11] Using "###";
	Print #0; Tab 73;X$[1,10];
	print #0; Using "--------.##"; tab 89;qb0[12];
	Print #0; Using "#######.##"; Tab 97;L7[3];
	Print #0; Using "########.##"; Tab 108;QB0[6];
	Print #0; Using "########.##"; Tab 120;L7[3] - QB0[6]
	J1 = J1 + 1
Endif
S2$ = L2$[1,12]
Return 
L_5800: Rem HEADINGS ROUTINE
If J8 Return ! xml - notused
J1 = J1 + 1 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 6
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;J8$; Tab (64 - Len(J1$) / 2);J1$; Tab 120;"PAGE";J2
Print #0;" - 262 - ";T9$;
Print #0; Tab 47;"R E L E A S E D     B A C K - O R D E R S"
Print #0;"\15\";
Print #0; Tab 0;"ITEM CODE";
Print #0; Tab 13;"DESC";
Print #0; Tab 25;"CUST #";
Print #0; Tab 32;"CUSTOMER NAME";
Print #0; Tab 58;"ORDER";
Print #0; Tab 64;"LNE";
Print #0; Tab 69;"PRI";
Print #0; Tab 73;"DUE DATE";
print #0; tab 90;"QTY AVAIL.";
Print #0; Tab 103;"QTY B/O";
Print #0; Tab 114;"QTY REL.";
Print #0; Tab 124;"QTY LEFT";
Print #0;" "
Print #0;"\15\";
Return 
L_7500: Rem UNIT CONVERSION RETURNS AMOUNT
CNVTU[0] = 0 \ CNVTU[1] = PFU1[8] \ CNVTU[2] = 1
Gosub L_20000
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$=PDATE$(X2)
Return
! old convert date
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 

L_8900: Rem NO IN PROCESS
linein$="abort S9= "+str$(s9) \ gosub Write_261264_log:
If S9 = 0 Message$="BACK ORDERS RELEASE NOT IN PROCESS "
If S9 = -2 Message$="A BACKORDER REGISTER IS BEING PRINTED ELSEWHERE"
If S9 = -1 Message$="BACKORDER ENTRY/EDIT CURRENTLY IN PROGRESS"
If S9 = -3 Message$="BACKORDER ACCEPT CURRENTLY IN PROGRESS"
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)

	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: !
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_30000: Rem ===== set units for conversions (stock/nonstock version)
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 

L_9100: Rem END OF THIS RANGE
Gosub L_4500
Gosub L_4000
!If J8 Print @0,23;"PRESS <CR> TO CONTINUE  ";'CL'; \ Input ""J$
For K = 0 To 10
  T9[K] = 0
Next K
!If K2$ = "" Goto OUTEND ! ALWAYS 
! End 
OUTEND: Rem EXIT PROGRAM
!Print 'CS'
IF NOT(FOUNDALLORDERS)
	linein$=" not all order headers found " \ gosub Write_261264_log:
	Write #1,20,2;OLDS9;
Else
	S9 = 2
	Write #1,20,2;S9;
	linein$=" set S9 to 2 " \ gosub Write_261264_log:
endif

If j8 ! dx xml (TO BROWSER )
  
  Call addtostr(e$,rstr$,esdel$) !end section
   !
  !External Lib "libgeneral.lib"
  !Declare External Sub XMLtoExcel
  !Call XMLtoExcel(e$,"262.txt",rstr$)
  !
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
Else
	IF NOT(FOUNDALLORDERS)
		tmp1$="Not all orders found"
	else
		tmp1$="OK - Report Complete"
	endif
End If
call ERPCronSuccess()
Try Close #0 Else REM
End
!Close #2,#3,#4,#5,#6
!Chain "MX262A"
!Stop 
DONE: Write #1,20,2;OLDS9;
tmp1$="OK - Report Not Run"
Call setoutput(e$,rstr$,1,tmp1$) !1 flag puts 0 status section, puts </page> in
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
include "src/callmainerrnet.inc"
End 
Rem {end rtn.error.s}

write_log: rem write out to log file that will be used to help
rem decide it auto recovery can be done
tmp$=coid using "cntrl/bopp#"
Call FindF(tmp$,e)
if e then kill tmp$
Build #30,+(tmp$+"!")
! system "touch "+linein$
close #30
open #30,tmp$
tmp$="262 "+(tim(5) using "##### ")+(((tim(11)*60)+tim(12)) using "####")
write #30;tmp$
close #30
return

err_trap1:  rem write to log file before producing error
tmp$=coid using "cntrl/bopp#"                     
system "touch "+tmp$                              
open #30,tmp$
tmp$="262 "+(tim(5) using "##### ")+(((tim(11)*60)+tim(12)) using "####")
tmp$=tmp$+" error err_trap"
write #30;tmp$ 
close #30         
gosub err_trap:
return

err_search1:  rem write to log file before producing error              
tmp$=coid using "cntrl/bopp#"                                             
system "touch "+tmp$
open #30,tmp$                                                             
tmp$="262 "+(tim(5) using "##### ")+(((tim(11)*60)+tim(12)) using "####") 
tmp$=tmp$+" error err_search"                                           
write #30;tmp$                                                            
close #30                                                                    
gosub err_search:                                                              
return                                                                       

check_reset:  rem see if this can be automatically reset
tmp$=coid using "cntrl/bopp#"      
call findf(tmp$,e)                                
!! if file not found, don't reset
if e
	open #30,tmp$ 
	read #30;tmp$
	if (s9=-1 or s9=-2)  and (tmp$[1,3]="261" or tmp$[1,3]="262")
		search tmp$,"error",e
		if not(e)
			!! does not look like an error involved
			tmp=tmp$[5,9]    ! date check
			if tmp<>tim(5) then s9=1
			tmp=tmp$[11,14]		!minutes check
			if ((tim(11)*60)+tim(12))-tmp>10 then s9=1
		endif
	endif
	close #30
endif
return

Write_261264_log: rem create/maintain and write to log to track flow of 261-264 activity
if bologging<>1 then return
logname$=intco using "tmp/bolog#"
tmp$=" ",tmp$
tmp1$=" ",tmp1$
tmp1$=(tim(8) using "&&")+(tim(9) using "&&")+(tim(10) using "&& ")+(tim(11) using "&&:")+(tim(12) using "&&:")+(tim(13) using "&& ")
if not(ch_bolog)
	found=0 \ CALL FINDF(logname$,FOUND)         
	IF NOT (FOUND)                                              
		BUILD #31,+logname$       
		close #31
		open #31,logname$
		PRINT #31;tmp1$;" 262 bolog created"   
	else
		gosub clean_261264:
		open #31,logname$
		log_pos_loop: read #31;tmp$
		if tmp$ goto log_pos_loop:
	endif
endif
ch_bolog=31
print #CH_BOLOG;tmp1$;" 262 ";LINEIN$
return


clean_261264: REM CLEAN OLD RECORDS FROM LOG
dateage=5
open #31,logname$
read #31;tmp$
close #31
if tmp$
	x=tmp$[1,6]
	X$=x using "&&&&&&"
	Call DateToJulian(1,X$,X$,e)
	x=x$[1,5]
	i=tim(8)*10000+tim(9)*100+tim(10)
	x$=i using "&&&&&&"
	Call DateToJulian(1,X$,X$,e) 
	i=x$[1,5]
	if i-x>dateage   !! checking number of days 1st entry is
		!close #31
		!linein$=intco using "tmp/bolog#"
		SYSTEM "mv "+logname$+" "+logname$+".bak" 
		BUILD #31,+logname$
		close #31
		open #31,logname$
		ropen #32,logname$+".bak"
		WHILE tmp$
			read #32;tmp$
			IF tmp$
				x$=tmp$[1,6]
				Call DateToJulian(1,X$,X$,e) 
				x=x$[1,5]
				if not (i-x>dateage)		!! checking number of days 1st entry is
					FOR j=1 TO LEN(tmp$)
						IF tmp$[j,j]<" " or tmp$[j,j]>"~"     
							LET tmp$[j,j]=" "                      
						ENDIF                                  
					NEXT j                                   
					print #31;tmp$
				endif	
			ENDIF
		WEND
		close #31,#32
		kill logname$+".bak" 
	endif
endif
return

check_261264: rem see if we should be doing the log
logname$="cntrl/log261264.ini"
bologging=0
found=0 \ CALL FINDF(logname$,FOUND)         
IF FOUND                                              
	open #31,logname$
iniloop: read #31;linein$
	if linein$
		if linein$[1,9]="log 262=Y" bologging=1
		goto iniloop: 
	endif
	close #31
endif
return