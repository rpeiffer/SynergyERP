!ubsprconv.src
!
! loadsave -w -n 100,10 -o prog/dxport/ubsprconv.dl4 src/ubsprconv.src
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare Intrinsic Sub Env
Dim e$[500]
! List of Subs and Functions in Lib
!
!  sub       PrConv
!  function  XAmount
!  function  XUnit$
!
! ----------------------------------------
 External Sub PRConv(PFU1[],PFU2[],A[],CNVTU[],CNVTA,ctlc,FLAG)

 DIM 1%,X1[9]
 DIM 2%,RECS[9],X1[9],Q0[1],E
 DIM 3%,AMOUNT
 DIM A$[14],F$[16],J4$[80],X$[20],P9$[50]
 DEF FNR(H)=INT(ABS(H)*100+.5)*.01*SGN(H)
 DEF FNN(H)=INT(ABS(H)*10^Q0[1]+.5)*10^-Q0[1]*SGN(H)
 DEF FNT(H)=INT(ABS(H)*10^Q0[1])*10^-Q0[1]*SGN(H)
 DEF FNV(H)=INT(ABS(H)*10^Q0[1]+.9999999)*10^-Q0[1]*SGN(H)
 DEF FNU(H)=INT(ABS(H)+SGN(FRA(ABS(H))))*SGN(H)
 DEF FNF(H)=INT(ABS(H)*10^F+.5)*10^-F*SGN(H)

 LET BUNIT=0
 IF CNVTU[2]<>5 GOTO L_880:
 LET BUNIT=1
 LET CNVTU[2]=1
 GOTO L_890:

 L_880: LET BUNIT=0

 L_890: REM
 MAT  READ #ctlc,19,50;P9$;
 MAT  READ #ctlc,115,40;Q0;
 ON CNVTU[2]+1 GOTO L_1000:,L_2000:,L_2000:
 
 L_1000: REM CHECK IF VALID CONVERSION

 FOR X1[1]=0 TO 1
   IF CNVTU[X1[1]]=0 GOTO L_1080:
   IF CNVTU[X1[1]]=-1 OR CNVTU[X1[1]]=-3 GOTO L_1080:
   FOR X1[2]=0 TO 7
     IF CNVTU[X1[1]]=PFU1[X1[2]] GOTO L_1080:
   NEXT X1[2]
   LET FLAG=1 \ GOTO L_8000:

 L_1080: NEXT X1[1]
 LET FLAG=0 \ GOTO L_8000:

 L_2000: REM CONVERT COST/PRICE/QTY
 LET AMOUNT=CNVTA
 FOR X1[1]=0 TO 1
   LET CMODE=1 \ IF X1[1] LET CMODE=-1
   IF CNVTU[X1[1]]=0 GOTO L_2170:
   IF CNVTU[X1[1]]=-1 OR CNVTU[X1[1]]=-3 GOTO L_2100:
   FOR CUNIT=0 TO 7
     IF PFU1[CUNIT]=CNVTU[X1[1]] GOTO L_2090:
   NEXT CUNIT
   LET FLAG=0 \ GOTO L_8000:

 L_2090: IF CUNIT=0 GOTO L_2170:

 L_2100: IF CNVTU[2]=2 LET CMODE=-CMODE
   IF CNVTU[X1[1]]=-1 ! " <>-1 GOTO L_2150: ! ITS CWT
     IF A[5] IF CMODE<0 LET AMOUNT=(AMOUNT*(A[6]/A[5]))/100
     IF A[6] IF A[5] IF CMODE>0 LET AMOUNT=AMOUNT*100/(A[6]/A[5])
   ELSE 
     IF CNVTU[X1[1]]=-3 ! " Catch Weight Item
       IF A[5] IF CMODE<0 LET AMOUNT=(AMOUNT*(A[6]/A[5]))
       IF A[6] IF A[5] IF CMODE>0 LET AMOUNT=AMOUNT/(A[6]/A[5])
     ELSE 
       IF CMODE>0 LET AMOUNT=AMOUNT*PFU2[CUNIT-1]
       IF PFU2[CUNIT-1] IF CMODE<0 LET AMOUNT=AMOUNT/PFU2[CUNIT-1]
     ENDIF 
   ENDIF 

 L_2170: NEXT X1[1]
 IF CNVTU[2]<>1 GOTO L_2180:
 IF BUNIT GOTO L_2180:
 IF CNVTU[1] IF CNVTU[1]<>PFU1[0] LET AMOUNT=FNR(AMOUNT)
 IF FRA(AMOUNT) IF NOT(CNVTU[1]) OR CNVTU[1]=PFU1[0] LET AMOUNT=FNU(AMOUNT)

 L_2180: IF CNVTU[2]<>2 GOTO L_2250:
 IF NOT(CNVTU[1]) GOTO L_2250:
 IF P9$[42,42]="N" LET AMOUNT=FNN(AMOUNT)
 IF P9$[42,42]="T" LET AMOUNT=FNT(AMOUNT)
 IF P9$[42,42]="U" LET AMOUNT=FNV(AMOUNT)

 L_2250: REM
 IF CNVTU[1] GOTO MOVE_ON:
 LET F=6
 IF INT(ABS(AMOUNT))
   FOR X=1 TO 6
     IF NOT(INT(ABS(AMOUNT)/10^X))
       LET F=6-X
       GOTO LOOP_DONE:
     ENDIF 
   NEXT X
 ELSE 
   FOR X=1 TO 3
     IF NOT(INT(ABS(AMOUNT)*10^X)) LET F=F+1
   NEXT X
 ENDIF 
 LOOP_DONE: LET AMOUNT=FNF(AMOUNT)
 MOVE_ON: LET FLAG=0
 GOTO L_8000:


 
 L_8000: REM RETURN FOR MODES 0-2
 LET CNVTA=AMOUNT

 OUTEND: REM OUT
 END SUB
!
! ----------------------------------------

External Function XAmount(CNVTU[],CNVTA,PFU1[],PFU2[],A[],ctlc,FLAG)
  !
  Declare External Sub PrConv
  !
  ! *** For use with old def structure, use ConvProdAmount in libprodconv.lib
  !
  REM UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
  DIM 3%,Amount
  !
  ! IF CNVTU[2]=3 GOTO PRCONV SECTION, SHOULD NOT HAPPEN: 
  ! 
  IF CNVTU[2]=1 AND CNVTU[1]=CNVTU[0] THEN
    LET AMOUNT=CNVTA
    EXIT FUNCTION AMOUNT
  END IF
  !
  IF CNVTU[0]=-2 OR CNVTU[1]=-2 THEN
    LET AMOUNT=CNVTA
    EXIT FUNCTION AMOUNT
  END IF
  !
  ! IF CNVTU[2]=0 GOTO L_20050:
  IF NOT(CNVTA) AND CNVTU[2]<>0 THEN
    LET AMOUNT=0
    EXIT FUNCTION AMOUNT
  END IF
  !
  REM "====== Converted External UB Call
  CALL PRCONV(PFU1[],PFU2[],A[],CNVTU[],CNVTA,ctlc,FLAG)
  ! 
  IF CNVTU[2]=0 OR FLAG THEN
    LET AMOUNT=0
    EXIT FUNCTION AMOUNT
  END IF
  !   
  LET AMOUNT=CNVTA
  !
END FUNCTION AMOUNT ! xamount
!
! ----------------------------------------
EXTERNAL FUNCTION XUnit$(UNIT, CCHAN)
  ! 
  Try
    !
    DIM UNIT$[4],e$[500]
    !
    Unit$ = " ",Unit$
    !
    IF UNIT=-1 LET Unit$="CWT "
    IF UNIT=-2 LET Unit$="LOT "
    IF UNIT=-3 LET Unit$="LB  "
    !
	If UNIT>0 AND UNIT>CHF(CCHAN)-1 LET UNIT=-99 ! bad data past eof
    IF UNIT>0 THEN
      MAT READ #CCHAN,UNIT,10;Unit$;
    END IF
	IF UNIT=-99 LET UNIT$="????"
  else
    include "src/callsuberr.inc"
  end try
  !
END FUNCTION Unit$
