! >>> Program 326a
!
! description 326a Collection Note Purge
!
! loadsave -w -n 100,10 -o prog/dxport/326a.dl4 src/326a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dxRem BEDIT Version: 2.2 OBJECT CODE     Created: APR 21, 2008  21:57:30
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/mx/mx326a.src (univ2) [bill] {16509}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

!Declare Intrinsic Sub DateToJulian,InpBuf,Logic,String,VerifyDate
!Option Default Dialect IRIS1
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile 
Declare External Sub UserCntrl


!
!!Option Default Dialect IRIS1
Try 
Rem mx326A         COLLECTION REPORT PURGE
Rem Author:       B.SWET 03/13/96
Rem                UNIVERSAL BUSINESS SYSTEMS
If Err 0 Gosub ERR_TRAP
dim A2$[50],1%,A5[10],3%,STATUS
Dim 1%,E
Dim 2%,SDATE,X1,X2,P1,P2,SFOUND,DIV,TMP
Dim 3%,R1,R2,CN3[4],CUST,CNUM,FOLLOW,LINE_,CFIN[8]
Dim K$[30],K1$[30],K2$[30],A1$[30],D$[8],F$[35],CN$[70]
Dim M$[6],N$[30],CDIV$[2],DNAME$[24],BCUST$[6],ECUST$[6]
Dim T9$[26],X$[10],Z1$[25],X1$[10],2%,EDATE
Dim 2%,DT3[1],JSDATE,JWDATE,3%
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1],j$[50]
!!! check this
Dim b$[200]!

!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!
! Call dxsave(0,"/tmp/md.txt!")
j8 = 0
try
	J9 = Chf(0) 
else
	let j8=99 ! browser
end try
L9 = 60 \ If J8 Let L9 = 22
If Err 0 Gosub ERR_TRAP
for ctr=1 to 99
	if ctr<>9
		Try Close #ctr Else Rem
	endif
next ctr

COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1
!X2 = Spc(5)
!F$ = Int((X2 - Int(X2 / 16384) * 16384) / 64) Using "CNTRL#"
Read #1,3;N$;
Mat Read #1,3,164;D$;
M$ = "##########"
Read #1,3,172;SDATE;
X2 = SDATE \ Gosub L_7700
!Call DXGet("S_USER.ID",tmp$) ! get from system variable
! Let UserID$=UCase$(tmp$) ! make sure it's UPPERCASE as that's what PM uses
Call UserCntrl(USERID$,A2$,A5[],status,intCo)
if a5[6]=0
	eflag=99
	message$="User is not authorized to edit/delete/purge collection notes.  Please contact your administrator."
	goto outend:
Endif

! Purge Date
Call dxget("PURGEDATE",tmp$)
if rtrim$(tmp$)="" 
	let eflag=eflag+1
	let Message$=Message$+" PurgeDate Needs to be Entered. "
	goto getdiv:
endif
! need to convert for mmddyy to julian
LET TMP3=TMP$
LET TMP$=TMP3 USING "&&&&&&"
LET TMP1$=TMP$[5,6],TMP$[1,4] ! from mmddyy to yyddmm
let x2=tmp1$
gosub L_7820: ! convert from yyddmm to julian
sdate=tmp1$! error
sdate=tmp1$
if e<>0
	let eflag=eflag+1
	let message$=message$+" Invalid Date Entered. "
else
	let jsdate=x2
	let sdate=tmp1$
endif


getdiv: ! 
call dxget("DIV",tmp$)
let j1=tmp$
if j1<0 or j1>99
	let eflag=eflag+1
	let message$=message$+"Invalid Division Entered. "
else
	let div=j1
endif

! customers
Call dxget("SCUST",tmp$) \ tmp=tmp$ ! starting customer
if tmp<0 or tmp>999999
	let eflag=eflag+1
	let message$=message$+"Invalid Starting Customer Entered. "
else
	let bcust$=tmp using "######"
endif
Call dxget("ECUST",tmp$)
if rtrim$(tmp$)=""
	let tmp$="999999"
endif
if tmp<0 or tmp>999999
	let eflag=eflag+1
	let message$=message$+"Invalid Ending Customer Entered. "
else
	let ecust$=tmp using "######"
endif
if Bcust$>Ecust$
	let message$=message$+"Ending Customer must be greater than Starting. "
	let eflag=eflag+1
endif
Call dxget("CONFIRMPURGE",tmp$) ! auditonly
if rtrim$(tmp$)="false" let tmp$=""
let audonly=99
if rtrim$(tmp$)="" ! not a preview
	let audonly=0
endif
if eflag<>0 goto outend:
FOR J=2 TO 4                             
  READ J1                                
  IF J1=-1 GOTO L_270:                   
  READ #1,88,ABS(J1);F$;                 
  IF J1<=0 ROPEN #J,F$ ELSE  OPEN #J,F$  
L_270: NEXT J                            
DATA -688,736,-1808                      


L_1500: Rem CHECK PRINTER TYPE
P2 = 0
P1 = 0
L9 = 60 \ If J8 Let L9 = 22
!Print @0,23;'CL';"SEARCHING ...please wait";
Gosub L_3000 ! sorting
!Print @0,23;'CL';"PRINTING ...please wait";
!Signal 3,0
!If P2 Print 'CS'
K1$ = ""
CDIV$ = ""
L_2020: Search #9,3,1;K1$,R1,E
If E Goto L_9100
CNUM = K1$[9,13]
K$ = ""
K$ = K1$[3]
L_2060: Search #3,3,1;K$,R1,E
If E Goto L_2020
Mat Read #3,R1;CN$;
Mat Read #3,R1,70;CN3;
If K1$[3,8] <> K$[1,6] Goto L_2020
If CN3[2] <> CNUM Goto L_2020
K2$ = K1$[3,8] \ Gosub L_6000
If CDIV$ = K1$[1,2] Goto L_2160
CDIV$ = K1$[1,2] \ J9 = 99
L_2160: Gosub L_5800
If CN3[3] > 1 Gosub L_5100 \ Goto L_2180
Gosub L_5000
L_2180: Goto L_2060
Goto L_2020
L_3000: Rem sort collection notes
K$ = BCUST$
L_3020: Search #3,3,1;K$,R1,E
If E Goto L_3130
If K$[1,6] > ECUST$ Goto L_3130
Mat Read #3,R1;CN$;
Mat Read #3,R1,70;CN3;
If CN3[3] <> 0 Goto L_3110
If CN3[1] Goto L_3110
X2 = CN3[0] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE > JSDATE Goto L_3110
K2$ = K$[1,6] \ Gosub L_6000
If Not(DIV) Goto L_3088
If CFIN[4] <> DIV Goto L_3110
L_3088: K1$ = CFIN[4] Using "##" \ K1$[3] = K$
Search #9,4,1;K1$,R1,E
If E Gosub ERR_SEARCH
!!! purgelog
	!Print @20,17;'CL';K1$[3,13];
SFOUND = 1
L_3110: K$[12,14] = "999"
Goto L_3020
L_3130: Return 
L_4000: Rem ======================================= CLEAR OPTION
If Not(SFOUND) Goto L_9100
If audonly<>0 goto outend:
!L_4020: Input @0,23;'CL';"DO YOU WISH TO PURGE THESE CALLS ? (YES/N) ";F$
!Call String(1,F$)
!If F$ = "N" Goto OUTEND
!If F$ <> "YES" Goto L_4020
!! purgelog
	! Print @0,23;'CL';"PLEASE WAIT PURGING FILE ..... ";
if pageflag=0
	Call addtostr(e$,rstr$,esdel$) !end section
	 Message$="Purge is still processing.  Check myreports later. "
	 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	 call addToStr(e$,rstr$,webstr$)
	 call setoutput(e$,rstr$)
  ! Call setoutput(e$,rstr$,2) !2 fl
	let pageflag=99
endif
K1$ = ""
L_4060: Search #9,3,1;K1$,R1,E
If E<>0 Goto OUTEND
CNUM = K1$[9,13]
K$ = ""
K$ = K1$[3]
Search #3,2,1;K$,R2,E
If E Gosub ERR_SEARCH
Goto L_4200
L_4140: Search #3,3,1;K$,R2,E
If E Goto L_4060
Mat Read #3,R2;CN$
Mat Read #3,R2,70;CN3
If K1$[3,8] <> K$[1,6] Goto L_4060
If CN3[2] <> CNUM Goto L_4060
L_4200: Search #3,5,1;K$,R2,E
If E Gosub ERR_SEARCH
E = 3
Search #3,1,0;K$,R2,E
If E Gosub ERR_SEARCH
Goto L_4140
L_5000: Rem print all stuff =================================================
let totrec=totrec+1
Print #0;A1$[1,25];" ";K1$[3,8];" ";K1$[9,13];" ";CN$[1,70];" ";
X2 = CN3[0] \ Gosub L_7700
Print #0; Tab 112;X$
Return 
L_5100: Rem PRINT REST OF DETAIL
Print #0; Tab 39;CN$[1,70];
X2 = CN3[0] \ Gosub L_7700
Print #0; Tab 112;X$
Return 
L_5400: Rem PRINT OUT DIVISION NAME
DNAME$ = "DIVISION NOT FOUND"
DIV = CDIV$[1,2]
If Not(DIV) Goto L_5450
Mat Read #2,DIV;DNAME$;
L_5450: Return 
L_5800: Rem NEW PAGE ROUTINE
J9 = J9 + 1
If P1 = 0 Goto L_5880
If J9 < L9 Return 
If Not(P2) Goto L_5870
! Input @0,23;'CL';"PRESS <CR> TO CONTINUE "F$ \ Print 'CS' \ Goto L_5880
L_5870: Print #0;"\14\";
L_5880: J9 = 8
P1 = P1 + 1
if p1>100 and pageflag=0
	Call addtostr(e$,rstr$,esdel$) !end section
	 Message$="Report is still processing.  Check myreports later. "
	 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	 call addToStr(e$,rstr$,webstr$)
	 call setoutput(e$,rstr$)
  ! Call setoutput(e$,rstr$,2) !2 fl
	let pageflag=99
endif
T9$ = "" \ Call Time(T9$)
Print #0; Tab (66 - Int(Len(N$) / 2));N$
Print #0;"\15\";"- 326A-"; Tab 10;"DATE"; Tab 15;T9$;
Print #0; Tab 54;"A/R COLLECTION NOTES FOR PURGING";
Print #0; Tab 105;"PAGE # "; Tab 113;P1
Print #0;" "
If audonly Print #0;"*Preview*";
Gosub L_5400
Print #0; Tab 48;"DIVISION: ";DIV;" ";DNAME$
Print #0;" "
Print #0; Tab 8;"NAME"; Tab 26;"CUST #"; Tab 33;"CALL#";
Print #0; Tab 48;"NOTES"; Tab 113;"INPUT"
Print #0;" "
Return 
L_6000: Rem READ CUSTOMER RECORD
A1$ = " ",A1$
A1$[1,18] = "CUSTOMER NOT FOUND"
CFIN[4] = 0
Search #4,2,1;K2$,R2,E
If E Goto L_6070
Mat Read #4,R2,30;A1$;
Mat Read #4,R2,544;CFIN;
L_6070: Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 

L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 

L_7900: Rem  date
X1$ = X2 Using "&&&&&&"
X$ = " ",X$
X$ = X1$[1,2],"/",X1$[3,4],"/",X1$[5,6]
Call VerifyDate(X$,X1$,E)
Return 



L_9100: Rem NO MORE
!If Err 0 Rem
!Close #0
!If Err 0 Gosub ERR_TRAP
If Not(P2) and SFOUND<>0 Goto L_4000
!Input @0,23;'CL';"NOTHING PURGED !!! PRESS <CR> TO EXIT "F$
Goto OUTEND
End 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End


ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
if not (pageflag)
if not(j8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions"
			message$=message$+"."
		else
			Let message$=message$+" "+"Complete "
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
endif ! pageflag
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
