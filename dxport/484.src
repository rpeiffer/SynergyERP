! >>> Program 484
!
! description Sold Serial Number Purge
! loadsave -w -n 100,10 -o prog/dxport/484.dl4 src/484.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem SN484 SERIAL NUMBER PURGE (PAID ONLY)
Rem AUTHOR: UBS 05/92
Rem Last Update: 03/26/1997 - DATE CHECK JULIAN
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR 30, 2001  16:02:45
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx1/sn484.src (univ2) [kag] {54985}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel

External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
If Err 0 Gosub ERR_TRAP
Dim 2%,intco
Dim rstr$[5000],Message$[600]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim nextblockid$[8],WebStr$[600],blank$[200]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim J$[40],J0$[10],J1$[40],J2$[20]
Dim J4$[40],J5$[75],J6$[40],J7$[75],J9$[75]
Dim K$[50],K1$[50],K2$[50],K3$[50],U5$[16]
Dim P9$[50],X$[10],ITEM$[10],K4$[60]
Dim 1%,A,B,D,E,F,I,J0,L1,L2,L3,M,P,T9,W,X,X1,Y,Y9,Z
Dim 1%,SN1[2],J9[2]
Dim 3%,J,J8
Dim SN$[224]
Dim 2%,SN2[9],PURDAT,F1,F2,K1,R1,R2,V1
Dim 2%,DT3[1],JWDATE,JPDATE,3%
blank$=" ",blank$
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Read #CTLC,19,50;P9$;
Read #CTLC,18,50;ITEM$;
For I = 2 To 3
  Read W \ If W = -1 Goto L_290
  Read #CTLC,88,W;U5$;
  Open #I,U5$
L_290: Next I
Data "416","2992"
X2 = Chf(302) - 1
!Dim 1%,Z2[X2],3%
Returnstatus=0
Tmp1$=""
!Print 'CS';@0,0;"SOLD SERIAL NUMBER HISTORY PURGE";@50,0;"SN484 - REV 1.0";
!Print @10,3;'CL';@10,3;"FOR DATE ENDING"
L_1000: Rem "================================ inputs
!J0$ = "5 00064103" \ J1 = 0
!Gosub L_7000
call dxget("PURDAT",tmp$) ! what's date sent as this time?
J4$=tmp$;X$=tmp$[5,6],tmp$[1,4] ! hopefully date = MMDDYY
j1=x$
If J4$ = "" or j1=0 Goto L_8900 ! OUTEND
PURDAT = J1
X2 = PURDAT \ Gosub L_7820 \ Gosub BadData
JPDATE = X2
L_1080: ! Gosub L_1500
!Print @5,5;"ENTER STARTING ";ITEM$;", <CR> FOR FIRST,   E: TO EXIT: ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
Call dxget("SPROD",J$)
K$ = UCase$(J$)+Blank$
k$[13]="" ! max 12
!Print @11,7;"ENDING   ";ITEM$;", <CR> FOR LAST,    E: TO EXIT: ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
Call dxget("EPROD",J$)
If J$ = "" Let J$ = "}}}}}}"
K1$ = UCase$(J$)+Blank$
k1$[13]="" ! max 12
If K$ <= K1$ Goto L_1090
!Print @0,22;'CE RB';"INVALID RANGE!"; \ Signal 3,30 \ Goto L_1080
Returnstatus=1 ! block reversed 0=okay, 1=error
Message$="INVALID PRODUCT RANGE"
GOSUB BadDataOut
L_1090: Rem
L_1160: Rem
if returnstatus=1 ! some issue so no purge
	message$=tmp1$ ! holds reasons
	goto OutEnd 
Endif
!Print @20,22;'CL';"OK TO START PURGE? (Y/N) ";
!Input ""J1$ \ If J1$ = "N" Goto OUTEND
!If J1$ <> "Y" Goto L_1160
!Print @0,22;'CE'
L_1200: Rem "========================================= start here
L_1210: Search #2,3,2;K$,R1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_8900
If K$[1,Len(K1$)] > K1$ Goto L_8900
Mat Read #2,R1,290;SN1;
If SN1[2] <> 1 Goto L_1210
Mat Read #2,R1,298;SN2
X2 = SN2[6] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If SN2[6] = 0 Or JWDATE > JPDATE Goto L_1210
Mat Read #2,R1,0;SN$
Gosub L_2000 ! purge repair history
! Mat Write #2,R1;Z2;
Search #2,5,2;K$,R1,E
If E Gosub ERR_SEARCH
K2$ = " ",K2$;K2$[1,30] = SN$[35,64];K2$[31] = K$[25]
Search #2,2,1;K2$,R2,E
If E Gosub ERR_SEARCH
If R1 <> R2 Let E = 1 \ Gosub ERR_SEARCH
Search #2,5,1;K2$,R2,E
If E Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;K$,R1,E
If E Gosub ERR_SEARCH
!Print @0,22;"Purging...";K$[1,12];
!Signal 3,0
Z9 = Z9 + 1
Goto L_1200
!L_1500: Rem "================================== get ranges

!Return 
L_2000: Rem PURGE REPAIR FILE
K3$ = " ",K3$;K3$[1,12] = SN$[1,12];K3$[13,42] = SN$[35,64]
L_2010: Search #3,3,1;K3$,R3,E \ If E = 2 Return 
If E Gosub ERR_SEARCH
If K3$[1,12] <> SN$[1,12] Or K3$[13,42] <> SN$[35,64] Return 
K4$ = " ",K4$;K4$[1,30] = K3$[13,42];K4$[31,42] = K3$[1,12];K4$[43] = K3$[43]
Search #3,2,2;K4$,R4,E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_2010
Search #3,5,2;K4$,R4,E \ If E Gosub ERR_SEARCH
K4$ = K3$
Search #3,5,1;K4$,R4,E \ If E Gosub ERR_SEARCH
E = 3
Search #3,1,0;K3$,R3,E \ If E Gosub ERR_SEARCH
Goto L_2010
Return 

L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2<=0 Return
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/snp484se!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
BadData: ! bad date
Returnstatus=1
Message$="INVALID DATE ENTERED"
BadDataOut: ! save all errors
tmp1$=tmp1$+" "+Message$
return
L_8900: Rem DONE
!Print @0,22;'CE RB';Z9;"SERIAL NUMBERS PURGED!"
!Print @0,23;"PRESS <CR> TO EXIT  ";
!Input ""J$ \ Goto OUTEND
Returnstatus=0
Message$="COMPLETE OK - PURGED "+Str$(Z9)
goto outend
OUTEND: Rem EXIT ROUTINE
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
Rem {end rtn.error.s}
End