! >>> Program rebatecustimport.dl4
!
! description: rebatelineimport utility will validate data and do update
! loadsave -w -n 100,10 -o prog/dxport/rebatecustimport.dl4 src/rebatecustimport.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"


Rem BEDIT Version: 2.5 OBJECT CODE     Created: MAY 15, 2017  16:13:39
Rem /x/w2/pm/r2005//x/usracct/becky/work/custom/xrev9/rebatecustomerimport.src (synergyux.synergy.n) [rjs] {27121}
Rem  Copyright (c) 2017 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub FileInfo,FindF,InpBuf,String
!Option Default Dialect IRIS1
Declare Intrinsic Sub Date,FileInfo,FindF,InpBuf,String,Time,VerifyDate,DateToJulian,StringSearch,FormatDate
Declare Intrinsic Sub Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Declare External Function GetUIDRec,GetUIDInfo$
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort
Rem rebatecustomerimport utility will validate data and do update
!If Err 0 Gosub ERR_TRAP
Try
dim custom_customer$[30]
Dim J$[40],J0$[12],J1$[40],J2$[20],J5$[77],J7$[40],J9$[50],J4$[75]
Dim K$[50],K1$[50],K2$[50],K3$[50],RCN$[70],RB$[12],SPUDA2$[30],D$[8],UOM$[4]
Dim 3%,RCN3[3],2%,RB1[5],1%,RBUM[1],RB[2],3%,RB3[6],1%,RBWH,3%,RBN,CUST
Dim 1%,RBL1[1],2%,RBMIN,RBCOM,3%,RB5[2],WK
Dim PROD$[50],X$[5000],WK$[5000],WK1$[5000],CC$[4],CTL$[5000]
Dim 3%,COST
Dim F$[16],Z1$[16],CUST$[10],VEND$[10],VITEM$[20]
Dim 1%,PFU1[20],CNVTU[9],3%,PFU2[6],CNVTA[4],A[33],P9$[50]
Dim 2%,RECS[8],X1[9],Q0[1],B[24]
Dim 3%,CUST,VENDOR,CONTRACT,EDATE,JDATE,CJDATE,WKDATE$[10],CUSTOMER
Dim 3%,CONTTYPE,REBTYPE,SLSCOSTTYPE,FACTOR,SLSMFACTOR,SLSMBASE
Dim 3%,BADREC
Dim HSDATE$[10],HEDATE$[10],CONTACT$[20],PHONE$[20],DESC$[20]
Dim DSDATE$[10],DEDATE$[10],DESC$[20],VCONT$[20],VDESC$[20],A$[156]
Dim CVCONT$[20],VENDCNT$[50],S$[500],KEY_$[50],K5$[100],EXPIREDATE$[10]
Dim REBUOM$[4],COSTUOM$[4],RSN$[500],U5$[50],UDA$[30]
Dim X1$[100],PATH$[200],FILENAME$[500],REJECTFILE$[100],FILE$[100]
Dim WKDIR$[50],WKFNAME$[50],MASK$[100],MASK2$[100],FNAME$[200]
Dim 1%,VITEM,DNR
Dim 3%,FLE[25],WKHOURS,INFLE[128,1]
Dim 4%,J1
DIM SOURCEDIRNAME$[50],TEXTDIRNAME$[50],tmpfile$[80],txtfile$[80]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim eparam$[50],blank$[80]
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128]
Dim 3%,uarec
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
uarec= GetUIDRec(e$,IntCo,Userid$)
COID=intCO
COMP=intCO
for ctr=1 to 99
	Try Close #ctr Else Rem
next ctr
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
D$ = Tim(8) Using "&&",Tim(9) Using "&&",Tim(10) Using "&&"
S$ = " ",S$
!E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
!F$ = COID Using "CNTRL#"
!Ropen #1,F$
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
custom_customer$=rtrim$(CUSTOM_CUSTOMER$)
Read #1,88,1808;F$; \ Ropen #7,F$ ! customer
Read #1,88,304;F$; \ Open #6,F$ ! header
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H) ! "round to penny
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H) ! "normal round
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H) ! "truncate to lower
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H) ! "vound up
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H) ! "round up to whole #
!Print 'CS'
!Print @0,0;"rebatecustomerimport";@23,0;"Rebate Contract Customer Import Utility"
FILENAME$ = "cntrl/rebateimport.ini"
Call FindF(FILENAME$,FOUND)
PATH$ = " ",PATH$
PATH$ = ""
If FOUND<>0
  Ropen #5,FILENAME$
  Read #5;WK$
  PATH$ = rtrim$(wk$) ! WK$[1,Len(WK$) - 1]
   X = Len(path$)
  If x>0
	if path$[x,x]="\15\" let path$[x,x]=""
  endif
  Close #5
Else 
	let path$=""
	if not(found)
		eflag=eflag+1
		returnstatus=1	
		message$=" Option not available.  Ini File has not been established. "
		Goto OUTEND
	End If 
End If 
if path$="" Let PATH$ = "/usr/tmp"
! REJECTFILE$ = PATH$[1,Len(PATH$)] + "/rebatecustomerissues.txt!"
!REJECTFILE$ = rtrim$(PATH$)+ "/rebatecustomerissues.txt!"
!Build #11, + REJECTFILE$
GET_FILE_NAME: Rem let's get the file name
Call dxget("FNAME",tmp$)
let filename$=lcase$(rtrim$(tmp$))
If rtrim$(FileNAME$) = "" 
	let eflag=eflag+1
	returnstatus=1
	let message$="Invalid File Name Entered "
	Goto OUTEND
endif
For X = 1 To Len(FileNAME$)
  If FileNAME$[X,X] = " " Let FileNAME$[X,X] = "_"
Next X
! FILE$ = PATH$ + FILENAME$
FILE$ = rtrim$(PATH$) + "/" + FILENAME$
Call FindF(FILE$,FOUND)
let tmp$=FILE$
if not(found)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+filename$+" Does Not Exists "
	goto outend:
endif
Ropen #5,FILE$
Read #5;X1$
If rtrim$(X1$) <> ""
	Call String(1,X1$,E)
	FLOK = 1
	! close #5
Else 
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+filename$+" Does Not Contain Any Data "
	goto outend:
End If  
try
	Close #5
else
	rem no error
end try

L_2000: Rem EDIT FIELDS
!Print @0,19;'CE';@0,23;"ENTER  #:field V: Validate only  U: Validate and Update E: exit   ";'CL';
Call dxget("OPTTYPE",tmp$)
let tmp$=ucase$(rtrim$(tmp$))
if tmp$="U" or tmp$="V"
	let u5$=tmp$
else 
	let eflag=eflag+1
	returnstatus=1
	let message$="Invalid Process Option Selected "
	Goto OUTEND
endif
If U5$ = "V" Or U5$ = "U"
	ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	BaseName1$ = "rebatecontrcustissues"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
	StatusFile$ = ReportDir$ + "/"+BaseName1$
	Call FindF(StatusFile$,tmp)
	If tmp<>0  Kill StatusFile$
	StatChan = 11 ! FindChannel() ! channel to build text file need fixed channel
	Try Close #11 Else Rem
	Try
		Build #StatChan,StatusFile$ As "TEXT"
	Else
		let eflag=eflag+1
		returnstatus=1 
		let message$="Error in Building Status File "
		goto outend:
	end TRY
	Try Close #StatChan Else Rem
	Try
		Open #StatChan,StatusFile$
	else
		returnstatus=1
		eflag=eflag+1
		let message$="Error in Opening Status File "
		goto outend
	end TRY
	Print #StatChan;"Starting Rebate Contract Customer File..."
	! PAUSE 20
	e = AddToMYReports(BaseName1$) 
	if e<0
		eflag=eflag+1
		message$="Error adding to my reports!" 
		returnstatus=1
		goto outend
	endif
  Ropen #5,FILE$
  If U5$ = "U"
    Read #1,88,304;Z1$; \ Gosub DO_THE_BACKUP ! detail file RCONTRACTH
  End If 
  Gosub L_2400
  if not(eflag) and returnstatus=0 and statchan<>0
	print #statchan;"Process Complete."
  endif
  Goto OUTEND
End If 
goto outend

L_2400: Rem process ====================== validate the data
SOMEISSUES = 0
BADREC = 0
Read #5;X$
Call String(1,X$)
POS_ = 1
Gosub L_8000 ! check some of the headers
If WK$[1,16] <> "CONTRACT NUMBER " Let BADREC = 1
Gosub L_8000
If WK$[1,6] <> "VENDOR" Let BADREC = 1
Gosub L_8000
If WK$[1,8] <> "CUSTOMER" Let BADREC = 1
If BADREC<>0
	Print #11;rtrim$(x$) ! X$[1,Len(X$) - 1] ! write out headings to rejected file
  let eflag=eflag+1
	message$="File does not seem to be in the proper order or wrong"
    message$=message$+"headings. Please make sure to use the template file provided"
  SOMEISSUES = 1
  Goto OUTEND
End If 
Print #11;rtrim$(x$) ! X$[1,Len(X$) - 1] ! write out headings to rejected file
L_1000: Rem ================== validate the data
X$ = " ",X$
Read #5;X$
If X$ = "" Return 
BADREC = 0
CTR = CTR + 1 ! \ If Not(Fra(CTR / 25)) Print @20,15;'CL';CTR
RSN$ = " ",RSN$
RSN$ = "\11\"
POS_ = 1
Gosub L_8000 !contract
CONTRACT = WK$
Gosub L_8000 !vendor
VENDOR = WK$
CUSTOMER = X$[POS_]
If Not(CONTRACT) ! both contracts 0
  BADREC = 1
  RSN$ = RSN$ + "No Contract, "
End If 
If CONTRACT
  K$ = " ",K$
  K$ = CONTRACT Using "######"
  Search #6,2,1;K$,R6,E
  If Not(E) !contract is on file
    Mat Read #6,R6;RCN3
    Mat Read #6,R6,24;RCN$;
    Mat Read #6,R6,94;VENDCNT$
    If RCN3[3] <> VENDOR
      BADREC = 1
      RSN$ = RSN$ + "Not same Vendor,"
    End If 
  Else 
    BADREC = 1
    RSN$ = RSN$ + "Contract not found, "
  End If 
  BADCUST = 0
  If Not(BADCUST)
    If CUSTOMER ! check customer code
      K$ = " ",K$
      K$ = CUSTOMER Using "######"
      Search #7,2,1;K$,R7,E
      If E
        BADREC = 1
        BADCUST = 1
      End If 
    Else 
      BADREC = 1
      BADCUST = 1
      RSN$ = RSN$ + "Customer Zero, "
    End If 
  End If 
End If 
GOON: Print #11;rtrim$(x$);" ";rtrim$(rsn$) ! X$[1,Len(X$) - 1];RSN$
If BADREC 
	Let SOMEISSUES = 1
ELSE
	If U5$ = "U"
		Gosub PROCESS_CUSTOMER
	ENDIF
End If 
totrec=totrec+1
Goto L_1000
PROCESS_CUSTOMER: Rem =======================================================
If CONTRACT
  KEY_$ = CONTRACT Using "######"
  Search #6,2,1;KEY_$,R6,E
  If Not(E)
    Mat Read #6,R6;RCN3
    K1$ = " ",K1$
    K1$[1,6] = CUSTOMER Using "######"
    K1$[7] = KEY_$
    Search #6,2,2;K1$,R6,E
    If E
      Search #6,4,2;K1$,R6,E
      If E Gosub ERR_SEARCH
      K2$ = " ",K2$
      K2$ = K1$[7,12],K1$[1,6]
      Search #6,2,3;K2$,R6,E
      If E
        Search #6,4,3;K2$,R6,E
        If E Goto ERR_SEARCH
      End If 
    End If 
  End If 
End If 
GOON1: Return 
 
 
L_4800: Rem ==============================================CHECK FOR U/M
If CC$ = "CWT " Let R99 = -1 \ Goto L_4850
If CC$ = "LOT " Goto L_4850
Search #99,2,1;CC$,R99,E99
If Not(E99) Goto L_4850
R99 = 0
L_4850: Return 

L_5400: ! Rem "================================= screen labels
!Print 'CS'
!Print @0,0;"rebatecustomerimport";@23,0;"Rebate Contract Customer Import Utility"
!Print @4,3;"File needs to be tab delimited with no , '' $ or % in the text."
!Print @4,5;"Program validates all the fields before the update. "
!Print @4,9;"Any problems will be in ";REJECTFILE$[1,Len(REJECTFILE$) - 1]
!Print @0,13;" 1>      Filename :";
!Signal 3,0
Return 
DO_THE_BACKUP: Rem let's back the files up
! Print @5,20;"Backing up ";Z1$
let z1$=rtrim$(z1$)
MASK$ = Z1$
WKHOURS = 0;FNUM = 1
For LOOP_ = 1 To 5
  MASK2$ = "databak/" + Z1$[3] + ".rebate" + Str$(LOOP_)
  Call FindF(MASK2$,FOUND)
  If Not(FOUND)
    FNUM = LOOP_
    Goto PERFORM_BACKUP
  End If 
  WKDIR$ = " ",WKDIR$
  WKFNAME$ = " ",WKFNAME$
  WKFNAME$ = MASK2$
  Call FileInfo(WKDIR$,FLE[],WKFNAME$,1,INFLE[])
  If FLE[22] < WKHOURS Or Not(WKHOURS)
    WKHOURS = FLE[22]
    FNUM = LOOP_
  End If 
Next LOOP_
PERFORM_BACKUP: Rem do the duplicate command
MASK2$ = "databak/" + Z1$[3] + ".rebate" + Str$(FNUM) + "!"
FNAME$ = " ",FNAME$
FNAME$[1,Len(MASK$)] = MASK$[1,Len(MASK$)]
FNAME$[(Len(MASK$)) + 2] = MASK2$
Duplicate FNAME$
Return 
L_7000: Rem =====================
RB$ = " ",RB$
RCN$ = " ",RCN$
VENDCNT$ = " ",VENDCNT$
RB$ = " ",RB$
SPUDA2$ = " ",SPUDA2$
For LOOP1 = 1 To 6
  If LOOP1 < 2
    RBUM[LOOP1] = 0
    RBL1[LOOP1] = 0
  End If 
  If LOOP1 < 3
    RB[LOOP1] = 0
    RB5[LOOP1] = 0
  End If 
  If LOOP1 < 6 Let RB1[LOOP1] = 0
  RB3[LOOP1] = 0
Next LOOP1
Return 
L_7600: !If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
!Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
!Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
!Print @0,Msc(34) - 1;'CL'; \ Return 
Return
L_8000: Rem
WK1$ = " ",WK1$ \ WK1$ = X$[POS_]
Search WK1$,"\11\",CT
WK$ = " ",WK$
If CT = 1 Goto L_8060
If CT > 1
  WK$[1,CT - 1] = WK1$[1,CT - 1]
  Goto L_8060
End If 
If CT = 0
  CT = Len(WK1$)
  If CT <= 1 Goto L_8060
  WK$ = WK1$
End If 
WK$[1,CT - 1] = WK1$[1,CT - 1]
L_8060: POS_ = POS_ + CT
L_8070: Search WK$,"|",CT
If CT
  WK$[CT,CT] = ","
  Goto L_8070
End If 
L_8120: Search WK$,"~",CT
If CT
  WK$[CT,CT] = "''"
  Goto L_8120
End If 
Gosub CHK_CNTL_CHAR
Return 
CHK_CNTL_CHAR: Rem check for control character
CTL$ = WK$
WK$ = " ",WK$
For LOOP2 = 1 To 500
  If CTL$[LOOP2,LOOP2] >= " " If CTL$[LOOP2,LOOP2] <= "Z"
    WK$[LOOP2,LOOP2] = CTL$[LOOP2,LOOP2]
  End If 
Next LOOP2
Return 
L_10000: Rem do unit conversion
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_10050
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_10050: Return 


ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump()  
e$ = msg$ \ Error 10000                      
Return ! End 

ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
eflag=1
Message$=E$
call programdump()

OUTEND: Rem END
if eflag<>0 let returnstatus=1 ! error

Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)	
	let message$="Complete. "
	if statchan<>0 
		let returnstatus=1
		message$="Please check under My Reports "+basename1$+" for completion info. "
     endif
	if totrec<>0
		let message$=Message$+str$(totrec)+" Records Reviewed/Processed. "
	endif
endif 
If SOMEISSUES<>0
  let message$=message$+"There are issues with the file. "
  let message$=message$+"Check "+Rtrim$(basename1$) ! [1,Len(REJECTFILE$) - 1]
End If 
 
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)

Else
!
	include "src/callmainerrnet.inc"
end try
End ! the whole program