! --- credck.dl4
!  
!
! 1.0 mm/dd/yyyy change??
!
! loadsave -w -n 100,10 -o prog/dxport/credck.dl4 src/credck.src
!
! ERPScheduler Enabled
!
include "src/copyright.inc"
Option Base Year 1980
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Declare Intrinsic Sub InpBuf,Time
Declare Intrinsic Sub String,JulianToDate,VerifyDate,DateToJulian
Enter CHAN[],SHIPTO,BILLTO,ORDAMT,ORDNUM,CCSTATUS,CCTEXT$,debug,dlog$,problem
Try 
  Declare Intrinsic Function FindChannel,Trim$
  Declare Intrinsic sub programdump
  Dim 1%,MAXCHAN,PASS
  Dim 2%,X2,CL,ardate,D3[1]
  Dim 2%,jardate,tdate
  Dim 3%,SCR,credchk_amt
  Dim WORK$[90],p9$[50],SCRATCH$[80],FILENAME$[50],x$[10],j4$[50]
  Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142]
  Dim msg$[256],pgmName$[20]
  Dim 2%,A0[3],C1[12],REC,C3[1]
  Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8,C11[2]
  Dim 3%,C4[6],C10[5],CFIN[8],U1,C9,C5[5],C6[9],C12[1]
  Dim 3%,CC9
  Dim 2%,a2[5],a4[8],3%,a3[13]
  Dim 2%,CCHK[5],CCHK1$[30],CCTEXTO$[15]
  Dim 1%,CHNL,CHNLFREE,C2
  Dim 3%
  problem = 2060
  debugDetail = 0
  pgmName$ = "credck"
  msg$ = "start...program " + pgmName$ \ Gosub Updatelog
  If CHAN[1] Let CH_CNTRL = CHAN[1]
  If CHAN[2] Let CH_CUST = CHAN[2]
  If CHAN[3] Let CH_ARACT = CHAN[3]
  If CHAN[4] Let CH_CREDCK = CHAN[4]
  If Not(CHAN[1])
    CH_CNTRL = FindChannel()
    C2 = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
    Ropen #CH_CNTRL,"files/cntrl/cntrl" + Str$(C2)
  End If 
  If Not(CHAN[2])
    CH_CUST = FindChannel()
    Read #CH_CNTRL,88,1808;FILENAME$; \ Open #CH_CUST,"files/" + FILENAME$
  End If 
  If Not(CHAN[3])
    CH_ARACT = FindChannel()
    Read #CH_CNTRL,88,1504;FILENAME$; \ Ropen #CH_ARACT,"files/" + FILENAME$
  End If 
  If Not(CHAN[4])
    CH_CREDCK = FindChannel()
    Read #CH_CNTRL,88,992;FILENAME$; \ Open #CH_CREDCK,"files/" + FILENAME$
  End If 
  CCMODE = CCSTATUS;CCSTATUS = 0;CCTEXT$ = " ",CCTEXT$;WORK$ = " ",WORK$
  Read #CH_CNTRL,19,50;p9$;
  Read #CH_CNTRL,0,108;ardate;
  !
  x$ = ardate Using "&&&&&&"
  Call DateToJulian(1,x$,x$,E)
  If Not(E)
    jardate = x$[1,5]
  Else 
    j4$ = "" \ Call Time(j4$)
    j4$[13] = "" \ Call VerifyDate(j4$,x$,E) \ If E Gosub Err_Search
    Call DateToJulian(1,x$,x$,E) \ If E Gosub Err_Search
    jardate = x$[1,5]
  End If 
  WORK$ = BILLTO Using "######"
  Search #CH_CUST,2,1;WORK$,REC_BILLTO,E \ If E > 1 Gosub Err_Search
  If E
    ! Stop "Debug"
    CCSTATUS = 9;CCTEXT$ = "Missing Bill-to record"
    Goto OUTEND
  End If 
  Mat Read #CH_CUST,REC_BILLTO;A1$
  Mat Read #CH_CUST,REC_BILLTO,142;C1
  Mat Read #CH_CUST,REC_BILLTO,210;C4
  Read #CH_CUST,REC_BILLTO,412;C9
  Mat Read #CH_CUST,REC_BILLTO,668;C12
  If ORDAMT And Not(CCMODE)
    C9 = C9 + ORDAMT
    Write #CH_CUST,REC_BILLTO,412;C9;
    If SHIPTO <> BILLTO
      WORK$ = SHIPTO Using "######"
      Search #CH_CUST,2,1;WORK$,REC_SHIPTO,E \ If E > 1 Gosub Err_Search
      If E
        CCSTATUS = 9;CCTEXT$ = "Missing Ship-to record"
        Goto OUTEND
      End If 
      Read #CH_CUST,REC_SHIPTO,412;CC9
      CC9 = CC9 + ORDAMT
      Write #CH_CUST,REC_SHIPTO,412;CC9;
    End If 
  End If 
  Unlock #CH_CUST
  If C9 < 0 Let C9 = 0
  x3 = C4[0] + C4[2] + C4[3] + C4[4] + C4[5] + C9 - C4[1]
  If C12[0] < x3 Let CCSTATUS = 2
  Mat Read #CH_CNTRL,115,48;CL;
  !
  If C1[3]
    If C1[3] = 999 Goto alwaysfail
    x3 = C4[0] - C4[1] + C4[2] + C4[3] + C4[4] + C4[5]
    If x3 <= 0 Goto alwaysfail
    x3 = 0;i3 = C4[1]
    WORK$ = " ",WORK$;WORK$ = BILLTO Using "######"
AGELOOP: Search #CH_ARACT,3,2;WORK$,REC_ARACT,E \ If E > 2 Gosub Err_Search
    If E = 2 Goto ENDARCHK
    If Val(WORK$[1,6]) <> BILLTO Goto ENDARCHK
    type = WORK$[23,23]
    If p9$[19,19] <> "Y" And type > 5 Goto AGELOOP
    Mat Read #CH_ARACT,REC_ARACT,0;a2;
    tdate = a2[4]
    If (jardate - tdate) <= C1[3] Goto ENDARCHK
    !
    If p9$[25,25] = "Y"
      Mat Read #CH_ARACT,REC_ARACT,154;a4;
      If a4[3]
        x$ = a4[3] Using "######"
        Call DateToJulian(1,x$,x$,E)
        If Not(E)
          tdate = x$[1,5]
          If (jardate - tdate) <= C1[3] Goto ENDARCHK
        End If 
      End If 
    End If 
    Mat Read #CH_ARACT,REC_ARACT,24;a3;
    If Not(a3[0] - a3[1] - a3[2]) Goto AGELOOP
    If type > 5
      i3 = i3 + (a3[0] - a3[1] - a3[2])
      x3 = x3 - (a3[0] - a3[1] - a3[2])
    Else 
      i3 = i3 - (a3[0] - a3[1] - a3[2])
      x3 = x3 + (a3[0] - a3[1] - a3[2])
    End If 
    Goto AGELOOP
ENDARCHK: !
    If i3 >= 0
      x3 = 0
    End If 
    If x3 > 0
      CCSTATUS = 3
    End If 
alwaysfail: If C1[3] = 999 Let CCSTATUS = 6
  End If 
L_4410: If CCSTATUS And Not(CCMODE)
    CCTEXT$ = " ",CCTEXT$
    X2 = Tim(6)
    CCHK[0] = C1[3];CCHK[1] = C1[0];CCHK[2] = C1[1]
    CCHK[3] = X2;CCHK[4] = 0;CCHK[5] = Spc(6);CCHK[4] = 99
    If CCSTATUS = 1 Let CCTEXT$ = "CREDIT TYPE"
    If CCSTATUS = 2 Let CCTEXT$ = "CREDIT LIMIT"
    If CCSTATUS = 3 Let CCTEXT$ = C1[3] Using "OVER ### DAYS"
    If CCSTATUS = 6 Let CCTEXT$ = "ORDER TO ORDER"
    CCHK1$[1,30] = A1$[31,60];CCTEXTO$ = CCTEXT$
    E = 2 \ Search #CH_CREDCK,1,0;WORK$,REC_CREDCK,E \ If E Gosub Err_Search
    WORK$[1,6] = C1[1] Using "######"
    WORK$[7,12] = CCHK[3] Using "######"
    WORK$[13] = REC_CREDCK Using "######"
    Search #CH_CREDCK,4,1;WORK$,REC_CREDCK,E \ If E > 1 Gosub Err_Search
    If Not(E)
      Mat Write #CH_CREDCK,REC_CREDCK;CCHK
      Mat Write #CH_CREDCK,REC_CREDCK,24;CCHK1$
      Mat Write #CH_CREDCK,REC_CREDCK,54;CCTEXTO$
      X2 = ORDNUM \ Write #CH_CREDCK,REC_CREDCK,70;X2
      credchk_amt = ORDAMT \ Write #CH_CREDCK,REC_CREDCK,74;credchk_amt;
    End If 
  End If 
  Goto OUTEND
Else 
  Gosub Err_Trap
  End 
End Try 
OPEN_FILES: !
CHNL = 99
CHAN = 0
Mat CHAN = Zer
Read #CH_CNTRL,88,1808;FILENAME$;
SCR = CH_CUST
Gosub CHECK_FILE
If Not(PASS)
  Gosub GETCHAN
  CHAN[0] = - CHNL
  CH_CUST = CHNL
  Open #CHNL,FILENAME$
End If 
Read #CH_CNTRL,88,1504;FILENAME$;
SCR = CH_ARACT
Gosub CHECK_FILE
If Not(PASS)
  Gosub GETCHAN
  CHAN[1] = - CHNL
  CH_ARACT = CHNL
  Open #CHNL,FILENAME$
End If 
Read #CH_CNTRL,88,992;FILENAME$;
SCR = CH_CREDCK
Gosub CHECK_FILE
If Not(PASS)
  Gosub GETCHAN
  CHAN[2] = - CHNL
  CH_CREDCK = CHNL
  Open #CHNL,FILENAME$
End If 
Return 
CHECK_FILE: Rem
PASS = 0
If Err 0 Let E = Spc(8)
E = 0
SCRATCH$ = Chf(800 + SCR)
If Err 0 Gosub Err_Trap
If Not(E)
  Call String(1,SCRATCH$)
  Call String(1,FILENAME$)
  Search SCRATCH$,FILENAME$,PASS
End If 
Return 
OUTEND: Rem
If Not(CHAN[1]) Close #CH_CNTRL
If Not(CHAN[2]) Close #CH_CUST
If Not(CHAN[3]) Close #CH_ARACT
If Not(CHAN[4]) Close #CH_CREDCK
msg$ = "doing...end of " + pgmName$ \ Gosub Updatelog
End 
!

ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
msg$ = "error...",Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ",pgmName$
System "echo ''" + Msc$(0) + " " + msg$ + "'' >> " + dlog$
Goto ERR_MAIN

ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM ",MSC$(4)
Goto ERR_MAIN

ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$ \ gosub updatelog
Dim msc4$[100] \ msc4$ = Msc$(4)                                   
If Pos(msc4$, = "/",-1) Let msc4$ = msc4$[Pos(msc4$, = "/",-1) + 1]
Call env(2,"PROGNAME",msc4$)                                       
Call programdump()                                                 
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
END!

Updatelog: !
If Not(debug) Return 
System "echo ''" + Msc$(0) + " " + msg$ + "'' >> " + dlog$
Return 
!
GETCHAN: Rem
For SCR = CHNL To 1 Step -1
  CHNL = SCR
  Gosub CHNLFREE
  If CHNLFREE
    SCR = 1
  Else 
    CHNL = 0
  End If 
Next SCR
Return 
CHNLFREE: Rem
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
E = Chf(CHNL)
If Err 0 Gosub Err_Trap
If CHNLFREE And CHNLFREE <> 49 Gosub Err_Trap
END_CHNLFREE: Rem
Return 
