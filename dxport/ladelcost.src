! >>> Program Ladelcost
!
! description Accounts Payable - ladelcost - recalculates original cost on delete
!
! loadsave -w -n 100,10 -o prog/dxport/ladelcost.dl4 src/ladelcost.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx

Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC  4, 2008  09:18:02
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/ladelcost.src (univ2) [mary] {07288}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub DateToJulian,InpBuf,String,Time,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,Time,VerifyDate
! Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,OpenMySQLMirror
include "src/inc/sql_prod.inc"
Try
	Enter CH_POC,REC_POC,L1[],O1$,O2,O1,POSTDATE,POSTPER,CH_APL,message$,IntCo,rstr$,e$,rec_uac 
  dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
  dim e$[500]!,message$[600]

Rem ladelcost  -- recalculate average cost/fifo tier cost


Dim 1%,FIFOSPECCH[10],FIFOSPEC$[12]
Dim 1%,CNVTU[2],3%,CNVTA,AMOUNT,CURRQTY
Dim 1%,X1,APCLOSE,APL1[4],APL3
Dim 1%,FIFOSPECCH[10],SPO,C0[6],POGLFLAG,SPCFLAG
Dim 2%,CURJDATE,DT3[1],CURRDATE,FIFL,COMP,X2,POCNTRL,CURRPDATE
Dim 3%,POCOST,POCOST1,OLDAVG,OLDNET,NEWAVG,NEWNET,POFREIGHT,POMISC
Dim 3%,BPOCOST,BPOCOST1,OFCST
Dim 3%,CURRCOST,APQTY,LASTCOST,APL2[6],L3[6],PL4[23],SPCURRCOST
Dim 3%,LBSUNIT,LBSFACTOR,NETCOST,UOLDNET,UNEWNET,UNEWAVG,UOLDAVG
Dim 3%,PCT9[3],TOTFOCOST,TOTFNCOST,PRODLBS,PRODFACT,BASEQTY,BASECOST
Dim X$[10],P9$[50]
Dim P60$[50],P61$[256]
Dim FNAME$[16],SCRATCH$[80]
Dim APHKEY$[30],APLKEY$[40],POCKEY$[30],POLKEY$[30],PRODKEY$[50],POHKEY$[30]
Dim PRWHKEY$[30],FLT$[30],FLK$[50],KEYAPPOLH$[50]
Dim KEYAPPOL$[50]
Dim 3%,REC_PROD,REC_POH,REC_POL,REC_APH,REC_APL,REC_FIFOL,REC_FIFOT
Dim 3%,REC_PRWH,REC_APPOLH
Dim 3%,FTRECA,FTRECB,LETTER$[1]
Dim 2%,LASTAPCOST,3%,NETAPCOST
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim 3%,OLDEXTCOST,NEWEXTCOST
Dim PCT$[12]
Dim 1%,PCT3[2],PCT7[2],PCT0
Dim 2%,PCT1[5]
Dim 3%,PCT2[5],PCT4[1],PCT5[9],PCT6[1]
Dim 2%,W2[9]
Dim 3%,W3[24],WHMISC[6]
Dim WHFLG$[10]
Dim 1%,FL1[2]
Dim 2%,FL2[3]
Dim 3%,FL3[14]
Dim FL1$[80]
Rem {begin src/inc/dim.fifotrans.i}
Dim 1%,FT1[3]
Dim 2%,FT2[3]
Dim 3%,FT3[3]
Dim FT1$[72]
Rem {end dim.fifotrans.i}
Dim P1$[156],PRFLG$[10]
Dim 1%,PFU1[20]
Dim 2%,B[24]
Dim 3%,A[33],PFU2[6],PRPARC[3]
Dim U5$[50],groupid$[2],msg$[100],glpmsg$[100]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],WebStr$[600],blockid$[100]
Rem open files
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
!X2 = Spc(5)
COMP = Intco ! Int((X2 - Int(X2 / 16384) * 16384) / 64)
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,19,50;P9$;
Mat Read #1,51,88;POGLFLAG;
Mat Read #1,51,76;SPO;
Mat Read #1,51,18;C0;
Read #1,3,172;CURRDATE;
X2 = CURRDATE \ Gosub YMD2JUL \ X2 = 0
If X2 Let CURJDATE = X2 Else Gosub GETCURJDATE
X2 = POSTDATE \ Gosub YMD2JUL \ X2 = 0
If X2 Let CURPDATE = X2 Else Let CURPDATE = CURJDATE
Read #1,3,192;FIFL;
CHNL = 99
chnl=findchannel() !Gosub GETCHAN
CH_PROD = CHNL
Read #1,88,1792;FNAME$;
Open #CH_PROD,FNAME$
chnl=findchannel() !Gosub GETCHAN
CH_PRWH = CHNL
Read #1,88,1744;FNAME$;
Open #CH_PRWH,FNAME$
chnl=findchannel() !Gosub GETCHAN
CH_POH = CHNL
Read #1,88,2416;FNAME$;
Ropen #CH_POH,FNAME$
chnl=findchannel() !Gosub GETCHAN
CH_POL = CHNL
Read #1,88,2432;FNAME$;
Ropen #CH_POL,FNAME$
chnl=findchannel() !Gosub GETCHAN
CH_APPOLH = CHNL
FNAME$ = COMP Using "2/appolh#"
Ropen #CH_APPOLH,FNAME$
If P60$[9,9] = "F"
  chnl=findchannel() !Gosub GETCHAN
  CH_FIFOL = CHNL
  Read #1,88,3008;FNAME$;
  Open #CH_FIFOL,FNAME$
  chnl=findchannel() !Gosub GETCHAN
  CH_FIFOT = CHNL
  Read #1,88,3024;FNAME$;
  Open #CH_FIFOT,FNAME$
End If
sqlChan = OpenMySQLMirror(e$)
!If Err 0 Gosub ERR_TRAP
Gosub READ_POC
Rem if not pct3[0] goto outend: ! line is not closed
If Not(PCT2[0]) And Not(PCT5[3]) Goto OUTEND
!PCT5[8] = 0 ! LAST AVG
!PCT5[9] = 0 ! LAST NET
PL4[12] = 0;PL4[13] = 0
POLKEY$ = " ",POLKEY$;POLKEY$[1,6] = PCT1[0] Using "######"
POLKEY$[7] = PCT1[1] Using "###"
Search #CH_POL,2,1;POLKEY$,REC_POL,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_POL,REC_POL,232;PL4;
  Rem check if nonstock item and bypass
End If 
If PCT6[0]
  LBSUNIT = PCT6[0]
  LBSFACTOR = PCT6[1]
Else 
  LBSUNIT = PL4[12]
  LBSFACTOR = PL4[13]
End If 
POHKEY$ = " ",POHKEY$
POHKEY$ = PCT1[2] Using "######"
POHKEY$[7,12] = PCT1[0] Using "######"
APCLOSE = 0
SPCURRCOST = 0
Search #CH_POH,2,2;POHKEY$,REC_POH,E \ If E > 1 Gosub ERR_SEARCH
If E
  APCLOSE = 99
Else 
  Mat Read #CH_POH,REC_POH,248;APCLOSE;
End If 
Rem always read the product need to find out if weighted product
PRODKEY$ = " ",PRODKEY$
PRODKEY$[1,12] = PCT$[1,12]
Search #CH_PROD,2,1;PRODKEY$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_PROD,REC_PROD,0;P1$;
  Mat Read #CH_PROD,REC_PROD,156;B;
  Mat Read #CH_PROD,REC_PROD,256;A
  Mat Read #CH_PROD,REC_PROD,512;PFU1;
  Mat Read #CH_PROD,REC_PROD,554;PFU2;
  PRODLBS = A[6];PRODFACT = A[5]
Else 
  If PCT6[0] <> 0 And PCT6[1] <> 0
    A[6] = PCT6[0];A[5] = PCT6[1]
    PRODLBS = A[6];PRODFACT = A[5]
  Else 
    If PL4[12] <> 0 And PL4[13] <> 0
      A[6] = PL4[12];A[5] = PL4[13]
      PRODLBS = A[6];PRODFACT = A[5]
    Else 
      A[6] = 1;A[5] = 1
      PRODLBS = A[6];PRODFACT = A[5]
    End If 
  End If 
End If 
If L1[5] = -1 Or L1[5] = -3 ! cwt or catch weight
  If PCT6[0] <> 0 And PCT6[1] <> 0
    LBSUNIT = PCT6[0];LBSFACTOR = PCT6[1]
  Else 
    If PL4[12] <> 0 And PL4[13] <> 0
      LBSUNIT = PL4[12];LBSFACTOR = PL4[13]
    End If 
  End If 
End If 
Rem!!!
KEYAPPOL$ = " ",KEYAPPOL$
KEYAPPOL$[1,6] = O2 Using "######"
KEYAPPOL$[7,18] = O1$[1,12]
KEYAPPOL$[19,20] = O1 Using "##"
KEYAPPOL$[21,26] = PCT1[0] Using "######"
KEYAPPOL$[27,29] = L1[2] Using "###"
KEYAPPOL$[30,35] = PCT1[3] Using "######"
Search #CH_APL,2,1;KEYAPPOL$,REC_APL,E \ If E Goto OUTEND
Mat Read #CH_APL,REC_APL,24;APL1;
Mat Read #CH_APL,REC_APL,36;APL2;
If Not(APL2[0]) Goto OUTEND
TMPQTY = Abs(APL2[0]) ! AP QTY RECEIVED
! TMPEXTCOST = Abs(APL2[2]) ! 
If Not(TMPQTY) And Not(PCT5[4] + PCT5[6]) And Not(PCT5[5] + PCT5[7]) Goto OUTEND ! NO QTY, NO CURR/NEXT MO FRT, NO MISC
If TMPQTY Or (PCT5[4] + PCT5[6]) Or (PCT5[5] + PCT5[7]) ! qty rec, freight, or misc ! ap amt has been received
  PRODKEY$ = " ",PRODKEY$
  PRODKEY$[1,12] = PCT$[1,12]
  Search #CH_PROD,2,1;PRODKEY$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
  If E = 1 Goto OUTEND
  Mat Read #CH_PROD,REC_PROD,0;P1$;
  Mat Read #CH_PROD,REC_PROD,156;B;
  Mat Read #CH_PROD,REC_PROD,256;A
  Mat Read #CH_PROD,REC_PROD,512;PFU1;
  Mat Read #CH_PROD,REC_PROD,554;PFU2;
  PRODLBS = A[6];PRODFACT = A[5]
  Rem get base qty
  APQTY = TMPQTY + PCT5[3] ! FREE GOODS
  If Not(TMPQTY)
    APQTY = PCT2[0] + PCT5[3]  ! PO RECVD + FREE GOODS
  End If 
  BASEQTY = APQTY
  If PCT0 ! catchweight item base qty is in lbs need in base um
    BASEQTY = Int((FNR(APQTY / LBSUNIT) * LBSFACTOR))
    If PCT5[3] Let BASEQTY = BASEQTY + PCT5[3]
  End If 
  If Not(BASEQTY) Goto OUTEND
  BASECOST = 0
  !If TMPEXTCOST<>0 
  !  BASECOST = TMPEXTCOST / BASEQTY
  !Else 
  ! If PCT9[3]
  !    BASECOST = PCT9[3] / BASEQTY
  !  Else 
  If PCT2[1]<>0 ! SET TO ORIGNAL PO RECEIVED COST
        BASECOST = PCT2[1]
        If L1[5] = -1 Or L1[5] = -3
			A[5] = PRODFACT;A[6] = PRODLBS
			CNVTA = PCT2[1];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
			Gosub L_20000
			A[5] = LBSFACTOR;A[6] = LBSUNIT
			CNVTA = AMOUNT;CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
			Gosub L_20000
			BASECOST = AMOUNT
			A[5] = PRODFACT;A[6] = PRODLBS
		End If 
  End If 
  IF BASECOST<>0 
	LASTAPCOST = BASECOST
	POCOST = BASECOST !  AP COST
	BPOCOST = BASECOST ! 
  ENDIF
End If 
SPCURRCOST = POCOST
POCOST1 = POCOST
BPOCOST1 = BPOCOST
LBSUNIT = 0;LBSFACTOR = 0
If PCT6[0]
  LBSUNIT = PCT6[0]
  LBSFACTOR = PCT6[1]
Else 
  LBSUNIT = PL4[12]
  LBSFACTOR = PL4[13]
End If 
If APCLOSE
  POFREIGHT = PCT5[4] + PCT5[6]
  POMISC = PCT5[5] + PCT5[7]
Else 
  If PCT5[4] <> 0 Or PCT5[6] <> 0 Or PCT5[5] <> 0 Or PCT5[6] <> 0
    POFREIGHT = PCT5[4] + PCT5[6]
    POMISC = PCT5[5] + PCT5[7]
  Else 
    POFREIGHT = PCT5[4]
    POMISC = PCT5[5]
  End If 
End If 
If L1[5] = -1 Or L1[5] = -3
  If POFREIGHT
    If L1[5] = -1 Let POFREIGHT = POFREIGHT * 100
    CNVTA = POFREIGHT
    A[5] = LBSFACTOR;A[6] = LBSUNIT
    CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
    Gosub L_20000
    POFREIGHT = AMOUNT
    A[5] = PRODFACT;A[6] = PRODLBS
  End If 
  If POMISC
    If L1[5] = -1 Let POMISC = POMISC * 100
    A[5] = LBSFACTOR;A[6] = LBSUNIT
    CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
    Gosub L_20000
    POMISC = AMOUNT
    A[5] = PRODFACT;A[6] = PRODLBS
  End If 
End If 
BPOMISC = POMISC
BPOFREIGHT = POFREIGHT
If P60$[19,19] = "Y" ! add freight for average cost
  POCOST = POCOST + POFREIGHT
  BPOCOST = BPOCOST + BPOFREIGHT
End If 
If P60$[49,49] = "F" Or P60$[49,49] = "B"
  POCOST1 = POCOST1 + POFREIGHT
  BPOCOST1 = BPOCOST1 + BPOFREIGHT
End If 
If P60$[49,49] = "M" Or P60$[49,49] = "B"
  POCOST1 = POCOST1 + POMISC
  BPOCOST1 = BPOCOST1 + BPOMISC
End If 
If PCT5[8]
  OLDAVG = PCT5[8]
Else 
  OLDAVG = ABS(APL2[1]) !PCT2[1]
  If PCT5[3]
    OLDAVG = (ABS(APL2[1]) * PCT2[0]) / (PCT2[0] + PCT5[3])
  End If 
  If P60$[48,48] = "N" ! average cost to use net po cost
    If P60$[49,49] = "F" Or P60$[49,49] = "B"
      OLDAVG = OLDAVG + ABS(APL2[3])! BPOFREIGHT
    End If 
    If P60$[49,49] = "M" Or P60$[49,49] = "B"
      OLDAVG = OLDAVG + ABS(APL2[4])! BPOMISC
    End If 
  Else 
    If P60$[19,19] = "Y" !if average cost includes freight
      OLDAVG = OLDAVG + ABS(APL2[3])! BPOFREIGHT
    End If 
  End If 
End If 
If PCT5[9]
  OLDNET = PCT5[9]
Else 
  OLDNET = APL2[1] ! PCT2[1]
  If PCT5[3] ! free goods
    OLDNET = (APL2[1] * PCT2[0]) / (PCT2[0] + PCT5[3])
  End If 
  If P60$[49,49] = "F" Or P60$[49,49] = "B"
    OLDNET = OLDNET + ABS(APL2[3]) !BPOFREIGHT
  End If 
  If P60$[49,49] = "M" Or P60$[49,49] = "B"
    OLDNET = OLDNET + ABS(APL2[4]) ! BPOMISC
  End If 
End If 
If P61$[60,60] = "Y" And PCT7[0] <> 0 Goto UPSPECCOST
Write #CH_POC,REC_POC,150;BPOCOST; \ Read #CH_POC,REC_POC,150;BPOCOST;
Write #CH_POC,REC_POC,156;BPOCOST1; \ Read #CH_POC,REC_POC,156;BPOCOST1;
NEWNET = BPOCOST1 ! RESTORE BACK TO RECEIVED COST
NEWAVG = BPOCOST ! RESTORE BACK TO RECEIVED COST
If P60$[48,48] = "N" Let NEWAVG = POCOST1
Rem convert cost to purchase unit of measure
If PFU1[0] <> L1[4] ! base um = purch qty um  =
  CNVTA = OLDAVG;CNVTU = 0;CNVTU[1] = L1[4];CNVTU[2] = 2 \ Gosub L_20000
  UOLDAVG = AMOUNT
  CNVTA = NEWAVG;CNVTU = 0;CNVTU[1] = L1[4];CNVTU[2] = 2 \ Gosub L_20000
  UNEWAVG = AMOUNT
Else 
  UOLDAVG = OLDAVG
  UNEWAVG = NEWAVG
End If 
If UNEWAVG <> UOLDAVG ! average always stays in base uom by qty uom
  PRODKEY$ = " ",PRODKEY$
  PRODKEY$[1,12] = PCT$[1,12]
  Search #CH_PROD,2,1;PRODKEY$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #CH_PROD,REC_PROD,156;B;
    Mat Read #CH_PROD,REC_PROD,256;A
    CURVAL = A[0] * B[21]
    If A[0] > 0 And (CURVAL + (PCT2[0] * NEWAVG) - (PCT2[0] * OLDAVG)) > 0
      B[21] = (CURVAL + (PCT2[0] * NEWAVG) - (PCT2[0] * OLDAVG)) / A[0]
    End If 
    Mat Write #CH_PROD,REC_PROD,156;B;
	if sqlChan >= 0 ! MySQL enabled and channel opened
		e = prod_UpdateSQLFromDL4(e$, intCo, PRODKEY$, sqlChan, CH_PROD)
		if e <> 1 ! returns the number of records add/updated/deleted
			gosub ERR_SEARCH
		end if
	end if
  End If
  PRWHKEY$ = " ",PRWHKEY$
  PRWHKEY$[1,12] = PCT$[1,12]
  PRWHKEY$[13,14] = PCT3[1] Using "##"
  Search #CH_PRWH,2,1;PRWHKEY$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #CH_PRWH,REC_PRWH,78;W3
    CURVAL = ((W3[0] - W3[1]) * W3[15])
    If (W3[0] - W3[1]) > 0 And (CURVAL +(PCT2[0] * NEWAVG) - (PCT2[0] * OLDAVG)) > 0
      W3[15] = (CURVAL + (PCT2[0] * NEWAVG) - (PCT2[0] * OLDAVG)) / (W3[0] - W3[1])
    End If 
    Mat Write #CH_PRWH,REC_PRWH,78;W3;
  End If 
End If 
P60$[21,21] = "N"
If P60$[21,21] <> "N" And L1[5] <> -2 And PCT3[0] <> 0 ! line closed
  KEYAPPOLH$ = " ",KEYAPPOLH$
  KEYAPPOLH$[1,6] = O2 Using "######"
  KEYAPPOLH$[7,18] = O1$[1,12]
  KEYAPPOLH$[19,20] = O1 Using "##"
  KEYAPPOLH$[21,26] = PCT1[0] Using "######"
  KEYAPPOLH$[27,29] = L1[2] Using "###"
  KEYAPPOLH$[30,35] = PCT1[3] Using "######"
  Search #CH_APPOLH,2,1;KEYAPPOLH$,REC_APPOLH,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #CH_APPOLH,REC_APPOLH,24;APL1;
    Mat Read #CH_APPOLH,REC_APPOLH,36;APL2;
    Mat Read #CH_APPOLH,REC_APPOLH,78;APL3;
    If APL2[1] <> 0 And APL2[1] <> PCT2[1] And LASTAPCOST <> 0
      LASTAPCOST = APL2[1]
      If PFU1[11] = -1 Or PFU1[11] = -3
        If Not(PCT0) ! not a catchweight item
          CNVTA = LASTAPCOST;CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
          If LBSUNIT <> 0 Let A[6] = LBSUNIT;A[5] = LBSFACTOR
          Gosub L_20000
        Else 
          AMOUNT = LASTAPCOST
        End If 
        CNVTA = AMOUNT;CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
        A[6] = PRODLBS;A[5] = PRODFACT
        Gosub L_20000
        LASTAPCOST = AMOUNT
      End If 
    End If 
    If APL2[1] <> 0 And LASTAPCOST <> 0 And APL2[1] <> PCT2[1]
      PRODKEY$ = " ",PRODKEY$
      PRODKEY$[1,12] = PCT$[1,12]
      Search #CH_PROD,2,1;PRODKEY$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
      If Not(E)
        Mat Read #CH_PROD,REC_PROD,156;B
        PRWHKEY$ = " ",PRWHKEY$
        PRWHKEY$[1,12] = PCT$[1,12]
        PRWHKEY$[13,14] = PCT3[1] Using "##"
        W2[3] = 0
        Search #CH_PRWH,2,1;PRWHKEY$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
        If Not(E)
          Mat Read #CH_PRWH,REC_PRWH,38;W2;
          Mat Read #CH_PRWH,REC_PRWH,78;W3
          VEND = B[24] \ If W2[3] Let VEND = W2[3]
          If PCT1[2] = VEND
            W3[16] = LASTAPCOST
          End If 
          Mat Write #CH_PRWH,REC_PRWH,78;W3;
        End If 
        VEND = B[24]
        If PCT1[2] = VEND
          B[10] = LASTAPCOST
        End If 
        Mat Write #CH_PROD,REC_PROD,156;B;
	if sqlChan >= 0 ! MySQL enabled and channel opened
		e = prod_UpdateSQLFromDL4(e$, intCo, PRODKEY$, sqlChan, CH_PROD)
		if e <> 1 ! returns the number of records add/updated/deleted
			gosub ERR_SEARCH
		end if
	end if
      End If 
    End If 
  End If 
End If 
If PFU1[0] <> L1[4]
  CNVTA = OLDNET;CNVTU = 0;CNVTU[1] = L1[4];CNVTU[2] = 2 \ Gosub L_20000
  UOLDNET = AMOUNT
  CNVTA = NEWNET;CNVTU = 0;CNVTU[1] = L1[4];CNVTU[2] = 2 \ Gosub L_20000
  UNEWNET = AMOUNT
Else 
  UOLDNET = OLDNET
  UNEWNET = NEWNET
End If 
If UNEWNET <> UOLDNET ! net po cost change
  P60$[43,43] = "N"
  If P60$[43,43] <> "N" And L1[5] <> -2
    PRODKEY$ = " ",PRODKEY$;PRFLG$ = " ",PRFLG$
    PRODKEY$[1,12] = PCT$[1,12]
    Search #CH_PROD,2,1;PRODKEY$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
    If Not(E)
      Mat Read #CH_PROD,REC_PROD,596;PRPARC
      Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
      If PRFLG$[5,5] = "Y" Goto PNPDONE
      NETCOST = NEWNET
      If PFU1[11] = -1 Or PFU1[11] = -3
        CNVTA = NEWNET;CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
        ! CNVTA = OLDNET
        If LBSUNIT <> 0 Let A[6] = LBSUNIT;A[5] = LBSFACTOR
        Gosub L_20000
        CNVTA = AMOUNT;CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
        A[6] = PRODLBS;A[5] = PRODFACT
        Gosub L_20000
        NETCOST = AMOUNT
      End If 
      PRPARC[2] = NETCOST
PNPDONE: Rem "done write/unlock
      Mat Write #CH_PROD,REC_PROD,596;PRPARC;
	if sqlChan >= 0 ! MySQL enabled and channel opened
		e = prod_UpdateSQLFromDL4(e$, intCo, PRODKEY$, sqlChan, CH_PROD)
		if e <> 1 ! returns the number of records add/updated/deleted
			gosub ERR_SEARCH
		end if
	end if
    End If 
    PRWHKEY$ = " ",PRWHKEY$
    PRWHKEY$[1,12] = PCT$[1,12]
    PRWHKEY$[13,14] = PCT3[1] Using "##"
    Search #CH_PRWH,2,1;PRWHKEY$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
    If Not(E)
      Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
      Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
      If WHFLG$[3,3] = "Y" Goto WHNPDONE
      NETCOST = NEWNET
      If PFU1[11] = -1 Or PFU1[11] = -3
        CNVTA = NEWNET;CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
        ! CNVTA = OLDNET
        If LBSUNIT <> 0 Let A[6] = LBSUNIT;A[5] = LBSFACTOR
        Gosub L_20000
        CNVTA = AMOUNT;CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
        A[6] = PRODLBS;A[5] = PRODFACT
        Gosub L_20000
        NETCOST = AMOUNT
      End If 
      WHMISC[2] = NETCOST
WHNPDONE: Rem "done write/unlock
      Mat Write #CH_PRWH,REC_PRWH,800;WHMISC;
    End If 
  End If 
End If 
If P60$[9,9] = "F" ! check for fifo
  If UNEWNET <> UOLDNET
    NETCOST = NEWNET
    If P1$[127,127] = "Y" And P61$[73,73] = "Y"
      If LBSUNIT <> 0 Let A[6] = LBSUNIT;A[5] = LBSFACTOR
      NETCOST = (NEWNET / LBSUNIT) * LBSFACTOR
      A[6] = PRODLBS;A[5] = PRODFACT
    End If 
    FLK$ = " ",FLK$
    FLK$[1,12] = PCT$[1,12];FLK$[13,14] = PCT3[1] Using "##"
    X2 = PCT1[4] \ Gosub YMD2JUL
    Goto ENDSRCHFIFOLOT
    RSTDATE = X2
    FLK$[15,20] = RSTDATE Using "######"
SRCHFIFOLOT: Rem search fifo lot for tier
    Search #CH_FIFOL,3,1;FLK$,REC_FIFOL,E \ If E = 2 Goto ENDSRCHFIFOLOT
    If E Gosub ERR_SEARCH
    If FLK$[1,12] <> PCT$[1,12] Goto ENDSRCHFIFOLOT
    WH = FLK$[13,14] \ If WH <> PCT3[1] Goto ENDSRCHFIFOLOT
    X2 = FLK$[15,20] \ If X2 <> RSTDATE Goto ENDSRCHFIFOLOT
    Gosub READ_FIFOLOT
    If FL1[1] <> 1 Goto SRCHFIFOLOT
    PO = FL1$[44,49] \ If PO <> PCT1[0] Goto SRCHFIFOLOT
    Rem if pct2[0]<>fl3[0] goto srchfifolot:! check qty
    If FL1$[74,74] = "c" ! check contrl # for multiple receipts of a line
      POCNTRL = FL1$[75,80]
      If POCNTRL And PCT1[3] <> POCNTRL Goto SRCHFIFOLOT
    End If 
    If FL3[6] = NETCOST Goto SRCHFIFOLOT
    OFCST = FL3[6]
    TOTFOCOST = FNR((FL3[0] - FL3[1]) * FL3[6])
    TOTFNCOST = FNR((FL3[0] - FL3[1]) * NETCOST)
    PCT9 = PCT9 + (TOTFNCOST - TOTFOCOST)
    FL3[6] = NETCOST
    FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
    FT1$ = " ",FT1$
    For S9 = 0 To 3 \ FT1[S9] = 0 \ FT2[S9] = 0 \ FT3[S9] = 0 \ Next S9
    FT1$[1,12] = FL1$[1,12] \ FT1$[13,24] = FL1$[13,24]
    FT1$[25,34] = FL1$[25,34] \ FT1$[35,40] = FL1$[35,40]
    FT1$[41,50] = O2 Using "AP V######"
    FT1$[43,43] = "*"
    FT1$[53,59] = "CST ADJ"
    FT1$[60,71] = O1$[1,12]
    FT1[0] = 6
    FT1[1] = FL1[0]
    FT1[2] = rec_uac \ FT2[0] = FL2[0]
    FT2[2] = CURPDATE \ FT2[3] = POSTPER \ FT3[0] = 0
    FT3[1] = FL3[6] \ FT3[2] = FL3[7]
    FLT$ = " ",FLT$
    E = 2 \ Search #CH_FIFOT,1,0;FLT$,REC_FIFOT,E \ If E Gosub ERR_SEARCH
    If REC_FIFOT <= 999999 Let FT2[1] = REC_FIFOT
    Gosub WRITE_FIFOTRANS
    FLT$[1,6] = FT2[0] Using "######" \ FLT$[7,12] = FT2[2] Using "######"
    If REC_FIFOT <= 999999
      FLT$[13,18] = FT2[1] Using "######"
    Else 
      FTRECA = Int((REC_FIFOT - 1000000) / 100000)
      FTRECB = Fra(REC_FIFOT / 100000) * 100000
      Call String(4,FTRECA + 193,LETTER$)
      FLT$[13,13] = LETTER$[1,1]
      FLT$[14,18] = FTRECB Using "#####"
    End If 
    Search #CH_FIFOT,4,1;FLT$,REC_FIFOT,E \ If E Gosub ERR_SEARCH
    Gosub WRITE_FIFOLOT
    SPCFLAG = 0
    If P61$[60,60] = "Y" And FL3[14] <> 0 Let SPCFLAG = 99
    If SPCFLAG = 0
      If P9$[17,17] = "Y" And POGLFLAG <> 0 And C0[4] <> 0 And SPO <> 0
        FIFOSPECCH[0] = CH_FIFOL
        FIFOSPECCH[1] = CH_FIFOT
        Call "MXFIFOVAR.dl4",FIFOSPECCH[],REC_FIFOL,REC_FIFOT,OFCST,FL3[6],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$                                           
      End If 
    End If 
    If P61$[81,81] = "Y" ! average fifo cost
      FIFOSPECCH[0] = CH_FIFOL
      FIFOSPECCH[1] = CH_FIFOT
      FIFOSPECCH[2] = 0
      FIFOSPECCH[3] = 0
      FIFOSPECCH[4] = CH_PROD
      FIFOSPECCH[5] = CH_PRWH
      FIFOSPEC$[1,12] = PCT$[1,12]
      Call "mxfifoavg.dl4",FIFOSPECCH[],FIFOSPEC$,e$,IntCo,rstr$
    End If 
    Goto SRCHFIFOLOT
ENDSRCHFIFOLOT: Rem end of the search for fifo
  End If 
End If 
PCT5[8] = NEWAVG
PCT5[9] = NEWNET
Mat Write #CH_POC,REC_POC,90;PCT5
Mat Write #CH_POC,REC_POC,180;PCT9;
UPSPECCOST: Rem update special cost section
If P61$[60,60] <> "Y" Goto OUTEND
If Not(PCT7[0]) Goto OUTEND
If P60$[9,9] <> "F" Goto OUTEND
KEYAPPOLH$ = " ",KEYAPPOLH$
KEYAPPOLH$[1,6] = O2 Using "######"
KEYAPPOLH$[7,18] = O1$[1,12]
KEYAPPOLH$[19,20] = O1 Using "##"
KEYAPPOLH$[21,26] = PCT1[0] Using "######"
KEYAPPOLH$[27,29] = L1[2] Using "###"
KEYAPPOLH$[30,35] = PCT1[3] Using "######"
Search #CH_APPOLH,2,1;KEYAPPOLH$,REC_APPOLH,E \ If E > 1 Gosub ERR_SEARCH
If E Goto OUTEND
Mat Read #CH_APPOLH,REC_APPOLH,36;APL2;
Mat Read #CH_APPOLH,REC_APPOLH,24;APL1;
Mat Read #CH_APPOLH,REC_APPOLH,78;APL3;
If PCT2[1] <> SPCURRCOST And APL1[4] <> 0 ! cost different line closed
  FLK$ = " ",FLK$
  FLK$[1,12] = PCT$[1,12];FLK$[13,14] = PCT3[1] Using "##"
  X2 = PCT1[4] \ Gosub YMD2JUL
  Goto ENDSRCHSPCLOT
  RSTDATE = X2
  FLK$[15,20] = RSTDATE Using "######"
SRCHSPCLOT: Rem search fifo lot for tier
  Search #CH_FIFOL,3,1;FLK$,REC_FIFOL,E \ If E = 2 Goto ENDSRCHSPCLOT
  If E Gosub ERR_SEARCH
  If FLK$[1,12] <> PCT$[1,12] Goto ENDSRCHSPCLOT
  WH = FLK$[13,14] \ If WH <> PCT3[1] Goto ENDSRCHSPCLOT
  X2 = FLK$[15,20] \ If X2 <> RSTDATE Goto ENDSRCHSPCLOT
  Gosub READ_FIFOLOT
  If FL1[1] <> 1 Goto SRCHSPCLOT
  PO = FL1$[44,49] \ If PO <> PCT1[0] Goto SRCHSPCLOT
  Rem if pct2[0]<>fl3[0] goto srchspclot:! check qty
  If FL1$[74,74] = "c" ! check contrl # for multiple receipts of a line
    POCNTRL = FL1$[75,80]
    If POCNTRL And PCT1[3] <> POCNTRL Goto SRCHSPCLOT
  End If 
  If FL3[14] = SPCURRCOST Goto SRCHSPCLOT
  OFCST = FL3[14]
  OLDEXTCOST = FNR(FL3[0] * FL3[14])
  NEWEXTCOST = FNR(FL3[0] * SPCURRCOST)
  If OLDEXTCOST = NEWEXTCOST Goto SRCHSPCLOT
  Mat Read #CH_POC,REC_POC,180;PCT9
  TOTFOCOST = FNR((FL3[0] - FL3[1]) * FL3[14])
  TOTFNCOST = FNR((FL3[0] - FL3[1]) * SPCURRCOST)
  PCT9 = PCT9 + (TOTFNCOST - TOTFOCOST)
  Mat Write #CH_POC,REC_POC,180;PCT9;
  FL3[14] = SPCURRCOST
  FT1$ = " ",FT1$
  For S9 = 0 To 3 \ FT1[S9] = 0 \ FT2[S9] = 0 \ FT3[S9] = 0 \ Next S9
  FT1$[1,12] = FL1$[1,12] \ FT1$[13,24] = FL1$[13,24]
  FT1$[25,34] = FL1$[25,34] \ FT1$[35,40] = FL1$[35,40]
  FT1$[41,50] = O2 Using "AP V######"
  FT1$[53,59] = "FSP ADJ"
  FT1$[60,71] = O1$[1,12]
  FT1[0] = 66
  FT1[1] = FL1[0]
  FT1[2] = rec_uac \ FT2[0] = FL2[0]
  FT2[2] = CURJDATE \ FT2[3] = POSTPER \ FT3[0] = 0
  FT3[1] = FL3[6] \ FT3[2] = FL3[7] \ FT3[3] = FL3[14]
  FLT$ = " ",FLT$
  E = 2 \ Search #CH_FIFOT,1,0;FLT$,REC_FIFOT,E \ If E Gosub ERR_SEARCH
  If REC_FIFOT <= 999999 Let FT2[1] = REC_FIFOT
  Gosub WRITE_FIFOTRANS
  FLT$[1,6] = FT2[0] Using "######" \ FLT$[7,12] = FT2[2] Using "######"
  If REC_FIFOT <= 999999
    FLT$[13,18] = FT2[1] Using "######"
  Else 
    FTRECA = Int((REC_FIFOT - 1000000) / 100000)
    FTRECB = Fra(REC_FIFOT / 100000) * 100000
    Call String(4,FTRECA + 193,LETTER$)
    FLT$[13,13] = LETTER$[1,1]
    FLT$[14,18] = FTRECB Using "#####"
  End If 
  Search #CH_FIFOT,4,1;FLT$,REC_FIFOT,E \ If E Gosub ERR_SEARCH
  Gosub WRITE_FIFOLOT
  SPCFLAG = 99
  If P9$[17,17] = "Y" And POGLFLAG <> 0 And C0[4] <> 0 And SPO <> 0
    FIFOSPECCH[0] = CH_FIFOL
    FIFOSPECCH[1] = CH_FIFOT
    If Not(OFCST) Let OFCST = FL3[6]
    Call "MXFIFOVAR.dl4",FIFOSPECCH[],REC_FIFOL,REC_FIFOT,OFCST,FL3[14],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
  End If 
  Goto SRCHSPCLOT
ENDSRCHSPCLOT: Rem end of the search for fifo
End If 
Goto OUTEND
READ_POC: Rem read pocontrol line
Mat Read #CH_POC,REC_POC,0;PCT1;
Mat Read #CH_POC,REC_POC,24;PCT2;
Mat Read #CH_POC,REC_POC,60;PCT3;
Mat Read #CH_POC,REC_POC,66;PCT$;
Mat Read #CH_POC,REC_POC,78;PCT4;
Mat Read #CH_POC,REC_POC,90;PCT5;
Mat Read #CH_POC,REC_POC,162;PCT6;
Mat Read #CH_POC,REC_POC,174;PCT7;
Mat Read #CH_POC,REC_POC,180;PCT9
Mat Read #CH_POC,REC_POC,288;PCT0
Return 
READ_FIFOLOT: Rem read fifolot file
Rem {begin src/inc/read.fifolot.i}
Mat Read #CH_FIFOL,REC_FIFOL,0;FL1
Mat Read #CH_FIFOL,REC_FIFOL,6;FL1$
Mat Read #CH_FIFOL,REC_FIFOL,86;FL2
Mat Read #CH_FIFOL,REC_FIFOL,102;FL3
Rem {end read.fifolot.i}
Return 
WRITE_FIFOLOT: Rem write fifolot file
Rem {begin src/inc/write.fifolot.i}
Mat Write #CH_FIFOL,REC_FIFOL,0;FL1
Mat Write #CH_FIFOL,REC_FIFOL,6;FL1$
Mat Write #CH_FIFOL,REC_FIFOL,86;FL2
Mat Write #CH_FIFOL,REC_FIFOL,102;FL3;
Rem {end write.fifolot.i}
Return 
WRITE_FIFOTRANS: Rem write fifotrans file
Rem {begin src/inc/write.fifotrans.i}
Mat Write #CH_FIFOT,REC_FIFOT,0;FT1$;
Mat Write #CH_FIFOT,REC_FIFOT,72;FT1;
Mat Write #CH_FIFOT,REC_FIFOT,80;FT2;
Mat Write #CH_FIFOT,REC_FIFOT,96;FT3;
Rem {end write.fifotrans.i}
Return 

Rem {begin src/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
If X2 <= 0 Let X$ = " ",X$ \ Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
If X2 <= 0 Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
Rem {end rtn.date.i}
GETCURJDATE: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
DATE = X$
Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
X2 = X$[1,5]
CURJDATE = X2
Return 

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: Goto L_20120!If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$ = msg$ \ Error 10000                      
Return ! End                                 
If Msg$<>"" let e$=msg$ !  Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump("tmp/ladelcost!","")
! goto err_msg ! Error 10000
Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)
End


OUTEND: Rem EXIT
!If Err 0 Rem
 Try Close #CH_PROD Else Rem
 Try Close #CH_PRWH Else Rem
 Try Close #CH_POH Else Rem
 Try Close #CH_APPOLH Else Rem
 Try Close #CH_POL Else Rem
If P60$[9,9] = "F"
   Try Close #CH_FIFOL Else Rem
   Try Close #CH_FIFOT  Else Rem
End If
if sqlChan <> -1
	try close #sqlChan else rem
end if
Else
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
