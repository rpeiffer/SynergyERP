! >>> Program 403
!
! description Lifo Reserve Report
! loadsave -w -n 100,10 -o prog/dxport/403.dl4 src/403.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"

Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 18, 2003  10:13:23
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/mx/mx403.src (univ2) [jcs] {23326}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem MX403 LIFO RESERVE INVENTORY
Rem LAST UPDATE: option to suppress zero inventory balances -MTG
Rem              03/1997 - FIFO USES JULIAN DATES
Try
	Com 1%,PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10]
	dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
	dim rstr$[5000]
	dim 1%,SC,SR,Z9[9],PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10],J4$[50]
	dim 2%,WHSE,JRNL
	dim 1%,IntCo,eflg,returnstatus
	dim e$[500] ! 
	dim 3%,SPREC,rec_uac
!If Err 0 Gosub ERR_TRAP
! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim U5$[20],D$[24]
DIM 3%,TOTREC
Dim 3%,COST,UNIT,SUNIT$[4],CUNIT$[4],CUNIT,UNIT$[10],2%,C4[8]
Dim P1$[156],PMASK$[12],F3$[50]
Dim P9$[50],P60$[50],COST$[1],SCRATCH$[80]
Dim FTK$[30],FT1$[72],1%,FT1[3],2%,FT2[3],3%,FT3[3]
Dim FLK$[30],1%,FL1[2],FL1$[80],2%,FL2[3],3%,FL3[8]
Dim 1%,F8,FLAG,U2,F1,W1[2],2%,D3[1],JARDATE
Dim 2%,B1[24],A3,WHSE,Q0[1],DATE,S9[1],ARDATE
Dim 3%,A1[33],A2[7],FQ9[2],FTQTY,QTYUSE,W3[24],ORQTY,R[23]
Dim 4%,T9[6],BPCAT[20],EPCAT[20],EB[99,20],BB[99,20]
Dim J$[40],J1$[30],J2$[20],J8$[8]
Dim 1%,X1[9],2%,X2,3%,J,K6$[60]
Dim K1$[50],K2$[20],K3$[20],X$[10],T9$[26],K5$[60]
Dim GLCOST$[1],DETAIL$[1],FLAG$[1],WHSNAME$[30]
Dim 3%,FTRECA,FTRECB,LETTER$[1]
Def FND(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],Message$[600]
!Dim action$[30],options$[30],userid$[8]
!Dim rstr$[2000],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
! call dxopen() ! needed?

! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

COID=IntCo 
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflg=0
returnstatus=1
abortjournal=0
message$=""
!Call dxget("IJABRT",tmp$)                                                 
!tmp$ = UCase$(trim$(tmp$))                                                                                                          
!If tmp$ <> "" !
!  abortjournal=99
!  Message$ = "OK - NO JOURNAL"                                            
!  ReturnStatus = 0 ! 1=no good (ONLY DISPLAYS IF =1 ??)
!  goto l_9010:
!ENDIf   
for ctr=2 to 89
	try close #ctr else rem
next ctr
rec_uac = GetUIDRec(e$,IntCo,Userid$)
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
If P60$[9,9] <> "L" 
	eflag=eflag+1
	Message$ = "LIFO INVENTORY METHOD NOT AVAILABLE"                                            
	ReturnStatus = 0 ! 1=no good (ONLY DISPLAYS IF =1 ??)Goto L_750
	goto L_9010:
endif
Mat Read #1,52,36;S9;
if not(s9)
	eflag=eflag+1
	returnstatus=0
	Message$= "LIFO RESERVE METHOD IS NOT AVAILABLE..."
	goto l_9010:
endif

If S9[1] = 99
	let eflag=eflag+1
	returnstatus=0
	Message$="LIFO RESERVE IS PROCESSING ELSEWHERE..."
	goto L_9010:
endif
Mat Read #1,0,120;U2;
If U2 = S9[1] 
	let eflag=eflag+1
	returnstatus=0
	Message$="LIFO RESERVE ALREADY PROCESSED FOR THIS MONTH"
	goto L_9010:
endif
Mat Read #1,0,108;ARDATE;
F3$ = ARDATE Using "1/LIFORES&&&&&&"
Call FindF(F3$,A9) 
If A9<>0
	returnstatus=0
	let eflag=eflag+1
	message$="LIFO RESERVE IS IN PROCESS ELSEWHERE...."
	goto l_9010:
endif
Call dxget("dt",TMP$) ! report type  D=detail  S=summary 

detail$ = RTrim$(UCase$(TMP$))                                  
If detail$ <> "D" And detail$ <> "S"                           
  eflag = eflag + 1                                                
  Message$ = Message$ + " Invalid Report Print Option Entered " 
End If
Call dxget("I2",UNIT$) \ Unittype = UNIT$ 
IF unittype<1 or unittype>6
	let eflag=eflag+1
	let message$="Invalid Default Unit of Measure Selected "
else
	let unit=unittype
	U5$ = " ",U5$
	If UNIT = 1 Let U5$ = "IN STOCKING UNITS "
	If UNIT = 2 Let U5$ = "IN SELLING UNITS "
	If UNIT = 3 Let U5$ = "IN PURCHASING UNITS "
	If UNIT = 4 Let U5$ = "IN COSTING UNITS "
	If UNIT = 5 Let U5$ = "IN PRICING UNITS "
	If UNIT = 6 Let U5$ = "IN PRODUCTION UNITS "
	UNIT = UNIT + 7
endif
Call dxget("PRPRT",TMP$) ! (NOT ADDED?)    
audonly = 0 \ If RTRIM$(TMP$) <> "" Let audonly = 1

if eflag<>0
	let returnstatus=0
	goto L_9010:
endif
! 9010
L_790: Mat Read #1,52,36;S9 \ S9[1] = 99 \ Mat Write #1,52,36;S9;
For J = 2 To 9
  Read J1
  If Not(J1) Goto L_830
  Read #1,88,J1;J$;
  Open #J,J$
L_830: Next J
Data "1792","1744 ","1728","2768","0","3008  ","3024","1984"
Mat Read #1,0,100;J8$;
Read #1,3;J1$;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])

J8 = 0 
J9 = 55 


L_1000: Rem GET RANGES
J1 = 90 \ J2 = 0
K2$ = "" \ K3$ = "}}}}}}"
WHSE = 0
F8 = 0
L_1200: COST$ = "A"
Mat Read #1,52,64;GLCOST$; \ If GLCOST$ = "I" Let COST$ = "L"
FLAG$ = "B"
Mat Read #1,0,108;ARDATE;
X2 = ARDATE \ Gosub L_7820 \ X2 = 0
If X2 Let JARDATE = X2 Else Gosub L_7650
F1 = 0
L_2000: Search #7,3,1;K1$,R[7],E \ If E = 2 Goto L_6000
If E Gosub ERR_SEARCH
If K1$[1,12] <> FL1$[1,12] Gosub L_5400
Mat Read #7,R[7],0;FL1;
Mat Read #7,R[7],6;FL1$; \ Mat Read #7,R[7],86;FL2; \ Mat Read #7,R[7],102;FL3;
K2$ = " ",K2$ \ K2$[1,12] = FL1$[1,12]
Search #2,2,1;K2$,R[2],E \ If E > 2 Gosub ERR_SEARCH
If E Print #0;FL1$[1,12];" IS NOT IN THE MASTER FILE!" \ J1 = J1 + 1 \ Gosub ERR_SEARCH
Mat Read #2,R[2],0;P1$;
Mat Read #2,R[2],156;B1;
Mat Read #2,R[2],256;A1;
Mat Read #2,R[2],460;A2;
Mat Read #2,R[2],508;A3;
Mat Read #2,R[2],512;PFU1;
Mat Read #2,R[2],554;PFU2;
Mat Read #2,R[2],894;C4;
Mat Read #2,R[2],256;A;
QTY = FL3[0] - FL3[1]
COST = FL3[6]
If COST$ = "L" Let COST = FL3[7]
T9[3] = FND(COST * QTY)
If DETAIL$ = "D" Gosub L_5000
If B1[11] < 1 Or B1[11] > 20 Let B1[11] = 0
If FLAG$ = "B" Let BB[FL1[0],B1[11]] = BB[FL1[0],B1[11]] + T9[3]
If FLAG$ = "E" Let EB[FL1[0],B1[11]] = EB[FL1[0],B1[11]] + T9[3]
T9[3] = 0
Goto L_2000
L_4000: Rem TOTAL PRINT
If DETAIL$ = "S" Goto L_4080
Gosub L_5400
Gosub L_5800
Print #0;"\15\** TOTALS **";
Print #0; Using "---------#.##"; Tab 85;T9[4];
Print #0; Using "-----------#.##"; Tab 117;T9[5]
Print #0;" "
For X = 0 To 5 \ T9[X] = 0 \ Next X
L_4080: Return 
L_4100: Rem PRINT SUMMARY BEGINNING BALANCE
F1 = 99
J1 = 90
T9[0] = 0
For I = 0 To 20 \ BPCAT[I] = 0 \ Next I
For I = 0 To 99
  WHSE = 0
  For X = 0 To 20
    If Not(BB[I,X]) Goto L_4200
    If Not(WHSE)
      Print #0;"" \ J1 = J1 + 1
      Mat Read #5,(I - 1),4;WHSNAME$;
      Gosub L_5800
      Print #0; Using "## "; Tab 10;"*** WAREHOUSE: ";I;WHSNAME$[1,30]
      Print #0;"" \ J1 = J1 + 1
      WHSE = I
    End If 
    Mat Read #9,X;D$;
    Gosub L_5800
    Print #0; Using "##)"; Tab 5;X;" ";D$[1,24];
    Print #0; Using "---,---,---,---.##"; Tab 35;BB[I,X]
    T9[0] = T9[0] + BB[I,X]
    BPCAT[X] = BPCAT[X] + BB[I,X]
L_4200: Next X
  If T9[0] = 0 And WHSE = 0 Goto L_4228
  Print #0; Tab 35;"------------------" \ J1 = J1 + 1
  Gosub L_5800
  Print #0; Using "##"; Tab 5;"TOTAL FOR WAREHOUSE: ";I;
  Print #0; Using "---,---,---,---.##"; Tab 35;T9[0]
  T9[0] = 0
L_4228: Next I
Print #0;"" \ J1 = J1 + 1
Gosub L_5800
Print #0; Tab 10;"*** TOTAL FOR ALL WAREHOUSES ***"
Print #0;"" \ J1 = J1 + 1
For X = 1 To 20
  If Not(BPCAT[X]) Goto L_4276
  Mat Read #9,X;D$;
  Gosub L_5800
  Print #0; Using "##)"; Tab 5;X;" ";D$[1,24];
  Print #0; Using "---,---,---,---.##"; Tab 35;BPCAT[X]
  T9[0] = T9[0] + BPCAT[X]
L_4276: Next X
Print #0; Tab 35;"------------------" \ J1 = J1 + 1
Gosub L_5800
Print #0; Tab 5;"*** GRAND TOTAL ***";
Print #0; Using "---,---,---,---.##"; Tab 35;T9[0]
T9[0] = 0
Return 
L_4300: Rem PRINT SUMMARY ENDING BALANCE
F1 = 99
J1 = 90
T9[0] = 0
For I = 0 To 20 \ EPCAT[I] = 0 \ Next I
For I = 0 To 99
  WHSE = 0
  For X = 0 To 20
    If Not(EB[I,X]) Goto L_4392
    If Not(WHSE)
      Print #0;"" \ J1 = J1 + 1
      Mat Read #5,(I - 1),4;WHSNAME$;
      Gosub L_5800
      Print #0; Using "## "; Tab 10;"*** WAREHOUSE: ";I;WHSNAME$[1,30]
      Print #0;"" \ J1 = J1 + 1
      WHSE = I
    End If 
    Mat Read #9,X;D$;
    Gosub L_5800
    Print #0; Using "##)"; Tab 5;X;" ";D$[1,24];
    Print #0; Using "---,---,---,---.##"; Tab 35;EB[I,X]
    T9[0] = T9[0] + EB[I,X]
    EPCAT[X] = EPCAT[X] + EB[I,X]
L_4392: Next X
  If T9[0] = 0 And WHSE = 0 Goto L_4420
  Print #0; Tab 35;"------------------" \ J1 = J1 + 1
  Gosub L_5800
  Print #0; Using "##"; Tab 5;"TOTAL FOR WAREHOUSE: ";I;
  Print #0; Using "---,---,---,---.##"; Tab 35;T9[0]
  T9[0] = 0
L_4420: Next I
Print #0;"" \ J1 = J1 + 1
Gosub L_5800
Print #0; Tab 10;"*** TOTAL FOR ALL WAREHOUSES ***"
Print #0;"" \ J1 = J1 + 1
For X = 1 To 20
  If Not(EPCAT[X]) Goto L_4468
  Mat Read #9,X;D$;
  Gosub L_5800
  Print #0; Using "##)"; Tab 5;X;" ";D$[1,24];
  Print #0; Using "---,---,---,---.##"; Tab 35;EPCAT[X]
  T9[0] = T9[0] + EPCAT[X]
L_4468: Next X
Print #0; Tab 35;"------------------" \ J1 = J1 + 1
Gosub L_5800
Print #0; Tab 5;"*** GRAND TOTAL ***";
Print #0; Using "---,---,---,---.##"; Tab 35;T9[0]
T9[0] = 0
Return 
L_4500: Rem PRINT ADJUSTMENT BALANCES
FLAG$ = "*" \ J1 = 90
F1 = 99
J1 = 90
T9[0] = 0 \ T9[1] = 0
For I = 0 To 20 \ BPCAT[I] = 0 \ EPCAT[I] = 0 \ Next I
For I = 0 To 99
  WHSE = 0
  For X = 0 To 20
    If Not(EB[I,X]) And Not(BB[I,X]) Goto L_4592
    If Not(WHSE)
      Print #0;"" \ J1 = J1 + 1
      Mat Read #5,(I - 1),4;WHSNAME$;
      Gosub L_5800
      Print #0; Using "## "; Tab 10;"*** WAREHOUSE: ";I;WHSNAME$[1,30]
      Print #0;"" \ J1 = J1 + 1
      WHSE = I
    End If 
    Mat Read #9,X;D$;
    Gosub L_5800
    Print #0; Using "##)"; Tab 5;X;" ";D$[1,24];
    Print #0; Using "---,---,---,---.##"; Tab 35;BB[I,X]; Tab 55;EB[I,X]; Tab 75;(EB[I,X] - BB[I,X])
    T9[0] = T9[0] + BB[I,X] \ T9[1] = T9[1] + EB[I,X]
    EPCAT[X] = EPCAT[X] + EB[I,X] \ BPCAT[X] = BPCAT[X] + BB[I,X]
L_4592: Next X
  If T9[0] = 0 And WHSE = 0 Goto L_4620
  Print #0; Tab 35;"------------------";
  Print #0; Tab 55;"------------------";
  Print #0; Tab 75;"------------------" \ J1 = J1 + 1
  Gosub L_5800
  Print #0; Using "##"; Tab 5;"TOTAL FOR WAREHOUSE: ";I;
  Print #0; Using "---,---,---,---.##"; Tab 35;T9[0]; Tab 55;T9[1]; Tab 75;(T9[1] - T9[0])
  T9[0] = 0 \ T9[1] = 0
L_4620: Next I
Print #0;"" \ J1 = J1 + 1
Gosub L_5800
Print #0; Tab 10;"*** TOTAL FOR ALL WAREHOUSES ***"
Print #0;"" \ J1 = J1 + 1
For X = 1 To 20
  If Not(EPCAT[X]) And Not(BPCAT[X]) Goto L_4668
  Mat Read #9,X;D$;
  Gosub L_5800
  Print #0; Using "##)"; Tab 5;X;" ";D$[1,24];
  Print #0; Using "---,---,---,---.##"; Tab 35;BPCAT[X]; Tab 55;EPCAT[X]; Tab 75;(EPCAT[X] - BPCAT[X])
  T9[0] = T9[0] + BPCAT[X] \ T9[1] = T9[1] + EPCAT[X]
L_4668: Next X
Print #0; Tab 35;"------------------" \ J1 = J1 + 1
Gosub L_5800
Print #0; Tab 5;"*** GRAND TOTAL ***";
Print #0; Using "---,---,---,---.##"; Tab 35;T9[0]; Tab 55;T9[1]; Tab 75;(T9[1] - T9[0])
T9[0] = 0 \ T9[1] = 0
Return 
L_4700: Rem PRINT SUMMARY BEGINNING BALANCE
Call FindF(F3$,A9)
if a9<>0
	let eflag=eflag+1
	let message$="Error. File "+rtrim$(f3$)+" Already Exists. Cannot run report to completion "
	goto err_search:
endif
Build #50, + F3$
T9[0] = 0
For I = 0 To 20 \ BPCAT[I] = 0 \ Next I
Print #50;"" \ Print #50; Using "&&&&&&";"PRIOR LIFO RESERVE ON ";ARDATE \ Print #50;""
For I = 0 To 99
  WHSE = 0
  For X = 0 To 20
    If Not(BB[I,X]) Goto L_4742
    If Not(WHSE)
      Mat Read #5,(I - 1),4;WHSNAME$;
      Print #50; Using "## "; Tab 10;"*** WAREHOUSE: ";I;WHSNAME$[1,30]
      Print #50;""
      WHSE = I
    End If 
    Mat Read #9,X;D$;
    Print #50; Using "##)"; Tab 5;X;" ";D$[1,24];
    Print #50; Using "---,---,---,---.##"; Tab 35;BB[I,X]
    T9[0] = T9[0] + BB[I,X]
    BPCAT[X] = BPCAT[X] + BB[I,X]
L_4742: Next X
  If T9[0] = 0 And WHSE = 0 Goto L_4754
  Print #50; Tab 35;"------------------"
  Print #50; Using "##"; Tab 5;"TOTAL FOR WAREHOUSE: ";I;
  Print #50; Using "---,---,---,---.##"; Tab 35;T9[0]
  T9[0] = 0
L_4754: Next I
Print #50;""
Print #50; Tab 10;"*** TOTAL FOR ALL WAREHOUSES ***"
Print #50;""
For X = 1 To 20
  If Not(BPCAT[X]) Goto L_4774
  Mat Read #9,X;D$;
  Print #50; Using "##)"; Tab 5;X;" ";D$[1,24];
  Print #50; Using "---,---,---,---.##"; Tab 35;BPCAT[X]
  T9[0] = T9[0] + BPCAT[X]
L_4774: Next X
Print #50; Tab 35;"------------------"
Print #50; Tab 5;"*** GRAND TOTAL ***";
Print #50; Using "---,---,---,---.##"; Tab 35;T9[0]
T9[0] = 0
Return 
L_4800: Rem print ending begginning balance to text file
T9[0] = 0
For I = 0 To 20 \ EPCAT[I] = 0 \ Next I
Print #50;"" \ Print #50; Using "&&&&&&";"AFTER LIFO RESERVE ON ";ARDATE \ Print #50;""
For I = 0 To 99
  WHSE = 0
  For X = 0 To 20
    If Not(EB[I,X]) Goto L_4842
    If Not(WHSE)
      Mat Read #5,(I - 1),4;WHSNAME$;
      Print #50; Using "## "; Tab 10;"*** WAREHOUSE: ";I;WHSNAME$[1,30]
      Print #50;""
      WHSE = I
    End If 
    Mat Read #9,X;D$;
    Print #50; Using "##)"; Tab 5;X;" ";D$[1,24];
    Print #50; Using "---,---,---,---.##"; Tab 35;EB[I,X]
    T9[0] = T9[0] + EB[I,X]
    EPCAT[X] = EPCAT[X] + EB[I,X]
L_4842: Next X
  If T9[0] = 0 And WHSE = 0 Goto L_4854
  Print #50; Tab 35;"------------------"
  Print #50; Using "##"; Tab 5;"TOTAL FOR WAREHOUSE: ";I;
  Print #50; Using "---,---,---,---.##"; Tab 35;T9[0]
  T9[0] = 0
L_4854: Next I
Print #50;""
Print #50; Tab 10;"*** TOTAL FOR ALL WAREHOUSES ***"
Print #50;""
For X = 1 To 20
  If Not(EPCAT[X]) Goto L_4874
  Mat Read #9,X;D$;
  Print #50; Using "##)"; Tab 5;X;" ";D$[1,24];
  Print #50; Using "---,---,---,---.##"; Tab 35;EPCAT[X]
  T9[0] = T9[0] + EPCAT[X]
L_4874: Next X
Print #50; Tab 35;"------------------"
Print #50; Tab 5;"*** GRAND TOTAL ***";
Print #50; Using "---,---,---,---.##"; Tab 35;T9[0]
T9[0] = 0
Return 
L_5000: Rem PRINT LINE
QTY = FL3 \ Gosub L_10000 \ ORQTY = QTY
QTY = (FL3[0] - FL3[1])
If COST$ = "A" Let COST = FL3[6] Else Let COST = FL3[7]
Gosub L_10000
If F8 And QTY = 0 And T9[3] = 0 Return 
Gosub L_5800
If Not(CT)
  Print #0; Tab 1;P1$[140,151];
  Print #0; Tab 13;P1$[9,38];
  Print #0; Tab 44;P1$[139,139];
  Print #0; Tab 47;P1$[152,155];
End If 
If P9$[26,26] = "Y" If CT = 1
  Print #0; Tab 13;P1$[63,92];
End If 
Print #0; Using "##"; Tab 52;FL1;
Print #0; Using "-------#.## "; Tab 56;ORQTY;SUNIT$;
If F9 < 99 If QTY = 0 Goto L_5230
X2 = FL2[1] \ Gosub L_7770
Print #0; Tab 75;X$[1,8];
Print #0; Using "-------#.## "; Tab 87;QTY;SUNIT$;
Print #0; Using PMASK$; Tab 104;COST;" /";CUNIT$;
Print #0; Using "-------#.##"; Tab 120;T9[3];
CT = CT + 1
TOTQ = TOTQ + QTY \ TOTCOST = TOTCOST + T9[3]
T9[4] = T9[4] + QTY \ T9[5] = T9[5] + T9[3]
Print #0;""
totrec=totrec+1
L_5230: Rem
Return 
L_5400: Rem PRINT TOTAL
If DETAIL$ = "S" 
	TOTREC=TOTREC+1
	Goto L_5470
endif
If Not(CT) Goto L_5470
If CT = 1 Goto L_5460
Gosub L_5800
Print #0; Using "TOTAL -------#.## "; Tab 81;TOTQ;SUNIT$;
Print #0; Using "-------#.##"; Tab 120;TOTCOST
L_5460: Print #0;" " \ J1 = J1 + 1
L_5470: TOTQ = 0
TOTCOST = 0
CT = 0
Return 
L_5800: Rem HEADINGS ROUTINE
J1 = J1 + 1 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 6
If Not(J8) Print #0;"\12\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;J8$; Tab (64 - Len(J1$) / 2);J1$; Tab 120;"PAGE";J2
Print #0;" - 403 -";COST$;"- ";T9$;
Print #0; Tab 38;"L I F O    I N V E N T O R Y   R E S E R V E   R E P O R T";
if audonly<>0
	print #0; tab 100;"**Preview**";
endif
print #0;""

X2 = ARDATE \ Gosub L_7700
Print #0; Tab 5;"FOR THE PERIOD ENDING ";X$[1,8];
If FLAG$ = "B" Print #0; Tab 48;"PRIOR INVENTORY RESERVE ADJUSTMENTS";
If FLAG$ = "E" Print #0; Tab 48;"AFTER INVENTORY RESERVE ADJUSTMENT";
Print #0; Tab 100;"FOR ALL WAREHOUSES ";U5$;
Print #0;""
If DETAIL$ = "S" Goto L_5950
If FLAG$ = "*" Goto L_5965
If F1 Goto L_5950
Print #0; Tab 1;"ITEM CODE";
Print #0; Tab 13;"DESCRIPTION";
Print #0; Tab 44;"MB";
Print #0; Tab 47;"COMM";
Print #0; Tab 52;"WHSE";
Print #0; Tab 59;"ORIG QTY ";
Print #0; Tab 75;"RTS DATE";
Print #0; Tab 94;"ON HAND";
Print #0; Tab 108;"TRANS COST";
Print #0; Tab 123;"EXT COST";
Print #0;" "
L_5950: Print #0;""
F9 = 99
Return 
L_5965: Rem PRINT PAGE HEADING FOR ADJUSTMENT TOTALS
Print #0;""
Print #0; Tab 5;"PRODUCT CATEGORY"; Tab 35;"BEGINNING BALANCE";
Print #0; Tab 55;"ENDING BALANCE"; Tab 75;"ADJUSTMENT AMOUNT"
Print #0;""
Return 
L_6000: Rem END OF BALANCE REPORT
Gosub L_4000
If FLAG$ = "E" Goto L_7100
Gosub L_4100
L_6020: !Print @0,23;'CL RB';"Do You Wish to Update Lifo Balances (YES/N) "; \ Input ""J2$
!If J2$ = "N" Goto OUTEND
!If J2$ <> "YES" Goto L_6020
!Print @0,23;'CL';"updating lifo reserve...please wait...";
if audonly<>0 goto outend:
Gosub L_4700
! If Err 0 Gosub ERR_TRAP
FLK$ = " ",FLK$ \ QTYUSE = 0
! Print @0,23;'CL';"Updating LIFO RESERVE....Please Wait...";
K2$ = " ",K2$
L_6110: Search #2,3,1;K2$,R[2],E \ If E = 2 Goto L_7000
If E Gosub ERR_SEARCH
Mat Read #2,R[2],0;P1$; \ Mat Read #2,R[2],156;B1
Mat Read #2,R[2],512;PFU1;
K3$ = K2$[1,12]
L_6130: Search #3,3,1;K3$,R[3],E \ If E = 2 Goto L_6110
If E Gosub ERR_SEARCH
If K3$[1,12] <> K2$[1,12] Goto L_6110
Mat Read #3,R[3],32;W1; \ Mat Read #3,R[3],78;W3
If W3[0] < 0 Goto L_6130
FLK$ = K3$ \ QTYUSE = 0 \ FLAG = 0
L_6155: Search #7,3,1;FLK$,R[7],E \ If E = 2 Goto L_6200
If FLK$[1,14] <> K3$[1,14] Goto L_6200
Gosub L_6800
If Not(FL3[1]) Goto L_6155
FLAG = 99 \ QTYUSE = QTYUSE + FL3[1]
FL3[1] = 0 \ Gosub L_6850
Goto L_6155
L_6200: Rem *** TAKEUP QTY USED ***
If Not(QTYUSE) Goto L_6500
For X = 0 To 2 \ FQ9[X] = 0 \ Next X
FQ9[0] = - (Int(QTYUSE))
FLK$ = K3$[1,14] \ FLK$[15] = "999999"
L_6225: Search #7,6,1;FLK$,R[7],E \ If E = 2 Goto L_6400
If E Gosub ERR_SEARCH
If FLK$[1,14] <> K3$[1,14] Goto L_6400
Gosub L_6800
If Not(FL3 - FL3[1]) Goto L_6225
FQ9[2] = FQ9[0] - FQ9[1]
If FQ9[2] > 0 If (FL3[0] - FL3[1]) < 0 Goto L_6290
FQTY = FL3[0] \ For X9 = 1 To 5 \ FQTY = FQTY - FL3[X9] \ Next X9
If FQ9[2] < 0 If FQTY > 0 Goto L_6290
If FQ9[2] >= 0 Goto L_6225
If FL3[0] Goto L_6225
If JARDATE = FL2[1] Goto L_6290
Goto L_6225
L_6290: If FQ9[2] < 0 Goto L_6310
If (FL3[1] - FL3[0]) > 0 If (FL3[1] - FL3[0]) < FQ9[2] Let FQ9[2] = (FL3[1] - FL3[0])
FL3[0] = Int(FL3[0] + FQ9[2])
Goto L_6330
L_6310: If FQ9[2] > 0 Goto L_6330
FQTY = FL3[0] \ For X9 = 1 To 5 \ FQTY = FQTY - FL3[X9] \ Next X9
If FL3[0] If FQTY < Abs(FQ9[2]) Let FQ9[2] = - (FQTY)
FL3[1] = Int(FL3[1] - FQ9[2])
L_6330: Rem LET FL2[2]=JARDATE
If FL3[6] Goto L_6355
If Not(FL3[6]) If P9$[32,32] = "Y" Let FL3[6] = W3[16]
If Not(FL3[6]) Let FL3[6] = B[10]
FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
L_6355: Gosub L_6850
FQ9[1] = Int(FQ9[1] + FQ9[2])
If FQ9[0] = FQ9[1] Goto L_6500
Goto L_6225
L_6400: Rem CREATE FIFOLOT
FL1$ = " ",FL1$
For X9 = 0 To 8
  If X9 < 3 Let FL1[X9] = 0
  If X9 < 3 Let FL2[X9] = 0
  FL3[X9] = 0
Next X9
FQ9[2] = FQ9[0] - FQ9[1]
FL1[0] = W1[0] \ FL1[1] = 7 \ If FQ9[2] < 0 Let FL1[1] = 30
FL1[2] = PFU1[0]
FL1$[1,12] = P1$[140,151]
FL1$[1,12] = P1$[140,151] \ FL1$[41,65] = "LIFO RESERVE UPDATE      "
FL2[1] = JARDATE
If FQ9[2] > 0 Let FL3[0] = Int(FQ9[2])
If FQ9[2] < 0 Let FL3[1] = Int(Abs(FQ9[2]))
If FL3[6] Goto L_6452
FLK$[1,12] = FL1$[1,12] \ FLK$[13,14] = FL1[0] Using "##" \ FLK$[15] = "999999"
Search #7,3,1;FLK$,R[7],E \ If E = 2 Goto L_6448
If E Gosub ERR_SEARCH
If FLK$[1,12] <> FL1$[1,12] Goto L_6448
Read #7,R[7],138;FL3[6];
L_6448: If Not(FL3[6]) If P9$[32,32] = "Y" Let FL3[6] = W3[16]
If Not(FL3[6]) Let FL3[6] = B1[10]
L_6452: FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
FLK$ = " ",FLK$
E = 2 \ Search #7,1,0;FLK$,R[7],E \ If E Gosub ERR_SEARCH
FL2 = R[7]
Gosub L_6850
FLK$ = " ",FLK$ \ FLK$[1,12] = FL1$[1,12] \ FLK$[13,14] = FL1 Using "##"
FLK$[15,20] = FL2[1] Using "######" \ FLK$[21,26] = FL2 Using "######"
Search #7,4,1;FLK$,R[7],E \ If E Gosub ERR_SEARCH
Goto L_6500
L_6500: Rem END OF LOT ALLOCATION
If QTYUSE = 0 And FLAG = 0 Goto L_6600
FLK$ = K3$
L_6515: Search #7,3,1;FLK$,R[7],E \ If E = 2 Goto L_6600
If E Gosub ERR_SEARCH
If FLK$[1,14] <> K3$[1,14] Goto L_6600
Gosub L_6800
FTQTY = 0
FTK$ = R[7] Using "######"
L_6545: Search #8,3,1;FTK$,R[8],E \ If E = 2 Goto L_6590
If E Gosub ERR_SEARCH
X = FTK$[1,6] \ If X <> R[7] Goto L_6590
Mat Read #8,R[8],96;FT3; \ FTQTY = FTQTY + FT3[0]
Goto L_6545
L_6590: FQ9[2] = (FL3[0] - FL3[1]) - FTQTY
If FQ9[2] Gosub L_6700
Goto L_6515
L_6600: Rem ENDOF THIS PROD/WHSE
Goto L_6130
L_6700: Rem FIFOTRANS FILE UPDATE
FT1$ = " ",FT1$
For X9 = 0 To 3 \ FT1[X9] = 0 \ FT2[X9] = 0 \ FT3[X9] = 0 \ Next X9
FT1$[1,12] = FLK$[1,12]
FT1$[41,47] = "* 403 *" \ FT1$[53,72] = "LIFO RESERVE ADJUST "
FT1[0] = 7 \ If FQ9[2] < 0 Let FT1[0] = 30
FT1[1] = FL1[0]
FT1[2] = Spc(6) \ FT2[0] = FL2[0]
FT2[2] = JARDATE \ FT3[0] = FQ9[2]
FT3[1] = FL3[6] \ FT3[2] = FL3[7]
FTK$ = " ",FTK$
E = 2 \ Search #8,1,0;FTK$,R[8],E \ If E Gosub ERR_SEARCH
If R[8] <= 999999 Let FT2[1] = R[8]
Gosub L_6900
FTK$[1,6] = FT2[0] Using "######" \ FTK$[7,12] = FT2[2] Using "######"
If R[8] <= 999999
  FLK$[13,18] = FT2[1] Using "######"
Else 
  FTRECA = Int((R[8] - 1000000) / 100000)
  FTRECB = Fra(R[8] / 100000) * 100000
  Call String(4,FTRECA + 193,LETTER$)
  FLK$[13,13] = LETTER$[1,1]
  FLK$[14,18] = FTRECB Using "#####"
End If 
Search #8,4,1;FTK$,R[8],E \ If E Gosub ERR_SEARCH
Return 
L_6800: Rem READ FIFOLOT
Mat Read #7,R[7],0;FL1
Mat Read #7,R[7],6;FL1$
Mat Read #7,R[7],86;FL2
Mat Read #7,R[7],102;FL3
Return 
L_6850: Rem WRITE FIFOLOT
Mat Write #7,R[7],0;FL1
Mat Write #7,R[7],6;FL1$
Mat Write #7,R[7],86;FL2
Mat Write #7,R[7],102;FL3;
Return 
L_6900: Rem WRITE FIFOTRANS
Mat Write #8,R[8],0;FT1$;
Mat Write #8,R[8],72;FT1;
Mat Write #8,R[8],80;FT2;
Mat Write #8,R[8],96;FT3;
Return 
L_7000: Rem END OF UPDATE SECTION
FLAG$ = "E"
F1 = 0
K1$ = " ",K1$
J1 = 99
!If J8 Print 'CS';
!Print @0,21;'CL';"PRINTING... PLEASE WAIT...";
! If DETAIL$ = "D" Goto L_2000
! Print @0,23;'CL';"Calculating New Lifo Reserve Balances...Please Wait...";
Goto L_2000
L_7100: Rem END OF PRIOR INVENTORY
Gosub L_4300
Gosub L_4500
Gosub L_4800
Mat Read #1,52,36;S9 \ S9[1] = U2 \ Mat Write #1,52,36;S9;
Goto L_9010
L_7650: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
ARDATE = X$
Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
X2 = X$[1,5]
JARDATE = X2
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_7770: Rem DATE JULIAN X2 TO X$
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&";X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6] \ Return 
Mat Read #8,R8,0;FT1$;
Mat Read #8,R8,72;FT1;
Mat Read #8,R8,80;FT2;
Mat Read #8,R8,96;FT3;
Return 

L_10000: Rem
CNVTU[0] = 0
CNVTU[1] = PFU1[UNIT]
CNVTU[2] = 2
CNVTA = COST \ Gosub L_20000 \ COST = AMOUNT
CNVTU[1] = PFU1[UNIT]
CNVTU[2] = 1
CNVTA = QTY \ Gosub L_20000 \ QTY = AMOUNT
If PFU1[UNIT] > 0 Mat Read #4,PFU1[UNIT],10;SUNIT$;
If PFU1[UNIT] = -1 Let SUNIT$ = "CWT "
If PFU1[UNIT] = -3 Let SUNIT$ = "LB  "
CUNIT$ = SUNIT$
Return 
If UNIT = 1
  If W3[15] and P9$[32,32] = "Y" Let COST = W3[15] Else Let COST = B1[21]
End If 
If UNIT = 2
  If W3[18] and P9$[32,32] = "Y" Let COST = W3[18] Else Let COST = C4[4]
End If 
If UNIT = 3
  If W3[17] and P9$[32,32] = "Y" Let COST = W3[17] Else Let COST = B1[8]
End If 
If UNIT = 4
  If W3[16] and P9$[32,32] = "Y" Let COST = W3[16] Else Let COST = B1[10]
End If 
Return 

L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 2%,Q0[1]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_20510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 ! "catch weight item
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 

ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/mx403se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                                               


OUTEND: Rem EXIT PROGRAM
Mat Read #1,52,36;S9
If S9[1] = 99 Let S9[1] = U2 - 1
If S9 < 1 Let S9 = 1
If S9 > 12 Let S9 = 12
Mat Write #1,52,36;S9;

L_9010:! 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
if not(aok)
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		let message$=message$+"There are no lifo reserve transactions available to list"
		message$=message$+"."
	else
		Let message$=message$+" "+str$(totrec)+" Lifo Reserve Transactions "
		if audonly<>0 
			message$=message$+"Listed"
		else
			message$=message$+"Updated"
		endif
	endif
endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
!try Call dxclose() else rem
outend9: ! everything has been written in called program
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program