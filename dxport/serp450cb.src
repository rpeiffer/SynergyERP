! serp450cb.dl4 - Commission Chargeback report
! 1.0 03/24/2010 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp450cb.dl4 src/serp450cb.src
!
! ERP Scheduler Enabled
!
Rem MX450CB - SALESMAN COMMISSION CHARGEBACK
Rem REK 3/30/92 - COPIED FROM MX450
Rem
!cct 149999 - kag- correct display of salesman #
!???:04/16/00:Converted to Bedit   (mkbedit 1.2b)
! rce 07/09/03 cct167583  expanded category file
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV 30, 2009  15:40:51
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx/mx450cb.src (univ2) [txc] {30962}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
! ------------------------------------------------------------------------------
! 02/23/12 vst task12430 - added custom_customer$ code 
!         Added "OMAHA" custom code for:
! 06/08/11 wmb task3445 - wanted program to work like on old std. - it was 
!                          changed to not skip items paid
! ------------------------------------------------------------------------------
! --------------  notes for rev9 upgrade for Action Unlimited Resources --------
! 05/05/09 vst cct233404 - used rev9 program & added in custom code for:
! 01/10/06 mtg           - modify for chargeback based upon paid date -- ADD SARACTH  
! 05/19/10 vst cct241004 - print the invoice# 1 char to the left(change made 
!                           for Monarch )
! ------------------------------------------------------------------------------

Rem
include "src/copyright.inc"
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports
Declare External Function openprinter
Declare External Sub ERPCronSuccess
Declare External Function GetParameter$


External Lib "dxblockcustom.lib"
Declare External Sub blockPrintersDropList
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
Declare External Function chkDteFrmt$,buildsort,GetUIDRec
Declare Intrinsic Sub DateToJulian,InpBuf,String,programdump
!Option Default Dialect IRIS1

Com 2%,AGE[7],P9$[50]
try
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Dim C1$[30],K9$[50]
Dim J8$[8],K1$[50],K2$[20],K3$[20],S1$[30],CUSTCAT$[30]
Dim AGE$[1],D3$[6],D$[8],IN$[10],Z1$[100],2%,L1,C,E,AGE1
Dim 1%,FLAG,USER,SplitFlag
Dim 1%,S4[1],3%,A3[13],J,S2[1],T8[20],T9[20],S6[1],T6[1],T5[1]
Dim 3%,T10[20],T11[20],T4[1],T7[1],S10,2%,ARD,A4[7],TDATE,S12,CATGY
dim 3%,CS9[3]
Dim 3%,COMDOL,S7[2],new_comm,ocs1[3]
Dim 2%,A2[5],R1,R3,R4,R5,S1[3],S3[1],S8,currCBT,commCBT
Dim 2%,C1[12],D3[1],AGEDATE,ORDTYPE,jpaiddate
Dim 2%,JDATE[1],SLSM[1],JARDATE,DAYS,SplitPercent
Dim 1%,CBTYPE,CBDAYS[4],2%,CBPCT[4]
Dim ORDTYPE$[20],b$[100]
! commission audit file vars
dim k7$[30],k7_2$[32]
dim 1%,as1[3],as4[1],PCBDelete
dim 2%,as2[1]
dim 3%,as3[5],aorigcomm,r7
dim source$[10],cas$[60]



Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[600],msg$[100],rstr$[2000],webstr$[2000]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128],action1$[30],action2$[30]
Dim List$[100,100],Desc$[20]
dim 2%,DATEPAID,CUSTOM_CUSTOMER$[30]
Dim 3%
! call dxopen() ! for standalone run
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
call env(1,"ERP_FROM_CRON",tmp$) \ erpCron = tmp$
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
b$=" ",b$
For J = 2 To 11
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,ABS(J1);J$;
  if J1<0 ROpen #J,J$ Else  Open #J,J$
L_830: Next J
Data "2240","1824","1808","1504","2096","-1","-1408","-1","-1",-720
OPEN #7,"4/commaudit"+STR$(intCO)
OPEN #10,"2/commcbt"+str$(intco)
USER = GetUIDRec(e$, intCo, userid$)
Read #1,3;J1$;
Mat Read #1,19,50;P9$;
Read #1,0,108;ARD;
Mat Read #1,0,100;J8$;
currCBT = 0 \ gosub ReadCommissionChargebackTable:
D3$ = D$[1,2],D$[4,5],D$[7,8]
mat read #1,115,60;custom_customer$;
let custom_customer$=rtrim$(custom_customer$)
returnstatus=1;message$="OK"
X3 = 700101 \ Gosub L_7840 \ X3 = 0
JDATE[0] = X3
X3 = 591231 \ Gosub L_7840 \ X3 = 99999
JDATE[1] = X3
SLSM[0] = 0;SLSM[1] = 999
CAT[0] = 1;CAT[1] = 999
AGE$ = "I"
If P9$[25,25] = "Y" Let AGE$ = "D"
X3 = ARD \ Gosub L_7840 \ X3 = 0
JARDATE = X3
If action1$="GETLISTS" ! want's flags/droplists
  clear List$[]
  ! Age on I: Invoice Date   D: Due Date "
  List$[0]=bsdel$,"BASEAGE",fdel$
  List$[1]="ID",fdel$,"DESC",fdel$
  List$[2]="I",fdel$,"I - Invoice Date",fdel$
  List$[3]="D",fdel$,"D - Due Date",fdel$
  List$[4]=esdel$
  call addtostr(e$,rstr$,List$[])
  Clear List$[]
  ! ORDER TYPES 0-ALL - 
  List$[0]=bsdel$,"OrdTypeList",fdel$ ! beginning of section
	!
  List$[1]="ID",fdel$,"Description",fdel$
    !
  List$[2]="0",fdel$,"ALL Order Types",fdel$
	!
	row=3
	for cnt=1 to 38
		let dsp=(cnt-1)*20
	        read #1,62,dsp;desc$;
		if rtrim$(desc$)<>""
			 if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
			!
			tmp$=str$(cnt),fdel$
			 tmp$=tmp$,rtrim$(Desc$),fdel$
		!
			List$[row]=tmp$
			row=row+1
		endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
	List$[row]=esdel$ ! end section delimiter
  call addtostr(e$,rstr$,List$[])
  clear list$[]
  list$[0]=bsdel$,"Printers",fdel$
  List$[1]="Name",fdel$,"Id",fdel$,"Default",fdel$
  call AddToStr(e$,rstr$,List$[])
  pdfoption=1
  xmloption=1 ! BROWSER is OK  (We'll try and hope no timeout)
  Call blockPrintersDropList(rstr$,xmloption,pdfoption)
  Call AddToStr(e$,rstr$,esdel$) ! end of section 
  goto OutEnd
Endif
X2=BuildSort(e$,20,0,9) ! build a sortwork on chan#9, keysize=20w/40C
! if x2<0 Error 10000 ! problem with build
L_900: Rem start input
!Gosub DISPSRN
!Gosub DISPDATA
DISPSRN: Rem DISPLAY SCREEN
!Print 'CS';@0,0;"-mx450cb-"; Tab 27;"SALESPERSON CHARGEBACK REPORT";
!Print @5,4;"1>";@8,4;"INVOICE DATE";
!Print @5,6;"2>";@8,6;"SALESPERSON";
!Print @5,8;"3>";@8,8;"CATEGORY";
!Print @5,10;"4>";@8,10;"BASE AGE"; Tab 38;"I: Invoice Date or D: Due Date";
!Print @5,12;"5>";@8,12;"AGING DATE";
!Print @5,14;"6>";@8,14;"ORDER TYPE";
!Print @29,3;'BR';"STARTING";'ER';@49,3;'BR';"ENDING";'ER';
!Return 
DISPDATA: Rem display screen data
!X2 = DATE[0] \ Gosub L_7770 \ Print @29,4;X$[1,8];
!X2 = DATE[1] \ Gosub L_7770 \ Print @47,4;X$[1,8];
!Print Using "###";@34,6;SLSM[0];@52,6;SLSM[1];
!Print Using "###";@35,8;CAT[0];@53,8;CAT[1];
!Print @35,10;AGE$;
!X2 = JARDATE \ Gosub L_7770 \ Print @29,12;X$[1,8];
!Print Using "##";@35,14;ORDTYPE;
!Return 
!For K = 1 To 6
!  Gosub GETOPT
!Next K
EDITSEL: ! Print @0,23;'CL';"Enter #:field to edit   R: reselect all   P: print   E: exit ";
!Input Len (16384 + 1);""J$
!Call String(1,J$)
!If J$ = "E" Goto OUTEND
!If J$ = "P" Goto STARTPRINT
!If J$ = "R"
!  For K = 1 To 6
!    Gosub GETOPT
!  Next K
!  Goto EDITSEL
!End If 
!K = J$
!Gosub GETOPT
!Goto EDITSEL
GETOPT: Rem get selections here
! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!On K Gosub GETDATE,GETSLSM,GETCAT,GETAGEBASE,GETAGEDATE,GETORDTYPE
! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!Return 
GETDATE: J0$ = "5000 62904"
X3 = JDATE[0] \ Gosub L_7870 \ J1 = D3[0]
J5$ = "Enter Starting Date"
If J1 <= 0 Let J1 = 700101
! Gosub ISINPUT
tmp$ = GetParameter$("STARTDATE")
if erpCron
	tmp1$ = tmp$[1,2]+"/"+tmp$[3,4]+"/"+tmp$[5,6]
	tmp$ = tmp1$
end if
tmp1$=chkDteFrmt$(E$,tmp$)
if tmp1$[1,1]<"0" and tmp1$[1,1]>"9" let tmp1$=""
if tmp1$<>""
	tmp$=formatdate2$(tmp1$) ! mm/dd/yyyy to yyyymmdd
Else
	tmp$="19"+Str$(J1)
Endif
J1=tmp$[3,10]
X3 = J1 \ Gosub L_7840 \ X3=-1 ! Goto GETDATE
if x3<=0
	returnstatus=0
	e$="Invalid Start Date"
	goto err_msg
Endif
JDATE[0] = X3
GETDATE2: J0$ = "5000 64704"
X3 = JDATE[1] \ Gosub L_7870 \ J1 = D3[0]
If J1 <= 0 Let J1 = 591231
J5$ = "Enter Ending Date"
! Gosub ISINPUT
tmp$ = GetParameter$("ENDDATE")
if erpCron
	tmp1$ = tmp$[1,2]+"/"+tmp$[3,4]+"/"+tmp$[5,6]
	tmp$ = tmp1$
end if
tmp1$=chkDteFrmt$(E$,tmp$)
if tmp1$[1,1]<"0" and tmp1$[1,1]>"9" let tmp1$=""
  if tmp1$<>""
	tmp$=formatdate2$(tmp1$) ! mm/dd/yyyy to yyyymmdd
  Else
	tmp$="20"+J1 using "&&&&&&"
  Endif
J1=tmp$[3,10]
X3 = J1 \ Gosub L_7840 \ X3=-1 ! Goto GETDATE2
if x3<=0
	returnstatus=0
	e$="Invalid End Date"
	goto err_msg
Endif
JDATE[1] = X3
If JDATE[0] > JDATE[1]
  !Print @0,23;'CL RB';"Ending Date Must Be Greater Than Starting";
  !Signal 3,25 \ Goto GETDATE
  returnstatus=0
  e$="Invalid Date Range"
  goto err_msg
End If 
!Return 
GETSLSM: J0$ = "3000 33406"
J2$ = "###" \ J1 = SLSM[0]
J5$ = "Enter Starting Salesperson"
! Gosub ISINPUT
tmp$ = GetParameter$("STSLSM")
if tmp$="" let tmp$=Str$(SLSM[0])
j1=tmp$
SLSM[0] = J1
J0$ = "3000 35206"
J2$ = "###" \ J1 = SLSM[1]
J5$ = "Enter Ending Salesperson"
! Gosub ISINPUT
tmp$ = GetParameter$("ENDSLSM")
if tmp$="" let tmp$=Str$(SLSM[1])
j1=tmp$
SLSM[1] = J1
If SLSM[0] > SLSM[1]
  !Print @0,23;'CL RB';"Ending Salesperson Must Be Greater Than Starting";
  !Signal 3,30 \ Goto GETSLSM
  returnstatus=0
  e$="Invalid Salesperson Range"
  goto err_msg
End If 
!Return 
GETCAT: J0$ = "3000 33508"
J2$ = "###" \ J1 = CAT[0]
J5$ = "Enter Starting Customer Category"
!Gosub ISINPUT
tmp$ = GetParameter$("STCCATGY")
if tmp$="" let tmp$=Str$(CAT[0])
j1=tmp$
If J1 < 0 Or J1 > 999
  !Print @0,23;'CL';"Invalid Category";
  !Goto GETCAT
  returnstatus=0
  e$="Invalid start Customer Category"
  goto err_msg
End If 
CAT[0] = J1
GETCAT2: Rem get the ending range
J0$ = "3000 35308"
J2$ = "###" \ J1 = CAT[1]
J5$ = "Enter Ending Customer Category"
! Gosub ISINPUT
tmp$ = GetParameter$("ENDCCATGY")
if tmp$="" let tmp$=Str$(CAT[1])
j1=tmp$
If J1 < 0 Or J1 > 999
  !Print @0,23;'CL';"Invalid Category";
  !Goto GETCAT2
  returnstatus=0
  e$="Invalid End Customer Category"
  goto err_msg
End If 
CAT[1] = J1
If CAT[0] > CAT[1]
  !Print @0,23;'CL RB';"Ending Category Must Be Greater Than Starting";
  !Signal 3,30 \ Goto GETCAT
  returnstatus=0
  e$="Invalid Customer Category Range"
  goto err_msg
End If 
!Return 
GETAGEBASE: Rem get age based
J0$ = "2 00013510"
J1$ = AGE$
J5$ = "Enter Base Age on I: Invoice Date   D: Due Date "
!Gosub ISINPUT
!Call String(1,J$)
tmp$ = GetParameter$("BASEAGE")
j$=UCase$(RTrim$(tmp$))
If J$ <> "I" And J$ <> "D" ! Goto GETAGEBASE
	returnstatus=0
	e$="Invalid Selection: I or D only"
	goto err_msg
Endif
AGE$ = J$
!Return 
GETAGEDATE: J0$ = "5000 62912"
X3 = JARDATE \ Gosub L_7870 \ J1 = D3[0]
J5$ = "Enter Aging Date (MMDDYY)"
If J1 <= 0 Let J1 = 700101
!Gosub ISINPUT
tmp$ = GetParameter$("AGEDATE")
if erpCron
	tmp1$ = tmp$[1,2]+"/"+tmp$[3,4]+"/"+tmp$[5,6]
	tmp$ = tmp1$
end if
tmp1$=chkDteFrmt$(E$,tmp$)
if tmp1$[1,1]<"0" and tmp1$[1,1]>"9" let tmp1$=""
  if tmp1$<>""
	tmp$=formatdate2$(tmp1$) ! mm/dd/yyyy to yyyymmdd
  Else
	tmp$="20"+J1 using "&&&&&&"
  Endif
J1=tmp$[3,10]
X3 = J1 \ Gosub L_7840 \ X3=-1 ! Goto GETDATE
If X3<=0
	returnstatus=0
	e$="Invalid Aging Date"
	goto err_msg
Endif
JARDATE = X3
!Return 
GETORDTYPE: Rem get order type
J0$ = "2 00 23514"
J1$ = ORDTYPE
J5$ = "Enter Order Type or 0: for all order types  -: list types "
!Gosub ISINPUT
tmp$ = GetParameter$("ORDTYPE")
j$=RTrim$(tmp$)
!If J4$ = "-"
!  Swap 1,"SW062"
!  Gosub ISINPUT
!End If 
J1 = J$
If J1 < 0 Or J1 > 38
  !Print @0,23;'CL RB';"Invalid Order Type";
  !Signal 3,15
  !Goto GETORDTYPE
  returnstatus=0
  e$="Invalid Order Type (0-38)"
  goto err_msg
End If 
!If J1 = 0 ! confirm for all order type
!ASK2CONFIRMALL: Rem ask to confirm to print all order types
!  Print @0,23;'CL RB';"Are you sure you want all order types (Y/N) ";
!  Input Len (16384 + 1);""J$
!  Call String(1,J$)
!  If J$ = "N" Goto GETORDTYPE
!  If J$ <> "Y" Goto ASK2CONFIRMALL
!Else 
!  Rem verify order type
!  DSP62 = J1 * 20 - 20
!  Read #1,62,DSP62;ORDTYPE$;
!  If ORDTYPE$[1,5] = "     " Or Len(ORDTYPE$) = 0
!    Print @0,23;'CL RB';"Invalid Order Type";
!    Signal 3,15
!    Goto GETORDTYPE
!  End If 
!End If 
ORDTYPE = J1
!Print Using "##";@35,14;ORDTYPE;
!If ORDTYPE
!  Print @39,14;'CL';ORDTYPE$;
!Else 
!  Print @39,14;'CL';"ALL ORDER TYPES";
!End If 
!Return 
!Print 'CS';@0,23;"O.K. to zero commissions for reported items (Y/N)? ";
!Input Len 16385;""IN$
!Call String(1,IN$)
tmp$ = GetParameter$("UPDATECOMM")
In$=UCase$(RTrim$(tmp$))
if in$<>"Y" and In$<>"N"
	returnstatus=0
	e$="Update is Y or N"
	goto err_msg
Endif
tmp$ = GetParameter$("Printer") ! let's see if 1 selected (-- = NONE)
tmp$=rtrim$(tmp$)
if tmp$[1,2]="--"
		Returnstatus=0
		e$="NO PRINTER SELECTED"
		goto ERR_MSG ! Done
Endif
onchannelno=0 ! zero for channel 
if erpCron ! printer already open
	ToScreen=0
else
	printchan = openprinter(e$,onchannelno) 
	Toscreen=0
	if printchan=-1 let Toscreen=1 ! to browser
	!if toscreen ! UNREM TO NOT ALLOW XML
	!	Returnstatus=0
	!	e$="NO Browser Print"
	!	goto ERR_MSG ! Done
	!Endif
end if
let SCREENPRINT=toscreen
! Call dxsave(0,"tmp/450cbin.txt!") ! save web data sent
J8=screenprint
J9 = 55 
J1 = 90 \ J2 = 0

if screenprint ! xml 
	!<section>
  tmp$ = bsdel$,"450cb",fdel$,rdel$
  call addtostr(e$,rstr$,tmp$)
  if screenprint
	tmp$="SLSM",FDEL$,"SLSM NAME",FDEL$,"CTGY",FDEL$,"CTGY DESC",FDEL$
	tmp$=tmp$,"CUST",fdel$,"CUST NAME",fdel$,"REF NUM",fdel$,"DATE",fdel$
	tmp$=tmp$,"PAY DATE",fdel$,"GP%",fdel$,"COST",fdel$,"PROFIT",fdel$
	tmp$=tmp$,"NET SALE",fdel$,"AMT PAID",fdel$,"ORIG COMM",fdel$,"CUR COMM",fdel$,rdel$
	call addtostr(e$,rstr$,tmp$)
	! TRY A DETAIL HEADING
	TMP$=fdel$ ! no slsm #
	If ORDTYPE
	  tmp$=tmp$,"FOR ORDER TYPE ",Ordtype Using "## ",ORDTYPE$,fdel$
	Else 
	  tmp$=tmp$,"FOR ALL ORDER TYPES",fdel$
	End If 
	tmp$=tmp$,fdel$ ! no ctgy #
	X2 = JDATE[0] \ Gosub L_7770
	tmp$=tmp$,"RUN FOR DATES  ",X$," THROUGH "
	X2 = JDATE[1] \ Gosub L_7770 \ tmp$=tmp$,X$,fdel$ ! ctgy desc
	tmp$=tmp$,fdel$ ! No cust #
	tmp$=tmp$,"AGED AS OF "
	X2 = JARDATE \ Gosub L_7770 \ tmp$=tmp$,X$," BY "
	If AGE$[1,1] = "I" tmp$=tmp$,"INV" Else tmp$=tmp$,"DUE"
	tmp$=tmp$," DATE",fdel$ ! cust name
	tmp$=tmp$,fdel$,fdel$,fdel$,fdel$ ! ref,date,pay,gp
	tmp$=tmp$,fdel$,fdel$,fdel$,fdel$ ! cost,prof,net,paid
	tmp$=tmp$,fdel$,fdel$,rdel$ ! "orig,new,endorec
	call addtostr(e$,rstr$,tmp$)
  Endif
  ! header
Else ! normal print - send in process
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
Endif
STARTPRINT: K1$ = " ",K1$

Gosub L_7000 ! sort
!Print @0,22;"Printing...please wait";'CE'; \ Signal 3,0
!If J8 Print 'CS';
K1$ = " ",K1$ \ r1 = 0
L_2000: Search #9,3,1;K1$,R1,E \ If E > 2 error 11000
If E Goto L_9100
Mat Read #2,R1,0;S1;
Mat Read #2,R1,16;S2;
Mat Read #2,R1,28;S3;
Mat Read #2,R1,36;S4;
Mat Read #2,R1,40;S6;
Mat Read #2,R1,54;S7;
Mat Read #2,R1,72;CS9;
! new commission = current commission + chargeback adjustment (usually
! negative) + previous chargeback adjustments (usually positive which
! effectively backs previous out as they are not cumulative)
new_comm = s2[1] + cs9[2] + cs9[0]
! If CS9[0]
!   S2[1] = CS9[0]
! End If 
If S8 If S8 <> S1 Gosub L_4500
CATGY = K1$[4,6]
If S12 If S12 <> CATGY Gosub L_4700
If S10 If S10 <> S3[1] Gosub L_4600
Gosub L_3000
Gosub L_3200
Gosub L_3400
Gosub L_5800
If HEADING Gosub L_5300 \ Gosub L_5400 \ Gosub L_5200
Gosub L_5000
Gosub L_2200
Goto L_2000
L_2200: Rem TOTALS CALC
T9[5] = T9[5] + S2[0] \ T8[5] = T8[5] + S2[0] \ T10[5] = T10[5] + S2[0]
T11[5] = T11[5] + S2[0]
T6[0] = T6[0] + S6[0] \ T5[0] = T5[0] + S6[0] \ T7[0] = T7[0] + S6[0]
T4[0] = T4[0] + S6[0]
T9[6] = T9[6] + T9 \ T8[6] = T8[6] + T9 \ T10[6] = T10[6] + T9
T11[6] = T11[6] + T9
T9[7] = T9[7] + S2[1] \ T8[7] = T8[7] + S2[1] \ T10[7] = T10[7] + S2[1]
T11[7] = T11[7] + S2[1]
If T9 >= S2 Or ARPAID Let T9[8] = T9[8] + S2[1] \ T8[8] = T8[8] + S2[1] \ T10[8] = T10[8] + S2[1]
If T9 >= S2 Or ARPAID Let S4[1] = 1
let t9[9]=t9[9]+new_comm;t8[9]=t8[9]+new_comm;t10[9]=t10[9]+new_comm;t11[9]=t11[9]+new_comm
Return
L_3000: Rem GET SLSM NAME
If S8 = S1 Return 
J2$ = " ",J2$ \ J2$ = S1 Using "###"
Search #3,2,1;J2$,R3,E
If E = 1 Let S1$ = "** ERROR ** SALESMAN NOT FOUND" \ Goto L_3050
If E error 11000
Mat Read #3,R3;S1$;
L_3050: Return 
L_3200: Rem GET CUSTOMER
If S3[1] = S10 Return 
L_3210: J3$ = " ",J3$ \ J3$ = S3[1] Using "######"
Search #4,2,1;J3$,R4,E
If E = 1 Let C1$ = "** ERROR ** CUSTOMER NOT FOUND" \ Goto L_3240
If E error 11000
Mat Read #4,R4,30;C1$;
Mat Read #4,R4,142;C1;
L_3240: Rem
Return 
L_3400: Rem GET A/R RECORD
	ARPAID = 0;jpaiddate=0;a2[4]=0;A2[1]=0
	J4$ = " ",J4$ \ J4$ = S3[1] Using "######"
	J4$[7] = S7[1] Using "##########"
	J4$[17] = K1$[23]
	L_3440: Search #5,2,1;J4$,R5,E
	If E Goto L_3500
	Mat Read #5,R5;A2;
	Mat Read #5,R5,24;A3;
	Mat Read #5,R5,154;A4;
	! T9 is total amount paid
	T9 = A3[1] + A3[2]
	! T1 is the AR Type
	T1 = Int(Fra(A2[3]) * 100)
	!if custom_customer$="ACTION"
	if abs(a3[0]-T9)=0 ! orig amount - total paid
		let ARPAID=1
		if a2[1]
			let x$=a2[1] using "&&&&&&"
			!call 25,1,x$,x$,e
			Call DateToJulian(1,X$,X$,E)
			! last paid date
			if not (e) let jpaiddate=x$
		endif
	Endif
	!Else ! all others
	!	If Abs(A3[0] - T9) = 0 Let ARPAID = 1
	!Endif
Return 
L_3500: Rem NOT FOUND SO MUST BE PAID
!If custom_customer$<>"ACTION"
!	T9 = S2[0] \ ARPAID = 1
!	search #8,2,1;j4$,r7,e ! \if e>1 error 11000
!	if not(e) 
!		mat read #8,r7,0;a2; 
!		T1 = Int(Fra(A2[3]) * 100)
!	endif
!else
	! check history! NOT FOUND SO MUST BE PAID
search #8,2,1;j4$,r7,e ! \if e>1 error 11000
if not(e)
	mat read #8,r7,0;a2;
	mat read #8,r7,24;a3;
	mat read #8,r7,154;a4;
	IF custom_customer$="ACTION"
		let t9=a3[1]+a3[2]
	ELSE
		T9 = S2[0]
	ENDIF
	let t1=int(fra(a2[3])*100)
	let arpaid=1
	if a2[1]
		let x$=a2[1] using "&&&&&&"
		Call DateToJulian(1,X$,X$,E) !  call 25,1,x$,x$,e
		if not (e) let jpaiddate=x$
	endif
else
	LET T9=S2[0] \ arpaid=1\jpaiddate=0
endif
!Endif
Return 
L_3900: Rem CONVERT A2[4] FROM JULIAN TO YYMMDD
D3[0] = A2[4];D3[1] = A2[4];FLAG = 0
L_3920: Call "JULIANUTIL",D3[],X$,FLAG
Return 

L_4000: Rem TOTAL PRINT
If Screenprint
	  tmp$=fdel$,"** REPORT TOTALS **",fdel$
	!Mat Read #6,C1[9],0;CUSTCAT$;
	tmp$=tmp$,fdel$,fdel$ ! C1[9] Using "##",fdel$,CUSTCAT$,fdel$
	tmp$=tmp$,fdel$,fdel$ ! S3[1] Using "######",fdel$,C1$,fdel$
	tmp$=tmp$,fdel$,fdel$,fdel$ ! detail
	tmp1$=""
	If T9[5] tmp1$=(T9[5] - T5[0]) / T9[5] * 100 Using "---#%"
	tmp$=tmp$,LTrim$(tmp1$),fdel$
	tmp$=tmp$,LTrim$(T5[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T9[5] - T5[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T9[5] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T9[6] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T9[7] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T9[9] Using "-------#.##"),fdel$
	tmp$=tmp$,rdel$
	call addtostr(e$,rstr$,tmp$)
Else ! normal print
	Gosub L_5800
	Print #0;"** TOTALS **";
	If T9[5] Print #0; Using "---#%"; Tab 41;(T9[5] - T5[0]) / T9[5] * 100;
	Print #0; Using "-------#.##"; Tab 47;T5[0];
	Print #0; Using "-------#.##"; Tab 59;T9[5] - T5[0];
	Print #0; Using "-------#.##"; Tab 71;T9[5];
	Print #0; Using "-------#.##"; Tab 83;T9[6];
	Print #0; Using "-------#.##"; Tab 95;T9[7];
	Print #0; Using "-------#.##"; Tab 107;T9[9];
	Print #0;""
Endif
Return 
L_4500: Rem SALESMAN TOTAL
Gosub L_4600 ! cust total
Gosub L_4700 ! ctgy total
If Screenprint
	  tmp$=S8 Using "###",fdel$,"** SALESMAN TOTALS **",fdel$
	!Mat Read #6,C1[9],0;CUSTCAT$;
	tmp$=tmp$,fdel$,fdel$ ! C1[9] Using "##",fdel$,CUSTCAT$,fdel$
	tmp$=tmp$,fdel$,fdel$ ! S3[1] Using "######",fdel$,C1$,fdel$
	tmp$=tmp$,fdel$,fdel$,fdel$ ! detail
	tmp1$=""
	If T8[5] tmp1$=(T8[5] - T6[0]) / T8[5] * 100 Using "---#%"
	tmp$=tmp$,LTrim$(tmp1$),fdel$
	tmp$=tmp$,LTrim$(T6[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T8[5] - T6[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T8[5] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T8[6] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T8[7] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T8[9] Using "-------#.##"),fdel$
	tmp$=tmp$,rdel$
	call addtostr(e$,rstr$,tmp$)
Else ! normal print
	Gosub L_5800
	Print #0;""
	Print #0;"** SALESMAN ";S8;" TOTALS **";
	If T8[5] Print #0; Using "---#%"; Tab 41;(T8[5] - T6[0]) / T8[5] * 100;
	Print #0; Using "-------#.##"; Tab 47;T6[0];
	Print #0; Using "-------#.##"; Tab 59;T8[5] - T6[0];
	Print #0; Using "-------#.##"; Tab 71;T8[5];
	Print #0; Using "-------#.##"; Tab 83;T8[6];
	Print #0; Using "-------#.##"; Tab 95;T8[7];
	Print #0; Using "-------#.##"; Tab 107;T8[9];
	Print #0;""
Endif
S8 = 0 \ T8[5] = 0 \ T8[6] = 0 \ T8[7] = 0 \ T8[8] = 0
T8[9] = 0
T6[0] = 0
J1 = 9999
Return 
L_4600: Rem CUSTOMER TOTAL
If Screenprint
	If S8
	  tmp$=S8 Using "###",fdel$,S1$,fdel$
	Else 
	  tmp$=S1 Using "###",fdel$,S1$,fdel$
	End If 
	Mat Read #6,C1[9],0;CUSTCAT$;
	tmp$=tmp$,C1[9] Using "##",fdel$,CUSTCAT$,fdel$
	tmp$=tmp$,S10 Using "######",fdel$,"** CUSTOMER TOTALS **",fdel$
	tmp$=tmp$,fdel$,fdel$,fdel$ ! detail
	tmp1$=""
	If T10[5] tmp1$=(T10[5] - T7[0]) / T10[5] * 100 Using "---#%"
	tmp$=tmp$,LTrim$(tmp1$),fdel$
	tmp$=tmp$,LTrim$(T7[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T10[5] - T7[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T10[5] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T10[6] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T10[7] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T10[9] Using "-------#.##"),fdel$
	tmp$=tmp$,rdel$
	call addtostr(e$,rstr$,tmp$)
Else ! normal print
	J1 = J1 + 2
	Gosub L_5800
	If HEADING Gosub L_5300 \ Gosub L_5400
	Print #0; Using "######"; Tab 3;"** CUSTOMER ";S10;" TOTALS **";
	If T10[5] Print #0; Using "---#%"; Tab 41;(T10[5] - T7[0]) / T10[5] * 100;
	Print #0; Using "-------#.##"; Tab 47;T7[0];
	Print #0; Using "-------#.##"; Tab 59;T10[5] - T7[0];
	Print #0; Using "-------#.##"; Tab 71;T10[5];
	Print #0; Using "-------#.##"; Tab 83;T10[6];
	Print #0; Using "-------#.##"; Tab 95;T10[7];
	Print #0; Using "-------#.##"; Tab 107;T10[9]
	Print #0;""
Endif
S10 = 0 \ T10[5] = 0 \ T10[6] = 0 \ T10[7] = 0 \ T10[8] = 0
T10[9] = 0
T7[0] = 0
Return 
L_4700: Rem CATEGORY TOTALS
If S10 <> 0 Gosub L_4600
If Screenprint
	If S8
	  tmp$=S8 Using "###",fdel$,S1$,fdel$
	Else 
	  tmp$=S1 Using "###",fdel$,S1$,fdel$
	End If 
	tmp$=tmp$,S12 Using "##",fdel$,"** CATEGORY TOTALS **",fdel$
	tmp$=tmp$,fdel$,fdel$ ! S3[1] Using "######",fdel$,C1$,fdel$
	tmp$=tmp$,fdel$,fdel$,fdel$ ! detail
	tmp1$=""
	If T11[5] tmp1$=(T11[5] - T4[0]) / T11[5] * 100 Using "---#%"
	tmp$=tmp$,LTrim$(tmp1$),fdel$
	tmp$=tmp$,LTrim$(T4[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T11[5] - T4[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T11[5] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T11[6] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T11[7] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T11[9] Using "-------#.##"),fdel$
	tmp$=tmp$,rdel$
	call addtostr(e$,rstr$,tmp$)
Else ! normal print
	J1 = J1 + 2
	Gosub L_5800
	If HEADING Gosub L_5300
	Print #0; Using "###"; Tab 2;"** CATEGORY ";S12;" TOTALS **";
	If T11[5] Print #0; Using "---#%"; Tab 41;(T11[5] - T4[0]) / T11[5] * 100;
	Print #0; Using "-------#.##"; Tab 47;T4[0];
	Print #0; Using "-------#.##"; Tab 59;T11[5] - T4[0];
	Print #0; Using "-------#.##"; Tab 71;T11[5];
	Print #0; Using "-------#.##"; Tab 83;T11[6];
	Print #0; Using "-------#.##"; Tab 95;T11[7];
	Print #0; Using "-------#.##"; Tab 107;T11[9]
	Print #0;""
Endif
S12 = 0 \ T11[5] = 0 \ T11[6] = 0 \ T11[7] = 0
T11[9] = 0
T4[0] = 0
Return 
L_5000: Rem PRINT LINE
If Screenprint
	If S8
	  tmp$=S8 Using "###",fdel$,S1$,fdel$
	Else 
	  tmp$=S1 Using "###",fdel$,S1$,fdel$
	End If 
	Mat Read #6,C1[9],0;CUSTCAT$;
	tmp$=tmp$,C1[9] Using "##",fdel$,CUSTCAT$,fdel$
	tmp$=tmp$,S3[1] Using "######",fdel$,C1$,fdel$
	tmp$=tmp$,Str$(S7[1]),fdel$
	Gosub L_3900
	X2 = D3[0] \ If AGE$[1,1] <> "I" Let X2 = A4[3]
	Gosub L_7700
	tmp$=tmp$,X$[1,8],fdel$
	tmp1$=""
	If A3[0] - T9 > 0 And Not(ARPAID) Goto nopdate
	If Not(A2[1]) Let X2 = ARD \ Goto diffpdate
	X2 = A2[1]
	Diffpdate: Gosub L_7700
	tmp1$=X$[1,8]
	nopdate: ! 
	tmp$=tmp$,tmp1$,fdel$
	tmp1$=""
	If S2 tmp1$=(S2[0] - S6[0]) / S2[0] * 100 Using "---#%"
	tmp$=tmp$,LTrim$(tmp1$),fdel$
	tmp$=tmp$,LTrim$(S6[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(S2[0] - S6 Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(S2[0] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(T9 Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(S2[1] Using "-------#.##"),fdel$
	tmp$=tmp$,LTrim$(new_comm Using "-------#.##"),fdel$
	tmp$=tmp$,rdel$
	call addtostr(e$,rstr$,tmp$)
Else ! normal print
	If S12 <> C1[9] If Not(HEADING) Gosub L_5400
	If S10 <> S3[1] If Not(HEADING) Gosub L_5200
	Print #0; Using "########"; Tab 13;S7[1]; ! was 14;
	Gosub L_3900
	X2 = D3[0] \ If AGE$[1,1] <> "I" Let X2 = A4[3]
	Gosub L_7700
	Print #0; Tab 23;X$[1,8];
	If A3[0] - T9 > 0 And Not(ARPAID) Goto L_5100
	If Not(A2[1]) Let X2 = ARD \ Goto L_5095
	X2 = A2[1]
	L_5095: Gosub L_7700 \ Print #0; Tab 32;X$[1,8];
	L_5100: If S2 Print #0; Using "---#%"; Tab 41;(S2[0] - S6[0]) / S2[0] * 100;
	Print #0; Using "-------#.##"; Tab 47;S6[0];
	Print #0; Using "-------#.##"; Tab 59;S2[0] - S6;
	Print #0; Using "-------#.##"; Tab 71;S2[0];
	Print #0; Using "-------#.##"; Tab 83;T9;
	Print #0; Using "-------#.##"; Tab 95;S2[1];
	Print #0; Using "-------#.##"; Tab 107;new_comm;
	Print #0;""
Endif
S8 = S1
S10 = S3[1]
S12 = C1[9]

Return 
L_5200: Rem PRINT CUSTOMER
if screenprint return
Print #0; Using "CUST ######"; Tab 2;S3[1];
Print #0; Tab 15;C1$
L = L + 1
Return 
L_5300: Rem print salesman!
if not(screenprint)
	If S8
	  Print #0; Using "###";"SALESMAN ";S8;" ";S1$
	Else 
	  Print #0; Using "###";"SALESMAN ";S1;" ";S1$
	End If 
	Print #0;" "
	J1 = J1 + 2
Endif
SALESMAN = 1
Return 
L_5400: Rem print category!
if screenprint return
Mat Read #6,C1[9],0;CUSTCAT$;
Print #0; Using "##"; Tab 2;"CATEGORY ";C1[9];" ";CUSTCAT$
Print #0;" "
J1 = J1 + 2
Return 
L_5800: Rem HEADINGS ROUTINE
if screenprint goto HDGDONE
HEADING = 0
J1 = J1 + 1 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 7
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;J8$; Tab (66 - Len(J1$) / 2);J1$; Tab 120;"PAGE";J2
Print #0;"-450cb- ";Msc$(3);
Print #0; Tab 46;"SALESMAN  COMMISSION  CHARGEBACK  REPORT"
If ORDTYPE
  Print #0; Using "## ";"FOR ORDER TYPE ";ORDTYPE;ORDTYPE$;
Else 
  Print #0;"FOR ALL ORDER TYPES";
End If 
X2 = JDATE[0] \ Gosub L_7770
Print #0; Tab 46;"RUN FOR DATES  ";X$;" THROUGH ";
X2 = JDATE[1] \ Gosub L_7770 \ Print #0;X$
Print #0; Using "###"; Tab 52;"AGED AS OF ";
X2 = JARDATE \ Gosub L_7770 \ Print #0;X$;" BY ";
If AGE$[1,1] = "I" Print #0;"INV"; Else Print #0;"DUE";
Print #0;" DATE"
Print #0; Tab 16;"INV/CM";
If AGE$[1,1] = "I" Print #0; Tab 23;"INV DATE"; Else Print #0; Tab 23;"DUE DATE";
Print #0; Tab 32;"PAY DATE";
Print #0; Tab 42;"GP %";
Print #0; Tab 54;"COST";
Print #0; Tab 64;"PROFIT";
Print #0; Tab 74;"NET SALE";
Print #0; Tab 86;"AMT PAID";
Print #0; Tab 97;"CUR COMM$";
Print #0; Tab 109;"NEW COMM$";
Print #0;" "
Print #0;"\15\";
HDGDONE: ! heading done
HEADING = 1
Return

L_7000: Rem sort commission file
	! Print @0,22;"Sorting...please wait";'CE'; \ Signal 3,0
	K1$ = SLSM[0] Using "###"
	L_7020: Search #2,3,1;K1$,R1,E
		If E And E <> 2 error 11000
		If E Goto L_7170
		Mat Read #2,R1,0;S1;
		Mat Read #2,R1,16;S2;
		Mat Read #2,R1,28;S3;
		Mat Read #2,R1,36;S4;
		Mat Read #2,R1,54;S7;
		! skip if order type doesn't match
		If ORDTYPE <> 0 And S3[0] <> ORDTYPE Goto L_7020
		! skip if no commission dollars
		If S2[1] <= 0 Goto L_7020
		! skip if not in sales rep range
		If S1[0] < SLSM[0] Goto L_7020
		If S1[0] > SLSM[1] Goto L_7170
		if k1$[14,14] = "8" OR k1$[14,14] = "9" goto L_7020: ! non-invoice based transactions
		Gosub L_3210
		If C1[9] < CAT[0] Goto L_7020
		If C1[9] > CAT[1] Goto L_7020
		ARPAID = 0;A2[1]=0
		J4$ = " ",J4$;J4$ = S3[1] Using "######"
		J4$[7] = S7[1] Using "##########";J4$[17] = K1$[14,14]," "
		Gosub L_3440 ! check if it is paid
		If E = 1 Goto L_7020 ! not in open or historical A/R - skip
		If E And E <> 1 error 11000
		!If ARPAID Goto L_7020
		IF custom_customer$<>"OMAHA"
	!		if custom_customer$="ACTION"
			! ar is paid, but no valid last paid date - skip
			! (usually credit memo applied to invoice)
			if arpaid and jpaiddate=0 goto l_7020:
	!		Else ! all others
				! if arpaid goto l_7020: ! ar has been paid!
	!		Endif
		endif
		If T1 <> 1 Goto L_7020 ! if not an invoice skip
		! make sure AR date falls in date range or skip
		If A2[4] < JDATE[0] Goto L_7020
		If A2[4] > JDATE[1] Goto L_7020
		! get chargeback table
		tmp$ = s3[1] using "######"
		search #11,2,1;tmp$,rCN,e
		if e
			commCBT = 0
		else
			mat read #11,rCN,430;commCBT;
		end if
		if currCBT <> commCBT
			currCBT = commCBT
			gosub ReadCommissionChargebackTable:
		end if
		! if invoice $ in comm rec >= total paid
		! and there is a last paid date and
		! there is are chargeback days defined 
		!
		IF S2[0]>=T9 and a2[1] and oldest_cbdays>0
			let x$=a2[1] using "&&&&&&"
			Call DateToJulian(1,X$,X$,E)
			if not (e) let jpaiddate=x$
			! OK not sure why this check, but...
			! if the paid date is less then current AR date
			! less the oldest number of days we do chargeback for
			! times 2 (in other words, twice as old as we would
			! look for), skip it
			IF jpaiddate<jardate-(oldest_cbdays*2) then goto l_7020
		ENDIF
		AGEDATE = A2[4]
		If AGE$ = "D"
			If A4[3] ! convert due date to julian
				X$ = A4[3] Using "&&&&&&"
				Call DateToJulian(1,X$,X$,E)
				If Not(E) Let AGEDATE = X$
			End If 
		End If 
		!DAYS = JARDATE - AGEDATE
		if custom_customer$="OMAHA"
			LET DATEPAID=JARDATE !IF NOT PAID- TODAY'S DATE, OTHERWISE WHEN PAID
			IF ARPAID<>0 AND A2[1]<>0
				!! convert due date to julian
				let x$=A2[1] using "&&&&&&"
				Call DateToJulian(1,X$,X$,E)
				if not (e) let DATEPAID=x$
			ENDIF
			let days=DATEPAID-agedate
		else
	!		if custom_customer$="ACTION"
			if arpaid
				let days=jpaiddate-agedate
			else
				let days=jardate-agedate
			endif
	!		Else ! all others
	!			let days=jardate-agedate
	!		Endif
		endif
		If DAYS < -15000 Let DAYS = DAYS + 36525
		If DAYS <= 0 Goto L_7020
		BUCK = -1
		If CBDAYS[4] If DAYS > CBDAYS[4] Let BUCK = 4 \ Goto CALCNEWCOM
		If CBDAYS[3] If DAYS > CBDAYS[3] Let BUCK = 3 \ Goto CALCNEWCOM
		If CBDAYS[2] If DAYS > CBDAYS[2] Let BUCK = 2 \ Goto CALCNEWCOM
		If CBDAYS[1] If DAYS > CBDAYS[1] Let BUCK = 1 \ Goto CALCNEWCOM
		If CBDAYS[0] If DAYS > CBDAYS[0] Let BUCK = 0 \ Goto CALCNEWCOM
		Goto L_7020

		CALCNEWCOM: Rem calc salesman commission
		If BUCK < 0 Goto L_7020
		If BUCK > 4 Goto L_7020
		! key must be built here as the routine to adjust previous
		! chargebacks requires the information
		LET K9$=" ",K9$
		LET K9$[1,3]=K1$[1,3]
		LET K9$[4,6]=C1[9] USING "###" ! "category
		LET K9$[7,12]=S3[1] USING "######" !CUSTOMER #
		LET K9$[13]=K1$[4] ! "ref#(10)/type
		Mat Read #2,R1,72;CS9
		! If Not(CS9[0])
		!   CS9[0] = S2[1]
		!   CS9[1] = S1[2]
		! End If 
		mat read #2,r1,112;ocs1 ! set in 227b
		mat read #2,r1,136;SplitFlag
		if cbtype<1 or cbtype>2 goto L_7020: ! invalid chargeback type
		let SplitPercent = 1 ! default 100%
		if SplitFlag > 0 let SplitPercent = s7[2] / 100
		if cbtype=1 ! new commission rate
			if not(ocs1[1]) goto L_7020: ! can't recalc without an old comm %
			if ocs1[1]<=cbpct[buck] goto L_7020: ! orig comm % < new comm %
			if splitPercent<>0
				let comdol=ocs1[0]/(ocs1[1]/100)/SplitPercent ! back into orignal dollars used for calc
			endif
			let cs9[2]=fnr(((comdol*cbpct[buck])/100)*SplitPercent)
			let cs9[3]=cbpct[buck]
		end if
		if cbtype=2! reduction of commission rate
			comdol=ocs1[0]/SplitPercent ! back out split if any
			let cs9[2]=fnr((comdol-(comdol*cbpct[buck]/100))*SplitPercent)
			if ocs1[1]
				let cs9[3]=fnr(ocs1[1]-((ocs1[1]*cbpct[buck]/100)))
			endif
		endif
		! as cs9[2] is now a pending ADJUSTMENT amount, the adjustment is the
		! difference between the original amount and the new calculated amount
		cs9[2] = (ocs1[0] - cs9[2]) * -1
		PCBDelete = 0 \ gosub GetPreviousChargebacks:
		cs9[0] = PCBAmount
		Search #9,4,1;K9$,R1,E
		If E error 11000
		Mat Write #2,R1,72;CS9;
	Goto L_7020
L_7170: Return 

Rem {begin call.input.i}
ISINPUT: Rem  Drop-in change to Call Input   G.Doscher  10/29/96
!Call "Input",J1,J$,J0$,J1$,J4$,J5$
Return 

ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end call.input.i}
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_7770: Rem DATE JULIAN X2 TO X$
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
L_7800: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
L_7840: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
if x3<=0 return
X$ = X3 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X3 = X$[1,5]
Return 1
L_7870: Rem CONVERT JULIAN TO YYMMDD
D3[0] = X3;D3[1] = X3;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
L_8000: Rem CLEAR THE RECORDS
!Print 'CS';@0,23;"O.K. to zero commissions for reported items (Y/N)? ";
!Input Len 16385;""IN$  ! IN$ is part of initial get
!Call String(1,IN$)
If IN$ = "N" 
  !Print @0,23;'CL';"No update performed. Clearing file. Please Wait.";
  K1$ = " ",K1$
SRCHCLR: Rem clearing record
  Search #9,3,1;K1$,R1,E
  If E = 2 Return 
  If E error 11000
  Mat Read #2,R1,72;CS9
  cs9[0]=0;CS9[2] = 0;CS9[3] = 0
  Mat Write #2,R1,72;CS9;
  Search #9,5,1;K1$,R1,E \ If E error 11000
  Goto SRCHCLR
End If 
If IN$ = "Y"
  ! Print @0,23;'CL';"Updating Commissions.  Please Wait.";
  K1$ = " ",K1$
L_8060: Search #9,3,1;K1$,R1,E \ If E = 2 Return 
  If E error 11000
  Mat Read #2,R1,0;S1;
  Mat Read #2,R1,16;S2;
  Mat Read #2,R1,28;S3;
  Mat Read #2,R1,40;S6;
  mat read #2,r1,54;s7;
  mat read #2,r1,72;cs9;
  mat read #2,r1,112;ocs1;
!   If Not(CS9[0])
!     CS9[0] = S2[1]
!     CS9[1] = S1[2]
!   End If 
  ! update commission audit file - delete any previous
  ! chargeback activity and create a new audit rec showing
  ! this activity
  k9$=k1$ \ PCBDelete = 1 \ gosub GetPreviousChargebacks:
  gosub CreateCommAudit:
  let s1[2]=cs9[3]! new comm %
  let s2[1]=s2[1] + cs9[2] +cs9[0] ! new comm $
  Mat Write #2,R1,0;S1
  Mat Write #2,R1,16;S2
  Mat Write #2,R1,72;CS9;
  Search #9,5,1;K1$,R1,E \ If E error 11000
  Goto L_8060
End If 
!Print @0,23;'CL RB';"Invalid!!!"; \ Signal 3,20 \ Goto L_8000

L_9100: Rem END OF THIS RANGE
if r1
	Gosub L_4500
	Gosub L_4000
endif
! If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
!If Err 0 Rem
!Close #0 \ If Err 0 Gosub ERR_TRAP
Gosub L_8000
Goto OUTEND

!
! get previous chargeback amounts taken out as they are NOT
! commulative and need to be backed out so the current commissions
! will be updated properly
!
GetPreviousChargebacks: !
	PCBAmount = 0
	k7$=" ",k7$
	k7$[1,3] = k9$[1,3]
	k7$[4,13] = k9$[13,22]
	pcb_loop: !
		search #7,3,1;k7$,r7,e \ if e>2 error 11000
		if e goto end_pcb_loop:
		if k7$[1,3] <> k9$[1,3] OR k7$[4,13] <> k9$[13,22] goto end_pcb_loop:
		if k7$[26,26] <> k9$[23,23] goto pcb_loop: ! wrong type
		mat read #7,r7,8;as2;
		mat read #7,r7,16;as3;
		mat read #7,r7,128;as4;
		if as4[0] = 2 ! chargeback adjustment
			PCBAmount = PCBAmount + (as3[0] - as3[1]) ! before less after
			if PCBDelete ! delete the previous chargebacks?
				search #7,5,1;k7$,r7,e \ if e error 11000
				let k7_2$=" ",k7_2$
				let k7_2$[1,6]=as2[0] using "######"
				let k7_2$[7,29]=k7$[4,26]
				LET K7_2$[30,32] = k7$[1,3]
				SEARCH #7,5,2;k7_2$,r7,E \ IF E error 11000
				e=3 \ search #7,1,0;k7$,r7,e
				if e error 11000
			end if
		end if
		goto pcb_loop:
	end_pcb_loop: !
RETURN

CreateCommAudit: ! AUDIT
	let k7$=" ",k7$
	let k7$[1,3] = k9$[1,3]
	let k7$[4,13] = k9$[13,22]
	let k7$[26,26]=k9$[23,23]
	chk_auditrecord: !
	LET K7$[14,15]=TIM(8) USING "&&"   !"year
	LET K7$[16,17]=TIM(9) USING "&&"   !"month
	LET K7$[18,19]=TIM(10) USING "&&"  !"date
	LET K7$[20,21]=TIM(11) USING "&&"  !"hour
	LET K7$[22,23]=TIM(12) USING "&&"  !"minute
	LET K7$[24,25]=TIM(13) USING "&&"  !"second
	SEARCH #7,2,1;K7$,r7,E
	IF NOT(E)
		SIGNAL 3,20
		goto chk_auditrecord:
	ENDIF
	!"Insert New Audit key
	LET E=2
	SEARCH #7,1,0;k7$,r7,E
	IF E error 11000
	SEARCH #7,4,1;K7$,r7,E
	IF E error 11000
	let k7_2$=" ",k7_2$
	let k7_2$[1,6]=s3[1] using "######"
	let k7_2$[7,29]=k7$[4,26]
	LET K7_2$[30,32] = k7$[1,3]
	SEARCH #7,4,2;k7_2$,r7,E \ IF E error 11000
	LET AS1[0]=S1[0];AS1[1]=val(k7$[26,26]);AS1[2]=0;AS1[3]=0
	LET AS2[0]=S3[1]
	LET AS2[1]=USER
	LET cas$ = "CHRG BK - PREV: "+str$(cs9[0])+" NEW: "+str$(cs9[2]*-1)+b$
	! Comm $ before = current + prev. chargbacks
	! Comm $ after = current + prev. chargebacks + new adjustment
	! (new adjustment usually negative)
	LET AS3[0]=S2[1] + cs9[0]
	LET AS3[1]=S2[1] + cs9[0] + cs9[2]
	LET AS3[2]=S7[1]
	let AS3[3]=s1[1]    !"order#
	LET AS3[4]=k7$[14,19]  !"yymmdd
	LET AS3[5]=k7$[20,25]  !"hhmmss
	let aorigcomm=ocs1[0]
	let as4[0] = 2
	let as4[1] = 0
	let as5[0] = s1[2]
	let as5[1] = cs9[3]
	let as5[2] = s2[0]
	let as5[3] = s2[0]
	let as5[4] = s6[0]
	let as5[5] = s6[0]
	let source$="450cb"+b$
	MAT  WRITE #7,r7;AS1
	MAT  WRITE #7,r7,8;AS2
	MAT  WRITE #7,r7,16;AS3
	MAT  WRITE #7,r7,52;source$
	MAT  WRITE #7,r7,62;cAS$
	write #7,r7,122;aorigcomm
	mat write #7,r7,128;as4
	mat write #7,r7,132;as5;
RETURN

ReadCommissionChargebackTable: !
	! read chargeback table
	! based on variable currCBT
	tmp$ = currCBT using "######"
	search #10,2,1;tmp$,rCBT,e
	if e
		! drop back to default table
		currCBT = 0
		tmp$ = currCBT using "######"
		search #10,2,1;tmp$,rCBT,e
		if e error 11000
	end if
	Mat Read #10,rCBT,34;CBTYPE;
	Mat Read #10,rCBT,36;CBDAYS;
	Mat Read #10,rCBT,46;CBPCT;
	oldest_cbdays = 0
	for i=0 to 4
		if oldest_cbdays<cbdays[i] then oldest_cbdays = cbdays[i]
	next i
RETURN

OUTEND: Rem EXIT PROGRAM
!Print 'CS'
!Chain "MX000C"
If screenprint ! dx xml
	Call addtostr(e$,rstr$,esdel$) !end section
	Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
Else
	Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
	Call AddToStr(e$,rstr$,WebStr$)                            
	Call SetOutPut(e$,rstr$)
Endif
if returnstatus = 1 call ERPCronSuccess()
! try Call dxclose() else rem
End

ERR_MSG: ! send message                                    
! ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             

else ! main try
	include "src/callmainerrnet.inc"
end try
End
