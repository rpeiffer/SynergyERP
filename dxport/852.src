! >>> Program 852
!
! description   Raw Material BOM Listing
!
! loadsave -w -n 100,10 -o prog/dxport/852.dl4 src/852.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem MX852 - RM WHERE USED
Rem
Rem
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB  7, 2007  13:05:07
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/mfg/mx852.src (univ2) [jcs] {65221}
Rem  Copyright (c) 2007 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
!
External Lib "ubsfunc.dl4"
Declare External Function ChkAltItem$
!
Declare Intrinsic Sub InpBuf,String,Time
!Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP

Dim 1%,SC,SR,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],J4$[50]
Dim 3%,P3,A1[1],A2,A3,Q,R4[100],S3,2%,S4
Dim G$[20],L$[5],S$[7],3%,AMNT,COST,BMAMT,R3
Dim 1%,D0[100],S2[3],V9
Dim 2%,D1[100]
Dim 2%,C2,Y,R2,B1,B[24],C4[8]
Dim 2%,R5,C,R[40],R1,Y1,E2,1%,I
Dim 1%,E1,X,F,P9,S9,P[1],L9,T,F9,Z1
Dim F$[20],P$[156],U$[9],N$[12],H$[30]
Dim A$[20],J$[20],C$[800],N1$[41],X$[15]
Dim T8$[30],P9$[50],U5$[10],K5$[50],P1$[10]
Dim I$[30],B$[30],K$[12],K1$[30],T9$[26]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[200],WebStr$[200]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[20]	  \ Blank$=" ",Blank$
dim EndParam$[20] \ EndParam$="}",EndParam$

Def FNR(X) = Sgn(X) * (Int(Abs(X) * 10000 + .5) * .0001)
C$ = " ",C$
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!call dxsave(0,"tmp/852in.txt!")
!R1 = Spc(5)
B$ = "CNTRL"+Str$(IntCo)
B$ = " ",B$
For E1 = 2 To 5
  Read X
  If X = 0 Goto L_855
  Read #1,88,X;F$[1,16];
  Open #E1,F$
L_855: Next E1
Data "1104","1792","1728","656"
Read #1,3;T8$;
Mat Read #1,19,50;P9$;
If Err 0 Gosub ERR_TRAP
U$ = "---,###"
Gosub L_7000 ! check printer
L_900: Rem
L_910: !Window On 
!Print 'CS MH';
!Print @0,0;"WHERE USED EXPLOSION";@50,0;"MX852 - REV 3.0"
!Print 'MD';
V9 = 0
L9 = 99
!!Gosub L_1500 ! get product
L_1500: Rem GET PRODUCT
!Print @0,2;'CE';"PART CODE: ";
!Input ""I$
call dxget("PRODID",tmp$)
let tmp1$=RTrim$(UCase$(tmp$))+Blank$
let tmp2$=ChkAltItem$(e$,intco,tmp1$)
let i$=tmp1$ \ if RTrim$(tmp2$)<>"" let i$=RTrim$(tmp2$)+Blank$ ! alt
If RTrim$(I$) = "" !Goto OUTEND
	let returnstatus=1;Message$="No Product Code Entered"
	goto OutErr
Endif
!Gosub L_6600 \ Goto L_1500
!If I$ = "END" Goto OUTEND
A$ = " ",A$
A$ = A$[1,12]
I$ = I$[1,12]
A$[1,Len(I$)] = I$
Search #3,2,1;A$,R,R1
!If R1 Gosub L_6000
!If R1 Goto L_1500
if R1 !		
	let returnstatus=1;Message$="Product Not found"
	goto OutERR
Endif
Read #3,R,8;H$;
N$ = A$
!Print @25,2;
!Print " ";H$;
!I$ = "Y"
!If I$ = "Y" Goto L_1760
!Gosub L_6000
!Goto L_1500
L_1760: C2 = R
If P9$[16,16] = "S" Let L$ = "S" \ Goto L_1790
L_1780: !Input "\15\(S) SINGLE OR (M) MULTI LEVEL EXPLOSION "L$
Call dxget("LEVEL",tmp$) \ Let L$=RTRim$(UCase$(tmp$))
if L$="" let L$="S"
L_1790: If L$ = "S" goto StrtPrnt ! Return 
If L$ = "M" goto StrtPrnt ! Return
Let returnstatus=1;Message$="Prompt for the Level is S or M only"
goto OutErr
!Gosub L_6000
!Goto L_1780
!Window Off 
StrtPrnt: ! 
Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
L_960: P = Spc(14) \ If P Goto L_960
P[1] = 130
Gosub L_5800
Mat Read #3,C2;P$;
E2 = C2 \ Gosub L_3800 ! read this prod's info
R2 = C2
Gosub L_3000 ! explode all BOM's used in
L_1070: !Print 'CR';"CONTINUE  (Y OR N) ";
Goto OutEnd ! one to a customer
!Input ""I$
!If I$ = "Y" Goto L_910
!If I$ = "N" Goto OUTEND
!Gosub L_6000
!Goto L_1070
!Goto L_1160
L_1160: Return 
L_1170: If L8 = 22 If L9 > 19 Gosub L_1200
If L8 > 30 If L9 > 55 Gosub L_1250
L9 = L9 + 1
Return 
L_1200: !Print 'CR';"MORE ITEMS (Y OR N) ";
I$="Y" !Input ""I$
!Gosub L_6020
If I$ = "N" Goto L_900
If I$ <> "Y" Goto L_1200
L9 = 90
L_1250: Gosub L_5800
Return 

L_3000: Rem EXPLOSION
A$ = R2 Using "#####   0    0"
I = 0
Print #0;""
F$ = A$
L_3050: Search #5,3,2;F$,S4,R1
If R1 <> 0 Return 
If A$[1,5] <> F$[1,5] Return 
R3 = F$[10,14]
Read #3,R3,0;P1$;
If F$[15,16] <> P1$[6,7] Goto L_3050
Mat Read #5,S4,6;N1$;
Read #5,S4;S3;
Mat Read #5,S4,48;S2;
Gosub L_6800
R4[I] = BMAMT
J$[1,14] = F$[1,14]
S = J$[6,9]
Gosub L_5800
Gosub L_5000
If L$ = "S" Goto L_3470
If S2[2] = 2 Goto L_3050
I = 1
L_3180: D0[I] = 1
D1[I] = E2
L_3200: C$[I * 15 + 1,I * 15 + 14] = E2 Using "#####   0    0"
G$ = C$[I * 15 + 1,I * 15 + 14]
L_3220: Search #5,3,2;G$,R,R1
If R1 <> 0 Goto L_3400
If G$[1,5] <> C$[I * 15 + 1,I * 15 + 5] Goto L_3400
R3 = G$[10,14]
Read #3,R3,0;P1$;
If G$[15,16] <> P1$[6,7] Goto L_3220
L_3250: G$ = C$[I * 15 + 1,I * 15 + 14]
R3 = G$[10,14] \ If R3 Read #3,R3,0;P1$;
G$[15,16] = "  " \ If R3 Let G$[15,16] = P1$[6,7]
L_3260: Search #5,3,2;G$,S4,R1
If R1 <> 0 Goto L_3400
If G$[1,5] <> C$[I * 15 + 1,I * 15 + 5] Goto L_3400
R3 = G$[10,14]
Read #3,R3,0;P1$;
If G$[15,16] <> P1$[6,7] Goto L_3260
Mat Read #5,S4,6;N1$;
Read #5,S4;S3;
Mat Read #5,S4,48;S2;
Gosub L_6800
R4[I] = BMAMT
J$ = G$
Gosub L_5000
If S2[2] = 2 Goto L_3260
C$[I * 15 + 1,I * 15 + 14] = G$
I = I + 1
Goto L_3180
L_3400: D0[I] = D0[I] + 1
If D0[I] > 1 Goto L_3440
E2 = D1[I]
Goto L_3200
L_3440: I = I - 1
If I = 0 Goto L_3470
Goto L_3250
L_3470: C$ = " ",C$
I = 0
Goto L_3050
Return 
L_3800: Rem READ PROD
Mat Read #3,E2;P$;
Mat Read #3,E2,156;B;
Mat Read #3,E2,256;A;
Mat Read #3,E2,512;PFU1;
Mat Read #3,E2,554;PFU2;
If Not(B[8]) Let B[8] = B[21]
If Not(B[8]) Let B[8] = B[10]
A2 = B[8]
Return 
L_5000: Rem
E2 = J$[10,14]
Gosub L_1170 ! check lines
Mat Read #3,E2,0;P$;
If I = 0 Goto L_5090
For X = 1 To I
  Print #0;"-";
Next X
L_5090: Print #0; Tab I;P$[140,151];
Print #0;" ";
Print #0;P$[9,38];
Print #0; Tab 44;N1$[36,37];
R5 = 1
For X = 0 To I
  R5 = R5 * R4[X]
Next X
Print #0; Using "--####.####"; Tab (52 + I);R5;
If S2[1] = -1 Print #0;"F";
If S2[1] = 0 Print #0;"%";
If S2[1] = 1 Print #0;" ";
If S2[1] = 2 Print #0;"#";
Read #4,S2[0],10;N1$[28,30];
Print #0;" ";N1$[28,30];
Print #0; Tab 70;N1$[25,27];
If S2[2] = 1 Print #0;" OPT"
If S2[2] = 2 Print #0;" USE"
If S2[2] = 0 Print #0;" "
If P9$[26,26] = "Y" Print #0; Tab (I + 13);P$[63,92] \ L9 = L9 + 1
If S2[2] <> 2 If P$[139,139] = "M" Gosub L_5250
Return 
L_5250: Rem PRDTN=>STK
E2 = J$[10,14] \ Gosub L_6800
BMAMT = R4[I] \ Gosub L_6850
R4[I] = S3
If S2[1] = 0 Let R4[I] = S3 * .01
If S2[1] = 2 Let R4[I] = S3 * .01
Return 
L_5800: Rem HEADINGS
If L9 < L8 Return 
If V9 > 0 Print #0;"\14\";
Print #0;""
V9 = V9 + 1
T9$ = "" \ Call Time(T9$)
Print #0;" - 852 - ";T9$; Tab 52;T8$
Print #0;N$;"  ";H$[1,30];"  WHERE USED EXPLOSION      ";
Print #0;"PAGE: ";V9
Print #0;"\15\PART CODE        PART DESCRIPTION";
Print #0; Tab 44;"REV"; Tab 55;"QTY / UNIT "; Tab 69;"SEQ #"
L9 = 4
Return 
L_6000: Rem ERROR ROUTINE
!Print "  INVALID ";
L_6020: ! Signal 3,10
!Print 'MU'
!Print B$;B$;B$[1,10];
!Print 'MU';
Return 
L_6600: Rem DSC LIST
!J4$ = I$
!If J4$[1,1] >= "0" If J4$[1,1] <= "9" Return 1
!If J4$[1,1] >= "A" If J4$[1,1] <= "Z" Return 1
!Call "MXPROD5",J4$,WH,CUST
I$ = J4$ \ Return 
L_6800: Rem BASE(S3) -> PRDTN
CNVTA = S3;CNVTU[0] = 0;CNVTU[1] = S2[0];CNVTU[2] = 5
If (S2[1] = 0 Or S2[1] = 2) Let AMNT = S3 \ Goto L_6810
Gosub L_6950
L_6810: If AMNT <= 0 Let AMNT = S3
BMAMT = AMNT
CNVTA = A2 \ CNVTU[0] = 0 \ CNVTU[1] = S2[0] \ CNVTU[2] = 2
Gosub L_6950
If AMNT <= 0 Let AMNT = A2
COST = FNR(AMNT)
Return 
L_6850: Rem PRDTN -> STK  UNITS
CNVTA = BMAMT;CNVTU[0] = PFU1[13];CNVTU[1] = PFU1[8];CNVTU[2] = 5
If (S2[1] = 0 Or S2[1] = 2) Let AMNT = BMAMT \ Goto L_6860
Gosub L_6950
L_6860: If AMNT <= 0 Let AMNT = BMAMT
S3 = AMNT \ Return 
CNVTA = COST \ CNVTU[0] = PFU1[8] \ CNVTU[1] = 0 \ CNVTU[2] = 2
Gosub L_6950 \ If AMNT <= 0 Let AMNT = COST
COST = AMNT
Return 
L_6940: Rem "====== unibasic 5+ logic
L_6950: Rem STD
Call "MXPRCONV5.DL4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMNT = CNVTA
Return 

L_7000: Rem CHECK PRINTER TYPE
If Err 0 Let F = Spc(8)
N = Chf(0)
If Err 0 Gosub ERR_TRAP
L8 = 60
If F Let L8 = 22
Return 
OutErr: ! something entered wrong
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
End 
OUTEND: Rem EXIT
End
!Print 'CS'
Close 
!Chain "MX000"
End 
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Error 11000
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End