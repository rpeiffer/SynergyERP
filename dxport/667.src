! >>> Program 667
!
! description Create G/L Accounts from Comma delimited (.csv) file
! loadsave -w -n 100,10 -o prog/dxport/667.dl4 src/667.src
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.3 OBJECT CODE     Created: JAN  8, 2013  12:14:48
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/gl665.src (univ2) [mary] {08399}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub Date,FindF,InpBuf,String,StringSearch
!Option Default Dialect IRIS1
Declare Intrinsic Sub Date,FileInfo,FindF,InpBuf,String,Time,VerifyDate,DateToJulian,StringSearch
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"                    
Declare External Function GetUIDRec,GetUIDInfo$
Try

Rem file layout looks as follows:
Rem field 1: g/l account number
Rem field 2: record type 0-5
Rem field 3: account type A,L,C,I,E,R,O
Rem field 4: description      ,
Rem field 5: statement type
If Err 0 Gosub ERR_TRAP
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
dim glbname$[50],apvname$[50]
Dim D$[136],F$[16],F1$[16],F2$[20],F9$[2],G$[2],K1$[25]
Dim P$[64],R$[64],R10$[30],R12$[235],S1$[4],S9$[80],R20$[30],R21$[30]
Dim SOURCEFILE$[50],TEXTFILE$[70],FNAME$[50],FILENAME$[50]
Dim SOURCEDIRNAME$[50],TEXTDIRNAME$[50],GLMNAME$[20],GLKEY$[20]
Dim PERIOD$[4]
dim ReportDir$[75]
Dim 2%,EOMDAY,EOMDATE,3%,GLACCT,REFNUM,GLAMOUNT,GLDATE,POSTDATE
Dim 3%,GLDEBIT,GLCREDIT
Dim 2%,PGLDATE,PDATE$[10]
Dim DATE$[8],DATE1$[6],GLDESC$[80]
Dim CUSTOM_CUSTOMER$[30]
Dim 1%,MONTH_,YEAR_
Dim R11$[20]
Dim T$[64],X1$[10],CLIENT$[4],WK$[100],WK1$[100],CMD$[1000]
Dim YEAR_$[4],BUDGET$[1],BTPER$[4],BFPER$[4],GROUP$[2],CLIENT1$[4]
Dim NUFIELD$[30]
Dim FIELD$[50]
Dim 1%,E,B,L9,LEARNFLAG
Dim 3%,T,R[23],R3,CRAMT,DRAMT
Dim 2%,D[3],G,G1,G2,G3,X
Dim 4%,C2[1]
DIM AV1$[40]
Dim A$[36],A3$[10],4%,A3[39],A4[39],SPARE1$[12],SPARE2$[6],3%,hyp1
dim BLANK$[50]
Dim fname$[50],groupid$[1],2%,apdate
Dim 1%,tmpmth,tmpyr,S9[1]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim tmp1$[200],blockid$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
DIM SOURCEDIRNAME$[50],TEXTDIRNAME$[50],tmpfile$[80],txtfile$[80]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim eparam$[50],blank$[50]
dim rectype$[1],acctype$[1],stattype$[10],1%,budgetflag,apflag,3%,rec_apv, rec_glb, apvkey$[30]
Dim 3%,uarec
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
uarec= GetUIDRec(e$,IntCo,Userid$)
COID=intCO
COMP=intCO
for ctr=0 to 99
	Try Close #ctr Else Rem
next ctr
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors


Def FNR(R) = Sgn(R) * Int((Abs(R) + .005) * 100) / 100
Mat Read #1,51,6;S9;
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
custom_customer$ = UCase$(Trim$(custom_customer$))
Call dxsave(0,"tmp/gl667.txt!")
FILENAME$ = "cntrl/gl667.ini"
Call FindF(FILENAME$,A9)
If Not(A9)
	ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	Let sourcedirname$=rtrim$(reportDir$)+"/"
	textdirname$="tmp/"
	goto starthere1:
	!eflag=eflag+1
	!returnstatus=1
	!message$=FILENAME$+" does not exist. "
	!Goto OUTEND
End If 
Open #90,FILENAME$
Read #90;SOURCEDIRNAME$
X = Len(SOURCEDIRNAME$)
If x>0
	if sourcedirname$[x,x]="\15\" let sourcedirname$[x,x]=""
endif
sourcedirname$ = Trim$(sourcedirname$)
If SOURCEDIRNAME$ = "" Or SOURCEDIRNAME$ = "!"
	eflag=eflag+1
	returnstatus=1
	message$=SOURCEDIRNAME$+" source directory not set up properly. "
	Goto OUTEND
End If 
X = Len(SOURCEDIRNAME$)
If SOURCEDIRNAME$[X,X] <> "/" Let SOURCEDIRNAME$[X,X] = ""
Call FindF(SOURCEDIRNAME$,A9)
If Not(A9)
	eflag=eflag+1
	returnstatus=1	
	message$=SOURCEDIRNAME$+" - Source Directory Does not exist. "
	Goto OUTEND
End If 
Read #90;TEXTDIRNAME$
textdirname$ = Trim$(textdirname$)
let x=len(textdirname$)
If x>0
	if textdirname$[x,x]="\15\" let textdirname$[x,x]=""
endif
If TEXTDIRNAME$ = "" Or TEXTDIRNAME$ = "!"
	eflag=eflag+1
	returnstatus=1	
	message$=TEXTDIRNAME$+" text directory not set up properly. "
	Goto OUTEND
End If 
X = Len(TEXTDIRNAME$)
If TEXTDIRNAME$[X,X] <> "/" Let TEXTDIRNAME$[X,X] = ""
Call FindF(TEXTDIRNAME$,A9)
If Not(A9)
	eflag=eflag+1
	returnstatus=1
	let message$=TEXTDIRNAME$+" - Text Directory Does not exist. "
    Goto OUTEND
End If 
Starthere1: ! 
Call dxget("u_group",groupid$)             
If RTrim$(groupid$) = "" Let groupid$ = "0"
G$[1,1] = COID Using "#"
G$[2,2] = GROUPID$ 
GROUP$[1,2] = G$[1,2]
! need to get client #
IF S9>0
	Call dxget("CLIENTID",tmp$) \ D[1] = tmp$ !!Enter Client #                     
	If D[1] <= 0 Or D[1] > 9999 
		let eflag=eflag+1
		LET Returnstatus=1
		Let message$ = "Invalid client number!"
		goto outend:
	endif
	let client$=d[1] using "####"
	for x=1 to 3
		if client$[x,x]=" " let client$[x,x]="."
	next x
else                                                   
	D[1] = 1 ! cleint # 1
	CLIENT$ = "...1"
endif
Gosub L_4000 ! get acf file
Gosub L_4100 ! get client info
GLMNAME$ = F9$,"/GLM",G$[1,2],CLIENT$[1,4]
Call FindF(GLMNAME$,A9)
If Not(A9)
	let eflag=eflag+1
	LET Returnstatus=1
	Let message$ = "GL Master File Does Not Exist"
	goto outend:
End If 
open #50,GLMNAME$
GLKEY$ = " ",GLKEY$
Search #50,2,1;GLKEY$,V1,E \ If E > 1 Gosub ERR_SEARCH
If E<>0
	let eflag=eflag+1
	LET Returnstatus=1
	Let message$ = "GL Master File Control Record Does Not Exist"
	goto outend:
End If 
Mat Read #50,V1,70;A3;
GETFNAME: Rem get filename
!Print 'CS';"-gl665-"; Tab 10;"Create General Ledger Batch from Excel Spreadsheets ";
!Print @0,22;'CL';"Enter File name to update or <CR> to end.";
!Print @0,23;'CL';"Do not enter .csv at the end of name";
!Print @0,3;"Enter File to process: ";
Call dxget("FNAME",tmp$)
let fname$=rtrim$(tmp$)
If FNAME$ = "" 
	let eflag=eflag+1
	returnstatus=1
	let message$="Invalid File Name Entered "
	Goto OUTEND
endif
For X = 1 To Len(FNAME$)
  If FNAME$[X,X] = " " Let FNAME$[X,X] = "_"
Next X
!Print @0,22;'CE';
SOURCEFILE$ = SOURCEDIRNAME$ + FNAME$ + ".csv"
TEXTFILE$ = TEXTDIRNAME$ + "gl667" + Str$(uarec) + ".txt"
Call String(2,TEXTFILE$) ! make all lower case
TMPFILE$ = "tmp/glex667" + str$(uarec)
CMD$ = "(ls ",SOURCEFILE$," > ",TMPFILE$,") 2>/dev/null"
System CMD$
Call FindF(TMPFILE$,A9)
If Not(A9)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+rtrim$(fname$)+" Not Found "
	goto outend:
Else 
  R12$ = ""
  Open #99,TMPFILE$
  Read #99;R12$
  Close #99
  CMD$ = "rm " + TMPFILE$
  System CMD$
  let x=len(r12$)
  if x>0
	if r12$[x,x]="\15\" let r12$[x,x]=""
  endif
  If R12$ = ""
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+rtrim$(fname$)+" Not Found "
	goto outend:
  End If
  
End If 
!CMD$ = "dtox " + SOURCEFILE$ + " > " + TEXTFILE$
CMD$ = "cp " + SOURCEFILE$ + " " + TEXTFILE$
System CMD$
Call FindF(TEXTFILE$,A9)
If Not(A9)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+rtrim$(fname$)+" Not Available "
	goto outend:
End If 


GETBUDGETFLAG: ! GET BUDGETFLAG
let budgetflag=0
If s9[1]<>0
	Call dxget("BUDGETFLAG",tmp$) ! MMYY format
	if rtrim$(tmp$)<>""
		GLBNAME$ = F9$,"/GLB",G$[1,2],CLIENT$[1,4]
		Call FindF(GLBNAME$,A9)
		If Not(A9)
			let eflag=eflag+1
			LET Returnstatus=1
			Let message$ = "GL Budget File Does Not Exist"
			goto outend:
		End If 
		open #51,GLBNAME$
		GLKEY$ = " ",GLKEY$
		Search #51,2,1;GLKEY$,REC_GLB,E \ If E > 1 Gosub ERR_SEARCH
		If E<>0
			let eflag=eflag+1
			LET Returnstatus=1
			Let message$ = "GL Budget File Control Record Does Not Exist"
			goto outend:
		End If 
		let budgetflag=99
	endif
endif

APFLAG: Rem FLAG TO UPDATE AP VALIDATION FILE
LET APFLAG=0
Call dxget("APFLAG",tmp$) 
If rtrim$(tmp$)<>""
	APVNAME$ = "2/A10VL",G$[1,2]
	Call FindF(APVNAME$,A9)
	If Not(A9)
		let eflag=eflag+1
		LET Returnstatus=1
		Let message$ = "AP Validation File Does Not Exist"
		goto outend:
	End If 
	open #52,APVNAME$
	let apflag=99
endif
totrec=0
Open #12,TEXTFILE$
Read #12;R12$
let x=len(r12$)
  if x>0
	if r12$[x,x]="\15\" let r12$[x,x]=""
  endif
If R12$ = ""
	let eflag=1
	let returnstatus=1
	let message$="CSV file does not contain data. Please Review File."
	goto outend
End If 
let x=len(r12$)
IF R12$[X,X]<>"," LET R12$[X+1,X+1]=","
firstline=99
goto starthere:  ! bypass 1st read

L_2020: !
let firstline=0
Read #12;R12$
let x=len(r12$)
  if x>0
	if r12$[x,x]="\15\" let r12$[x,x]=""
  endif
If R12$ = "" Goto L_2600 ! END OF BATCH
let x=len(r12$)
IF R12$[X,X]<>"," LET R12$[X+1,X+1]=","
starthere: ! 
Gosub GETFIELDS
If GLACCT = 0 Goto L_2020

for ctr=0 to 39\let a3[ctr]=0\let a4[ctr]=0\next ctr
let a$=" ",a$
let a3$=" ",a3$
let spare1$=" ",spare1$
let spare2$=" ",spare2$
let a$[1,9]=glacct using "#########"
let tmp=rectype$
if tmp<0 or tmp>5 let tmp=0
let a$[13,13]=tmp using "#"
if a$[13,13]="0"
	if rtrim$(acctype$)="A" or rtrim$(acctype$)="C" or rtrim$(acctype$)="L" 
		let a$[14,14]=rtrim$(acctype$)
	else
		if rtrim$(acctype$)="I" or rtrim$(acctype$)="E" or rtrim$(acctype$)="R" or rtrim$(acctype$)="O" 	
			let a$[14,14]=rtrim$(acctype$)
		else
			let a$[14,14]="O"
		endif
	endif
endif
let a$[15,36]=Rtrim$(gldesc$)+blank$
let a3$[1,10]=rtrim$(stattype$)+blank$
let glkey$=a$[1,12]
search #50,2,1;glkey$,rec_glm,e
if not(e) goto L_2020:
if e>1 goto L_2020:
let e=2\search #50,1,0;glkey$,rec_glm,e\if e<>0 gosub err_search:
mat write #50,rec_glm,0;a$;
mat write #50,rec_glm,36;spare1$;
mat write #50,rec_glm,48;a3$;
mat write #50,rec_glm,58;hyp1;
mat write #50,rec_glm,64;spare2$;
mat write #50,rec_glm,70;a3;
mat write #50,rec_glm,390;a4;
search #50,4,1;glkey$,rec_glm,e\if e<>0  gosub err_search:
totrec=totrec+1
if budgetflag<>0
	search #51,2,1;glkey$,rec_glb,e
	if e=1
		let e=2\search #51,1,0;glkey$,rec_glb,e\if e<>0 gosub err_search:
		mat write #51,rec_glb,0;a$;
		mat write #51,rec_glb,36;spare1$;
		mat write #51,rec_glb,48;a3$;
		mat write #51,rec_glb,58;hyp1;
		mat write #51,rec_glb,64;spare2$;
		mat write #51,rec_glb,70;a3;
		mat write #51,rec_glb,390;a4;
		mat write #50,rec_glm,36;spare1$;
		search #51,4,1;glkey$,rec_glb,e\if e<>0  gosub err_search:	
	endif
endif
if apflag<>0
	AV1$=" ",AV1$
	av1$[1,12]=a$[1,12] ! account #
	av1$[13,27]=a$[15,36] ! desc
	av1$[28,28]="S" ! summary
	av1$[40,40]=""
	search #52,2,1;glkey$,rec_apv,e
	if e=1
		let e=2\search #52,1,0;glkey$,rec_apv,e\if e<>0 gosub err_search:
		mat write #52,rec_apv,0;av1$;
		search #52,4,1;glkey$,rec_apv,e\if e<>0  gosub err_search:
	endif
endif
goto L_2020: 


L_2600: Rem END OF BATCH FILE
Try
	Close #2
	Close #12
	Close #51
	Close #52
	Close #50
else
	let tmp=tmp
end TRY
!If Err 0 Gosub ERR_TRAP
S9$ = "mv ",SOURCEFILE$," /tmp"
Rem LET S9$="mv ",SOURCEFILE$," mary/tmp/"
System S9$
S9$ = "rm ",TEXTFILE$
System S9$
Goto L_8900






L_4000: Rem OPEN ACF FILE
try 
	Close #2
else 
	let tmp=tmp !
end try
F$ = "1/ACF",GROUP$[1,2]
Call FindF(F$,A9)
If Not(A9)
	let eflag=eflag+1
	let returnstatus=1
	message$="ACF CONTROL FILE MISSING!!! "+F$+"No Update Performed. "
	Goto OUTEND
End If 
Open #2,F$
Return 

L_4100: Rem LOOK UP CLIENT
K1$ = D[1] Using "  ####  "
Search #2,2,1;K1$,R[2],E
If E > 1 Gosub ERR_SEARCH
If E<>0
	let eflag=eflag+1
	let message$="CLIENT "+str$(d[1])+" NOT ON FILE!!!"
	Goto OUTEND
End If 
Mat Read #2,R[2],0;D$;
L9 = D$[135,136]
If L9 > 9 Let F9$ = L9 Using "##"
If L9 < 10 Let F9$ = L9 Using "#"
Return 





GETFIELDS: Rem get field here
GLACCT = 0
RECTYPE$=" ",RECTYPE$
ACCTYPE$=" ",ACCTYPE$
STATTYPE$=" ",STATTYPE$
GLDESC$ = " ",GLDESC$
CT = 0;POS_ = 1
Gosub L_8000
if firstline<>0 and rtrim$(field$)=""
	let eflag=eflag+1
	let returnstatus=1
	let message$="First Line Invalid GL Account Number. Please check format. "
	goto outend:
endif
GLACCT = FIELD$ ! account number - field 1
if firstline<>0
	if glacct<=0 or glacct>99999999
		let eflag=eflag+1
		let returnstatus=1
		let message$="First Line Invalid GL Account Number. Please check format. "
		goto outend:
	endif
endif
IF NOT(GLACCT) RETURN ! BYPASS NO ACCT#
Gosub L_8000 
if firstline<>0 and rtrim$(field$)=""
	let eflag=eflag+1
	let returnstatus=1
	let message$="First Line Invalid Record Type. Please check format."
	goto outend:
endif
LET RECTYPE$=FIELD$
if firstline<>0 
	let tmp3=rectype$
	if tmp3=0 and rtrim$(rectype$)<>"0"
		let eflag=eflag+1
		let returnstatus=1
		let message$="First Line Invalid Record Type. Needs to be between 0 and 5. Please check format"
		goto outend
	endif
endif
if firstline<>0
	if tmp3<0 or tmp3>5
		let eflag=eflag+1
		let returnstatus=1
		let message$="First Line Invalid Record Type. Needs to be between 0 and 5. Please check format"
		goto outend	
	endif
endif
Gosub L_8000
if firstline<>0 and rtrim$(field$)="" and rtrim$(rectype$)="0"
	let eflag=eflag+1
	let returnstatus=1
	let message$="First Line Invalid Account Type. Please check format."
	goto outend:
endif
if firstline<>0 and rtrim$(rectype$)="0"
	if ucase$(rtrim$(FIELD$))="E" goto accttypeok:
	if ucase$(rtrim$(FIELD$))="I" goto accttypeok:
	if ucase$(rtrim$(FIELD$))="A" goto accttypeok:
	if ucase$(rtrim$(FIELD$))="L" goto accttypeok:
	if ucase$(rtrim$(FIELD$))="C" goto accttypeok:
	if ucase$(rtrim$(FIELD$))="O" goto accttypeok:
	if ucase$(rtrim$(FIELD$))="R" goto accttypeok:		
	let eflag=eflag+1
	let returnstatus=1
	let message$="First Line Invalid Account Type. Needs to be A,L,C,I,E,O or R. Please check format"
	goto outend
endif
accttypeok: ! 
Let ACCTYPE$=ucase$(rtrim$(FIELD$))
gosub L_8000:
if firstline<>0 and rtrim$(field$)=""
	let eflag=eflag+1
	let returnstatus=1
	let message$="First Line Needs Description Entered. Please check format"
	goto outend
endif	
GLDESC$=" ",GLDESC$
!If Len(FIELD$) > 1 Let GLDESC$ = FIELD$[1,(Len(FIELD$) - 1)] !description - field 4
!If Len(GLDESC$) If Len(GLDESC$) < 35 Let GLDESC$[Len(GLDESC$) + 1] = "   
GLDESC$=RTRIM$(FIELD$)+blank$
Gosub L_8000
STATTYPE$ = FIELD$ ! debit amount-field 2
if firstline<>0 and len(field$)>10
	let eflag=eflag+1
	let returnstatus=1
	let message$="First Line Statement Type Exceeds 10 characters. Please check format"
	goto outend
endif	
Return 
 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 

Rem {end call.input.i}
L_8000: Rem find string
field$=""
WK1$ = " ",WK1$
If R12$[POS_,POS_] = "''"
  POS_ = POS_ + 1
  WK1$ = R12$[POS_]
  Search WK1$,"''",CT
Else 
  WK1$ = R12$[POS_]
  Search WK1$,",",CT
  IF CT> 0 If WK1$[CT,CT] = "," Let CT = CT - 1
End If 
WK$ = " ",WK$
IF CT>0
	WK$[1,CT] = WK1$[1,CT]
	If WK$[CT,CT] = "''" Let WK$[CT,CT] = ""
ENDIF
If POS_ = 1 If WK$[1,1] = "''" Let WK$[1,1] = " "
POS_ = POS_ + (CT + 1)
IF CT>0 FIELD$ = WK$[1,CT]
if ct=0 and len(wk1$)<>0 ! end of string
	let field$=wk1$ !
endif
Return 

                               
                                                
ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump()
e$ = msg$ \ Error 10000                      
Return ! End  
                             
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
call programdump()
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)

L_8900: Rem END
OUTEND: Rem END
Close 
Call FindF(TEXTFILE$,A9)
If A9
  Kill TEXTFILE$
End If 
!Chain "mx000"
!Stop 
if eflag<>0 let returnstatus=1 ! error
!
!Chain "MX000"
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	let message$=message$+" Completed"	
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
! try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
end try
End ! the whole program
