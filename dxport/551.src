! >>> Program 551
!
! description Accounts Payable Vendor History Purge
! loadsave -w -n 100,10 -o prog/dxport/551.dl4 src/551.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 23, 2009  12:27:32
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/ap/la551.src (univ2) [bill] {01153}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem LA551 A/P DETAIL HISTORY - NONCONTRACT PURGE
Rem AUTHOR: MTK   MAR 24, 1987
Rem LAST UPDATE: 9/90 USE SORTFILE TO COLLECT PURGED ITEMS
!If Err 0 Gosub ERR_ESCAPE
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
TRY
Dim 1%,C0[6],E,F,I,K,L,L9,M[1],N,P,X1,N9,G8$[2]
Dim 2%,M1[8],R1,X,X2,D,G9[3],DIVFLAG,DIV[2],DT3[1],JDATE[5],COMP
Dim 3%,M2[4],T9[15],R[30],R2$[4],A$[30]
Dim J$[40],K1$[50],K2$[30],K3$[30],M$[12],M1$[10],M2$[4],P$[8],U5$[50],2%
Dim G9$[40],2%,K1[1],K2[1],K3,3%,T[4],T1[4]
Dim T$[30],D$[25],R$[63],F$[16],X$[10]
Dim 2%,M9,M5[1],1%,M6,M7,3%,M8[2],B8[1],M5$[12],M6$[12]
Dim K23$[40],KEY23$[40],K24$[40],KEYAPH$[40],POLINE$[131]
Dim 2%,APL0[2],APL$[12],APL1[5],APL2[3]
Dim 2%,APH0[2],APH$[12],APH1[2],APH2[2]
Dim K4$[30],K5$[30],K6$[30],K7$[30],K10$[10],I$[30],DIV$[30],2%,V1
Dim POLINE$[131]
Dim fname$[50],groupid$[1]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim am1$[12],2%,am1[2]
dim keyapm$[50],keychk$[50],3%,rec_apm,recchk
dim keyapt$[50],3%,rec_apt
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
COMP=INTCo
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Mat Read #1,88,16;F$; \ Open #15,F$ ! a00ap
Mat Read #1,88,48;F$; \ Open #16,F$ ! acf
V8=0
MAXL = 60 
X2 = Spc(5)
T$ = "INVC/MM/C            V/CPAY"
Call Time(D$)
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
G8$[1,1] = intco Using "#"
g8$[2,2]=groupid$
K2$ = " 0"
Search #15,2,1;K2$,R[15],E
If E <>0
	eflag=eflag+1
	message$="Error In A/P Control File. Record '0' Not On File. "
	goto OUTend:
endif
Mat Read #15,R[15],2;R$;
F$ = R$[31,31],"/A80VM",G8$[1,2]\ Ropen #4,F$
K2$ = "10" \ Search #15,2,1;K2$,R[15],E
If E = 1 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '0' Not On File. "
	goto outend:
endif
If E Gosub ERR_SEARCH
Mat Read #15,R[15],2;R2$;
K2$ = " ",K2$ \ K2$[3,6] = R2$
Search #16,2,1;K2$,R[16],E
If E = 1 
	eflag=eflag+1
	message$="Client "+k2$[3,6]+"Not On File. "
	goto outend:
endif
If E Gosub ERR_SEARCH
Mat Read #16,R[16],10;G9$;
Mat Read #1,51,18;C0;
For X = 2 To 5
  Read L
  If L < 0 Goto L_830
  If X = 5 If Not(C0[2]) Goto L_830
  Read #1,88,L;J$;
  Open #X,J$
L_830: Next X
Data "432"," 448","-1"," 144"
! #1-CNTRL, #2-APDETH,#3-APDETL,#4-A80VM,#5-APDETA,#9-SORTWORK, #10-APDIV
! #15-A00AP, #16-ACF, #23-APPOHH, #24-APPOL, #31-APDETM, #32-apdett
If C0[4]
  F$ = COMP Using "2/APPOHH#" \ Open #23,F$
  F$ = COMP Using "2/APPOLH#" \ Open #24,F$
End If 
let ch_apm=31
let f$=comp using "2/APDETM#"
Try
	open #ch_apm,f$
else
	let ch_apm=0
end try	
let ch_apt=32
let f$=comp using "2/APDETt#"
Try
	open #ch_apt,f$
else
	let ch_apt=0
end try	

! printer flags
F = 0
L9 = 55

!Print 'CS'; Tab 20;"A/P DETAIL HISTORY PURGE"
!Print @20,3;"****  WARNING  ****"
!Print @15,5;"A SYSTEM BACKUP IS RECOMMENDED BEFORE PROCEEDING"
!L_920: Print @15,9;'CL';"DO YOU WISH TO CONTINUE (Y/N) ";
!Input ""J$
!If J$ = "N" Goto OUTEND
!If J$ <> "Y" Goto L_920
DIVFLAG = 0
If Not(C0[6]) Goto L_1000
F$ = R$[1,1],"/APDIV",G8$ \ Ropen #10,F$
L_1000: L = 99 \ P = 0
call dxget("DATE",tmp$) ! mmddyy format
let j$=rtrim$(tmp$)
if len (j$)<6 or len(j$)>6
	let eflag=eflag+1
	let message$=message$+"Invalid Date Submitted "
	goto endgetdate:
endif
K3 = J$[1,2]
If K3 < 1 or  K3 > 12
	let eflag=eflag+1
	let message$=message$+"Invalid Date Submitted "
	goto endgetdate:
endif	
K3 = J$[3,4]
If K3 < 1 or K3 > 31
	let eflag=eflag+1
	let message$=message$+"Invalid Date Submitted "
	goto endgetdate:
endif
K2$ = J$[5,6],J$[1,2],J$[3,4]
X2 = K2$[1,6] \ Gosub L_7820
If not(x2)
	let eflag=eflag+1
	let message$=message$+"Invalid Date Submitted "
	goto endgetdate:
endif
JDATE[0] = X2
K3 = K2$[1,6]
X2 = K3 ! \ Gosub L_8900 get date in p$[1,8]
endgetdate: ! 
! vendor
K1 = 0 \ K1[1] = 999999
call dxget("begvendor",K2$) ! starting vendor
let k1=k2$
if k1<0 or k1>999999
	let eflag=eflag+1
	let message$="Invalid Starting Vendor Code Entered"
endif
call dxget("endvendor",K2$) ! endinf vendor
let k1[1]=k2$
if k1[1]<0 or k1[1]>999999
	let eflag=eflag+1
	let message$="Invalid Ending Vendor Code Entered"
endif
if k1>k1[1]
	let eflag=eflag+1
	let message$="Invalid Vendor Code Range Entered"
endif
! divisions
L_1600: Rem DIVISION SECTION
DIVFLAG = 0;div[1]=0;div[2]=0
If (C0[6]) <>0 ! division flag is on
	call dxget("RDIVISIONS",tmp$) \ IF tmp$="" LET DIVFLAG = 0 else LET DIVFLAG = 99
	if divflag<>0
		call dxget("SDIVISION",tmp$) \ DIV[1] = tmp$ !\ Enter Starting Division
		if div[1]<0 or div[1]>99
			let eflag=eflag+1
			let message$="Invalid Starting Division Entered"
		endif
		call dxget("EDIVISION",tmp$) \ IF tmp$="" LET DIV[2] = 99 ELSE DIV[2] = tmp$
		if div[2]<0 or div[2]>99
			let eflag=eflag+1
			let message$="Invalid Ending Division Entered"
		endif
		if div[1]>div[2]
			let eflag=eflag+1
			let message$="Invalid Division Range Entered"
		endif
	endif
endif
Call dxget("PRPRT",tmp$) ! (NOT ADDED?)     
audonly = 0
If UCASE$(RTRIM$(tmp$))="Y" Let audonly = 1
if eflag<>0 goto outend:

K1$ = " ",K1$
L_1520: Search #9,3,1;K1$,R[2],E
If E = 2 
	IF DIvflag<>0 
		goto L_1730:
	else
		goto L_1900:
	endif
endif 
If E Gosub ERR_SEARCH
Search #9,5,1;K1$,R[2],E
If E Gosub ERR_SEARCH
Goto L_1520

L_1730: K10$ = " ",K10$ \ K10$[1,2] = DIV[1] Using "##"
Search #10,2,1;K10$,R[10],E \ If Not(E) Goto L_1755
If E > 1 Gosub ERR_SEARCH
L_1745: Search #10,3,1;K10$,R[10],E \ If E = 2 Goto L_6020
If E Gosub ERR_SEARCH
L_1755: DIV[0] = K10$ \ If DIV[0] > DIV[2] Goto L_6020
Mat Read #10,R[10],12;DIV$;
Goto L_1900
L_1900: !  Print @0,23;'CL';" PRINTING... PLEASE WAIT . . . ";
L = 99
totrec=0
K1$ = " ",K1$ \ K1$[1,6] = K1[0] Using "######"
L_2000: Search #2,3,2;K1$,R[2],E
If E Goto L_6000
Mat Read #2,R[2],16;M1;
If M1 > K1[1] Goto L_6000
If DIVFLAG If DIV[0] <> M1[8] Goto L_2000
Mat Read #2,R[2],0;M;
If M > 3 Goto L_2000
If M[1] <> 1 Goto L_2000
X2 = M1[1]
JDATE[1] = X2
X2 = M1[6] \ Gosub L_7820 ! \ X2 = 0
JDATE[2] = X2
If JDATE[1] > JDATE[0] Goto L_2000
If JDATE[2] > JDATE[0] Goto L_2000
If A9 If A9 <> M1 Gosub L_3200
If A9 <> M1 Gosub L_3100
A9 = M1
Mat Read #2,R[2],4;M$;
Mat Read #2,R[2],52;M2;
K2$ = " ",K2$ \ K2$[1,6] = R[2] Using "######"
L_2205: Search #3,3,1;K2$,R[3],E
If E = 2 Goto L_2400
If E Gosub ERR_SEARCH
recchk = K2$[1,6]
If recchk <> R[2] Goto L_2400
Mat Read #3,R[3],0;M5; \ Mat Read #3,R[3],36;M8;
If M1 <> M5[1] Goto L_2205
Mat Read #3,R[3],22;M7;
Mat Read #3,R[3],24;M6$;
K4$ = " ",K4$ \ K4$[1,6] = M5[1] Using "######"
K4$[7,18] = M6$[1,12] \ K4$[19,20] = M7 Using "##"
Search #2,2,1;K4$,R,E
If E = 1 Goto L_2205
If E Gosub ERR_SEARCH
Read #2,R,20;D;
X2 = D
If X2 > JDATE[0] Goto L_2000
Read #2,R,2;N9;
If N9 <> 1 Goto L_2000
Read #2,R,40;D;
X2 = D \ Gosub L_7820 ! \ X2 = 0
If X2 > JDATE[0] Goto L_2000
K6$ = " ",K6$ \ K6$[1,6] = R[0] Using "######"
L_2290: Search #3,3,1;K6$,R1,E
If E = 2 Goto L_2205
If E Gosub ERR_SEARCH
recchk = K6$[1,6]
If recchk <> R[0] Goto L_2205
Mat Read #3,R1,0;M5; \ Mat Read #3,R1,22;M7;
Mat Read #3,R1,24;M6$;
K7$ = " ",K7$ \ K7$[1,6] = M5[1] Using "######"
K7$[7,18] = M6$[1,12] \ K7$[19,20] = M7 Using "##"
Search #2,2,1;K7$,V1,E
If E = 1 Goto L_2290
If E Gosub ERR_SEARCH
Read #2,V1,20;D;
X2 = D
If X2 > JDATE[0] Goto L_2000
Read #2,V1,2;N9;
If N9 <> 1 Goto L_2000
Read #2,V1,40;D;
X2 = D \ Gosub L_7820 ! \ X2 = 0
If X2 > JDATE[0] Goto L_2000
Goto L_2290
L_2400: Gosub L_5800
Gosub L_5000
Search #9,4,1;K1$,R[2],E \ If E Gosub ERR_SEARCH
Goto L_2000
L_3100: Rem GET VENDOR NAME
K2$ = " ",K2$ \ K2$[1,6] = M1 Using "######"
A$ = "VENDOR NOT ON FILE!!!"
Search #4,2,1;K2$,R[4],E
If E Goto L_3130
Mat Read #4,R[4],0;A$;
L_3130: Print #0;" "
L = L + 1
Gosub L_5800
Print #0; Using "######  ";M1;A$
Return 
L_3200: Rem VENDOR TOTAL PRINT
If T[0] <> 0 Goto L_3210
If T[1] <> 0 Goto L_3210
If T[2] <> 0 Goto L_3210
If T[3] <> 0 Goto L_3210
If Not(T[0] + T[1] + T[2] + T[3]) Return 
L_3210: Gosub L_5800
Print #0;" "
Print #0;"** VENDOR TOTALS **";
Print #0; Using "---------.##"; Tab 56;T[0];
Print #0; Using "--------.##"; Tab 72;T[1];
Print #0; Using "--------.##"; Tab 84;T[2];
Print #0; Using "--------.##"; Tab 97;T[3];
For I = 0 To 4
  T9[I] = T9[I] + T[I]
  T[I] = 0
Next I
L = L + 1
Return 
L_4000: Rem TOTAL PRINT
Gosub L_5800
Print #0;"\15\** GRAND TOTALS **";
Print #0; Using "---------.##"; Tab 56;T9[0];
Print #0; Using "---------.##"; Tab 71;T9[1];
Print #0; Using "---------.##"; Tab 83;T9[2];
Print #0; Using "---------.##"; Tab 96;T9[3];
For I = 0 To 3 \ T9[I] = 0 \ Next I
Print #0;"\14\";
Return 
L_5000: Rem PRINT LINE
totrec=totrec+1
Print #0;M$[1,12];
Print #0; Tab 13;T$[M * 3 - 2,M * 3];
If C0[6] Print #0; Tab 17;M1[8];
If M1[7] Print #0; Using "######"; Tab 21;M1[7];
X2 = M1[1] \ Gosub L_7770 \ P$ = X$[1,8]
Print #0; Tab 29;P$[1,8];
X2 = M1[3] \ Gosub L_8900
Print #0; Tab 39;P$[1,8];
X2 = M1[4] \ Gosub L_8900
Print #0; Tab 49;P$[1,8];
Print #0; Using "--------.##"; Tab 57;M2[0];
T[0] = T[0] + M2[0]
If M2[2] Goto L_5150
L_5060: Print #0; Using "--------.##"; Tab 72;M2[1];
Print #0; Using "--------.##"; Tab 84;M2[2];
Print #0; Using "--------.##"; Tab 97;(M2[0] - M2[1] - M2[2]);
If M1[5] Print #0; Using "######"; Tab 110;M1[4];
X2 = M1[6] \ Gosub L_8900
If M1[6] Print #0; Tab 118;P$[1,8];
If M1[5] If Not(M2[2]) Print #0; Tab 127;"VOID";
Print #0;""
T[1] = T[1] + M2[1]
T[2] = T[2] + M2[2]
T[3] = T[3] + (M2[0] - M2[1] - M2[2])
Gosub CHKMULTPO
Return 
L_5150: Rem GET DETAIL HISTORY ON PAYMENTS
F9 = 0 \ B8 = M2[0] - M2[3] \ B8[1] = M2[3]
K4$ = " ",K4$ \ K4$[1,6] = R[2] Using "######"
L_5165: Search #3,3,1;K4$,R[3],E
If E = 2 Goto L_5400
If E Gosub ERR_SEARCH
recchk = K4$[1,6]
If recchk <> R[2] Goto L_5400
Mat Read #3,R[3],0;M5; \ Mat Read #3,R[3],8;M6;
Mat Read #3,R[3],10;M5$; \ Mat Read #3,R[3],22;M7;
Mat Read #3,R[3],24;M6$; \ Mat Read #3,R[3],36;M8;
If M7 < 8 Goto L_5165
If F9 Gosub L_5800
If M7 = 8 Goto L_5265
Print #0; Using "--------.##"; Tab 72;M8[1];
Print #0; Using "--------.##"; Tab 84;M8[0] - M8[1];
B8 = B8 - (M8[0] - M8[1])
T[1] = T[1] + M8[1]
T[2] = T[2] + M8[0] - M8[1]
Print #0; Using "--------.##"; Tab 97;B8;
L_5265: Print #0; Tab 110;M6$[1,6];
K5$ = " ",K5$ \ K5$[1,6] = M8[2] Using "######"
K5$[7,18] = M6$[1,12] \ K5$[19,20] = M7 Using "##"
Search #2,2,1;K5$,R,E
If E = 1 Goto L_5315
If E Gosub ERR_SEARCH
Mat Read #2,R,20;M9;
X2 = M9 \ Gosub L_7770 \ P$ = X$[1,8]
Print #0; Tab 118;P$[1,8];
If M7 = 8 Print #0; Tab 127;"VOID";
L_5315: Print #0;""
F9 = 99
Goto L_5165
L_5400: If Not(F9) ! "GOTO L_5060:
  M2[1] = M2[3];M2[2] = M2[2] - M2[3]
  Goto L_5060
End If 
T[3] = T[3] + B8
Gosub CHKMULTPO
Return 
CHKMULTPO: Rem check for multiple po numbers to print
If C0[4]
  POLINE$ = "";POS_ = 0
  KEYAPH$ = " ",KEYAPH$ \ KEYAPH$[1,6] = M1[0] Using "######"
  KEYAPH$[7,18] = M$[1,12] \ KEYAPH$[19,20] = M[0] Using "##"
  K23$ = " ",K23$;K23$[1,20] = KEYAPH$[1,20]
SEARCHAPPOH: Rem search for all po's applied
  Search #23,3,1;K23$,R[23],E \ If E = 2 Goto ENDSEARCHAPPOH
  If E Gosub ERR_SEARCH
  If KEYAPH$[1,20] <> K23$[1,20] Goto ENDSEARCHAPPOH
  PONUM = K23$[21,26]
  If PONUM <> M1[7] ! po number different
    If POLINE$ = "" Or POS_ > 121
      If POS_ > 121 Gosub PRNTPOLINE
      POLINE$ = " ",POLINE$
      If O1 <> 2
        POLINE$[3] = PONUM Using "Purchase Order(s): ######"
      Else 
        POLINE$[3] = PONUM Using "Debit Memo(s)    : ######"
      End If 
      POS_ = 28
    Else 
      POLINE$[POS_,POS_] = ","
      POLINE$[POS_ + 1,POS_ + 7] = PONUM Using " ######"
      POS_ = POS_ + 8
    End If 
  End If 
  Goto SEARCHAPPOH
ENDSEARCHAPPOH: Rem end search appoh
  If POLINE$ <> "" Gosub PRNTPOLINE
End If 
Return 
PRNTPOLINE: Rem print poline for multiple po's
If POLINE$ = "" Return 
Gosub L_5800
Print #0;POLINE$
POLINE$ = "";POS_ = 0
Return 
L_5800: L = L + 1
If L < L9 Return 
If Not(P) Goto L_5815
L_5815: If L9 <> 22 Goto L_5830
!Print @0,23;'CL';"PRESS <CR> TO CONTINUE "; \ Input ""J$
!Print 'CS'
L_5830: If P Print #0;"\14\";
P = P + 1
Print #0;" "
Print #0; Tab 50;G9$[1,40]
Print #0;D$;
Print #0; Tab 50;"ACCOUNTS PAYABLE HISTORY PURGE";
Print #0; Tab 110;"PAGE";P
X2 = K3 \ Gosub L_8900
If DIVFLAG Print #0;DIV$[1,30];
Print #0; Tab 50;"PURGE AS OF: ";P$[1,8];
If audonly <> 0 Print #0; Tab 100;"*PREVIEW*";
PRINT #0;""
Print #0;" "
Print #0;"REFERENCE#";
Print #0; Tab 12;"TYPE";
If C0[6] Print #0; Tab 17;"DIV";
Print #0; Tab 22;"P.O.#";
Print #0; Tab 29;"INV DATE";
Print #0; Tab 39;"DUE DATE";
Print #0; Tab 49;"DIS DATE";
Print #0; Tab 59;"INVOICE AMT";
Print #0; Tab 75;"DISCOUNT";
Print #0; Tab 88;"PAYMENT";
Print #0; Tab 101;"BALANCE";
Print #0; Tab 110;"CHECK#";
Print #0; Tab 118;"CHK DATE";
Print #0;" "
L = 7
Print #0;"\15\";
Return 
L_6000: Rem PURGE SECTION
Gosub L_3200
Gosub L_4000
If DIVFLAG Goto L_1745
L_6020: !  Print 'CS'; Tab 20;"A/P DETAIL HISTORY PURGE"
if audonly<>0 goto outend:
! if audonly=0 goto err_search: ! !!! need to test purge section
Try Close #0 Else Rem 
let totrec=0
K1$ = " ",K1$
L_6120: Search #9,3,1;K1$,R[2],E
If E = 2 Goto L_6600
If E Gosub ERR_SEARCH
Mat Read #2,R[2],0;M;
If M[1] <> 1 Goto L_6120
Mat Read #2,R[2],16;M1; \ Mat Read #2,R[2],52;M2;
Mat Read #2,R[2],4;M$;
K2$ = " ",K2$ \ K2$[1,6] = R[2] Using "######"
L_6405: Search #3,3,1;K2$,R[3],E
If E = 2 Goto L_6500
If E Gosub ERR_SEARCH
recchk= K2$[1,6]
If recchk <> R[2] Goto L_6500
mat read #3,r[3],0;am1;
if am1[0]<>m1[0] goto L_6405: !  belongs to a diff vendor
mat read #3,r[3],12;am1$;
if am1$[1,12]<>m$[1,12] goto L_6405: 
Search #3,5,1;K2$,R[3],E
If E Gosub ERR_SEARCH
E = 3 \ Search #3,1,0;K2$,R[3],E
If E Gosub ERR_SEARCH
Goto L_6405
L_6500: Gosub L_6900
If C0[4] Gosub DELAPPO
if ch_apm<>0
	let keyapm$=" ",keyapm$
	let keyapm$[1,6]=M1 USING "######"
	let keyapm$[7,18]=m$[1,12]
	let keyapm$[19,20]=m[0] using "##"
	let keychk$=keyapm$
	srchapm: ! 
	search #ch_apm,3,1;keyapm$,rec_apm,e
	if e=2 goto endsrchapm:
	if e<>0 gosub err_search:
	if keychk$[1,20]<>keyapm$[1,20] goto endsrchapm:
	search #ch_apm,5,1;keyapm$,rec_apm,e
	if e<>0 gosub err_search:
	let e=3\search #ch_apm,1,0;keyapm$,rec_apm,e
	goto srchapm:
	endsrchapm: ! 
endif
! ap detail tag file
if ch_apt<>0 ! 
	let keyapt$=" ",keyapt$
	let keyapt$[1,6]=M1 USING "######"
	let keyapt$[7,18]=m$[1,12]
	let keyapt$[19,20]=m[0] using "##"! 
	search #ch_apt,2,1;keyapt$,rec_apt,e
	if not(e)
		search #ch_apt,5,1;keyapt$,rec_apt,e
		if e<>0 gosub err_search:
		let e=3\search #ch_apt,1,0;keyapt$,rec_apt,e
		 if e<>0 gosub err_search:
	endif
endif
K2$ = " ",K2$ \ K2$[1,6] = M1 Using "######"
K2$[7,18] = M$[1,12] \ K2$[19,20] = M[0] Using "##"
Mat Read #2,R[2],52;M2;
Search #2,5,1;K2$,R[2],E \ If E Gosub ERR_SEARCH
K3$ = " ",K3$;K3$[1,6] = M2[4] Using "######";K3$[7,24] = K1$[1,18]
Search #2,5,3;K3$,R[2],E \ If E Gosub ERR_SEARCH
Search #2,5,2;K1$,R[2],E
If E Gosub ERR_SEARCH
E = 3
Search #2,1,0;K1$,R[2],E
If E Gosub ERR_SEARCH
Search #9,5,1;K1$,R[2],E \ If E Gosub ERR_SEARCH
totrec=totrec+1
Goto L_6120
L_6600: Rem DELETE PAYMENT
K1$ = " ",K1$ \ K1$[1,6] = K1[0] Using "######"
L_6610: Search #2,3,2;K1$,R[2],E
If E Goto OUTEND
Mat Read #2,R[2],0;M;
If M < 4 Goto L_6610
If M[1] <> 1 Goto L_6610
Mat Read #2,R[2],16;M1;
X2 = M1[1]
JDATE[1] = X2
X2 = M1[6] \ Gosub L_7820 ! \ X2 = 0
JDATE[2] = X2
If JDATE[1] > JDATE[0] Goto L_6610
If JDATE[2] > JDATE[0] Goto L_6610
If M1 > K1[1] Goto OUTEND
Mat Read #2,R[2],4;M$;
K2$ = " ",K2$ \ K2$[1,6] = R[2] Using "######"
L_6665: Search #3,3,1;K2$,R[3],E 
If E = 2 Goto L_6735
If E Gosub ERR_SEARCH
recchk= K2$[1,6]
If recchk<> R[2] Goto L_6735
Mat Read #3,R[3],0;M5; \ Mat Read #3,R[3],36;M8;
Mat Read #3,R[3],22;M7;
Mat Read #3,R[3],24;M6$;
K4$ = " ",K4$ \ K4$[1,6] = M5[1] Using "######"
K4$[7,18] = M6$[1,12] \ K4$[19,20] = M7 Using "##"
Search #2,2,1;K4$,R,E
If E = 1 Goto L_6665
If E Gosub ERR_SEARCH
Goto L_6610
L_6735: Gosub L_6900
K2$ = " ",K2$ \ K2$[1,6] = R[2] Using "######"
L_6750: Search #3,3,1;K2$,R[3],E
If E = 2 Goto L_6800
If E Gosub ERR_SEARCH
recchk= K2$[1,6] \ If recchk<> R[2] Goto L_6800
mat read #3,r[3],0;am1;
if am1[0]<>m1[0] goto L_6750: !  belongs to a diff vendor
mat read #3,r[3],12;am1$;
if am1$[1,12]<>m$[1,12] goto L_6750: ! VERIFY VENDOR2
! VERIFY INVOICE #
Search #3,5,1;K2$,R[3],E
If E Gosub ERR_SEARCH
E = 3 \ Search #3,1,0;K2$,R[3],E
If E Gosub ERR_SEARCH
Goto L_6750
L_6800: K2$ = " ",K2$ \ K2$[1,6] = M1 Using "######"
K2$[7,18] = M$[1,12] \ K2$[19,20] = M[0] Using "##"
Search #2,5,1;K2$,R[2],E \ If E Gosub ERR_SEARCH
Mat Read #2,R[2],52;M2;
K3$ = " ",K3$;K3$[1,6] = M2[4] Using "######";K3$[7,24] = K1$[1,18]
Search #2,5,3;K3$,R[2],E \ If E Gosub ERR_SEARCH
Search #2,5,2;K1$,R[2],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;K1$,R[2],E \ If E Gosub ERR_SEARCH
Goto L_6610
L_6900: Rem DETAIL ACCOUNT ACTIVITY
If Not(C0[2]) Return 
K2$ = " ",K2$ \ K2$[1,6] = R[2] Using "######"
L_6915: Search #5,3,1;K2$,R[5],E \ If E = 2 Return 
If E Gosub ERR_SEARCH
recchk= K2$[1,6] \ If recchk <> R[2] Return 
MAT READ #5,r[5],0;am1;
if am1[1]<>m1[0] goto L_6915: ! vendor code <> 
mat read #5,r[5],12;am1$;
if am1$[1,12]<>m$[1,12] goto L_6915: ! invoice code <>
Search #5,5,1;K2$,R[5],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #5,1,0;K2$,R[5],E \ If E Gosub ERR_SEARCH
Goto L_6915

X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_7770: Rem DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E let x2=0 !  Return 
X2 = X$[1,5] \ Return 
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
Search #3,5,1;K2$,R[3],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #3,1,0;K2$,R[3],E \ If E Gosub ERR_SEARCH
Return 
L_8900: Rem PUT DATE FROM X2 INTO P$
U5$ = X2 Using "&&&&&&&"
P$[1,2] = U5$[4,5]
P$[3,3] = "/"
P$[4,5] = U5$[6,7]
P$[6,6] = "/"
P$[7,8] = U5$[2,3]
Return 

DELAPPO: Rem delete appohh & appolh history
If Not(C0[4]) Return 
K23$ = " ",K23$;K23$[1,6] = M1[0] Using "######"
K23$[7,18] = M$[1,12];K23$[19,20] = M[0] Using "##"
KEY23$ = K23$[1,20]
SRCHAPPOH: Rem search appoh file
Search #23,3,1;K23$,R[23],E \ If E = 2 Return 
If E Gosub ERR_SEARCH
If K23$[1,20] <> KEY23$[1,20] Return 
K24$ = " ",K24$;K24$[1,6] = K23$[1,6];K24$[7,12] = K23$[21,26]
K24$[13,26] = K23$[7,20]
Search #23,5,2;K24$,R[23],E \ If E Gosub ERR_SEARCH
Search #23,5,1;K23$,R[23],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #23,1,0;K23$,R[23],E \ If E Gosub ERR_SEARCH
K24$ = " ",K24$;K24$[1,26] = K23$[1,26]
SRCHAPPOL: Rem search appol file
Search #24,3,1;K24$,R[24],E \ If E = 2 Goto SRCHAPPOH
If E Gosub ERR_SEARCH
If K24$[1,26] <> K23$[1,26] Goto SRCHAPPOH
Search #24,5,1;K24$,R[24],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #24,1,0;K24$,R[24],E \ If E Gosub ERR_SEARCH
Goto SRCHAPPOL

ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/la551se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message  
Call programdump()
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                                               



OUTEND: Rem EXIT PROGRAM
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		if audonly<>0
			let message$=message$+"There are no a/p history items available to list"
		else
			let message$=message$+"There are no a/p history items available to purge"	
		endif
	else
		if audonly<>0
			Let message$=message$+" "+str$(totrec)+" A/P History Transaction(s) Listed"
		else
			Let message$=message$+" "+str$(totrec)+" A/P History Transaction(s) Purged"
		endif
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
