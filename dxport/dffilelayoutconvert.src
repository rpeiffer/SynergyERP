! -- dffilelayoutconvert.dl4
!
print 'cs';"This program should not be run, will destroy dynamic xport file structure"
stop
!
! Program to convert file layouts from existing system to new DL4 layout records
!
! 1.0 03/15/2007  new 
!
!all rights reserved. (c)copyright 2005 by: dynamicconcepts 
!
! loadsave -w -n 10,10 -o dffilelayoutconvert.dl4 src/dffilelayoutconvert.src
!
Declare Intrinsic Function findchannel,crc32,callstat$,encfnm$,DateUsing$,Trim$,Replace$
Declare Intrinsic Sub dxget,dxset,dxclose,dxsave,bytecopy,StringSearch
!
External Lib "dfgeneral.lib"
Declare External Sub dfsuberr,ReadSystemFile,Openfiles
declare external function GetProgramPath$
!
Declare Sub OpenRoutine,ProcessRoutine,CloseRoutine,MaskVarible,CheckDupName
!  
include "src/dffiles.bsh"
!
!
! **main procedure
!
!
dim FileDefHdr. as FileDefHdr
dim FileDefFields. as FileDefFields
dim FileDefFieldsTmp. as FileDefFields
!
Dim Path$[100],FileName$[50]
dim BegKey$[48],EndKey$[48],FileKey$[48],FieldKey$[48]
dim FileRec$[36],FieldRec$[50]
Dim e$[200]
dim tmp$[100],tmp1$[100],tmp2$[100],tmp3$[100]
Dim 1%,C[20],FileMat[3],FieldMat[2],tmpcnt,errflag
Dim 2%
Dim 3%,idx
Dim 4%
!
!
Try 
  Call OpenRoutine() ! open files
  Call ProcessRoutine() ! process section
  Call CloseRoutine() ! close files
Else 
  ;"error";spc(8);" at line ";spc(10)
  stop
End Try 
chain""
!
! ------------------------------------------------
Sub OpenRoutine()
!
Try
 Dim config. as config
 ! need to get filenames from dxsystem.txt
 !
 !read system file parameters
 Call ReadSystemFile(e$,config.)
 !
 ! open files
 !
 Call openfiles(e$,config.,c[]) ! dxport files
 ! 
 Path$="/x1/xrev9/syspgms/1/" ! old path
 path$ = "/x/htb/rst/syspgms/1/" 

 c[11]=findchannel()
 ropen #c[11],Path$ + "ssuf02m" ! Ubs file layout, file names
 !
 c[12]=findchannel()
 ropen #c[12],Path$ + "ssuf02i" ! UBS file layout, keys
 !
 c[13]=findchannel() ! chan for field layout file
 !
else
  ;"error";spc(8);" at line ";spc(10)
   stop
end try
!
End Sub ! openroutine
!
! ------------------------------------------------
Sub ProcessRoutine()
!
Try
  !
  stop ! next line setup file name
  BegKey$="WHINFO" \ EndKey$="WHINFO "
  FileKey$=BegKey$
  Sear_FileName:
  search #c[11],3,1;FileKey$,v1,v2
  do
    if EndKey$ if FileKey$[1,len(EndKey$)]>EndKey$ exit do
    if v2 exit do
    matread #c[11],v1;FileRec$;
    matread #c[11],v1,36;FileMat;
    !
    ! setup file definition header
    FileDefHdr.FileName$=rtrim$(FileKey$)
    tmp$=Ucase$(FileDefHdr.FileName$[1,2])
    if tmp$<>"AP" if tmp$<>"GL" let tmp$="System"
    FileDefHdr.GroupName$=tmp$
    FileDefHdr.Active$="a" ! active
    FileDefHdr.Version$="1.0"
    FileDefHdr.Desc$=FileRec$[21,35]
    FileDefHdr.AddedDate$=DateUsing$(Tim#(0),"MM/DD/YYYY HH:NN")
    !
    ! Add file definition header record
    Add Record #c[0];filedefhdr.
    !
    ! open & process field layout file
    c[13]=FindChannel() ! chan for field layout file
    FileName$="fm",lcase$(rtrim$(FileKey$)) ! Field layout file
    try
      ropen #c[13],Path$ + FileName$
      if chf(c[13])>799
        ;"can't process '";Path$;FileName$;"' too many field names"
      endif
      !
      cntspare=1 ! init counter for spare & space field names
      !
      ! process fields
      seqcnt=1 ! starting counter for field sequence #
      For FieldCnt=0 to chf(c[13])-1
        !
        if FieldCnt>400 print "too many field items" \ stop ! increase in xport
	    !
        matread #c[13],FieldCnt;FieldRec$;
        matread #c[13],FieldCnt,50;FieldMat;
	    FieldMat[0]=abs(FieldMat[0])
	    !
	    FileDefFields.FileName$=FileDefHdr.FileName$
	    FileDefFields.Version$=FileDefHdr.Version$
	    !
	    tmp$=lcase$(trim$(FieldRec$[1,20])) ! init field varible name
	    if tmp$="" let tmp$="unknown" ! blank field name
	    !
	    ! remove special characters and mask field name
	    call MaskVarible()
        !
	    if FieldMat[0] let tmpcnt=(FieldMat[2]/(FieldMat[0]*2)) else let tmpcnt=1 ! # of fields
	    For cnt2=1 to tmpcnt	  
          if tmpcnt=1
	        call CheckDupName()  ! checks if varname exits
	        tmp$=tmp1$
	      else
	        tmp2$=cnt2 using "###"
	        tmp$=tmp1$,ltrim$(tmp2$)
	      endif  
	      FileDefFields.VarName$=tmp$
	      FileDefFields.Seq=seqcnt*10 
	      FileDefFields.ShortDesc$=Rtrim$(FieldRec$[1,20])
	      FileDefFields.LongDesc$=Rtrim$(FieldRec$[21])
	      !
	      if FieldMat[0] let offset=FieldMat[1]+((cnt2-1)*(Fieldmat[0]*2)) else offset=FieldMat[1] ! calc
	      FileDefFields.Position=offset ! position offset
	      If FieldMat[0]=0
	        FileDefFields.Precision=FieldMat[2] ! field length (string)
	      else
	        FileDefFields.Precision=(FieldMat[0]*-1) ! 1,2,3 or 4% (numeric)
          endif
	      !
	      ! add field definitions record
	      Add Record #c[1];FileDefFields.
          !
	      seqcnt=seqcnt+1
        next cnt2
      next FieldCnt
    close #c[13]
    !
  else
    ;"error";spc(8);" at line ";spc(10)
    stop
  end try
  !
  ! Get next UBS file name
  SearFile:
  search #c[11],3,1;FileKey$,v1,v2 
  if FileKey$[1,8]="CNTRL120" GOTO SearFile ! over 400 fields *************
  if FileKey$[1,8]="COMMGRID" GOTO SearFile ! over 400 fields *************
  if FileKey$[1,8]="EDICNTRL" GOTO SearFile ! over 400 fields *************
!    if FileKey$[1,8]="WHINFO  " GOTO SearFile ! over 400 fields *************
!    if FileKey$[1,8]="CNTRL61 " GOTO SearFile ! blank field name
!    if FileKey$[1,8]="COMMNEW!" GOTO SearFile ! blank field name
!    if FileKey$[1,8]="GL.GLFIN" GOTO SearFile ! blank field name
!    if FileKey$[1,8]="IMINDEX " GOTO SearFile ! blank field name
!    if FileKey$[1,8]="PKGLIST " GOTO SearFile ! blank field name
!    if FileKey$[1,8]="PORFLINE" GOTO SearFile ! blank field name
!    if FileKey$[1,8]="COMMNEW!" GOTO SearFile ! blank field name
!    if FileKey$[1,9]="PSHIPLIST" GOTO SearFile ! blank field name
!    if FileKey$[1,8]="TAXCODE " GOTO SearFile ! blank field name
  loop  
  !
else
  ;"error";spc(8);" at line ";spc(10)
  stop
end try
!
End Sub ! processroutine
!
! ------------------------------------------------
Sub MaskVarible()
Try
  !
  tmp1$="+/#~.,<>;:()?%$!&*^@-='''"
  for tmp=1 to len(tmp1$)
    tmp$=Replace$(tmp$,tmp1$[tmp,tmp]," ")
  next tmp
  !
  ! remove spaces & make 1st char capital
  tmp=1 \ tmp1$=""
  do
    call StringSearch(tmp$,tmp," ",tmp1)
    if tmp1=-1 exit do
    if tmp1>tmp
      tmp$[tmp,tmp]=Ucase$(tmp$[tmp,tmp])	  
      tmp1$=tmp1$,tmp$[tmp,tmp1-1]
    endif
    tmp=tmp1+1
  loop
  tmp$[tmp,tmp]=Ucase$(tmp$[tmp,tmp])
  tmp1$=tmp1$,tmp$[tmp]
  tmp1$=trim$(tmp1$)
  if tmp1$="" let tmp1$="Unknown"
  !
  ! Check for reserved words & 1st character being numeric
  tmp3$=tmp1$
  errflag=0 ! error flag init
  if tmp1$[1,1]>="0" if tmp1$[1,1]<="9" let errflag=1 ! add char, 1st char - numeric
  if ucase$(tmp1$[1,4])="OPEN" if len (tmp1$)=4 let errflag=1
  if Ucase$(tmp1$[1,4])="LINE" if len (tmp1$)=4 let errflag=1
  if ucase$(tmp1$[1,4])="STOP" if len (tmp1$)=4 let errflag=1
  if ucase$(tmp1$[1,6])="RECORD" if len (tmp1$)=6 let errflag=1
  !
  if errflag let tmp1$="s",tmp3$ ! add char, 1st char numeric or word is reserved
  !
  if FieldMat[0]=0 let tmp1$=tmp1$,"$"  
  !
else
  ;"error";spc(8);"at line ";spc(10)
  stop
end try
End Sub ! MaskVarible
!
! ------------------------------------------------
sub CheckDupName()
Try
  !
  dim subkey$[48],subdef$[100],subtmp$[100],subfield$[50]
  dim 1%,subcnt,subflag
  dim 3%,subrec
  !
  subcnt=0 ! counter
  subfield$=tmp1$ ! field name
  !
  SearDXFieldDefs:
  subkey$=FileKey$ ! UBS file def file
  subflag=0 ! no dup found
  subrec=-2
  try search >= #c[1],1;subkey$ else exit sub
  do
    try read record #c[1],subrec;FileDefFieldsTmp. else exit do
    subtmp$=rtrim$(Filekey$)
    if FileDefFieldsTmp.FileName$<>subtmp$ exit do ! file name
    if FileDefFieldsTmp.VarName$=tmp1$ ! original field name
      if subfield$[len(tmp1$)]="$" let subfield$=subfield$[1,len(tmp1$)-1]      
      subcnt=subcnt+1 \ subtmp$=subcnt using "####"
      tmp1$=subfield$,ltrim$(subtmp$)
      if FieldMat[0]=0 let tmp1$=tmp1$,"$"
      subflag=1
      exit do
    endif
    subrec=-1
  loop
  if subflag=1 goto SearDXfieldDefs ! search for new field name for duplicate
else
  ;"error";spc(8);"at line ";spc(10)
  stop
end try
end sub ! CheckDupName
!
! ------------------------------------------------
Sub CloseRoutine()
Try
  close
else
  ;"error";spc(8);" at line ";spc(10)
  stop
end try
End Sub ! closeroutine
!
! ------------------------------------------------
