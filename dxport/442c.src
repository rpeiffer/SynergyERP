! >>> Program 442c
!
! description Product 12 Month
!
! loadsave -w -n 100,10 -o prog/dxport/442c.dl4 src/442c.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 18, 2003  10:33:25
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/mx/mx442c.src (univ2) [jcs] {47970}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX442C - 12 MONTH PRODUCT SALES
Rem AUTHOR: TFH   DEC 29, 1987
Rem LAST UPDATE: RJS 11/19/93 FIX FOR ROLLING MONTHS
!Custom_ Customer$ ------------------------------------------------------------------------------
! 
! Omaha - task12765/cct63647 -add average order size to the report
! ------------------------------------------------------------------------------
! Paper & Chem - ! jliu 2/25/03 cct165195 if the product's commodity code is "TIME", don't    
!    print the product info  
!
External Lib "ubsfunc.dl4"
Declare External Sub UTMonths
!
External Lib "libprod.lib"
Declare External Sub ProdGroup
!
Declare Intrinsic Sub DateToJulian
Declare Intrinsic Sub InpBuf,String
! - Option Default Dialect IRIS1
Com 1%,PFU1[20],CNVTU[2],UN[2],MONTH_[4],MTH[4]
Com 2%
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
Com MTH$[108]
If Err 0 Gosub ERR_TRAP
Window Off 
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
!
dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
dim Blank$[50] \ Blank$=" ",Blank$
dim Parm$[50]\parm$="}",parm$
Dim 1%,N3,N4,N5,N6,BOYMONTH,ARMONTH,J1,CHAN,J8,ACTIVE,PW
dim 1%,l1,3%,l2[5],CH_PW
dim 1%,whseflag,swhse,ewhse,breakflag,3%,T7[40],W3[24]
Dim 2%,X2,N1,N2,R[11],BREAK,B[24],V9[4],I,I1,Q0[1]
Dim 3%,S1[12,2],S2[12,2],Z1[12,2],Z2[12,2],AMOUNT,J,X3,T8[40],T9[40]
Dim 3%,AMU,VALUE,parm[10],whmisc2[7]
Dim A$[156],P9$[50],SELLUNIT$[4],STOCKUNIT$[4],COSTUNIT$[4],Z1$[80]
Dim J$[40],CNAME$[30],N3$[4],N4$[4],J4$[40],ARDATE$[8],PMASK$[15]
Dim K1$[50],K2$[12],N1$[12],N2$[12],BREAK$[6],K9$[30],X$[10]
DIM CURDATE$[6],FIRSTDATE$[6],K8$[50]
dim jcurrdate$[6],jfirstdate$[6]
DIM custom_customer$[30],KPW$[50]
dim f$[16],msg$[100],k6$[14],k5$[14],pw$[12]

!!!! dx add xport reporting code
dim tmp$[5000],tmp1$[500],tmp2$[50]
dim action$[30],options$[30],userid$[8],b$[200],3%,tmp3,fdel$[10],rstr$[5000],bsdel$[10],esdel$[10],rdel$[10]
call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

For J = 2 To 6
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1792","2080","1728","1744", "2512"
CH_PW=5
LET F$="4/PWSALES"+STR$(Intco)  
ROPEN #7,F$  
Mat Read #1,0,100;ARDATE$;
Mat Read #1,19,50;P9$;
Mat Read #1,51,74;BOYMONTH;
Mat Read #1,0,120;ARMONTH;
Mat Read #1,3;CNAME$;
mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(trim$(custom_customer$))
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[3] = Chf(0) 
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
!
MONTH_[1] = 1;MONTH_[2] = 0 \ rem ! - Call "UTMONTHS",MONTH_[],MTH$
Call UTMonths(e$,MONTH_[],MTH$,BOYMONTH) ! set up month headers
!
V9[3] = 55 \ If J8 Let V9[3] = 22
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2
PMASK$ = "###########" \ X = Len(PMASK$) - Q0[1]
PMASK$[X,X] = "."
!

!
if J8 ! dx xml, setup rstr$
 !<section>
 tmp$=bsdel$,"442c",fdel$,rdel$
 call addtostr(e$,rstr$,tmp$)
End if
!
!!!! dx add xport reporting code
call dxget("WHSEFLAG",tmp$) ! starting Warehouse
let whseflag=0
if rtrim$(tmp$)<>"" let whseflag=99
if whseflag<>0
	call dxget("SWHSE",tmp$) ! starting Warehouse
	if rtrim$(tmp$)="" let tmp$="1"
	let tmp3=tmp$
	if tmp3<0 or tmp3>99
		let e$="Invalid Starting Warehouse" \ error 10000
	endif
	let swhse=tmp3
	call dxget("EWHSE",tmp$) ! ending Warehouse
	if rtrim$(tmp$)="" let tmp$="99"
	let tmp3=tmp$
	if tmp3<0 or tmp3>99
		let e$="Invalid Ending Warehouse" \ error 10000
	endif
	let ewhse=tmp3
	call dxget("BREAKFLAG",tmp$) ! starting Warehouse
	let breakflag=0
	if rtrim$(tmp$)<>"" let breakflag=99
else
	let swhse=0
	let ewhse=99
	let breakflag=0
endif
call dxget("N1",N1$) ! starting product
let n1$=UCase$(rtrim$(n1$))+blank$
call dxget("N2",N2$) ! ending product 
let n2$=UCase$(rtrim$(n2$))+parm$
call dxget("N3",N3$) ! starting commodity
let n3$=UCase$(rtrim$(n3$))+blank$
call dxget("N4",N4$) ! ending commodity 
let n4$=UCase$(rtrim$(n4$))+parm$
call dxget("begvendor",tmp$) \ N1=tmp$ ! starting vendor
call dxget("endvendor",tmp$) \ if rtrim$(tmp$)="" let N2=999999 else N2=tmp$ ! ending vendor
call dxget("products",tmp$) \ N3=tmp$ ! status, 1=active 2=inactive 3=all
call dxget("sales",tmp$) \ N4=tmp$ ! 1=units & 2=dollars
if rtrim$(tmp$)="" let n4=1
call dxget("sortby",tmp$) \ N5=tmp$ ! sort by 1=product, 2=commodity, 3=vendor
if rtrim$(tmp$)="" let n5=1
call dxget("analysis",tmp$) \ if rtrim$(tmp$)="" let N6=0 else N6=1 ! include analysis
!!!! dx end
!
!if N2$="" let N2$="}",N2$
if N2$<N1$let e$="Invalid ending product, must be > starting product!" \ error 10000
!
!N3$=N3$,Blank$
!
!if N4$ = "" Let N4$ = "}}}}"
!N4$=N4$,Blank$
if N4$<N3$  let e$="Invalid ending commodity, must be > starting commodity!" \ error 10000
If X9 = 2 Let X9 = 3 ! status
!
if N1<0 or N1>999999  let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
!
if N2<N1 or N2>999999  let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
! - L_1000: Rem "========================================= GET RANGES
! - Gosub L_5400
! - L_1010: Print @58,3;'CL'; \ Input ""N1$ \ If N1$ = "E" Goto OUTEND
! - Print @58,4;'CL'; \ Input ""N2$ \ If N2$ = "E" Goto OUTEND
! - If N2$ = "" Let N2$ = "}}}}}}}}}}}}"
! - If N1$ > N2$ Gosub L_1320 \ Goto L_1010
! - If Len(N2$) < 12 Let N2$[Len(N2$) + 1] = "           "
! - L_1035: Print @58,6;'CL'; \ Input ""N3$ \ If N3$ = "E" Goto OUTEND
! - If Len(N3$) < 4 Let N3$[Len(N3$) + 1] = "    "
! - Print @58,7;'CL'; \ Input ""N4$ \ If N4$ = "E" Goto OUTEND
! - If N4$ = "" Let N4$ = "}}}}"
! - If Len(N4$) < 4 Let N4$[Len(N4$) + 1] = "    "
! - If N3$ > N4$ Gosub L_1320 \ Goto L_1035
! - L_1075: Print @58,9;'CL'; \ Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
! - N1 = Z1$ \ If Not(N1) And Z1$ <> "" Print 'RB' \ Goto L_1075
! - L_1085: Print @58,10;'CL'; \ Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
! - N2 = Z1$ \ If Not(N2) And Z1$ <> "" Print 'RB' \ Goto L_1085
! - If Not(N2) Let N2 = 999999
! - If N1 > N2 Gosub L_1320 \ Goto L_1075
! - L_1105: Print @70,12;'CL'; \ Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ <> "1" And Z1$ <> "2" And Z1$ <> "3" Print 'RB'; \ Goto L_1105
! - N3 = Z1$
! - L_1120: Print @50,13;'CL'; \ Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ <> "1" And Z1$ <> "2" Print 'RB'; \ Goto L_1120
! - N4 = Z1$
! - L_1135: Print @64,15;'CL'; \ Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ <> "1" And Z1$ <> "2" And Z1$ <> "3" Print 'RB'; \ Goto L_1135
! - N5 = Z1$
! - L_1150: Print @28,17;'CL'; \ Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ <> "Y" And Z1$ <> "y" And Z1$ <> "N" And Z1$ <> "n" Print 'RB'; \ Goto L_1150
! - N6 = 0 \ If Z1$ = "Y" Or Z1$ = "y" Let N6 = 1
! - Goto L_1350
! - L_1320: Rem "bad range entered
! - Print @0,22;'RB';"ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE!"; \ Signal 3,30
! - Print @0,22;'CE'; \ Return 
! - L_1350: Rem "================== all picked
! - Print @10,22;'CE';
! - Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ = "R" Goto L_1000
! - If Z1$ <> "P" Goto L_1350
!
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
if whseflag
   gosub whse_sort:
   gosub BrowserHeader:
   gosub prnt_whsesort:
   goto L_9100:
endif
CHAN = 9 \ If N5 = 1 Let CHAN = 2 \ Goto L_1800
! - Print @0,22;'CE';"Clearing sort file...please wait"; \ Signal 3,0
! 
! *** Sort Section
L_1415:
K9$ = " ",K9$
Search #9,3,1;K9$,R[9],E
If E Goto L_1500
Search #9,5,1;K9$,R[9],E
If E Let e$ = "syserrorfile 442c sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
Goto L_1415
L_1500: Rem

! - Print @0,22;'CE';"Sorting...please wait"; \ Signal 3,0
K2$ = N1$
Search #2,2,1;K2$,R[2],E
If Not(E) Goto L_1530
L_1520: Search #2,3,1;K2$,R[2],E
If E Goto L_1800
L_1530: If K2$[1,Len(N2$)] > N2$ Goto L_1800
Mat Read #2,R[2],0;A$;
Mat Read #2,R[2],156;B;
GOSUB GET_PRODWHSE:
IF PARM[2]=0 GOTO L_1520
If A$[152,155] < N3$ Goto L_1520
If A$[152,155] > N4$ Goto L_1520
If B[24] < N1 Goto L_1520
If B[24] > N2 Goto L_1520
K9$ = " ",K9$ \ R[9] = R[2]
If N5 = 2 Let K9$ = A$[152,155];K9$[5] = K2$
If N5 = 3 Let K9$ = B[24] Using "######";K9$[7] = K2$
Search #9,4,1;K9$,R[9],E 
If E Let e$ = "syserrorfile 442c sortfile mode (m)=4 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
Goto L_1520


! *** Process Section
L_1800: Rem "=================================== start print
!
if j8 ! dx xml headings
  if N5=1 ! by product
    tmp$="ITEM #",fdel$
  else 
    if N5=2 let tmp$="COMMODITY" else tmp$="VENDOR"
	tmp$=tmp$,fdel$,"ITEM #",fdel$
  endif
  tmp$=tmp$,"DESCRIPTION",fdel$
  if P9$[26,26]="Y" let tmp$=tmp$,"DESCRIPTION #2",fdel$
  if P9$[40,40]="Y" let tmp$=tmp$,"VENDOR ITEM",fdel$
  If N6 ! include analysis
    tmp$=tmp$,"STOCKING UOM",fdel$,"AVERAGE COST",fdel$,"LEAD TIME",fdel$
    tmp$=tmp$,"QUANTITY ON HAND",fdel$,"VALUE ON HAND",fdel$
	tmp$=tmp$,"AVERAGE MO. USAGE",fdel$,"MONTHS SUPPLY",fdel$
	tmp$=tmp$,"QTY ON PO",fdel$
  End If 
  tmp$=tmp$,"YEAR",fdel$,"U/M",fdel$
  !tmp$=tmp$,"TYPE",fdel$
  For I = 1 To 12
    tmp$=tmp$,MTH$[I * 3 - 2,I * 3],fdel$
  Next I
  tmp$=tmp$,"TOTAL",fdel$
  !if n6<>0 and custom_customer$="OMAHA"
  !	let tmp$=tmp$,"AVG ORD SIZE",fdel$
  ! endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! - Print @0,22;"Printing...please wait";'CE'; \ Signal 3,0
! - If J8 Print 'CS';
BREAK$ = "";BREAK = -1
V9[1] = 90;V9[0] = 0 \ If N6 Let V9[3] = V9[3] - 5
! - If Err 0 Gosub ERR_ESCAPE
K9$ = N1$ \ If N5 > 1 Let K9$ = " ",K9$
if custom_customer$="OMAHA" gosub L_2700:
Search #CHAN,2,1;K9$,R[9],E 
If Not(E) Goto L_2015
L_2000: Rem "========================================== print loop
L_2005: Search #CHAN,3,1;K9$,R[9],E
If E Goto L_9100
L_2015: R[2] = R[9]
Mat Read #2,R[2],0;A$;
Mat Read #2,R[2],156;B;
Mat Read #2,R[2],256;A;
Mat Read #2,R[2],512;PFU1;
Mat Read #2,R[2],554;PFU2;
if custom_customer$="PCS"
	if a$[152,155]="TIME" goto L_2000
Endif
If N5 = 1 ! "sort by product
  If K9$[1,Len(N2$)] > N2$ Goto L_9100
  If A$[152,155] < N3$ Goto L_2000
  If A$[152,155] > N4$ Goto L_2000
  If B[24] < N1 Goto L_2000
  If B[24] > N2 Goto L_2000
End If 
For I = 0 To 12 \ For I1 = 0 To 2 \ S1[I,I1] = 0;S2[I,I1] = 0 \ Next I1 \ Next I
R[3] = R[2]
Mat Read #3,R[3],16;Z1; \ Gosub L_2500
Mat Read #3,R[3],256;Z2; \ Gosub L_2600
If N4 = 2
  For I = 0 To 12 \ For I1 = 0 To 2 \ S1[I,I1] = S2[I,I1] \ Next I1 \ Next I
End If 
if custom_customer$="OMAHA"
	gosub l_2750:
	LET AVGORDER=AVGORDER/6
endif
Gosub L_10000
ACTIVE = 0;T9[0] = 0;T9[20] = 0
For I = 1 To 12
  T9[0] = T9[0] + S1[I,1];T9[20] = T9[20] + S1[I,0]
  ACTIVE = (ACTIVE Or S1[I,0] Or S1[I,1] Or S1[I,2])
Next I
If N3 = 3 Goto L_2135
If N3 = 1 And ACTIVE Goto L_2135
If N3 = 2 And Not(ACTIVE) Goto L_2135
Goto L_2005
L_2135: If N5 = 1 Goto L_2155
If N5 = 2 If BREAK$ <> "" If BREAK$[1,4] <> K9$[1,4] Gosub L_4500
If N5 = 3 If BREAK <> -1 If BREAK <> B[24] Gosub L_4500
BREAK$ = K9$[1,4];BREAK = B[24]
L_2155: Rem
Gosub L_5800
If N6 Gosub L_5200
If N6 Gosub L_6000
Gosub L_5000
Gosub L_2200
Goto L_2000
!
L_2200: Rem "============================================= totals
T9[3] = T9[3] + S1[1,1] \ T9[23] = T9[23] + S1[1,0]
T9[4] = T9[4] + S1[2,1] \ T9[24] = T9[24] + S1[2,0]
T9[5] = T9[5] + S1[3,1] \ T9[25] = T9[25] + S1[3,0]
T9[6] = T9[6] + S1[4,1] \ T9[26] = T9[26] + S1[4,0]
T9[7] = T9[7] + S1[5,1] \ T9[27] = T9[27] + S1[5,0]
T9[8] = T9[8] + S1[6,1] \ T9[28] = T9[28] + S1[6,0]
T9[9] = T9[9] + S1[7,1] \ T9[29] = T9[29] + S1[7,0]
T9[10] = T9[10] + S1[8,1] \ T9[30] = T9[30] + S1[8,0]
T9[11] = T9[11] + S1[9,1] \ T9[31] = T9[31] + S1[9,0]
T9[12] = T9[12] + S1[10,1] \ T9[32] = T9[32] + S1[10,0]
T9[13] = T9[13] + S1[11,1] \ T9[33] = T9[33] + S1[11,0]
T9[14] = T9[14] + S1[12,1] \ T9[34] = T9[34] + S1[12,0]
T9[15] = T9[15] + T9 \ T9[35] = T9[35] + T9[20]
T8[3] = T8[3] + S1[1,1] \ T8[23] = T8[23] + S1[1,0]
T8[4] = T8[4] + S1[2,1] \ T8[24] = T8[24] + S1[2,0]
T8[5] = T8[5] + S1[3,1] \ T8[25] = T8[25] + S1[3,0]
T8[6] = T8[6] + S1[4,1] \ T8[26] = T8[26] + S1[4,0]
T8[7] = T8[7] + S1[5,1] \ T8[27] = T8[27] + S1[5,0]
T8[8] = T8[8] + S1[6,1] \ T8[28] = T8[28] + S1[6,0]
T8[9] = T8[9] + S1[7,1] \ T8[29] = T8[29] + S1[7,0]
T8[10] = T8[10] + S1[8,1] \ T8[30] = T8[30] + S1[8,0]
T8[11] = T8[11] + S1[9,1] \ T8[31] = T8[31] + S1[9,0]
T8[12] = T8[12] + S1[10,1] \ T8[32] = T8[32] + S1[10,0]
T8[13] = T8[13] + S1[11,1] \ T8[33] = T8[33] + S1[11,0]
T8[14] = T8[14] + S1[12,1] \ T8[34] = T8[34] + S1[12,0]
T8[15] = T8[15] + T9 \ T8[35] = T8[35] + T9[20]
! for the warehouse sort
LET T7[3]=T7[3]+S1[1,1] \ LET T7[23]=T7[23]+S1[1,0]                   
LET T7[4]=T7[4]+S1[2,1] \ LET T7[24]=T7[24]+S1[2,0]                   
LET T7[5]=T7[5]+S1[3,1] \ LET T7[25]=T7[25]+S1[3,0]                   
LET T7[6]=T7[6]+S1[4,1] \ LET T7[26]=T7[26]+S1[4,0]                   
LET T7[7]=T7[7]+S1[5,1] \ LET T7[27]=T7[27]+S1[5,0]                   
LET T7[8]=T7[8]+S1[6,1] \ LET T7[28]=T7[28]+S1[6,0]                   
LET T7[9]=T7[9]+S1[7,1] \ LET T7[29]=T7[29]+S1[7,0]                   
LET T7[10]=T7[10]+S1[8,1] \ LET T7[30]=T7[30]+S1[8,0]                 
LET T7[11]=T7[11]+S1[9,1] \ LET T7[31]=T7[31]+S1[9,0]                 
LET T7[12]=T7[12]+S1[10,1] \ LET T7[32]=T7[32]+S1[10,0]               
LET T7[13]=T7[13]+S1[11,1] \ LET T7[33]=T7[33]+S1[11,0]               
LET T7[14]=T7[14]+S1[12,1] \ LET T7[34]=T7[34]+S1[12,0]               
LET T7[15]=T7[15]+T9 \ LET T7[35]=T7[35]+T9[20]  
Return 
!
L_2500: Rem "========================== adjust this year buckets for fiscal year
X7 = BOYMONTH
For I = 0 To 12
  For X6 = 0 To 2
    If I<>0 Let S1[I,X6] = Int(Z1[X7,X6] + .5) Else Let S1[0,X6] = Int(Z1[0,X6] + .5)
  Next X6
  If I<>0 
	if X7 = ARMONTH Let I = 13
	Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
  endif
Next I
Return
!
L_2600: Rem "========================== adjust last year buckets for fiscal year
X7 = BOYMONTH;X8 = 0
For I = 0 To 12
  For X6 = 0 To 2
    If Not(I) Let S2[0,X6] = Int(Z2[0,X6] + .5) \ Goto L_2640
    If Not(X8) Let S2[I,X6] = Int(Z2[X7,X6] + .5) Else Let S2[I,X6] = Int(Z1[X7,X6] + .5)
L_2640: Next X6
  If I<>0
	If X7 = ARMONTH Let X8 = 1
	Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
  endif
Next I
Return 

L_2700: REM  "================get current date to scan back 6 months   
LET CURDATE$=" ",CURDATE$ \ LET X$=" ",X$                              
LET X$=TIM(4) USING "&&&&&&" ! current date mmddyy                                       
LET CURDATE$[1,2]=X$[5,6] \ LET CURDATE$[3,4]=X$[1,2]                  
LET DAY=X$[3,4] \ LET DAY=DAY+1 !\ LET CURDATE$[5,6]=DAY USING "&&"     
LET Month_=CURDATE$[3,4]
if day>31 let day=31 ! last day of the month
if day>30
	if month_=4 let day=30
	if month_=6 let day=30
	if month_=9 let day=30
	if month_=11 let day=30
endif
if day>28 and month_=2 let day=28
LET CURDATE$[5,6]=DAY USING "&&"
LET Year_=CURDATE$[1,2]                       
IF Month_<7 LET Month_=Month_+6 \ LET Year_=Year_-1 \ GOTO L_2724:          
IF Month_>6 LET Month_=Month_-6                                           
L_2724: LET FIRSTDATE$[1,2]=Year_ USING "&&"                            
LET FIRSTDATE$[3,4]=Month_ USING "&&"                                   
LET FIRSTDATE$[5,6]=CURDATE$[5,6]
if day>30
	if month_=4 let day=30
	if month_=6 let day=30
	if month_=9 let day=30
	if month_=11 let day=30
endif
if day>28 and month_=2 let day=28
LET firstDATE$[5,6]=DAY USING "&&"
FOR X=1 TO 6                                                           
IF FIRSTDATE$[X,X]=" " OR FIRSTDATE$[X,X]="" LET FIRSTDATE$[X,X]="0" 
IF CURDATE$[X,X]=" " OR CURDATE$[X,X]="" LET CURDATE$[X,X]="0"       
NEXT X 
! need to convert dates to julian
X2 = firstdate$[1,6] \ Gosub L_7820
If not(x2)
	let x2=0 ! set to 0 for all
endif
jfirstdate$=x2   using "&&&&&"
X2 = curdate$[1,6] \ Gosub L_7820
If not(x2)
	let x2=99999 ! set to 0 for all
endif
jcurrdate$=x2 using "&&&&&"
RETURN                                                                 

L_2750: REM"==========calculate average order size based on last 6 months
! From the inventory transaction file
LET K8$=" ",K8$ \ LET AVGORDER=0                                         
LET K8$[1,12]=A$[140,151]                                                
!LET K8$[13,18]=CURDATE$[1,6]  
let k8$[13,17]=jcurrdate$[1,5]
L_2762: SEARCH #6,6,2;K8$,R[5],E \ IF E=2 RETURN   
If E Let e$ = "syserrorfile 442c sortfile mode (m)=6 keyno (k)=1 r=",R[5]," e=",e," keyval (k8$)=",K8$ \error 10000
!IF E GOSUB ERR_SEARCH:                                                   
IF K8$[1,12]<>A$[140,151] RETURN                                         
!IF K8$[13,18]<FIRSTDATE$[1,6] RETURN  
if k8$[13,17]<jfirstdate$[1,5] return
MAT  READ #6,R[5],56;L1;                                                 
MAT  READ #6,R[5],64;L2;                                                 
IF L1<>16 GOTO L_2762   ! only sales orders                                                 
LET AVGORDER=AVGORDER+L2[2]                                              
GOTO L_2762:                          
!
L_4000: Rem "===================================== grand TOTAL PRINT
if J8 return ! dx xml
!
Gosub L_5800
If V9[1] = 6 Gosub L_6000
Print #0;"\15\GRAND TOTALS ==>"; Tab 27;"UN";
SMARTFLAG = 0
For XX = 23 To 34
  If Abs(T9[XX]) >= 1000000 Or Abs(T9[35]) >= 10000000 Let SMARTFLAG = 1;XX = 34
Next XX
If SMARTFLAG Gosub SMART_TOTUNITS \ Goto END_SMART_TOTUNITS
Print #0; Using "------#"; Tab 33;T9[23];
Print #0; Using "------#"; Tab 40;T9[24];
Print #0; Using "------#"; Tab 47;T9[25];
Print #0; Using "------#"; Tab 54;T9[26];
Print #0; Using "------#"; Tab 61;T9[27];
Print #0; Using "------#"; Tab 68;T9[28];
Print #0; Using "------#"; Tab 75;T9[29];
Print #0; Using "------#"; Tab 82;T9[30];
Print #0; Using "------#"; Tab 89;T9[31];
Print #0; Using "------#"; Tab 96;T9[32];
Print #0; Using "------#"; Tab 103;T9[33];
Print #0; Using "------#"; Tab 110;T9[34];
Print #0; Using "-------#"; Tab 117;T9[35];
END_SMART_TOTUNITS: Rem
Print #0;" " \ V9[1] = V9[1] + 2
Print #0; Tab 28;"$";
SMARTFLAG = 0
For XX = 3 To 14
  If Abs(T9[XX]) >= 1000000 Or Abs(T9[15]) >= 10000000 Let SMARTFLAG = 1;XX = 14
Next XX
If SMARTFLAG Gosub SMART_TOTSALES \ Goto END_SMART_TOTSALES
Print #0; Using "------#"; Tab 33;T9[3];
Print #0; Using "------#"; Tab 40;T9[4];
Print #0; Using "------#"; Tab 47;T9[5];
Print #0; Using "------#"; Tab 54;T9[6];
Print #0; Using "------#"; Tab 61;T9[7];
Print #0; Using "------#"; Tab 68;T9[8];
Print #0; Using "------#"; Tab 75;T9[9];
Print #0; Using "------#"; Tab 82;T9[10];
Print #0; Using "------#"; Tab 89;T9[11];
Print #0; Using "------#"; Tab 96;T9[12];
Print #0; Using "------#"; Tab 103;T9[13];
Print #0; Using "------#"; Tab 110;T9[14];
Print #0; Using "-------#"; Tab 117;T9[15];
END_SMART_TOTSALES: Rem
Print #0;" " \ V9[1] = V9[1] + 1
Return 
!
SMART_TOTUNITS: Rem ========================================
Print #0; Using "--------#"; Tab 31;T9[23];
Print #0; Using "--------#"; Tab 45;T9[25];
Print #0; Using "--------#"; Tab 59;T9[27];
Print #0; Using "--------#"; Tab 73;T9[29];
Print #0; Using "--------#"; Tab 87;T9[31];
Print #0; Using "--------#"; Tab 101;T9[33];
Print #0; Using "---------#"; Tab 115;T9[35];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Using "--------#"; Tab 38;T9[24];
Print #0; Using "--------#"; Tab 52;T9[26];
Print #0; Using "--------#"; Tab 66;T9[28];
Print #0; Using "--------#"; Tab 80;T9[30];
Print #0; Using "--------#"; Tab 94;T9[32];
Print #0; Using "--------#"; Tab 108;T9[34];
Return 
!
SMART_TOTSALES: Rem ========================================
Print #0; Using "--------#"; Tab 31;T9[3];
Print #0; Using "--------#"; Tab 45;T9[5];
Print #0; Using "--------#"; Tab 59;T9[7];
Print #0; Using "--------#"; Tab 73;T9[9];
Print #0; Using "--------#"; Tab 87;T9[11];
Print #0; Using "--------#"; Tab 101;T9[13];
Print #0; Using "---------#"; Tab 115;T9[15];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Using "--------#"; Tab 38;T9[4];
Print #0; Using "--------#"; Tab 52;T9[6];
Print #0; Using "--------#"; Tab 66;T9[8];
Print #0; Using "--------#"; Tab 80;T9[10];
Print #0; Using "--------#"; Tab 94;T9[12];
Print #0; Using "--------#"; Tab 108;T9[14];
Return

whse_total: !=======
GOSUB L_5800: ! "headings                                                     
IF V9[1]=6 GOSUB L_6000: ! "monthly sales array heading, if new page only     
print #0;"WAREHOUSE ";break$[1,2];
PRINT #0;" TOTALS ==>"; TAB 27;"UN";                                          
Let SmartFlag=0                                                               
For XX=23 to 34                                                               
	If ABS(T7[XX])>=1000000 or ABS(T7[35])>=10000000  Let SmartFlag=1;XX=34 
Next XX
If SmartFlag  GoSub Smart_whseUnits: \ Goto End_Smart_whseUnits:  
PRINT #0; USING "------#"; TAB 33;T7[23];                       
PRINT #0; USING "------#"; TAB 40;T7[24];                       
PRINT #0; USING "------#"; TAB 47;T7[25];                       
PRINT #0; USING "------#"; TAB 54;T7[26];                       
PRINT #0; USING "------#"; TAB 61;T7[27];                       
PRINT #0; USING "------#"; TAB 68;T7[28];         
PRINT #0; USING "------#"; TAB 75;T7[29];         
PRINT #0; USING "------#"; TAB 82;T7[30];         
PRINT #0; USING "------#"; TAB 89;T7[31];         
PRINT #0; USING "------#"; TAB 96;T7[32];         
PRINT #0; USING "------#"; TAB 103;T7[33];        
PRINT #0; USING "------#"; TAB 110;T7[34];        
PRINT #0; USING "-------#"; TAB 117;T7[35];       
End_Smart_whseUnits: rem                           
PRINT #0;" " \ LET V9[1]=V9[1]+1                  
PRINT #0; TAB 28;"$";                             
Let SmartFlag=0  
For XX=3 to 14                                                                  
	If ABS(T7[XX])>=1000000 or ABS(T7[15])>=10000000  Let SmartFlag=1;XX=14     
Next XX 
If SmartFlag  GoSub Smart_whseSales: \ Goto End_Smart_whseSales:                
PRINT #0; USING "------#"; TAB 33;T7[3];                                        
PRINT #0; USING "------#"; TAB 40;T7[4];                                        
PRINT #0; USING "------#"; TAB 47;T7[5];                                        
PRINT #0; USING "------#"; TAB 54;T7[6];                                        
PRINT #0; USING "------#"; TAB 61;T7[7];                                        
PRINT #0; USING "------#"; TAB 68;T7[8];                                        
PRINT #0; USING "------#"; TAB 75;T7[9];                                        
PRINT #0; USING "------#"; TAB 82;T7[10];                                       
PRINT #0; USING "------#"; TAB 89;T7[11];                                       
PRINT #0; USING "------#"; TAB 96;T7[12];                                       
PRINT #0; USING "------#"; TAB 103;T7[13];                                      
PRINT #0; USING "------#"; TAB 110;T7[14];                                      
PRINT #0; USING "-------#"; TAB 117;T7[15];                                     
End_Smart_WhseSales: rem              
PRINT #0;" " \ PRINT #0;" " \ LET V9[1]=V9[1]+2         
FOR I=0 TO 40 \ LET T7[I]=0 \ NEXT I                    
return

!
L_4500: Rem "=============================================== sort break
if J8 return ! dx xml
!
Gosub L_5800
If V9[1] = 6 Gosub L_6000
IF N5=2 
   PRINT #0;"COMMODITY ";
   if whseflag<>0
		print #0;break$[3,6];
	else
		print #0;BREAK$;
	endif
endif
If N5 = 3 Print #0; Using "######";"VENDOR ";BREAK;
Print #0;" TOTALS ==>"; Tab 27;"UN";
SMARTFLAG = 0
For XX = 23 To 34
  If Abs(T8[XX]) >= 1000000 Or Abs(T8[35]) >= 10000000 Let SMARTFLAG = 1;XX = 34
Next XX
If SMARTFLAG Gosub SMART_SUBUNITS \ Goto END_SMART_SUBUNITS
Print #0; Using "------#"; Tab 33;T8[23];
Print #0; Using "------#"; Tab 40;T8[24];
Print #0; Using "------#"; Tab 47;T8[25];
Print #0; Using "------#"; Tab 54;T8[26];
Print #0; Using "------#"; Tab 61;T8[27];
Print #0; Using "------#"; Tab 68;T8[28];
Print #0; Using "------#"; Tab 75;T8[29];
Print #0; Using "------#"; Tab 82;T8[30];
Print #0; Using "------#"; Tab 89;T8[31];
Print #0; Using "------#"; Tab 96;T8[32];
Print #0; Using "------#"; Tab 103;T8[33];
Print #0; Using "------#"; Tab 110;T8[34];
Print #0; Using "-------#"; Tab 117;T8[35];
END_SMART_SUBUNITS: Rem
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Tab 28;"$";
SMARTFLAG = 0
For XX = 3 To 14
  If Abs(T8[XX]) >= 1000000 Or Abs(T8[15]) >= 10000000 Let SMARTFLAG = 1;XX = 14
Next XX
If SMARTFLAG Gosub SMART_SUBSALES \ Goto END_SMART_SUBSALES
Print #0; Using "------#"; Tab 33;T8[3];
Print #0; Using "------#"; Tab 40;T8[4];
Print #0; Using "------#"; Tab 47;T8[5];
Print #0; Using "------#"; Tab 54;T8[6];
Print #0; Using "------#"; Tab 61;T8[7];
Print #0; Using "------#"; Tab 68;T8[8];
Print #0; Using "------#"; Tab 75;T8[9];
Print #0; Using "------#"; Tab 82;T8[10];
Print #0; Using "------#"; Tab 89;T8[11];
Print #0; Using "------#"; Tab 96;T8[12];
Print #0; Using "------#"; Tab 103;T8[13];
Print #0; Using "------#"; Tab 110;T8[14];
Print #0; Using "-------#"; Tab 117;T8[15];
END_SMART_SUBSALES: Rem
Print #0;" " \ Print #0;" " \ V9[1] = V9[1] + 2
For I = 0 To 40 \ T8[I] = 0 \ Next I
Return 

Smart_whseUnits: rem ================================       
PRINT #0; USING "--------#"; TAB 31;T7[23];                
PRINT #0; USING "--------#"; TAB 45;T7[25];                
PRINT #0; USING "--------#"; TAB 59;T7[27];                
PRINT #0; USING "--------#"; TAB 73;T7[29];                
PRINT #0; USING "--------#"; TAB 87;T7[31];                
PRINT #0; USING "--------#"; TAB 101;T7[33];               
PRINT #0; USING "---------#"; TAB 115;T7[35];              
PRINT #0;" " \ LET V9[1]=V9[1]+1                           
PRINT #0; USING "--------#"; TAB 38;T7[24];                
PRINT #0; USING "--------#"; TAB 52;T7[26];                
PRINT #0; USING "--------#"; TAB 66;T7[28];                
PRINT #0; USING "--------#"; TAB 80;T7[30];                
PRINT #0; USING "--------#"; TAB 94;T7[32];                
PRINT #0; USING "--------#"; TAB 108;T7[34];               
Return                                 
!
SMART_SUBUNITS: Rem ================================
Print #0; Using "--------#"; Tab 31;T8[23];
Print #0; Using "--------#"; Tab 45;T8[25];
Print #0; Using "--------#"; Tab 59;T8[27];
Print #0; Using "--------#"; Tab 73;T8[29];
Print #0; Using "--------#"; Tab 87;T8[31];
Print #0; Using "--------#"; Tab 101;T8[33];
Print #0; Using "---------#"; Tab 115;T8[35];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Using "--------#"; Tab 38;T8[24];
Print #0; Using "--------#"; Tab 52;T8[26];
Print #0; Using "--------#"; Tab 66;T8[28];
Print #0; Using "--------#"; Tab 80;T8[30];
Print #0; Using "--------#"; Tab 94;T8[32];
Print #0; Using "--------#"; Tab 108;T8[34];
Return 
!
SMART_SUBSALES: Rem ================================
Print #0; Using "--------#"; Tab 31;T8[3];
Print #0; Using "--------#"; Tab 45;T8[5];
Print #0; Using "--------#"; Tab 59;T8[7];
Print #0; Using "--------#"; Tab 73;T8[9];
Print #0; Using "--------#"; Tab 87;T8[11];
Print #0; Using "--------#"; Tab 101;T8[13];
Print #0; Using "---------#"; Tab 115;T8[15];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Using "--------#"; Tab 38;T8[4];
Print #0; Using "--------#"; Tab 52;T8[6];
Print #0; Using "--------#"; Tab 66;T8[8];
Print #0; Using "--------#"; Tab 80;T8[10];
Print #0; Using "--------#"; Tab 94;T8[12];
Print #0; Using "--------#"; Tab 108;T8[14];
Return

Smart_whseSales: rem ================================         
PRINT #0; USING "--------#"; TAB 31;T7[3];                   
PRINT #0; USING "--------#"; TAB 45;T7[5];                   
PRINT #0; USING "--------#"; TAB 59;T7[7];                   
PRINT #0; USING "--------#"; TAB 73;T7[9];                   
PRINT #0; USING "--------#"; TAB 87;T7[11];                  
PRINT #0; USING "--------#"; TAB 101;T7[13];                 
PRINT #0; USING "---------#"; TAB 115;T7[15];                
PRINT #0;" " \ LET V9[1]=V9[1]+1                             
PRINT #0; USING "--------#"; TAB 38;T7[4];                   
PRINT #0; USING "--------#"; TAB 52;T7[6];                   
PRINT #0; USING "--------#"; TAB 66;T7[8];                   
PRINT #0; USING "--------#"; TAB 80;T7[10];                  
PRINT #0; USING "--------#"; TAB 94;T7[12];                  
PRINT #0; USING "--------#"; TAB 108;T7[14];                 
Return    
!
L_5000: Rem "============================================ PRINT SALES LINE
if J8
  if N5=1 ! by product
    tmp1$=A$[140,151],fdel$
  else 
    if N5=2 let tmp1$=BREAK$ else tmp1$=BREAK using "######"
	tmp1$=tmp1$,fdel$,A$[140,151],fdel$
  endif
  if N4 =1 let tmp2$="THIS YEAR" else tmp2$="LAST YEAR"
  !
  ! units
  tmp$=tmp1$,rtrim$(A$[9,38]),fdel$
  if P9$[26,26]="Y" let tmp$=tmp$,rtrim$(A$[63,92]),fdel$
  if P9$[40,40]="Y" let tmp$=tmp$,rtrim$(A$[93,112]),fdel$
  If N6 ! include analysis
    tmp$=tmp$,STOCKUNIT$,fdel$ ! stock u/m
    tmp$=tmp$,B[21] Using PMASK$,"/",COSTUNIT$,fdel$ ! avg cost
    tmp$=tmp$,B[0] Using "###",fdel$ ! lead time
    tmp$=tmp$,A[0] Using "--------#.##",fdel$ ! quantity on hand 
    tmp$=tmp$,VALUE Using "-$$$$$#.##",fdel$ ! value on hand
    tmp$=tmp$,AMU Using "------#.##",fdel$ ! avg mth usage
    If AMU let tmp3=FNR(FNR(A[0]) / AMU) else tmp3=0 	
	tmp$=tmp$,tmp3,fdel$ ! months supply
	tmp$=tmp$,A[2] Using "--------#.##",fdel$ ! quantity on po
  End If 
  tmp$=tmp$,tmp2$,fdel$,SELLUNIT$,fdel$
  For cnt = 1 To 12
    tmp$=tmp$,S1[cnt,0] Using "------#",fdel$
  Next cnt
  tmp$=tmp$,T9[20] Using "-------#",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
  ! dollars
  tmp$=tmp1$,rtrim$(A$[9,38]),fdel$
  if P9$[26,26]="Y" let tmp$=tmp$,rtrim$(A$[63,92]),fdel$
  if P9$[40,40]="Y" let tmp$=tmp$,rtrim$(A$[93,112]),fdel$
  If N6 ! include analysis
    tmp$=tmp$,STOCKUNIT$,fdel$ ! stock u/m
    tmp$=tmp$,B[21] Using PMASK$,"/",COSTUNIT$,fdel$ ! avg cost
    tmp$=tmp$,B[0] Using "###",fdel$ ! lead time
    tmp$=tmp$,A[0] Using "--------#.##",fdel$ ! quantity on hand 
    tmp$=tmp$,VALUE Using "-$$$$$#.##",fdel$ ! value on hand
    tmp$=tmp$,AMU Using "------#.##",fdel$ ! avg mth usage
    If AMU let tmp3=FNR(FNR(A[0]) / AMU) else tmp3=0 	
	tmp$=tmp$,tmp3,fdel$ ! months supply
	tmp$=tmp$,A[2] Using "--------#.##",fdel$ ! quantity on po

  End If 
  tmp$=tmp$,tmp2$,"  $ ",fdel$,SELLUNIT$,fdel$
  For cnt = 1 To 12
    tmp$=tmp$,S1[cnt,1] Using "------#",fdel$
  Next cnt
  tmp$=tmp$,T9[0] Using "-------#",fdel$
  !if n6<>0 and custom_customer$="OMAHA"
  !	let tmp$=tmp$,AVGORDER USING "------#.##",fdel$
  ! endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
endif
!
If Not(N6) Print #0; Tab 0;A$[140,151];
Print #0; Tab 27;SELLUNIT$;
SMARTFLAG = 0
For XX = 1 To 12
  If Abs(S1[XX,0]) >= 1000000 Or Abs(T9[20]) >= 10000000 Let SMARTFLAG = 1;XX = 12
Next XX
If SMARTFLAG Gosub PRINT_SMART_UNITS \ Goto END_PRINT_SMART_UNITS
Print #0; Using "------#"; Tab 33;S1[1,0];
Print #0; Using "------#"; Tab 40;S1[2,0];
Print #0; Using "------#"; Tab 47;S1[3,0];
Print #0; Using "------#"; Tab 54;S1[4,0];
Print #0; Using "------#"; Tab 61;S1[5,0];
Print #0; Using "------#"; Tab 68;S1[6,0];
Print #0; Using "------#"; Tab 75;S1[7,0];
Print #0; Using "------#"; Tab 82;S1[8,0];
Print #0; Using "------#"; Tab 89;S1[9,0];
Print #0; Using "------#"; Tab 96;S1[10,0];
Print #0; Using "------#"; Tab 103;S1[11,0];
Print #0; Using "------#"; Tab 110;S1[12,0];
Print #0; Using "-------#"; Tab 117;T9[20];
END_PRINT_SMART_UNITS: Rem
Print #0;" " \ V9[1] = V9[1] + 1
If Not(N6) Print #0;A$[9,36];
Print #0; Tab 28;"$";
SMARTFLAG = 0
For XX = 1 To 12
  If Abs(S1[XX,1]) >= 1000000 Or Abs(T9[0]) >= 10000000 Let SMARTFLAG = 1;XX = 12
Next XX
If SMARTFLAG Gosub PRINT_SMART_SALES \ Goto END_PRINT_SMART_SALES
Print #0; Using "------#"; Tab 33;S1[1,1];
Print #0; Using "------#"; Tab 40;S1[2,1];
Print #0; Using "------#"; Tab 47;S1[3,1];
Print #0; Using "------#"; Tab 54;S1[4,1];
Print #0; Using "------#"; Tab 61;S1[5,1];
Print #0; Using "------#"; Tab 68;S1[6,1];
Print #0; Using "------#"; Tab 75;S1[7,1];
Print #0; Using "------#"; Tab 82;S1[8,1];
Print #0; Using "------#"; Tab 89;S1[9,1];
Print #0; Using "------#"; Tab 96;S1[10,1];
Print #0; Using "------#"; Tab 103;S1[11,1];
Print #0; Using "------#"; Tab 110;S1[12,1];
Print #0; Using "-------#"; Tab 117;T9[0];
END_PRINT_SMART_SALES: Rem
Print #0;" " \ V9[1] = V9[1] + 1
If N6 Goto L_5160
If P9$[26,26] = "Y" If A$[63,63] <> " " Print #0;A$[63,92] \ V9[1] = V9[1] + 1
If P9$[40,40] = "Y" If A$[93,93] <> " " Print #0;A$[93,112] \ V9[1] = V9[1] + 1
L_5160: Print #0;" " \ V9[1] = V9[1] + 1
If N6 Print #0;" " \ V9[1] = V9[1] + 1
Return 
!
PRINT_SMART_UNITS: Rem ============================================
Print #0; Using "--------#"; Tab 31;S1[1,0];
Print #0; Using "--------#"; Tab 45;S1[3,0];
Print #0; Using "--------#"; Tab 59;S1[5,0];
Print #0; Using "--------#"; Tab 73;S1[7,0];
Print #0; Using "--------#"; Tab 87;S1[9,0];
Print #0; Using "--------#"; Tab 101;S1[11,0];
Print #0; Using "---------#"; Tab 115;T9[20];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Using "--------#"; Tab 38;S1[2,0];
Print #0; Using "--------#"; Tab 52;S1[4,0];
Print #0; Using "--------#"; Tab 66;S1[6,0];
Print #0; Using "--------#"; Tab 80;S1[8,0];
Print #0; Using "--------#"; Tab 94;S1[10,0];
Print #0; Using "--------#"; Tab 108;S1[12,0];
Return 
!
PRINT_SMART_SALES: Rem ============================================
Print #0; Using "--------#"; Tab 31;S1[1,1];
Print #0; Using "--------#"; Tab 45;S1[3,1];
Print #0; Using "--------#"; Tab 59;S1[5,1];
Print #0; Using "--------#"; Tab 73;S1[7,1];
Print #0; Using "--------#"; Tab 87;S1[9,1];
Print #0; Using "--------#"; Tab 101;S1[11,1];
Print #0; Using "---------#"; Tab 115;T9[0];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Using "--------#"; Tab 38;S1[2,1];
Print #0; Using "--------#"; Tab 52;S1[4,1];
Print #0; Using "--------#"; Tab 66;S1[6,1];
Print #0; Using "--------#"; Tab 80;S1[8,1];
Print #0; Using "--------#"; Tab 94;S1[10,1];
Print #0; Using "--------#"; Tab 108;S1[12,1];
Return 
!
L_5200: Rem "============================================ anal data LINE
if J8 return ! dx xml
!
Print #0; Tab 0;A$[140,151];
if custom_customer$="OMAHA"
	PRINT #0; TAB 33;STOCKUNIT$;
	PRINT #0; USING PMASK$; TAB 40;B[21];"/";COSTUNIT$; ! "avg cost
	PRINT #0; USING "###"; TAB 58;B[0]; ! "lead time
	PRINT #0; USING "--------#.##"; TAB 62;FNR(A[0]); ! "qty on hand
	PRINT #0; USING "-$$$$$#.##"; TAB 75;VALUE;
	PRINT #0; USING "------#.##"; TAB 88;AMU; ! "avg monthly usage
	IF AMU PRINT #0; USING "--#.##"; TAB 101;FNR(FNR(A[0])/AMU); !"months supply
	PRINT #0; USING "--------#.##"; TAB 108;FNR(A[2]); ! "qty on po
	PRINT #0; USING "------#.##";TAB 121;AVGORDER;	
else
	Print #0; Tab 35;STOCKUNIT$;
	Print #0; Using PMASK$; Tab 42;B[21];"/";COSTUNIT$;
	Print #0; Using "###"; Tab 60;B[0];
	Print #0; Using "--------#.##"; Tab 64;FNR(A[0]);
	Print #0; Using "-$$$$$#.##"; Tab 78;VALUE;
	Print #0; Using "------#.##"; Tab 93;AMU;
	If AMU Print #0; Using "--#.##"; Tab 106;FNR(FNR(A[0]) / AMU);
	Print #0; Using "--------#.##"; Tab 115;FNR(A[2]);
endif
Print #0;" " \ V9[1] = V9[1] + 1
Print #0;A$[9,36] \ V9[1] = V9[1] + 1
If P9$[26,26] = "Y" If A$[63,63] <> " " Print #0;A$[63,92] \ V9[1] = V9[1] + 1
If P9$[40,40] = "Y" If A$[93,93] <> " " Print #0;A$[93,112] \ V9[1] = V9[1] + 1
Return 
!
! - L_5400: Rem "========================================== display screen
! - Print 'CS';@0,0;"MX442C";@25,0;"PRODUCT SALES 12 MONTH VERSION"
! - Print 'ED BD';@0,3;"ENTER STARTING PRODUCT, <CR> FOR FIRST, OR   E: TO EXIT:"
! - Print @6,4;"ENDING   PRODUCT, <CR> FOR LAST,  OR   E: TO EXIT:"
! - Print @0,6;"ENTER STARTING COMMODITY, <CR> FOR FIRST, OR   E: TO EXIT:"
! - Print @6,7;"ENDING   COMMODITY, <CR> FOR LAST,  OR   E: TO EXIT:"
! - Print @0,9;"ENTER STARTING VENDOR, <CR> FOR FIRST, OR   E: TO EXIT:"
! - Print @6,10;"ENDING   VENDOR, <CR> FOR LAST,  OR   E: TO EXIT:"
! - Print @0,12;"CHOOSE:  1: ACTIVE PRODUCTS,  2: INACTIVE PRODUCTS,  3: ALL PRODUCTS:"
! - Print @0,13;"CHOOSE:  1: THIS YEAR SALES,  2: LAST YEAR SALES:"
! - Print @0,15;"SORT BY:  1: PRODUCT CODE,  2: COMMODITY CODE,  3: VENDOR CODE:"
! - Print @0,17;"INCLUDE ANALYSIS DATA? (Y/N)"
! - Print 'ED'; \ Return 
!
BrowserHeader: Rem "===================================== HEADINGS ROUTINE
if J8 
	select case n5
		case 2
			tmp$="COMMODITY",fdel$,"ITEM CODE",fdel$
		case 3
			tmp$="VENDOR",fdel$,"ITEM CODE",fdel$
	case else
		tmp$="ITEM CODE",fdel$
	end select
	tmp$=tmp$,"DESCRIPTION 1",fdel$,"DESCRIPTION 2",fdel$
	If P9$[40,40] = "Y" tmp$=tmp$,"VEND ITEM #",fdel$
	tmp$=tmp$,"YEAR",fdel$,"U/M",fdel$
	If Not(N6) ! "no anal data wanted
		For I = 1 To 12
			tmp$=tmp$,MTH$[I * 3 - 2,I * 3],fdel$
		Next I
		tmp$=tmp$,"TOTAL",fdel$
	  !Gosub L_6000
	else
	!	if custom_customer$="OMAHA"
	!		tmp$=tmp$,"STOCKING",fdel$,"AVERAGE",fdel$,"LEAD"
	!		tmp$=tmp$,"QUANTITY",fdel$,"VALUE",fdel$,"AVERAGE" !"adjusted 
	!		tmp$=tmp$,"MONTHS",fdel$,"QTY",fdel$,"AVERAGE"  !"all tabs 
	!	else
	!		tmp$=tmp$,"STOCKING",fdel$,"AVERAGE",fdel$,"LEAD"
	!		tmp$=tmp$,"QUANTITY",fdel$,"VALUE",fdel$,"AVERAGE"
	!		tmp$=tmp$,"MONTHS",fdel$,"QTY"
	!	endif
		if custom_customer$="OMAHA"
			tmp$=tmp$,"UOM",fdel$,"COST",fdel$,"TIME"
			tmp$=tmp$,"ON HAND",fdel$,"ON HAND",fdel$,"MO. USAGE"
			tmp$=tmp$,"SUPPLY",fdel$,"ON PO",fdel$,"ORD SIZE"
		else
			tmp$=tmp$,"UOM",fdel$,"COST",fdel$,"TIME"
			tmp$=tmp$,"ON HAND",fdel$,"ON HAND",fdel$,"MO. USAGE"
			tmp$=tmp$,"SUPPLY",fdel$,"ON PO"
		endif
	endif
	call addtostr(e$,rstr$,tmp$+rdel$)
    return ! dx xml
endif
return

L_5800: Rem "===================================== HEADINGS ROUTINE
if j8 then return
!
If V9[1] < V9[3] Return 
! - If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J8) Print #0;"\14\";
V9[0] = V9[0] + 1
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";V9[0]
Print #0;" - 442C - ";Msc$(3);
Print #0; Tab 41;"PRODUCT 12 MONTH SALES REPORT";
If N4 = 1 Print #0;" - THIS YEAR";
If N4 = 2 Print #0;" - LAST YEAR";
If N5 = 1 Print #0;" BY PRODUCT" Else If N5 = 2 Print #0;" BY COMMODITY" Else Print #0;" BY VENDOR";
if whseflag<>0 and breakflag<>0
	print #0; "  FOR WHSE ";break$[1,2];
endif
PRINT #0;""
Print #0;" "
Print #0; Tab 1;"ITEM CODE";
If Not(N6) ! "no anal data wanted
  Gosub L_6000
Else 
	if custom_customer$="OMAHA"
	  PRINT #0; TAB 31;"STOCKING"; TAB 44;"AVERAGE"; TAB 57;"LEAD";	 !"cct63467
	  PRINT #0; TAB 66;"QUANTITY"; TAB 80;"VALUE"; TAB 89;"AVERAGE"; !"adjusted 
	  PRINT #0; TAB 101;"MONTHS"; TAB 115;"QTY"; TAB 123;"AVERAGE"  !"all tabs 
	else
		Print #0; Tab 33;"STOCKING"; Tab 46;"AVERAGE"; Tab 60;"LEAD";
		Print #0; Tab 66;"QUANTITY"; Tab 79;"VALUE"; Tab 92;"AVERAGE";
		Print #0; Tab 106;"MONTHS"; Tab 118;"QTY"
	endif
End If 
Print #0; Tab 1;"DESCRIPTION";
If P9$[40,40] = "Y" Print #0;"/VEND ITEM #";
if n6<>0
	if custom_customer$="OMAHA"
		PRINT #0; TAB 33;"UOM"; TAB 44;"COST"; TAB 57;"TIME";
		PRINT #0; TAB 66;"ON HAND"; TAB 78;"ON HAND"; TAB 89;"MO. USAGE";
		PRINT #0; TAB 101;"SUPPLY"; TAB 114;"ON PO"; TAB 123;"ORD SIZE";
	else
		Print #0; Tab 35;"UOM"; Tab 47;"COST"; Tab 60;"TIME";
		Print #0; Tab 66;"ON HAND"; Tab 79;"ON HAND"; Tab 92;"MO. USAGE";
		Print #0; Tab 106;"SUPPLY"; Tab 118;"ON PO";
	endif
endif
Print #0;" " \ Print #0;" "
V9[1] = 6
Return 
!
L_6000: Rem "================================= monthly sales heading line
if J8 return ! dx xml
!
Print #0; Tab 36;
For I = 1 To 12
  Print #0;MTH$[I * 3 - 2,I * 3];"    ";
Next I
Print #0; Tab 120;"TOTAL";
Print #0;" " \ V9[1] = V9[1] + 1
Return 

L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) 
If E<>0
	let x2=0
	Return
endif
X2 = X$[1,5]
Return
!
GET_PRODWHSE: REM LOOK UP PROD GROUP    
LET Kpw$=" ",Kpw$                         
LET WHSE=1                              
LET PARM[2]=1                           
CHK_WHSE: REM                           
IF WHSE>99 RETURN                       
LET Kpw$[1,12]=A$[140,151]               
LET Kpw$[13,14]=WHSE USING "##"          
SEARCH #ch_pw,2,1;Kpw$,Rec_pw,E                  
IF E                                    
  LET WHSE=WHSE+1                       
  GOTO CHK_WHSE:                        
ENDIF                                   
MAT  READ #ch_pw,Rec_pw,846;WHMISC2;            
CHK_PRODGRP: REM                        
LET PARM[0]=0                           
LET PARM[1]=WHMISC2[0]                  
Call ProdGroup(e$,intco,Parm[])
RETURN    

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem "======================================= EXIT ROUTINE
! dx close
if j8 !dx xml
 call addtostr(e$,rstr$,esdel$) !end section
 !!!!!!print rstr$
 call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
end if
!
try call dxclose() else rem
end
! - Print 'CS'
! - Close #2,#3,#4
! - Chain "MX442"
! - Stop 
!
L_9100: Rem "==================================== END OF THIS RANGE
If N5 > 1 Gosub L_4500
if whseflag gosub whse_total:    !"last whse break
Gosub L_4000
! - If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
If Not(J8) Print #0;"\14\"
Goto OUTEND
!
L_10000: Rem "======================= converts and calcs
SELLUNIT$ = "ERR ";STOCKUNIT$ = "ERR ";COSTUNIT$ = "ERR "
R[4] = PFU1[9] \ If R[4]>0 Mat Read #4,R[4],10;SELLUNIT$;
If PFU1[9] = -1 Let SELLUNIT$ = "CWT "
If PFU1[9] = -3 Let SELLUNIT$ = "LB  "
R[4] = PFU1[8] \ If R[4]>0 Mat Read #4,R[4],10;STOCKUNIT$;
If PFU1[8] = -1 Let STOCKUNIT$ = "CWT "
If PFU1[8] = -3 Let STOCKUNIT$ = "LB  "
R[4] = PFU1[11] \ If R[4]>0 Mat Read #4,R[4],10;COSTUNIT$;
If PFU1[11] = -1 Let COSTUNIT$ = "CWT "
If PFU1[11] = -3 Let COSTUNIT$ = "LB  "
AMU = 0
For I = 1 To 12
  If I <> ARMONTH Or N4 = 2 !  don't include current month for curent year
    CNVTU[0] = 0;CNVTU[1] = PFU1[8];CNVTU[2] = 1;CNVTA = S1[I,0]
    Gosub L_20000 \ AMU = AMU + AMOUNT
  End If 
  CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = S1[I,0]
  Gosub L_20000 \ S1[I,0] = AMOUNT
Next I
I = ARMONTH - BOYMONTH \ If I < 0 Let I = I + 12
If N4 = 2 Let I = 12
If I
  AMU = FNR(AMU / I)
Else 
  AMU = 0
End If
IF WHSEFLAG
   LET CNVTU[0]=0;CNVTU[1]=PFU1[11];CNVTU[2]=2;CNVTA=w3[15]                
   GOSUB L_20000: \ LET B[21]=AMOUNT ! "avg cost                          
   LET CNVTU[0]=0;CNVTU[2]=PFU1[11];CNVTU[2]=1;CNVTA=w3[0]                 
   GOSUB L_20000: \ LET VALUE=FNR(B[21]*AMOUNT) ! "qty to cost units      
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=w3[0]                  
   GOSUB L_20000: \ LET A[0]=AMOUNT ! "qty on hand                        
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=w3[1]                  
   GOSUB L_20000: \ LET A[2]=AMOUNT ! "qty on po                          
ELSE
   LET CNVTU[0]=0;CNVTU[1]=PFU1[11];CNVTU[2]=2;CNVTA=B[21]
   GOSUB L_20000: \ LET B[21]=AMOUNT ! "avg cost
   LET CNVTU[0]=0;CNVTU[2]=PFU1[11];CNVTU[2]=1;CNVTA=A[0]
   GOSUB L_20000: \ LET VALUE=FNR(B[21]*AMOUNT) ! "qty to cost units
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=A[0]
   GOSUB L_20000: \ LET A[0]=AMOUNT ! "qty on hand
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=A[2]
   GOSUB L_20000: \ LET A[2]=AMOUNT ! "qty on po
endif
if custom_customer$="OMAHA"
	LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=AVGORDER  ! cct63467
	GOSUB L_20000: \ LET AVGORDER=AMOUNT ! "average order size -cct63467
endif
RETURN
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120 ! dx change  If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG ! - If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
! - if FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

whse_sort: ! sorting by warehouse number
! PRINT @0,22;'CE';"Clearing sort file...please wait"; \ SIGNAL 3,0               
LET K9$=" ",K9$                                                     
CLEARSORT_LOOP: REM   
SEARCH #9,3,1;K9$,R[9],E \if e=2 goto end_clearsort:
Let e$ = "syserrorfile 442c sortfile mode (m)=3 keyno (k)=1 r=",R[9]," e=",e," keyval (k9$)=",K9$ \error 10000                                                     
SEARCH #9,5,1;K9$,R[9],E 
Let e$ = "syserrorfile 442c sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k9$)=",K8$ \error 10000                               
GOTO clearsort_loop:                                                    
end_clearsort: ! 
dosort: !                                                                   
! PRINT @0,22;'CE';"Sorting...please wait"; \ SIGNAL 3,0                      
LET K2$=N1$                                                                 
SEARCH #2,2,1;K2$,R[2],E \ IF E>1 GOSUB Err_Search:                         
IF NOT (E) GOTO skip_sort:                                                       
sort_loop: SEARCH #2,3,1;K2$,R[2],E \ IF E>2 GOSUB Err_Search:                 
IF E GOTO end_sort: ! "eof                                                    
skip_sort: IF K2$[1,LEN (N2$)]>N2$ GOTO end_sort: ! "product code too high, done 
MAT  READ #2,R[2],0;A$;                                                     
MAT  READ #2,R[2],156;B;
if custom_customer$="PCS" and A$[152,155]="TIME" goto sort_loop:
IF A$[152,155]<N3$ GOTO sort_loop: ! "comm code too low                        
IF A$[152,155]>N4$ GOTO sort_loop: ! "comm code too high                       
IF B[24]<N1 GOTO sort_loop: ! "vendor too low                                  
IF B[24]>N2 GOTO sort_loop: ! "vendor too high       
!look the prod/whse sals file
LET K6$=" ",K6$
let k6$[1,12]=K2$[1,12]
whse_loop: ! 
search #7,3,1;k6$,r7,e
IF E>2 GOSUB Err_Search:     
if e goto sort_loop:
if k6$[1,12]<>k2$[1,12] goto sort_loop:
let whse=K6$[13,14]
if whse<swhse goto whse_loop:   !"whse too low
if whse>ewhse goto whse_loop:   !"whse too high
LET K9$=" ",K9$;R[9]=R7  
let k9$[1,2]=whse using "##"      !"by whse number
IF N5=1 LET K9$[9]=K2$                      ! "by product code
IF N5=2 LET K9$[3,4]=A$[152,155];K9$[9]=K2$ ! "by commodity code              
IF N5=3 LET K9$[3,8]=B[24] USING "######";K9$[9]=K2$ ! "by vendor             
SEARCH #9,4,1;K9$,R[9],E \ IF E GOSUB Err_Search:                           
!  PRINT K9$                                                                
GOTO whse_loop:                                                                
end_sort: !
return

prnt_whsesort:   ! print warehouse report
!PRINT @0,22;"Printing...please wait";'CE'; \ SIGNAL 3,0  
MONTH_[1] = 1;MONTH_[2] = 0 \ rem ! - Call "UTMONTHS",MONTH_[],MTH$
Call UTMonths(e$,MONTH_[],MTH$,BOYMONTH) ! set up month headers
!LET MTH[1]=1;MTH[2]=0 \ CALL "UTMONTHS",MTH[],MTH$                   
LET BREAK$="";BREAK=-1                                                     
! IF J8 PRINT 'CS';                                                          
LET V9[1]=90;V9[0]=0 \ IF N6 LET V9[3]=V9[3]-5                             
let chan=9
let k9$=" ",k9$
prnt_loop: SEARCH #CHAN,3,1;K9$,R[9],E \ IF E>2 GOSUB Err_Search:             
IF E GOTO L_9100: ! "eof       
LET R7=R[9] 
let K5$=" ",K5$
mat read #7,r7,0;pw$;
mat read #7,R7,12;pw;
LET K2$[1,12]=pw$[1,12]
search #2,2,1;k2$,r[2],e \ IF E>1 GOSUB ERR_SEARCH:        
if e goto prnt_loop:
MAT  READ #2,r[2],0;A$;      
MAT  READ #2,R[2],156;B;     
MAT  READ #2,R[2],256;A;     
MAT  READ #2,R[2],512;PFU1;  
MAT  READ #2,R[2],554;PFU2; 
LET K5$[1,12]=pw$[1,12]           
let k5$[13,14]=pw using "##"      
search #5,2,1;k5$,r5,e \ IF E>1 GOSUB ERR_SEARCH:  
if e goto prnt_loop:
mat read #5,r5,38;w2;
mat read #5,r5,78;w3;
FOR I=0 TO 12 \ FOR I1=0 TO 2 \ LET S1[I,I1]=0;S2[I,I1]=0 \ NEXT I1 \ next I
MAT  READ #7,R7,14;Z1; \ GOSUB L_2500:    
MAT  READ #7,R7,248;Z2; \ GOSUB L_2600:   
IF N4=2                                                                   
  FOR I=0 TO 12 \ FOR I1=0 TO 2 \ LET S1[I,I1]=S2[I,I1] \ NEXT I1 \ NEXT I
ENDIF 
GOSUB L_10000:                                           
LET ACTIVE=0;T9[0]=0;T9[20]=0                            
FOR I=1 TO 12                                            
    LET T9[0]=T9[0]+S1[I,1];T9[20]=T9[20]+S1[I,0]          
    LET ACTIVE=(ACTIVE OR S1[I,0] OR S1[I,1] OR S1[I,2])   
NEXT I   
IF N3=3 GOTO skip_active:                                        
IF N3=1 AND ACTIVE GOTO skip_active:                             
IF N3=2 AND ACTIVE=0 GOTO skip_active:                         
GOTo prnt_loop:                                                
skip_active: !"         
IF N5=2 IF BREAK$<>"" IF BREAK$[3,6]<>K9$[3,6] GOSUB L_4500:         
IF N5=3 IF BREAK<>-1 IF BREAK<>B[24] GOSUB L_4500:                   
IF BREAKFLAG<>0
	if rtrim$(break$)<>""
		IF BREAK$[1,2]<>K9$[1,2] 
			GOSUB WHSE_TOTAL:
			let v9[1]=90
		endif
	endif
else
	if whseflag<>0
		if rtrim$(break$)<>""
			IF BREAK$[1,2]<>K9$[1,2] 
				GOSUB WHSE_TOTAL:
			endif
		endif
	endif
endif
LET BREAK$=K9$;BREAK=B[24]                             
GOSUB L_5800:                                               
IF N6 GOSUB L_5200:                                         
IF N6 GOSUB L_6000:                                         
GOSUB L_5000:                                               
GOSUB L_2200:                                               
GOTO prnt_loop:                                                
return

!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
end
