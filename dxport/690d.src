! >>> Program 690d
!
! description  Dead & Overstock report
!
! loadsave -w -n 100,10 -o prog/dxport/690d.dl4 src/690d.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT  5, 2004  12:04:55
Rem /w/papermaster/r2002/
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem per customer base on the PO397 PURCHASING REPORT
Rem AUTHOR DAVE DEVITO 07/18/91
Rem LAST UPDATE  roman 02/09/1993. check do-not-reorder flag cct #48631
!-------------  notes for CUSTOM H T Berry  -----------------------
! 07/10/95 rce cct 79363 display last 6 sales (customer,date,qty)
!						 L_6900 RTN, made changes for 10 digit inv#
! 05/22/01 jliu cct146783  add the tie and hi

!
External Lib "ubsfunc.dl4"
Declare External Sub UTMonths
!
External Lib "libprod.lib"
Declare External Sub ProdGroup
!
External Lib "libcpi.lib"
Declare External Sub cpionhold
!
Declare Intrinsic Sub CheckDigits,DateToJulian,FindF,InpBuf,String,StringSearch

OPTION GOSUB NESTING 12  ! Default is 8
! - Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNS(H) = Int(Abs(H) * 100 + .99) * .01 * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 100000 + .5) * .00001)
Def FNW(X) = Sgn(X) * (Int(Abs(X) + .5))
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim SelVendor$[200],SelWhse$[100]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
Dim 1%,PFU1[20],CNVTU[2],UN[2],MONTH_[4]
Dim MTH$[108]
Dim 2%,C4[10]
Dim 3%,PFU2[6],CNVTA,UWORK[10],BASEX,FIELD,RR[99]

!
Dim 1%,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],M2[2],L3[3],S2[1],VNA[4],W1[2],W0[3]
Dim 1%,WH8[47],UN[2],BOYMONTH,ARMONTH,ARMONTH_ROLLING,IVSELECT,EUN[2]
Dim 1%,TRL1[10],TR1[13],DL1[6],h4[2],OWHT[1]
dim 1%,PL1[1],type[5]
Dim 2%,B[24],PFCO[3],C1[12],AO[3],SPC1[5],A2[6],PDL7[2],W2[9],DL2[4],PC_DATE
Dim 2%,X1[9],Q0[1],AUNIT,HA3[2],S1[2],DT3[1],JDATE[5],BDAYS[24]
Dim 2%,FIXPO,WH7[3],VENDSEL[1],PLC[2],X2[9]
Dim 2%,W7[13],L2[1],L6[5],L4[3],L9[1],H0[12],CUST$[30],CURDATE$[8],H5[16]
dim 2%,st_cons,TR_W7[12]
Dim 3%,A[33],A1[7],C5[5],C6[9],J1,M1[17],W3[24],W5[12],WH9[25],DM[24]
Dim 3%,L5[3],L7[12],S3[17],COST,V9[5],PLP3[4],AMOUNT,PACKQTY,PRODWT,PRODCUBE
Dim 3%,Z5[12],ADJW5[12],ADJZ5[12],W6[12],Z6[12],ADJW6[12],ADJZ6[12],C1$[32]
Dim 3%,NSUNITS,NSCOST,ALTCOST,REC,A3[6],OLM[6],UNF[6],rec_puda
dim 3%,A4[99],WHAMU_W3[9],TR_W3[24],U3
Dim 1%,cpiflag,2%,Custno,Custname$[30],CProd$[12]
Dim K16$[60],3%,TRL3[21],R[99],DL3[3],INVNO
Dim A3$[21],A2$[30],A$[156],P$[12],J$[50],J0$[15],J1$[50],J2$[20],P9$[50],KEY_$[10]
Dim M1$[200],M2$[72],A1$[32],VNA$[264],W1$[32],L$[60],L1$[20],S3$[33],PHN$[30]
Dim J5$[70],J7$[90],J9$[50],K1$[60],K2$[50],K3$[50],K4$[50],Z1$[50],K5$[50]
Dim TITLE$[40],TIME$[24],V2$[50],K19$[60],SUNIT$[4],TITLE2$[40],STAR$[132],TYPE$[30]
Dim LINE1$[130],LINE2$[130],T$[20],CNAME$[30],F1$[16],K9$[60],X$[20],X2$[12]
Dim KTR$[50],A5$[60],EXCTYPE$[16],K17$[50],M3$[60],U6$[20],F2$[30],FAX$[30]
Dim UNIT$[10],COST$[4],K16$[60],K12$[50],K13$[50],CALC$[60],P61$[256]
Dim S1$[30],K6$[50],CUNIT$[4],QUNIT$[4],K0$[50],SORT$[10],U5$[30],BUILD_$[100]
Dim STPROD$[12],LSTPROD$[12],SPACES$[30],LODATE$[6],BUYER$[3],SRTNUM$[2]
DIM TR5$[50],WHAMU$[14],AST$[1]
DIM 3%,whlv[2]
Dim 3%,WHMISC[6],PALQTY,PARM[5],WHMISC2[7],FUTUREQTY
DIM K8$[50],C$[142]
Dim puda$[650]
DIM prodm1$[30],prodnote1$[30],prodnote2$[30],K23$[50],p1$[6],RETVAL$[256]
dim z2$[50]
DIM PLOC$[18],plkey$[50]

!
Dim commaString$[300],XX$[40],F$[60],FILE$[60]
!
Dim tmp$[600],tmp1$[300],tmp2$[300],custom_customer$[30]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
!
DXSetup:!
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Mat Read #1,3,0;CNAME$;
Mat Read #1,3,172;PC_DATE;
X2 = PC_DATE \ Gosub YMD2JUL \ X2 = 0
If X2 Let JDATE[0] = X2 Else Let JDATE[0] = Tim(6)
! - Window On 
CALC$ = "EOQ       INV CLASS SEASONAL  START UP  ARBITRARY MIN / MAX "
TIME$ = Msc$(3)
V9[2] = 20;STAR$ = "*",STAR$
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
Read #1,51,74;BOYMONTH;
XFNPPR = 0 ! \ If P9$[20,20] = "F" Let XFNPPR = 1 ! for this report NEVER FINE PAPER!!
Read #1,3,164;CURDATE$;
Read #1,0,120;ARMONTH;
MAT  READ #1,11,0;BDAYS; 
LET BDAYS=BDAYS[ARMONTH] 
IF BDAYS<=0 LET BDAYS=21 
Read #1,3,184;FIXPO;
READ #1,60,16;ST_CONS;
MTH = CURDATE$[1,2]
If BOYMONTH <= ARMONTH Let ARMONTH_ROLLING = ARMONTH - BOYMONTH + 1 Else Let ARMONTH_ROLLING = 13 - (BOYMONTH - ARMONTH)
STPROD$ = " ",STPROD$ \ LSTPROD$ = "~",LSTPROD$ \ SPACES$ = " ",SPACES$ \ NONSTK = 99
!
MONTH_[1] = 1;MONTH_[2] = 0 \ rem ! - Call "UTMONTHS",MONTH_[],MTH$
Call UTMonths(e$,MONTH_[],MTH$,BOYMONTH) ! set up month headers
!
EXCTYPE$ = "Y TWS RCSLLBX FZ"
! - Window On 
For X = 2 To 24
  Read J1 \ If J1 = -1 Goto L_855
  Read #1,88,J1;F1$;
  Ropen #X,F1$
L_855: 
Next X
Data "2400","1792","1120","1568","2128","1888","1744","-1","1728","2528","1840","1808"
Data "-1","848","1360","864","1184","1136","2768","-1","-1","1696","208"

! NOTE: POSSIBLE FILE #21 BELOW!!!
!
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0)
! - If Err 0 Gosub ERR_ESCAPE
If J8 If J8 <> 49 Goto ERR_TRAP
if err 0 gosub ERR_TRAP
V9[4] = 54 \ If J8 Let V9[4] = 18
!
! - Gosub BLDSORTFLE
!
! dx add xport reporting code
!call dxsave(0,"tmp/690din.txt!")
! Call DxGet("u_custom_customer", custom_customer$)
mat read #1,115,60;custom_customer$;
custom_customer$ = rtrim$(custom_customer$)
! if rtrim$(custom_customer$)="HATHAWAY"
	let f1$="2/SPRODUDA"+STR$(intCO)
	open #21,f1$
! endif
! need product group open - call not closing channels causing error
F1$="2/PRODGRP"+Str$(intCO)
open #22,f1$
parm[5]=22

! NEED PRODUCT GROUP FILE OPEN
!
!If J8 ! dx xml, setup rstr$
  !<section>
!  tmp$ = bsdel$,"Dim",fdel$,rdel$
!  Call addtostr(e$,rstr$,tmp$)
!End If 
!
If J8 Let e$ = "This report is not available in XML format!" \ error 10000
!
!  dx add xport reporting code
call dxget("begbuyer",tmp$) \ SBUYER=tmp$ ! beg buyer
call dxget("endbuyer",tmp$) \ if rtrim$(tmp$)="" let EBUYER=999 else EBUYER=tmp$ ! end buyer
call dxget("begvendor",tmp$) \ SVENDOR=tmp$ ! beg vendor
call dxget("endvendor",tmp$) \ if rtrim$(tmp$)="" let EVENDOR=999999 else EVENDOR=tmp$ ! end vendor
call dxget("selvendor",tmp$) \ SelVendor$=rtrim$(tmp$) ! selected vendors
call dxget("sortby",tmp$) \ SORT$=rtrim$(tmp$) ! sort by (list) B=buyer  V=vendor
call dxget("begwhse",tmp$) \ if rtrim$(tmp$)="" let SWHSE=1 else SWHSE=tmp$ ! beg warehouse
call dxget("endwhse",tmp$) \ if rtrim$(tmp$)="" let EWHSE=99 else EWHSE=tmp$ ! end warehouse
call dxget("selwhse",tmp$) \ SelWhse$=rtrim$(tmp$) ! selected warehouses
call dxget("allprod",tmp$) \ ALLPROD=tmp$ ! print 1=all products or 2=dead, 3=overstk, 0=both
call dxget("begprod",STPROD$) \ STPROD$=UCase$(rtrim$(STPROD$)),Blank$ ! beg prod
call dxget("endprod",LSTPROD$) \ LSTPROD$=UCase$(rtrim$(LSTPROD$)),EndParam$! end prod
let NONSTK=0 ! how can nonstock be dead or overstkd??
! call dxget("incnonstk",tmp$) \ if rtrim$(tmp$)="" let NONSTK=0 else NONSTK=99 ! include non-stock items
!call dxget("sortchar",SRTNUM$) ! # of chars to sort on or C=category
call dxget("costum",tmp$) \ CUnitType = tmp$
call dxget("qtyum",tmp$) \ QUnitType = tmp$
!Call dxget("u_custom_customer",custom_customer$)
let rec_trans=0 ! recommended whse xfer?? NOT FOR DEAD/OVERSTK!
! call dxget("RWHXFR",tmp$) \ if rtrim$(tmp$)<>"Y" let rec_trans=0 else rec_trans=1
! print WHSE AMU - leave in - used in Overstock
!call dxget("WHAMU",tmp$) \ if rtrim$(tmp$)<>"Y" let Print_amu=0 else print_amu=1
let Print_amu=0 ! don't print a whse list!
! Prompt for number of months no sale
!2%,LastSoldDate               : Item 62 ! W2[6]
Call dxget("MNOS",tmp$) \ let X3=tmp$
if x3<=0 let x3=6 ! 6 month default?
daysnosls=Int(x3*30.4) ! avg days per month
if daysnosls<=0 let daysnosls=365
!and number of months no receipts to determine Dead Stock.
!2%,LastRecptDate              : Item 428 ! WH7[0] 
call dxget("MNOR",tmp$) \ let x3=tmp$
if x3<=0 let x3=6 ! also 6 month default
daysnorct=Int(x3*30.4) ! avg days per month
if daysnorct<=0 let daysnorct=365
! Prompt for number of months AMU to use to calculate Over Stock.
! 3%,UsgRate                    : Item 132 ! W3[9] (needs convert to UM)
call dxget("MAMU",tmp$) \ moamu=tmp$
if moamu<=0 let moamu=6 ! 6 month default
!
call dxget("INOH",tmp$) \ if rtrim$(tmp$)<>"Y" let Incl_NOH=0 else Incl_NOH=1
! buyer
if SBUYER<0 or SBUYER>999 let e$="Invalid starting buyer, must be between 0 and 999!" \ error 10000
if EBUYER<SBUYER or EBUYER>999 let e$="Invalid ending buyer, must be between starting buyer and 999!" \ error 10000
!
! vendor
if SelVendor$="" ! beg / end vendor
  if SVENDOR<0 or SVENDOR>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
  if EVENDOR<SVENDOR or EVENDOR>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
  IVSELECT=0
else ! selected vendors
  !!gosub L_10000 ! get selected vendors
  SVENDOR=0 \ EVENDOR=999999
  IVSELECT=1
  !!-!Exclude
  gosub L_10000 !!Building File
  commaString$=SelVendor$
  parseChannel=14
  verifChannel=2
  keyLength=6
  alphanumeric=0
  errorFlag=0
  IVSELECT=1
  gosub parseCommaString
  if errorFlag=1 Let e$ = "Vendor ",tmp$," not Found" \ error 10000
  if errorFlag=2 Let e$ = "Error building vendors list" \ error 10000
  if errorFlag=3 Let IVSELECT=0
endif
!
! warehouse
if SelWhse$="" ! beg / end warehouse
  if SWHSE<0 or SWHSE>99 let e$="Invalid starting warehouse, must be between 0 and 99!" \ error 10000
  if EWHSE<SWHSE or EWHSE>99 let e$="Invalid ending warehouse, must be between starting warehouse and 99!" \ error 10000
else
  SWHSE = -1 \ EWHSE = -1
  gosub SelWarehouse
endif
!
! product
if LSTPROD$<STPROD$ let e$="Invalid ending product, must be >= starting product" \ error 10000
!
! number of product code characters to sort on
SRTNUM=SRTNUM$ ! or "C" for category
if SRTNUM$<>"C"
  if SRTNUM=0 let SRTNUM=12
  if SRTNUM<1 or SRTNUM>12 let e$="Invalid number of characters to sort on, must be between 1 and 12!" \ error 10000
else ! I guess this is category?
  SRTNUM=-99
endif
!
! u/m type
U6$ = " ",U6$
If QUnitType  = 1 Let U6$ = "STOCKING"
If QUnitType  = 2 Let U6$ = "SELLING"
If QUnitType  = 3 Let U6$ = "PURCHASING"
If QUnitType  = 4 Let U6$ = "COSTING"
If QUnitType  = 5 Let U6$ = "PRICING"
If QUnitType  = 6 Let U6$ = "PRODUCTION"
QUnitType = QUnitType + 7
CUnitType=CUnitType+7
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  
End If 
!

!
STARTREPORT: Rem "

Gosub L_8300 ! sort it
! Gosub L_8650 ! no NONSTKS!

SRTFLAG = 0;NUMREC = 0
OLDTYPE = -99 \ HWHSE = -1
V9[1] = 99
PFLAG = 0
BUYER$ = "ZZZ"
K19$ = " ",K19$ \ W2[3] = -1
!
L_2000: ! MAIN LOOP
Search #9,3,1;K19$,R9,E 
If E = 2 Goto OUTEND

LET TYPE=K19$[26,26] ! "was 47,47
let type[1]=k19$[27,27]
let type[2]=k19$[28,28]
If K19$[1,1] = "W" Goto L_2000 ! in to whse selects
NUMREC = NUMREC + 1
! - If Not(J8) And Not(Fra(NUMREC / 200)) Print @35,22;'CL';NUMREC;K19$[1,11]
If BUYER$ = "ZZZ" Let BUYER$ = K19$[1,3]
	Let Whse=K19$[24,25] ! "current whse (nonstk & B/O)
VEND = K19$[4,9]
If W2[3] <> VEND Gosub L_2600 ! new vendor
Gosub L_6500 \ Gosub L_6360 \ Gosub L_31000 ! whse \ prod \ trans&future
GOSUB calc_days_supply: ! days supply 
If P9$[32,32] = "Y"
  PENDCOST = W7[7];PENDDATE = W7[13]
  If W3[16] Let COST = W3[16] Else Let COST = B[10]
Else 
  COST = B[10]
  PENDCOST = PLC[0];PENDDATE = PLC[1]
End If 
Gosub L_2500 ! QTYBO
Gosub L_2700 ! Reorder qty
  T9 = REQTY

Gosub L_7000 ! convert
If SORT$ = "B"
  If BUYER$ <> K19$[1,3] Let V9[1] = 99;BUYER$ = K19$[1,3]
End If 
If W0[0] = 2 And (QTYBO <= 0 And W3[2] <= 0 and FUTUREQTY<=0) Goto L_2000
cpiflag=0
if p61$[111,111]="Y"!  and type<>2 ! do products only?
	let cprod$=A$[140,151]
	call cpionhold(e$,intco,cpiflag,CProd$,CustNo,CustName$)
Endif
let tmamu=w3[9]*moamu ! for detail print
if tmamu<0 let tmamu=0 ! neg amu? NO!
Gosub L_2200 ! total
Gosub L_5800 ! header/vendor
Gosub L_5500 ! prod head
Gosub L_5000 ! prod detail
let futureqty=0
let free_qty=0
let transin_qty=0;req_qty=0
Goto L_2000
!
L_2200: Rem TOTALS
!If EMB Let T9 = REQTY_ORG_B Else Let T9 = REQTY_B
!If EMB Let T91 = REQTY_ORG Else Let T91 = REQTY
  TOTD = TOTD + FNR(T9 * UCOST)
Let TOTUN = TOTUN + T91
If Not(A1[3]) Let A1[3] = 1
TOTCB = TOTCB + ((T9 * B[23]) / A1[3])
If Not(A[5]) Let A[5] = 1
TOTWT = TOTWT + ((T9 * A[6]) / A[5])

L_2290: Rem EM BUY
Goto L_2390 
L_2390: Return 
!
L_2500: Rem FIND QTY B/O
QTYBO = 0
K16$ = " ",K16$
K16$[1,12] = W1$[1,12]
K16$[13,14] = WHSE Using "##"
L_2530: Search #11,3,4;K16$,R16,E 
If E Return 
If K16$[1,12] <> W1$[1,12] Return 
X2 = K16$[13,14]
If X2 <> WHSE Return 
Mat Read #11,R16,82;PLP3;
MAT  READ #11,R16,114;P1$;
QTYBO = QTYBO + PLP3[4]
Goto L_2530
!
L_2600: Rem NEW VENDOR
TOTD = 0 \ TOTUN = 0
TOTCB = 0 \ TOTWT = 0
ETOTD = 0 \ ETOTUN = 0
ETOTCB = 0 \ ETOTWT = 0
OLDTYPE = TYPE
NSD = 0 \ NSUN = 0
NSCB = 0 \ NSWT = 0
V9[1] = 999
Return 
!
L_2700: Rem CALC REORDER QTY
EX_CODE = 0
REQTY = W3[11]
On W7[12] Gosub L_12000,L_12220,L_12260,L_12570,L_12570,L_12350
L_2750: If REQTY < 0 Let REQTY = 0
If REQTY = 0
  If (W3[0] - W3[2] - QTYBO + W3[1] + TRANSIN_QTY) < 0 Let REQTY = Abs(W3[0] - W3[2] - QTYBO + W3[1] + TRANSIN_QTY)
End If 
Gosub L_12410
!If EMB Let REQTY_ORG = REQTY;REQTY = REQTY + (REQTY * (EMB / 100))
!If EMB Gosub L_12410
GOSUB L_13000
Return 
! WHERE IS THE BELOW CODE USED???
!it was a early copy of L_12000?
!
L_2900: Rem LOOK FOR DEALS
DOLLOR = 0;PERCENT = 0;FREE_QTY = 0
CNVTA = REQTY;CNVTU[0] = PFU1[QUnitType];CNVTU[1] = 0;CNVTU[2] = 1
Gosub L_20000
K17$ = " ",K17$
K17$[1,6] = W2[3] Using "######"
K17$[7,18] = W1$[1,12]
K17$[19,27] = 999999999 - (AMOUNT + 1) Using "#########"
L_2916: Search #17,3,1;K17$,R17,E
If E Goto L_2960
X2 = K17$[1,6] \ If X2 <> W2[3] Goto L_2960
If K17$[7,18] <> W1$[1,12] Goto L_2960
Mat Read #17,R17,0;DL2;
Mat Read #17,R17,20;DL1;
Mat Read #17,R17,34;DL3;
X2 = DL2[1] \ Gosub YMD2JUL \ X2 = 0
JDATE[1] = X2
X2 = DL2[4] \ Gosub YMD2JUL \ X2 = 0
JDATE[2] = X2
If JDATE[0] < JDATE[1] Or (DL2[4] And JDATE[0] > JDATE[2]) Goto L_2916
If DL1[1] = 1 Let PERCENT = DL3[0]
If DL1[1] = 2
  CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
  Gosub L_20000
  DOLLOR = AMOUNT
End If 
If DL1[1] = 3
  !CNVTA = DL3[2];CNVTU[0] = 0;CNVTU[1] = PFU1[UnitType];CNVTU[2] = 1
  LET CNVTA=DL3[2];CNVTU[0]=0;CNVTU[1]=dl1[4];CNVTU[2]=1
  Gosub L_20000
  WITH_QTY = AMOUNT
  !CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[UnitType];CNVTU[2] = 1
  LET CNVTA=reqty;CNVTU[0]=pfu1[QunitType];CNVTU[1]=dl1[4];CNVTU[2]=1
  Gosub L_20000
  !If WITH_QTY Let FREE_QTY = Int(REQTY / WITH_QTY) * AMOUNT
  LET FREE_QTY=INT(amount/WITH_QTY)*dl3[0]  ! in base
  cnvta=free_qty;cnvtu[0]=0;cnvtu[1]=pfu1[Qunittype];cnvtu[2]=1
  gosub l_20000:
  free_qty=amount  !  converted to purch u/m
  End If 
L_2960: Return 

L_4000: Rem TOTALS
Goto L_4140 ! If ALLPROD = 1 Goto L_4140 ! all prods
Print #0; Tab 13;"CUMULATIVE:";
Print #0; Using "CUBES= ###########"; Tab 34;TOTCB;
Print #0; Using "UNITS= ###########"; Tab 55;TOTUN;
Print #0; Using "AMOUNT= $##,###,###.##"; Tab 76;TOTD;
Print #0; Using "WEIGHT= ###########"; Tab 105;TOTWT;
Print #0;"\15\";
V9[1] = V9[1] + 1
If Not(EMFLAG) Goto L_4140
Print #0; Tab 3;"EMERGENCY CUMULATIVE: ";
Print #0; Using "CUBES= ###########"; Tab 34;ETOTCB;
Print #0; Using "UNITS= ###########"; Tab 55;ETOTUN;
Print #0; Using "AMOUNT= $##,###,###.##"; Tab 76;ETOTD;
Print #0; Using "WEIGHT= ###########"; Tab 105;ETOTWT;
Print #0;"\15\";
V9[1] = V9[1] + 1
L_4140: Return 
!
L_4500: Rem "==================================== previous 12 month sales
X2 = ARMONTH_ROLLING
For X1 = 1 To 13
  Print #0; Tab (7 + (X1 - 1) * 10);MTH$[X2 * 3 - 2,X2 * 3];
  X2 = X2 - 1 \ If X2 < 1 Let X2 = 12
Next X1
V9[1] = V9[1] + 1
Print #0;""
X2 = 0
For X1 = ARMONTH_ROLLING To 1 Step -1
  If Not(ADJW5[X1]) Let X2 = W5[X1] Else Let X2 = ADJW5[X1]
  
		PRINT #0; USING "------#.##";FNR(X2);
Next X1
For X1 = 12 To ARMONTH_ROLLING Step -1
  If Not(ADJW6[X1]) Let X2 = W6[X1] Else Let X2 = ADJW6[X1]
		PRINT #0; USING "------#.##";FNR(X2);
Next X1
Print #0;"" \ V9[1] = V9[1] + 1
Return 
!
L_5000: Rem PRINT LINE TYPE 1 AND 3 AND TYPE 0

Print #0; Tab 0;W1$[1,12]; Tab 13;A$[9,38];
Print #0; Using "LDTM= ###.##"; Tab 43;FNR(W2[0]);
PRINT #0; USING "LP=  #######.##"; TAB 57;W3[5];
Print #0; Using "QA=  ---------#"; Tab 74;W3[0] - W3[2];
! replace w/ dead qty and/or overstock
! Print #0; Using "OQ= -#########"; Tab 91;REQTY;
if type and type[1] ! dead stock
	Print #0; Using "DS=----------#"; Tab 91;W3[0] - W3[2];
endif
Print #0; Tab 106;SUNIT$;
x2=w2[6] \ gosub Num2Date: ! LastSoldDate 
if x2=0 let x$="NEVER"
print #0; Tab 111;"LSOLD ";x$;
Print #0; "" ! Tab 111;W1$[1,12]; Tab 124;"MAT C ";A$[156,156]
IF XFNPPR IF SRTNUM=-99 PRINT #0; TAB 0;C1$[1,12]; ! fine paper? srtnum=-99 is ctgy sort
IF NOT(XFNPPR) IF SRTNUM=-99 PRINT #0; TAB 0;"CTGY";B[11]; ! c1$=grade/grain
Print #0; Tab 13;A$[63,92];
Print #0; Using "CLASS= #####"; Tab 43;W7[6];

PRINT #0; USING "OP=  -######.##"; TAB 57;W3[6];
Print #0; Using "SO=  ##########"; Tab 74;W3[2];
!Print #0; Tab 91;"SRCE: ";
!If W7[12] > 0 And W7[12] < 7 Print #0;CALC$[W7[12] * 10 - 9,W7[12] * 10];
!If EX_CODE Print #0;" ";EXCTYPE$[(EX_CODE * 2 - 1),(EX_CODE * 2)] Else Print #0;" "
if type[2] ! Over stock
	x3=(W3[0] - W3[2]) - tmamu
	if x3<0 let X3=(W3[0] - W3[2])
	Print #0; Using "OS=----------#"; Tab 91;x3; ! (avail-ttl monthly amu) per specs
endif
x2=wH7[0] \ gosub Num2Date: ! LastRecptDate  
if x2=0 let x$="NEVER"
print #0; Tab 111;"LRCPT ";x$;
Print #0;""
Print #0; Tab 0;"WHSE ";K19$[24,25];

! PRINT #0; USING "TYPE ##  "; TAB 13;TYPE;TYPE$;
print #0; Using "OS AMU= -#########"; TAB 13;TMAMU;
Print #0; Using "WGHT=  #####"; Tab 43;PRODWT;
Print #0; Using "SS=  ##########"; Tab 57;FNU(W3[7]);
Print #0; Using "B/O= ##########"; Tab 74;QTYBO;
Print #0; Using "PACK= ##########"; Tab 91;PACKQTY;
Print #0; Tab 110;"____________________"

	IF W1$[13,18]<>"      "
		PRINT #0; TAB 13;"VEN # ";W1$[13,32];
	ELSE 
		PRINT #0; TAB 13;"VEN # ";A$[93,112];
	ENDIF 
Print #0; Using "CUBE= ####.#"; Tab 43;PRODCUBE;
	PRINT #0; USING "AMU= -######.##"; TAB 57;W3[9];
Print #0; Using "PO=  ##########"; Tab 74;W3[1];
Print #0; Tab 91;A2$[13,27];
If NET_COST = COST Print #0; Using "$######.##/"; Tab 110;COST;COST$
If NET_COST <> COST Print #0; Using "$######.##/"; Tab 110;NET_COST;COST$;" NET"
If WHMISC[4] = 0 And WHMISC[5] = 0 Goto L_5136
PALQTY = 0 \ PALQTY = WHMISC[4]
If WHMISC[5] Let PALQTY = PALQTY * WHMISC[5]
	Print #0; Using "#######"; Tab 13;"PALLET= ";PALQTY;
	X$ = "CWT" \ If PFU1[8] > 0 Read #10,PFU1[8],10;X$[1,4];
	Print #0;" ";X$[1,4];
	PRINT #0;WHMISC[4];"X";WHMISC[5];
L_5136: !
Print #0; Using "MIN=#####.##"; Tab 43;W3[3];
Print #0; Using "MAX=  ######.##"; Tab 57;W3[4];
Print #0; Using "TR=  #######.##"; Tab 74;TRANSIN_QTY;
!If FREE_QTY Print #0; Using "FREE #####.##"; Tab 91;FREE_QTY Else Print #0;" "

  PRINT #0; USING "DA= ----#"; TAB 91;daysupply;
  IF FREE_QTY PRINT #0; USING " FREE ########"; TAB 101;FREE_QTY ELSE  PRINT #0;" "

Print #0; Using "--------.##";Tab 57;"RQ= ";req_qty;
Print #0; Using "FUT= #######.##"; Tab 74;FUTUREQTY ! 
if p61$[111,111]="Y"
	if cpiflag
		Print #0; Tab 13;"CPI HOLD: Customer ";
		Print #0; using "######";Custno;" ";Custname$;
	Endif
Endif
!If PENDDATE Let X2 = PENDDATE \ Gosub L_7700 \ Print #0; Tab 76;"EFFECTIVE ";X$;
!If PENDCOST Print #0; Using "PENDING COST  $######.##/"; Tab 96;PENDCOST;COST$;
!If PENDDATE Or PENDCOST or custom_customer$="JPAPER"
	Print #0;" " \ V9[1] = V9[1] + 1
!Endif ! always as always RQ= & FUT=
IF PRINT_AMU GOSUB L_15000: ! " print amu for each warehouse

Print #0; Tab 2;"CURRENT"; Tab 121;"LAST YEAR"

V9[1] = V9[1] + 7
Gosub L_4500
Gosub L_4000
count=0 ! Gosub L_6090 ! no altvend list

If COUNT Print #0;"" \ V9[1] = V9[1] + 1
GOSUB L_14000
STAR$ = "-",STAR$ \ Print #0; Tab 0;STAR$[1,130]
V9[1] = V9[1] + 1
Return 

GET_PRODLOC: REM "=======================read product location recor
Let PLKEY$=" ",PLKEY$ \ LET PLOC$=" ",PLOC$                     
LET PLKEY$[1,12]=A$[140,151]                                      
PRODLOC_LOOP: REM                                                   
LET PLOC$=" ",PLOC$                                                 
SEARCH #24,3,1;PLKEY$,r24,E                                     
IF E>2 RETURN! GOSUB ERR_SEARCH:                                            
IF NOT (E) AND PLKEY$[1,12]=A$[140,151]                             
	LET WHSENO=PLKEY$[13,14]                                          
	IF WHSENO<>whse GOTO PRODLOC_LOOP:                                 
	MAT  READ #24,r24,0;PLOC$;                                        
	MAT  READ #24,r24,18;PL1;  
	IF NOT (PL1[1]) GOTO PRODLOC_LOOP:
ENDIF                                                               
RETURN                                                              

!
L_5500: Rem LINE HEADING FOR STOCK PROD
x1=type+type[1]+type[2]
Clear type$
If x1 = 0 Let TYPE$ = "NORMAL PRODUCT"
If TYPE = 1 Let TYPE$ = "NO RECENT SLS"
if type[1]=1 let type$=type$+"NO RECENT RCPT"
If TYPE = 1 and type[1]=1 Let TYPE$ = "DEAD STOCK"
If TYPE and type[1] and type[2] Let TYPE$ = TYPE$+" & OVERSTOCK"
If TYPE=0 and type[1]=0 and type[2] Let TYPE$ = "OVERSTOCK"
Goto L_5790 !If TYPE <> 2 Goto L_5790
If TYPE = 2 Goto L_5690
Print #0; Tab 2;"ITEM CODE ";W1$[1,12]; Tab 25;"ITEM DESCRIPTION ";A$[9,38];" "; Tab 75;"VENDOR ITEM CODE ";A$[93,112]
Print #0; Tab 41;A$[63,92]
Print #0; Using "PERIOD AVERAGE: ## MO "; Tab 2;W2[2];" QTY SHOWN IN ";U5$;"OF ";SUNIT$;
Print #0; Using "UNIT COST ######.## / ";COST;COST$
V9[1] = V9[1] + 3
If TYPE <> 1 And TYPE <> 3 Goto L_5635
Print #0; Tab 10;"QTY"; Tab 20;"QTY"; Tab 31;"QTY"; Tab 42;"QTY"; Tab 53;"QTY"; Tab 62;"AVG MO ";
Print #0; Tab 82;"LINE"; Tab 90;"ORDER"; Tab 97;"SAFETY"; Tab 108;"ORDER"; Tab 116;"R  LD  CL"
Print #0; Tab 2;"WH"; Tab 8;"ON HAND"; Tab 19;"ON  PO"; Tab 30;"ON ORD";
Print #0; Tab 41;"AVAIL"; Tab 52;"BACKORD"; Tab 63;"DEMAND";
Print #0; Tab 82;"POINT"; Tab 90;"POINT"; Tab 97;"STOCK";
Print #0; Tab 109;"QTY"; Tab 116;"S  TM  ST"
V9[1] = V9[1] + 2
L_5635: If TYPE <> 4 Goto L_5690
Print #0; Tab 7;"QTY"; Tab 15;"QTY"; Tab 23;"QTY"; Tab 31;"QTY"; Tab 39;"QTY"; Tab 46;"AVG MO";
Print #0; Tab 82;"LINE"; Tab 90;"ORDER"; Tab 97;"DATE "
Print #0; Tab 2;"WH"; Tab 5;"ON HAND"; Tab 14;"ON  PO"; Tab 23;"ON ORD";
Print #0; Tab 30;"AVAIL"; Tab 37;"BACKORD"; Tab 46;"DEMAND FL MO";
Print #0; Tab 82;"POINT"; Tab 90;"POINT"; Tab 97;"DATE "; Tab 106;"REASON FOR FREEZE "
V9[1] = V9[1] + 2
L_5690:
If TYPE <> 2 Goto L_5790
Print #0; Tab 74;"QTY"; Tab 110;"CUST ORD"
Print #0; Tab 2;"WH"; Tab 7;"ITEM #"; Tab 18;"ITEM DESCRIPTION"; Tab 50;"VENDOR ITEM #";
Print #0; Tab 72;"ORDERED      CUST #   CUSTOMER NAME"; Tab 112;"DATE"; Tab 122;"UNIT COST"
V9[1] = V9[1] + 2
L_5790: Return 
!
L_5800: Rem "==================================== headings

If V9[1] < V9[4] Return 
!If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J8) Print #0;"\14\";
V9[0] = V9[0] + 1
If Not(J8) Print #0;" "
Print #0;TIME$; Tab (64 - Len(TITLE$) / 2);TITLE$; Tab 120;"PAGE";V9[0]
Gosub L_6000 \ If SORT$ = "B" Print #0; Tab 0;"BUYER";W1[2];
L_5860: 
Print #0; Tab (64 - Len(CNAME$) / 2);CNAME$
If ALLPROD = 1 Print #0; Tab 55;"ALL PRODUCTS"
If ALLPROD = 2 Print #0; Tab 54;"DEAD PRODUCTS"
if ALLPROD = 3 Print #0; Tab 49;"OVERSTOCK PRODUCTS"
if allprod = 0 print #0; tab 48;"BOTH DEAD & OVERSTK"
!If EMFLAG Print #0; Tab (64 - Len(TITLE2$) / 2);TITLE2$
Print #0;""
Gosub L_6330 ! get vendtag
Print #0; Tab 0;"VENDOR" ! ; Tab 43;"PICK UP __________"; Tab 92;"P.O. NO. __________"
Print #0; Using "######"; Tab 0;W2[3]; Tab 11;VNA$[1,30] ! ; Tab 43;"VNDR # __________"
If M2$[43,72] = SPACES$[1,30] Let M2$[43,72] = A5$[31,60]
If M3$[31,60] = SPACES$[1,30] Let M3$[31,60] = A5$[1,30]

Print #0; Tab 11;VNA$[31,60]; Tab 88;"PHONE ";M3$[31,60]
Print #0; Tab 11;VNA$[91,105];", ";VNA$[106,107];"  ";VNA$[108,116];
Print #0; Tab 43;"______________________________"; Tab 90;"FAX ";M2$[43,72]
Print #0;""
!Print #0; Using "REVIEW CYCLE= ###.## DAYS"; Tab 11;REVC * 30;
!Print #0; Using "VENDOR MINIMUM $###,###.## "; Tab 40;M1[0];
!Print #0; Using "WEIGHT ####### "; Tab 74;M1[1];
!Print #0; Using "UNITS  ####### "; Tab 91;M1[3];
!Print #0; Using "CUBES ####### "; Tab 113;M1[2]
STAR$ = "*",STAR$ \ Print #0; Tab 0;STAR$[1,130]
Print #0;" "
V9[1] = 11 !\ If EMFLAG Let V9[1] = 13
PFLAG = 99
Return 
!
L_6000: Rem ! vendtag
REVC = 0
For X = 0 To 17 \ M1[X] = 0 \ Next X
K9$ = W2[3] Using "######"
Search #4,2,1;K9$,R4,E
If E Goto L_6072
Mat Read #4,R4;M1$;
Mat Read #4,R4,200;M2;
Mat Read #4,R4,206;M1;
Mat Read #4,R4,314;M2$;
Mat Read #4,R4,398;M3$;
If P61$[63,63] = "Y" ! "Vendor Whse
  X = 2
  Call "POVWMIN.dl4",W2[3],WHSE,M1[],X$,X,e$,rstr$,intCO
  X = 1
  FAX$ = M2$[43,72]
  Call "POVWMIN.dl4",W2[3],WHSE,M1[],FAX$,X,e$,rstr$,intCO
  If FAX$[1,1] <> "" And FAX$[1,5] <> "     " Let M2$[43,72] = FAX$
  X = 0;PHN$ = M3$[31,60]
  Call "POVWHSE.dl4",W2[3],WHSE,X2[],X2[],U5$,PHN$,U5$,X,e$,rstr$,intCO
  If PHN$[1,1] <> "" And PHN$[1,5] <> "     " Let M3$[31,60] = PHN$[1,30]
End If 
If SRTFLAG Goto L_6080
L_6072: 
If M1[1] Let WTFLG = 1 Else Let WTFLG = 0
If M1[3] Let UNFLG = 1 Else Let UNFLG = 0
If M1[2] Let CBFLG = 1 Else Let CBFLG = 0
For X = 8 To 11
  If REVC < M1[X] Let REVC = M1[X]
Next X
L_6080: Return
!
L_6090: Rem altvend
COUNT = 0
Return
If P61$[51,51] = "N" Return 
K5$ = " ",K5$
K5$[1,12] = A$[140,151]
L_6120: Search #5,3,1;K5$,R6,E 
If E Return 
If K5$[1,12] <> A$[140,151] Return 
Mat Read #5,R6,0;A1$; 
Mat Read #5,R6,32;A2;
If A2[6] Let AUNIT = A2[6] Else Let AUNIT = PFU1[11]
CNVTU[0] = 0;CNVTU[1] = AUNIT;CNVTU[2] = 2;CNVTA = A2[2] \ Gosub L_20000 \ ALTCOST = AMOUNT
V2$[1,6] = A2[0] Using "######" \ Gosub L_6334
If A2[1] Let LODATE$ = A2[1] Using "&&&&&&" Else Let LODATE$ = " ",LODATE$
V9[1] = V9[1] + 1 \ If V9[1] >= V9[4] Gosub L_5800
Print #0; Using "######## "; Tab 0;A2[0];"[";VNA$[1,28];"]  ";ALTCOST Using "$$$,$$$,$$#.##/";COST$;
Print #0;"  ";LODATE$[3,4];"/";LODATE$[5,6];"/";LODATE$[1,2]

Goto L_6120
Return 
!

!
L_6330: Rem VENDOR
V2$ = W2[3] Using "######"
VNA$ = " ",VNA$;A3[1] = 0
L_6334: Search #2,2,1;V2$,V2,E 
If E
  VNA$ = " *** VENDOR NOT ON FILE *** "
  A5$ = " ",A5$;M2$ = " ",M2$
  Return 
End If 
Mat Read #2,V2;VNA$
Mat Read #2,V2,498;A3;
Mat Read #2,V2,576;A5$;
Return 
!
L_6360: Rem READ PRODUCT
K4$ = " ",K4$
K4$[1,12] = W1$[1,12]
PRDNF = 0
if custom_customer$="HTBERRY" LET PROD_REC=0	! "cct79363 custom for htberry
Search #3,2,1;K4$,R4,E 
If E Let PRDNF = 99 \ Return 
Mat Read #3,R4,0;A$;
Mat Read #3,R4,156;B;
Mat Read #3,R4,256;A;
Mat Read #3,R4,460;A1;
Mat Read #3,R4,512;PFU1;
Mat Read #3,R4,554;PFU2;
MAT  READ #3,R4,678;U3;
Mat Read #3,R4,894;C4;
Mat Read #3,R4,944;A2$;
Mat Read #3,R4,974;PFCO;
Mat Read #3,R4,856;C1$;
Mat Read #3,R4,1002;PLC;
!! GET UDA
! if rtrim$(custom_customer$)="HATHAWAY"
	let puda$=" ",puda$
	search #21,2,1;k4$,rec_puda,e
	if not(e)
		mat read #21,rec_puda,12;puda$;
	endif
! endif
PROD_REC = R4
asT$=" "
If Not(W2[3]) Let W2[3] = B[24]
If Not(W3[18]) Let W3[18] = C4[4]
If Not(SRTFLAG) Gosub L_7500
Return 

L_6500: Rem READ WAREHOUSE
Mat Read #8,R9,0;W1$;
Mat Read #8,R9,32;W1;
Mat Read #8,R9,38;W2;
Mat Read #8,R9,78;W3;
Mat Read #8,R9,228;Z5;
Mat Read #8,R9,306;Z6;
Mat Read #8,R9,420;W0;
Mat Read #8,R9,428;WH7;
Mat Read #8,R9,444;WH8;
Mat Read #8,R9,540;ADJZ5;
Mat Read #8,R9,618;ADJZ6;
Mat Read #8,R9,696;W7;
MAT  READ #8,R9,780;WHLV;
Mat Read #8,R9,800;WHMISC;
Mat Read #8,R9,846;WHMISC2;
Gosub L_11000
Gosub L_11100
Return 
!

L_6870: Rem UNIT CONVERSION RETURNS AMOUNT
Gosub L_20000
Return 
! custom routine for HTBERRY
L_6900: ! last six sales print
LET X=0 \ LET Y=0 \ LET X6=0
IF V9[1]+3>V9[4] LET V9[1]=V9[4]+10 \ GOTO L_6910:
PRINT #0;" " \ PRINT #0; TAB 55;"LAST SIX SALES ";
LET X$="HUNDRED WTCWT " \ IF PFU1[8]>0 READ #10,PFU1[8];X$;
print #0;using "#### "; tab 102;whmisc[4];x$[11,14];"/";"TIER";
print #0;using " ## ";whmisc[5];"TIERS/SKID" 
PRINT #0;" "
LET V9[1]=V9[1]+3
L_6910: !
LET K5$=" ",K5$
LET K5$=PROD_REC USING "######9999999999"
L_6916: SEARCH #18,6,2;K5$,R18,E
LET X2=K5$[1,6]
IF E RETURN 
IF PROD_REC<>X2 RETURN 
MAT  READ #18,R18;L2;
MAT  READ #18,R18,16;L4;
MAT  READ #18,R18,168;L7; \ MAT  READ #18,R18,250;UN;
MAT  READ #18,R18,518;INVNO;
LET CNVTU[0]=0;CNVTU[1]=UN[0];CNVTU[2]=1;CNVTA=L7[4] \ GOSUB L_20000: \ LET L7[4]=AMOUNT
IF L2[0]<>11 GOTO L_6916:
LET Y=Y+1
IF Y>6 RETURN 
LET K8$=" ",K8$
LET K8$=INVNO USING "30##########"  ! "was l2[1]-inv# now 10 digits
SEARCH #19,2,1;K8$,R19,E
IF E GOTO L_6916:
!
MAT  READ #19,R19,0;H0;
MAT  READ #19,R19,78;H4;
LET K6$=H0[4] USING "######"
SEARCH #13,2,1;K6$,R6,E
IF E ! GOSUB Err_Search:
	c$=" ",c$;C$[31]="CUSTOMER NOT FOUND"
Else
MAT  READ #13,R6;C$;
Endif
LET X2=H0[9] \ GOSUB L_7700:
LET V9[1]=V9[1]+1
IF V9[1]>V9[4] GOSUB L_5800: \ LET J9=999
IF J9>0 PRINT #0;" " \ PRINT #0; TAB 35;" LAST SIX SALES FOR ";A$[140,151] \ PRINT #0;
IF J9>0 LET V9[1]=V9[1]+3 \ LET J9=0
LET L3[2]=VAL(K5$[13,15])
PRINT #0; USING "CUST ###### ";H0[4]; TAB 25;C$[31,60];
PRINT #0; USING "INV ###### ";H0[6];
PRINT #0; USING "LINE ###";L3[2];
! PRINT #0; USING "###"; TAB 75;"WH ";H4[2];
PRINT #0; TAB 76;X$;
PRINT #0; USING "###"; TAB 88;"WH ";H4[2];
PRINT #0; USING "QTY SHIPPED ######## "; TAB 97;L7[4]
GOTO L_6916:

!
L_7000: Rem UNIT CONVERT
CNVTU[0] = 0
CNVTU[1] = PFU1[QUnitType]
CNVTU[2] = 1
if qtybo<>0
	CNVTA = QTYBO
	Gosub L_6870
	QTYBO = AMOUNT
endif
if TRANSIN_QTY<>0
	CNVTA = TRANSIN_QTY \ Gosub L_6870 \ TRANSIN_QTY = AMOUNT
endif
if req_qty<>0
	CNVTA = req_qty \ Gosub L_6870 \ req_qty = AMOUNT
Endif
IF FUTUREQTY<>0 ! Convert unit of measure
	cnvta=FUTUREQTY
	gosub L_6870
	FUTUREQTY=amount  !  converted to purch u/m
ENDIF
For U = 0 To 9
  IF U=9 LET CNVTU[2]=5
  if w3[u]<>0
	CNVTA = W3[U]
	Gosub L_6870
	W3[U] = AMOUNT
  endif
Next U
FOR U=O TO 1
	if WHLV[U]<>0
		LET CNVTA=WHLV[U] \ LET CNVTU[0]=0 \ LET CNVTU[1]=PFU1[QUNITtype] \ LET CNVTU[2]=1
		GOSUB L_6870: \ LET WHLV[U]=AMOUNT
	endif
NEXT U
!If EMB<>0
!	if REQTY_ORG<>0
!		Let CNVTA = REQTY_ORG \ REQTY_ORG_B = CNVTA \ Gosub L_6870 \ REQTY_ORG = AMOUNT
!	endif
!endif
CNVTA = REQTY;REQTY_B = CNVTA
Gosub L_6870
REQTY = AMOUNT
Gosub L_2900
CNVTU[0] = 0 \ CNVTU[1] = PFU1[QUnitType] \ CNVTU[2] = 1
For U = 0 To 12
  CNVTA = W5[U] \ Gosub L_6870 \ W5[U] = AMOUNT
  CNVTA = ADJW5[U] \ Gosub L_6870 \ ADJW5[U] = AMOUNT
  CNVTA = W6[U] \ Gosub L_6870 \ W6[U] = AMOUNT
  CNVTA = ADJW6[U] \ Gosub L_6870 \ ADJW6[U] = AMOUNT
Next U
CNVTU[1] = PFU1[11]
CNVTU[2] = 2
CNVTA = COST
UCOST = FNP(CNVTA)
Gosub L_6870
COST = AMOUNT
NET_COST = COST - (COST * (PERCENT / 100)) - DOLLOR
If PENDCOST <>0 
	CNVTA = PENDCOST \ Gosub L_6870
	PENDCOST = AMOUNT
endif
L_7068: ! not pfu1[11] it's cunittype
If cunittype = -1 Let COST$ = "CWT " \ Goto L_7072
If cunittype = -3 Let COST$ = "LB  " \ Goto L_7072
If cunittype Mat Read #10,cunittype,10;COST$; Else Let COST$ = "ERR"
L_7072: If PFU1[QUnitType] = -1 Let SUNIT$ = "CWT " \ Goto L_7076
If PFU1[QUnitType] = -3 Let SUNIT$ = "LB  " \ Goto L_7076
If PFU1[QUnitType] Mat Read #10,PFU1[QUnitType],10;SUNIT$; Else Let SUNIT$ = "ERR"
L_7076: 
CNVTU[0] = cunittype
CNVTU[1] = 0
CNVTU[2] = 2
CNVTA = NET_COST
Gosub L_6870
UCOST = AMOUNT
Return 
!
L_7200: Rem FIND ORDER HEADER
For X = 0 To 12 \ H0[X] = 0 \ Next X
K12$ = " ",K12$
For ST = 1 To 7
  K12$[1,2] = ST Using "##"
  K12$[3,8] = L2[1] Using "######"
  Search #12,2,1;K12$,R12,E 
  If E Goto L_7290
  Mat Read #12,R12,0;H0;
  Mat Read #12,R12,104;H5;
L_7290: Next ST
Return 
!
L_7350: Rem FIND CUSTOMER
K13$ = " ",K13$
K13$ = H0[4] Using "######"
Search #13,2,1;K13$,R13,E 
If E Let CUST$ = "*** NOT ON FILE ***" \ Goto L_7410
Mat Read #13,R13,30;CUST$;
L_7410: Return 
!
L_7500: Rem FIND # BASE UNITS
For CT = 0 To 7
  If PFU1[10] = PFU1[CT] Goto L_7550
Next CT
PACKQTY = 0 \ Goto L_7570
L_7550: 
If CT > 0 Let PACKQTY = PFU2[CT - 1]
If CT = 0 Let PACKQTY = 1
L_7570: 
If Not(A[5]) Let A[5] = 1
PRODWT = (A[6] * PACKQTY) / A[5]
If Not(A1[3]) Let A1[3] = 1
PRODCUBE = (B[23] * PACKQTY) / A1[3]
Return 
!
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!

L_8300: Rem "============================================== SORT
K9$ = " ",K9$
L_8320: !
Search #9,3,1;K9$,R9,E 
If E Goto L_8370
If K9$[1,1] = "W" Goto L_8320
Search #9,5,1;K9$,R9,E
If E Let e$ = "syserrorfile 690d sortfile mode (m)=5 keyno (k)=1 r=",R9," e=",e," keyval (k$)=",K9$ \ error 10000
Goto L_8320
!
L_8370: !
! - Print @0,22;'CL';"SORTING PLEASE WAIT . .  .   ."
SRTFLAG = 99;NUMREC = 0
K2$ = " ",K2$
K2$[1,12] = STPROD$[1,12]
K2$[13,14] = "  "
L_8390: ! loop here
Search #8,3,1;K2$,R9,E 
If E return
CT = 0
NUMREC = NUMREC + 1
! - If Not(Fra(NUMREC / 200)) Print @35,22;'CL';NUMREC;K2$
If K2$[1,12] > LSTPROD$[1,12] return
Mat Read #8,R9,420;W0;
X1 = K2$[13,14]
If SWHSE > 0 ! "did a range
  If X1 < SWHSE Goto L_8390
  If X1 > EWHSE Let K2$[13,14] = "99" \ Goto L_8390
  WHSE = X1
Else ! "check if on file
  K19$ = " ",K19$
  K19$[1,1] = "W"
  K19$[2] = X1 Using "###"
  Search #9,2,1;K19$,R0,E 
  If E = 1 Goto L_8390
End If 
If W0[0] = 1 Goto L_8390 ! DO NOT REORDER
!IF W0[0] =2 ! order to order
!	Mat Read #8,R9,78;W3;
!	IF NOT(W3[2]) GOTO L_8390 ! if nothing on order bypass
!endif
Gosub L_6500 ! read whse
!------------------------------------------
!PARM[0] =-1 ! send as a whse PO 0-(po type+1 )
!PARM[1] = WHMISC2[0]
!PARM[5]=22 ! PRODGROUP CHANNEL
! CALL "MXPRODGRP5",PARM[]
!Call ProdGroup(e$,intco,Parm[])
!if custom_customer$<>"SWP" ! !disable-task#9932 11/2011-wmb
!	IF PARM[2] = 0 OR PARM[3] = 0 GOTO L_8390:
!endif
!! IF PARM[2] = 0 OR PARM[3] = 0 GOTO L_8390: 
!------------------------------------------
If W1$[1,12] = "Z ZZZZZZZZZZ" Goto L_8390
Gosub L_2500 !QTY B/O
TYPE = 0;Type[1]=0;type[2]=0 ! see L_5500 or L_5800 for type desc's
! for this report it's dead, overstock or both ONLY
! Prompt for number of days no sale
!2%,LastSoldDate               : Item 62 ! W2[6]
!let daysnosls=tmp$
!and number of days no receipts to determine Dead Stock.
!2%,LastRecptDate              : Item 428 ! WH7[0] 
!let daysnorct=tmp$
! Prompt for number of months AMU to use to calculate Over Stock.
! 3%,UsgRate                    : Item 132 ! W3[9] (needs convert to UM)
! moamu=tmp$
T9 = (W3[0] - W3[2] - QTYBO) + W3[1] ! avail
if t9=0 and allprod<>1 goto L_8390 ! no stock - NO DS OR OS!!
if t9<0 and Not(Incl_NOH) goto L_8390 ! NO NEG AVAIL
x2=w2[6] \ gosub ymd2jul \ x2=0
jdate[3]=x2
if jdate[0]-jdate[3]>daysnosls let type=1 ! no curr sales
x2=wh7[0] \ gosub ymd2jul \ x2=0
let jdate[4]=x2
if jdate[0]-jdate[4]>daysnorct let type[1]=1 ! no curr rcpts
let tmamu=w3[9]*moamu
if tmamu<0 let tmamu=0 ! neg amu? NO
if t9>tmamu let type[2]=1  !overstock
!If T9 < W3[6] Let TYPE = 1
!If Not(TYPE) If T9 < W3[5] Let TYPE = 3
!If W7[12] = 6 If T9 <= W3[3] Let TYPE = 1
!If W7[12] = 6 If T9 > W3[3] Or (W3[3] = 0 And T9 = 0) Let TYPE = 0
!If W1[1] Let TYPE = 4
if allprod<>1 ! not all
	If ALLPROD = 2 If (Type=0 OR type[1]=0) Goto L_8390 ! Dead only? 2=fail sls AND rcpts
	if allprod = 3 if not(Type[2]) goto L_8390 ! overstk only
	if allprod=0 if (Type=0 or type[1]=0 or type[2]=0) goto L_8390 ! want both if any=0 fails
endif
Gosub L_6360 !READ PRODUCT
If B[24] If Not(W2[3]) Let W2[3] = B[24]
If Not(W2[3]) Let W1[2] = 0
If W2[3] Gosub L_6000 ! vendtag
If PRDNF Goto L_8390
If SBUYER > W1[2] Or EBUYER < W1[2] Goto L_8390
!If IVSELECT Let VENDSEL[1] = W2[3] \ Gosub L_10300 \ Goto L_8390
If IVSELECT ! individ vendor
	tmp$=W2[3] using "######"
	Search #14,2,1;tmp$,R[11],E \ If E Goto L_8390
endif
If Not(IVSELECT) And (SVENDOR > W2[3] Or EVENDOR < W2[3]) Goto L_8390
L_8560: !
K9$ = " ",K9$
K9$[1,3] = W1[2] Using "###" ! buyer
If SORT$ = "V" Let K9$[1,3] = "   "
K9$[4,9] = W2[3] Using "######" ! vendor
!If SRTNUM <> -99 Let K9$[10,10] = A$[156,156] ! matcode
!
!If SRTNUM <> -99 Let K9$[11,(10 + SRTNUM)] = W1$[1,SRTNUM]
!IF XFNPPR IF SRTNUM=(-99) LET K9$[11,22]=C1$[1,12] ! xfnppr=fine paper flag c1$=grade/grain?
! - If Not(FNPPR(IF_)) Let SRTNUM = (-99)
! K9$[10,11] = B[11] Using "##"
! K9$[12,23] = W1$[1,12]
! - End If 
!IF NOT(XFNPPR) IF SRTNUM=(-99)
	LET K9$[10,11]=B[11] USING "##";K9$[12,23]=W1$[1,12] ! ctgy/prodcode(whse?)
!ENDIF
K9$[24,25] = W1[0] Using "##"
!IF NOT(XFNPPR) GOTO L_8605:
!K9$[26,33] = A[4] Using "#####.##" ! basis
!K9$[34,41] = C4[0] Using "#####.##" ! size wdth
!K9$[42,49] = C4[1] Using "#####.##" ! size lngth
L_8605: !
	LET K9$[26,26]=type USING "#" ! "was 47,47 ! no sls
	LET K9$[27,27]=type[1] USING "#" ! "was 47,47 ! no rcpt
	LET K9$[28,28]=type[2] USING "#" ! "was 47,47 ! overstk
	LET K9$[29,31]=CT USING "###" ! "was 48,50 ! tiebreak
R91 = R9
!
Search #9,4,1;K9$,R91,E
If E = 1
  CT = CT + 1
  If CT > 999 Goto L_8630
  Goto L_8560
End If 
L_8630: 
Goto L_8390 ! next record
!
L_8650: Rem SORT NON STOCK ITEMS NOT ORDERED
Return ! not for dead/overstk report!

!
! Get selected warehouses
SelWarehouse:
!!-!K9$[1,1] = "W"
CLRSORTLOOP: Rem "
Search #9,3,1;K9$,R0,E 
If E=0
  Search #9,5,1;K9$,R0,E 
!  If E Let e$ = "syserrorfile 690d sortfile mode (m)=5 keyno (k)=1 r=",R0," e=",e," keyval (k$)=",K9$ \ error 10000
  Goto CLRSORTLOOP
endif
X1=1 \ EOF=0
!
GetNextWarehouse:
if EOF return ! end of warehouses
call StringSearch(SelWhse$,X1,",",X2)
if X2=-1 let X2=len(SelWhse$)+1 \ EOF=1
WHSE=SelWhse$[X1,X2-1] \ X1=X2+1
K9$ = "W",WHSE Using "###"
Search #9,4,1;K9$,R0,E 
If E goto GetNextWarehouse 
goto GetNextWarehouse
return
!
L_10000: Rem INDIVIDUAL VENDOR SELECTS
F$ = Spc(6) Using "6/SORTWORK&&&&!"
FILE$ = "[1:1] ",F$
L_15470: 
E = 0 \ If Err 0 Let E = Spc(8)
Build #14,FILE$
If E = 40 Close #14 \ Goto L_15470
If Err 0 Gosub ERR_TRAP
RR[99] = 50 \ Search #14,0,1;F$,RR[99],E \ If E let e$="Can't build ",FILE$,"!" \ error 10000
RR[99] = 1 \ Search #14,0,0;F$,RR[99],E \ If E let e$="Can't build ",FILE$,"!" \ error 10000
RR[99] = 0 \ Search #14,1,0;F$,RR[99],E \ If E let e$="Can't build ",FILE$,"!" \ error 10000
return
!

L_10300: Rem CHECK FOR VALID VENDOR
For CT = 0 To Chf(14) - 1
  Read #14,CT,0;VENDSEL[0];
  If VENDSEL[0] = VENDSEL[1] Return 1
Next CT
Return 
!
L_11000: Rem "========================== adjust this year buckets for fiscal year
X7 = BOYMONTH
For I = 0 To 12
  If I Let W5[I] = Z5[X7] Else Let W5[0] = Z5[0]
  If I Let ADJW5[I] = ADJZ5[X7] Else Let ADJW5[0] = ADJZ5[0]
  If I If X7 = ARMONTH Let I = 13
  If I Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
Return 
!
L_11100: Rem "========================== adjust last year buckets for fiscal year
X7 = BOYMONTH;X8 = 0
For I = 0 To 12
  If Not(I) Let W6[0] = Z6[0] \ ADJW6[0] = ADJZ6[0] \ Goto L_11170
  If Not(X8) Let W6[I] = Z6[X7] Else Let W6[I] = Z5[X7]
  If Not(X8) Let ADJW6[I] = ADJZ6[X7] Else Let ADJW6[I] = ADJZ5[X7]
L_11170: If I If X7 = ARMONTH Let X8 = 1
  If I Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
Return 
!
L_12000: ! seems to be a copy of earlier code
REQTY = 0
If W3[9] > 0 If (W3[13] * COST) <> 0 Let REQTY = FNR(Sqr((24 * FIXPO * W3[9]) / (W3[13] * COST))) \ W3[10] = REQTY
If REQTY > (W3[9] * 12) Let REQTY = W3[9] * 12;EX_CODE = 1
If REQTY < (W3[9] * .25) Let REQTY = W3[9] * .25;EX_CODE = 2
If REQTY < (W2[1] * W3[9])
  REQTY = (W2[1] * W3[9]) \ EX_CODE = 4
End If 
If (C4[9]) <> 0 And (REQTY > (C4[9] * W3[9]))
  REQTY = (C4[9] * W3[9]) \ EX_CODE = 5
End If 
If W7[6] > 0 And W7[6] <= 3
  If ((W3[0] - W3[2] - QTYBO) + (W3[1] + TRANSIN_QTY)) < W3[6]
    REQTY = REQTY + W3[6] - ((W3[0] - W3[2] - QTYBO) + (W3[1] + TRANSIN_QTY))
    If (W3[5] - W3[6]) > 0 Let REQTY = REQTY + ((W3[5] - W3[6]) / 2)
    EX_CODE = 7
  End If 
End If 
Gosub L_12410
Return 
!
L_12220: Rem "========================== order qty using INV CLASS (#2)
If W7[6] = 13 Let REQTY = 0 \ Goto L_12250
REQTY = W3[9] * W7[6]
L_12250: Return 
!
L_12260: Rem "========================== order qty using SEASONAL (#3)
Goto L_12000
X7 = ARMONTH + 1;X2 = 1;REQTY = 0;EX_CODE = 3
L_12290: If X7 > 12 Let X7 = 1
If X2 > 3 Goto L_12340
If ADJZ5[X7] Let REQTY = REQTY + ADJZ5[X7] Else Let REQTY = REQTY + Z5[X7]
X7 = X7 + 1;X2 = X2 + 1
Goto L_12290
L_12340: REQTY = REQTY + (REQTY * WH7[1] / 100)
Return 
!
L_12350: Rem "========================== order qty using MIN/MAX (#6)
If W3[3] < (W3[0] + W3[1] - W3[2] - QTYBO) + TRANSIN_QTY Let REQTY = 0 \ Goto L_12390
REQTY = W3[4] - ((W3[0] + W3[1] - W3[2] - QTYBO) + TRANSIN_QTY)
L_12390: If REQTY < 0 Let REQTY = 0
L_12400: Return 
!
L_12410: Rem ROUND UP TO QTY IN Vendor Order/PURCHASING UM
For UNT = 1 To 7
  If PFU1[20] And PFU1[UNT] = PFU1[20] Goto L_12460
Next UNT
L_12420: Rem "Only to Purchasing
For UNT = 1 To 7
  If PFU1[UNT] = PFU1[10] Goto L_12460
Next UNT
FACTOR = 1 \ Goto L_12480
L_12460: If PFU1[UNT] <= 0 Let FACTOR = 1 \ Goto L_12480
FACTOR = PFU2[UNT - 1] \ If FACTOR <= 0 Let FACTOR = 1
L_12480: If Fra(REQTY / FACTOR) ! " >=.5 ALWAYS ROUND UP A Fraction
  REQTY = Int(1 + (REQTY / FACTOR)) * FACTOR
End If 
Return 
!
L_12570: Rem NO CALC
Return 
L_12600: ! ORDER ONLY IF A SALES ORDER IS ON THE SYSTEM. W0[0]=2
LET REQTY=(W3[2]+QTYBO)-(W3[0]+W3[1])
IF REQTY<0 LET REQTY=0
RETURN 

L_13000: ! BEGIN SCAN
RETURN 
LET BASE_REQTY=REQTY
 

L_14000: ! PRINT REC TRANSFER AMOUNTS BASED ON SURPLUSE QTY
RETURN 


L_15000: ! print amu for each warehouse
LET CTAMU=0;X=13
LET WHAMU$=" ",WHAMU$;WHAMU$[1,12]=W1$[1,12]
L_15020: SEARCH #8,3,1;WHAMU$,RWHAMU,E
IF E GOTO L_15100:
IF WHAMU$[1,12]<>W1$[1,12] GOTO L_15100:
X0 = whamu$[13,14] ! let's print amu's on what's selected
If SWHSE > 0 ! "did a range
  If X0 < SWHSE Goto L_15020
  If X0 > EWHSE Let whamu$[13,14] = "99" \ Goto L_15020
  ! WHSE = X1
Else ! "check if on file
  K19$ = " ",K19$
  K19$[1,1] = "W"
  K19$[2] = X0 Using "###"
  Search #9,2,1;K19$,R0,E 
  If E = 1 Goto L_15020
End If 
MAT  READ #8,RWHAMU,78;WHAMU_W3;
IF WHAMU_W3[9]=0 GOTO L_15060:
LET CNVTU[0]=0;CNVTU[1]=PFU1[qUNITtype];CNVTU[2]=5;CNVTA=WHAMU_W3[9]
GOSUB L_6870: \ LET WHAMU_W3[9]=AMOUNT
L_15060: IF CTAMU>=5 PRINT #0;"" \ LET V9[1]=V9[1]+1;X=13;CTAMU=0
IF V9[1]>=V9[4] GOSUB L_5800:
LET CTAMU=CTAMU+1
PRINT #0; TAB X;"WHSE ";WHAMU$[13,14];" AMU=";
PRINT #0; USING "-----#.##  ";WHAMU_W3[9];
GOTO L_15020:
L_15100: IF CTAMU PRINT #0;"" \ LET V9[1]=V9[1]+1
RETURN 

!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: ! 

L_20120: Rem "====== unibasic 5+ logic
Gosub L_25000
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ rem  ! - Gosub ERR_SEARCH
L_20160: Return 
!
L_25000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 3%
BUNIT = 0
If CNVTU[2] <> 5 Goto L_25180
BUNIT = 1
CNVTU[2] = 1
Goto L_25190
L_25180: BUNIT = 0
L_25190: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_25250,L_25350,L_25350,L_25640
e$="Error converting units!" \ error 10000
L_25250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_25330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_25330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_25330
  Next X1[2]
  FLAG = 1 \ Goto L_25650
L_25330: Next X1[1]
FLAG = 0 \ Goto L_25650
L_25350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_25530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_25460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_25450
  Next CUNIT
  FLAG = 0 \ Goto L_25650
L_25450: If CUNIT = 0 Goto L_25530
L_25460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_25510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 ! " Catch Weight Item
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_25530: Next X1[1]
If CNVTU[2] <> 1 Goto L_25580
If BUNIT Goto L_25580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_25580: If CNVTU[2] <> 2 Goto L_25630
If Not(CNVTU[1]) Goto L_25630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_25630: FLAG = 0 \ Goto L_25650
L_25640: Rem
L_25650: Rem RETURN FROM MODES 0-2
Return 
!
L_30000: Rem ===== set n/s units for conversions
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1];PFU1[13] = UN[0]
PFU1[16] = EUN[0];PFU1[17] = EUN[0];PFU1[18] = UN[0]
PFU1[19] = UN[0]
PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
!
L_31000: Rem ADD UP TRANSFER QTY AND FUTURE AMOUNTS
TRANSIN_QTY = 0
FUTUREQTY=0
KTR$ = " ",KTR$;KTR$[1,6] = PROD_REC Using "######"
L_31030: Search #7,3,2;KTR$,LINE_REC,E
If E Goto L_31360
X2 = KTR$[1,6]
If PROD_REC <> X2 Goto L_31360
Mat Read #7,LINE_REC;L2;
Mat Read #7,LINE_REC,32;L5;
Mat Read #7,LINE_REC,56;L6;
Mat Read #7,LINE_REC,80;L$;
Mat Read #7,LINE_REC,140;L1$;
Mat Read #7,LINE_REC,160;L9;
Mat Read #7,LINE_REC,168;L7;
Mat Read #7,LINE_REC,260;S3;
Mat Read #7,LINE_REC,250;UN;
Mat Read #7,LINE_REC,256;S2;
Mat Read #7,LINE_REC,370;S3$;
Mat Read #7,LINE_REC,404;OLM;
Mat Read #7,LINE_REC,446;EUN;
Mat Read #7,LINE_REC,452;UNF;
MAT READ #7,LINE_REC,16;L4;
For X = 0 To 12
  H0[X] = 0;H5[X] = 0
Next X
For ST = 1 To 7
  K12$[1,2] = ST Using "##"
  K12$[3,8] = L2[1] Using "######"
  Search #12,2,1;K12$,R12,E 
  If E Goto L_31310
  Mat Read #12,R12,0;H0;
  Mat Read #12,R12,104;H5;
  mat read #12,R12,486;OWHT;
  IF L4[3]<1 OR L4[3]>99
	MAT READ #12,R12,78;H4;
	LET L4[3]=H4[2]
  ENDIF
  Goto L_31320
L_31310: 
Next ST
Goto L_31030

L_31320: ! ADD AMOUNTS FOR TRANSFER AND FOR FUTURE
if h5[7]=16
	if owht[0]=0 ! whse from? if not same?
		if whse=H5[11] let req_qty=req_qty+(L7[2] - L7[0]) ! to
		if whse=L4[3] let req_qty=req_qty-(L7[2]-L7[0]) ! from
	Endif
	if owht[0]=1 and whse=h5[11] ! only approved and for to
		TRANSIN_QTY = TRANSIN_QTY + (L7[2] - L7[0])
	Endif

Endif
If L4[3] <> WHSE Goto L_31030
IF H5[7]=5 ! FUTURE ORDER
	LET FUTUREQTY=FUTUREQTY+(L7[2]-L7[0])
	GOTO L_31030
endif

Goto L_31030
L_31360: Rem GET MORE TRANSFER INFO
!COMP = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
COMP = intCO
K16$ = " ",K16$ \ K16$[1,12] = W1$[1,12]
L_31380: 
Search #16,3,2;K16$,R[16],E
If E = 2 Goto L_31510
If K16$[1,12] <> W1$[1,12] Goto L_31510
Mat Read #16,R[16],0;TRL1;
If TRL1[0] = 2 Goto L_31380
If TRL1[7] <> 0 Goto L_31380
Mat Read #16,R[16],22;TRL3;
Mat Read #15,TRL3[1],0;TR1;
If COMP <> TR1[4] Goto L_31380
If W1 <> TR1[5] Goto L_31380
If TR1[1] <> 2 Goto L_31380
TRANSIN_QTY = TRANSIN_QTY + (TRL3[3])
Goto L_31380
L_31510: Return 

calc_days_supply: ! days supply 
LET DEMNDDAY=W3[9]/BDAYS[0]  
IF DEMNDDAY<0 LET DEMNDDAY=0 
LET QTYTMP=W3[0]-W3[2]-QTYBO+W3[1]+TRANSIN_QTY
  LET DAYSUPPLY=0
  !! IF MODE=5 ! "calc days supply on hand over line/min point
    IF DEMNDDAY ! "only if they got demand
      IF W7[12]<>6 ! Use LinePoint
        LET DAYSUPPLY=INT(((QTYTMP-W3[5])/DEMNDDAY)+.99)
        IF W3[5]=0 AND W3[6]=0 LET DAYSUPPLY=9999
      ENDIF 
      IF W7[12]=6 ! "Use Min/Max
        LET DAYSUPPLY=INT(((QTYTMP-W3[3])/DEMNDDAY)+.99)
        IF W3[3]=0 AND W3[4]=0 LET DAYSUPPLY=9999
      ENDIF 
    ELSE 
      LET DAYSUPPLY=9999
    ENDIF 
  !! ENDIF 
  IF DAYSUPPLY<0 LET DAYSUPPLY=0
  IF DAYSUPPLY=9999 AND INZERO LET DAYSUPPLY=998
  IF DAYSUPPLY>999 AND DAYSUPPLY<>9999 LET DAYSUPPLY=999
  RETURN

!
parseCommaString:
!!-!print commaString$ 
!!-!  XX$=""
!!-!  Search #verifChannel,3,1;XX$,R12,E
!!-!  stop!!ver
If commaString$ 
  tmp$=commaString$
 nextItem:
  X2 = 0 \ Let X$ = tmp$ To "," : X2
  XX$=trim$(X$)
  X$=" ",X$
  aa=len(XX$)
  if aa>0
    if alphanumeric
	  X$[1,aa]=XX$
	else
      X$[keyLength-aa+1,keyLength]=XX$
	endif
  endif
  XX$=" ",XX$
  XX$=X$[1,keyLength]
  !
  Search #verifChannel,2,1;XX$,R12,E
  if E errorFlag=1 \ tmp$=XX$ \ Return
  Search #parseChannel,4,1;XX$,R12,E 
  !
  if E errorFlag=2 \ Return
  if Len(tmp$)<x2 Return
  if X2 let tmp$=tmp$[X2+1] \ goto nextItem
else
  errorFlag=3 \ Return
endif
Return
!
OUTEND: Rem OUT
!If IVSELECT Close #14 \ Kill BUILD_$
If IVSELECT Close #14 \ Kill F$
! dx close


End 

Rem {begin srcdevl/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 

YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1

YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
!
Rem {end rtn.date.i}
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
