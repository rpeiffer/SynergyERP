! >>> Program 389
!
! description Purchasing Receipts to Stock History 
!
! loadsave -w -n 100,10 -o prog/dxport/389.dl4 src/389.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG  5, 2005  16:21:16
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/po/po389.src (univ2) [txc] {56128}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem PO389.s - RECEIPTS TO STOCK HISTORY
Rem rev:   12/29/95 - kmm - taken from mx784b
Rem           4/30/97 tc cct102702 print extended amts, number prompts
!
Declare Intrinsic Sub DateToJulian,InpBuf,JulianToDate,StrSrch44,String,Time
! - Option Default Dialect IRIS1

External Lib "ubsfunc.dl4"
Declare External Function OpenMySQLBrowserOutput,GetMySQLReportHeader
Declare External Sub AddMySQLReportColumnHeadings
Declare External Function AddMySQLReportData
Declare External Sub FinishMySQLReport

include "src/inc/fileprod.inc"

Com 1%,COST,UNIT
Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
try
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
External Lib "libprodconv.lib"             
Declare External Function ConvProdAmount 

Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim AccessCode$[10],ReasonCode$[300]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim 1%,LN,LT1[3],PRONTO[1],CH_PROD,CH_INVTRNS,CH_CCODES,CH_CNTRL,CH_SORT,ctlc
Dim 1%,DPORT[1024],SORT,SPOKE,SORTPO,PAGEBREAK,AccessRec[1024],CH_RSN,THISRSN
Dim 1%,FLAGRF[1],COMP,CX2,SORTMISC,PAGEBREAK2,RSN_LIST[99],RTS_START,RTS_END
Dim 1%,ALLRSN,PREVRSN,SORTNAME$[20],L1[5]
Dim 2%,L2[2],DSP_L2[2]
Dim 2%,B[24],UNIT$[4],LT3[1],SEL_VEN[1],THISRSN$[50]
Dim 2%,D1,D2,W1,CURDAT,OFFSET,Q0[1],RSN_COUNT[100]
Dim 3%,LT2[5],TOTEXT,PTTOTEXT,REC_PROD,TOTQTY,PTTOTQTY,EXTCOST
Dim 3%,J,X3,T9[20],SCRATCH2$[80],L3[6],WTADJ,R1,R3
DIM 3%,RSN_AMT[99],RSN_QTY[99],PO_QTY,PO_AMT,tmprsn$[20],2%,tmprsn,sortrtsflg
Dim K1$[50],NEW_K1$[50],K2$[12],K3$[12],P61$[256],T9$[26]
Dim LT0$[56],LT1$[6],A$[156],T1$[12],T2$[12],PREVCODE$[50],DATE$[10],WHEEL$[4]
Dim UM$[15],SCRATCH$[80],J8$[8],TC$[1],PRONTO$[1],CONAM$[30],DPORTS$[80]
Dim LINE_$[131],MASK$[11],PREVPO$[50],A1$[10],ACCESS$[80]
Dim K6$[15],VEND_A$[30],KEY5$[10],kprod$[20],vend_id$[6]
Rem RSNRTS file
Dim 3%,G2,G1[99],D$[24]
Dim 1%,MySQL_ch,reportAborted
Dim 3%,MySQLQueueID
Rem========
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3],CURDAT
Rem {end dim.prod.i}
Dim PR. as prod

Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
!
j8=0
try
	PGLEN = Chf(0) 
else
	J8 = Spc(8)
end try
If J8 If J8 <> 49 error j8
CURDAT = Tim(4)
! - X = Int(Tim(4) / 100)
! - CURDAT = ((Tim(4) - X * 100) * 10000) + X
!
! dx add xport reporting code
DXSetup:
Dim tmp$[600],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
For J = 2 To 7
  Read JA1
  If JA1 = -1 Goto L_830
  Read #1,88,JA1;J$;
  Ropen #J,J$
L_830: Next J
Data "2512","1792","1728","-1","2432","2400"
Ropen #5,"cntrl/usercntrl"
MAXREC = Chf(5)
! - COX2 = Spc(5)
! - COMP = Int((COX2 - Int(COX2 / 16384) * 16384) / 64)
J$ = intCO Using "2/RSNRTS#"
Ropen #8,J$
Rem
CH_RSN = 8
CH_CNTRL = 1
CH_INVTRNS = 2
CH_PROD = 3
CH_CCODES = 4
CH_SORT = 9
CH_POLINE = 6
CH_VEND = 7
Rem
! - SEL_VEN[0] = 0
! - SEL_VEN[1] = 999999
! - For J = 0 To 99 \ RSN_LIST[J] = 1 \ Next J
! - Window On 
PREVCODE$ = " ",PREVCODE$
Mat Read #1,0,100;J8$;
Read #1,3;CONAM$;
Mat Read #1,61,0;P61$;
! - FLAGRF = 0
! - FLAGRF[1] = 0
! - If P61$[22,22] = "Y" Or P61$[22,22] = "L" Let FLAGRF = 1
PGLEN = 60 \ If J8 Let PGLEN = 18
LN = PGLEN
WHEEL$ = "|/-"
Call String(4,220,WHEEL$[4])
LINE_$ = "-",LINE_$
Mat Read #1,115,40;Q0;
MASK$ = "#",MASK$
If Q0[1]
  SCR = Len(MASK$) - Q0[1]
  MASK$[SCR,SCR] = "."
End If 
If J8 ! dx xml, setup rstr$
  !<section>
  MySQL_ch = OpenMySQLBrowserOutput(e$)
  if MySQL_ch <> -1
	MySQLQueueID = GetMySQLReportHeader(e$,MySQL_ch,"389")
	if MySQLQueueID = 0
		e$ = "Could not get MySQL report header!"
		error 10000
	end if
  else
	tmp$ = bsdel$,"389",fdel$,rdel$
	Call addtostr(e$,rstr$,tmp$)
  end if
End If 
!
!  dx add xport reporting code
call dxget("costs",tmp$) \ if tmp$="" let COST=0 else COST=1 ! print costs
call dxget("um",tmp$) \ Unit=Rtrim$(tmp$)! unit type for report
call dxget("begprod",K2$) \ K2$=UCase$(rtrim$(K2$)),Blank$ ! starting product
call dxget("endprod",K3$) \ K3$=UCase$(rtrim$(K3$)),EndParam$ ! ending product
call dxget("begdate",tmp$) \ if Rtrim$(tmp$)="" let D1=010100 else D1=rtrim$(tmp$) ! starting date
call dxget("enddate",tmp$) \ if rtrim$(tmp$)="" let D2=CURDAT else D2=rtrim$(tmp$) ! ending date
call dxget("begvendor",tmp$) \ SEL_VEN[0]=tmp$ ! starting vendor
call dxget("endvendor",tmp$) \ if rtrim$(tmp$)="" let SEL_VEN[1]=999999 else SEL_VEN[1]=tmp$ ! ending vendor
call dxget("whse",tmp$) \ W1=tmp$ ! warehouse
call dxget("receipts",TC$) ! receipts type  p=po  m=misc  b=both
call dxget("reasoncode",ReasonCode$) ! reason code format (1,2,4,5) <cr> for all
call dxget("pronto",PRONTO$) ! pronto  p=pronto  n=normal  b=both
call dxget("access",tmp$) \ AccessCode$=UCase$(rtrim$(tmp$)) ! access code
call dxget("sortby",tmp$) \ Sort=tmp$ ! sort by (list)
call dxget("rf",tmp$) \ FlagRF[1]=tmp$ ! rf  r=rf  n=non-rf  b=both
!  dx end
!
! unit of measure type
UM$ = " ",UM$
If Unit = 1 Let UM$ = "STOCK U/M "
If Unit = 2 Let UM$ = "SELL U/M "
If Unit = 3 Let UM$ = "PURCH. U/M "
If Unit = 4 Let UM$ = "COSTING U/M"
If Unit = 5 Let UM$ = "PRICING U/M"
!
! product section
if K3$<K2$ let e$="Invalid ending product, must be >= starting product!" \ error 10000
!
! starting date
tmp$ = D1 Using "&&&&&&" \ DATE$=tmp$[5,6],tmp$[1,4]
Call DateToJulian(1,DATE$,DATE$,E)
If E let e$="Invalid starting date!" \ error 10000
D1 = DATE$
!
! ending date
tmp$ = D2 Using "&&&&&&" \ DATE$=tmp$[5,6],tmp$[1,4]
Call DateToJulian(1,DATE$,DATE$,E)
If E let e$="Invalid ending date!" \ error 10000
D2 = DATE$
if D2<D1 let e$="Invalid ending date, must be >= to the starting date!" \ error 10000
!
! vendor section
If SEL_VEN[0]<0 Or SEL_VEN[0]>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
if SEL_VEN[1]<SEL_VEN[0] or SEL_VEN[0]>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
! warehouse
If W1<0 Or W1>99 let e$="Invalid warehouse, must be between 0 and 99!" \ error 10000
!
! reason codes
For J = 0 To 99 \ RSN_LIST[J] = 1 \ Next J
For J = 0 to 99 \ rsn_amt[j]=0\next j
FOR J = 0 to 99 \ rsn_qty[j]=0\next j
If ReasonCode$ 
  ALLRSN=0
  tmp$=ReasonCode$
  X = 1
  For cnt = 1 To 99 \ RSN_LIST[cnt] = 0 \ Next cnt
NextType:
  X2 = 0 \ Let X$ = tmp$ To "," : X2
  X1 = X$ \ If X1 < 1 Or X1 > 99 Let X = 0 \ Goto ExitType
  RSN_LIST[X1] = 1 
  if X2 let tmp$=tmp$[X2+1] \ goto NextType
ExitType:
  if X=0 let e$="Invalid reason code entered!" \ error 10000
else
  for cnt=1 to 99 \ RSN_LIST[cnt]=1 \ next cnt
  ALLRSN=1
endif
!
! access code
AccessCode=AccessCode$ \ if AccessCode let AccessCode=1
if AccessCode$
  KEY5$ = AccessCode$
  Search #5,2,1;KEY5$,REC,E
  If E let e$="Can't find the access code '",AccessCode$,"'!" \ error 10000
  AccessRec[REC] = REC
endif
!
! sort by
sortrtsflg=0
SORTMISC = 0;SORTPO = 0;PAGEBREAK = 0;PAGEBREAK2 = 0
If Sort = 1 Let SORTNAME$ = "PURCHASE ORDER #";SORTPO = 1;PAGEBREAK = 1;SORT = 0
If Sort = 2 Let SORTNAME$ = "ACCESS/PO";SORT = 1
If Sort = 3 Let SORTNAME$ = "REASON/PO";SORT = 1;SORTMISC = 1;PAGEBREAK2 = 1;sortrtsflg=3
If Sort = 4 Let SORTNAME$ = "REASON/ACCESS";SORTMISC = 1;PAGEBREAK2 = 1
!
If J8 = 0 or MySQLQueueID !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  ! try call dxclose() else rem
End If 
!
! - REPORT_PROMPT: Rem
! - X$ = " ",X$
! - Print 'CS';
! - Print @0,20;"Use P. O. Buyer Notification Worksheet Format? (<Y>/N) ";
! - Input Len 16385;""X$
! - Call String(1,X$)
! - If X$ = "" Or X$ = "Y" Chain "po389a"
! - If X$ <> "N" Goto REPORT_PROMPT

!
! - ASK_QUEST: Rem
! - Print 'CS';
! - Print @20,0;"RECEIPTS TO STOCK TRANSACTIONS"
! - Print @1,2;" 1> Print Costs (Y/<cr>) : ";
! - Print @10,4;" 1: STOCK      3: PURCHASING     5: PRICING "
! - Print @10,5;" 2: SELL       4: COST"
! - Print @1,6;" 2> Unit to use on the report :";
! - Print @1,8;" 3> ITEM CODE STARTING:"
! - Print @45,8;"ENDING:"
! - Print @1,9;" 4> DATE (MMDDYY) STARTING:"
! - Print @45,9;"ENDING:";
! - Print @1,10;" 5> PRIMARY VENDOR STARTING:"
! - Print @45,10;"ENDING:"
! - Print @1,11;" 6> Warehouse #, <CR> for All : ";
! - Print @1,12;" 7> P: P.O. receipts  M: misc receipts or  B: both : ";
! - Print @1,15;" 8> P: pronto accepted  N: normal accepted or  B: both : ";
! - Print @1,17;" 9> Access Code (s) : ";
! - Print @14,18;"Selected : All"
! - Print @1,20;"10> Sort by : ";
! - If FLAGRF = 1 Print @1,21;"11> R: RF entered  N: non-RF entered or  B: both : ";
! - For PROMPT = 1 To 10 \ Gosub PROMPT_SUBS \ Next PROMPT
! - If FLAGRF = 1 For PROMPT = 11 To 11 \ Gosub PROMPT_SUBS \ Next PROMPT
! - Goto PROCEED_QUEST
! - PROMPT_SUBS: Rem
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On PROMPT Gosub COST_QUEST,UNIT_QUEST,PROD_QUEST_1,DATE1_QUEST
! - On PROMPT - 4 Gosub VENDOR_QUEST,WHSE_QUEST,TC_QUEST,PRONTO_QUEST
! - On PROMPT - 8 Gosub ACCESSCODE_QUEST,SORT_QUEST
! - If FLAGRF = 1 On PROMPT - 10 Gosub RF_QUEST
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
! - COST_QUEST: Rem
! - J1 = 0
! - J0$ = "6 00012902"
! - Gosub ISINPUT
! - COST = J1
! - Return 
! - UNIT_QUEST: Rem
! - J1 = 1
! - J0$ = "3 00013406"
! - Gosub ISINPUT
! - UNIT = J1
! - If UNIT < 1 Or UNIT > 5 Goto UNIT_QUEST
! - UM$ = " ",UM$
! - If UNIT = 1 Let UM$ = "STOCK U/M "
! - If UNIT = 2 Let UM$ = "SELL U/M "
! - If UNIT = 3 Let UM$ = "PURCH. U/M "
! - If UNIT = 4 Let UM$ = "COSTING U/M"
! - If UNIT = 5 Let UM$ = "PRICING U/M"
! - Return 
! - PROD_QUEST_1: Rem
! - J1$ = ""
! - J0$ = "2 00122808"
! - Gosub ISINPUT
! - K2$ = J4$
! - PROD_CHECK = 0
! - Gosub PROD_QUEST_CHECK
! - If PROD_CHECK Goto PROD_QUEST_1
! - Rem  return
! - PROD_QUEST_2: Rem
! - J1$ = "zzzzzzzzzzzz"
! - J0$ = "2 00125308"
! - Gosub ISINPUT
! - K3$ = J4$
! - PROD_CHECK = 0
! - Gosub PROD_QUEST_CHECK
! - If PROD_CHECK Goto PROD_QUEST_2
! - Return 
! - PROD_QUEST_CHECK: Rem
! - If K3$ = "" Let K3$ = "zzzzzzzzzzzz"
! - If K2$ > K3$
! -   Print @0,23;"INVALID RANGE ! ";'CE';
! -   Signal 3,15
! -   PROD_CHECK = 1
! - End If 
! - Return 
! - DATE1_QUEST: Rem
! - D1 = 0
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00062909"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto DATE1_QUEST
! - D1 = DATE$
! - DATE_CHECK = 0
! - Gosub DATE_QUEST_CHECK
! - If DATE_CHECK Goto DATE1_QUEST
! - Rem  return
! - DATE2_QUEST: Rem
! - D2 = 0
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00065309"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto DATE2_QUEST
! - D2 = DATE$
! - DATE_CHECK = 0
! - Gosub DATE_QUEST_CHECK
! - If DATE_CHECK Goto DATE2_QUEST
! - Return 
! - DATE_QUEST_CHECK: Rem
! - If D2 And D1 > D2
! -   Print @0,23;"INVALID RANGE ! ";'CE';
! -   Signal 3,15
! -   DATE_CHECK = 1 \ Return 
! - End If 
! - Return 
! - VENDOR_QUEST: Rem
! - J1 = SEL_VEN[0]
! - J0$ = "3 00062910"
! - Gosub ISINPUT
! - SEL_VEN[0] = J1
! - J1 = SEL_VEN[1]
! - J0$ = "3 00065510"
! - Gosub ISINPUT
! - SEL_VEN[1] = J1
! - If SEL_VEN[0] > SEL_VEN[1] Goto VENDOR_QUEST
! - If SEL_VEN[0] < 0 Or SEL_VEN[0] > 999999 Goto VENDOR_QUEST
! - If SEL_VEN[1] > 999999 Or SEL_VEN[1] < 0 Goto VENDOR_QUEST
! - Return 
! - WHSE_QUEST: Rem
! - J1 = 0
! - J1$ = ""
! - J0$ = "3 00023311"
! - Gosub ISINPUT
! - W1 = J1
! - Return 
! - TC_QUEST: Rem
! - Print @1,14;'CL';
! - J1$ = "B"
! - J0$ = "2 00015412"
! - Gosub ISINPUT
! - If J$ <> "P" And J$ <> "B" And J$ <> "M"
! -   Print 'RB';
! -   Goto TC_QUEST
! - End If 
! - TC$ = J$
! - If TC$ = "M" Or TC$ = "B" Gosub GET_MISCRTS_REASON
! - If TC$ = "P"
! -   For X = 0 To 99 \ RSN_LIST[X] = 1 \ Next X
! -   ALLRSN = 1
! - End If 
! - Rem
! - Return 
! - GET_MISCRTS_REASON: Rem list of codes
! - Window Open @1,1; Size 78,20; Using " Select Misc RTS Reason Codes to include "
! - Gosub RTSREASON_REDRAW
! - ASK_MISCRTS_REASON: Rem
! - Print @1,2;" Enter reason codes to toggle off/on: "
! - J1$ = ""
! - J0$ = "2   054002" \ J5$ = "Enter code# or code#-code# for range or E to End) "
! - Gosub ISINPUT
! - If J4$ = "" Goto DONE_MISCRTS_REASON
! - If J4$ = "E" Or J4$ = "e" Goto DONE_MISCRTS_REASON
! - If J4$ = "-" Goto ASK_MISCRTS_REASON
! - Search J4$,"-",J1
! - If J1 Gosub RTSREASON_RANGE
! - If Not(J1) Let J4 = J4$ \ If J4 > 99 Goto ASK_MISCRTS_REASON
! - If Not(J1) Gosub RTSREASON_SINGLE
! - Gosub RTSREASON_REDRAW
! - Goto ASK_MISCRTS_REASON
! - DONE_MISCRTS_REASON: Rem
! - Window Close 
! - ALLRSN = 1
! - THISRSN = 0
! - For J1 = 1 To 99
! -   If RSN_LIST[J1] = 0
! -     ALLRSN = 0
! -   Else 
! -     THISRSN = THISRSN + 1
! -   End If 
! - Next J1
! - If TC$ <> "P"
! -   If ALLRSN Print @24,13;"ALL REASON CODES SELECTED               "
! -   If Not(ALLRSN) Print @24,13;Str$(THISRSN);"/99 REASON CODES SELECTED"
! - End If 
! - Return 
! - RTSREASON_REDRAW: Rem
! - For J1 = 1 To 20
! -   Print @J1 * 3 - 2,5;"   ";
! -   TMP$ = J1 Using "##"
! -   If RSN_LIST[J1] Print @J1 * 3 - 2,5;TMP$;" ";
! - Next J1
! - For J1 = 21 To 40
! -   Print @((J1 - 20) * 3 - 2),6;"   ";
! -   If RSN_LIST[J1] Print @((J1 - 20) * 3 - 2),6;Str$(J1);
! - Next J1
! - For J1 = 41 To 60
! -   Print @((J1 - 40) * 3 - 2),7;"   ";
! -   If RSN_LIST[J1] Print @((J1 - 40) * 3 - 2),7;Str$(J1);
! - Next J1
! - For J1 = 61 To 80
! -   Print @((J1 - 60) * 3 - 2),8;"   ";
! -   If RSN_LIST[J1] Print @((J1 - 60) * 3 - 2),8;Str$(J1);
! - Next J1
! - For J1 = 81 To 99
! -   Print @((J1 - 80) * 3 - 2),9;"   ";
! -   If RSN_LIST[J1] Print @((J1 - 80) * 3 - 2),9;Str$(J1);
! - Next J1
! - Return 
! - RTSREASON_RANGE: Rem  reason 1 through 9 or whatever. (1-9 12-14)
! - RTS_START = J4$[1,J1 - 1]
! - If RTS_START < 1 Or RTS_START > 99 Return 
! - RTS_END = J4$[J1 + 1,Len(J4$)]
! - If RTS_END < 1 Or RTS_END > 99 Return 
! - If RTS_START > RTS_END Return 
! - For J4 = RTS_START To RTS_END
! -   Gosub RTSREASON_SINGLE
! - Next J4
! - Return 
! - RTSREASON_SINGLE: Rem toggles them off or on.
! - If RSN_LIST[J4] = 1
! -   RSN_LIST[J4] = 0
! - Else 
! -   RSN_LIST[J4] = 1
! - End If 
! - Return 
! - PRONTO_QUEST: Rem
! - J1$ = "B"
! - J0$ = "2 00015715"
! - Gosub ISINPUT
! - If J$ <> "P" And J$ <> "B" And J$ <> "N"
! -   Print 'RB';
! -   Goto PRONTO_QUEST
! - End If 
! - PRONTO$ = J$
! - Return 
! - ACCESSCODE_QUEST: Rem
! - ACCESS$ = ""
! - Mat ACCESS = Zer
! - ACCESSCODE = 0
! - ACCESS_INPUT: Rem
! - Print @0,22;'CL';
! - J1$ = ""
! - J5$ = "Enter individual access code, or <CR> when done."
! - J0$ = "2 00102417"
! - Gosub ISINPUT
! - Call String(1,J$)
! - If J$ = "" Or J$[1,2] = "  " Goto END_ACCESSCODE_QUEST
! - KEY5$ = " ",KEY5$
! - KEY5$ = J$
! - Search #5,2,1;KEY5$,REC,E
! - If E
! -   Print @0,22;'CL';"Can't find the access code" \ Signal 3,20
! -   Goto ACCESS_INPUT
! - End If 
! - ACCESS[REC] = REC
! - If ACCESS$ = ""
! -   ACCESS$ = ACCESS$ + J$
! - Else 
! -   ACCESS$ = ACCESS$ + "," + J$
! - End If 
! - Print @14,18;"Selected : ";ACCESS$;'CL';
! - Goto ACCESS_INPUT
! - END_ACCESSCODE_QUEST: Rem
! - If ACCESS$ = ""
! -   ACCESSCODE = 0
! -   ACCESS$ = "ALL"
! - Else 
! -   ACCESSCODE = 1
! - End If 
! - Print @14,18;"Selected : ";ACCESS$;'CL';
! - J5$ = " ",J5$
! - J5$ = ""
! - Return 
! - DPORT_QUEST: Rem
! - DPORTS$ = ""
! - Mat DPORT = Zer
! - DPORT = 0
! - DPORT_INPUT: Rem
! - Print @15,17;'CL';
! - Input ""SCRATCH$
! - If SCRATCH$ = "" Goto END_PORT_QUEST
! - SCR = 0
! - Call StrSrch44(1,"-",SCRATCH$,SCR)
! - If SCR ! a range was entered
! -   X = SCRATCH$[1,SCR - 1]
! -   SCR = SCRATCH$[SCR + 1]
! - Else 
! -   SCR = SCRATCH$
! -   X = SCR
! - End If 
! - For INDX = X To SCR
! -   If INDX
! -     If DPORT[INDX]
! -       DPORT[INDX] = 0
! -     Else 
! -       DPORT[INDX] = 1
! -     End If 
! -   End If 
! - Next INDX
! - DPORTS$ = ""
! - X = 0
! - SCR = 0
! - For INDX = 1 To 1024
! -   If DPORT[INDX]
! -     If Not(X)
! -       X = INDX
! -     End If 
! -   Else 
! -     If X
! -       If DPORTS$ <> ""
! -         DPORTS$ = DPORTS$ + ","
! -       End If 
! -       If X = INDX - 1
! -         DPORTS$ = DPORTS$ + Str$(X)
! -       Else 
! -         DPORTS$ = DPORTS$ + Str$(X) + Str$( - (INDX - 1))
! -       End If 
! -       X = 0
! -     End If 
! -   End If 
! - Next INDX
! - Print @14,18;"Selected : ";DPORTS$;'CL';
! - Goto DPORT_INPUT
! - END_PORT_QUEST: Rem
! - If DPORTS$ = ""
! -   DPORT = 0
! -   DPORTS$ = "ALL"
! - Else 
! -   DPORT = 1
! - End If 
! - Print @14,18;"Selected : ";DPORTS$;'CL';
! - Return 
! - SORT_QUEST: Rem
! - J1 = 1
! - Window Open @10,10; Size 40,8; Using "Sort Options"
! - Print " 1> Purchase Order #"
! - Print " 2> Access Code /PO #"
! - Print " 3> Reason Code / PO #"
! - Print " 4> Reason Code / Access Code"
! - J0$ = "3   013018"
! - Print @1,19;"Enter sort method: ";
! - Gosub ISINPUT
! - Window Close 
! - SORT = J1
! - If SORT < 1 Or SORT > 4 Goto SORT_QUEST
! - Print @15,20;"                   "
! - SORTMISC = 0;SORTPO = 0;PAGEBREAK = 0;PAGEBREAK2 = 0
! - If SORT = 1 Let SORTNAME$ = "PURCHASE ORDER #";SORTPO = 1;PAGEBREAK = 1;SORT = 0
! - If SORT = 2 Let SORTNAME$ = "ACCESS/PO";SORT = 1
! - If SORT = 3 Let SORTNAME$ = "REASON/PO";SORT = 1;SORTMISC = 1;PAGEBREAK2 = 1
! - If SORT = 4 Let SORTNAME$ = "REASON/ACCESS";SORTMISC = 1;PAGEBREAK2 = 1
! - Print @15,20;SORTNAME$
! - Return 
! - RF_QUEST: Rem
! - FLAGRF[1] = 0
! - J1$ = "B"
! - J0$ = "2 00015521"
! - Gosub ISINPUT
! - If J$ <> "R" And J$ <> "B" And J$ <> "N"
! -   Print 'RB';
! -   Goto RF_QUEST
! - End If 
! - If J$ = "R" Let FLAGRF[1] = 1
! - If J$ = "N" Let FLAGRF[1] = 2
! - Return 
! - PROCEED_QUEST: Rem
! - Print @0,23;'CL';"ENTER  #:field to edit  P: print  R: reselect all  E: exit ";
! - Input ""SCRATCH$
! - PROMPT = SCRATCH$
! - If PROMPT Gosub PROMPT_SUBS \ Goto PROCEED_QUEST
! - Call String(1,SCRATCH$)
! - If SCRATCH$ = "E" Goto OUTEND
! - If SCRATCH$ = "R" Goto ASK_QUEST
! - If SCRATCH$ <> "P" Print 'RB'; \ Goto PROCEED_QUEST
!
! *** Process Section
T1$ = " ",T1$ \ T2$ = " ",T2$
T1$[1,Len(K2$)] = K2$[1,Len(K2$)] \ T2$[1,Len(K3$)] = K3$[1,Len(K3$)]
K1$ = D1 Using "&&&&&"
K3$ = D2 Using "&&&&&"
MAIN: Rem
! - Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
! - If J8 Print 'CS';
! - If Err 0 Gosub ERR_ESCAPE
LET PO_AMT=0;PO_QTY=0
	FOR CTR=0 TO 99\LET RSN_QTY[CTR]=0\NEXT CTR
	FOR CTR=0 TO 99\LET RSN_AMT[CTR]=0\NEXT CTR
If SORT Or SORTPO Or SORTMISC
  Gosub DO_SORT
  CH = CH_SORT
  K1$ = " ",K1$
Else 
  CH = CH_INVTRNS
End If 
!
if J8 ! dx xml headings
  !
  if SORTPO=1 let tmp$="VENDOR",fdel$,"NAME",fdel$ else tmp$="" ! by po
  tmp$=tmp$,"TRANS#",fdel$,"LOT CODE",fdel$,"ITEM CODE",fdel$
  tmp$=tmp$,"DESCRIPTION",fdel$,"SOURCE/DEST",fdel$
  tmp$=tmp$,"COMMENT",fdel$,"TC",fdel$,"TYPE",fdel$,"DATE",fdel$
  tmp$=tmp$,"LOCATION",fdel$,"WH",fdel$,"ACCESS",fdel$
  tmp$=tmp$,"PVENDOR",fdel$,"PRNTO",fdel$,"RF",fdel$
  tmp$=tmp$,"AMOUNT",fdel$,"EXT WT",fdel$
  tmp$=tmp$,"QUANTITY",fdel$,"UM",fdel$
  if Cost
    tmp$=tmp$,"PO COST",fdel$,"PO U/M",fdel$
	tmp$=tmp$,"AVG COST",fdel$,"COST U/M",fdel$
    tmp$=tmp$,"EXTEND PO",fdel$
  endif
  !
  if MySQLQueueID
	call AddMySQLReportColumnHeadings(e$,MySQL_ch,MySQLQueueID,fdel$,tmp$)
  else
	call addtostr(e$,rstr$,tmp$+rdel$)
  end if
end if
!
!gosub Header
K1$ = " ",K1$;NEW_K1$ = " ",NEW_K1$
If SORT And SORTPO Let OFFSET = SORT * 16
If SORT And Not(SORTPO) Let OFFSET = 10
If Not(SORT) And SORTPO Let OFFSET = 6
If Not(SORT) And Not(SORTPO) Let OFFSET = 0
	If sort<>0 and sortrtsflg<>0 let offset=16 
If SORTPO Let PREVPO$ = ""
If TC$ = "M" Let PREVRSN = 1 Else Let PREVRSN = -1
MAIN_LOOP: Rem
Search #CH,3,1;NEW_K1$,R1,E
If SORTMISC ! if sort by misc rts reason
  K1$ = NEW_K1$[3]
  THISRSN = NEW_K1$[1,2]
  RSN_COUNT[THISRSN] = RSN_COUNT[THISRSN] + 1
  If THISRSN <> PREVRSN ! control break
    If PREVRSN <> -1 Gosub PRINT_RSN_TOTAL
    If PREVRSN <> -1 If PAGEBREAK2 Let LN = PGLEN
    Gosub HEADER
    PREVRSN = THISRSN
  End If 
Else 
  K1$ = NEW_K1$
End If 
If E goto Done
if sortrtsflg=0
	if K1$[1 + OFFSET,(Len(K3$)) + OFFSET] > K3$ Goto DONE
endif
if reportAborted goto OUTEND:
PREVCODE$[1,5] = K1$[1 + OFFSET,5 + OFFSET]
Mat Read #CH_INVTRNS,R1,0;LT0$;
Mat Read #CH_INVTRNS,R1,56;LT1;
Mat Read #CH_INVTRNS,R1,64;LT2;
Mat Read #CH_INVTRNS,R1,100;LT1$;
Mat Read #CH_INVTRNS,R1,106;LT3;
Mat Read #CH_INVTRNS,R1,114;PRONTO;
Mat Read #CH_INVTRNS,R1,118;WTADJ;
If LT0$[37,40] = "VEN#"
  VENDNUM = LT0$[42,47]
  VEND_ID$=vendnum USING "######"
  Gosub GET_VEND
End If 
If SORTPO
  If PREVPO$[1,OFFSET] <> K1$[1,OFFSET]
    If Len(PREVPO$) <> 0 And PAGEBREAK Gosub PRINT_POTOTAL
    PREVPO$[1,OFFSET] = K1$[1,OFFSET]
    If PAGEBREAK Let LN = PGLEN
    Gosub HEADER
    Gosub PRINT_VEND
  End If 
End If 
If LT0$[25,32] = "MISC RTS" ! if it's a miscrts
  THISRSN$ = LT0$[37,56]
   FOR J1=LEN(THISRSN$) TO 1 STEP -1                                     
     IF THISRSN$[J1,J1]="/" GOTO SLASH_FOUND:                            
  NEXT J1                                                               
SLASH_FOUND: LET THISRSN=THISRSN$[J1+1,LEN(THISRSN$)] ! get the rsn #   
  If Not(ALLRSN)
    If RSN_LIST[THISRSN] = 0 Goto MAIN_LOOP
  End If 
Else 
  THISRSN = 0
End If 
A1$ = " ",A1$
If LT1[2] < MAXREC - 1 And LT1[2] > 0
  Mat Read #5,LT1[2],260;A1$;
Else 
  A1$ = " ",A1$
  A1$ = "NOT VALID "
End If 
If LT1[2] = -1 !"super user
  A1$ = " ",A1$
  A1$ = "SYSTEM    "
End If 
If Not(SORT) And Not(SORTPO) And Not(SORTMISC)
  If LT0$[1,12] < T1$[1,12] Goto MAIN_LOOP
  If LT0$[1,12] > T2$[1,12] Goto MAIN_LOOP
  If B[24] < SEL_VEN[0] Or B[24] > SEL_VEN[1] Goto MAIN_LOOP
  If W1 If W1 <> LT1[1] Goto MAIN_LOOP
  If PRONTO$ = "P" And Not(PRONTO) Goto MAIN_LOOP
  If PRONTO$ = "N" And PRONTO Goto MAIN_LOOP
  If FLAGRF[0] = 1 And FLAGRF[1] = 2 And PRONTO[1] Goto MAIN_LOOP
  If FLAGRF[0] = 1 And FLAGRF[1] = 1 And Not(PRONTO[1]) Goto MAIN_LOOP
  If LT1[0] <> 1 And LT1[0] <> 7 And LT1[0] <> 30 Goto MAIN_LOOP
  If TC$ = "P" And LT1[0] <> 1 Goto MAIN_LOOP
  If TC$ = "M" And LT1[0] = 1 Goto MAIN_LOOP
  If LT1[2] = -1 If ACCESSCODE Goto MAIN_LOOP
  If LT1[2] >= 0 If ACCESSCODE And AccessRec[LT1[2]] = 0 Goto MAIN_LOOP
End If 
Gosub READ_PROD1
If LT1 >= 15 Let LT2[2] = 0 - LT2[2]
J = LT1 - 1
Read #1,108,(J * 15);J3$[1,15];
Gosub HEADER
Gosub PRINT_LINE
! - Signal 2,J0,A,B \ If J0 <> -1 Gosub L_9615
Goto MAIN_LOOP
!
READ_PROD1: Rem  reading the product (now need multiple places)
UNIT$ = "    "
A$ = "NOT FOUND ",A$
J2$ = LT0$[1,12]
Search #3,2,1;J2$,REC_PROD,E 
If E Goto END_READ_PROD1
Rem {begin src/inc/read.prod.i}
read record #ch_prod,rec_prod,0;pr.
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Mat Read #CH_PROD,REC_PROD,628;AGEDAY
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Mat Read #CH_PROD,REC_PROD,1270;PRD0
Mat Read #CH_PROD,REC_PROD,1282;PRIML$
Mat Read #CH_PROD,REC_PROD,1294;PRD1
Mat Read #CH_PROD,REC_PROD,1304;PRD2
Rem {end read.prod.i}
Gosub DO_CONVERSIONS
END_READ_PROD1: Rem
Return 
!
! *** Sort Section
DO_SORT: Rem
K1$ = " ",K1$
! - Print @0,23;"Clearing Sort file";
SORTCLEAR_LOOP: Rem
Search #CH_SORT,3,1;K1$,R1,E
If E Goto CLEAR_DONE
Search #CH_SORT,5,1;K1$,R1,E
If E Let e$ = "syserrorfile 389 sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K1$ \ error 10000
Goto SORTCLEAR_LOOP
CLEAR_DONE: Rem
! - Print @0,23;"Sorting...        ";'K0';
K1$ = " ",K1$
K1$ = D1 Using "&&&&&"
SORT_LOOP: Rem
Search #CH_INVTRNS,3,1;K1$,R1,E
If Not(E) And K1$[1,Len(K3$)] <= K3$
  SPOKE = SPOKE + 1
  If SPOKE > 40 Let SPOKE = 1
  If Not(Fra(SPOKE / 10))
    SCR = Int(SPOKE / 10)
    ! - Print @12,23;WHEEL$[SCR,SCR];
  End If 
  PREVCODE$[1,5] = K1$[1,5]
  Mat Read #CH_INVTRNS,R1,0;LT0$;
  Mat Read #CH_INVTRNS,R1,64;LT2;
  Mat Read #CH_INVTRNS,R1,56;LT1;
  Mat Read #CH_INVTRNS,R1,100;LT1$;
  Mat Read #CH_INVTRNS,R1,106;LT3;
  Mat Read #CH_INVTRNS,R1,114;PRONTO;
  If LT1[2] < MAXREC - 1 And LT1[2] > 0
    Mat Read #5,LT1[2],260;A1$;
  Else 
    A1$ = " ",A1$
    A1$ = "NOT VALID "
  End If 
  If LT1[2] = -1 !"super user
    A1$ = " ",A1$
    A1$ = "SYSTEM    "
  End If 
  Gosub READ_PROD1
  If LT0$[25,32] = "MISC RTS" ! if it's a miscrts
    ! THISRSN$ = LT0$[37,56]
    ! Search THISRSN$,"/",J1
    let thisrsn$=" 0"+lt0$[33,56]
	for j1=len(thisrsn$) to 1 step -1
		if thisrsn$[j1,j1]>="0" and thisrsn$[j1,j1]<="9" goto rparse:
	next j1
rparse: 	thisrsn$=thisrsn$[1,j1]
	for j1=len(thisrsn$) to 1 step -1
		if thisrsn$[j1,j1]<"0" or thisrsn$[j1,j1]>"9" goto rparse2:
	next j1
rparse2:	thisrsn=thisrsn$[j1+1]	! get the reason #
    !If Not(ALLRSN) ! if we don't want all rsn codes
    !  THISRSN = THISRSN$[J1 + 1,Len(THISRSN$)]
    ! End If 
    If RSN_LIST[THISRSN] = 0 Goto SORT_LOOP
  Else 
    THISRSN = 0
  End If 
  If LT0$[1,12] < T1$[1,12] Goto SORT_LOOP
  If LT0$[1,12] > T2$[1,12] Goto SORT_LOOP
  If B[24] < SEL_VEN[0] Or B[24] > SEL_VEN[1] Goto SORT_LOOP
  If W1 If W1 <> LT1[1] Goto SORT_LOOP
  If PRONTO$ = "P" And Not(PRONTO) Goto SORT_LOOP
  If PRONTO$ = "N" And PRONTO Goto SORT_LOOP
  If LT1[0] <> 1 And LT1[0] <> 7 And LT1[0] <> 30 Goto SORT_LOOP
  If TC$ = "P" And LT1[0] <> 1 Goto SORT_LOOP
  If TC$ = "M" And LT1[0] = 1 Goto SORT_LOOP
  If LT1[2] = -1 If ACCESSCODE Goto SORT_LOOP
  If LT1[2] >= 0 If ACCESSCODE And AccessRec[LT1[2]] = 0 Goto SORT_LOOP
  gosub parseponum:
  SCRATCH$ = " ",SCRATCH$
  If SORT
    If Not(SORTPO)
      SCRATCH$ = A1$
		If sortrtsflg=3 and ponum<>0 
				let scratch$=" ",scratch$
				let scratch$[11,16] = ponum using "######"
				let scratch$[17]=""
			endif
    Else 
      SCRATCH$ = A1$
      ! SCRATCH$ = SCRATCH$ + LT0$[29,34]
	  scratch$ = scratch$ + (ponum using "######")
    End If 
  Else 
    If SORTPO
      ! SCRATCH$ = LT0$[29,34]
	  scratch$ = ponum using "######"
    End If 
  End If 
  THISRSN$ = THISRSN Using "&&"
  If SORTMISC Let SCRATCH2$ = THISRSN$ + SCRATCH$ \ SCRATCH$ = SCRATCH2$
  SCRATCH$ = SCRATCH$ + K1$
  Search #CH_SORT,4,1;SCRATCH$,R1,E
  If E Let e$ = "syserrorfile 389 sortfile mode (m)=4 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",SCRATCH$ \ error 10000
  Goto SORT_LOOP
End If 
! Print 'K2';
Return 
!
DO_CONVERSIONS: Rem CONVERSIONS HERE
Mat UWORK = Zer
UWORK[0] = 0
UN[0] = 0
UN[0] = PFU1[UNIT + 7]
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = LT2[2] \ Gosub CONVERT
LT2[2] = AMOUNT
CNVTU[2] = 2;CNVTA = LT2[5]
If COST
  Gosub CONVERT \ UWORK[0] = AMOUNT
  CNVTU[2] = 6;CNVTA = LT2[3]
  Gosub CONVERT \ UWORK[1] = AMOUNT
  CNVTU[2] = 6;CNVTA = LT2[4]
  Gosub CONVERT \ UWORK[2] = AMOUNT
End If 
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = A[0] \ Gosub CONVERT
A[0] = AMOUNT
UNIT$ = "    "
If UN[0] = -1 Let UNIT$ = "CWT "
If UN[0] = -2 Let UNIT$ = "LOT "
If UN[0] = -3 Let UNIT$ = "LB  "
If UN[0] > 0 Read #CH_CCODES,UN[0],10;UNIT$;
Return 
!
HEADER: Rem HEADINGS ROUTINE
if J8 return ! dx xml
!
If LN < PGLEN Return 
If JA2
  If J8=0 Print #0;"\14\";
End If 
JA2 = JA2 + 1 \ LN = 10
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;J8$; Tab (64 - Len(CONAM$) / 2);CONAM$; Tab 120;"PAGE";JA2
Print #0;" - 389 - ";T9$;
Print #0; Tab 52;"RECEIPTS TO STOCK HISTORY"
Print #0;" "
Print #0; Tab 20;"SORTED BY: ";SORTNAME$;"   ";
If TC$ <> "P"
  If ALLRSN Print #0;" ALL REASON CODES"
  If Not(ALLRSN) Print #0;"ONLY FOR *SELECTED* REASON CODES"
End If 
Print #0; Tab 1;"TRANS#";
Print #0; Tab 8;"LOT CODE";
Print #0; Tab 20;"ITEM CODE";
Print #0; Tab 32;"DESCRIPTION";
Print #0; Tab 62;"SOURCE/DEST";
Print #0; Tab 74;"COMMENT";
Print #0; Tab 94;"TC";
Print #0; Tab 109;"DATE";
Print #0; Tab 117;"LOCATION";
Print #0; Tab 130;"WH"
Print #0; Tab 1;"ACCESS";
Print #0; Tab 12;"PVENDOR";
Print #0; Tab 66;"QUANTITY UM";
Print #0; Tab 84;"PO COST";
Print #0; Tab 99;"AVG COST";
Print #0; Tab 115;"EXTEND PO";
Print #0;""
Print #0;LINE_$
Print #0;" "
Return 
!
PRINT_LINE: Rem PRINT LINE ! **** line 1 ****
  ! If LT0$[25,27] = "PO#"
  ! PONUM = LT0$[29,34]
  ! POLINENUM = LT0$[35,36]
gosub parseponum:
IF ponum 
  Gosub GET_POLINE
Else ! "misc rts
  If A$[127,127] = "Y" ! "catch weight RTS
    L3[5] = WTADJ;L1[5] = -3
    CNVTA = LT2[3] \ If CNVTA = 0 Let CNVTA = LT2[4]
    CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
    Gosub CONVERT
    DSP_L2[0] = AMOUNT
  Else 
    L1[5] = 0
  End If 
End If 
!
if J8 ! dx xml
  if SORTPO=1 and LT0$[25,32] <> "MISC RTS"
	let tmp$=LT0$[42,47],fdel$,rtrim$(VEND_A$[1,30]),fdel$ 
  else
    if sortpo=1 and LT0$[25,32] = "MISC RTS"
		let tmp$=fdel$,fdel$
	else
		tmp$=""
	endif
  Endif
  tmp$=tmp$,R1 Using "#######",fdel$,rtrim$(LT0$[13,24]),fdel$
  tmp$=tmp$,rtrim$(LT0$[1,12]),fdel$,rtrim$(A$[9,38]),fdel$
  tmp$=tmp$,rtrim$(LT0$[25,36]),fdel$
  If Not(SORTPO) or LT0$[25,32] = "MISC RTS"
	let tmp1$=rtrim$(LT0$[37,56]) 
  else 
	tmp1$=""
  Endif
  tmp$=tmp$,tmp1$,fdel$
  tmp$=tmp$,LT1[0] Using "##",fdel$,J3$[1,8],fdel$
  X2 = LT3[0] \ Gosub L_7700
  tmp$=tmp$,rtrim$(X$[1,8]),fdel$,LT1$,fdel$
  tmp$=tmp$,LT1[1] Using "##",fdel$
  If SORT let tmp1$=K1$[1,10] else tmp1$=A1$[1,10]
  tmp$=tmp$,tmp1$,fdel$
  tmp$=tmp$,Str$(B[24]),fdel$
  If PRONTO let tmp1$="PRNTO" else tmp1$=""
  tmp$=tmp$,tmp1$,fdel$
  If FLAGRF = 1 If PRONTO[1]
    tmp1$="RF"
  else
    tmp1$=""
  endif
  tmp$=tmp$,tmp1$,fdel$
  If L1[5] = -3 Or A$[127,127] = "Y"
    tmp$=tmp$,DSP_L2[0] Using "---###.##/LB",fdel$
    tmp$=tmp$,L3[5] Using "------#.##",fdel$
  else
    tmp$=tmp$,"",fdel$,"",fdel$
  End If 
  tmp$=tmp$,LT2[2] Using "-------#.##",fdel$,UNIT$[1,4],fdel$
  If COST<>0
    EXTCOST = FNR(LT2[2] * UWORK[1])
    If Not(EXTCOST) If LT1[0] <> 1 Let EXTCOST = FNR(LT2[2] * UWORK[2])
    If L1[5] = -3 And L3[5] Let EXTCOST = FNR(DSP_L2[0] * L3[5])
    If L1[5] <> -3
      tmp$=tmp$,UWORK[1] Using MASK$,fdel$,UNIT$,fdel$
      tmp$=tmp$,UWORK[2] Using MASK$,fdel$,UNIT$,fdel$
    else if L3[5] = 0
      tmp$=tmp$,"** NO WGT ENTERED, USE STD **",fdel$
	  tmp$=tmp$,"",fdel$,"",fdel$,"",fdel$
    else
	 tmp$=tmp$,"",fdel$,"",fdel$,"",fdel$,"",fdel$
	End If 
    tmp$=tmp$,EXTCOST Using "-------#.##",fdel$
	

  End If 
  !
  if MySQLQueueID
	if not(AddMySQLReportData(e$,MySQL_ch,MySQLQueueID,fdel$,tmp$))
		! possible user abort - report deleted exit now
		reportAborted = 1
	end if
  else
	call addtostr(e$,rstr$,tmp$+rdel$)
  end if
  return

end if
!
Print #0; Using "#######"; Tab 0;R1;
Print #0; Tab 8;LT0$[13,24];
Print #0; Tab 20;LT0$[1,12];
Print #0; Tab 32;A$[9,38];
Print #0; Tab 62;LT0$[25,36];
If Not(SORTPO) Print #0; Tab 74;LT0$[37,56];
Rem  PRINT #0; TAB 74;LT0$[37,56];
Print #0; Using "##"; Tab 95;LT1[0];" ";J3$[1,8];
X2 = LT3[0] \ Gosub L_7700
Print #0; Tab 107;X$[1,8];
Print #0; Tab 116;LT1$;
Print #0; Using "##"; Tab 130;LT1[1];
Print #0;""
If SORT
  Print #0; Tab 1;K1$[1,10];
Else 
  Print #0; Tab 1;A1$[1,10];
End If 
Print #0;Str$(B[24]);" ";
If PRONTO Print #0;"PRNTO";
If FLAGRF = 1 If PRONTO[1] Print #0;" RF";
Rem    PRINT #0; TAB 32;A$[63,92];
If L1[5] = -3 Or A$[127,127] = "Y"
  Print #0; Using "---###.##/LB"; Tab 32;DSP_L2[0];
  Print #0; Using "EXT WT:------#.##"; Tab 45;L3[5];
End If 
Print #0; Using "-------#.##/"; Tab 62;LT2[2];
Print #0;UNIT$[1,4];
EXTCOST = FNR(LT2[2] * UWORK[1])
If Not(EXTCOST) If LT1[0] <> 1 Let EXTCOST = FNR(LT2[2] * UWORK[2])
If L1[5] = -3 And L3[5] Let EXTCOST = FNR(DSP_L2[0] * L3[5])
If COST
  If L1[5] <> -3
    Print #0; Using MASK$; Tab 80;UWORK[1];"/";UNIT$;
    Print #0; Using MASK$; Tab 95;UWORK[2];"/";UNIT$;
  End If 
  If L1[5] = -3 And L3[5] = 0
    Print #0; Tab 81;"** NO WGT ENTERED, USE STD **";
  End If 
  Print #0; Using "-------#.##"; Tab 115;EXTCOST;
End If 
Print #0;" "
Print #0;" "
LN = LN + 3
TOTEXT = TOTEXT + EXTCOST \ PTTOTEXT = PTTOTEXT + EXTCOST
TOTQTY = TOTQTY + LT2[2] \ PTTOTQTY = PTTOTQTY + LT2[2]
if LT0$[25,32] = "MISC RTS" 
		Tmprsn$ = LT0$[37,56]
		FOR J1=LEN(THISRSN$) TO 1 STEP -1                                     
			IF tmpRSN$[J1,J1]="/" GOTO rsnFOUND1:                            
		NEXT J1                                                               
		rsnFOUND1: ! 
		LET TmpRSN=TmpRSN$[J1+1,LEN(TmpRSN$)] ! get the rsn # ! tmprsn
		if tmprsn<0 or tmprsn>99 let tmprsn=0
		if cost<>0
			let rsn_amt[tmprsn]=rsn_amt[tmprsn]+extcost
		endif
		let rsn_qty[tmprsn]=rsn_qty[tmprsn]+LT2[2]
ELSE
	LET PO_QTY=PO_QTY+LT2[2]
	IF COST<>0
			LET PO_AMT=PO_AMT+EXTCOST
	ENDIF
ENDIF
Return 
!
PRINT_TOTAL: Rem
if J8 return ! dx xml
!
If Not(COST) Return 
If SORTPO And PAGEBREAK
  If Len(PREVPO$) <> 0 Gosub PRINT_POTOTAL
End If 
Gosub HEADER
Print #0; Tab 61;"============"; Tab 111;"==============="
Print #0;"REPORT TOTAL:";
Print #0; Using "--------#.##"; Tab 61;TOTQTY;
Print #0; Using "------------.##"; Tab 111;TOTEXT
TOTQTY = 0
TOTEXT = 0
LN = LN + 2
Return 
!
PRINT_POTOTAL: Rem
if J8 return ! dx xml
!
If Not(COST) Return 
Gosub HEADER
Print #0; Tab 61;"------------"; Tab 111;"---------------"
Print #0;"TOTAL FOR PO: ";
If SORT
  Print #0;PREVPO$[11,16];
Else 
  Print #0;PREVPO$[1,6];
End If 
Print #0; Using "--------#.##"; Tab 61;PTTOTQTY;
Print #0; Using "------------.##"; Tab 111;PTTOTEXT
PTTOTQTY = 0
PTTOTEXT = 0
LN = LN + 2
Return 
!
PRINT_RSN_TOTAL: Rem
if J8 return ! dx xml
!
If RSN_COUNT[PREVRSN] = 0 and rsn_qty[prevrsn]=0 and rsn_amt[prevrsn]=0 Return 
Gosub HEADER
Print #0; Tab 61;"------------"; Tab 111;"---------------"
Print #0;using "##";"TOTAL FOR REASON CODE: ";PREVRSN;" ";
If PREVRSN <> 0
  Mat Read #CH_RSN,PREVRSN,0;D$;
Else 
  D$[1,16] = "NOT MISC. RTS"
End If 
Print #0;D$[1,16]
Print #0; USING "######"; TAB 30;RSN_COUNT[PREVRSN];" Transactions";
IF PREVRSN<>0
	Print #0; Using "--------#.##"; Tab 61;rsn_qty[prevrsn];
	if cost<>0
		Print #0; Using "------------.##"; Tab 111;rsn_amt[prevrsn];
	endif
ELSE
	IF PO_QTY<>0 OR PO_AMT<>0
		Print #0; Using "--------#.##"; Tab 61;PO_qty;
		if cost<>0
			Print #0; Using "------------.##"; Tab 111;PO_amt;
		endif
	endif
ENDIF
print #0;""
LN = LN + 2
Return 
!
L_7700: Rem CONVERT FROM JULIAN
DATE$ = " ",DATE$;X$ = " ",X$
DATE$ = X2 Using "&&&&&"
Call JulianToDate(1,DATE$,DATE$,E) 
If E DATE$=Blank$
X$ = DATE$
Return 
!
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
ctlc=1
amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,pr.)
CVTDONE: Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end rtn.input.s}
GET_VEND: Rem=====================================================================
VEND_A$ = " ",VEND_A$;VEND_A$ = "NOT FOUND"
Search #CH_VEND,2,1;vend_id$,REC_VEND,E \ If E Return 
Mat Read #CH_VEND,REC_VEND,0;VEND_A$;
Return 
!
PRINT_VEND: Rem=================================================================
if J8=0
  Print #0; Tab 0;"VENDOR - (";LT0$[42,47];")  ";VEND_A$[1,30]
  Print #0;" "
  LN = LN + 2
endif
Return 
!
GET_POLINE: Rem cct172253
L1[5] = 0
LET KPROD$=" ",KPROD$
K6$ = " ",K6$
!K6$[1,6] = REC_PROD Using "######"
!K6$[7,12] = PONUM Using "######"
!K6$[13,15] = POLINENUM Using "###"
!Search #CH_POLINE,2,2;K6$,R6,E
LET KPROD$[1,12]=LT0$[1,12]
SEARCH #ch_prod,2,1;KPROD$,R3,E
!If E Goto END_GETPOLINE
If Not(E)
	LET K6$[1,6]=R3 USING "######"
	LET K6$[7,12]=ponum using "######"
	SEARCH #CH_POLINE,3,2;K6$,R6,E
	If E>2 Let e$ = "syserrorfile 389 sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K1$ \ error 10000
	IF NOT(E) AND val(K6$[7,12])=ponum
	  LET POLINENum=K6$[13,15]
	  Mat Read #CH_POLINE,R6,0;L1
	  Mat Read #CH_POLINE,R6,12;L2
	  Mat Read #CH_POLINE,R6,24;L3;
	  If L1[5] = -3
	    CNVTA = L2[0];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
	    Gosub CONVERT
	    DSP_L2[0] = AMOUNT
	  End If 
	ELSE 
		LET POLINENum=0
	ENDIF 
ELSE 
	LET POLINENum=0
ENDIF 
Return 
!
DONE: Rem
PREVRSN = THISRSN
Gosub PRINT_RSN_TOTAL
Gosub PRINT_TOTAL
! - If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
For K = 0 To 20
  T9[K] = 0
Next K
!
OUTEND: Rem
! dx close
If j8 ! dx xml
	if MySQLQueueID and not(reportAborted)
		call FinishMySQLReport(e$,MySQL_ch,MySQLQueueID)
	else
		Call addtostr(e$,rstr$,esdel$) !end section
		Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
	end if
End If 
!
! try call dxclose() else rem
End 
!
! - Print 'CS'
! - Close 
! - Chain "MX000"
!
Rem {end rtn.convert.s}
else ! man try
include "src/callmainerrnet.inc"
end try
End 
!
parseponum: ! search lt0$[25,36],"PO#",e
!if e=0 then ponum=0 \ return
!ponum=lt0$[27+e]
IF LT0$[25,26]<>"PO"
	LET PONUM=0
	RETURN
ENDIF
IF LT0$[27,27]="#"
	LET PONUM=LT0$[29,34]
ELSE
	LET PONUM=LT0$[27,32]
ENDIF
RETURN

	search lt0$[25,36],"PO#",e
	if E<>0
		let ponum=lt0$[27+e]
		let polineno=0
		return
	else
		if lt0$[25,26]="PO" and lt0$[33,33]="-"
			let ponum=lt0$[27,32] ! and e=0
			let poline=lt0$[34,36] 
			if poline<0 or poline>999
				let polineno=0
			endif
			return
		else
			ponum=0 
			polineno=0
			 return
		endif
	endif
return
