! mxload5L - product loaded cost calculations
!loadsave -w -n 100,10 -o prog/dxport/serpmxload5l.dl4 src/serpmxload5l.src
!
! ERPScheduler Enabled
!
include "src/copyright.inc"
Rem  MXLOAD5 PRODUCT LOADED COST CALCULATION
Rem  AUTHOR: G.DOSCHER  9/87
Rem NOTE:  CHANGES TO THIS PROGRAM LOGIC MUST BE DONE TO "price" PROGRAM
Rem        ALSO -- SEE "GetLoad" ROUTINE
Rem PASSED HERE: ORDER TYPE,WHSE,TABLE,PRODREC,COST
Rem PASSED BACK: COST (in base), FRGT ADDON (IN PREC[1])
Rem    IF WH IS PASSED & WHSE PRICING ON...USES WHSE COST ELSE PROD COSTS
Rem      SO FOR CHANGING SPROD LOADS - DO NOT SEND WAREHOUSE
Rem     FOR UPDATING FILE COSTS - DO NOT SEND COST IF BASE=5(entered)
Rem IF CNVTA PASSED W/-1 VALUE, DON'T DEFAULT WHSE VARIABLES TO PROD
Rem from MXLOAD5L - THIS VERSION S/B THE SAME EXCEPT PROD FILE STAYS LOCKED
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 14, 2005  12:57:02
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! PLEASE NOTE THERE ARE 2 VERSIONS IN HERE - 1.STD PAPERMASTER, 2.PASSED VARIABLES
Include "src/inc/fileprod.inc"
Include "src/inc/fileprodwhse.inc"
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
! Declare Function FNN,FNT,FNV
Declare Intrinsic Sub DateToJulian,InpBuf,ReadRef,String,programdump
Declare Intrinsic Function findchannel
dim buttonlist$[5,50],nextlist$[5,100] !error handling variables
External Sub Mxload5l(e$,OTYPE,WH,LTBL,PREC[],CNVTA,Intco,rstr$)
Try
! Option Default Dialect IRIS1
!If Err 0 Gosub ERR_TRAP
! Enter OTYPE,WH,LTBL,PREC[],CNVTA,Intco,e$,rstr$

Dim 1%,CNVTU[2],PFU1[20],WHSE,CHAN[9],WHSEPR,NODEF,WCHan[5]
Dim 2%,FUTURE
Dim 3%,A[33],PFU2[6],AMOUNT,COST
Dim 3%,A1[7],UWORK[20],PF_REC
Dim KSPWH$[50],FILENAME$[16],BLANK$[16]
Rem CHECK IF VALID SEND
NOPROD = 0 \ If PREC[0] < 0 Let NOPROD = 1;PREC[0] = Abs(PREC[0])
If PREC[0] = 0 Or LTBL = 0 Goto OUTEND
Try
If PREC[2] < 0 Let FUTURE = Abs(PREC[2])
Else
	Future=0
End try
If OTYPE = 0 Let OTYPE = 1
If OTYPE < 0
  COSTFORCE = 1
  OTYPE = Abs(OTYPE)
End If 
If WH Let WHSEPR = 1 Else Let WH = 1;WHSEPR = 0
If CNVTA = -999 Let NODEF = 1;CNVTA = 0
COST = CNVTA
PF_REC = PREC[0]
Dim 1%,LM1[37,5],M8,M5,LM3[37,3]
Dim 2%,X1[10],LM4[37,3]
Dim 1%,PFTB[3],WHPARC[5],2%,PFCO[3],PLC[3],W7[14],JDATE[5]
Dim 2%,LM2[37,3],D9[5],PF_C4[10],W2[9],M3[2],VENDOR
Dim 2%,J2,J3,J4,J5,J6,J8,J9[9],B[24],V1,X2[9]
Dim 3%,W3[24],WHMISC[6],R[50],M7,CCWT,PFPARC[3]
Dim 4%,J1
Dim A$[156],H1$[116],J$[45],J0$[12],J1$[40],J2$[16],J4$[80],J5$[76]
Dim J6$[16],J7$[46],J9$[45],K2$[30],K3$[30],K4$[30],T2$[95],T5$[12]
Dim X$[20],C1$[40],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Dim P9$[50],P60$[50],msg$[200]
Dim 2%,Q0[1]

Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
C2 = Intco ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
Try
	J1 = Chf(1)
Else
C1$ = "cntrl/CNTRL"+sTR$(C2)
Open #1,C1$
End try
L_800: Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,115;D9;
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
Rem SPROD, SPWH, LMTBL, VENTG   ! " files & channels needed
Read #1,88,1792;FILENAME$;
NUM = 1;CHAN = 0 \ Gosub L_1200 \ If Not(CHAN) Gosub L_1000
SPROD = CHAN
Read #1,88,1744;FILENAME$;
NUM = 2;CHAN = 0 \ Gosub L_1200 \ If Not(CHAN) Gosub L_1000
SPWH = CHAN
Read #1,150,32;FILENAME$;
NUM = 3;CHAN = 0 \ Gosub L_1200 \ If Not(CHAN) Gosub L_1000
LMTBL = CHAN
Goto L_900
Read #1,88,1120;FILENAME$;
NUM = 4;CHAN = 0 \ Gosub L_1200 \ If Not(CHAN) Gosub L_1000
VENTG = CHAN
L_900: Rem.
If FUTURE ! "see if really a date before continuing
  X$ = FUTURE Using "&&&&&&"
  Call DateToJulian(1,X$,X$,E)
  If E ! "bad date - bad!
    FUTURE = 0
    X$ = " ",X$
  End If 
  JDATE[0] = X$[1,5]
  If JDATE[0] And JDATE[0] < Tim(6) ! "passed date less than today
    JDATE[0] = Tim(6)
  End If 
  If JDATE[0] <= 0 Let FUTURE = 0
End If 
Goto L_1500
L_1000: Rem GET A CHANNEL TO OPEN ON (file not open on any channel)
!For X1 = 89 To 50 Step -1
! Try
!   J1 = Chf(X1)
!   ! if err - goto L_1080 ! OPEN CHANNEL!
!  Else
!	goto L_1080
!  End try
! Next X1
X1=findchannel() 
L_1080: Ropen #X1,FILENAME$
CHAN = X1;CHAN[NUM] = X1 ! if # in chan[xx] we opened(did not find open prev)
Return 
L_1200: Rem STD FILENAME SEARCH (find file already open & use that)
For X1 = 1 To 99
  H1$ = " ",H1$
  Try
	H1$ = Chf$(800 + X1)
	M = 1 \ Call String(M,H1$)
  M = 1 \ Call String(M,FILENAME$)
  M1 = 1;P1 = 0 \ Search H1$[M1],FILENAME$,P1 \ If P1 Goto L_1300
  Else
	Rem ! fail
  End try
L_1250: Next X1
CHAN = 0
Return 
L_1300: Rem FOUND THE FILE
CHAN = X1
Return 
L_1500: WHSE = WH
If WHSE < 1 Let WHSE = 1;WHSEPR = 0
If WHSE > D9[5] Let WHSE = 1;WHSEPR = 0
Rem CHECK ON LOCKED SPROD  RECORD
WChan[1]=0
Try
Read #SPROD,PF_REC,0,0;A$
Else
E = 1 \ Call ReadRef(E,SPROD)
WCHAN[1] = 0 - SPROD ! wchan[1]=neg - it was locked
End try
L_1590: Rem  ! READ PROD
Mat Read #SPROD,PF_REC,0;A$
Mat Read #SPROD,PF_REC,156;B
Mat Read #SPROD,PF_REC,256;A
Mat Read #SPROD,PF_REC,460;A1
Mat Read #SPROD,PF_REC,512;PFU1
Mat Read #SPROD,PF_REC,554;PFU2
Mat Read #SPROD,PF_REC,596;PFPARC
Mat Read #SPROD,PF_REC,846;PFTB
Mat Read #SPROD,PF_REC,894;PF_C4
Mat Read #SPROD,PF_REC,974;PFCO
Mat Read #SPROD,PF_REC,1002;PLC
if Wchan[1]>=0 unlock #SPROD ! not locked!
KSPWH$ = " ",KSPWH$;KSPWH$[1,12] = A$[140,151]
KSPWH$[13] = WHSE Using "##"
Search #SPWH,2,1;KSPWH$,R[2],E \ If E > 1 ERROR 11000 ! Gosub ERR_SEARCH
If E = 1 Goto L_1790
Gosub L_1800
Mat Read #SPWH,R[2],38;W2
Mat Read #SPWH,R[2],78;W3
Mat Read #SPWH,R[2],800;WHMISC
Mat Read #SPWH,R[2],384;WHPARC
Mat Read #SPWH,R[2],696;W7
if Wchan[2]>=0 Unlock #SPWH ! not locked 
Goto L_1900
W3[15] = B[21];W3[16] = B[10]
W3[18] = PF_C4[4];WHMISC[2] = PFPARC[2]
L_1790: Goto L_1900
L_1800: Rem CHECK SPRODWHSE FOR LOCKED RECORD
WChan[2]=0
Try
Read #SPWH,R[2],78,0;W3
Else
E = 1 \ Call ReadRef(E,SPWH)
WCHAN[2] = 0 - SPWH ! chan[2]=neg - record locked
End try
Return 
L_1900: Rem  i guess check load table for locks
If FUTURE Gosub SETPEND
If P9$[32,32] = "Y" And WHSEPR And Not(NODEF) Gosub L_69000
WChan[3]=0
Try
Read #LMTBL,LTBL,24,0;X1;
Else
E = 1 \ Call ReadRef(E,LMTBL)
WCHAN[3] = 0 - LMTBL
End try
L_2000: Rem GET TABLE
R[3] = LTBL \ If R[3] < 0 Or R[3] > Chf(LMTBL) - 1 Goto L_8900
Try
Mat Read #LMTBL,R[3],24;LM1;
Else
	goto L_8900
End try
Mat Read #LMTBL,R[3],480;LM2;
Mat Read #LMTBL,R[3],1100;LM3;
Mat Read #LMTBL,R[3],1404;LM4;
If COST And COSTFORCE Goto L_2200
If LM1[OTYPE - 1,4] = 0 Goto L_8900
If LM1[OTYPE - 1,4] = 5 If COST <= 0 Goto L_8900
BASE = LM1[OTYPE - 1,4]
If WHSEPR And P9$[32,32] = "Y"
  If BASE = 1 Let COST = W3[15]
  If BASE = 2 Let COST = W3[16]
  If BASE = 3 Let COST = W3[18]
  If BASE = 4 Let COST = WHMISC[2]
Else 
  If BASE = 1 Let COST = B[21]
  If BASE = 2 Let COST = B[10]
  If BASE = 3 Let COST = PF_C4[4]
  If BASE = 4 Let COST = PFPARC[2]
End If 
If NOPROD If BASE <> 5 Goto L_8900
L_2200: CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = COST
Gosub L_20000 \ M7 = AMOUNT
For M8 = 0 To 7
  If M8 <= 3 Let M6 = LM2[OTYPE - 1,M8];M5 = LM1[OTYPE - 1,M8]
  If M8 > 3 Let M6 = LM4[OTYPE - 1,M8 - 4];M5 = LM3[OTYPE - 1,M8 - 4]
  If Not(M6) Goto L_2290
  If M5 = 1 Let M7 = M7 + (M6)
  If Not(M5) Let M7 = M7 + (M7 * (M6 / 100))
  If M5 = 2 Let M7 = (M7 / (100 - M6)) * 100
  If M5 = 3 Gosub L_2500
L_2290: Next M8
If P9$[42,42] = "N" Let CNVTA = FNN(M7)
If P9$[42,42] = "T" Let CNVTA = FNT(M7)
If P9$[42,42] = "U" Let CNVTA = FNV(M7)
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
Gosub L_20000 \ M7 = AMOUNT
CNVTA = M7
Goto L_8900
L_2500: Rem CWT ADD/SUBTRACT
CNVTU[0] = -1;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = M6
Gosub L_20000 \ CCWT = AMOUNT
M7 = M7 + CCWT
Return 
Return 
VENDOR = B[24] \ If WHSEPR And W2[3] Let VENDOR = W2[3]
If VENDOR <= 0 Return 
J1$ = " ",J1$;J1$ = VENDOR Using "######"
Search #VENTG,2,1;J1$,R[4],E \ If E Goto L_3080
Mat Read #VENTG,R[4],386;M3;
If M3[2] < 0 Or M3[2] > 999.99 Goto L_3080
Goto L_3085
L_3080: M3[2] = 0
L_3085: PREC[1] = M3[2]
Return 
L_7820: Rem Convert yymmdd to julian (return+1=good, return=bad)
If X2 = 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
If E Return 
X2 = X$
Return 1
SETPEND: Rem "set pending future costs (Copied from "price")
If PFPARC[0] Let B[8] = PFPARC[0]
If PFTB[0] Let B[22] = PFTB[0]
If PFTB[1] Let PF_C4[3] = PFTB[1]
X2 = PFCO[1] \ Gosub L_7820 \ X2 = 0
JDATE[2] = X2
If PFCO[0] And JDATE[2] <= JDATE[0] ! "Pending Base and within Eff Date
  PF_C4[4] = PFCO[0]
End If 
X2 = PLC[1] \ Gosub L_7820 \ X2 = 0
JDATE[2] = X2
If PLC[0] And JDATE[2] <= JDATE[0] ! "Pending Last and within Eff Date
  B[10] = PLC[0]
End If 
If P9$[32,32] = "Y"
  If WHMISC[0] Let W3[17] = WHMISC[0]
  If WHPARC[4] Let WHPARC[0] = WHPARC[4]
  If WHPARC[5] Let WHPARC[1] = WHPARC[5]
  X2 = W7[3] \ Gosub L_7820 \ X2 = 0
  JDATE[2] = X2
  If W7[2] And JDATE[2] <= JDATE[0] Let W3[18] = W7[2]
  X2 = W7[13] \ Gosub L_7820 \ X2 = 0
  JDATE[2] = X2
  If W7[7] And JDATE[2] <= JDATE[0] Let W3[16] = W7[7]
End If 
Return 

L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Rem  CHANGED TO BUNIT - NO ROUNDING OF QTY FOR B OF M PROGRAMS
Rem          BILL OF MATERIALS DO NOT ALLOCATE - LET CNVTU[2]=5
Rem             SINCE UNTIL WO, BOM DOES NOT AFFECT INVENTORY

BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8

On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_20510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 ! " catch wgt item
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let PF_C4[3] = WHPARC[1] Else If X2 Let PF_C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = PF_C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PFPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 

Rem {begin rtn.error.s}
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
Error 11000 ! Goto ERR_MAIN

L_8900: Rem OUT
For X1 = 1 To 5
  Try
  If WCHAN[X1] < 0 Let E = 0 \ Call ReadRef(E,Abs(WCHAN[X1])) ! <0 = changed to ro - chg to rw
  If CHAN[X1] > 0 Close #CHAN[X1] ! chan[] means not opened previously - we opened
  Else
	rem
  end try
Next X1
OUTEND: Rem OUT

Else
	include "src/callsuberr.inc"
End try
Rem {end rtn.error.s}
End Sub
!-------------------------------------------------------------------------
External Sub Mxload5pv(e$,OTYPE,WH,LTBL,PREC[],CNVTA,Intco,rstr$,pr. as prod, pw. as prodwhse)
! pass prod/prodwhse vars - NO READ OF FILE
Try
! use passed struct variables and rest is the same as above
External Lib "libprodconv.lib"
Declare External Function ConvProdAmount
! Enter OTYPE,WH,LTBL,PREC[],CNVTA,Intco,e$,rstr$

Dim 1%,CNVTU[2],PFU1[20],WHSE,CHAN[9],WHSEPR,NODEF,WChan[9]
Dim 2%,FUTURE
Dim 3%,A[33],PFU2[6],AMOUNT,COST
Dim 3%,A1[7],UWORK[20],PF_REC
Dim KSPWH$[50],FILENAME$[16],BLANK$[16]
Rem CHECK IF VALID SEND
NOPROD = 0 \ If PREC[0] < 0 Let NOPROD = 1;PREC[0] = Abs(PREC[0])
If PREC[0] = 0 Or LTBL = 0 Goto PVOUTEND
Try
If PREC[2] < 0 Let FUTURE = Abs(PREC[2])
Else
	Future=0
End try
If OTYPE = 0 Let OTYPE = 1
If OTYPE < 0
  COSTFORCE = 1
  OTYPE = Abs(OTYPE)
End If 
If WH Let WHSEPR = 1 Else Let WH = 1;WHSEPR = 0
If CNVTA = -999 Let NODEF = 1;CNVTA = 0
COST = CNVTA
PF_REC = PREC[0]
Dim 1%,LM1[37,5],M8,M5,LM3[37,3]
Dim 2%,X1[10],LM4[37,3]
Dim 1%,PFTB[3],WHPARC[5],2%,PFCO[3],PLC[3],W7[14],JDATE[5]
Dim 2%,LM2[37,3],D9[5],PF_C4[10],W2[9],M3[2],VENDOR
Dim 2%,J2,J3,J4,J5,J6,J8,J9[9],B[24],V1,X2[9]
Dim 3%,W3[24],WHMISC[6],R[50],M7,CCWT,PFPARC[3]
Dim 4%,J1
Dim A$[156],H1$[116],J$[45],J0$[12],J1$[40],J2$[16],J4$[80],J5$[76]
Dim J6$[16],J7$[46],J9$[45],K2$[30],K3$[30],K4$[30],T2$[95],T5$[12]
Dim X$[20],C1$[40],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Dim P9$[50],P60$[50],msg$[200]
Dim 2%,Q0[1]

Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
C2 = Intco ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
Try
	J1 = Chf(1)
Else
 C1$ = "cntrl/CNTRL"+sTR$(C2)
 Open #1,C1$
End try
ctlc=1
PVL_800: Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,115;D9;
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
Rem SPROD, SPWH, LMTBL, VENTG   ! " files & channels needed
!Read #1,88,1792;FILENAME$;
!NUM = 1;CHAN = 0 \ Gosub PVL_1200 \ If Not(CHAN) Gosub PVL_1000
!SPROD = CHAN
!Read #1,88,1744;FILENAME$;
!NUM = 2;CHAN = 0 \ Gosub PVL_1200 \ If Not(CHAN) Gosub PVL_1000
!SPWH = CHAN
Read #1,150,32;FILENAME$;
NUM = 3;CHAN = 0 \ Gosub PVL_1200 \ If Not(CHAN) Gosub PVL_1000
LMTBL = CHAN

PVL_900: Rem.
If FUTURE ! "see if really a date before continuing
  X$ = FUTURE Using "&&&&&&"
  Call DateToJulian(1,X$,X$,E)
  If E ! "bad date - bad!
    FUTURE = 0
    X$ = " ",X$
  End If 
  JDATE[0] = X$[1,5]
  If JDATE[0] And JDATE[0] < Tim(6) ! "passed date less than today
    JDATE[0] = Tim(6)
  End If 
  If JDATE[0] <= 0 Let FUTURE = 0
End If 
Goto PVL_1500
PVL_1000: Rem GET A CHANNEL TO OPEN ON (file not open on any channel)
X1=findchannel()
PVL_1080: Ropen #X1,FILENAME$
CHAN = X1;CHAN[NUM] = X1
Return 
PVL_1200: Rem STD FILENAME SEARCH (find file already open & use that)
For X1 = 1 To 99
  H1$ = " ",H1$
  Try
	H1$ = Chf$(800 + X1)
	M = 1 \ Call String(M,H1$)
  M = 1 \ Call String(M,FILENAME$)
  M1 = 1;P1 = 0 \ Search H1$[M1],FILENAME$,P1 \ If P1 Goto PVL_1300
  Else
	Rem ! fail
  End try
PVL_1250: Next X1
CHAN = 0
Return 
PVL_1300: Rem FOUND THE FILE
CHAN = X1
Return 
PVL_1500: WHSE = WH
If WHSE < 1 Let WHSE = 1;WHSEPR = 0
If WHSE > D9[5] Let WHSE = 1;WHSEPR = 0
Let PFU1[11]=pr.UMCostDefault ! use pfu1
Let PFU1[12]=pr.UMPriceDefault
PVL_1900: Rem  i guess check load table for locks
If FUTURE Gosub PVSETPEND
If P9$[32,32] = "Y" And WHSEPR And Not(NODEF) Gosub PVL_69000
Wchan[3]=0
Try
Read #LMTBL,LTBL,24,0;X1;
Else
E = 1 \ Call ReadRef(E,LMTBL)
WCHAN[3] = 0 - LMTBL
End try
PVL_2000: Rem GET TABLE
R[3] = LTBL \ If R[3] < 0 Or R[3] > Chf(LMTBL) - 1 Goto PVL_8900
Try
Mat Read #LMTBL,R[3],24;LM1;
Else
	goto PVL_8900
End try
Mat Read #LMTBL,R[3],480;LM2;
Mat Read #LMTBL,R[3],1100;LM3;
Mat Read #LMTBL,R[3],1404;LM4;
If COST And COSTFORCE Goto PVL_2200
If LM1[OTYPE - 1,4] = 0 Goto PVL_8900
If LM1[OTYPE - 1,4] = 5 If COST <= 0 Goto PVL_8900
BASE = LM1[OTYPE - 1,4]
If WHSEPR And P9$[32,32] = "Y"
  If BASE = 1 Let COST = pw.CostAvg ! W3[15]
  If BASE = 2 Let COST = pw.CostLastPo ! W3[16]
  If BASE = 3 Let COST = pw.CostBase ! W3[18]
  If BASE = 4 Let COST = pw.CostNetPO ! WHMISC[2]
Else 
  If BASE = 1 Let COST = pr.CostAvg ! B[21]
  If BASE = 2 Let COST = pr.CostPO ! B[10]
  If BASE = 3 Let COST = pr.CostBase ! PF_C4[4]
  If BASE = 4 Let COST = pr.CostNetPO ! PFPARC[2]
End If 
If NOPROD If BASE <> 5 Goto PVL_8900
PVL_2200: CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = COST
Amount=ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PR.)
M7 = AMOUNT
For M8 = 0 To 7
  If M8 <= 3 Let M6 = LM2[OTYPE - 1,M8];M5 = LM1[OTYPE - 1,M8]
  If M8 > 3 Let M6 = LM4[OTYPE - 1,M8 - 4];M5 = LM3[OTYPE - 1,M8 - 4]
  If Not(M6) Goto PVL_2290
  If M5 = 1 Let M7 = M7 + (M6)
  If Not(M5) Let M7 = M7 + (M7 * (M6 / 100))
  If M5 = 2 Let M7 = (M7 / (100 - M6)) * 100
  If M5 = 3 Gosub PVL_2500
PVL_2290: Next M8
If P9$[42,42] = "N" Let CNVTA = FNN(M7)
If P9$[42,42] = "T" Let CNVTA = FNT(M7)
If P9$[42,42] = "U" Let CNVTA = FNV(M7)
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
Amount=ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PR.)
M7 = AMOUNT
CNVTA = M7
Goto PVL_8900
PVL_2500: Rem CWT ADD/SUBTRACT
CNVTU[0] = -1;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = M6
Amount=ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PR.)
CCWT = AMOUNT
M7 = M7 + CCWT
Return 

PVL_7820: Rem Convert yymmdd to julian (return+1=good, return=bad)
If X2 = 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
If E Return 
X2 = X$
Return 1
PVSETPEND: Rem "set pending future costs (Copied from "price")
If pr.PendLoadCost Let pr.CostLoad = Pr.PendLoadCost
If pr.PendBrkTbl Let pr.BrkTbl = pr.PendBrkTbl
If pr.PendMupTbl Let pr.MUpTbl = pr.PendMupTbl
X2 = pr.PendBaseDate \ Gosub PVL_7820 \ X2 = 0
JDATE[2] = X2
If pr.PendBaseCost And JDATE[2] <= JDATE[0] ! "Pending Base and within Eff Date
  pr.CostBase = pr.PendBaseCost
End If 
X2 = pr.PendLastCostDate \ Gosub PVL_7820 \ X2 = 0
JDATE[2] = X2
If pr.PendLastCost And JDATE[2] <= JDATE[0] ! "Pending Last and within Eff Date
  pr.CostPO = pr.PendLastCost
End If 
If P9$[32,32] = "Y"
  If pw.PendLoadCost Let pw.CostLoad = pw.PendLoadCost
  If pw.PendBrkTbl Let pw.BrkTbl = pw.PendBrkTbl
  If pw.PendMupTbl Let pw.MUpTbl = pw.PendMupTbl
  X2 = pw.PendBaseDate \ Gosub PVL_7820 \ X2 = 0
  JDATE[2] = X2
  If pw.PendBaseCost And JDATE[2] <= JDATE[0] Let pw.CostBase = pw.PendBaseCost
  X2 = pw.PendPOCostDate \ Gosub PVL_7820 \ X2 = 0
  JDATE[2] = X2
  If pw.PendPOCost And JDATE[2] <= JDATE[0] Let pw.CostLastPo = pw.PendPOCost
End If 
Return 

PVL_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = pw.Price1 + pw.Price2 + pw.Price3 + pw.Price4 + pw.Price5 + pw.Price6
  If pw.MUpTbl Let pr.MUpTbl = pw.MUpTbl Else If X2 Let pr.MUpTbl = 0
  If Not(pw.Price1) Let pw.Price1 = pr.ListPrice1
  If Not(pw.Price2) Let pw.Price2 = pr.ListPrice2
  If Not(pw.Price3) Let pw.Price3 = pr.ListPrice3
  If Not(pw.Price4) Let pw.Price4 = pr.ListPrice4
  If Not(pw.Price5) Let pw.Price5 = pr.ListPrice5
  If Not(pw.Price6) Let pw.Price6 = pr.ListPrice6
  If Not(pw.Load1MupTbl) And Not(pw.CostLoad) Let pw.Load1MupTbl = pr.Load1MupTbl
  If Not(pw.CostLoad) Let pw.CostLoad = pr.CostLoad
  If Not(pw.Load2MupTbl) And Not(pw.CostLoad2) Let pw.Load2MupTbl = pr.Load2MupTbl
  If Not(pw.CostLoad2) Let pw.CostLoad2 = pr.CostLoad2
  If Not(pw.CostAvg) Let pw.CostAvg = pr.CostAvg
  If Not(pw.CostLastPo) Let pw.CostLastPo = pr.CostPO
  If Not(pw.CostBase) Let pw.CostBase = pr.CostBase
  If Not(pw.CostNetPO) Let pw.CostNetPO = pr.CostNetPO
  If pw.BrkTbl Let pr.BrkTbl = pw.BrkTbl
  If Not(pw.Vend) Let pw.Vend = pr.PrimVend
End If 
Return 

Rem {begin rtn.error.s}
PVERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
Error 11000 ! Goto PVERR_MAIN

PVL_8900: Rem OUT
For X1 = 1 To 5
  Try
  If WCHAN[X1] < 0 Let E = 0 \ Call ReadRef(E,Abs(WCHAN[X1])) ! was locked - change back to rw
  If CHAN[X1] > 0 Close #CHAN[X1] ! if >0 it was opened here
  Else
	rem
  end try
Next X1
PVOUTEND: Rem OUT

Else
	include "src/callsuberr.inc"
End try
Rem {end rtn.error.s}
End Sub