! --- serp146_lp.dl4
!
! Commission Grid Maintenance for Commissions using Last Price Discounts
!
!
! loadsave -w -n 100,10 -o prog/dxport/serp146_lp.dl4 src/serp146_lp.src
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
!
!
!include structure,filehandler libs & default structure dims
include "src/inc/filelpcommgrid.inc"
!
Declare Intrinsic Sub InpBuf,String,Findf,programdump
!Option Default Dialect IRIS1
!
! *declare additional external libs & subs & functions
External Lib "ubsfunc.dl4"
Declare External Function openfile

dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
!
! declare internal subroutines
Declare Sub BuildDroplist,ReadGrid,LoadData,UnloadDataAndUpdate

dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[3200],tmp2$[500],b$[200],List$[50,200],3%
b$=" ",b$
dim message$[150],webstr$[200]

Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)

dim grid. as lpcommgrid
dim Kgrid$[6],mode$[1]
dim 1%,returnStatus
dim 2%,arrLP[9],arrComm[9],arrBasedOnGP[9]
dim 3%,Rgrid

returnStatus = 1 ! default OK

CHgrid = openfile("LPCOMMGRID",intCo) \ If CHgrid = -1 Error 42

select case action1$
	case "DROPLIST"
		call BuildDroplist()
	case "GETDATA"
		call ReadGrid()
		if (returnStatus) call LoadData()
	case "SUBMITDATA"
		call ReadGrid()
		if (returnStatus) call UnloadDataAndUpdate()
		if (returnStatus) Message$="Record updated."
	case else ! couldn't figure out what to do
		message$ = "Unknown action1: "+action1$
		returnstatus=0
end select
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
call setoutput(e$,rstr$)
try Close else rem
!
! 
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end


! ***********************************************************************
! Nobody but us subroutines down here
! ***********************************************************************

!----------------------------------------------------------------------------
! build initial drop list of existing
!----------------------------------------------------------------------------
!----------------------------------------------------------------------------
Sub BuildDroplist()
  Try
	! Add section header and column defs
	tmp$=bsdel$+"Droplist"+fdel$+rdel$
	tmp$=tmp$+"ID"+fdel$+"Desc"+fdel$+rdel$
	call addToStr(e$,rstr$,tmp$)
	
	Kgrid$ = " ",Kgrid$
	do while filegetlpcommgrid(e$,CHgrid,">",1,Kgrid$,grid.) > 0
		tmp$=str$(grid.GridNumber)+fdel$+str$(grid.GridNumber)
		tmp$=tmp$+" - ",rtrim$(grid.Description$)+fdel$+rdel$
		call addToStr(e$,rstr$,tmp$)
	loop
	call addToStr(e$, rstr$, esdel$)
  else
	include "src/callsuberr.inc"
  end try
end sub ! BuildDroplist

!----------------------------------------------------------------------------
! will read an existing record or if not found, initialize
! a new one.
!----------------------------------------------------------------------------
Sub ReadGrid()
  try
	call dxget("TABLENUM", tmp$) \ i = tmp$
	if i < 1 OR i> 999999
		message$ = "Invalid grid number entered!"
		returnStatus = 0
		exit sub
	end if
	Kgrid$ = i using "######"
	Rgrid = filegetlpcommgrid(e$,CHgrid,"=",1,Kgrid$,grid.)
	if Rgrid <= 0
		clear grid.
		grid.spare$ = " ",grid.spare$
		grid.GridNumber = i
		Rgrid = 0
	end if
  else
	include "src/callsuberr.inc"
  end try
end sub ! ReadGrid


!----------------------------------------------------------------------------
! load data into rstr for transmission to front end
!----------------------------------------------------------------------------
Sub LoadData()
  try
	! Header
	tmp$=bsdel$+"TableData"+fdel$+rdel$
	tmp$=tmp$+"Tablenum"+fdel$
	tmp$=tmp$+"Description"+fdel$
	for i = 0 to 9
		tmp$=tmp$+"Percent"+str$(i)+fdel$
	next i
	for i = 0 to 9
		tmp$=tmp$+"Rate"+str$(i)+fdel$
	next i
	for i = 0 to 9
		tmp$=tmp$+"BasedOnGP"+str$(i)+fdel$
	next i
	call addToStr(e$, rstr$, tmp$+rdel$)
	tmp$ = str$(grid.GridNumber)+fdel$+rtrim$(grid.Description$)+fdel$
	tmp$=tmp$+str$(grid.ListPercent0)+fdel$+str$(grid.ListPercent1)+fdel$
	tmp$=tmp$+str$(grid.ListPercent2)+fdel$+str$(grid.ListPercent3)+fdel$
	tmp$=tmp$+str$(grid.ListPercent4)+fdel$+str$(grid.ListPercent5)+fdel$
	tmp$=tmp$+str$(grid.ListPercent6)+fdel$+str$(grid.ListPercent7)+fdel$
	tmp$=tmp$+str$(grid.ListPercent8)+fdel$+str$(grid.ListPercent9)+fdel$
	tmp$=tmp$+str$(grid.CommissionRate0)+fdel$+str$(grid.CommissionRate1)+fdel$
	tmp$=tmp$+str$(grid.CommissionRate2)+fdel$+str$(grid.CommissionRate3)+fdel$
	tmp$=tmp$+str$(grid.CommissionRate4)+fdel$+str$(grid.CommissionRate5)+fdel$
	tmp$=tmp$+str$(grid.CommissionRate6)+fdel$+str$(grid.CommissionRate7)+fdel$
	tmp$=tmp$+str$(grid.CommissionRate8)+fdel$+str$(grid.CommissionRate9)+fdel$
	tmp$=tmp$+str$(grid.BasedOnGP0)+fdel$+str$(grid.BasedOnGP1)+fdel$
	tmp$=tmp$+str$(grid.BasedOnGP2)+fdel$+str$(grid.BasedOnGP3)+fdel$
	tmp$=tmp$+str$(grid.BasedOnGP4)+fdel$+str$(grid.BasedOnGP5)+fdel$
	tmp$=tmp$+str$(grid.BasedOnGP6)+fdel$+str$(grid.BasedOnGP7)+fdel$
	tmp$=tmp$+str$(grid.BasedOnGP8)+fdel$+str$(grid.BasedOnGP9)+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$+esdel$)
  else
	include "src/callsuberr.inc"
  end try
end sub ! LoadData
	
!----------------------------------------------------------------------------
! get returning information and update the record
!----------------------------------------------------------------------------
Sub UnloadDataAndUpdate() !
  try
	! tablenum is already loaded into record
	call DxGet("Description", tmp$) \ tmp$ = rtrim$(ucase$(tmp$))
	if tmp$ = ""
		message$ = "You must enter a description!" \ returnStatus = 0
		exit sub
	end if
	grid.Description$ = tmp$+b$
	! OK load days and penalties into arrays for easier verfication
	endOfTable = 0
	for i = 0 to 9
		call dxget("Percent"+str$(i), tmp$) \ arrLP[i] = tmp$
		call dxget("Rate"+str$(i), tmp$) \ arrComm[i] = tmp$
		call dxget("BasedOnGP"+str$(i), tmp$) \ arrBasedOnGP[i] = tmp$
		if endOfTable
			arrLP[i] = 0
			arrComm[i] = 0
			arrBasedOnGP[i] = 0
		end if
		if arrLP[i] < 0 or arrLP[i] > 100
			message$ = "Invalid % Discount of List in row "+str$(i+1)+"!"
			returnStatus = 0
			exit sub
		end if
		if arrComm[i] < 0 or arrComm[i] > 100
			message$ = "Invalid commission % in row "+str$(i+1)+"!"
			returnStatus = 0
			exit sub
		end if
		if arrLP[i] = 0 and arrComm[i] = 0
			arrComm[i] = 0
			endOfTable = 1
		else
			if i
				if arrLP[i] <= arrLP[i-1]
					message$ = "List price discount % in row "+str$(i+1)+" >= prior row!"
					returnStatus = 0
					exit sub
				end if
			end if
		end if
	next i	
	grid.ListPercent0 = arrLP[0]
	grid.ListPercent1 = arrLP[1]
	grid.ListPercent2 = arrLP[2]
	grid.ListPercent3 = arrLP[3]
	grid.ListPercent4 = arrLP[4]
	grid.ListPercent5 = arrLP[5]
	grid.ListPercent6 = arrLP[6]
	grid.ListPercent7 = arrLP[7]
	grid.ListPercent8 = arrLP[8]
	grid.ListPercent9 = arrLP[9]
	grid.CommissionRate0 = arrComm[0]
	grid.CommissionRate1 = arrComm[1]
	grid.CommissionRate2 = arrComm[2]
	grid.CommissionRate3 = arrComm[3]
	grid.CommissionRate4 = arrComm[4]
	grid.CommissionRate5 = arrComm[5]
	grid.CommissionRate6 = arrComm[6]
	grid.CommissionRate7 = arrComm[7]
	grid.CommissionRate8 = arrComm[8]
	grid.CommissionRate9 = arrComm[9]
	grid.BasedOnGP0 = arrBasedOnGP[0]
	grid.BasedOnGP1 = arrBasedOnGP[1]
	grid.BasedOnGP2 = arrBasedOnGP[2]
	grid.BasedOnGP3 = arrBasedOnGP[3]
	grid.BasedOnGP4 = arrBasedOnGP[4]
	grid.BasedOnGP5 = arrBasedOnGP[5]
	grid.BasedOnGP6 = arrBasedOnGP[6]
	grid.BasedOnGP7 = arrBasedOnGP[7]
	grid.BasedOnGP8 = arrBasedOnGP[8]
	grid.BasedOnGP9 = arrBasedOnGP[9]
	mode$ = "c"
	if not(Rgrid) let mode$ = "a"
	Rgrid = fileupdatelpcommgrid(e$,CHgrid,mode$,Rgrid,grid.)
	if Rgrid < 0
		message$="Error writing record: "+str$(Rgrid)+"!"
		returnStatus = 0
	end if
  else
	include "src/callsuberr.inc"
  end try
end sub ! UnloadDataAndUpdate

