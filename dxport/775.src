! >>> Program 775 
!
! description Inventory Quantity Reset
! loadsave -w -n 100,10 -o prog/dxport/775.dl4 src/775.src
!
! ERPScheduler Enabled
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR  4, 2008  15:33:16
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx77/mx775.src (univ2) [txc] {30755}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,StringSearch,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel 
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports
Declare External Sub ERPCronSuccess
Declare External Function GetParameter$
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$,OpenMySQLMirror
Include "src/inc/sql_prod.inc"
Include "src/inc/fileinvtrans.inc"
External Lib "invttrans.dl4"
Declare External Sub Maketrans
External Lib "libprodwh.lib"   
Declare External Sub mxwhcreate
Rem MX775 -- INVENTORY QUANTITY RE-SET
Rem
Rem REV. 1.0 - 09/20/85
!Com 1%,EOP,PHY_INV
!If Err 0 Gosub ERR_ESCAPE
Try
dim 1%,EOP
dim Rstr$[5000],Message$[600]
dim 2%,intco
	!Try
	!	Enter  Message$,IntCo,rstr$,eop
	!else
	!	let eop=0
	!end Try
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim usr$[40]
dim 1%,SC,SR,Z9[9],PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10]
dim 1%,eflg,returnstatus
dim 3%,rec_uac
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Dim 1%,J9[2],J0,J2,J3,J4,J5,J6,J8,X1,MODE,WH,ILT1[3],LT1[3],CH_INVTR
Dim 1%,TRUE,FALSE,ABORT
Dim 2%,X2,WHBLD[2],SOH5[16],D3[1],JARDATE,JSDATE,JWDATE,POSTPER
Dim 2%,WHOS
Dim 3%,J,J1,TRNO[3],PL4[19],Ilt2[5],lt2[5],R14,TOTREC,WHLBS[1]
Dim J$[75],J0$[10],J1$[75],J2$[40],J3$[40],J5$[75],J7$[75],J9$[75],J4$[75]
Dim J6$[40],WHPROD$[12],OL2$[16],LT0$[56],LT1$[6],INV_$[30]
Dim X$[16],K1$[60],K2$[60],K3$[60],K4$[60],K5$[60],X2$[8],SCODE$[12]
Dim A1$[156],P0$[66],S0$[36],W1$[32],W2$[16],K10$[50],SCRATCH$[80]
Dim 1%,FL1[2],FL1$[80],TRL1[10],TR1[13],2%,FL2[3],3%,FL3[14],FL4[1]
Dim 2%,COID,FSKEY$[30],3%,FC2[1]
Dim 1%,FT1[3],FT1$[72],2%,FT2[3],3%,FT3[3]
Dim 3%,FTRECA,FTRECB,LETTER$[1]
Dim 2%,FIFL,P60$[50],FLT$[50],3%,FQ9[2],FQTY,FQOH,FLK$[50],R[29]
Dim 1%,P1[1],S1[3],T[2],W1[2],POL1[5],PFU1[20],POMISC[2]
Dim 3%,P3[4],A[30],S3[3],W3[18],W4[9],W5[12],W6[12],Q1,T9,L7[9],TRL3[21]
Dim 3%,L3[6],P1$[6],PLV[1],WHLV[1],QTYOH,PLTR,ON_TRANS,REQUEST,V9[4],OLDW3[99]
Dim 2%,H0[5],SOH0[12],P2[2],S2[3],B[24],L1[11],W2[9],D9[20],ARDATE,SHIPDATE
Dim P9$[50],C$[20],K12$[50],T9$[26],FILE$[128],DIR$[75],M1$[12],LINE_$[80]
Dim P61$[256],blank$[50],endparm$[50]
dim ReportDir$[75],Basename1$[75],StatusFile$[150],1%,statchan,3%
Dim 1%,FIFOSPECCH[10],FIFOSPEC1[10],FIFOSPEC$[150],2%,FIFOSPEC2[10],3%,FIFOSPEC3[16]
dim ITR. as invtrans

call env(1,"ERP_FROM_CRON",tmp$) \ erpCron = tmp$

If not(eop)
!Call DXOpen() ! needed for dxtest
if erpCron
	Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
else
	! not sure why would would ever just do a getglobals
	Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
end if
endif
REC_UAC = GetUIDRec(e$,IntCo,Userid$)
Comp=IntCo 
Try Close #1 Else Rem ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COMP)
Open #1,J$
eflg=0
message$=""
returnstatus=0
blank$=" ",blank$
endparm$="{",endparm$
!LET j$="6/sortwork00045"\open #9,j$ !
TRUE = 1;FALSE = Not(TRUE)
ABORT = FALSE
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
J8 = 99

tmp$ = GetParameter$("PHYINV")
let phy_inv=0
if rtrim$(tmp$)<>"" let phy_inv=99
If PHY_INV<>0 or EOP<>0
  For X = 2 To 20
    Try Close #X Else Rem
  Next X
  Try Close #29 Else Rem
  !If Err 0 Gosub ERR_TRAP
End If 
For I = 2 To 15
  Read X
  If Not(X) Goto L_260
  Read #1,88,Abs(X);X$;
  If X >= 0 Open #I,X$ Else Ropen #I,X$
L_260: Next I
Ropen #13,"CNTRL/CNTRL.LIST"
Mat Read #13,1,24;TRNO;
Data "1792","2528","2320","1744","2432","-2416","512","0","-1840","-848","-1360","0","2512","-2768"
sqlChan = OpenMySQLMirror(e$)
M1$ = "---------#"
LINE_$ = "-",LINE_$
V9[1] = 90
V9[4] = 55
PAGECOUNT = 0
CHNL = 99
chnl=findchannel() ! !Gosub GETCHAN
DIR$ = "REPORTDIR"
System 28,DIR$
If DIR$ = "REPORTDIR" Or Len(DIR$) = 0 !"if there is no reportdir directory
  DIR$ = "HOME"
  System 28,DIR$
End If 
FILE$ = DIR$ + "/" + "775_"+Str$(SPC(6)) ! diff each user/run?
Call FindF(FILE$,FOUND)
If Not(FOUND)
  Build #CHNL, + FILE$
Else 
  Open #CHNL,FILE$
End If 
! set up status log file

Mat Read #1,19,50;P9$;
Mat Read #1,0,108;ARDATE;
X$ = ARDATE Using "&&&&&&" \ POSTPER = X$[1,4]
X2 = ARDATE \ Gosub L_7820 \ X2 = 0
If X2 Let JARDATE = X2 Else Gosub L_7650
Mat Read #1,115;D9;
Mat Read #1,3,188;SHIPDATE;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
If P60$[9,9] = "F" Or P60$[9,9] = "L"
  COID = Intco
  For I = 19 To 20
    Read X
    If Not(X) Goto L_350
    Read #1,88,X;X$;
    Open #I,X$
L_350: Next I
  Data "3008","3024"
  If P61$[60,60] = "Y"
    X$ = COID Using "4/fifospc#" \ Ropen #29,X$
  End If 
End If 
DFCO = intco ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
L_500: Rem PRINT SCREEN
!If PHY_INV! Print @0,22;'CE';"RESETTING WAREHOUSE/LOT BALANCES...PLEASE WAIT";
If PHY_INV Let K2$ = "" \ K3$ = "}}}}}}" \ Goto L_1000
!Call Dxget("EOP",tmp$)
!let eop=0
!if rtrim$(tmp$)<>"" let eop=99
if eop<>0
	let k2$=""
	let k3$="}",k3$ 
endif
!If EOP Goto L_725
!Print 'CS BD';@0,0;"INVENTORY QUANTITY RESET";@50,0;"MX775 - REV 2.0";
!Print 'ED';
!Print @5,4;"TO ABORT AT A SAFE POINT DO A {Escape Code}, IT WILL STOP AT THE NEXT ITEM";
!Print @10,6;"NOTE: THIS PROGRAM WILL RESET INVENTORY BALANCES FOR:";
!Print @10,8;"       1. QUANTITY ON HAND";
!Print @10,9;"       2. ALLOCATED";
!Print @10,10;"       3. CUSTOMER ON ORDER";
!Print @10,11;"       4. ON PO QUANTITIES";
!Print @10,12;"       5. ON TRANSFER QUANTITIES";
!Print @10,13;"       6. INVENTORY TRANSACTION BALANCES";
!Print @10,14;"TO AGREE WITH THE LOT FILE QUANTITIES";
!Print @10,16;"ARE YOU READY TO BEGIN? (Y/N) ";
!Signal 3,0
!Input ""X$
!If X$ <> "Y" Goto OUTEND
!If Err 0 Gosub ERR_TRAP
L_725: !
If P60$[26,26] = "Y"
if eop=0
	shipdate = GetParameter$("SHIPDATE") ! mmddyy
	! check date                                        
	let tmp$=shipdate using "&&&&&&"
	let j$=tmp$[5,6],tmp$[1,4] ! yymmdd
	LET shipdate=j$ ! yymmdd format
	Call DateToJulian(5,j$,j$,e)
	if e
		let eflg=eflg+1
		message$=message$+"Invalid Ship Date Entered. " ! 
	else                                                                               
		JDATE = J$
	endif
endif
  If EOP
	Mat Write #1,3,188;SHIPDATE;
  End If 
endif!
if eop=0

k1$ = UCase$(rtrim$(GetParameter$("SPROD")))+Blank$     
K3$ = UCase$(Rtrim$(GetParameter$("EPROD")))+blank$ ! ,EndParm$
if rtrim$(k3$)<rtrim$(k1$) ! allow same start/end - prod always UPPERCASE
	let eflg=eflg+1
	message$=Message$+"Ending Product Code Must Be Greater Than Starting Product Code. "
endif
endif
!L_800: If Not(EOP) Print @0,19;'CL';"CURRENT SHIP DATE ";X$;" ENTER NEW SHIP DATE MMDDYY ";
!  If EOP Print @5,18;"INVENTORY LEVEL UPDATE "
 ! If EOP Print @0,19;" ENTER NEW SHIP DATE MM/DD/YY ";
 ! If Not(EOP) Let J0$ = "5 00065519"
 ! If EOP Let J0$ = "5 06063019"
 ! If Not(EOP) Let J1 = SHIPDATE Else Let J1 = 0
 ! Gosub L_7000
 ! If X2$ = "" Let X2$ = X$
 ! SHIPDATE = J1
 ! If EOP
 !   Mat Write #1,3,188;SHIPDATE;
 ! End If 
!End If 
!If EOP Let K2$ = "" \ K3$ = "}}}}}}" \ Goto L_1000
L_900: Rem GET RANGES
!Print @0,21;"ENTER STARTING CODE, <CR> FOR ALL,  ''E'' TO EXIT : ";'CE';
!Input ""K2$ \ If K2$ = "E" Goto OUTEND
!If K2$ = "" Let K3$ = "}}}}}}" \ Goto L_970
!Print @0,23;"ENTER ENDING   CODE, <CR> FOR LAST, ''E'' TO EXIT : ";'CL';
!Input ""K3$ \ If K3$ = "E" Goto OUTEND
!If K3$ = "" Let K3$ = "}}}}}}"
!L_970: If K2$ <= K3$ Goto L_990
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_900
!L_990: K1$ = K2$;SCODE$ = K2$
T9 = 0 !\ Print @0,18;'CE';"PROCESSING .... PLEASE WAIT...";
!If Err 0 Gosub DO_ABORT
if eflg goto outend:
! rem let t9=0
ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
BaseName1$ = "inventory_reset"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
StatusFile$ = ReportDir$ + "/"+BaseName1$
Call FindF(StatusFile$,tmp)
If tmp Kill StatusFile$
StatChan = FindChannel() ! channel to build text file
Build #StatChan,StatusFile$ As "TEXT"
Close #StatChan
Open #StatChan,StatusFile$
Print #StatChan;"Inventory Reset is in Process..."
e = AddToMYReports(BaseName1$) 
if e<0
	message$=message$+"Error adding to my reports!" 
	let eflg=eflg+1
	goto outend:
endif

let j8=0
If J8 = 0  !if pdf or print, new method, after edits,setouput,dxclose
  Message$="Inventory Reset is processing.  Check back later in My Reports."
  if erpCron
	print message$
  else
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call addToStr(e$,rstr$,webstr$)
	call setoutput(e$,rstr$)
  end if
  ! Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  ! try call dxclose() else rem
End If 
Search #2,2,1;K1$,V1,E \ If E > 2 error 11000
If Not(E) Goto L_1028
L_1000: Rem START
T9 = 0
Search #2,3,1;K1$,V1,E
If E = 2 Goto L_8000
If K1$[1,Len(K3$)] > K3$ Goto L_8000
L_1028: Mat Read #2,V1,0;A1$
Mat Read #2,V1,512;PFU1
Mat Read #2,V1,156;B
Mat Read #2,V1,256;A
Mat Read #2,V1,990;PLV
QTYOH = A[0]
For I = 0 To 3
  A[I] = 0
L_1060: Next I
PLV[0] = 0 \ PLV[1] = 0
If A[6] = 0 Let A[6] = 1
If A[4] = 0 Let A[4] = 1
TOTREC = TOTREC + 1
Gosub L_2100
K2$ = " ",K2$ \ K2$ = K1$[1,12]
!If SCODE$ = K3$ Or Not(Fra(TOTREC / 100))
  !If EOP Print ":";
  !If EOP If Not(Fra(TOTREC / 500)) Print @0,18;'CL';"          PROCESSING: ";K1$;
  !If PHY_INV If Not(Fra(TOTREC / 500)) Print @0,18;'CL';"     PROCESSING: ";K1$;
  !If Not(EOP) If Not(PHY_INV) Print @10,18;"PROCESSING: ";K1$;
!End If 
!Signal 3,0
If Not(Fra(totrec / 100)) 
	Print #StatChan;totrec;" Records Processed ";" Current Product: ";k1$
endif
L_1100: Rem GO THROUGH SPRODLOT
Search #3,3,2;K2$,V2,E
If E Goto L_2000
If K2$[1,12] <> K1$[1,12] Goto L_2000
Mat Read #3,V2;P0$
!If SCODE$ = K3$ Or Not(Fra(TOTREC / 100))
!  If Not(EOP) If Not(PHY_INV) Print @35,18;'CL';"SPRODLOT: ";P0$[13,24];
!End If 
Mat Read #3,V2,66;P1
Mat Read #3,V2,70;P2
Mat Read #3,V2,82;P3
Mat Read #3,V2,114;P1$
Mat Read #3,V2,120;PLTR
If P9$[1,1] <> "Y" Let P3[2] = B[21]
Gosub L_3500
If P1 = 99 Let P3[0] = ON_TRANS;P3[1] = 0
A[0] = A[0] + (P3[0] - P3[1])
T9 = T9 + (P3[2] * (P3[0] - P3[1]))
P3[3] = 0
P3[4] = 0
PLTR = 0
If P1 <> 99 If P1$[1,6] = "STOCK " Let PLTR = ON_TRANS
If P1 <> 99 Let P3[3] = REQUEST;A[3] = A[3] + REQUEST
If (P3[0] - P3[1]) = 0 And P1 <> 99 Goto L_1500
K5$ = " ",K5$ \ K5$[1,12] = K1$[1,12]
K5$[13,14] = P1 Using "##"
Search #5,2,1;K5$,R5,E
If E = 1 Gosub L_2500
If E error 11000
Mat Read #5,R5,78;W3
W3 = W3 + (P3[0] - P3[1])
W3[2] = W3[2] + REQUEST
Mat Write #5,R5,78;W3;
Goto L_1500
L_1500: Rem GO THROUGH SORDLOT
K4$ = " ",K4$ \ K4$ = K1$[1,12]
L_1520: Search #4,3,1;K4$,V3,E
If E Goto L_1700
If K4$[1,12] <> K1$[1,12] Goto L_1700
If K4$[24,29] <> P1$[1,6] Goto L_1520
If K4$[30,41] = P0$[13,24] Goto L_1550
Goto L_1520
L_1550: Mat Read #4,V3;S0$;
!If SCODE$ = K3$ Or Not(Fra(TOTREC / 100))
!  If Not(EOP) If Not(PHY_INV) Print @35,19;'CL';"SORDLOT: ";S0$[13,24];
!End If 
Mat Read #4,V3,36;S1;
Mat Read #4,V3,44;S2;
Mat Read #4,V3,60;S3;
Mat Read #4,V3,96;OL2$;
If OL2$[1,3] = "KIT" And S1[1] <> 3 Let S1[1] = 1
If S1[2] <> P1[0] Goto L_1520
If S0$[1,12] <> K1$[1,12] Goto L_1520
SOH5[7] = 0
Gosub L_1750
If SOH5[7] = 15 And SOH0[5] <> 0 Goto L_1520
If S1[1] <> 3 And S3[1] > 0 Let P3[3] = P3[3] + S3[1]
If S1[1] = 3 Goto L_1520
If SOH5[7] <> 16 Or (SOH5[7] = 16 And SOH5[11] <> S1[2]) ! not trans
  P3[4] = P3[4] + S3[3]
End If 
If S3[1] <= 0 Goto L_1690
If S1[1] = 1 Or S1[1] = 4 Let A[1] = A[1] + S3[0]
If S1[1] = 2 And K4$[42,44] = "KIT" Let A[1] = A[1] + S3[1] \ Goto L_1645
If S1[1] = 2 Or S1[1] = 5 Let A[3] = A[3] + S3[1]
L_1645: If S1[1] = 4 Let LEV1 = 99;LEV2 = 0
If LEV1 Let PLV[0] = PLV[0] + S3[1]
If LEV2 Let PLV[1] = PLV[1] + S3[1]
K5$ = " ",K5$ \ K5$[1,12] = K1$[1,12]
K5$[13,14] = S1[2] Using "##"
Search #5,2,1;K5$,R5,E
If E = 1 Gosub L_2500
If E error 11000
Mat Read #5,R5,78;W3
Mat Read #5,R5,780;WHLV
If LEV1 Let WHLV[0] = WHLV[0] + S3[1]
If LEV2 Let WHLV[1] = WHLV[1] + S3[1]
W3[2] = W3[2] + S3[1]
Mat Write #5,R5,78;W3;
Mat Write #5,R5,780;WHLV;
L_1690: Goto L_1520
L_1700: Rem WRITE SPRODLOT
Mat Write #3,V2,82;P3
Mat Write #3,V2,120;PLTR;
Goto L_1100
L_1750: Rem FIND ORDER HEADER FOR SHIPDATE
LEV1 = 0 \ LEV2 = 0
If S1[1] <> 2 And S1[1] <> 5 Return 
K10$ = " ",K10$
K10$[1,6] = S2[2] Using "######"
K10$[7,12] = S2[0] Using "######"
Search #10,2,2;K10$,R10,E
If E Return 
Mat Read #10,R10,0;SOH0; \ Mat Read #10,R10,104;SOH5;
X2 = SOH0[10] \ If X2 <> 999999 Gosub L_7820 \ X2 = 0
JWDATE = X2
X2 = SHIPDATE \ Gosub L_7820 \ X2 = 0
JSDATE = X2
If JWDATE <= JSDATE Let LEV1 = 99 Else Let LEV2 = 99
Return 
L_2000: Rem WRITE BACK INFO
If P9$[1,1] <> "Y" Goto L_2020
If A[0] <= 0 Goto L_2020
If A[0] Let B[21] = (T9 / A[0])
L_2020: Mat Write #2,V1,156;B
Gosub L_3000
Mat Write #2,V1,256;A
Mat Write #2,V1,990;PLV;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, k1$, sqlChan, 2)
	if e <> 1 ! returns the number of records add/updated/deleted
		gosub ERR_SEARCH
	end if
end if
T9 = 0
If EOP If QTYOH = A[0] Goto L_2050
If P60$[9,9] = "F" Or P60$[9,9] = "L" Gosub L_5800
L_2050: Rem
Gosub L_8100
If ABORT Goto OUTEND
Goto L_1000
L_2100: Rem DO PRDWHSE
K2$ = " ",K2$ \ K2$ = K1$[1,12]
L_2110: Search #5,3,1;K2$,R5,E
If E Goto L_2190
If K2$[1,12] <> K1$[1,12] Goto L_2190
Mat Read #5,R5,78;W3
Mat Read #5,R5,780;WHLV
TMP = K2$[13,14]
OLDW3[TMP] = W3[0]
W3[0] = 0 \ W3[1] = 0 \ W3[2] = 0
WHLV[0] = 0 \ WHLV[1] = 0
Mat Write #5,R5,78;W3
Mat Write #5,R5,780;WHLV;
Goto L_2110
L_2190: Return 
L_2500: Rem NEW PRD/WHSE
WHPROD$[1,12] = K5$[1,12];WHBLD[0] = 5;WHBLD[1] = P1;WHBLD[2] = B[24]
!Call "MXWHCREATE",WHPROD$,WHBLD[]
Call mxwhcreate(e$,IntCo,WHPROD$,WHBLD[])
R5 = WHBLD[2];E = 0;WHBLD[2] = 0 \ Goto L_2590
E = 2 \ R1 = 0
Search #5,1,0;K5$,R1,E
If E error 11000
R5 = R1 \ E = 0
Search #5,4,1;K5$,R1,E
If E error 11000
W1$ = " ",W1$ \ W1$[1,12] = K5$[1,12]
For I = 0 To 14
  If I <= 2 Let W1[I] = 0
  If I <= 9 Let W2[I] = 0 \ W4[I] = 0
  W3[I] = 0
  If I <= 12 Let W5[I] = 0 \ W6[I] = 0
Next I
W1 = P1 \ W2[4] = B[20]
W4[0] = P3[2] \ W4[1] = B[10] \ W4[2] = B[8]
W4[4] = A[20] \ W4[5] = A[21] \ W4[6] = A[22]
W4[7] = A[23]
Mat Write #5,R5,0;W1$;
Mat Write #5,R5,32;W1;
Mat Write #5,R5,38;W2;
Mat Write #5,R5,78;W3;
Mat Write #5,R5,168;W4;
Mat Write #5,R5,228;W5;
Mat Write #5,R5,306;W6;
L_2590: E = 0 \ Return 
L_3000: Rem SCAN THE WOHFLE
If P9$[2,2] <> "M" Goto L_3100
K4$ = " ",K4$ \ K4$ = K1$
L_3020: Search #8,3,3;K4$,V5,E
If E Goto L_3100
If K4$[1,12] <> K1$[1,12] Goto L_3100
Mat Read #8,V5,182;W1;
Mat Read #8,V5,220;W3;
If W1[0] <> 9
  Q1 = FNR(W3 - W3[1])
  If Q1 < 0 Let Q1 = 0
  A[2] = A[2] + Q1
End If 
Goto L_3020
L_3100: Rem POFLEL
K4$ = " ",K4$ \ K4$ = V1 Using "######"
L_3120: Search #6,3,2;K4$,V6,E
If E Return 
V5 = K4$[1,6] \ If V5 <> V1 Return 
Mat Read #6,V6;POL1;
Mat Read #6,V6,24;L3;
Mat Read #6,V6,232;PL4;
Mat Read #6,V6,376;POMISC;
If Not(POMISC[0]) Goto L_3120
If POL1 >= 3 Goto L_3120
Call Logic(1,2 ^ 0,POL1[3],E) \ If E Goto L_3120
Call Logic(1,2 ^ 2,POL1[3],E) \ If E Goto L_3120
Goto L_3300
L_3160: Q1 = FNR(L3[2] + PL4[1] - L3[3]) \ If Q1 < 0 Let Q1 = 0
A[2] = A[2] + Q1
Goto L_3120
L_3300: Rem READ PO HEAD FOR TYPE
Mat Read #7,L3[0];H0;
V5 = K4$[7,12]
If H0[2] <> V5 Goto L_3120
IF H0[0]>=90 AND H0[0]<=97 GOTO INPROCESS: 
If H0 > 6 Goto L_3120
INPROCESS: REM    
Mat Read #7,L3[0],242;T;
K5$ = " ",K5$ \ K5$[1,12] = K1$[1,12]
K5$[13,14] = POL1[1] Using "##"
Search #5,2,1;K5$,R5,E
If E = 1 Gosub L_2500
If E error 11000
Mat Read #5,R5,78;W3
W3[1] = W3[1] + (L3[2] + PL4[1] - L3[3]) \ If W3[1] < 0 Let W3[1] = 0
Mat Write #5,R5,78;W3;
Goto L_3160
L_3500: Rem SEARCH FOR TRANSFERS
ON_TRANS = 0;REQUEST = 0
K12$ = " ",K12$
K12$[1,12] = K1$[1,12]
L_3540: Search #12,3,2;K12$,R12,E
If E Return 
If K12$[1,12] <> K1$[1,12] Return 
X2 = K12$[13,14] \ If X2 = 2 Return 
Mat Read #12,R12,0;TRL1;
Mat Read #12,R12,22;TRL3;
Mat Read #11,TRL3[1],0;TR1;
If TR1[0] = 7 Or TRL1[0] = 2 Goto L_3540
TRQTY = TRL3[2] - TRL3[4] - TRL3[5]
If Not(TRQTY) Goto L_3540
If P1 = 99
  If DFCO <> TR1[2] Goto L_3680
  If TR1[1] >= 2 Let ON_TRANS = ON_TRANS + TRQTY
L_3680: End If 
If P1 <> 99
  If TR1[1] = 1 If P1 = TR1[3] If DFCO = TR1[2] Let REQUEST = REQUEST + TRQTY
  If TRNO[3] = 0 If TR1[1] = 1 Let REQUEST = 0
  If TR1[1] >= 2 If P1 = TR1[5] If DFCO = TR1[4] Let ON_TRANS = ON_TRANS + TRQTY
L_3740: End If 
Goto L_3540
L_5800: Rem CHECK FIFOLOT
!If SCODE$ = K3$ Or Not(Fra(TOTREC / 100))
!  If Not(EOP) If Not(PHY_INV) Print @0,23;'CL';"CHECKING ";P60$[9,9];"IFOLOT FOR PRODUCT ";K1$[1,12];
!End If 
For WHSE = 1 To 99
  K2$ = " ",K2$ \ K2$[1,12] = K1$[1,12] \ K2$[13,14] = WHSE Using "##"
  W3[0] = 0;WHLBS[0] = 0
  Search #5,2,1;K2$,R[5],E \ If E = 1 Goto L_5845
  If E error 11000
  Mat Read #5,R[5],78;W3;
  Mat Read #5,R[5],404;W2$;
  Mat Read #5,R[5],980;WHLBS;
L_5845: FQOH = 0
  FLK$ = " ",FLK$ \ FLK$[1,14] = K2$[1,14]
L_5855: Search #19,3,1;FLK$,R[19],E \ If E = 2 Goto L_5900
  If FLK$[1,14] <> K2$[1,14] Goto L_5900
  Mat Read #19,R[19],102;FL3;
  FQOH = FQOH + FL3[0] - FL3[1]
  Goto L_5855
L_5900: Rem
  If P61$[73,73] = "Y" And A1$[127,127] = "Y"
    If WHLBS[0] = FQOH Goto L_5990
    QTY = WHLBS[0] - FQOH
  Else 
    If W3[0] = FQOH Goto L_5990
    QTY = W3[0] - FQOH
  End If 
  Gosub L_6000
L_5990: If WHSE <> 99 If WHSE >= D9[5] Let WHSE = 98
Next WHSE
Return 
L_6000: Rem UPDATE FIFOLOT & FIFOTRANS
If P60$[9,9] <> "F" And P60$[9,9] <> "L" Return 
If Not(QTY) Return 
For CTR = 0 To 16
  If CTR < 11 Let FIFOSPECCH[CTR] = 0;FIFOSPEC1[CTR] = 0;FIFOSPEC2[CTR] = 0
  FIFOSPEC3[CTR] = 0
Next CTR
FIFOSPEC$ = " ",FIFOSPEC$
Rem set fifo spec variable for channel #
FIFOSPECCH[0] = 19
FIFOSPECCH[1] = 20
FIFOSPECCH[2] = 29
FIFOSPECCH[3] = 15
FIFOSPECCH[4] = 2
FIFOSPECCH[5] = 5
FIFOSPECCH[6] = 0
Rem set fifospec 1 variables
If PHY_INV
  FIFOSPEC1[0] = 697
Else 
  FIFOSPEC1[0] = 775
End If 
FIFOSPEC1[1] = WHSE
FIFOSPEC1[2] = WHSE
FIFOSPEC1[3] = WHSE
FIFOSPEC1[4] = 0
Rem set fifospec 2 variables
FIFOSPEC2[0] = JARDATE
FIFOSPEC2[1] = POSTPER
Rem set fifospec 3 variables
FIFOSPEC3[0] = QTY
FIFOSPEC3[1] = 0
FIFOSPEC3[2] = 0
FIFOSPEC3[3] = 0
FIFOSPEC3[3] = 0
FIFOSPEC3[4] = 0
FIFOSPEC3[5] = 0
FIFOSPEC3[6] = 0
If A1$[127,127] <> "Y" Or (A1$[127,127] = "Y" And P61$[73,73] <> "Y")
  FIFOSPEC3[4] = A[6]
  FIFOSPEC3[5] = A[5]
End If 
FIFOSPEC3[7] = 0
FIFOSPEC3[8] = 0
FIFOSPEC3[9] = 0
Rem set fifospec$ variable
FIFOSPEC$ = " ",FIFOSPEC$
FIFOSPEC$[1,12] = A1$[140,151]
Rem let fifospec$[13,24]= lot code
Rem let fifospec$[25,34]= serial #
Rem let fifospec$[35,40]= location
!Call "MXFIFO",FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$
Call "MXFIFO.dl4",FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$,e$,IntCo,rstr$                                                             
Return 
FQ9[0] = Int(QTY) \ FQ9[1] = 0 \ FQ9[2] = 0
FLK$ = " ",FLK$ \ FLK$[1,12] = A1$[140,151] \ FLK$[13,14] = WHSE Using "##" \ MODE = 3
If P60$[9,9] = "L" Let FLK$[15] = "999999" \ MODE = 6
L_6030: Search #19,MODE,1;FLK$,R[19],E \ If E = 2 Goto L_6200
If E error 11000
If FLK$[1,12] <> A1$[140,151] Goto L_6200
S9 = FLK$[13,14] \ If S9 <> WHSE Goto L_6200
Mat Read #19,R[19],102;FL3; \ If Not(FL3 - FL3[1]) Goto L_6030
FQ9[2] = FQ9[0] - FQ9[1]
If FQ9[2] > 0 If (FL3[0] - FL3[1]) < 0 Goto L_6095
FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FQ9[2] < 0 If FQTY > 0 Goto L_6095
If FQ9[2] >= 0 Goto L_6030
If FL3[0] Goto L_6030
Mat Read #19,R[19],86;FL2;
If JARDATE = FL2[1] Goto L_6095
Goto L_6030
L_6095: Gosub L_6800
If FQ9[2] < 0 Goto L_6130
If (FL3[1] - FL3[0]) > 0 If (FL3[1] - FL3[0]) < FQ9[2] Let FQ9[2] = (FL3[1] - FL3[0])
FL3[0] = Int(FL3[0] + FQ9[2])
Goto L_6145
L_6130: If FQ9[2] > 0 Goto L_6145
FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FL3[0] If FQTY < Abs(FQ9[2]) Let FQ9[2] = - (FQTY)
FL3[1] = Int(FL3[1] - FQ9[2])
L_6145: FL2[2] = JARDATE
If Not(FL3[6]) If P9$[32,32] = "Y" Let FL3[6] = W3[16]
If Not(FL3[6]) Let FL3[6] = B[10]
FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
If P61$[60,60] = "Y" And FL3[14] = 0
  REC_WHSE = WHSE - 1
  If REC_WHSE < 0 Goto ENDGETSPCOST
  If REC_WHSE > Chf(15) Goto ENDGETSPCOST
  Read #15,REC_WHSE,2970;WHOS;
  If Not(WHOS) Goto ENDGETSPCOST
  FSKEY$ = " ",FSKEY$;FSKEY$[1,12] = A1$[140,151]
  FSKEY$[13,16] = WHOS Using "####"
  Search #29,2,1;FSKEY$,R[29],E \ If E > 1 error 11000
  If Not(E)
    Mat Read #29,R[29],38;FC2;
    FL3[14] = FC2[0]
  End If 
End If 
ENDGETSPCOST: Rem end get special cost
Gosub L_6850
Gosub L_6400
FQ9[1] = Int(FQ9[1] + FQ9[2])
If FQ9[0] = FQ9[1] Return 
Goto L_6030
Stop 
L_6200: Rem CREATE FIFOLOT
FL1$ = " ",FL1$
For S9 = 0 To 14
  If S9 < 3 Let FL1[S9] = 0
  If S9 < 3 Let FL2[S9] = 0
  If S9 < 2 Let FL4[S9] = 0
  FL3[S9] = 0
Next S9
FQ9[2] = FQ9[0] - FQ9[1]
If Not(PHY_INV) Let FL1[0] = WHSE \ FL1[1] = 13 \ If FQ9[2] < 0 Let FL1[1] = 15
If PHY_INV Let FL1[0] = WHSE \ FL1[1] = 11 \ If FQ9[2] < 0 Let FL1[1] = 24
FL1[2] = PFU1[0]
FL1$[1,12] = A1$[140,151]
If Not(PHY_INV) Let FL1$[41,65] = "INVENTORY 775 RESET      "
If PHY_INV Let FL1$[41,65] = "PHYSICAL INVENTORY ADJUST"
FL2[1] = JARDATE
If FQ9[2] > 0 Let FL3[0] = Int(FQ9[2])
If FQ9[2] < 0 Let FL3[1] = Int(Abs(FQ9[2]))
FLK$[1,12] = FL1$[1,12];FLK$[13,14] = FL1[0] Using "##";FLK$[15] = "999999" \ MODE = 6
If P60$[9,9] = "L" Let FLK$[15] = "" \ MODE = 3
Search #19,MODE,1;FLK$,R[19],E \ If E = 2 Goto L_6315
If E error 11000
S9 = FLK$[13,14]
If FLK$[1,12] = FL1$[1,12] And S9 = FL1[0]
  Mat Read #19,R[19],192;FL4;
  Read #19,R[19],186;FL3[14];
  Read #19,R[19],138;FL3[6]; \ Goto L_6325
End If 
L_6315: Rem get special cost
If P61$[60,60] = "Y"
  REC_WHSE = FL1[0] - 1
  If REC_WHSE < 0 Goto GETLASTCOST
  If REC_WHSE > Chf(15) Goto GETLASTCOST
  Read #15,REC_WHSE,2970;WHOS;
  If Not(WHOS) Goto GETLASTCOST
  FSKEY$ = " ",FSKEY$
  FSKEY$[1,12] = FL1$[1,12];FSKEY$[13,16] = WHOS Using "####"
  Search #29,2,1;FSKEY$,R[29],E \ If E > 1 error 11000
  If E = 1 Goto GETLASTCOST
  Mat Read #29,R[29],38;FC2;
  FL3[14] = FC2[0]
End If 
GETLASTCOST: Rem default to cost
If P9$[32,32] = "Y" And W3[16] <> 0 Let FL3[6] = W3[16] \ Goto L_6325
FL3[6] = B[10]
L_6325: FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
FLK$ = " ",FLK$
E = 2 \ Search #19,1,0;FLK$,R[19],E \ If E error 11000
FL2 = R[19]
Gosub L_6850
FLK$ = " ",FLK$ \ FLK$[1,12] = FL1$[1,12] \ FLK$[13,14] = FL1 Using "##"
FLK$[15,20] = FL2[1] Using "######" \ FLK$[21,26] = FL2 Using "######"
Search #19,4,1;FLK$,R[19],E \ If E error 11000
Gosub L_6400
Return 
L_6400: Rem FIFOTRANS FILE UPDATE
FT1$ = " ",FT1$
For S9 = 0 To 3 \ FT1[S9] = 0 \ FT2[S9] = 0 \ FT3[S9] = 0 \ Next S9
FT1$[1,12] = A1$[140,151]
If Not(PHY_INV) Let FT1$[41,48] = "PROG 775"
If PHY_INV Let FT1$[41,48] = "PROG 697"
FT1$[53,72] = "PHYSICAL INVENTORT ADJUST"
If Not(PHY_INV) Let FT1[0] = 13 \ If FQ9[2] < 0 Let FT1[0] = 15
If PHY_INV Let FT1[0] = 11 \ If FQ9[2] < 0 Let FT1[0] = 24
FT1[1] = WHSE
FT1[2] = Spc(6) \ FT2[0] = FL2[0]
FT2[2] = JARDATE \ FT3[0] = FQ9[2]
FT3[1] = FL3[6] \ FT3[2] = FL3[7] \ FT3[3] = FL3[14]
FLT$ = " ",FLT$
E = 2 \ Search #20,1,0;FLT$,R[20],E \ If E error 11000
If R[20] <= 999999 Let FT2[1] = R[20]
Gosub L_6900
FLT$[1,6] = FT2[0] Using "######" \ FLT$[7,12] = FT2[2] Using "######"
If R[20] <= 999999
  FLT$[13,18] = FT2[1] Using "######"
Else 
  FTRECA = Int((R[20] - 1000000) / 100000)
  FTRECB = Fra(R[20] / 100000) * 100000
  Call String(4,FTRECA + 193,LETTER$)
  FLT$[13,13] = LETTER$[1,1]
  FLT$[14,18] = FTRECB Using "#####"
End If 
Search #20,4,1;FLT$,R[20],E \ If E error 11000
Return 
L_6800: Rem READ FIFOLOT
Mat Read #19,R[19],0;FL1
Mat Read #19,R[19],6;FL1$
Mat Read #19,R[19],86;FL2
Mat Read #19,R[19],102;FL3
Mat Read #19,R[19],192;FL4
Return 
L_6850: Rem WRITE FIFOLOT
Mat Write #19,R[19],0;FL1
Mat Write #19,R[19],6;FL1$
Mat Write #19,R[19],86;FL2
Mat Write #19,R[19],102;FL3;
Mat Write #19,R[19],192;FL4;
Return 
L_6900: Rem WRITE FIFOTRANS
Mat Write #20,R[20],0;FT1$;
Mat Write #20,R[20],72;FT1;
Mat Write #20,R[20],80;FT2;
Mat Write #20,R[20],96;FT3;
Return 


L_7650: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E error 11000
ARDATE = X$
Call DateToJulian(1,X$,X$,E) \ If E error 11000
X2 = X$[1,5]
JARDATE = X2
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
L_7800: Rem DATE X$ TO X2
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&";X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: !Print @10,18;'RB CL';"COMPLETE! ";
!Signal 3,10
Goto OUTEND
L_8100: Rem ADJUST INVTRANS FROM WHSE
!If SCODE$ = K3$ Or Not(Fra(TOTREC / 100))
!!  If Not(EOP) And Not(PHY_INV) Print @0,23;'CL';"CHECKING TRANSACTION HISTORY BALANCES FOR ";K1$;
!End If 
K2$ = " ",K2$;K2$ = K1$[1,12]
L_8110: Search #5,3,1;K2$,R5,E \ If E = 1 Or E > 2 error 11000
If E Return 
If K2$[1,12] <> K1$[1,12] Return 
Mat Read #5,R5,78;W3
WH = K2$[13,14]
INV_$ = " ",INV_$
INV_$ = K1$[1,12];INV_$[13,26] = "99999999999999"
L_8145: Search #14,6,2;INV_$,R14,E \ If E = 1 Or E > 2 error 11000
If E Goto L_8110
If INV_$[1,12] <> K1$[1,12] Goto L_8110
Mat Read #14,R14,56;ILT1
Mat Read #14,R14,64;ILT2
If ILT1[1] <> WH Goto L_8145
If W3[0] = ILT2[1] If W3[0] = OLDW3[WH] Goto L_8110
clear itr.
!LT0$ = " ",LT0$;LT1$ = " ",LT1$
itr.ProdCode$ = K1$[1,12];itr.LotNum$ = "STOCK",WH Using "&&","     "
itr.SrcCode$ = "775 CORRECT "
If W3[0] > ILT2[1] ! "correct up for running inventory field
  ITR.COMMENT$[1,20] = "RUN BAL ADJUST UP  "
  itr.TrnsType = 6
Else 
  ITR.COMMENT$[1,20] = "RUN BAL ADJUST DOWN"
  itr.TrnsType = 27
End If 
If Not(W3[0] = ILT2[1])
  itr.Loc$ = "STOCK ";CH_INVTR = 14
  itr.Whse = WH;ITR.ENTBY = rec_usr;ITR.Tiebrkr = 0
  itr.TrnsDate = 0;itr.RunInvt = W3[0];itr.Qty = Abs(W3[0] - ILT2[1]);itr.costload = 0;itr.CostAvg = 0;itr.NetPrice = 0
  !Call "MAKETRANS",LT0$,LT1[],LT2[],LT1$,CH_INVTR
  Call MakeTrans(e$,IntCo,CH_INVTR,status,itr.) !  as invtrans)
  ! Gosub RPT_PRINT ! no running bal on report (user doesn't care)
End If 
If W3[0] > OLDW3[WH] ! "correct up for w3[0]
  ITR.COMMENT$[1,20] = "ADJUST UP           "
  itr.TrnsType = 13
Else 
  ITR.COMMENT$[1,20] = "ADJUST DOWN         "
  itr.TrnsType = 15
End If 
If Not(W3[0] = OLDW3[WH])
  itr.Loc$ = "STOCK ";CH_INVTR = 14
  itr.Whse = WH;ITR.ENTBY = rec_usr;ITR.Tiebrkr = 0
  itr.TrnsDate = 0;itr.RunInvt = W3[0];itr.Qty = Abs(W3[0] - OLDW3[WH]);itr.CostLoad = 0;itr.CostAvg = 0;itr.NetPrice = 0
  !Call "MAKETRANS",LT0$,LT1[],LT2[],LT1$,CH_INVTR
  Call MakeTrans(e$,IntCo,CH_INVTR,status,itr.) !  as invtrans)
  Gosub RPT_PRINT
End If 
Goto L_8110
RPT_PRINT: Rem ========= print the report
If V9[1] < V9[4] Goto LINE_PRINT
If PAGECOUNT Print #CHNL;"\14\"
PAGECOUNT = PAGECOUNT + 1 \ V9[1] = 6
T9$ = "" \ Call Time(T9$)
Print #CHNL;"MX775 "; Tab 7;T9$; Tab 35;"INVENTORY QTY RESET"; Tab 60;"PAGE";PAGECOUNT
Print #CHNL;""
Print #CHNL;"PROD CODE"; Tab 15;"WHSE#"; Tab 24;"ORIGINAL"; Tab 34;"WHSE QTY"; Tab 45;"NEW RUNNING";
Print #CHNL; Tab 60;"OLD RUNNING "
Print #CHNL; Tab 24;"ON HAND"; Tab 35;"ON HAND"; Tab 45;"INVENTORY"; Tab 60;"INVENTORY"; Tab 78;"COMMNT"
Print #CHNL;LINE_$[1,79]
V9[1] = V9[1] + 5
LINE_PRINT: Rem
Print #CHNL; Tab 0;itr.ProdCode$;
Print #CHNL; Using "##"; Tab 14;WH;
Print #CHNL; Using M1$; Tab 22;OLDW3[WH];
Print #CHNL; Using M1$; Tab 32;W3[0];
Print #CHNL; Using M1$; Tab 42;ILT2[1];
Print #CHNL; Using M1$; Tab 59;itr.RunInvt;
Print #CHNL; Tab 75;ITR.COMMENT$[1,20]
V9[1] = V9[1] + 1
Return 

DO_ABORT: Rem"The user may wish to stop the inventory reset
!If Spc(8) <> 99 Goto ERR_TRAP
!Print @0,22;'CE';"Do you wish to abort this program? (Y/N) ";
!Input "";X$
!If X$ = "Y" Or X$ = "y"
!  Print @0,22;'CE';"Aborting inventory quantity reset at next safe point...";
 ! Pause 10
 ! ABORT = TRUE
!Else 
!  Print @0,22;'CE'
!End If 
!Return -1
goto outend:

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
Print #StatChan;msg$
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem EXIT ROUTINE
!Print 'CS'
!If EOP Chain ""
!Close 
!Chain "MX000"
!Stop 
!End 
if not(eflg)
	Print #StatChan;"Succesfully completed!"
	PRINT #STATCHAN;"\14\" ! TOP OF FORM
	try close #chnl else rem
	! per group - send report to same file?
	open #chnl,file$
	RPTFLoop: !
	read #chnl;tmp1$
	if tmp1$<>""
		print #statchan;tmp1$; ! alread cr/lf?
		goto rptfloop
	Endif
	try close #chnl else rem
	try kill file$ else rem ! one per run!
endif
If PHY_INV<>0 or EOP<>0
  For X = 2 To 20
    Try Close #X Else Rem
  Next X
  Try Close #29 Else Rem
  !If Err 0 Gosub ERR_TRAP
End If
if j8=0 
	if not(eflg) call ERPCronSuccess()
	End ! all done
end if
if eop=0
	! Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflg>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflg) and message$=""
		let message$="Report Complete. "
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
	try Call dxclose() else rem
endif
if not(eflg) call ERPCronSuccess()
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
