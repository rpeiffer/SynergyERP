Rem PO367C  PURCHASE ORDER GENERATE - CREATE LINE ITEMS
Rem  AUTHOR: G.DOSCHER   8/15/88
Rem  LAST UPDATE:
!
! loadsave -w -n 100,10 -o prog/dxport/po367c.dl4 src/po367c.src
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 31, 2008  14:16:06
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/po/po367c.src (univ2) [txc] {29969}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc" ! dx
!Include "src/inc/fileprtdefault.inc" ! port defaults
!Include "src/inc/fileprod.inc" ! Prodfile
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Sub UserCntrl,GetPortDefault,GetCostLevels
External Lib "libprodwh.lib"
Declare External Sub mxwhcreate
Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate,programdump
! Option Default Dialect IRIS1
Try
Com 1%,COST_LEV[3],PFU1[20],CNVTU[9]
Com 2%,L9,S9[9]
Com 3%,PFU2[6],CNVTA[4],A[33],PO3[12]
! WEB VARIABLES
Dim tmp$[200],UserId$[10],WebStr$[1000],Blank$[128],Message$[200]
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim action$[30],options$[30],action1$[30],msg$[256],action2$[30]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
Dim 2%,maxcnt \ maxcnt=50 ! init max records in arrays for list
dim List$[maxcnt,1000] ! for .net (larger size - ZLines)
Dim 1%,A2[2],E,L1[5],W1[2],WH0[3],WH8[47],H4[3],X0[9],PL0[4],EUN[2],POMISC[2],DL1[6]
Dim 2%,B[24],H0[5],H3[4],L2[2],W2[9],W7[1],X2[9],WH7[3],WHBLD[2],DL2[4],PC_DATE
Dim 3%,A1[5],H8[9],L3[6],R0,R8,R9,T9[9],W3[24],W5[25],WH9[23],Z9,DL3[3]
Dim 2%,A4[1],DT3[1],JPCDATE,JDATE[1],3%,PL4[23],PL5[9],PL6[10],OLL7[12]
Dim 3%,PFA1[7],PL[5],NSD$[96],1%,NSD1[7],2%,NSD2[4],3%,NSD3[9],Q1[2]
Dim OLL6$[60],OLL2$[20],OLS3$[33],1%,OLUN[2],OLL3[3],2%,OLL6[5],3%,OLL5[3],OLS3[17]
Dim 2%,OLL4[3],VEND$[50],P9$[50],P60$[50],P61$[256],K7$[64],OLL2[1]
Dim J$[40],J7$[75],L1$[120],A$[156],T1$[12],T2$[56],T5$[12],K17$[50],AA$[20]
Dim 3%,EM[9],M1[17],AMOUNT,I$[15],U6$[50],UNF[6],A3[4],M1$[4]
Dim 3%,DISP_COST,DISP_QTY,DISP_EXT,PONUM
Dim 3%,X3[9]
Dim K2$[30],U5$[50],W1$[32],W2$[16],X$[12],WHPROD$[12],K12$[50]
Def FNS(H) = Int(Abs(H) * 100 + .99) * .01 * Sgn(H)
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 100000 + .5) * .00001)
Def FNU(H) = Int(Abs(H)) + Sgn(Fra(Abs(H))) * Sgn(H)
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Blank$=" ",Blank$
! ALL FILES PASSED FROM PO367B
call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
! OPTIONS$ & ACTION$ used in POMENU.dl4 for routing
COID = IntCo
UserId$=UCase$(Userid$)+Blank$
Mat Read #1,19,50;P9$; \ Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Read #1,3,172;PC_DATE;
X2 = PC_DATE \ Gosub L_7820 \ X2 = 0
If X2 Let JPCDATE = X2 Else Let X2 = Tim(6)
R8 = S9[0] \ L1[2] = 0
Mat Read #8,R8;H0;
Mat Read #8,R8,222;H3;
Mat Read #8,R8,242;H4;
Mat Read #8,R8,250;H8;
Mat Read #8,R8,350;PO3;
H8[0] = 0;H8[1] = 0;PO3[9] = 0;PO3[10] = 0
For X = 0 To 12 \ PO3[X] = 0 \ Next X
! Print @0,23;"CREATING PO LINES, DO NOT DISTURB . . . ";'CL'; \ Signal 3,0

Gosub SORTBYPROD
K7$ = " ",K7$
L_1230: Rem "Next one please
Search #7,3,1;K7$,R2,E \ If E = 2 Goto L_1800
If E Gosub ERR_SEARCH
K2$ = " ",K2$;K2$ = K7$[13]
If K2$[13,13] = "@" Goto L_1230
X1 = K2$[1,2] \ If X1 <> H4[1] Goto L_1800
X2 = K2$[3,8] \ If X2 <> H3[3] Goto L_1800
Mat Read #2,R2,56;A2;
X2 = K2$[9,12]
If X2 < S9[7] Or X2 > S9[8] Goto L_1230
If Not(S9[9]) And A2[2] = 1 Goto L_1230
If S9[9] And A2[2] = 1 Goto CONTLSRCH
CONTLSRCH: Rem "
Gosub L_6100 \ If Not(A3[2]) Goto L_1600 ! read genwrk \ not flagged
Gosub L_8810 ! clear pol
L9 = L9 + 1
R3 = A1[0] \ Gosub L_6000 \ Gosub L_8100 ! read prod \ get next line
POMISC[0] = 0;POMISC[1] = 0;POMISC[2] = 0
If A2[2] Goto L_1265
If H4[0] = 0 Or H4[0] = 3 Let POMISC[0] = 1
If H4[0] = 2 And P60$[22,22] = "Y" Let POMISC[0] = 1
L_1265: If Not(A2[2]) Let L3[1] = A1[0]
CNVTA = A1[3];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
Gosub L_20000
CNVTA = AMOUNT;CNVTU[0] = PFU1[10];CNVTU[1] = 0;CNVTU[2] = 1
Gosub L_20000
L3[2] = AMOUNT;PL4[5] = L3[2]
L1[0] = 1 \ L1[1] = H4[1] \ L1[3] = 0 \ L1[4] = PFU1[10]
If A2[2] Let L1[3] = 1
Gosub L_5000 ! read prodwhse
L1[5] = PFU1[11] \ L2[1] = 0 \ L2[2] = H0[4]
If P9$[32,32] = "Y"
  If W3[16] Let L2[0] = W3[16] Else Let L2[0] = B[10]
End If 
If Not(L2[0]) Or P9$[32,32] = "N"
  L2[0] = B[10] \ If Not(L2[0]) Let L2[0] = B[21]
End If 
PL4[12] = A[6];PL4[13] = A[5];PL4[14] = B[23];PL4[15] = PFA1[3] ! NEEDS SETUP BEFORE CALC_DISP_EXT!!!!
If PL4[13]<=0 Let PL4[13]=1 ! NEEDS SETUP BEFORE CALC_DISP_EXT!!!!
If PL4[12]<=0 Let PL4[12]=1 ! NEEDS SETUP BEFORE CALC_DISP_EXT!!!!
If PFA1[3] Let L3[6] = (L3[2] + PL4[1]) * B[23] / PFA1[3]
Gosub L_11000 \ PL4[0] = L2[0] ! deals
PL4[0] = L2[0] - (L2[0] * (PERCENT / 100)) - DOLLOR
PL4[1] = FREE_QTY
PL4[2] = PERCENT;PL4[3] = DOLLOR
DISP_QTY = PL4[5];DISP_COST = L2[0] \ Gosub CALC_DISP_EXT
PL4[6] = DISP_EXT
DISP_QTY = PL4[5];DISP_COST = PL4[0] \ Gosub CALC_DISP_EXT
PL4[7] = DISP_EXT
L3[0] = R8 \ L3[3] = 0 \ L3[4] = 0
If Not(A[5]) Let A[5] = 1
If A[5] Let L3[5] = (L3[2] + PL4[1]) * A[6] / A[5] Else Let L3[5] = 0
L3[6] = 0 \ L1$ = " ",L1$
PL4[12] = A[6];PL4[13] = A[5];PL4[14] = B[23];PL4[15] = PFA1[3]
If PL4[13]<=0 Let PL4[13]=1
If PL4[12]<=0 Let PL4[12]=1
If PFA1[3] Let L3[6] = (L3[2] + PL4[1]) * B[23] / PFA1[3]
L1$[1,30] = A$[9,38] \ L1$[31,60] = A$[63,92]
If A$[93] <> "" Let L1$[61,80] = A$[93,112] \ L1$[81,92] = A$[140,151]
If W1$[13,17] <> "     " And W1$ <> "" Let L1$[61,80] = W1$[13,32]
NSD1[0] = L1[2];NSD2[0] = H0[2];NSD2[1] = H3[3];NSD2[2] = H0[3]
PONUM=h0[2] ! new fld - po num
If A2[2] Gosub L_2000 ! nonstk create
E = 2 \ Search #9,1,0;U5$,R9,E \ If E Gosub ERR_SEARCH
Gosub L_7900 ! write line
U5$ = H0[2] Using "######" \ U5$[7] = L1[2] Using "###"
Search #9,4,1;U5$,R9,E \ If E Gosub ERR_SEARCH
U5$ = L3[1] Using "######"
U5$[7] = H0[2] Using "######"
U5$[13] = L1[2] Using "###"
Search #9,4,2;U5$,R9,E \ If E Gosub ERR_SEARCH
Gosub L_4400 ! po ttls & on po
L_1600: Rem DELETE WORKFILE ENTRY
A4[0] = -1;A4[1] = -1
search #2,2,1;K2$,R2,E \ If E Return
Mat Write #2,R2,92;A4;
Search #2,5,1;K2$,R0,E \ If E Gosub ERR_SEARCH
If R0 <> R2 Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;K2$,R2,E \ If E Gosub ERR_SEARCH
Goto L_1230 ! next sortline

L_1800: Rem NO MORE LINES IN WORKFILE
Mat Write #8,R8,250;H8;
Mat Write #8,R8,350;PO3;
K2$ = " ",K2$
K2$ = H4[1] Using "##" \ K2$[3] = H3[3] Using "######"
For X2 = S9[7] To S9[8]
  K2$ = " ",K2$
  K2$ = H4[1] Using "##" \ K2$[3] = H3[3] Using "######"
  K2$[9,12] = X2 Using "####";K2$[13] = "@"
  Gosub DELGENL
Next X2
Goto CPOLDONE
DELGENL: Rem "
Search #2,2,1;K2$,R2,E \ If E Return 
Search #2,5,1;K2$,R0,E \ If E Gosub ERR_SEARCH
If R0 <> R2 Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;K2$,R2,E \ If E Gosub ERR_SEARCH
Return 
CPOLDONE: Rem "
!Print "  COMPLETE !";'CL RB'; \ Signal 3,20
ReturnStatus=1
Message$="OK"
Goto OUTEND

SORTBYPROD: Rem "Sort in Product Code Order
K7$ = " ",K7$
CLRSORTFLE: Rem "Clear first
Search #7,3,1;K7$,R7,E \ If E = 2 Goto STARTPSORT
If E Gosub ERR_SEARCH
Search #7,5,1;K7$,R7,E \ If E Gosub ERR_SEARCH
Goto CLRSORTFLE
STARTPSORT: Rem "
K2$ = " ",K2$
K2$ = H4[1] Using "##" \ K2$[3] = H3[3] Using "######"
WRKLOOP: Rem "Next one please
Search #2,3,1;K2$,R2,E \ If E = 2 Goto SORTDN
If E Gosub ERR_SEARCH
If K2$[13,13] = "@" Goto WRKLOOP
X1 = K2$[1,2] \ If X1 <> H4[1] Goto SORTDN
X2 = K2$[3,8] \ If X2 <> H3[3] Goto SORTDN
Mat Read #2,R2,56;A2;
X2 = K2$[9,12]
If X2 < S9[7] Or X2 > S9[8] Goto WRKLOOP
If Not(S9[9]) And A2[2] = 1 Goto WRKLOOP
If S9[9] And A2[2] = 1 Goto CONTPLSRCH
CONTPLSRCH: Rem "
Gosub L_6100 ! read genwrk
R3 = A1[0] \ Gosub L_6000 ! read prod
K7$ = " ",K7$
K7$ = A$[140,151];K7$[13] = K2$
Search #7,4,1;K7$,R2,E \ If E > 1 Gosub ERR_SEARCH
Goto WRKLOOP
SORTDN: Rem "Done Sorting
Return 

L_2000: Rem NON STOCK LINE
X0=0
L_2010: K17$ = NSD$[1,12] \ K17$[13] = X0 Using "##"
Search #14,2,1;K17$,L3[1],E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  X0 = X0 + 1 \ If X0 > 99 Gosub ERR_SEARCH
  Goto L_2010
End If 
E = 2 \ Search #14,1,0;K17$,L3[1],E \ If E Gosub ERR_SEARCH
nsd1[6]=x0 ! stores tiebrkr
Gosub L_6900 ! write nonstk
Search #14,4,1;K17$,L3[1],E \ If E Gosub ERR_SEARCH
Return 
L_4000: Rem CONV REC=>DSPL NOT USED!!
CNVTA = L2[0];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
Gosub L_20000 \ Q1[0] = AMOUNT
CNVTA = L3[2];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
Gosub L_20000 \ Q1[1] = AMOUNT
QSHP = 0 \ CNVTA = PL4[5] \ Gosub L_20000 \ QSHP = AMOUNT
CNVTA = L3[3];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
Gosub L_20000 \ Q1[2] = AMOUNT
Return 
CNVTA = Q1[0];CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
Gosub L_20000 \ L2[0] = AMOUNT
CNVTA = Q1[1];CNVTU[0] = L1[4];CNVTU[1] = 0;CNVTU[2] = 1
Gosub L_20000 \ L3[2] = AMOUNT
Return 

L_4350: Rem EXTEND COST
DISP_QTY = L3[2];DISP_COST = PL4[0] \ Gosub CALC_DISP_EXT
T9 = DISP_EXT
L3[5] = 0 \ If A[5] Let L3[5] = A[6] * L3[2] / A[5]
Return 
L_4400: Rem ADJUST ON ORDER PO & TOTALS
Gosub L_4350 ! extend cost
H8[0] = H8[0] + PL4[7]
CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
QSHP = 0 \ CNVTA = PL4[5] \ Gosub L_20000 \ QSHP = AMOUNT
PO3[10] = PO3[10] + QSHP
H8[1] = H8[1] + L3[5]
PO3[9] = PO3[9] + L3[6]
! TO_[2] = PO[3] ??????
If A2[2]
  EM[0] = EM[0] + T9
  EM[1] = EM[1] + L3[5]
  EM[2] = EM[2] + L3[6]
  EM[3] = EM[3] + L3[2]
End If 
Q9 = (L3[2] - L3[3]) + (PL4[1] - PL4[17]) \ If Q9 < 0 Let Q9 = 0
L_4465: If POMISC[0]
  Mat Read #3,L3[1],256;A
  A[2] = A[2] + Q9
  Mat Write #3,L3[1],256;A;
End If 
If Not(POMISC[0]) Goto L_4705
U5$ = L1$[81,92] \ U5$[13] = L1[1] Using "##"
Search #10,2,1;U5$,R7,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_4690
If X0 < 0 Gosub ERR_SEARCH
WHPROD$[1,12] = L1$[81,92];WHBLD[0] = 10;WHBLD[1] = L1[1];WHBLD[2] = B[24]
Call mxwhcreate(e$,IntCo,WHPROD$,WHBLD[])
R7 = WHBLD[2];E = 0;WHBLD[2] = 0 \ Goto L_4690
L_4690: Gosub L_6300 ! read prodwhse files
W3[1] = W3[1] + Q9 
Gosub L_6400
L_4705: Return 

L_5000: Rem READ PROD WH
For X = 0 To 24 \ W3[X] = 0 \ Next X
If A2[2] Return 
U5$ = A$[140,151] \ U5$[13] = H4[1] Using "##"
Search #10,2,1;U5$,R7,E \ If E Return 
Gosub L_6300 ! read prodwhse file
Return 
L_6000: Rem READ PRODUCT FILE
If A2[2] Goto L_6500 ! read order line
L_6010: Mat Read #3,R3,0;A$;
Mat Read #3,R3,156;B;
Mat Read #3,R3,256;A;
Mat Read #3,R3,460;PFA1;
Mat Read #3,R3,512;PFU1;
Mat Read #3,R3,554;PFU2;
Return 
L_6100: Rem READ GENWRK
Mat Read #2,R2,0;AA$;
Mat Read #2,R2,20;A1;
Mat Read #2,R2,56;A2;
Mat Read #2,R2,62;A3;
If A1[3] <= 0 Let A3[2] = 0
Return 
L_6300: Rem READ WHPR FILE
If A2[2] Return 
Mat Read #10,R7,0;W1$
Mat Read #10,R7,32;W1
Mat Read #10,R7,38;W2
Mat Read #10,R7,78;W3
Mat Read #10,R7,228;W5
Mat Read #10,R7,404;W2$;
Mat Read #10,R7,420;WH0;
Mat Read #10,R7,428;WH7;
Mat Read #10,R7,444;WH8;
Mat Read #10,R7,540;WH9;
Mat Read #10,R7,696;W7;
Return 
L_6400: Rem WRITE WHPR FILE
Mat Write #10,R7,0;W1$;
Mat Write #10,R7,32;W1;
Mat Write #10,R7,38;W2;
Mat Write #10,R7,78;W3;
Mat Write #10,R7,228;W5;
Mat Write #10,R7,404;W2$;
Mat Write #10,R7,420;WH0;
Mat Write #10,R7,428;WH7;
Mat Write #10,R7,444;WH8;
Mat Write #10,R7,540;WH9;
Mat Write #10,R7,696;W7;
Return 
L_6500: Rem READ ORDER LINE FOR NON STOCK
Mat Read #16,A1[0],0;OLL2;
Mat Read #16,A1[0],8;OLL3;
Mat Read #16,A1[0],140;OLL2$;
Mat Read #16,A1[0],80;OLL6$;
Mat Read #16,A1[0],370;OLS3$;
Mat Read #16,A1[0],250;OLUN;
Mat Read #16,A1[0],16;OLL4;
Mat Read #16,A1[0],32;OLL5;
Mat Read #16,A1[0],56;OLL6;
Mat Read #16,A1[0],168;OLL7;
Mat Read #16,A1[0],260;OLS3;
Mat Read #16,A1[0],446;EUN;
Mat Read #16,A1[0],452;UNF;
OLL4[2] = H0[2]
If A3[2] Mat Write #16,A1[0],16;OLL4;
PL4[10] = OLL2[1] \ PL4[11] = OLL3[2]
B[11] = OLL3[3]
Gosub L_30000 ! move to prod vats
B[10] = OLL5[1];W3[16] = 0;B[21] = 0
If OLL7[7] Let B[10] = OLL7[7]
PFA1[3] = UNF[4] \ B[23] = OLL6[2]
A$[140,151] = OLL2$[1,12]
A$[93,112] = OLS3$[1,20]
A$[9,38] = OLL6$[1,30]
A$[63,92] = OLL6$[31,60]
For X = 0 To 6 \ W3[X] = 0 \ Next X
NSD$[1,12] = OLL2$[1,12] \ NSD$[13,42] = OLL6$[1,30]
NSD$[43,72] = OLL6$[31,60] \ NSD$[73,92] = OLS3$[1,20]
NSD$[93,96] = OLL2$[17,20]
NSD3[6] = OLL6[4] \ NSD3[7] = UNF[5] \ NSD3[8] = UNF[4]
NSD1[1] = OLL3[3];NSD2[0] = H0[2];NSD2[1] = OLS3[14];NSD2[3] = OLL5[1];NSD2[4] = A1[0]
NSD3[2] = OLL6[2]
For X = 2 To 5
  If X = 2 Let NSD1[X] = EUN[0]
  If X = 3 Let NSD3[X] = UNF[2];NSD1[X] = OLUN[2]
  If X = 4 Let NSD3[X] = UNF[3];NSD1[X] = EUN[1]
  If X = 5 Let NSD3[X] = UNF[0];NSD1[X] = OLUN[0]
Next X
Return 
L_6900: Rem WRITE NSTKDESC
Mat Write #14,L3[1];NSD$;
Mat Write #14,L3[1],96;NSD1;
Mat Write #14,L3[1],112;NSD2;
Mat Write #14,L3[1],132;NSD3;
Return 

X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_7900: Rem WRITE LINE REC
Mat Write #9,R9;L1
L_7910: Mat Write #9,R9,12;L2
Mat Write #9,R9,24;L3;
Mat Write #9,R9,66;L1$;
Mat Write #9,R9,186;PL;
Mat Write #9,R9,222;PL0;
Mat Write #9,R9,232;PL4;
Mat Write #9,R9,376;POMISC;
Mat Write #9,R9,382;PL5;
Mat Write #9,R9,442;PL6;
x2=0;x3=0 ! for new fields added
write #9,r9,502;x3; ! apfrtmischr
write #9,r9,508;x2; ! cntrl
write #9,r9,512;x3; ! gross lb
write #9,r9,518;x3; ! gr lb fact
write #9,r9,524;x3; ! gr wgt
write #9,r9,530;x3; ! tot netwgt
write #9,r9,536;x3; ! tot grwgt
Mat write #9,R9,542;ponum;
Return 
L_8000: Rem WRITE NSTKDESC
Mat Read #14,L3[1];NSD$;
Mat Read #14,L3[1],96;NSD1;
Mat Read #14,L3[1],112;NSD2;
Mat Read #14,L3[1],132;NSD3;
A[6] = NSD3[6] \ A[5] = NSD3[7]
PFA1[3] = NSD3[8] \ B[23] = NSD3[2]
Return 
L_8100: Rem FIND OPEN LINE#
U5$ = H0[2] Using "######"
L_8140: L1[2] = L1[2] + 1 \ U5$[6] = L1[2] Using "###"
Search #9,2,1;U5$,R9,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_8140
Return 

L_8810: Rem ADD-A-LINE
L2[0] = 0;L2[1] = 0;L3[3] = 0;L1[0] = 1
For X0 = 0 To 9 \ PL5[X0] = 0 \ Next X0
B1 = 0 \ L3[2] = 0 \ T9 = 0 \ L3[1] = 0
POMISC[0] = 0;POMISC[1] = 0;POMISC[2] = 0
For X0 = 0 To 4 \ PL0[X0] = 0 \ Next X0
For X0 = 0 To 23 \ PL4[X0] = 0 \ Next X0
For X0 = 0 To 24 \ B[X0] = 0 \ Next X0
PL0[2] = 1
For X0 = 0 To 10 \ PL6[X0] = 0 \ Next X0
Return 
L_11000: Rem LOOK FOR DEALS
DOLLOR = 0;PERCENT = 0;FREE_QTY = 0
CNVTA = A1[3];CNVTU[0] = PFU1[10];CNVTU[1] = 0;CNVTU[2] = 1
V9 = AA$[3,8]
K12$ = " ",K12$
K12$[1,6] = V9 Using "######"
K12$[7,18] = A$[140,151]
K12$[19,27] = 999999999 - (A1[3] + 1) Using "#########"
L_11080: Search #19,3,1;K12$,R12,E
If E Goto L_11300
X2 = K12$[1,6] \ If X2 <> V9 Goto L_11300
If K12$[7,18] <> A$[140,151] Goto L_11300
Mat Read #19,R12,0;DL2;
Mat Read #19,R12,20;DL1;
Mat Read #19,R12,34;DL3;
X2 = DL2[1] \ Gosub L_7820 \ X2 = 0
JDATE[0] = X2
X2 = DL2[4] \ Gosub L_7820 \ X2 = 0
JDATE[1] = X2 \ If DL2[4] = 999999 Let JDATE[1] = DL2[4]
If JPCDATE < JDATE[0] Or (DL2[4] And JPCDATE > JDATE[1]) Goto L_11080
If DL1[1] = 1 Let PERCENT = DL3[0]
If DL1[1] = 2
  CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 2
  DOLLOR = DL3[0]
End If 
If DL1[1] = 3
  CNVTA = DL3[2];CNVTU[0] = 0;CNVTU[1] = DL1[4];CNVTU[2] = 1
  Gosub L_20000
  WITH_QTY = AMOUNT
  CNVTA = A1[3];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
  Gosub L_20000
  CNVTA = AMOUNT;CNVTU[0] = PFU1[10];CNVTU[1] = DL1[4];CNVTU[2] = 1
  Gosub L_20000
  FREE_QTY = Int(AMOUNT / WITH_QTY) * DL3[0]
  CNVTA = FREE_QTY;CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
  Gosub L_20000
  CNVTA = AMOUNT;CNVTU[0] = PFU1[10];CNVTU[1] = 0;CNVTU[2] = 1
  Gosub L_20000
  FREE_QTY = AMOUNT
End If 
L_11300: Return 
CALC_DISP_EXT: Rem convert qty and cost to cost um, then calc ext cost
DISP_EXT = FNR(DISP_QTY * DISP_COST)
CNVTA[0] = DISP_COST;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
DISP_COST = AMOUNT
If L1[5] = -1 Or L1[5] = -3
	If PL4[13]<=0 Let PL4[13]=1
  If L1[5] = -1 Let DISP_EXT = FNR(DISP_COST * (PL4[12] * DISP_QTY / PL4[13]) / 100)
  If L1[5] = -3 Let DISP_EXT = FNR(DISP_COST * (PL4[12] * DISP_QTY / PL4[13]))
End If 
If L1[5] = -2 Let DISP_EXT = DISP_COST
Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: ! If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_30000: Rem ===== set n/s units for conversions
A[6] = OLL6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
PFU1[0] = EUN[0];PFU1[1] = OLUN[0]
PFU1[2] = OLUN[1];PFU1[3] = OLUN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = OLUN[0];PFU1[9] = OLUN[0];PFU1[10] = EUN[1]
PFU1[11] = OLUN[2];PFU1[12] = OLUN[1];PFU1[13] = OLUN[0]
PFU1[16] = EUN[0];PFU1[17] = EUN[0];PFU1[18] = OLUN[0]
PFU1[19] = OLUN[0]
PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
Return 
OUTEND: Rem NEXT PART
! send info to do std PO Totals
X$="W";E$=""
IF H4[0]=0 x$="W"  
IF H4[0]=1 x$="D"  
IF H4[0]=2 x$="I" 
IF H4[0]=3 x$="M" 
IF H4[0]=4 x$="IW" 
IF H4[0]=5 x$="ID"
IF H4[0]=6 x$="II" 
IF H4[0]=7 x$="IM"
Clear List$[]
List$[0]=bsdel$,"POTOTALS",fdel$
WebStr$="OPTION",fdel$,"ACTION",fdel$,"VENDID",fdel$,"POID",fdel$
WebStr$=WebStr$,"WHSE",fdel$,"ORDTYPE",fdel$
List$[1]=WebStr$
WebStr$="SERPPOH",fdel$,"GETPOTOT",fdel$,STR$(H3[3]),fdel$,STR$(H0[2]),fdel$
WebStr$=WebStr$,Str$(H4[1]),fdel$,X$,fdel$ ! add whse otype
List$[2]=WebStr$
List$[3]=esdel$
call AddToStr(e$,rstr$,List$[])
! status section
OutDone: ! send status
e$=""
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
! chain "PO367D" ! totals?
!Call programdump("tmp/po367cdone!","")
Else
	include "src/callmainerrnet.inc"
end try
End ! the whole program
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
Call programdump("tmp/po367cse!","")
returnstatus=0
message$=msg$
goto OutDone ! alt - send user message
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
End 
Rem {end rtn.error.s}
