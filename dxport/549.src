! >>> Program 549
!
! description Accounts Payable Positive Pay 
! loadsave -w -n 100,10 -o prog/dxport/549.dl4 src/549.src
! ***** coding for currently for  Edmar ***** 
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT  9, 2008  11:36:47
Rem /w/papermaster/r2002//usr/acct/mary/work/custom/dadedevl/la549.src (univ2) [mary] {02303}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub Date,FileInfo,FindF,InpBuf,String,Time,VerifyDate,DateToJulian
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"


Rem LA549 A/P Check Extraction Process
Rem LAST UPDATE: 01/01 cct#141471 Custom for Dade Paper
Rem              10/06 cct#208658
Rem		 02/11 task# 928 **** CUSTOM FOR EDMAR *** 
Rem file format record length 316 bytes - all unused will be left blank
Rem *** Header Record and Total Record OPtional and are not required **
Rem format from Bank of America
Rem 1. Account Number (01,12) -- right justified, zero filled
Rem 2. Void Indicator (13,13) -- "O" for outstanding -- "V" for void 
Rem 3. Serial/check # (14,23) -- Right Justified, Zero filled
Rem 4. Amount         (24,35) -- Right Justified, Zero filled - no decimal
Rem 5. Issue/Chk Date (36,41) -- MMDDYY
Rem 6. Payee Name     (45,74) -
Rem 7. Filler         (75,316)

!----- Acme - Wells Fargo Format ----- ! positive pay
! file record length 85 bytes !
! comma delimited file
Rem ----- Detail Record
rem 1. Bank Routing - from a/p cash 
rem 2. bank acct#   - from a/p cash - bank account
rem 3. Check #      - zero filled
rem 4. Issue Date    - MM/DD/YYYY
rem 5. Amount       - zero filled - no decimal pts
rem 6. trans code  - from 320 - check register, 430 void, 370 Cancel
rem 7. Optional -  Payee Name   - payee name

!----- Piedmont BB&T ----- ! positive pay
! file record length 85 bytes !
! comma delimited file
Rem ----- Detail Record
rem 1. bank acct#   - from a/p cash - bank account
rem 2. Check #      - zero filled
rem 3. Amount       - zero filled 
rem 4. Issue Date    - MM/DD/YYYY
rem 5. Optional -  Payee Name   - payee name

!---- AMWAX Chase ---- ! positive pay  (Note: same format as JPMORGAN)
Rem file format 316 bytes
rem comma delimited
Rem - Detail Record
rem 1. Transaction indicator  C=Cancel, I=issue
rem 2. Account Number (17 digit)
rem 3. Check Number (10 digit)
rem 4. Check Date (MMDDYY)
rem 5. Amount - with decimal points
rem 6. Payee Name (no commas -40 characters)
rem 6. Payee Name (optional - 40 characters)

Try
Com 2%,chkdate, pbankcode$[4]
dim e$[500],buttonlist$[5,50],nextlist$[5,100],msg$[100],TMP$[800],rstr$[2000] ! error 
dim xdate$[50]

!If Err 0 Gosub ERR_TRAP
dim 1%,wellsfargoflag,boaflag,bbtflag,paymodex
Dim 1%,B8[1],B9,C0[6],E,G9,I,R9,L,L9,P,X,X1,Y0
Dim 2%,A1,B1,C[1],C1,C2,C3[2],C9,D0,H[3],R1,R[16],W,X2,createdate
Dim 2%,ISSDATE,EXDATE,CURDATE
dim 3%,tmp3
Dim 4%,BANKACC,CHECKAMT,CHKTOT
Dim 3%,A9,K4,T1[4],X3
Dim C$[10],F$[16],G$[2],i1$[50]
Dim I$[30],J$[50],K$[20],K1$[50],K4$[30],K5$[30],N$[40],P$[8],R$[63]
Dim R2$[4],U5$[50],V$[20],V1$[20],X$[10],NAME$[30],P61$[256]
dim custom_customer$[30]
Dim ACPER$[4],DATE$[6],BANKACC$[16],DATE1$[8],PTRNM$[50]!,TEXT$[316]
dim bankrte$[12]
Dim 2%,H[3],1%,H1[1],H$[30],H1$[12],3%,H2[2],1%,N3[1],2%,N5
Dim 1%,A5,A5$[30],3%,A6[2],2%,A7[1],BANKCODE$[4]
Dim 1%,M[1],M$[12],2%,M1[8],3%,M2[4]
Dim CMD$[500],FTMPNAME$[20],BLANK$[50]
dIM GROUPID$[1]
Dim fname$[50],groupid$[1],2%,apdate
Dim 1%,tmpmth,tmpyr
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim tmp1$[200],blockid$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
DIM SOURCEDIRNAME$[50],TEXTDIRNAME$[50],tmpfile$[80],txtfile$[80]
DIM ADDR$[30],keyvend$[30],3%,rec_vend
DIM 3%
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
COMP=intCO
for ctr=0 to 99
	Try Close #ctr Else Rem
next ctr
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Dim 3%
Mat Read #1,51,18;C0;
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
MAT READ #1,61,0;P61$;
IF P61$[99,99]<>"Y" and p61$[99,99]<>"P"
	let eflag=eflag+1
	let message$="A/P Payment Submittal Not Available "
	goto outend:
endif
LET BLANK$=" ",BLANK$
!LET SOURCEDIRNAME$="files/6/aptxt/"


mat read #1,115,60;custom_customer$;
custom_customer$ = rtrim$(custom_customer$)
!!! for testing !!!!!!!!!!
! let custom_customer$="JACKSON" !!!!!!!!!!! remove after testing is complete

let boaflag=0;wfflag=0;jpmflag=0;bbtflag=0;paymodex=0
if custom_customer$="BURKE" let jpmflag=1 !!! note for burke native jpmflag has different format
if custom_customer$="ACME" LET wfflag=1
!if custom_customer$="EDMAR" let boaflag=1
if custom_customer$="EDMAR" let jpmflag=1 ! T
if custom_customer$="EDMAR" let hsbcflag=1
if custom_customer$="HATHAWAY" let wfflag=1
if custom_customer$="STERLING" let wfflag=1
if custom_customer$="PIEDMONT" let bbtflag=1
if custom_customer$="JACKSON" let paymodex=1 
if custom_customer$="AMWAX" let chaseflag=1
If custom_customer$="BUTLER" let peopleflag=1
if custom_customer$="UIND2620" let wfflagtxt=1
if custom_customer$="MAYFIELD" let wfflag=1
! dim record length620
if jpmflag=1 or chaseflag=1 or hsbcflag=1! or 
	dim text$[316]
else
	if wfflag=1 or bbtflag=1
		if custom_customer$="STERLING"
			dim text$[316]
		else
			dim text$[94]
		endif
	else
		if wfflagtxt=1
			dim text$[84]
		else
			dim text$[316]
		endif
	endif
endif
 

L = 99
G9 = 0
P = 0

B8 = 0 \ B8[1] = 99
CURDATE = ((Tim(8) * 10000) + (Tim(9) * 100) + Tim(10))
createdate=curdate
G$[1,1]=intco using "#"
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
g$[2,2]=groupid$
Mat Read #1,88,16;F$;
Open #15,F$
Mat Read #1,88,48;F$
Open #16,F$
V$ = " 0"
Search #15,2,1;V$,R[15],E 
if e<>0
	eflag=eflag+1
	returnstatus=1
	Message$="RECORD '0' NOT FOUND IN A00AP" 
	goto L_9060
endif
Mat Read #15,R[15],2;R$;
! #2-curr am0cr, #3-next am0cr, #4 - prev amocr, #5 - apbank
! #6 - apdeth, #7- vendor, #8 - vendtag
! #12 - vendbank, #14 - apdetm
G$[1,1] = coid Using "#" \ G$[2,2] = C1 Using "#"
Mat Read #1,88,112;F$; \ Ropen #5,F$
Mat Read #1,88,432;F$; \ Ropen #6,F$
mat read #1,88,2400;f$;\ropen #7,f$ ! vendor file
mat read #1,88,1120;f$;\ropen #8,f$! vendtag file
let f$="2/VENDBANK"+G$[1,1]
ropen #12,f$
let f$="2/APDETM"+G$[1,1]
ropen #14,f$
V1$ = "10"
Search #15,2,1;V1$,R[15],E
if e<>0
	eflag=eflag+1
	returnstatus=1
	Message$="RECORD '10' NOT FOUND IN A00AP" 
	goto L_9060
endif
Mat Read #15,R[15],2;R2$;
V1$ = " ",V1$ \ V1$[3,6] = R2$
Search #16,2,1;V1$,R[16],E
if e<>0
	eflag=eflag+1
	returnstatus=1
	Message$="Client "+R2$+" Not on File " 
	goto L_9060
endif
Mat Read #16,R[16],10;N$;
Mat Read #1,0,116;Y0;
Mat Read #1,0,134;D0;
!!Print 'CS';"-LA549-"; Tab 20;N$
!!Print @15,1;'CL';"A/P Check Number Extraction Process";
C$ = D0 Using "&&&&&&"
C3 = C$[1,4]
C9 = C$[3,4]
C9 = C9 + 1
If C9 > 12 Let C9 = 1
C$[3,4] = C9 Using "&&"
If C$[3,3] = " " Let C$[3,3] = "0"
If C9 = 1
  C9 = C$[1,2]
  C9 = C9 + 1 \ If C9 > 99 Let C9 = C9 - 100
  C$[1,2] = C9 Using "&&"
End If 
C3[1] = C$[1,4]
Rem need to get previous month file
C$ = D0 Using "&&&&&&"
C9 = C$[3,4]
C9 = C9 - 1
If C9 <= 0
  C9 = C$[1,2] \ C9 = C9 - 1 \ If C9 < 0 Let C9 = 99
  C$[1,2] = C9 Using "&&"
  C$[3,4] = "12"
Else 
  C$[3,4] = C9 Using "&&"
End If 
C3[2] = C$[1,4]
GETCURRMONTH: Rem get current month file
C$ = C3[0] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G$[1,2],C$[1,4]
Call FindF(F$,A9)
If Not(A9)
  ACPER$ = C3[0] Using "&&&&"
  Call "labldfle.DL4",ACPER$,e$,IntCo,rstr$
End If 
Open #2,F$
GETNEXTMONTH: Rem get next month check register
C$ = C3[1] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G$[1,2],C$[1,4]
Call FindF(F$,A9)
If Not(A9)
  ACPER$ = C3[1] Using "&&&&"
  Call "labldfle.DL4",ACPER$,e$,IntCo,rstr$
End If 
Open #3,F$
GETPREVMONTH: Rem get previous month check register
C$ = C3[2] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G$[1,2],C$[1,4]
Call FindF(F$,A9)
If Not(A9)
  ACPER$ = C3[2] Using "&&&&"
  Call "labldfle.DL4",ACPER$,e$,IntCo,rstr$
End If 
Open #4,F$
GETOPTIONS: Rem select options here
C = 0 \ C[1] = 0
Call DXGet("BANKCODE",K$)
Call String(1,K$)
If rtrim$(K$) = ""
	let eflag=eflag+1
	let message$=message$+"Invalid Bank Code Entered "
endif
PBANKCODE$ = " ",PBANKCODE$
PBANKCODE$[1,Len(K$)] = K$
if custom_customer$="EDMAR"
	let tmp3=k$
	if tmp3=5
		let hsbcflag=1
		let boaflag=0
		let jpmflag=0
	else
		let hsbcflag=0
	endif
endif
Call DXGet("CHKDATE",DATE$)
Call String(1,DATE$)
If RTRIM$(DATE$)= "0"
  CHKDATE = 0
  Goto Checkproc:
End If 
If Len(RTRIM$(DATE$)) = 6
  X2 = DATE$;DATE$ = X2 Using "&&&&&&"
  DATE1$ = DATE$[1,2],"/",DATE$[3,4],"/",DATE$[5,6]
  Call VerifyDate(DATE1$,DATE$,E)
  If Not(E)
    CHKDATE = DATE$
  Else 
	let eflag=eflag+1
	returnstatus=1
	let message$=message$+ "Invalid Date Entered"
    
  End If 
Else 
  let eflag=eflag+1
	returnstatus=1
	let message$=message$+ "Invalid Date Entered"
End If 
CHECKPROC: ! 
! startprocess
! Check if ach only
if p61$[99,99]="Y"
	if custom_customer$="MAYFIELD"
		chain "la549ach.dl4"
	endif
	if custom_customer$="UBS"
		if pbankcode$[1,4]="XACH"
			chain "la549ach.dl4"
		endif
	else
		if custom_customer$="HATHAWAY"
			let tmp3=pbankcode$
			if tmp3<>3 
				chain "la549ach.dl4"
			endif
		endif
		if paymodex<>0 
			chain "la549ach.dl4" 
		endif
		if peopleflag<>0
			chain "la549ach.dl4"
		endif
	endif
endif

IF EFLAG<>0 GOTO OUTEND:
fname$="cntrl/la549pp.ini"
if custom_customer$="EDMAR" and hsbcflag=1
	fname$="cntrl/la549pphs.ini"
endif
Call FindF(fname$,X2)                                 
IF NOT (X2)                                                       
	eflag=eflag+1
	ReturnStatus = 1                           
	Message$ = "The initialization file was not found!"                                            
	GOTO outend:                                                     
ENDIF                                                              
open #90,fname$ ! "cntrl/la549pp.ini"
read #90;sourcedirname$
LET SOURCEDIRNAME$=RTRIM$(SOURCEDIRNAME$)                                                    
LET sourcedirname$=sourcedirname$ TO "\215\" !"strip off <CR> 
let sourcedirname$=sourcedirname$ to "\211\" !"strip off [tab]
LET sourcedirname$=sourcedirname$ TO "#" !"strip off remarks 
LET sourcedirname$=sourcedirname$  TO "!" !"strip off remarks
if sourcedirname$="" or sourcedirname$="!"
	eflag=eflag+1
	ReturnStatus = 1                           
	Message$ = "Source Directory Not Set Up Properly!"                                            
	goto outend: 
endif
let x=len(sourcedirname$)
if sourcedirname$[x,x]<>"/" let sourcedirname$[x,x]=""
call findf(sourcedirname$,x2)
if not(x2)
	eflag=eflag+1
	ReturnStatus = 1                           
	Message$ = "Source Directory Does Not Exist!"                                            
	goto outend:
endif
Call FindF(SOURCEDIRNAME$,A9)                      
IF NOT (a9)                 
   LET CMD$="mkdir "+SOURCEDIRNAME$
   SYSTEM CMD$
endif
let tmpfile$="ppay"
if hsbcflag<>0 let tmpfile$=tmpfile$+"hs"
let tmpfile$=tmpfile$+(createdate using "&&&&&&")
let tmpfile$=tmpfile$+(chkdate using "&&&&&&")
let txtfile$=tmpfile$
if wfflagtxt=1
	let tmpfile$=tmpfile$+".txt"
else
	let tmpfile$=tmpfile$+".csv"
endif
! create prtrm$
let ptrnm$=sourcedirname$+tmpfile$
let filechk=0
createfile: ! check if file exists
Call FindF(ptrnm$,A9)
if a9<>0
	let filechk=filechk+1
	if filechk>999
		let eflag=eflag+1
		let returnstatus=1
		let message$="Transfer File May Not Be Created "
		goto outend:
	endif
	let txtfile$=txtfile$+"."
	let txtfile$=txtfile$+(filechk using "&&&")
	if wfflagtxt=1
		let tmpfile$=tmpfile$+".txt"
	else
		let tmpfile$=tmpfile$+".csv"
	endif
	let ptrnm$=sourcedirname$+tmpfile$
	goto createfile:
endif
build #0,+ptrnm$
tmp$ = PTRNM$," <666>"                   
 Modify tmp$                                          
 Try                                                  
   Close #0                                  
 Else                                                 
   ReturnStatus = 0  
   let eflag=eflag+1
   Message$ = "Error Creating Processing File " + ptrnm$
   Goto outend:                                
 End Try   
 open #0,ptrnm$



! Print @0,23;'CL';"Processing....Please Wait...";
TEXT$ = " ",TEXT$
! header not used 
!TEXT$[1,51] = "$$ADD ID=DADEPAPE BATCHID='1020 ARP I8705D FLAIPW6'"
!Rem Print #0;"$$ADD ID=DADEPAPE BATCHID='1020 ARP I8705D FLAIPW6'"
!Print #0;TEXT$
CHECKPROC = 0;CHKTOT = 0
L_1960: NAME$ = " ",name$;addr$=" ",addr$
let textflag=0
B9 = 0 \ C = 0 \ G9 = 0
K4$ = " ",K4$
SRCHBANK: Rem search bank file
Search #5,3,1;K4$,R[5],E \ If E = 2 Goto L_9100
READBANK: Rem read apcash file
Mat Read #5,R[5],0;A5;
Mat Read #5,R[5],2;A5$;
Mat Read #5,R[5],32;A6;
Mat Read #5,R[5],50;A7;
Mat Read #5,R[5],58;BANKACC$;
Mat Read #5,R[5],74;BANKCODE$;
mat read #5,r[5],104;bankrte$;
!If PBANKCODE$[1,4] <> BANKCODE$[1,4] Goto SRCHBANK
IF RTRIM$(PBANKCODE$)<>RTRIM$(BANKCODE$) GOTO SRCHBANK
BANKACC = BANKACC$
Rem! check bank code
If Not(BANKACC)
	let eflag=eflag+1
	returnstatus=0
	message$=message$+" Bank "+ k4$+" Does not have bank account assigned "
	goto outend:
 
  Goto SRCHBANK
End If 

if wfflagtxt<>0 ! Wells Fargo Header Record 
	if not(textheaderflag)
		let text$=" ",text$
		let text$[1,3]="*03"
		let text$[4,8]=pbankcode$[1,4]
		let text$[9,23]=bankacc using "&&&&&&&&&&&&&&&"
		let text$[24,24]="0"
		print #0;text$
		let textheaderflag=99
	endif
endif	
For CH = 2 To 4
  K1$ = " ",K1$;K1$[1,2] = A5 Using "##"
L_2000: Search #CH,3,1;K1$,R[2],E
  If E = 2
    If C
      CHECKAMT = T1[2] * 100
      Gosub L_3000
      NAME$ = "";C = 0
    End If 
    Goto GETNEXTCH
  End If 
  If E Gosub ERR_SEARCH
  BANKNUM = K1$[1,2]
  If BANKNUM <> A5
    If C
      CHECKAMT = T1[2] * 100
      Gosub L_3000
      NAME$ = "";C = 0
    End If 
    Goto GETNEXTCH
  End If 
  Mat Read #CH,R[2],0;H;
  If CHKDATE
    If H[2] <> CHKDATE Goto L_2000
  End If 
  let tmp3=k1$[3,8]
  if h[0]<>tmp3 goto L_2000
  Mat Read #CH,R[2],16;H1;
  If H1[1] = 9 Goto L_2000
  IF CUSTOM_CUSTOMER$="AMWAX" ! bypass direct disbursements
	if h1[1]<>0 goto L_2000 ! bypass direct disbursement
  endif

  Mat Read #CH,R[2],20;H$;
  Mat Read #CH,R[2],50;H1$;
  Mat Read #CH,R[2],62;H2;
  Mat Read #CH,R[2],80;N3; \ Mat Read #CH,R[2],86;N5;
  Mat Read #CH,R[2],94;EXDATE;
  If Not(CHKDATE)
    If EXDATE
      If Not(H1[1])
        K1$[3] = (H[0] + 1) Using "######"
      End If 
      Goto L_2000
    End If 
  End If 
  Mat Read #CH,R[2],94;EXDATE
  EXDATE = CURDATE
  Mat Write #CH,R[2],94;EXDATE;
  ISSDATE = H[2]
  If N3 <> A5 Goto L_2000
  If C
    If C <> H
      CHECKAMT = T1[2] * 100
      Gosub L_3000
      NAME$ = ""
      C = 0
    End If 
  End If 
  If NAME$ <> "" If NAME$[1,30] <> H$[1,30]
    CHECKAMT = T1[2] * 100
    Gosub L_3000
    NAME$ = ""
    C = 0
  End If 
  If Not(H1[1]) ! ap transaction
    K5$ = " ",K5$;K5$[1,6] = N5 Using "######"
    K5$[7,12] = H[0] Using "######"
    K5$[20,20] = "9"
    Search #6,2,1;K5$,R[6],E \ If E > 1 Gosub ERR_SEARCH
    If E = 1
      K5$[20,20] = "8"
      Search #6,2,1;K5$,R[6],E \ If E > 1 Gosub ERR_SEARCH
    End If 
    If Not(E)
      Mat Read #6,R[6],0;M;
      Mat Read #6,R[6],4;M$;
      Mat Read #6,R[6],16;M1;
      Mat Read #6,R[6],52;M2;
      C = H[0]
      ISSDATE = H[2];CHECKAMT = (M2[2] - M2[3]) * 100
      NAME$ = H$[1,30]
	  IF NOT(M2[4]) LET M2[4]=M1[0]
	  let addr$=" ",addr$
	  if custom_customer$="STERLING"
		let keyvend$=" ",keyvend$
		let keyvend$[1,6]=M2[4] using "######"
		search #7,2,1;keyvend$,rec_vend,e
		if not(e)
			mat read #7,rec_vend, 178;addr$;
		endif
      endif
      If K5$[20,20] = "8"
        CHECKAMT = - (Abs(CHECKAMT))
      End If 
      Gosub L_3000
    End If 
    K1$[3] = H[0] + 1 Using "######"
    C = 0;NAME$ = ""
    Goto L_2000
  End If 
  C = H
  NAME$[1,30] = H$[1,30]
  
  Gosub L_5000
  Goto L_2000
GETNEXTCH: Rem get next month file
  If C
    CHECKAMT = T1[2] * 100
    Gosub L_3000
    C = 0;NAME$ = ""
  End If 
  For X = 0 To 2 \ T1[X] = 0 \ Next X
Next CH
Goto SRCHBANK
L_3000: Rem PRINT CHECK TOTAL
If Not(C) Goto L_3050
CHECKPROC = CHECKPROC + 1
!If Not(Fra(CHECKPROC / 50))
!  Print Using "######";@0,23;'CL';"Current Number of Checks Processed ";CHECKPROC;
!End If 
if boaflag<>0
	TEXT$ = " ",TEXT$
	BANKACC = BANKACC$
	TEXT$[1,12] = BANKACC Using "&&&&&&&&&&&&"
	TEXT$[13,13] = "O"
	If CHECKAMT <= 0
		TEXT$[13,13] = "V"
	End If 
	TEXT$[14,23] = C Using "&&&&&&&&&&"		       
	TEXT$[24,35] = Abs(CHECKAMT) Using "&&&&&&&&&&&&"                                   
	X2 = ISSDATE \ Gosub L_8900
	TEXT$[36,41] = P$[1,6]
	Text$[42,43] = "  " ! remainder of date format
	text$[44,44]=" " ! filler
	If Rtrim$(NAME$) <> ""
		TEXT$[45,74] = NAME$[1,30]
	End If
endif
if wfflagtxt<>0
	let text$=" ",text$
	let text$[1,10]=c using "&&&&&&&&&&" ! check number
	let x2=issdate\gosub l_8900:  
	let text$[11,16]=p$[1,6] ! mmddyy      
	let text$[17,31]=bankacc using "&&&&&&&&&&&&&&&"! bank account number 
	let text$[32,34]="320" ! check register
	if checkamt<0
		let text$[32,34]="370" ! canceled check
	endif
	if checkamt=0
		let text$[32,34]="430" ! voided check
	endif
	let text$[35,44]=abs(checkamt) using "&&&&&&&&&&"
	if rtrim$(name$)<>""
			let text$[45,74]=name$[1,30]
	endif
endif
if wfflag<>0
	let text$=rtrim$(bankrte$)+","
	BANKACC = BANKACC$
	if custom_customer$="STERLING" 
		let text$=text$+rtrim$(bankacc$[1,12])+","
	else
		if  custom_customer$="HATHAWAY"
			let text$=text$+rtrim$(bankacc$[1,13])+","
		else
			TEXT$=text$+(BANKACC Using "&&&&&&&&&&&&&")+"," ! account number ! 13 characters
		endif
	endif
	text$=text$+(c using "&&&&&&&&&&")+"," ! check number
	let x2=issdate\gosub L_8900:
	if custom_customer$="STERLING" or custom_customer$="HATHAWAY"
		let text$=text$+p$[1,2]+"-"+p$[3,4]+"-20"+p$[5,6]+","
	else
		let text$=text$+p$[1,2]+"/"+p$[3,4]+"/20"+p$[5,6]+","
	endif
	let text$=text$+(abs(checkamt/100) using "&&&&&&&&.##")+","
	if checkamt<0
		let text$=text$+"370"+","! canceled check
	else
		if checkamt=0
			let text$=text$+"430"+"," ! voided check
		else
			let text$=text$+"320"+"," ! 
		endif
	endif
	if rtrim$(name$)<>""
			let text$=text$+name$[1,30]
	else
		let text$=text$+" "
	endif
	IF CUSTOM_CUSTOMER$="STERLING"! need additional information - payee address line 1
		if rtrim$(addr$)<>""
			for ctr=1 to 30
				if addr$[ctr,ctr]="," let addr$[ctr,ctr]="'"
			next ctr
			let text$=text$+"~"+rtrim$(addr$)
		endif
	endif
endif
if bbtflag<>0
	BANKACC = BANKACC$
	TEXT$=(BANKACC Using "&&&&&&&&&&&&&")+"," ! account number ! 13 characters
	text$=text$+(c using "&&&&&&&&&&")+"," ! check number
	let text$=text$+(abs(checkamt/100) using "&&&&&&&&.##")+","
	let x2=issdate\gosub L_8900:
	let text$=text$+p$[1,2]+"/"+p$[3,4]+"/20"+p$[5,6]+","
	if rtrim$(name$)<>""
			let text$=text$+rtrim$(name$[1,30])
	else
		let text$=text$+" "
	endif
endif
if jpmflag<>0 or chaseflag<>0
	TEXT$ = " ",TEXT$
	let text$="I" ! issue
	If CHECKAMT <= 0
		TEXT$ = "C" ! cancel
	End If 
	Text$=text$+"," ! comma delimited
	BANKACC = BANKACC$
	TEXT$ = Text$+ (BANKACC Using "&&&&&&&&&&&&")+","! account number
	text$=text$+(c using "&&&&&&&&&&")+"," ! check number
	let p$=issdate using "&&&&&&"
	let text$=text$+p$[3,6]+p$[1,2]+"," ! check date MMDDYY
	let text$=text$+(abs(checkamt/100) using "&&&&&&&&.##")+","
	for ctr=1 to 30
		if name$[ctr,ctr]="," let name$[ctr,ctr]="_" ! no commas allowed
	next ctr 
    let text$=text$+rtrim$(name$[1,30])+","
	let text$=text$+" ," ! optional payee name2 
endif
if hsbcflag<>0
	TEXT$ = " ",TEXT$
	let text$="Check" ! issue
	If CHECKAMT <= 0
		TEXT$ = "Void" ! cancel
	End If 
	Text$=text$+"," ! comma delimited
	let p$=issdate using "&&&&&&"
	let text$=text$+p$[3,4],"/",p$[5,6]+"/20"+p$[1,2]+"," ! check date MMDDYY	
	text$=text$+(c using "&&&&&&&&&&")+"," ! check number
	BANKACC = BANKACC$
	if bankacc<=999999999
		TEXT$ = Text$+ (BANKACC Using "&&&&&&&&&")+","! account number 9 digits 
	else
		TEXT$ = Text$+ (BANKACC Using "&&&&&&&&&&&&")+","! account number 12 digits 	
	endif
	let text$=text$+(abs(checkamt/100) using "&&&&&&&&.##")+","
	for ctr=1 to 30
		if name$[ctr,ctr]="," let name$[ctr,ctr]="_" ! no commas allowed
	next ctr 
    let text$=text$+rtrim$(name$[1,30])! +","
	!let text$=text$+" ," ! optional payee name2 
endif
Print #0;TEXT$
L_3050: For I = 0 To 4
  T1[I] = 0
Next I
If CHECKAMT > 0
  CHKTOT = CHKTOT + (CHECKAMT / 100)
End If 
Return 
L_5000: Rem PRINT LINE
For I = 0 To 2
  T1[I] = T1[I] + H2[I]
Next I
Return 

L_8900: Rem PUT DATE FROM X2 INTO P$
P$ = " ",P$
If Not(X2) Return 
U5$ = X2 Using "&&&&&&"
P$[1,2] = U5$[3,4]
P$[3,3] = "/"
P$[4,5] = U5$[5,6]
P$[6,6] = "/"
P$[7,8] = U5$[1,2]
P$ = U5$[3,6],U5$[1,2]
Return 

L_9100: Rem END OF RANGE
if wfflag<>0  or wfflagtxt<>0 !and bbtflag<>0
	let text$=" ",text$
	let text$[1,1]="&"
	! 2,15 = spaces
	let text$[16,22]=checkproc using "&&&&&&&"
    ! 23,25] = spaces                 
	let text$[26,38]=abs(chktot*100) using "&&&&&&&&&&&&&"
    ! 39,85 = spaces
	if wfflagtxt<>0
		print #0;text$
	endif
	let text$=""
endif
FTMPNAME$ = "/tmp/549tmp.txt"
!CMD$ = "xtod ",PTRNM$," > ",FTMPNAME$
!! System CMD$   !! linux doesn't like this command and makes file empty
!CMD$ = "cp ",FTMPNAME$," ",PTRNM$
!! System CMD$  !! since not xtod don't need this 
goto outend:

ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$ = msg$ \ Error 10000                      
Return ! End                                 
If Msg$<>"" let e$=msg$ !  Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump("tmp/549!","")
! goto err_msg ! Error 10000
Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)

OUTEND: Rem EXIT PROGRAM

L_9060: Rem end reset flag

if eflag<>0 let returnstatus=1 ! error

!Chain "MX000"
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(CHECKPROC)
		returnstatus=1
		let message$=message$+"There are no checks available to process"
		message$=message$+"."
	else
		Let message$=message$+" "+str$(checkproc)+" Check(s) "
		let message$=message$+" File Created: "+tmpfile$
		
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program



