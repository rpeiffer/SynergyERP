! >>> Program 856
!
! description   Master BOM Edit
!
! loadsave -w -n 100,10 -o prog/dxport/856.dl4 src/856.src
!
include "src/copyright.inc" ! dx
Declare External Sub CreateNetStatus
Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP 21, 2000  10:12:58
Rem /usr/acct/r97//usr/acct/jcs/work/devl/mfg/mx856.src (univ2) [jcs] {19607}
Rem  Copyright (c) 2000 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
Option Default Dialect IRIS1
Rem BEDIT Version: 1.7d OBJECT CODE     Created: MAR  6, 1997  16:25:27
Rem Source: /usr/acct/xindist/src/mx856.s  (univ) [jcs]
Rem  Copyright (c) 1997 Universal Business Systems, Inc.
Try ! main try

Declare Function GetParameters
Declare Sub OpenFiles,BuildInstructions,DoUpdate
Declare Sub BOMAddRef,BOMAddAll,BOMDelRef,BOMDelAll,BOMSubst
Declare Sub SETUPBOMDIR3,DELBOM,RTNRECORD,GETNEWRECORD,WRT_BOM,INSBOMDIRS
Declare Sub STARTINSERT,READ_BOM

Declare Function GetParameters

DIM 1%,SC,SR,J4$[50]

! DX stuff
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[200],WebStr$[200]
dim action$[30],action1$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim list$[100,100]

Dim 1%,E,E1,J4,X,S2[3],PFU1[20]
Dim 3%,N1
Dim 2%,I,I1,L1,L2,L3,R1,R2,R5,V1,X1,X2
Dim F$[16],J$[40],K1$[30],P1$[10]
Dim K2$[30],K3$[30],K5$[50],N1$[40],P9$[156],U1$[60]
Dim N2$[26],U2$[60],U3$[10],U5$[50],U9$[20],X$[10],2%
Dim 3%

!**************
! M A I N   L O G I C
!**************

Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$)

Call OpenFiles()
if not(GetParameters()) error 10000
returnstatus=1 ! default OK
Message$ = "OK"
select case action1$
	case "GETINSTRUCTIONS"
		call BuildInstructions()
	case "UPDATE"
		Call DoUpdate()
	case else
		returnstatus = 0
		Message$ = "Unknown action1: "+action1$
end select
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
Call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
else ! main try
	include "src/callmainerrnet.inc"
end try
end
!******************************************************************
!* S U B R O U T I N E   S E C T I O N
!******************************************************************

sub OpenFiles()
try
	For E1 = 2 To 8
		Read X
		If Not(X) Goto L_850
		Read #1,88,X;F$[1,16];
		Open #E1,F$
	L_850: Next E1
	Data "0","1792","0","1104","656","0","0"
	CH_PROD = 3;CH_PDESC = 5;CH_BOM = 6
else
	include "src/callsuberr.inc"
end try
end sub

Function GetParameters()
try
	j4$ = ucase$(GetParameter$("MODE"))
	If j4$ = "D" Let MODE = 1
	If j4$ = "A" Let MODE = 2
	If j4$ = "S" Let MODE = 3
	if not(mode)
		e$ = "Invalid mode entered "+j4$+"!"
		exit function 0
	end if
	! GET THE PRODUCT TO BE ACTED ON (ADDED / DELETED / SUBSTITUTED) - STORE in K1$,R1
	j4$ = GetParameter$("PRODUCT")
	if j4$ = ""
		e$ = "You must enter a product!"
		exit function 0
	end if
	If J4$ = "Z ZZZZZZZZZZ"
		e$ = "Invalid product "+J4$+"!"
		exit function 0
	end if
	K1$ = " ",K1$
	K1$[1,Len(J4$)] = J4$
	K1$[13] = ""
	Search #CH_PROD,2,1;K1$,R1,E
	If E
		e$ = "Invalid product "+J4$+"!"
		exit function 0
	END IF
	! GET PRODUCT REFRENCE - STORE IN K2$,R2
	j4$ = GetParameter$("REFPRODUCT")
	If J4$ = "" Let J4$ = K1$
	If J4$ = "Z ZZZZZZZZZZ"
		e$ = "Invalid reference product "+J4$+"!"
		exit function 0
	end if
	K2$ = " ",K2$
	K2$[13] = ""
	K2$[1,Len(J4$)] = J4$
	Search #CH_PROD,2,1;K2$,R2,E
	If E
		e$ = "Invalid reference product "+J4$+"!"
		exit function 0
	END IF
	if mode = 3 and k1$ = k2$
		e$ = "Substitute mode requires different reference product!"
		exit function 0
	end if
	j4$ = GetParameter$("CURRENTREV")
	If j4$ <> "Y" If j4$ <> "N"
		e$ = "Invalid current revision only flag!"
		exit function 0
	end if
	R9 = 1 \ If P1$ = "N" Let R9 = 0
else
	include "src/callsuberr.inc"
end try
end Function 1 ! success if we get here


sub BuildInstructions()
try
	Clear List$[]
	List$[0]=bsdel$,"INSTRUCTIONS",fdel$
	List$[1]="InstructionLine",fdel$
	tmp$ = "Bill of Materials Master Update "
	arrIdx = 2
	select case mode
		case 1
			tmp$ = tmp$+"*DELETION*"
			List$[arrIdx]=tmp$
			arrIdx = arrIdx + 1
			tmp$ = "DELETING "
		case 2
			tmp$ = tmp$+"*ADDITION*"
			List$[arrIdx]=tmp$
			arrIdx = arrIdx + 1
			tmp$ = "ADDING "
		case 3
			tmp$ = tmp$+"*SUBSTITUTION*"
			List$[arrIdx]=tmp$
			arrIdx = arrIdx + 1
			tmp$ = "SUBSTITUTING "
	end select
	tmp$ = tmp$+" product "+rtrim$(k1$)
	if r1<>r2 ! not same product
		if mode = 3 ! substitution
			tmp$ = tmp$+" for "+rtrim$(k2$)
		else
			tmp$ = tmp$+" where "+rtrim$(k2$)+" exists on BOM."
		end if
	else
		tmp$ = tmp$+" for all BOMs"
	end if
	List$[arrIdx]=tmp$
	arrIdx = arrIdx + 1
	if R9
		tmp$ = "Will be done on current revision BOMs only."
	else
		tmp$ = "Will be done for all BOM revisions."
	end if
	List$[arrIdx]=tmp$
	arrIdx = arrIdx + 1
	List$[arrIdx]=esdel$
	call addtostr(e$,rstr$,List$[])
else
	include "src/callsuberr.inc"
end try
end sub

sub DoUpdate()
try
	select case mode
		case 1 ! del
			if r1=r2
				call BOMDelAll()
			else
				call BOMDelRef()
			end if
		case 2 ! add
			if r1=r2
				call BOMAddAll()
			else
				call BOMDelRef()
			end if
		case 3
			call BOMSubst()
	end select
else
	include "src/callsuberr.inc"
end try
end sub


sub BOMDelRef()
try
	! SETUPDEL: ! UNLESS PRODUCT = REFRENECE PRODUCT DELETE ONLY FROM BOMS THAT CONTAIN REFERENCE
	U5$ = " ",U5$
	U5$[1,5] = R2 Using "#####"
	L_2100: Search #CH_BOM,3,2;U5$,V1,E
		If E = 2 exit sub
		If E error 11000
		L3 = U5$[1,5]
		If L3 <> R2 exit sub
		R3 = U5$[10,14]
		Read #CH_PROD,R3,0;P1$;
		If R9 If U5$[15,16] <> P1$[6,7] Goto L_2100
		K1$ = " ",K1$
		K1$[1,5] = U5$[10,14]
		L_2180: Search #CH_BOM,3,1;K1$,X1,E
			If E = 2 Goto L_2100
			If E error 11000
			If K1$[1,5] <> U5$[10,14] Goto L_2100
			L2 = K1$[10,14]
		If L2 <> R1 Goto L_2180
		R3 = K1$[1,5]
		Read #CH_PROD,R3,0;P1$;
		If R9 If K1$[15,16] <> P1$[6,7] Goto L_2180
		K2$ = K1$[10,14],K1$[6,9],K1$[1,5],K1$[15,16]
		call SETUPBOMDIR3()
		call DELBOM()
		call RTNRECORD()
	Goto L_2100
else
	include "src/callsuberr.inc"
end try
end sub


sub BOMDelAll()
try
	! STARTDEL: ! DELETE FROM ALL BOMS
	U5$ = " ",U5$
	U5$[1,5] = R1 Using "#####"
	BOMDELLOOP: Rem Loop thru for Delete
		Search #CH_BOM,3,2;U5$,X1,E
		If E exit sub
		R2 = U5$[1,5]
		If R1 <> R2 exit sub
		R3 = U5$[10,14]
		Read #CH_PROD,R3,0;P1$;
		If R9 If U5$[15,16] <> P1$[6,7] Goto BOMDELLOOP
		K2$ = U5$
		K1$ = K2$[10,14],K2$[6,9],K2$[1,5],K2$[15,16]
		call SETUPBOMDIR3()
		call DELBOM()
		call RTNRECORD()
	Goto BOMDELLOOP
else
	include "src/callsuberr.inc"
end try
end sub

sub BOMAddRef()
try
	! SETUPADD: ! UNLESS PRODUCT = REFRENECE PRODUCT ADD ONLY TO BOMS THAT CONTAIN REFERENCE
	U5$ = R2 Using "#####   0    0"
	L_3060: Search #CH_BOM,3,2;U5$,X1,E ! FIND BOM WITH REF PROD
		If E = 2 exit sub
		If E error 11000
		U2$ = U5$
		L2 = U2$[1,5]
		L1 = U2$[10,14]
		If L2 <> R2 exit sub
		Read #CH_PROD,L1,0;P1$;
		If R9 If U5$[15,16] <> P1$[6,7] Goto L_3060 ! CHECK REV LEVEL IF ONLY IMPACTING CURRENT
		U1$ = R1 Using "#####   0    0"
		L_3140: Search #CH_BOM,3,2;U1$,X2,E ! MAKE SURE PRODUCT NOT ALREADY ADDED
			If E Goto L_3200
			L3 = U1$[1,5]
			If U2$[10,14] = U1$[10,14] Goto L_3060
			R3 = U1$[10,14]
			Read #CH_PROD,R3,0;P1$;
			If R9 If U1$[15,16] <> P1$[6,7] Goto L_3140 ! CHECK REV LEVEL IF ONLY IMPACTING CURRENT
			If R1 <> L3 Goto L_3200
		Goto L_3140
		L_3200: ! REF PRODUCT THERE, NEW PROD, NOT - ADD IT
		I1 = U1$[10,14] \ If I1 = R1 Goto L_3060
		Mat Read #CH_PROD,R1,0;P9$;
		Mat Read #CH_PROD,R1,512;PFU1;
		call READ_BOM()
		N1 = 0 \ S2 = PFU1[13] \ S2[1] = 1
		N1$[13,24] = P9$[140,151]
		N1$[28,30] = P9$[123,125]
		N1$[31,35] = P9$[152,156]
		N1$[36,37] = P9$[6,7]
		U2$ = " ",U2$
		I = 1
		U2$[1,5] = L1 Using "#####"
		U2$[6,9] = "0001"
		U9$ = U2$[6,9]
		U1$ = U2$[1,5]
		! FIND FREE SEQUENCE NUMBER
		L_3330: Search #CH_BOM,3,1;U2$,L3,E
			If E = 2 Goto L_3430
			If E error 11000
			R3 = U2$[1,5]
			Read #CH_PROD,R3,0;P1$;
			If R9 If U2$[15,16] <> P1$[6,7] Goto L_3330
			If U1$ <> U2$[1,5] Goto L_3430
			If U9$ <> U2$[6,9] If I < 1000 Goto L_3430
			If I > 999 Stop 
			I = I + 1
			U9$ = 10000 + I Using "#####"
			U9$ = U9$[2]
		Goto L_3330
		L_3430: ! FOUND FREE SEQ # - ADD IT
		K1$ = " ",K1$
		K1$[1,5] = L1 Using "#####"
		U9$ = 10000 + I Using "#####" \ U9$ = U9$[2]
		K1$[6,9] = U9$[1,4]
		K1$[10,14] = R1 Using "#####"
		K1$[15,16] = N1$[36,37]
		N1$[25,27] = K1$[7,9]
		K2$ = K1$[10,14],K1$[6,9],K1$[1,5],K1$[15,16]
		call SETUPBOMDIR3()
		call GETNEWRECORD()
		call WRT_BOM()
		call INSBOMDIRS()
	Goto L_3060
else
	include "src/callsuberr.inc"
end try
end sub


sub BOMAddAll()
try
	!STARTADD: ! ADD TO ALL BOMS
	U5$ = " ",U5$
	L_3580: Search #CH_BOM,3,1;U5$,V1,E
		If E = 2 exit sub
		If E error 11000
		R3 = U5$[1,5]
		Read #CH_PROD,R3,0;P1$;
		If R9 If U5$[15,16] <> P1$[6,7] Goto L_3580
		U1$ = " ",U1$
		U1$[1,5] = R1 Using "#####"
		BOMADDLOOP: Rem "Add to BOM Loop
			Search #CH_BOM,3,2;U1$,V1,E
			If E Goto L_3690
			R3 = U1$[10,14]
			Read #CH_PROD,R3,0;P1$;
			If R9 If U1$[15,16] <> P1$[6,7] Goto BOMADDLOOP
			L3 = U1$[1,5]
			If U1$[10,14] = U5$[1,5] Goto L_3580
			If L3 <> R1 Goto L_3690
		Goto BOMADDLOOP
		L_3690: call STARTINSERT()
	Goto L_3580
else
	include "src/callsuberr.inc"
end try
end sub

sub STARTINSERT()
try
	! INSERT ROUTINE
	L1 = U1$[10,14] \ If L1 = R1 exit sub
	Mat Read #CH_PROD,R1;P9$;
	Mat Read #CH_PROD,R1,512;PFU1;
	N1$ = " ",N1$
	N1$[13,24] = P9$[140,151]
	N1$[28,30] = P9$[123,125]
	N1$[31,34] = P9$[152,156]
	N1 = 0 \ S2[0] = PFU1[13] \ S2[1] = 1
	L3 = U5$[1,5]
	Mat Read #CH_PROD,L3;P9$;
	N1$[1,12] = P9$[140,151]
	N1$[36,37] = P9$[6,7]
	K1$ = " ",K1$
	K1$[1,5] = L3 Using "#####"
	K1$[10,14] = R1 Using "#####" \ K1$[15,16] = N1$[36,37]
	U1$ = " ",U1$
	U1$[1,5] = K1$[1,5]
	I = 1
	U9$ = "0001"
	BOMINSLOOP: ! LOOK FOR FREE SEQUENCE #
		Search #CH_BOM,3,1;U1$,V1,E
		If E Goto L_3960
		R3 = U1$[1,5]
		Read #CH_PROD,R3,0;P1$;
		If R9 If U1$[15,16] <> P1$[6,7] Goto BOMINSLOOP
		If U1$[1,5] <> K1$[1,5] Goto L_3960
		If U9$ <> U1$[6,9] If I < 1000 Goto L_3960
		If I > 999 Stop 
		I = I + 1
		U9$ = 10000 + I Using "#####"
		U9$ = U9$[2]
	Goto BOMINSLOOP
	L_3960: Rem READY TO INPUT
	K1$[6,9] = U9$
	K2$ = K1$[10,14],K1$[6,9],K1$[1,5],K1$[15,16]
	call SETUPBOMDIR3()
	N1$[25,27] = K1$[7,9]
	call GETNEWRECORD()
	call WRT_BOM()
	call INSBOMDIRS()
	U9$ = "0001"
else
	include "src/callsuberr.inc"
end try
end sub

sub BOMSubst()
try
	! MODESUBST: Rem SUBSTITE MODE
	! STARTSUBST: ! SUB - DOIT
	Mat Read #CH_PROD,R1;P9$;
	Mat Read #CH_PROD,R1,512;PFU1;
	U5$ = " ",U5$
	U5$[1,5] = R2 Using "#####"
	BOMSUBLOOP: Rem "Loop for Substitute
		Search #CH_BOM,3,2;U5$,X1,E
		If E = 2 exit sub
		If E error 11000
		R3 = U5$[10,14]
		Read #CH_PROD,R3,0;P1$;
		If R9 If U5$[15,16] <> P1$[6,7] Goto BOMSUBLOOP
		L3 = U5$[1,5]
		L1 = U5$[10,14] \ If L1 = R1 Goto BOMSUBLOOP
		If L3 <> R2 exit sub
		call READ_BOM()
		N1$[13,24] = P9$[140,151] \ S2 = PFU1[13]
		call WRT_BOM()
		K2$ = U5$
		K1$ = K2$[10,14],K2$[6,9],K2$[1,5],K2$[15,16]
		call SETUPBOMDIR3()
		call DELBOM()
		K1$[10,14] = R1 Using "#####"
		K2$[1,5] = R1 Using "#####"
		call SETUPBOMDIR3()
		call INSBOMDIRS()
	Goto BOMSUBLOOP
else
	include "src/callsuberr.inc"
end try
end sub

sub READ_BOM()
try
	Read #CH_BOM,X1;N1;
	Mat Read #CH_BOM,X1,6;N1$;
	Mat Read #CH_BOM,X1,48;S2;
	Mat Read #CH_BOM,X1,56;N2$;
else
	include "src/callsuberr.inc"
end try
end sub

sub WRT_BOM()
try
	! WRITE BOM
	Write #CH_BOM,X1;N1;
	Mat Write #CH_BOM,X1,6;N1$;
	Mat Write #CH_BOM,X1,48;S2;
	Mat Write #CH_BOM,X1,56;N2$;
else
	include "src/callsuberr.inc"
end try
end sub

sub GETNEWRECORD()
try
	! GET FREE RECORD
	E = 2 \ X1 = 0
	Search #CH_BOM,1,0;K1$,X1,E
	If E error 11000
else
	include "src/callsuberr.inc"
end try
end sub

sub RTNRECORD()
try
	! REPLACE FREE RECORD
	E = 3
	Search #CH_BOM,1,0;K1$,X1,E
	If E error 11000
else
	include "src/callsuberr.inc"
end try
end sub

sub INSBOMDIRS()
try
	!  INSERT KEY
	Search #CH_BOM,4,1;K1$,X1,E
	If E error 11000
	Search #CH_BOM,4,2;K2$,X1,E
	If E error 11000
	Search #CH_BOM,4,3;K3$,X1,E
	If E error 11000
else
	include "src/callsuberr.inc"
end try
end sub

sub DELBOM()
try
	Search #CH_BOM,5,1;K1$,X2,E
	If E error 11000
	Search #CH_BOM,5,2;K2$,X2,E
	If E error 11000
	Search #CH_BOM,5,3;K3$,X2,E
	If E error 11000
else
	include "src/callsuberr.inc"
end try
end sub

sub SETUPBOMDIR3()
try
	K3$ = " ",K3$ \ I1 = K1$[6,9] \ If I1 >= 1000 Stop 
	U3$ = 20000 - I1 Using "#####" \ U3$ = U3$[2]
	K3$ = K1$ \ K3$[6,9] = U3$[1,4]
else
	include "src/callsuberr.inc"
end try
end sub


