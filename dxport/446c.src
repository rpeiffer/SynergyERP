! >>> Program 446c
!
! description Backorder, Outs & Subs Report
!
! loadsave -w -n 100,10 -o prog/dxport/446c.dl4 src/446c.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN  9, 2004  11:43:28
Rem /w/papermaster/r2002//usr/acct/jcs/work/custom/neuman/subout.src (univ2) [jcs] {43361}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem SUBOUT - List Subs & out
Rem CCT 166465 - Neuman
Rem LAST UPDATE:
!
Declare Intrinsic Sub InpBuf,String,Time
! - Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim POInfo$[300]
!
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Dim K1$[60],K2$[60],K3$[60],K4$[60],K9$[60],PROD$[12]
Dim FLE$[16],ANS$[20],P9$[50],SDATE$[8],CONM$[30]
Dim TME$[30],BIN$[6],S3$[33],L1$[20],L6$[60],A$[156]
Dim MT$[2],C1$[30],S1$[30],EBY$[10],SUM$[4],QUM$[4]
Dim SMASK$[8],DMASK$[12],RETVAL$[512]
Dim 1%,WHSE[2],RASL[5],FLD,SCRN,MXLN,J,CNVTU[2],PFU1[20]
Dim 1%,RPTTYPE,FLAG[9],L3[3],W1[2],H4[2],EUN[2],UN[2]
Dim 1%,CTWT[1],CLN,MXLN,CPG,POL1[5],FLAGS[11]
Dim 1%,POMISC[2],PL1[1]
Dim 2%,RDATE,H0[12],H5[16],H6[8],L4[3],B[24],L6[5],ShipDate
Dim 2%,BUYER[2],SLSM[2],W2[9],VENDOR,POL2[2]
Dim 3%,PFU2[6],A[33],CNVTA,AMOUNT,R[99],QTY[9]
Dim 3%,L7[12],S3[17],UNF[6],A1[7],BRKTTLS[20]
Dim 3%,OHAND,AVAIL,POL3[6],W3[24],PL4[23],X4
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
For J = 2 To 15
  Read J1 \ If J1 = -1 Goto NXTFLE
  Read #1,88,J1;FLE$;
  Ropen #J,FLE$
NXTFLE: Next J
Data "1888","1840","1792","2432","1824","-1","1808","-1","2416","208","2528","1744","1728"
Data "1664"
FLE$ = "2/BUYERS"
Ropen #7,FLE$
Mat Read #1,3,164;SDATE$;
Mat Read #1,3,0;CONM$;
Mat Read #1,19,0;P9$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J1 = Chf(0)
If Err 0 Gosub ERR_TRAP
SCRN = 0 \ If J8 Let SCRN = 9
MXLN = 60 \ If SCRN Let MXLN = 20
SMASK$ = "-------#"
DMASK$ = "-------#.##"
X$ = SDATE$ \ Gosub ISDPACK
RDATE = X4 \ ShipDate=(X1*10000)+(X2*100)+X3
RPTTYPE = 1;WHSE = 1
BUYER[1] = 1;BUYER[2] = 999;SLSM[1] = 1;SLSM[2] = 999
!
!!! dx add xport reporting code
DXSetup:
Dim tmp$[900],tmp1$[900],tmp2$[900]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"446c",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!!!  dx add xport reporting code
call dxget("rpttype",tmp$)  \ RPTTYPE=tmp$ ! report by 1=buyer  2=salesman  3=both
call dxget("shipdate",tmp$) \ if tmp$="" let RDATE=ShipDate else RDATE=tmp$ ! ship date
call dxget("whse",tmp$) \ if tmp$="" let WHSE=1 else WHSE=tmp$ ! warehouse
Call dxget("begbuyer",tmp$) \ if tmp$="" let Buyer[1]=1 else Buyer[1]=tmp$ ! beg buyer
call dxget("endbuyer",tmp$) \ if tmp$="" let Buyer[2]=999 else Buyer[2]=tmp$ ! end buyer
Call dxget("begslsm",tmp$) \ if tmp$="" let SLSM[1]=1 else SLSM[1]=tmp$ ! beg salesman
call dxget("endslsm",tmp$) \ if tmp$="" let SLSM[2]=999 else SLSM[2]=tmp$ ! end salesman
!!!  dx end
!
! ship date
tmp$=RDate using "&&&&&&" \ X2=tmp$[5,6],tmp$[1,4] 
RDate=X2 ! yymmdd
if E let e$="Invalid ship date!" \ error 10000
!
! warehouse
If WHSE<1 Or WHSE>99 let e$="Invalid  warehouse, must be between 1 and 99!" \ error 10000
!
! buyer params
If Buyer[1] < 1 Or Buyer[1] > 999 let e$="Invalid beginning buyer, must be between 1 and 999!" \ error 10000
If Buyer[2] < Buyer[1] Or Buyer[2] > 999 let e$="Invalid ending buyer, must be between starting buyer and 999!" \ error 10000
!
! salesman params
if Slsm[1]<0 or Slsm[1]>999 let e$="Invalid starting salesman, must be between 1 and 999!" \ error 10000
if Slsm[2]<Slsm[1] or Slsm[2]>999 let e$="Invalid ending salesman, must be between starting salesman and 999!" \ error 10000
!
! - Call "progdflt","subout","",77,RETVAL$
! - If RETVAL$[1,5] = "@@@@@"
! -   RETVAL$[1,4] = BUYER[1] Using "####"
! -   RETVAL$[5,8] = BUYER[2] Using "####"
! -   RETVAL$[9,12] = SLSM[1] Using "####"
! -   RETVAL$[13,16] = SLSM[2] Using "####"
! -   RETVAL$[17,18] = WHSE Using "##"
! -   RETVAL$[19,19] = Str$(RPTTYPE)
! - Else 
! -   BUYER[1] = RETVAL$[1,4]
! -   BUYER[2] = RETVAL$[5,8]
! -   SLSM[1] = RETVAL$[9,12]
! -   SLSM[2] = RETVAL$[13,16]
! -   WHSE = RETVAL$[17,18]
! -   RPTTYPE = RETVAL$[19,19]
! - End If 
! - STARTHERE: Rem "and we're off
! - Print 'CS ED';@0,0;"-SUBOUT-";@30,0;"OUTS & SUBS LIST"
! - Print @0,2;" 1> REPORT:";@30,2;"1=buyer  2=salesrep  3=both";
! - Print @0,4;" 2> SHIP DATE:";
! - Print @0,5;" 3> WAREHOUSE:";
! - Print @25,7;'BR';"STARTING";@40,7;"ENDING";'ER';
! - Print @0,8;" 4> BUYER";
! - Print @0,9;" 5> SALESREP";
! - Print Using "#";@20,2;RPTTYPE;
! - X2 = RDATE \ Gosub ISDUNPACK
! - Print @20,4;X$
! - Print Using "##";@20,5;WHSE;
! - Print Using "###";@25,8;BUYER[1];@40,8;BUYER[2]
! - Print Using "###";@25,9;SLSM[1];@40,9;SLSM[2]
! - Goto FINALQ
! - EDT_ALL: Rem "all flds
! - For FLD = 1 To 5
! -   Gosub EDT_FLDS
! - Next FLD
! - Goto FINALQ
! - FINALQ: Rem "what now
! - Print @0,22;'CE';"SELECT  #: field  R: reselect all  S: save defaults  P: print  E: exit   ";
! - Input Len 16384 + 2;""ANS$ \ Call String(1,ANS$)
! - If ANS$ = "E" Goto OUTEND
! - If ANS$ = "P" Goto STARTPRNT
! - If ANS$ = "R" Goto EDT_ALL
! - If ANS$ = "S"
! - ASK_SAVE: Print @0,22;'CL';"Save for  A: all or  U: user access only  <CR>: do not save ";
! -   Input Len 16384 + 1;""J1$ \ Call String(1,J1$)
! -   If J1$ = "" Print @0,22;'CL'; \ Goto FINALQ
! -   If J1$ <> "A" And J1$ <> "U" Goto ASK_SAVE
! -   If J1$ = "A" Let URECFLAG = 0 Else Let URECFLAG = 1
! -   Call "Progdfltw","subout","",77,RETVAL$,URECFLAG
! -   Goto FINALQ
! - End If 
! - FLD = ANS$
! - If FLD Gosub EDT_FLDS
! - Goto FINALQ
! - EDT_FLDS: Rem "
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On FLD Gosub FLD1,FLD2,FLD3,FLD4,FLD5
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
! - FLD1: Rem "report Type
! - J5$ = "Enter the Report Type (1-3)"
! - J0$ = "30000120 2";J1 = RPTTYPE
! - Gosub ISINPUT
! - If J1 < 1 Or J1 > 3 Goto FLD1
! - RPTTYPE = J1
! - RETVAL$[19,19] = Str$(RPTTYPE)
! - Return 
! - FLD2: Rem "Shipping Date
! - J5$ = "Enter the Order's Shipping Date (mmddyy)"
! - J0$ = "50000620 4";J1 = RDATE
! - Gosub ISINPUT
! - RDATE = J1
! - Return 
! - FLD3: Rem "whse
! - J5$ = "Enter the Warehouse for this report"
! - J0$ = "30000220 5";J1 = WHSE
! - Gosub ISINPUT
! - If J1 < 1 Or J1 > 99 Goto FLD3
! - WHSE = J1
! - Gosub CHECK4RASL
! - RETVAL$[17,18] = WHSE Using "##"
! - Return 
! - CHECK4RASL: Rem "
! - Call "CHKWRASL",WHSE,RASL[]
! - Return 
! - FLD4: Rem "Buyer Range
! - J5$ = "Enter the Starting Buyer"
! - J0$ = "30000325 8";J1 = BUYER[1]
! - Gosub ISINPUT
! - BUYER[1] = J1
! - EBUYR: Rem "ending
! - J5$ = "Enter the Ending Buyer #"
! - J0$ = "30000340 8";J1 = BUYER[2]
! - Gosub ISINPUT
! - If J1 < BUYER[1]
! -   J7$ = "ENDING MUST BE MORE THAN STARTING NUMBER"
! -   Gosub ISERRMSG
! -   Goto EBUYR
! - End If 
! - BUYER[2] = J1
! - RETVAL$[1,4] = BUYER[1] Using "####"
! - RETVAL$[5,8] = BUYER[2] Using "####"
! - Return 
! - FLD5: Rem "Salesman Range
! - J5$ = "Enter the starting Salesrep"
! - J0$ = "30000325 9";J1 = SLSM[1]
! - Gosub ISINPUT
! - SLSM[1] = J1
! - ESLSM: Rem "ending
! - J5$ = "Enter the ending Salesrep #"
! - J0$ = "30000340 9";J1 = SLSM[2]
! - Gosub ISINPUT
! - If J1 < SLSM[1]
! -   J7$ = "ENDING MUST BE MORE THAN STARTING NUMBER"
! -   Gosub ISERRMSG
! -   Goto ESLSM
! - End If 
! - SLSM[2] = J1
! - RETVAL$[9,12] = SLSM[1] Using "####"
! - RETVAL$[13,16] = SLSM[2] Using "####"
! - Return 
!
! *** Sort Section
STARTPRNT: Rem "
! - Print @0,22;'CE';"SORTING, PLEASE WAIT  ";
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If
K9$ = " ",K9$;NUMRECS = 0
CLRSORT: Rem "in case
Search #9,3,1;K9$,R[9],E
If E Goto CLRDONE
Search #9,5,1;K9$,R[9],E
If E Let e$ = "syserrorfile 446c sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
Goto CLRSORT
!
CLRDONE: Rem "thru orders/lines
K1$ = " ",K1$
ROH_LOOP: Rem "thru orders for Ship Date
Search #3,3,1;K1$,R[3],E
If E = 2 Goto SORTDONE
NUMRECS = NUMRECS + 1
! - If Not(Fra(NUMRECS / 200)) Print @40,22;'CL';NUMRECS;K1$
X2 = K1$[1,2] \ If X2 >= 7 And X2 < 25 Goto ROH_LOOP
Mat Read #3,R[3],0;H0;
Mat Read #3,R[3],78;H4;
Mat Read #3,R[3],408;H6;
If H0[0] > 19 And H0[0] < 25 Goto ROH_LOOP
If H0[0] > 8 And H0[0] < 14 Goto ROH_LOOP
If H0[0] > 89 ! "in process some kind
  If H6[2] >= 9 And H6[2] <= 12 Goto ROH_LOOP
End If 
If H0[10] <> RDATE Goto ROH_LOOP
If H0[11] < SLSM[1] Or H0[11] > SLSM[2] Goto ROH_LOOP
K2$ = " ",K2$;K2$[1,6] = K1$[3]
ROL_LOOP: Rem "look for subst lines
Search #2,3,1;K2$,R[2],E
If E Goto ROH_LOOP
If K2$[1,6] <> K1$[3,8] Goto ROH_LOOP
Gosub READ_ROL
WHSE[1] = L4[3] \ If WHSE[1] < 1 Or WHSE[1] > 99 Let WHSE[1] = H4[2]
If WHSE[1] <> WHSE Goto ROL_LOOP
FLAG[1] = 0;FLAG[2] = 0
If S3[16] = 1.1 Let FLAG[1] = 1
If L7[4] + L7[0] < L7[2] ! "possible out
  If Not(FLAG[1]) Let FLAG[2] = 1
End If 
If Not(FLAG[1]) And Not(FLAG[2]) Goto ROL_LOOP
If L3[0] And FLAG[2] Goto ROL_LOOP
Gosub GET_PWHSE
If BUYER < BUYER[1] Or BUYER > BUYER[2] Goto ROL_LOOP
If RPTTYPE = 1 Or RPTTYPE = 3 !"buyer / both
  If FLAG[1] ! "subbed
    If S3$[21,32] = "            " Goto ESUBKEY
    K9$ = " ",K9$;K9$[1,1] = " "
    K9$[2,4] = BUYER Using "###"
    K9$[6,6] = " "
    K9$[7,18] = S3$[21,32]
    K9$[19,24] = H0[4] Using "######"
    K9$[25] = K2$
    Search #9,4,1;K9$,R[2],E
    If E>1 Let e$ = "syserrorfile 446c sortfile mode (m)=4 keyno (k)=1 r=",R[2]," e=",e," keyval (k$)=",K9$ \error 10000
ESUBKEY: Rem "now "out"
  End If 
  If FLAG[2] ! "it's out
    K9$ = " ",K9$;K9$[1,1] = " "
    K9$[2,4] = BUYER Using "###"
    K9$[6,6] = "O"
    K9$[7,18] = L1$[1,12]
    K9$[19,24] = H0[4] Using "######"
    K9$[25] = K2$
    Search #9,4,1;K9$,R[2],E 
    If E>1 Let e$ = "syserrorfile 446c sortfile mode (m)=4 keyno (k)=1 r=",R[2]," e=",e," keyval (k$)=",K9$ \error 10000
  End If 
End If 
If RPTTYPE = 2 Or RPTTYPE = 3 ! "salesrep / both
  If FLAG[1] ! "subbed
    If S3$[21,32] = "            " Goto ESSUBKEY
    K9$ = " ",K9$;K9$[1,1] = "S"
    K9$[2,4] = H0[11] Using "###"
    K9$[6,6] = " "
    K9$[7,18] = S3$[21,32]
    K9$[19,24] = H0[4] Using "######"
    K9$[25] = K2$
    Search #9,4,1;K9$,R[2],E 
    If E>1 Let e$ = "syserrorfile 446c sortfile mode (m)=4 keyno (k)=1 r=",R[2]," e=",e," keyval (k$)=",K9$ \error 10000
ESSUBKEY: Rem "
  End If 
  If FLAG[2] ! "out
    K9$ = " ",K9$;K9$[1,1] = "S"
    K9$[2,4] = H0[11] Using "###"
    K9$[6,6] = "O"
    K9$[7,18] = L1$[1,12]
    K9$[19,24] = H0[4] Using "######"
    K9$[25] = K2$
    Search #9,4,1;K9$,R[2],E 
    If E>1 Let e$ = "syserrorfile 446c sortfile mode (m)=4 keyno (k)=1 r=",R[2]," e=",e," keyval (k$)=",K9$ \error 10000
  End If 
End If ! "that's all folks
Goto ROL_LOOP
!
GET_PWHSE: Rem "prod & whse
R[4] = L4[0]
If FLAG[1] ! "it's subbed - need Original
  K3$ = " ",K3$;K3$ = S3$[21,32]
  Search #4,2,1;K3$,R[4],E
  If E
    BUYER = -1 \ Return 
  End If 
End If 
Mat Read #4,R[4],0;A$;
Mat Read #4,R[4],156;B;
Mat Read #4,R[4],460;A1;
Mat Read #4,R[4],512;PFU1;
Mat Read #4,R[4],554;PFU2;
K3$ = " ",K3$;K3$[1,12] = L1$[1,12]
If FLAG[1] Let K3$[1,12] = S3$[21,32]
K3$[13] = WHSE[1] Using "##"
Search #13,2,1;K3$,R[13],E
If Not(E)
  Mat Read #13,R[13],32;W1;
  Mat Read #13,R[13],38;W2;
  Mat Read #13,R[13],78;W3;
Else 
  W1[2] = 0;W2[3] = B[24];W3[0] = 0;W3[2] = 0
End If 
BUYER = W1[2];VENDOR = W2[3]
OHAND = W3[0];AVAIL = W3[0] - W3[2]
Return 
READ_ROL: Rem "
Mat Read #2,R[2],8;L3;
Mat Read #2,R[2],16;L4;
Mat Read #2,R[2],56;L6;
Mat Read #2,R[2],80;L6$;
Mat Read #2,R[2],140;L1$;
Mat Read #2,R[2],168;L7;
Mat Read #2,R[2],250;UN;
Mat Read #2,R[2],260;S3;
Mat Read #2,R[2],368;MT$;
Mat Read #2,R[2],370;S3$;
Mat Read #2,R[2],446;EUN;
Mat Read #2,R[2],452;UNF;
Mat Read #2,R[2],514;CTWT;
Return 
!
GET_BIN: Rem "
BIN$ = "STOCK "
K3$ = " ",K3$;K3$ = K9$[7,18]
K3$[13] = WHSE Using "##"
PLOC_LOOP: Rem " key - prod/wh/loc
Search #11,3,1;K3$,R[11],E
If E = 2 Return 
If K3$[1,12] <> K9$[7,18] Return 
X2 = K3$[13,14] \ If X2 <> WHSE Return 
Mat Read #11,R[11],18;PL1;
If PL1[1] <> 1 Goto PLOC_LOOP
Mat Read #11,R[11],12;BIN$;
Return 
!
CHK_POL: Rem "see if PO out there
K4$ = " ",K4$;K4$[1,6] = R[4] Using "######"
NUMPOLINES = 0 \ POInfo$=""
POL_LOOP: Rem "
Search #5,3,2;K4$,R[5],E
If E = 2 Goto PODONE
X2 = K4$[1,6] \ If X2 <> R[4] Goto PODONE
Mat Read #5,R[5],0;POL1;
If POL1[0] > 2 Goto POL_LOOP
If POL1[1] <> WHSE Goto POL_LOOP
X2 = POL1[3] \ For K = 0 To 11
  FLAGS[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K
If FLAGS[0] Goto POL_LOOP
If FLAGS[2] Goto POL_LOOP
Mat Read #5,R[5],12;POL2;
Mat Read #5,R[5],24;POL3;
Mat Read #5,R[5],232;PL4;
Mat Read #5,R[5],376;POMISC;
If POMISC[0] = 0 Goto POL_LOOP
K3$ = " ",K3$ 
For X = 1 To 6
  K3$ = " ",K3$;K3$[1,2] = X Using "##"
  K3$[3] = K4$[7,12]
  Search #10,2,1;K3$,R[10],E
  If Not(E) Goto GOTPOH
Next X
Goto POL_LOOP
!
GOTPOH: Rem "found valid header
Gosub PRNT_HEADER
CNVTU[0] = 0;CNVTU[1] = SELLUM;CNVTU[2] = 1
CNVTA = POL3[2] - POL3[3]
Gosub CONVERT \ QTY[5] = AMOUNT
if J8
  POInfo$=POInfo$,"ON ORDER: ",QTY[5] using SMASK$
  X2 = POL2[2] \ Gosub ISDUNPACK
  POInfo$=POInfo$," DUE: ",X$," PO: ",K4$[7,12],"  "
else
  Print #0; Tab 3;"ON ORDER: ";
  Print #0; Using SMASK$;QTY[5];
  X2 = POL2[2] \ Gosub ISDUNPACK
  Print #0; Tab 25;"DUE: ";X$;
  Print #0; Tab 40;"PO: ";K4$[7,12]
endif
NUMPOLINES = NUMPOLINES + 1;CLN = CLN + 1
Goto POL_LOOP
!
PODONE: Rem "
If Not(NUMPOLINES) ! "no lines
  if J8 ! dx xml
    POInfo$="NONE ON ORDER"
  else
    Print #0; Tab 3;"NONE ON ORDER"
    CLN = CLN + 1
  endif
End If 
Return 
!
GET_CUST: Rem "Customer Name
K4$ = " ",K4$;K4$ = K9$[19,24]
Search #8,2,1;K4$,R[8],E 
If Not(E)
  Mat Read #8,R[8],30;C1$;
Else 
  C1$ = " ",C1$
  C1$ = "CUSTOMER NOT FOUND!"
End If 
EBY$ = "NOT FOUND!"
If CTWT[1] >= 0 Read #15,CTWT[1],0;EBY$;
If EBY$ = "" Or EBY$[1,6] = "      "
  EBY$ = "NO. " + Str$(CTWT[1]) + "        "
End If 
Return 
!
GET_ROH: Rem "need some ROH Fields
K4$ = " ",K4$
For X = 1 To 99
  K4$[1,2] = X Using "##"
  K4$[3] = K9$[25,30]
  Search #3,2,1;K4$,R[3],E 
  If Not(E) Goto GOTROH
Next X
H0[11] = 0;H5[7] = 1
Return 
!
GOTROH: Rem "
Mat Read #3,R[3],0;H0;
Mat Read #3,R[3],78;H4;
Mat Read #3,R[3],104;H5;
Return 
!
! *** Process Section
SORTDONE: Rem "done - now print
!
if J8 ! dx xml headings
  !
  tmp1$="ID" \ tmp2$="BUYER/SALESREP" ! for both buyer & salesrep
  if RptType=1 let tmp1$="BUYER" \ tmp2$="SALESREP" ! for buyer
  if RptType=2 let tmp1$="SALESREP" \ tmp2$="BUYER" ! for salerep
  tmp$=tmp1$,fdel$,tmp2$," NAME",fdel$
  tmp$=tmp$,"ITEM CODE",fdel$,"DESCRIPTION",fdel$
  tmp$=tmp$,"MCODE",fdel$,"BIN",fdel$
  tmp$=tmp$,"ON HAND",fdel$,"ON HAND UM",fdel$
  tmp$=tmp$,"AVAILABLE",fdel$,"AVAIL UM",fdel$
  tmp$=tmp$,"PO INFORMATION",fdel$
  tmp$=tmp$,"ORDER",fdel$,"LINE",fdel$,"CUST",fdel$
  tmp$=tmp$,"NAME",fdel$,"ORD",fdel$,"SHIP",fdel$
  tmp$=tmp$,"OUT",fdel$,"U/M",fdel$,"STATUS",fdel$
  tmp$=tmp$,"WHSE/BUY",fdel$,"USERID",fdel$,tmp2$,fdel$
  tmp$=tmp$,"SUBBED",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! - Print @0,22;'CE';"PRINTING, PLEASE WAIT"
! - If Err 0 Gosub ERR_ESCAPE
! - If SCRN Print 'CS';
NUMRECS = 0;PASS = 1
If RPTTYPE <> 3 Let PASS = RPTTYPE
DONXTPASS: Rem "if both versions run
K9$ = " ",K9$;HOLDIT = -1;PROD$ = " ",PROD$
If PASS = 0 Let PASS = 1
CLN = 90;PRODPRNTD = 0
CPG = 0;BRKPRNTD = 0
SRTFLE_LOOP: Rem "next
Search #9,3,1;K9$,R[2],E
if E = 2 Goto RPTDONE
If PASS = 1 And K9$[1,1] = "S" Goto RPTDONE
If PASS = 2 And K9$[1,1] <> "S" Goto SRTFLE_LOOP
NUMRECS = NUMRECS + 1
! - If Not(Fra(NUMRECS / 200)) And Not(SCRN) Print @40,22;'CL';NUMRECS;K9$[2,18]
FLAG[1] = 0;FLAG[2] = 0
If K9$[6,6] = " " Let FLAG[1] = 1
If K9$[6,6] = "O" Let FLAG[2] = 1
If HOLDIT = -1 Let HOLDIT = K9$[2,4]
X2 = K9$[2,4]
If X2 <> HOLDIT Gosub MAINBRK
HOLDIT = K9$[2,4];S1$ = " ",S1$
If PASS = 1 ! "get buyer
  Read #7,HOLDIT,0;S1$[1,15];
End If 
If PASS = 2 ! "get Slsm
  K3$ = " ",K3$;K3$[1,3] = HOLDIT Using "###"
  Search #6,2,1;K3$,R[6],E
  If Not(E)
    Mat Read #6,R[6],0;S1$;
  Else 
    S1$ = "SALESREP NOT ON FILE"
  End If 
End If 
If Not(BRKPRNTD) Gosub NEWBRK
ORDER = K9$[25,30]
If PROD$ = "            " Let PROD$ = K9$[7,18]
If PROD$[1,12] <> K9$[7,18] Gosub NEWPROD
Gosub READ_ROL
Gosub GET_PWHSE
If L3[0] And FLAG[1]
  A$[9,38] = L6$[1,30];A$[63,92] = L6$[31,60]
End If 
If L3[0] Or Not(FLAG[1])
  Gosub L_30000
End If 
SELLUM = UN[0]
Gosub GET_BIN
If Not(PRODPRNTD)
  Gosub PRNT_PROD
  Gosub CHK_POL
  PRODPRNTD = 1
End If 
CNVTU[0] = 0;CNVTU[1] = SELLUM;CNVTU[2] = 1
CNVTA = L7[2] \ Gosub CONVERT
L7[2] = AMOUNT
CNVTA = L7[3] \ Gosub CONVERT
L7[3] = AMOUNT
CNVTA = L7[4] \ Gosub CONVERT
L7[4] = AMOUNT
SUM$ = "ERR."
If SELLUM = -1 Let SUM$ = "CWT "
If SELLUM = -2 Let SUM$ = "LOT "
If SELLUM = -3 Let SUM$ = "LB  "
If SELLUM > 0 Read #14,SELLUM,10;SUM$;
Gosub GET_ROH
If CTWT[1] <= 0 Or CTWT[1] > 999 Let CTWT[1] = H5[0]
Gosub GET_CUST
Gosub PRNT_LINE
Goto SRTFLE_LOOP
!
NEWBRK: Rem "new break item
if J8 return ! dx xml
!
If CLN + 8 > MXLN Let CLN = 90
Gosub PRNT_HEADER
Print #0;""
Print #0;K9$[2,4];
Print #0; Tab 5;S1$
Print #0;"\15\"
Print #0;""
CLN = CLN + 5
BRKPRNTD = 1
Return 
!
NEWPROD: Rem "changed items - Print blank line between
PRODPRNTD = 0
!
if J8 return ! dx xml
!
Print #0;""
CLN = CLN + 1
If CLN + 3 > MXLN Let CLN = 90
Return 
!
RPTTOTALS: Rem "totals for pass/run
if J8 return ! dx xml
!
If CLN + 8 > MXLN Let CLN = 90
Gosub PRNT_HEADER
Print #0; Tab 23;"BUYERS:";
Print #0; Tab 30;"LINES OUT:";
Print #0; Using SMASK$; Tab 43;BRKTTLS[11];
Print #0; Tab 70;"WHS LINES OUT:";
Print #0; Using SMASK$; Tab 87;BRKTTLS[15]
Print #0; Tab 32;"QTY OUT:";
Print #0; Using DMASK$; Tab 40;BRKTTLS[12];
Print #0; Tab 76;"QTY OUT:";
Print #0; Using DMASK$; Tab 84;BRKTTLS[16]
Print #0; Tab 30;"LINES SUB:";
Print #0; Using SMASK$; Tab 43;BRKTTLS[13];
Print #0; Tab 74;"LINES SUB:";
Print #0; Using SMASK$; Tab 87;BRKTTLS[17]
Print #0; Tab 32;"QTY SUB:";
Print #0; Using DMASK$; Tab 40;BRKTTLS[14];
Print #0; Tab 76;"QTY SUB:";
Print #0; Using DMASK$; Tab 84;BRKTTLS[18]
Print #0;""
Print #0; Tab 23;"BUYERS:";
Print #0; Tab 30;"OUT & SUB:";
Print #0; Using DMASK$; Tab 40;BRKTTLS[12] + BRKTTLS[14];
Print #0; Tab 70;"WHS OUT & SUB:";
Print #0; Using DMASK$; Tab 84;BRKTTLS[16] + BRKTTLS[18]
Print #0;""
Print #0; Tab 36;"TOTAL LINES OUT:";
X3 = BRKTTLS[11] + BRKTTLS[13] + BRKTTLS[15] + BRKTTLS[17]
Print #0; Using SMASK$;X3;
Print #0; Tab 68;"TOTAL QTY OUT:";
X2 = BRKTTLS[12] + BRKTTLS[14] + BRKTTLS[16] + BRKTTLS[18]
Print #0; Using DMASK$;X2
Print #0;""
CLN = 90
Return 
!
MAINBRK: Rem "Buyer or SalesRep Change
if J8 goto MainBreakExit ! dx xml
!
If CLN + 8 > MXLN Let CLN = 90
Gosub PRNT_HEADER
Print #0;"\15\"
If PASS = 1 ! "by buyer
  Print #0; Tab 20;"BUYER ";
  Print #0;Str$(HOLDIT);
Else 
  Print #0; Tab 15;"BUY   ";
End If 
Print #0; Tab 30;"LINES OUT:";
Print #0; Using SMASK$; Tab 43;BRKTTLS[1];
Print #0; Tab 70;"WHS LINES OUT:";
Print #0; Using SMASK$; Tab 87;BRKTTLS[5]
Print #0; Tab 32;"QTY OUT:";
Print #0; Using DMASK$; Tab 40;BRKTTLS[2];
Print #0; Tab 76;"QTY OUT:";
Print #0; Using DMASK$; Tab 84;BRKTTLS[6]
Print #0; Tab 30;"LINES SUB:";
Print #0; Using SMASK$; Tab 43;BRKTTLS[3];
Print #0; Tab 74;"LINES SUB:";
Print #0; Using SMASK$; Tab 87;BRKTTLS[7]
Print #0; Tab 32;"QTY SUB:";
Print #0; Using DMASK$; Tab 40;BRKTTLS[4];
Print #0; Tab 76;"QTY SUB:";
Print #0; Using DMASK$; Tab 84;BRKTTLS[8]
Print #0;""
If PASS = 1 ! "by buyer
  Print #0; Tab 20;"BUYER ";
  Print #0;Str$(HOLDIT);
Else 
  Print #0; Tab 15;"BUY   ";
End If 
Print #0; Tab 30;"OUT & SUB:";
Print #0; Using DMASK$; Tab 40;BRKTTLS[2] + BRKTTLS[4];
Print #0; Tab 70;"WHS OUT & SUB:";
Print #0; Using DMASK$; Tab 84;BRKTTLS[6] + BRKTTLS[8]
Print #0;""
Print #0; Tab 36;"TOTAL LINES OUT:";
X3 = BRKTTLS[1] + BRKTTLS[3] + BRKTTLS[5] + BRKTTLS[7]
Print #0; Using SMASK$;X3;
Print #0; Tab 68;"TOTAL QTY OUT:";
X2 = BRKTTLS[2] + BRKTTLS[4] + BRKTTLS[6] + BRKTTLS[8]
Print #0; Using DMASK$;X2
Print #0;""
!
MainBreakExit:
BRKPRNTD = 0;PRODPRNTD = 0
For X = 0 To 9
  BRKTTLS[X + 10] = BRKTTLS[X + 10] + BRKTTLS[X]
  BRKTTLS[X] = 0
Next X
CLN = 90
Return 
!
PRNT_PROD: Rem "main prod line
CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1
CNVTA = OHAND \ Gosub CONVERT
QTY[1] = AMOUNT
CNVTA = AVAIL \ Gosub CONVERT
QTY[2] = AMOUNT
QUM$ = "ERR."
If PFU1[9] = -1 Let QUM$ = "CWT "
If PFU1[9] = -2 Let QUM$ = "LOT "
If PFU1[9] = -3 Let QUM$ = "LB  "
If PFU1[9] > 0 Read #14,PFU1[9],10;QUM$;
!
if J8 return ! dx xml
!
Gosub PRNT_HEADER
Print #0;K9$[7,18]; Tab 13;A$[9,38];
Print #0; Tab 44;A$[156,156];
Print #0; Tab 46;BIN$;
Print #0; Using SMASK$; Tab 55;QTY[1];" ";QUM$;
Print #0; Using SMASK$; Tab 75;QTY[2];" ";QUM$
CLN = CLN + 1
Return 
!
PRNT_LINE: Rem "line detail
if J8
  tmp$=K9$[2,4],fdel$,rtrim$(S1$),fdel$
  tmp$=tmp$,K9$[7,18],fdel$,rtrim$(A$[9,38]),fdel$
  tmp$=tmp$,A$[156,156],fdel$,BIN$,fdel$
  tmp$=tmp$,QTY[1] Using SMASK$,fdel$,QUM$,fdel$
  tmp$=tmp$,QTY[2] Using SMASK$,fdel$,QUM$,fdel$
  tmp$=tmp$,POInfo$,fdel$
  tmp$=tmp$,K9$[25,30],fdel$,K9$[31,33],fdel$
  tmp$=tmp$,K9$[19,24],fdel$,rtrim$(C1$[1,30]),fdel$
  tmp$=tmp$,L7[2] Using SMASK$,fdel$
  tmp$=tmp$,L7[4] Using SMASK$,fdel$
  tmp$=tmp$,L7[3] Using SMASK$,fdel$
  tmp1$=" " \ if FLAG[1] let tmp1$=tmp1$,"SUB "
  if FLAG[2] let tmp1$=tmp1$,"OUT "
  tmp$=tmp$,SUM$,fdel$,tmp1$,fdel$
  if H5[7] <> 2 ! Not Direct
    tmp$=tmp$,"WAREHS",fdel$
    If FLAG[2] Let BRKTTLS[5] = BRKTTLS[5] + 1;BRKTTLS[6] = BRKTTLS[6] + L7[3]
    If FLAG[1] Let BRKTTLS[7] = BRKTTLS[7] + 1;BRKTTLS[8] = BRKTTLS[8] + L7[3]
  Else ! "it's a direct
    tmp$=tmp$,"BUYER ",fdel$
    If FLAG[2] Let BRKTTLS[1] = BRKTTLS[1] + 1;BRKTTLS[2] = BRKTTLS[2] + L7[3]
    If FLAG[1] Let BRKTTLS[3] = BRKTTLS[3] + 1;BRKTTLS[4] = BRKTTLS[4] + L7[3]
  End If 
  tmp$=tmp$,EBY$,fdel$
  If PASS = 1 let X2=H0[11] else X2=BUYER
  tmp$=tmp$,X2 Using "###",fdel$
  If FLAG[1] ! "subbed
    tmp$=tmp$,L1$[1,12]," ",rtrim$(L6$[1,30]),fdel$
  else
    tmp$=tmp$,"",fdel$
  End If 
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
endif
!
Gosub PRNT_HEADER
Print #0; Tab 2;K9$[25,30];" ";K9$[31,33];
Print #0; Tab 13;K9$[19,24]; Tab 20;C1$[1,30];
Print #0; Using SMASK$; Tab 50;L7[2]; Tab 58;L7[4]; Tab 66;L7[3];
Print #0; Tab 75;SUM$;
If FLAG[1] Print #0;" SUB ";
If FLAG[2] Print #0;" OUT ";
If H5[7] <> 2 ! Not Direct
  Print #0; Tab 84;"WAREHS";
  If FLAG[2] Let BRKTTLS[5] = BRKTTLS[5] + 1;BRKTTLS[6] = BRKTTLS[6] + L7[3]
  If FLAG[1] Let BRKTTLS[7] = BRKTTLS[7] + 1;BRKTTLS[8] = BRKTTLS[8] + L7[3]
Else ! "it's a direct
  Print #0; Tab 84;"BUYER ";
  If FLAG[2] Let BRKTTLS[1] = BRKTTLS[1] + 1;BRKTTLS[2] = BRKTTLS[2] + L7[3]
  If FLAG[1] Let BRKTTLS[3] = BRKTTLS[3] + 1;BRKTTLS[4] = BRKTTLS[4] + L7[3]
End If 
Print #0; Tab 91;EBY$;
If PASS = 1 ! "print sales rep
  Print #0; Using "###"; Tab 102;H0[11]
Else ! "print Buyer
  Print #0; Using "###"; Tab 102;BUYER
End If 
CLN = CLN + 1
If FLAG[1] ! "subbed
  Print #0; Tab 20;"SUBBED ";
  Print #0; Tab 30;L1$[1,12];
  Print #0; Tab 45;L6$[1,30]
  CLN = CLN + 1
End If 
Return 
!
PRNT_HEADER: Rem "Report Header
if J8 return ! dx xml
!
If CLN < MXLN Return 
If CPG Print #0;"\14\";
CPG = CPG + 1
Print #0; Tab 5;"DATE: ";SDATE$;
X2 = Int(65 - (Len(CONM$) / 2))
Print #0; Tab X2;CONM$;
Print #0; Tab 120;"PAGE ";Str$(CPG)
Print #0;"-SUBOUT-";
TME$ = "" \ Call Time(TME$)
Print #0;TME$;
Print #0; Tab 56;"OUTS AND SUBS LIST"
If PASS = 1
  Print #0;"BY BUYER ";
Else 
  Print #0;"BY SALESREP ";
End If 
Print #0;"FOR ";
X2 = RDATE \ Gosub ISDUNPACK
Print #0;X$
Print #0;""
Print #0;"ITEM CODE"; Tab 13;"DESCRIPTION";
Print #0; Tab 40;"MCODE"; Tab 46;"BIN";
Print #0; Tab 55;"ON HAND"; Tab 75;"AVAILABLE"
Print #0; Tab 2;"ORDER LINE";
Print #0; Tab 13;"CUST"; Tab 20;"NAME";
Print #0; Tab 54;"ORD"; Tab 61;"SHIP"; Tab 70;"OUT";
Print #0; Tab 83;"WHS/BUY"; Tab 91;"USERID";
If PASS = 1
  Print #0; Tab 102;"SALESREP"
Else 
  Print #0; Tab 102;"BUYER"
End If 
Print #0;""
BRKPRNTD = 0;PRODPRNTD = 0
CLN = 9
Return 
!
L_30000: Rem ===== set units for conversions (stock/nonstock version)
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(NONSTOCK) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
If PFU1[11] = -3 Or PFU1[12] = -3 ! "Catch Wgt Itm N/S
  PFU1[15] = -3;CTWT = PFU1[15]
Else 
  PFU1[15] = 0;CTWT = 0
End If 
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
!
RPTDONE: Rem "end of this
Gosub MAINBRK
Gosub RPTTOTALS
If PASS = 1 And RPTTYPE = 3
! -   If SCRN
! -     Print @0,23;'CL';"PRESS <CR> TO CONTINUE  ";
! -     Input Len 16384 + 1;""ANS$
! -   End If 
  if J8=0 Print #0;"\14\";
  PASS = 2
  For X = 0 To 20 \ BRKTTLS[X] = 0 \ Next X
  Goto DONXTPASS
End If 
! - If SCRN
! -   Print @0,23;'CL';"PRESS <CR> TO EXIT  ";
! -   Input Len 16384 + 1;""ANS$
! - End If 
!
OUTEND: Rem "done - and out
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  !!!!!!print rstr$
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
Try Call dxclose() Else REM
End 
!
! - Print 'CS'
! - Chain "MX000C"
! - Close 
! - Chain "MX000"
!
Rem {begin rtn.input.s}
! - ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 >= 3 If J0 <= 4
! -   If J0 = 3 Let J2$ = "#",J2$
! -   If J0 = 4 Let J2$ = "-",J2$
! -   J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - End If 
! - J1$[J3 + 1] = ""
! - If J0 < 3 Goto ISENTER
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 <> 6
! -   If J0 = 5
! -     J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
! -     J1$ = J9$[4,7],J9$[2,3],"  "
! -   Else 
! -     J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! -     If Len(J5$) > Msc(33) - 3 Let J5$[Msc(33) - 3] = ""
! -   End If 
! - End If 
! - ISENTER: Rem
! - If J5 < Msc(34) - 1
! -   Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - End If 
! - Print @J4 + J3,J5;'EU';@J4 - 1,J5;'BU';
! - Print @J4,J5;J1$[1,J3]; Tab (J4 + J3);'EU'; \ If J0 = 5 Print "  ";
! - Print @J4 - 1,J5;'BU';@J4,J5; \ Input Len J3 + 16384;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) > J3
! -   J7$ = "TOO LONG !" \ Gosub ISERRMSG \ Goto ISENTER
! - End If 
! - J9$ = J4$
! - If Not(Len(J9$))
! -   If J0$[3,4] = "00"
! -     J9$ = J1$
! -   Else 
! -     J7$ = "FIELD MUST BE ENTERED !" \ Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - End If 
! - For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] < " " Or J9$[J8,J8] > "~"
! -     J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!"
! -     Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - Next J8
! - On J0 Goto ISTYPE1,ISTYPE1,ISTYPE3,ISTYPE3,ISTYPE3,ISTYPE6 \ Stop 
! - ISTYPE1: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto ISOUT
! - ISTYPE3: Rem
! - J9 = 0
! - X1 = 0
! - For J8 = 1 To Len(J9$)
! -   If J0 = 4 And Not(X1)
! -     If J9$[J8,J8] = "-" Or J9$[J8,J8] = "+"
! -       X1 = 1
! -       Goto ISNCONT1
! -     End If 
! -   End If 
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto ISNCONT2
! -   If J9$[J8,J8] = " " Goto ISNCONT1
! -   If Len(J0$) > 10
! -     J7$ = "" \ J7$ = J0$[10] To J9$[J8,J8] \ If J7$ <> "" Goto ISNCONT1
! -   End If 
! -   If J9$[J8,J8] <> "." Goto ISNUMERR1
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto ISDECERR
! -   If J9 Goto ISNUMERR1
! -   J9 = 1
! - ISNCONT2: Rem
! -   X1 = 1
! -   If J9 Let J9 = J9 + 1
! - ISNCONT1: Rem
! - Next J8
! - If J0 = 5 Goto ISTYPE5
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto ISDECERR
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto ISOUT
! - ISNUMERR1: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - ISDECERR: Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE5: If Len(J0$) > 10 If J9$ = J0$[11,11] Goto ISOUT
! - If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto ISDTERR
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto ISDTOUT
! - If J9[1] = 0 Goto ISDTERR
! - On J9 Goto ISMO31,ISMOFEB,ISMO31,ISMO30,ISMO31,ISMO30
! - On J9 - 6 Goto ISMO31,ISMO31,ISMO30,ISMO31,ISMO30,ISMO31
! - Goto ISDTERR
! - ISMO30: If J9[1] > 30 Goto ISDTERR
! - ISMO31: If J9[1] > 31 Goto ISDTERR
! - Goto ISDTOUT
! - ISMOFEB: If J9[1] > 29 Goto ISDTERR
! - If Fra(J9[2] / 4) ! *** 2000 is leap year! OR NOT FRA(J9[2]/100)
! -   If J9[1] > 28 Goto ISDTERR
! - End If 
! - ISDTOUT: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub ISDUNPACK
! - J$ = X$ \ J3 = 8 \ Goto ISOUT
! - ISDTERR: J7$ = "INVALID DATE !" \ Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE6: Call String(1,J9$)
! - If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto ISOUT
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto ISOUT
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !"
! - Gosub ISERRMSG \ Goto ISENTER
! - ISOUT: J$[J3 + 1] = "" \ Print @J4,J5;J$; \ Return 
! - ISERRMSG: X1 = Len(J7$)
! - Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
! - Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
! - Print 'K1'; \ Window Close \ Return
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X3=X$[7,8]
X4=(X3*10000)+(X1*100)+X2
Return 
!
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: goto CVTSTARTB ! - was If Spc(4) > 1280 Goto CVTSTARTB
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
CVTTRY: Rem "this is a remark
Signal 2,X1,AMOUNT,FLAG ! - If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto CVTTRY
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
Rem {begin rtn.error.s}
!
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
