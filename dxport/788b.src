! >>> Program 788b
!
! description Inventory Service Level by Company
!
! loadsave -w -n 100,10 -o prog/dxport/788b.dl4 src/788b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB 10, 2006  16:37:44
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx77/mx788a.src (univ2) [txc] {29797}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem mx788b SERVICE LEVEL REPORT
Rem Created for:  Presto Foods, cct191155, November 2005
Rem
!
Declare Intrinsic Sub DateToJulian,InpBuf,String
! - Option Default Dialect IRIS1
Com 1%,REPORT
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim F1$[16]
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],X1,X$[40],ccd$[14],j8x
Dim 2%,X2,DT3[1],N1[10],item_count
Dim 3%,J,tmp3
Dim 4%,J1
dim 1%,cvntu[2],3%,cnvta,a[33]
Dim 1%,H4[2],L1[5],L3[3],W1[2],V9[4],un[2],pfu1[20]
Dim 2%,C1[12],H0[12],JDATE,JWDATE,L2[2],L4[3],W2[9],PRODREC,H5[16]  
Dim 2%,CURDATE,CURDATE_JULIAN,DUEDATE_JULIAN,HOLDCONFIRM
Dim 3%,L7[4],R[20],BUYER[1000,3],WHSE[100,3],CURR_BUYER,CURR_WHSE,CURR_VDR
Dim 3%,ITEM_QTYORDTOT,ITEM_QTYORDAMT,ITEM_QTYSHIPTOT,ITEM_QTYSHIPAMT,INVOICENO
Dim 3%,OLM[6],TYPE,OREF[5],unf[6],pfu2[6],amount,a[33],NEWL7[4],s3[17]
Dim K2$[50],K3$[50],K4$[20],K5$[20],K6$[20],K7$[10],K8$[20],K9$[50],K10$[20]
Dim BUYER$[30],CNAME$[30],ARDATE$[8],SLFLG$[38]
Dim BEG_INVDATE$[8],END_INVDATE$[8],unit$[4]
Dim CONFIRM$[8],PMASK$[12],pmask2$[12]
Dim CUSTNAME$[30],PROD_A$[156],VEND_A$[264],VEND_A5$[60],CURR_ITEM$[12]
Dim U9$[10],L1$[12],U5$[10],DASH$[130]
! dx add xport reporting code
DXSetup:
Dim tmp$[1000],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
For J = 2 To 12
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,Abs(J1);F1$;
  Ropen #J,F1$
L_830: Next J
Data "-1","-1136","-1184","-2432","-1744","-1808","-1792","-1","-2400","-1","-1728"
CH_INVHKEY = 2
CH_INVH = 3
CH_INVL = 4
CH_POLINE = 5
CH_PRODWHSE = 6
CH_CUST = 7
CH_PROD = 8
CH_SORT = 9
CH_VENDOR = 10
CH_BUYER = 11
let ch_ccodes=12
! - Ropen #CH_INVHKEY,"4/SORDFLEHHKEY" + Str$(Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64))
Ropen #CH_BUYER,"2/BUYERS"
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
V9[1]=99
V9[4] = 55 \ If J8 Let V9[4] = 18
READ #1,165,0;SLFLG$;
Mat Read #1,3,0;CNAME$;
Read #1,0,100;ARDATE$;
READ_ARDATE: Rem
Read #1,3,172;CURDATE;
X2 = CURDATE \ Gosub L_7820 \ Goto READ_ARDATE
CURDATE_JULIAN = X2
DASH$ = "=",DASH$
PMASK$ = "############"
let pmask2$="#########.##"
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
!
tmp$="4/SORDFLEHHKEY",str$(intCO)
Ropen #CH_INVHKEY,tmp$
!call dxsave(0,"tmp/788bin.txt!")
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"788b",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("begdate",tmp$) \ if tmp$="" let START_IDATE=010170 else START_IDATE=tmp$ ! starting invoice date
call dxget("enddate",tmp$) \ if tmp$="" let END_IDATE=123159 else END_IDATE=tmp$ ! ending invoice date
call dxget("begcat",tmp$) \ if tmp$="" let N1[2]=0 else N1[2]=tmp$ ! starting category
call dxget("endcat",tmp$) \ if tmp$="" let N1[3]=999 else N1[3]=tmp$ ! ending category
!  dx end
!
! starting invoice date
errflag=0
tmp$ = START_IDATE using "&&&&&&"
X2=tmp$[5,6],tmp$[1,4] \ START_IDATE=X2
Gosub L_7820 \ errflag=1 ! julian
if errflag let e$="Invalid starting invoice date!" \ error 10000
N1[0] = X2 ! julian
BEG_INVDATE$ = tmp$[1,2],"/",tmp$[3,4],"/",tmp$[5,6]
!
! ending invoice date
errflag=0
tmp$ = END_IDATE using "&&&&&&"
X2=tmp$[5,6],tmp$[1,4] \ END_IDATE=X2
Gosub L_7820 \ errflag=1 ! julian
if X2<N1[0] let errflag=1
if errflag let e$="Invalid ending invoice date!" \ error 10000
N1[1] = X2 ! julian
END_INVDATE$ = tmp$[1,2],"/",tmp$[3,4],"/",tmp$[5,6]
!
! category
if N1[2]<0 or N1[2]>999 let e$="Invalid starting category, must be between 0 and 999!" \ error 10000
if N1[3]<N1[2] or N1[3]>999 let e$="Invalid ending category, must be between starting category and 999!" \ error 10000
tmp3=n1[1]-n1[0] ! days in range
if tmp3>180 let e$="Please select a smaller DATE RANGE for report!" \ error 10000
!
! - THE_BEGINNING: Rem =====
! - Gosub GET_INVOICEDATES
! - If REPORT = 2
! -   Gosub STARTINGCATGY
! -   Gosub ENDINGCATGY
! - End If 
! - MAKE_SELECTION: Rem
! - V9[1] = 99
! - V9[0] = 0
! - NEED_PAGE_BREAK = 1
! - Gosub REDISPLAY_INPUTS
! - Print @0,23;'CE';"Enter #:field to edit R: reselect all P: print  or  E: exit ";
! - Input Len 16384 + 3;""X$ \ Call String(1,X$)
! - Print @0,23;'CE';
! - If X$ = "P" Goto START_REPORT
! - If X$ = "E" Let J8 = 0 \ Goto OUTEND
! - If X$ = "R" Goto EDT_ALL
! - If X$ = "" Goto MAKE_SELECTION
! - X = X$
! - If REPORT = 1 If X < 1 Or X > 2 Goto MAKE_SELECTION
! - If REPORT = 2 If X < 1 Or X > 4 Goto MAKE_SELECTION
! - Gosub EDT_FLDS
! - Goto MAKE_SELECTION
! - EDT_ALL: Rem "want's all
! - TOT = 2
! - If REPORT = 2 Let TOT = 4
! - For X = 1 To TOT
! -   Gosub EDT_FLDS
! - Next X
! - Goto MAKE_SELECTION
! - EDT_FLDS: Rem "edit them here
! - On X Gosub STARTINVDATE,ENDINVDATE,STARTINGCATGY,ENDINGCATGY
! - Return 
! - REDISPLAY_INPUTS: Rem "==== redisplay inputs for 2nd time around
! - Print 'CS';@30,0;"SERVICE LEVEL REPORT"
! - If REPORT = 1
! -   Print @33,1;"BUYER VERSION "
! - Else 
! -   Print @33,1;"COMPANY VERSION"
! - End If 
! - Print @4,4;'CL';" 1> Enter the Starting Invoice Date: ";BEG_INVDATE$
! - Print @4,5;'CL';" 2> Enter the Ending Invoice Date:   ";END_INVDATE$
! - If REPORT = 2
! -   Print @4,7;'CL';" 3> Enter the Starting Category: ";N1[2]
! -   Print @4,8;'CL';" 4> Enter the Ending Category:   ";N1[3]
! - End If 
! - Return 
!
START_REPORT: Rem ===========================
! - Print 'CS'
! - Print @0,23;'CL';"Clearing sort file, please wait . . ."
K9$ = " ",K9$
CLEAR_SORT_RECS: Rem
Search #CH_SORT,3,1;K9$,R[9],E 
If E Goto START_SORTING
Search #CH_SORT,5,1;K9$,R[9],E
If E Let e$ = "syserrorfile 788b sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \ error 10000
Goto CLEAR_SORT_RECS
!
START_SORTING: Rem
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If
Gosub SORT_RECORDS
!
START_PRINT: Rem ===
! - Print 'CS'
! - Print @0,23;"Printing, please wait . . ."
!
if J8 ! dx xml headings
  tmp$="VENDOR",fdel$,"VENDOR NAME",fdel$
  tmp$=tmp$,"CONTACT",fdel$,"PHONE #",fdel$
  tmp$=tmp$,"CUSTOMER",fdel$,"CUSTOMER NAME",fdel$
  tmp$=tmp$,"ITEM NUMBER",fdel$,"DESCRIPTION",fdel$
  tmp$=tmp$,"QTY ORDERED",fdel$,"QTY SHIPPED",fdel$
  tmp$=tmp$,"NEXT COMFIRMED PO DATE",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if

!
K9$ = " ",K9$
NEED_PAGE_BREAK=1
CURR_WHSE = 0;CURR_VDR = 0
CURR_ITEM$[1,12] = " ",CURR_ITEM$
GET_NEXT_RECORD: Rem
Search #9,3,1;K9$,R[4],E
If E Goto END_OF_REPORT
!
If Not(NEED_PAGE_BREAK)
  NEXTWHSE = K9$[7,8]
  If CURR_WHSE <> NEXTWHSE  and whse_prntd 
    Gosub PRINT_ITEM_TOTAL
    if whse_prntd Gosub PRINT_WHSE_TOTAL
    Goto CONTINUE_PRINTING
  End If 
End If 
!
If Not(NEED_PAGE_BREAK)
  NEXTVDR = K9$[9,14]
  If CURR_VDR <> NEXTVDR and vdr_prntd
    Gosub PRINT_ITEM_TOTAL
	gosub READ_VENDOR
    if vdr_prntd Gosub PRINT_VENDOR_HEADING
    Gosub PRINT_ITEM_HEADING
    Goto CONTINUE_PRINTING
  End If 
End If 
!
If Not(NEED_PAGE_BREAK)
  If CURR_ITEM$[1,12] <> K9$[15,26]
    Gosub PRINT_ITEM_TOTAL
  End If 
End If 
!
CONTINUE_PRINTING: Rem
CURR_BUYER = K9$[1,6]
CURR_WHSE = K9$[7,8]
CURR_VDR = K9$[9,14]
CURR_ITEM$[1,12] = K9$[15,26]
Gosub READ_INVL
Gosub READ_INVH
Gosub READ_PRODUCT
gosub convert_l7:       !" convert to INVL selling UM
gosub accum_item_totals:  !" won't be printing all of these however
Gosub READ_CUST
Gosub READ_VENDOR
Gosub GET_CONFIRMED_DATE
If NEED_PAGE_BREAK
  V9[1] = 99
  Gosub PRINT_HEADING
  Gosub PRINT_WHSE_HEADING
  gosub READ_VENDOR
  Gosub PRINT_VENDOR_HEADING
  Gosub PRINT_ITEM_HEADING
  NEED_PAGE_BREAK = 0
End If 
if l7[4]<>l7[2] Gosub PRINT_ITEM_DETAIL ! 
tmp4=tmp4+1
Goto GET_NEXT_RECORD
!
END_OF_REPORT: Rem
Gosub PRINT_ITEM_TOTAL
  Gosub PRINT_WHSE_TOTAL
V9[1] = 99 \ Gosub PRINT_HEADING
Gosub PRINT_WHSE_GRANDTOTAL
Gosub PRINT_COMPANY_GRANDTOTAL
! - If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "U5$ \ Print 'CS';
If V9[0] Print #0;"\14\";
Goto OUTEND
!
! - GET_INVOICEDATES: Rem ===============================================
! - Print 'CS';@30,0;"SERVICE LEVEL REPORT"
! - If REPORT = 1
! -   Print @33,1;"BUYER VERSION "
! - Else 
! -   Print @33,1;"COMPANY VERSION"
! - End If 
! - Print @4,4;'CL';" 1> Enter the Invoice Date  <CR> for Range: ";
! - J5$ = "Please Enter the Invoice MMDDYY  "
! - J0$ = "5 00085004"
! - J1 = START_IDATE
! - Gosub L_7000 \ X2 = 0
! - If J1 = 0
! -   Gosub STARTINVDATE
! -   Gosub ENDINVDATE
! -   Return 
! - End If 
! - BEG_INVDATE$ = X$
! - If J1 Let X2 = J1 \ Gosub L_7820 \ Goto GET_INVOICEDATES
! - START_IDATE = J1;END_IDATE = J1
! - N1[0] = X2;N1[1] = X2
! - END_INVDATE$ = BEG_INVDATE$
! - Print @4,4;'CL';" 1> Enter the Starting Invoice Date: ";BEG_INVDATE$
! - Print @4,5;'CL';" 2> Enter the Ending Invoice Date:   ";END_INVDATE$
! - Return 
! - STARTINVDATE: Rem " starting invoice date
! - Print @4,4;'CL';" 1> Enter the Starting Invoice Date: ";
! - J5$ = "Please Enter the Starting Invoice MMDDYY  "
! - J0$ = "5 00084104"
! - If START_IDATE = 0 Let START_IDATE = 700101
! - J1 = START_IDATE
! - Gosub L_7000 \ X2 = 0
! - BEG_INVDATE$ = X$
! - If J1 Let X2 = J1 \ Gosub L_7820 \ Goto STARTINVDATE
! - START_IDATE = J1;N1[0] = X2
! - Return 
! - ENDINVDATE: Rem " ending invoice date
! - Print @4,5;'CL';" 2> Enter the Ending Invoice Date: ";
! - J0$ = "5 00084105"
! - J5$ = "Please Enter the Ending date MMDDYY    "
! - If END_IDATE = 0 Let END_IDATE = 591231
! - J1 = END_IDATE
! - Gosub L_7000
! - END_INVDATE$ = X$
! - X2 = J1 \ Gosub L_7820 \ Goto ENDINVDATE
! - END_IDATE = J1;N1[1] = X2
! - If N1[1] < N1[0]
! -   Gosub BAD_RANGE_MSG
! -   Goto ENDINVDATE
! - End If 
! - Return 
! - STARTINGCATGY: Rem =======  starting category #
! - Print @4,7;'CL';" 3> Enter the Starting Category: ";
! - J5$ = "Enter the starting category number maximum 999 "
! - J0$ = "3 00033707" \ J1 = 0
! - Gosub L_7000 \ N1[2] = J1
! - Return 
! - ENDINGCATGY: Rem =========  ending category #
! - Print @4,8;'CL';" 4> Enter the Ending Category: ";
! - J5$ = "Enter the ending category number maximum 999 "
! - J0$ = "3 00033708" \ J1 = 999
! - Gosub L_7000 \ N1[3] = J1
! - If N1[3] < N1[2]
! -   Gosub BAD_RANGE_MSG
! -   Goto ENDINGCATGY
! - End If 
! - Return 
! - BAD_RANGE_MSG: J7$ = "ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! " \ Gosub L_7600 \ Return 
!
READ_INVL: Rem "=========   read invoice line record
Mat Read #CH_INVL,R[4],8;L3;
Mat Read #CH_INVL,R[4],16;L4;
Mat Read #CH_INVL,R[4],140;L1$;
Mat Read #CH_INVL,R[4],168;L7;
mat read #ch_invl,r[4],250;un;
Mat Read #CH_INVL,R[4],404;OLM;
mat read #ch_invl,r[4],452;unf;
Return 
!
Convert_L7:   ! bring up to default selling um on the prod
for xyz=2 to 4
   if xyz=3 goto do_next_xyz:  ! L7[2] and L7[4] ONLY.
   let unit$=" ",unit$
   if pfu1[9]<0
      if pfu1[9]=-1 let unit$="CWT"
	  if pfu1[9]=-2 let unit$="LOT"
	  if pfu1[9]=-3 let unit$="LB "
      goto done_getunit:
   endif
   mat read #12,pfu1[9],0;ccd$;
   let unit$=ccd$[11,14]
   done_getunit:!!
   let cnvta=l7[xyz]
   let cnvtu[0]=0;cnvtu[1]=pfu1[9];cnvtu[2]=1
   CALL "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],cnvta,SC,SR,FLAG
   let NEWl7[xyz]=cnvta
   do_next_xyz: ! 
next xyz
Return
!
READ_INVH: Rem "==========   read invoice header record
K3$ = " ",K3$
INVOICENO = K9$[33,42]
K3$[1,2] = K9$[43,44]
K3$[3,8] = INVOICENO Using "##########"
Search #CH_INVH,2,1;K3$,R[3],E
If E Return 
FOUNDINVNO = K3$[3,12]
If FOUNDINVNO <> INVOICENO Return 
Mat Read #CH_INVH,R[3],0;H0;
Mat Read #CH_INVH,R[3],80;H4;
Mat Read #CH_INVH,R[3],512;OREF;
Return 
!
READ_PRODUCT: Rem "=================  read product record
Mat Read #CH_PROD,L4[0],0;PROD_A$;
mat read #ch_prod,l4[0],256;A;
mat read #ch_prod,l4[0],512;pfu1;
mat read #ch_prod,l4[0],554;pfu2;
Return 
!
READ_CUST: Rem " ========== read customer record
K7$ = " ",K7$
K7$[1,6] = K9$[27,32]
Search #CH_CUST,2,1;K7$,R[7],E
If E Let CUSTNAME$ = "CUSTOMER NAME NOT FOUND"
Mat Read #CH_CUST,R[7],30;CUSTNAME$;
Return 
!
READ_VENDOR: Rem " ========== read vendor info
VEND_A$ = " ",VEND_A$
VEND_A5$ = " ",VEND_A5$
K10$ = " ",K10$
K10$[1,6] = K9$[9,14]
Search #CH_VENDOR,2,1;K10$,R[10],E
If E Return 
Mat Read #CH_VENDOR,R[10],0;VEND_A$;
Mat Read #CH_VENDOR,R[10],576;VEND_A5$;
Return 
!
GET_CONFIRMED_DATE: Rem " ==== get next confirmed date of po for item
HOLDCONFIRM = 0
K5$ = " ",K5$
K5$[1,6] = L4[0] Using "######"
GET_NEXT_POLINE: Rem
Search #CH_POLINE,3,2;K5$,R[5],E
If E Return 
PRODREC = K5$[1,6]
If PRODREC <> L4[0] Goto END_GET_CONFIRMED_DATE
Mat Read #CH_POLINE,R[5],0;L1;
If L1[0] > 2 Goto GET_NEXT_POLINE
Mat Read #CH_POLINE,R[5],12;L2;
If Not(L2[2]) Goto GET_NEXT_POLINE
X2 = L2[2] \ Gosub L_7820 \ Goto GET_NEXT_POLINE
DUEDATE_JULIAN = X2
If HOLDCONFIRM <> 0
  If DUEDATE_JULIAN < CURDATE_JULIAN Goto GET_NEXT_POLINE
  If DUEDATE_JULIAN > HOLDCONFIRM Goto GET_NEXT_POLINE
End If 
HOLDCONFIRM = DUEDATE_JULIAN
Goto GET_NEXT_POLINE
END_GET_CONFIRMED_DATE: Rem
Return 
!
SORT_RECORDS: Rem ================================================================
! - Print @0,23;"Sorting, please wait . . .";
K2$ = " ",K2$
K2$[1,6] = N1[0] Using "######"
GET_NEXT_INVHKEY: Rem
Search #CH_INVHKEY,3,2;K2$,R[2],E
If E Return 
TYPE = K2$[7,8]
HOLDINVDATE = K2$[1,6]
If HOLDINVDATE < N1[0] Goto GET_NEXT_INVHKEY
If HOLDINVDATE > N1[1] Goto END_SORT_RECORDS
Mat Read #CH_INVH,R[2],0;H0;
Mat Read #CH_INVH,R[2],80;H4;
MAT  READ #CH_INVH,R[2],104;H5;
Mat Read #CH_INVH,R[2],512;OREF;
 IF H5[7]<LEN(SLFLG$)                                      
   IF SLFLG$[H5[7],H5[7]]<>"Y" GOTO GET_NEXT_INVHKEY:      
 ENDIF                                                     
                                                           
!
K7$ = " ",K7$
K7$[1,6] = H0[4] Using "######"
Search #CH_CUST,2,1;K7$,R[7],E
If E Goto GET_NEXT_INVHKEY
Mat Read #CH_CUST,R[7],142;C1;
If C1[9] < N1[2] Goto GET_NEXT_INVHKEY
If C1[9] > N1[3] Goto GET_NEXT_INVHKEY
!
END_CATGY_CHK: Rem
K4$ = " ",K4$
K4$[1,10] = K2$[9,18] ! was [9,14]
GET_NEXT_INVLKEY: Rem
Search #CH_INVL,3,1;K4$,R[4],E
If E Goto GET_NEXT_INVHKEY
If K4$[1,10] <> K2$[9,18] Goto GET_NEXT_INVHKEY
Mat Read #CH_INVL,R[4],8;L3;
If L3[0] = 1 Goto GET_NEXT_INVLKEY
Mat Read #CH_INVL,R[4],16;L4;
Mat Read #CH_INVL,R[4],140;L1$;
Mat Read #CH_INVL,R[4],168;L7;
mat read #ch_invl,r[4],260;s3;
!!if l7[2]=l7[4] goto get_next_invlkey:		! " qty ord = qty ship (KEEP now)
!
K6$ = " ",K6$
K6$[1,12] = L1$[1,12]
K6$[13,14] = L4[3] Using "##"
Search #CH_PRODWHSE,2,1;K6$,R[6],E
If E Goto GET_NEXT_INVLKEY
Mat Read #CH_PRODWHSE,R[6],32;W1;
Mat Read #CH_PRODWHSE,R[6],38;W2;
!
sort_type_loop: K9$ = " ",K9$
K9$[1,6] = "000000" ! buyer always zero
K9$[7,8] = L4[3] Using "##"
K9$[9,14] = s3[14] Using "######" ! was w2[3]
K9$[15,26] = L1$[1,12]
K9$[27,32] = H0[4] Using "######"
K9$[33,42] = OREF[1] Using "##########"
K9$[43,44] = TYPE Using "##"
K9$[45,47] = L3[2] Using "###"
search #9,2,1;k9$,r[4],e
if e>2 ! gosub err_search:
	Let e$ = "syserrorfile 788b sortfile mode (m)=2 keyno (k)=1 r=",R[4]," e=",e," keyval (k$)=",K9$ \error 10000
Endif
if not(e)
	type=type+1
	if type >99 Goto GET_NEXT_INVHKEY ! gosub err_search:
	goto sort_type_loop:
endif
Search #9,4,1;K9$,R[4],E
If E Let e$ = "syserrorfile 788b sortfile mode (m)=4 keyno (k)=1 r=",R[4]," e=",e," keyval (k$)=",K9$ \error 10000
Goto GET_NEXT_INVHKEY
!
END_SORT_RECORDS: Rem
Return 
!
ACCUM_ITEM_TOTALS: Rem
ITEM_QTYORDTOT = ITEM_QTYORDTOT + newL7[2]
ITEM_QTYORDAMT = ITEM_QTYORDAMT + (L7[2] * OLM[3])
ITEM_QTYSHIPTOT = ITEM_QTYSHIPTOT + newL7[4]
ITEM_QTYSHIPAMT = ITEM_QTYSHIPAMT + (L7[4] * OLM[3])
Return 
!
ACCUM_BUYER_TOTALS: Rem
BUYER[CURR_BUYER,0] = BUYER[CURR_BUYER,0] + ITEM_QTYORDTOT
BUYER[CURR_BUYER,1] = BUYER[CURR_BUYER,1] + ITEM_QTYORDAMT
BUYER[CURR_BUYER,2] = BUYER[CURR_BUYER,2] + ITEM_QTYSHIPTOT
BUYER[CURR_BUYER,3] = BUYER[CURR_BUYER,3] + ITEM_QTYSHIPAMT
Return 
!
ACCUM_WHSE_TOTALS: Rem
WHSE[CURR_WHSE,0] = WHSE[CURR_WHSE,0] + ITEM_QTYORDTOT
WHSE[CURR_WHSE,1] = WHSE[CURR_WHSE,1] + ITEM_QTYORDAMT
WHSE[CURR_WHSE,2] = WHSE[CURR_WHSE,2] + ITEM_QTYSHIPTOT
WHSE[CURR_WHSE,3] = WHSE[CURR_WHSE,3] + ITEM_QTYSHIPAMT
WHSE[0,0] = WHSE[0,0] + ITEM_QTYORDTOT
WHSE[0,1] = WHSE[0,1] + ITEM_QTYORDAMT
WHSE[0,2] = WHSE[0,2] + ITEM_QTYSHIPTOT
WHSE[0,3] = WHSE[0,3] + ITEM_QTYSHIPAMT
Return 
!
PRINT_HEADING: Rem
if J8 return ! dx xml
!
If V9[1] < V9[4] Return 
! - If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "U5$ \ Print 'CS';
If V9[0] Print #0;"\14\";
V9[0] = V9[0] + 1
V9[1] = 0
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";V9[0]
V9[1] = V9[1] + 1
Print #0; Tab 1;" - mx788b - ";Msc$(3);
Print #0; Tab 49;"SERVICE LEVELS REPORT - ";
Print #0;"COMPANY VERSION"
V9[1] = V9[1] + 1
If START_IDATE <> END_IDATE
  Print #0; Tab 4;"Invoice Date Range: ";BEG_INVDATE$;" to ";END_INVDATE$
Else 
  Print #0; Tab 4;"Invoice Date: ";BEG_INVDATE$
End If 
If N1[2] = N1[3]
  Print #0; Tab 2;"Category: ";N1[2]
Else 
  Print #0; Tab 2;"Categories: ";N1[2];" to ";N1[3]
End If 
V9[1] = V9[1] + 1
Return 
!
PRINT_BUYER_HEADING: Rem
Mat Read #CH_BUYER,CURR_BUYER,0;BUYER$;
if J8 return ! dx xml
!
Print #0;""
Print #0; Using "######"; Tab 2;"BUYER: ";CURR_BUYER;"  ";BUYER$
V9[1] = V9[1] + 2
let buyer_prntd=0
Return 
!
PRINT_WHSE_HEADING: Rem
if J8 return ! dx xml
!
Print #0; Tab 2;"Warehouse #: ";K9$[7,8]
Print #0;""
V9[1] = V9[1] + 2
let whse_prntd=0
Return 
!
PRINT_VENDOR_HEADING: Rem
if J8 return ! dx xml
!
If V9[1] + 3 > V9[4] Gosub PRINT_HEADING
Print #0;""
Print #0; Tab 1;"VENDOR";
Print #0; Tab 10;"VENDOR NAME";
Print #0; Tab 43;"CONTACT";
Print #0; Tab 68;"PHONE#"
Print #0; Tab 1;K9$[9,14];
Print #0; Tab 10;VEND_A$[1,30];
Print #0; Tab 43;VEND_A$[129,148];
Print #0; Tab 68;VEND_A5$[1,30]
Print #0;""
V9[1] = V9[1] + 4
let vdr_prntd=0
Return 
!
PRINT_ITEM_HEADING: Rem "
if J8 return ! dx xml
!
If V9[1] > V9[4]
  Gosub PRINT_HEADING
  Gosub PRINT_WHSE_HEADING
  gosub READ_VENDOR
  Gosub PRINT_VENDOR_HEADING
End If 
Print #0; Tab 126;"NEXT"
Print #0; Tab 124;"CONFIRMED"
Print #0; Tab 1;"CUSTOMER";
Print #0; Tab 10;"CUSTOMER NAME";
Print #0; Tab 43;"ITEM NUMBER";
Print #0; Tab 57;"DESCRIPTION";
Print #0; Tab 90;"QTY ORDERED";
Print #0; Tab 106;"QTY SHIPPED";
print #0; tab 119;"U/M";
Print #0; Tab 125;"PO DATE"
V9[1] = V9[1] + 3
Return 
!
PRINT_ITEM_DETAIL: Rem
gosub READ_INVH
gosub READ_PRODUCT

If HOLDCONFIRM = 0
  CONFIRM$ = "  NONE  "
Else 
  X2 = HOLDCONFIRM \ Gosub L_7770
  CONFIRM$ = X$
End If 
!
if J8 
  tmp$=K9$[9,14],fdel$,rtrim$(VEND_A$[1,30]),fdel$
  tmp$=tmp$,rtrim$(VEND_A$[129,148]),fdel$,rtrim$(VEND_A5$[1,30]),fdel$
  tmp$=tmp$,K9$[27,32],fdel$,rtrim$(CUSTNAME$),fdel$
  tmp$=tmp$,CURR_ITEM$[1,12],fdel$
  tmp$=tmp$,rtrim$(PROD_A$[9,38]),fdel$
  tmp$=tmp$,L7[2] Using PMASK$,fdel$
  tmp$=tmp$,L7[4] Using PMASK$,fdel$
  tmp$=tmp$,CONFIRM$,fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  goto PrintItemDetailExit
end if
!
If V9[1] > V9[4]
  Gosub PRINT_HEADING
  gosub READ_VENDOR
  Gosub PRINT_VENDOR_HEADING
  Gosub PRINT_ITEM_HEADING
End If 
LET ITEM_COUNT=ITEM_COUNT+1
Print #0; Tab 1;K9$[27,32];
! - Print #0; Using "######"; Tab 1;H0[4];
Print #0; Tab 10;CUSTNAME$;
Print #0; Tab 43;CURR_ITEM$[1,12];
Print #0; Tab 57;PROD_A$[9,38];
if fra(newl7[2])
   print #0; using pmask2$;tab 89;NEWl7[2];      ! " qty ordered
else
   print #0; using pmask$;tab 89;NEWl7[2];		! " qty ordered
endif
if fra(newl7[4])
   print #0; using pmask2$;tab 105;NEWl7[4];        ! " qty shipped
else
   print #0; using pmask$;tab 105;NEWl7[4];		! " qty shipped
endif
print #0; "  ";unit$;" ";                    ! " DEFAULT PROD SELLING UM
Print #0; Tab 124;CONFIRM$;
Print #0;""
V9[1] = V9[1] + 1
!
PrintItemDetailExit:
!Gosub ACCUM_ITEM_TOTALS
let vdr_prntd=1;buyer_prntd=1;whse_prntd=1;item_prntd=1
Return 
!
PRINT_ITEM_TOTAL: Rem
if J8 goto PrintItemTotalExit ! dx xml
if item_count=1 let v9[1]=v9[1]+1\print #0;" "
if not(item_prntd) or item_count=1 goto PrintItemTotalExit:
if not(item_qtyordtot) and not(item_qtyshiptot) return
!
If V9[1] + 2 > V9[4] ! "make sure all info fits on same page
  Gosub PRINT_HEADING
  Gosub PRINT_ITEM_HEADING
End If 
Print #0; Tab 1;DASH$[1,130]
V9[1] = V9[1] + 1
Print #0; Tab 22;"SUBTOTAL FOR ITEM: ";
Print #0; Tab 43;CURR_ITEM$[1,12];
!
print #0; tab 75;"TTL ORD:";
!
if fra(item_qtyordtot) and item_qtyordtot<1000000000
   print #0; using pmask2$;tab 89;item_qtyordtot;
else
   print #0; using pmask$;tab 89;item_qtyordtot;
endif
if fra(item_qtyshiptot) and item_qtyshiptot<1000000000
   Print #0; using pmask2$;tab 105;item_qtyshiptot; 
else
   Print #0; using pmask$;tab 105;item_qtyshiptot;
endif
print #0; tab 119; unit$;
Print #0;""
Print #0;""
V9[1] = V9[1] + 3
!
PrintItemTotalExit:
Gosub ACCUM_WHSE_TOTALS
ITEM_QTYORDTOT = 0
ITEM_QTYORDAMT = 0
ITEM_QTYSHIPTOT = 0
ITEM_QTYSHIPAMT = 0
let item_prntd=0
let item_count=0
Return 
!
PRINT_BUYER_TOTAL: Rem
if J8 goto PrintBuyerTotalExit ! dx xml
!
If V9[1] + 6 > V9[4]
  Gosub PRINT_HEADING
End If 
Print #0;""
Print #0; Tab 1;"BUYER'S TOTALS FOR:";
print #0; tab 35;" REPORT UNITS";
PRINT #0; TAB 53;" REPORT $$$$";
Print #0; Tab 73;"MTD UNITS";
Print #0; Tab 90;"MTD $$$$";
Print #0; Tab 104;"YTD UNITS";
Print #0; Tab 121;"YTD $$$$"
Print #0; Using "###"; Tab 4;CURR_BUYER;" ";BUYER$
Print #0; Tab 15;"PRODUCT ORDER";
Print #0; Using PMASK$; Tab 36;BUYER[CURR_BUYER,0];
Print #0; Using PMASK$; Tab 53;BUYER[CURR_BUYER,1]
Print #0; Tab 15;"PRODUCT SHIP";
Print #0; Using PMASK$; Tab 36;BUYER[CURR_BUYER,2];
Print #0; Using PMASK$; Tab 53;BUYER[CURR_BUYER,3]
Print #0; Tab 15;"SERVICE LEVEL";
if BUYER[CURR_BUYER,0] let tmp3=FNR(((BUYER[CURR_BUYER,2]) / (BUYER[CURR_BUYER,0])) * 100) else tmp3=0
Print #0; Using "###.##%"; Tab 41;tmp3;
if BUYER[CURR_BUYER,1] let tmp3=FNR(((BUYER[CURR_BUYER,3]) / (BUYER[CURR_BUYER,1])) * 100) else tmp3=0
Print #0; Using "###.##%"; Tab 58;tmp3
V9[1] = V9[1] + 6
NEED_PAGE_BREAK = 1
!
PrintBuyerTotalExit:
BUYER[1000,0] = BUYER[1000,0] + BUYER[CURR_BUYER,0]
BUYER[1000,1] = BUYER[1000,1] + BUYER[CURR_BUYER,1]
BUYER[1000,2] = BUYER[1000,2] + BUYER[CURR_BUYER,2]
BUYER[1000,3] = BUYER[1000,3] + BUYER[CURR_BUYER,3]
Return 
!
PRINT_WHSE_TOTAL: Rem
if J8 return ! dx xml
!
If V9[1] + 6 > V9[4] Gosub PRINT_HEADING
Print #0;""
Print #0; Using "###"; Tab 1;"WAREHOUSE TOTALS FOR: ";CURR_WHSE;
Print #0; Tab 35;"TODAY'S UNITS";
Print #0; Tab 53;"TODAY'S $$$$";
Print #0; Tab 73;"MTD UNITS";
Print #0; Tab 90;"MTD $$$$";
Print #0; Tab 104;"YTD UNITS";
Print #0; Tab 121;"YTD $$$$"
Print #0;""
Print #0; Tab 15;"PRODUCT ORDER";
Print #0; Using PMASK$; Tab 36;WHSE[CURR_WHSE,0];
Print #0; Using PMASK$; Tab 53;WHSE[CURR_WHSE,1]
Print #0; Tab 15;"PRODUCT SHIP";
Print #0; Using PMASK$; Tab 36;WHSE[CURR_WHSE,2];
Print #0; Using PMASK$; Tab 53;WHSE[CURR_WHSE,3]
Print #0; Tab 15;"SERVICE LEVEL";
tmp3=0 \ if WHSE[CURR_WHSE,0] let tmp3=FNR(((WHSE[CURR_WHSE,2]) / (WHSE[CURR_WHSE,0])) * 100)
Print #0; Using "###.##%"; Tab 41;tmp3;
tmp3=0 \ if WHSE[CURR_WHSE,1] let tmp3=FNR(((WHSE[CURR_WHSE,3]) / (WHSE[CURR_WHSE,1])) * 100)
Print #0; Using "###.##%"; Tab 58;tmp3
V9[1] = V9[1] + 6
NEED_PAGE_BREAK = 1
Return 
!
PRINT_BUYER_GRANDTOTAL: Rem
if J8 return ! dx xml
!
For X = 0 To 999
  If BUYER[X,0] = 0 Goto GET_NEXT_BUYER
  Mat Read #CH_BUYER,X,0;BUYER$;
  Print #0;""
  V9[1] = V9[1] + 1
  Print #0; Using "###";"BUYER'S TOTALS FOR: ";X;" ";BUYER$[1,30]
  Print #0; Tab 35;"TODAY'S UNITS";
  Print #0; Tab 53;"TODAY'S $$$$";
  Print #0; Tab 73;"MTD UNITS";
  Print #0; Tab 90;"MTD $$$$";
  Print #0; Tab 104;"YTD UNITS";
  Print #0; Tab 121;"YTD $$$$"
  Print #0;""
  Print #0; Tab 15;"PRODUCT ORDER";
  Print #0; Using PMASK$; Tab 36;BUYER[X,0];
  Print #0; Using PMASK$; Tab 53;BUYER[X,1]
  Print #0; Tab 15;"PRODUCT SHIP";
  Print #0; Using PMASK$; Tab 36;BUYER[X,2];
  Print #0; Using PMASK$; Tab 53;BUYER[X,3]
  Print #0; Tab 15;"SERVICE LEVEL";
  tmp3=0 \ if BUYER[X,0] let tmp3=FNR(((BUYER[X,2]) / (BUYER[X,0])) * 100)
  Print #0; Using "###.##%"; Tab 41;tmp3;
  tmp3=0 \ if BUYER[X,1] let tmp3=FNR(((BUYER[X,3]) / (BUYER[X,1])) * 100)
  Print #0; Using "###.##%"; Tab 58;tmp3
  Print #0;""
  Print #0;""
  V9[1] = V9[1] + 8
GET_NEXT_BUYER: Rem
Next X
Print #0; Tab 0;"GRANDTOTALS FOR ALL BUYERS"
Print #0; Tab 35;"TODAY'S UNITS";
Print #0; Tab 53;"TODAY'S $$$$";
Print #0; Tab 73;"MTD UNITS";
Print #0; Tab 90;"MTD $$$$";
Print #0; Tab 104;"YTD UNITS";
Print #0; Tab 121;"YTD $$$$"
Print #0;""
Print #0; Tab 15;"PRODUCT ORDER";
Print #0; Using PMASK$; Tab 36;BUYER[1000,0];
Print #0; Using PMASK$; Tab 53;BUYER[1000,1]
Print #0; Tab 15;"PRODUCT SHIP";
Print #0; Using PMASK$; Tab 36;BUYER[1000,2];
Print #0; Using PMASK$; Tab 53;BUYER[1000,3]
Print #0; Tab 15;"SERVICE LEVEL";
tmp3=0 \ if BUYER[1000,0] let tmp3=FNR(((BUYER[1000,2]) / (BUYER[1000,0])) * 100)
Print #0; Using "###.##%"; Tab 41;tmp3;
tmp3=0 \ if BUYER[1000,1] let tmp3=FNR(((BUYER[1000,3]) / (BUYER[1000,1])) * 100)
Print #0; Using "###.##%"; Tab 58;tmp3
V9[1] = V9[1] + 6
For X = 0 To 1000
  For Y = 0 To 3
    BUYER[X,Y] = 0
  Next Y
Next X
Return 
!
PRINT_WHSE_GRANDTOTAL: Rem
if J8 return ! dx xml
!
If V9[1] + 6 > V9[4] Gosub PRINT_HEADING
For W = 1 To 99
  If WHSE[W,0] = 0 Goto GET_NEXT_WHSEREC
  Print #0;""
  Print #0; Using "##";"TOTALS FOR WAREHOUSE: ";W;
  Print #0; Tab 35;"TODAY'S UNITS";
  Print #0; Tab 53;"TODAY'S $$$$";
  Print #0; Tab 73;"MTD UNITS";
  Print #0; Tab 90;"MTD $$$$";
  Print #0; Tab 104;"YTD UNITS";
  Print #0; Tab 121;"YTD $$$$"
  Print #0;""
  Print #0; Tab 15;"PRODUCT ORDER";
  Print #0; Using PMASK$; Tab 36;WHSE[W,0];
  Print #0; Using PMASK$; Tab 53;WHSE[W,1]
  Print #0; Tab 15;"PRODUCT SHIP";
  Print #0; Using PMASK$; Tab 36;WHSE[W,2];
  Print #0; Using PMASK$; Tab 53;WHSE[W,3]
  Print #0; Tab 15;"SERVICE LEVEL";
  tmp3=0 \ if WHSE[W,0] let tmp3=FNR(((WHSE[W,2]) / (WHSE[W,0])) * 100)
  Print #0; Using "###.##%"; Tab 41;tmp3;
  tmp3=0 \ if WHSE[W,1] let tmp3=FNR(((WHSE[W,3]) / (WHSE[W,1])) * 100)
  Print #0; Using "###.##%"; Tab 58;tmp3
  V9[1] = V9[1] + 6
GET_NEXT_WHSEREC: Rem
Next W
Print #0;""
Print #0;"GRANDTOTALS FOR ALL WAREHOUSES: "
Print #0; Tab 35;"TODAY'S UNITS";
Print #0; Tab 53;"TODAY'S $$$$";
Print #0; Tab 73;"MTD UNITS";
Print #0; Tab 90;"MTD $$$$";
Print #0; Tab 104;"YTD UNITS";
Print #0; Tab 121;"YTD $$$$"
Print #0;""
Print #0; Tab 15;"PRODUCT ORDER";
Print #0; Using PMASK$; Tab 36;WHSE[0,0];
Print #0; Using PMASK$; Tab 53;WHSE[0,1]
Print #0; Tab 15;"PRODUCT SHIP";
Print #0; Using PMASK$; Tab 36;WHSE[0,2];
Print #0; Using PMASK$; Tab 53;WHSE[0,3]
Print #0; Tab 15;"SERVICE LEVEL";
tmp3=0 \ if WHSE[0,0] let tmp3=FNR(((WHSE[0,2]) / (WHSE[0,0])) * 100)
Print #0; Using "###.##%"; Tab 41;tmp3;
tmp3=0 \ if WHSE[0,1] let tmp3=FNR(((WHSE[0,3]) / (WHSE[0,1])) * 100)
Print #0; Using "###.##%"; Tab 58;tmp3
V9[1] = V9[1] + 7
Return 
!
PRINT_COMPANY_GRANDTOTAL: Rem--- this rtn is the same as all whses
if J8 return ! dx xml
!
V9[1] = 99
Gosub PRINT_HEADING
Print #0; Using "##";"GRANDTOTALS FOR COMPANY: ";COID;
Print #0; Tab 35;"TODAY'S UNITS";
Print #0; Tab 53;"TODAY'S $$$$";
Print #0; Tab 73;"MTD UNITS";
Print #0; Tab 90;"MTD $$$$";
Print #0; Tab 104;"YTD UNITS";
Print #0; Tab 121;"YTD $$$$"
Print #0;""
Print #0; Tab 15;"PRODUCT ORDER";
Print #0; Using PMASK$; Tab 36;WHSE[0,0];
Print #0; Using PMASK$; Tab 53;WHSE[0,1]
Print #0; Tab 15;"PRODUCT SHIP";
Print #0; Using PMASK$; Tab 36;WHSE[0,2];
Print #0; Using PMASK$; Tab 53;WHSE[0,3]
Print #0; Tab 15;"SERVICE LEVEL";
tmp3=0 \ if WHSE[0,0] let tmp3=FNR(((WHSE[0,2]) / (WHSE[0,0])) * 100)
Print #0; Using "###.##%"; Tab 41;tmp3;
tmp3=0 \ if WHSE[0,1] let tmp3=FNR(((WHSE[0,3]) / (WHSE[0,1])) * 100)
Print #0; Using "###.##%"; Tab 58;tmp3
V9[1] = V9[1] + 6
For X = 0 To 99
  For Y = 0 To 3
    WHSE[X,Y] = 0
  Next Y
Next X
Return 
!
! - L_7000: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 <> 3 If J0 <> 4 Goto L_7070
! - If J0 = 3 Let J2$ = "#",J2$
! - If J0 = 4 Let J2$ = "-",J2$
! - J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - L_7070: J1$[J3 + 1] = ""
! - If J0 < 3 Goto L_7105
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 = 6 Goto L_7105
! - If J0 <> 5 Goto L_7100
! - J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
! - J1$ = J9$[4,7],J9$[2,3],"  " \ Goto L_7105
! - L_7100: J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! - If Len(J5$) > Msc(33) - 2 Let J5$[Msc(33) - 2] = ""
! - L_7105: If J5 < Msc(34) - 1 Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - Print @J4,J5;'BU';J1$[1,J3]; Tab (J4 + J3);'EU';" "; \ If J0 = 5 Print "  ";
! - Print @J4,J5;'BU'; \ Input Len 16384 + J3;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) <= J3 Goto L_7130
! - J7$ = "TOO LONG !" \ Gosub L_7600 \ Goto L_7105
! - L_7130: J9$ = J4$ \ If Len(J9$) Goto L_7145
! - If J0$[3,4] = "00" Let J9$ = J1$ \ Goto L_7145
! - J7$ = "FIELD MUST BE ENTERED !" \ Gosub L_7600 \ Goto L_7105
! - L_7145: For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] >= " " If J9$[J8,J8] <= "~" Next J8 \ Goto L_7160
! - J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!" \ Gosub L_7600 \ Goto L_7105
! - L_7160: On J0 Goto L_7165,L_7165,L_7185,L_7185,L_7185,L_7330 \ Stop 
! - L_7165: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto L_7345
! - L_7185: J9 = 0;J9[1] = 0 \ For J8 = 1 To Len(J9$)
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "-" Goto L_7235
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "+" Goto L_7235
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto L_7230
! -   If J9$[J8,J8] = " " Goto L_7235
! -   If J8 <> 1 Or Len(J0$) < 11 Goto L_7210
! -   J7$ = "" \ Let J7$ = J0$[10] To J9$[J8,J8] : J7 \ If J7 Goto L_7235
! - L_7210: If J9$[J8,J8] <> "." Goto L_7250
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto L_7260
! -   If J9 Goto L_7250
! -   J9 = 1
! - L_7230: If J9 Let J9 = J9 + 1
! -   If Not(J9) Let J9[1] = J9[1] + 1
! - L_7235: Next J8
! - If J0 = 5 Goto L_7265
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto L_7260
! - L_7242: If J6 If J9[1] > (J3 - J6 - 1) Let J7$ = "TOO MANY INTEGERS FOR FIELD !" \ Goto L_7260
! - If J0 = 4 If J6 If J9[1] > (J3 - J6 - 2) Let J9[1] = 99 \ Goto L_7242
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto L_7345
! - L_7250: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - L_7260: Gosub L_7600 \ Goto L_7105
! - L_7265: If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto L_7325
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto L_7315
! - If J9[1] < 1 Goto L_7325
! - On J9 Goto L_7290,L_7300,L_7290,L_7285,L_7290,L_7285
! - On J9 - 6 Goto L_7290,L_7290,L_7285,L_7290,L_7285,L_7290
! - Goto L_7325
! - L_7285: If J9[1] > 30 Goto L_7325
! - L_7290: If J9[1] > 31 Goto L_7325
! - Goto L_7315
! - L_7300: If J9[1] > 29 Goto L_7325
! - If Not(Fra(J9[2] / 4)) Goto L_7315
! - If J9[1] > 28 Goto L_7325
! - L_7315: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub L_7700
! - J$ = X$ \ J3 = 8 \ Goto L_7345
! - L_7325: J7$ = "INVALID DATE !" \ Gosub L_7600 \ Goto L_7105
! - L_7330: If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto L_7345
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto L_7345
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !" \ Gosub L_7600 \ Goto L_7105
! - L_7345: J$[J3 + 1] = "" \ Print @J4,J5;J$;" "; \ Return 
! - L_7600: If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
! - Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
! - Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
! - Print @0,Msc(34) - 1;'CL'; \ Return 
! - L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
! - X$ = " ",X$ \ X$[10] = ""
! - X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
! - X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
! - X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
! - X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
! - If Not(X2) Let X$ = "        "
! - Return 
!
L_7770: Rem DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
!
! - X$ = X2 Using "&&&&"
! - DT3[0] = X$[1,2];DT3[1] = X$[3,4]
! - If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
! - If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
! - X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
! - X2 = X$[1,6] \ Return 
!
OUTEND: Rem   EXIT PROGRAM
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
Try Call dxclose() ELSE REM
End 
!
! - Print 'CS'
! - Chain "MX000C"
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
