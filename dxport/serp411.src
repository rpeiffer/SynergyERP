! --- serp411
! description month end update of ot 36/37
!
! loadsave -w -n 100,10 -o prog/dxport/serp411.dl4 src/serp411.src
!
! 1.0 mm/dd/yyyy change??
!
!include copyright, common libs, common intrinsics
! 
include "src/copyright.inc"
Rem MX411 - EVAP EOM Reconciliation Program
Rem AUTHOR: cct 150508 - 10/01/01
Rem Athens Specs
! LAST UPDATE: June 2003 - Include Credits but only credits
!   Copied from Invoices in the same month. (H3[1]=16)
Rem BEDIT Version: 2.3 OBJECT CODE     Created: OCT 16, 2011  12:24:48
Rem /w2/papermaster/r2005//usr/acct/valerie/work/custom/athens.r10v2/mx411.src (univ2) [valerie] {25492}
Rem  Copyright (c) 2011 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! ----------------------  NOTE -----------------------
! if customer uses EVAP (order type 36/37) they will have EVAPMth set to non-zero
! if not using EVAP - LEAVE EVAPMTH AT ZERO !
! -----------------------------------------------------
!
! could be a long update - so start it as a print
! external libs for subs/functions
External Lib "dxblockcustom.lib"
Declare External Sub blockPrintersDropList
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports,openprinter
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile,buildsort
Declare sub VerifyEvap
Declare Intrinsic Sub FindF,InpBuf,String,Time,programdump
!Option Default Dialect IRIS1
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
If Err 0 Gosub ERR_TRAP
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,H3[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,QPB
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Dim ANS$[10],FLE$[30],K1$[60],CONM$[30],ARDATE$[8]
Dim K2$[60],K9$[60],X$[30],A$[156],A1$[142],K3$[60]
Dim QMASK$[12],PMASK$[20],EMASK$[20],P9$[50],P60$[50],P61$[256]
Dim 1%,MNTHE,ARMONTH,EVAPMTH,COID,X1[9],X,EVPFFOUND,TMP,J1,J2,SCRN,J9
Dim 1%,BADDATA,FINEOM,PFU1[20],CNVTU[2],SC,SR,FLAG
Dim 2%,J8,B[24],Q0[1],H6[8]
Dim 2%,H0[12],H5[16],X2[9],BILLTO,HLDBT,J,E,ARYEAR,TYPE
Dim 3%,R[99],X3[9],T2[25],NUMREC,A1[7],GPP,DPRICE,DCOST
Dim 3%,PFU2[6],A[33],CNVTA,AMOUNT,CFIN[8],OT36ONLY
Dim 3%,OREF[5],R[30],REC_ROL,BH0[12],hldref
Dim 4%,BILLD,COSTD,T9[20],ORGBILLD,ORGCOSTD
Dim tmp1$[300],tmp2$[300],tmp$[900],Message$[500],Webstr$[800]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim List$[2000,2000],action1$[30],G$[256],errmsg$[1000]
dim ReportDir$[75],Basename1$[75],StatusFile$[150],1%,statchan,3%
Def FNT(X) = Sgn(X) * (Int(Abs(X) * 1000 + .5) / 1000)
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
!call dxopen() ! may not need this! NEEDS FOR DXTEST/RESTART RUN!!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$)
COID = Intco ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
CLOSE  ! getsession is READONLY - close ALL
fle$="files/cntrl/cntrl"+Str$(coid)
Open #1,fle$ ! open as RW
Rec_uac=GetUIDRec(e$,IntCo,Userid$)
For X = 2 To 13
  Read J \ If J = -1 Goto NXTFLE
  Read #1,88,J;FLE$[1,16];
  Open #X,FLE$
NXTFLE: Next X
Data "1136","1168","1184","1824","1808","-1","-1","-1","-1","1792","2288","1744"
FLE$ = "4/SORDFLEHHKEY" + Str$(COID)
Ropen #7,FLE$
FLE$ = "4/SORDFLEMH" + Str$(COID)
Open #8,FLE$
FLE$ = "6/EVAPTTL" + Str$(COID)
Call FindF(FLE$,EVPFFOUND)
If EVPFFOUND
  Ropen #10,FLE$
  K9$ = " ",K9$ ! space key holds the port running it?
  Search #10,2,1;K9$,R[10],E \ If E Goto CHKDONE
  Read #10,R[10],0;BILLTO;
  If BILLTO = Rec_Uac Let EVPFFOUND = 0 ! chg from port to uidrec
CHKDONE: Rem "
  Close #10
End If 
Read #1,0,120;ARMONTH;
Read #1,0,132;EVAPMTH;
Mat Read #1,0,100;ARDATE$;
Mat Read #1,3,0;CONM$;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,115,40;Q0;
If Q0[1] < 1 Let Q0[1] = 2
If Q0[1] > 5 Let Q0[1] = 4
PMASK$ = "############"
X2 = Len(PMASK$) - Q0[1]
PMASK$[X2,X2] = "."
EMASK$ = "---------#.##"
QMASK$ = "-------#.##"
BILLTO = 0;S0=EVAPMTH
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
!If EVAPMTH < 0 Gosub INPROCESS \ Goto OUTEND ! set to -month not found (neg=inprocess?)
! call dxsave(0,"tmp/411in.txt!")
! If ARMONTH = EVAPMTH Goto ALREADRUN ! move to after
action1$=UCase$(RTrim$(Action1$))
select case action1$
case "STARTEVAP"
	COID=IntCo 
	let j8=99
	eflg=0
	returnstatus=1 ! no errors
	errmsg$=""
	G$ = "JANUARY  FEBRUARY MARCH    APRIL    MAY      JUNE     "
	G$[55] = "JULY     AUGUST   SEPTEMBEROCTOBER  NOVEMBER DECEMBER "
	if armonth<0 or armonth>12
		let eflg=eflg+1
		let errmsg$=errmsg$+"Invalid A/R Month. "
	endif
	if EVAPMTH<0 or EVAPMTH>12
		let eflg=eflg+1
		let errmsg$=errmsg$+"Invalid EVAP Month. "
	endif
	! message section
	! section 1 ------
	clear list$[]
	let list$[0]=bsdel$,"EVAPEOM",fdel$
	webstr$ = "ARMTH",fdel$,"MONTHCODE",fdel$,"MONTHNAME",fdel$
	list$[1]=webstr$
	Tmp$=Str$(armonth)
	webstr$=tmp$,fdel$
	webstr$=webstr$+str$(EVAPMTH),fdel$
	if evapmth
		S0=EVAPMTH
		webstr$=webstr$+rtrim$(G$[S0 * 9 - 8,S0 * 9]),fdel$
	Else ! first run?
		webstr$=webstr$+"NOT RUN PREVIOUSLY"
	endif
	list$[2]=webstr$
	call AddToStr(e$,rstr$,List$[]) 
	Call AddToStr(e$,rstr$,esdel$)	! end of section 
	clear list$[]
	list$[0]=bsdel$,"EVAPMessages",fdel$
	list$[1]="Message",fdel$
	list$[2]="** END OF MONTH "
	s0=armonth ! we're running for CURRENT MONTH
	list$[2]=list$[2]+G$[S0 * 9 - 8,S0 * 9]
	list$[2]=List$[2]+" **",fdel$
	List$[3]="EVAP EOM Program will do the following:",fdel$
	List$[4]="    1. Determine All Order Type 36 & 37 in History",fdel$
	List$[5]="    2. Total the Invoices found by Bill To",fdel$
	List$[6]="    3. Get the Gross Profit Dollars & Percent",fdel$
	List$[7]="    4. Recalculate the OT 37 Prices from the G/P",fdel$
	List$[8]="    5. Update any Sales figures not updated previously",fdel$
	List$[9]="    6. Finally update the EVAP Month in control file.",fdel$
	TMP = ARMONTH - 1 ! EVAP will always be 1 month behind (run EVAP, THEN 401)
	If TMP < 1 Let TMP = TMP + 12
	If EVAPMTH ! check it
		If EVAPMTH <> TMP ! Goto WHATISUP
			List$[10]="CAUTION: The EVAP Month ="+Str$(EVAPMTH)+" and A/R Month is "
			List$[10]=List$[10]+Str$(ARMONTH),fdel$
		Else
			list$[10]="",fdel$
		endif
	Else
		list$[10]="EVAP EOM NEVER RUN BEFORE.",fdel$
	Endif
	if EVAPMTH=ARMONTH ! already run message
		list$[11]="PROGRAM ALREADY RUN FOR MONTH OF "+Str$(EVAPMTH)
		list$[11]=list$[11],fdel$
	Else
		List$[11]="",fdel$
	Endif
	if EVAPMTH=ARMONTH ! part 2 of message
		list$[12]="If you run this it will run as an AUDIT ONLY",fdel$
	Else
		let list$[12]="",fdel$
	Endif
	list$[13]="",fdel$
	list$[14]="",fdel$
	list$[15]="",fdel$
	!list$[16]=esdel$
	call AddToStr(e$,rstr$,List$[])
	Call AddToStr(e$,rstr$,esdel$)	! end of section
	Call VerifyEVAP() ! just a check of issues
	clear list$[]
		list$[0]=bsdel$,"Printers",fdel$
		List$[1]="Name",fdel$,"Id",fdel$,"Default",fdel$
		call AddToStr(e$,rstr$,List$[])
		pdfoption=0 ! allow pdf - I say hardcopy only!
		xmloption=0 ! BROWSER NOT OK  (MULTIPLE PRINT FORMATS for diff status!)
		Call blockPrintersDropList(rstr$,xmloption,pdfoption)
		Call AddToStr(e$,rstr$,esdel$) ! end of section
	clear list$[]
	list$[0]=bsdel$,"REPORTTYPE",fdel$
	list$[1]="RPTTYPE",fdel$,"DESC",fdel$
	list$[2]="1",fdel$,"Audit Only",fdel$
	list$[3]="2",fdel$,"Final Run",fdel$
	list$[4]=esdel$
	call AddToStr(e$,rstr$,List$[])
	if eflg let returnstatus=0
	if returnstatus=1 let Message$="OK"
	! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	! done with it
	! Call dxsave(0,"tmp/md.txt!")
     call SetOutput(e$,rstr$) ! "STARTEOP"


	STARTHERE: Rem 
! Print 'CS';@0,0;"-MX411-";@25,0;"EVAP End-Of-Month Program";
! If EVPFFOUND Gosub INPROCESS \ Goto OUTEND

Case "PROCESSEVAP"
	Returnstatus=1
	COID=IntCo 
	let j8=99
	eflg=0;Message$="Report in process"
	returnstatus=1 ! no errors
	errmsg$=""
	if armonth<0 or armonth>12
		let returnstatus=0
		let message$="Invalid A/R Month. "
		goto OutEnd
	endif
	if eoymonth<0 or eoymonth>12
		let returnstatus=0
		let message$="Invalid End of Year Month. "
		goto Outend
	endif
	call verifyEVAP()
	if eflg<>0
		let returnstatus=0
		let message$=errmsg$
		let message$=message$+" END OF PERIOD NOT PERFORMED "
		goto OutEnd:
	endif
call dxget("RUN411",tmp$) \ Ans$=UCASE$(TRIM$(tmp$))
If ANS$ = "N" Goto OUTNORUN
!If ANS$ <> "YES" Goto STARTHERE
MTHCONF: Rem "Confirm Month
!Print @0,14;"MONTH # TO RECONCILE  ";
!Print Using "&&";ARMONTH;"/";ARDATE$[7,8]
MNTHE = ARMONTH
RPTTYPE: Rem "type
!Print @0,16;"TYPE OF REPORT TO RUN:  1=Audit Only, 2=Final  ";
If ARMONTH = EVAPMTH ! "Only Option is Audit list
  ANS$ = "1"
Else ! if armonth & evapmth are same this has already been run once!
  !Input Len 16384 + 1;""ANS$
  call dxget("RPTTYPE",tmp$) \ Ans$=UCASE$(TRIM$(tmp$))
End If 
If ANS$ <> "1" And ANS$ <> "2" ! Goto RPTTYPE
	let returnstatus=0
		let message$="Invalid Report Type. "
		goto Outend
Endif
FINEOM = 0
If ANS$ = "2" Let FINEOM = 1
If FINEOM ! running final
	If ARMONTH = EVAPMTH let fineom=0 ! cannot run final - already run!!
	! If ARMONTH = EVAPMTH Goto ALREADRUN ! moved from above
  ! Print @0,7;'CL';@0,8;'CL';
End If 
call dxget("Printer",tmp$) ! let's see if 1 selected (-- = NONE)
	tmp$=rtrim$(tmp$)
	if tmp$[1,2]="--"
			Returnstatus=0
			Message$="NO PRINTER SELECTED"
			goto OutEnd ! Done
	Endif
	onchannelno=0 ! zero for channel 
	printchan = openprinter(e$,onchannelno) 
	Toscreen=0
	if printchan=-1 let Toscreen=1 ! to browser
	if toscreen
		Returnstatus=0
		Message$="NO Browser Print"
		goto OutEnd ! Done
	Endif
FINALQ: Rem "Final chance - ERP we're here & they're running it!
!Print @0,22;'CE';"SELECT:  R: reselect  S: start  E: exit   ";
!Input Len 16384 + 1;""ANS$ \ Call String(1,ANS$)
!If ANS$ = "E" Goto OUTNORUN
!If ANS$ = "R" Goto STARTHERE
!If ANS$ <> "S" Goto FINALQ
FFINALQ: Rem "final-final question
!Print @0,20;'CE';"READY TO BEGIN? (YES/N)   ";
!Input Len 16384 + 3;""ANS$ \ Call String(1,ANS$)
!If ANS$ = "N" Goto OUTNORUN
!If ANS$ <> "YES" Goto FFINALQ
X2=BuildSort(e$,20,0,9) ! build a sortwork on chan#9, keysize=20w
FLE$ = "6/EVAPTTL" + Str$(COID)
If Err 0 Rem
Close #10
Kill FLE$
If Err 0 Gosub ERR_TRAP
K9$ = "[3:16] " + FLE$
Build #10,K9$
E = 0;R[10] = 3
Search #10,0,1;K9$,R[10],E \ If E Gosub ERR_SEARCH
E = 0;R[10] = 3
Search #10,0,0;K9$,R[10],E \ If E Gosub ERR_SEARCH
X2 = Chf(10) - 1
If X2 > 0
  For X3 = X2 To 1 Step -1
    E = 3;R[10] = X3
    Search #10,1,0;K9$,R[10],E \ If E Gosub ERR_SEARCH
  Next X3
End If 
K9$ = " ",K9$
E = 2;R[10] = 0
Search #10,1,0;K9$,R[10],E \ If E Gosub ERR_SEARCH
BILLTO = Rec_uac ! Spc(6)
Write #10,R[10],0;BILLTO;
Search #10,4,1;K9$,R[10],E \ If E Gosub ERR_SEARCH
ARYEAR = ARDATE$[7,8]
ARYEAR = 2000 + ARYEAR
K2$[1,4] = ARYEAR Using "####"
K2$[5,6] = MNTHE Using "&&"
K2$[7,8] = "30"
K1$ = K2$;NUMREC = 0
J1 = 90;J2 = 0;SCRN = 0
!If Err 0 Let J8 = Spc(8)
J8 = 0 !\ X3 = Chf(0) ! ALWAYS A HARDCOPY PRINT!!
If Err 0 Gosub ERR_TRAP
!If Not(FINEOM) ! "Audit list - allow abort
!  If Err 0 Gosub ERR_TRAP
!End If 
J9 = 62 ! \ If J8 Let J9 = 20;SCRN = 1
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call addToStr(e$,rstr$,webstr$)
	call setoutput(e$,rstr$)
End If 
!Print @0,22;'CE';"SORTING, PLEASE WAIT. . "
!Signal 3,1
K9$ = " ",K9$
CLRSORT: Rem "In Case
Search #9,3,1;K9$,R[9],E \ If E = 2 Goto HKEY_LOOP
If E Gosub ERR_SEARCH
Search #9,5,1;K9$,R[9],E \ If E Gosub ERR_SEARCH
Goto CLRSORT
HKEY_LOOP: Rem "thru all HHKey for YYYYMM  KEY=YYYYAATTRRRRRR
Search #7,3,1;K1$,R[2],E \ If E = 2 Goto SORTDONE
If E Gosub ERR_SEARCH
If K1$[1,6] <> K2$[1,6] Goto SORTDONE
NUMREC = NUMREC + 1
!If Not(Fra(NUMREC / 500)) Print @44,22;"PROCESSED";NUMREC;K1$[9]
Mat Read #2,R[2],0;H0;
Mat Read #2,R[2],52;H3;
Mat Read #2,R[2],104;H5;
Mat Read #2,R[2],512;OREF;
If H5[7] <> 36 And H5[7] <> 37 Goto HKEY_LOOP
If H0[0] = 31 And OREF[3] = 0 Goto HKEY_LOOP ! ONLY IF COPIED?
If H0[0] = 31 And H3[1] <> 16 Goto HKEY_LOOP
K9$ = " ",K9$
K9$[1,6] = H0[1] Using "######"
K9$[7,8] = H5[7] Using "##"
K9$[9,14] = H0[4] Using "######"
K9$[15,26] = K1$[7]
Search #9,4,1;K9$,R[2],E \ If E Gosub ERR_SEARCH
Goto HKEY_LOOP
SORTDONE: Rem "Done - now Report/Total
K1$ = " ",K1$
SORTDLOOP: Rem "Loop thru for totals
Search #9,3,1;K1$,R[2],E \ If E = 2 Goto TOTALDONE
If E Gosub ERR_SEARCH
K9$ = K1$[1,6];BILLTO = K9$[1,6]
Search #10,2,1;K9$,R[10],E \ If E > 1 Gosub ERR_SEARCH
If E
  E = 2;R[10] = 0
  Search #10,1,0;K9$,R[10],E \ If E Gosub ERR_SEARCH
  Search #10,4,1;K9$,R[10],E \ If E Gosub ERR_SEARCH
  BILLD = 0;COSTD = 0
  Write #10,R[10],0;BILLTO;
  Write #10,R[10],4;BILLD;
  Write #10,R[10],12;COSTD;
End If 
K2$ = " ",K2$;K2$ = K1$[17,26]
TYPE = K1$[7,8];RSTAT = K1$[15,16]
HLINE_LOOP: Rem "thru Lines On Invoice
Search #4,3,1;K2$,R[4],E \ If E = 2 Goto SORTDLOOP
If E Gosub ERR_SEARCH
If K2$[1,10] <> K1$[17,26] Goto SORTDLOOP
Mat Read #4,R[4],32;L5;
Mat Read #4,R[4],256;S2;
If S2[0] = 3 Goto HLINE_LOOP
Mat Read #4,R[4],260;S3;
K9$ = " ",K9$
K9$ = BILLTO Using "######"
Search #10,2,1;K9$,R[10],E \ If E > 1 Gosub ERR_SEARCH
If E
  E = 2;R[10] = 0
  Search #10,1,0;K9$,R[10],E \ If E Gosub ERR_SEARCH
  Search #10,4,1;K9$,R[10],E \ If E Gosub ERR_SEARCH
  BILLD = 0;COSTD = 0
  Write #10,R[10],0;BILLTO;
  Write #10,R[10],4;BILLD;
  Write #10,R[10],12;COSTD;
End If 
If TYPE = 36
  Read #10,R[10],4;BILLD
  If RSTAT = 31 ! "Credit
    BILLD = BILLD - L5[3]
  Else ! "invoice
    BILLD = BILLD + L5[3]
  End If 
  Write #10,R[10],4;BILLD;
End If 
If TYPE = 37
  Read #10,R[10],12;COSTD
  If RSTAT = 31 ! "credit
    COSTD = COSTD - S3[12]
  Else ! "invoice
    COSTD = COSTD + S3[12]
  End If 
  Write #10,R[10],12;COSTD;
End If 
Goto HLINE_LOOP
TOTALDONE: Rem "Done totalling - Now Print it
! Print @0,22;'CE';"PRINTING, PLEASE WAIT. ."
! 
K1$ = " ",K1$;BADDATA = 0;NEWCUST = 1
HLDBT = -1;HLDREF = 0;HLDCUST = 0;ORGBILLD = 0;ORGCOSTD = 0
SORTPLOOP: Rem "Through Sorted on Print
Search #9,3,1;K1$,R[2],E \ If E = 2 Goto PRNTDONE
If E Gosub ERR_SEARCH
BILLTO = K1$[1,6];TMULTI = 1
If HLDBT <> -1 And BILLTO <> HLDBT
  Gosub PRNTBTTTLS
  If K1$[7,8] <> "36" Let BADDATA = 1
  NEWCUST = 1;ORDBILLD = 0;ORGCOSTD = 0
End If 
If HLDBT = -1 And K1$[7,8] <> "36" Let BADDATA = 1
HLDBT = BILLTO;TYPE = K1$[7,8];RSTAT = K1$[15,16]
TMULTI = 1 \ If RSTAT = 31 Let TMULTI = -1
Gosub READ_IHEAD
Gosub GET_CUSTOMER
Gosub GET_BTOTTLS
If TYPE = 37
  BH0[3] = OREF[5];T2[1] = 0;T2[24] = 0
Else 
  BH0[3] = 0;T2[1] = 0;T2[24] = 0 ! not updating ot36 totals
End If 
GPP = 0
If BILLD Let GPP = (((BILLD - COSTD) * 100) / BILLD)
If GPP > 100 Let GPP = 99
If BILLD <= 0 Let GPP = 0
If COSTD <= 0 Let GPP = 0
CUST = K1$[9,14]
If TYPE = 36 Let CUST = K1$[1,6]
If CUST <> HLDCUST Or HLDTYPE <> TYPE
  If BADDATA Gosub PRNTNOBTCINFO
  If BADDATA Gosub PRNTNOINFO
  If BILLD < 0 Or COSTD < 0
    Gosub PRNTTTLNEG
    If FINEOM
      If BILLD < 0 ! "too many 36 credits
        ORGBILLD = BILLD;BILLD = 0
        Write #10,R[10],4;BILLD;
      End If 
      If COSTD < 0 ! "too many 37 credits
        ORGCOSTD = COSTD;COSTD = 0
        Write #10,R[10],12;COSTD;
      End If 
    End If ! "only adjust on final run!
  End If 
  Gosub PRNTCUSTINFO \ NEWCUST = 1
End If 
HLDCUST = K1$[9,14];X3 = K1$[17,26]
If X3 <> HLDREF
  HLDREF = X3
  If TYPE = 36
    Gosub BTHDTL \ NEWCUST = 1
  End If 
  If TYPE = 37
    Gosub BTSDTL
  End If 
End If 
HLDTYPE = TYPE
HLDREF = K1$[17,26];BADDATA = 0
K2$ = " ",K2$;K2$[1,10] = HLDREF Using "##########"
IHL_LOOP: Rem "Inv Hist Line Loop
Search #4,3,1;K2$,R[4],E \ If E = 2 Goto IHLDONE
If E Gosub ERR_SEARCH
If K2$[1,10] <> K1$[17,26] Goto IHLDONE
Gosub READ_ILINE
If S2[0] = 3 Goto IHL_LOOP
Gosub GET_PRODUCT
If TYPE = 36 Gosub BLDTL
If TYPE = 37
  Gosub CALCNEWPRICE
  Gosub SLDTL
  If FINEOM Gosub UPDATELINE
End If 
NEWCUST = 0
Goto IHL_LOOP
CALCNEWPRICE: Rem " Using G/P% - Calc price from Load
X3[1] = 0
If GPP >= 100 Let GPP = 0
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2;CNVTA = L5[1]
Gosub CONVERT \ DCOST = AMOUNT
If GPP
  X3[1] = FNP(DCOST / ((100 - GPP) / 100))
End If 
X3[1] = Abs(X3[1])
CNVTU[0] = UN[2];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = X3[1]
Gosub CONVERT
L5[2] = AMOUNT
CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = AMOUNT
Gosub CONVERT \ DPRICE = AMOUNT
CHBASE = 0
OLM[3] = L5[2] - L6[1] + CHBASE
OLM[3] = OLM[3] - (OLM[3] * (L6[0] / 100))
If L7[8] > 0 Let OLM[3] = OLM[3] + (OLM[3] * (L7[8] / 100))
If L7[8] < 0 Let OLM[3] = OLM[3] + (0 - L7[8])
L5[3] = FNR(L7[4] * OLM[3])
If UN[1] = -2 Let L5[3] = FNR(OLM[3] * Sgn(L7[4]))
L5[0] = FNR(L7[2] * OLM[3])
If UN[1] = -2 Let L5[0] = FNR(OLM[3] * Sgn(L7[2]))
Return 
IHLDONE: Rem "Done with Lines for an Invoice
If TYPE = 37 Gosub STITTL \ Gosub SILTTLS
If TYPE = 36 Gosub BTITTL
If TYPE = 37 And FINEOM Gosub UPDATETOTALS
Goto SORTPLOOP
PRNTDONE: Rem "Done - totals
Gosub PRNTBTTTLS
Gosub PRNTRTTLS
Goto PRGDONE
PRGDONE: Rem "Done and now?
!call programdump("tmp/411b4.txt!","")
If (FINEOM)
  Gosub COMMUPDATE
  tmp1$=CHF$(1309) ! name of sortfile to pass (full path)
  Call "EVAPUpdate.dl4",tmp1$,intco,e$
  Write #1,0,132;MNTHE; ! set to armonth
  ! call programdump("tmp/411aup.txt!","")
End If 
If Err 0 Rem
Close #10
FLE$ = "6/EVAPTTL" + Str$(COID)
Kill FLE$
! call programdump("tmp/411don.txt!","")
!If SCRN
!  Print @0,23;"PRESS <CR> TO EXIT   ";'CL';
!  Input Len 16384 + 1;""ANS$
!End If 
Goto OUTEND2
PRNTCUSTINFO: Rem "Cust #/Name
If J1 + 6 > J9 Let J1 = 90
Gosub PRNTHEADER
If TYPE = 37 Print #0; Tab 1;"SHIP-TO CUSTOMER" \ J1 = J1 + 1
Print #0; Using "######"; Tab (6);CUST;
Print #0; Tab (15);A1$[31,60]
J1 = J1 + 1
Return 
PRNTNOBTCINFO: Rem "No Bill to Info
Gosub PRNTHEADER
Print #0; Tab 6;"**** NO BILL TO CUSTOMER FOUND! ****"
J1 = J1 + 1
Return 
PRNTNOINFO: Rem "Tell 'em no OT 36
Gosub PRNTHEADER
Print #0; Tab 1;"**** NO BILL TO INVOICE FOUND! ****"
Print #0;""
J1 = J1 + 2
Return 
PRNTTTLNEG: Rem " got a negative total
Gosub PRNTHEADER
Print #0; Tab 1;"**** A TOTAL FIGURE IS NEGATIVE! ****"
Print #0;""
J1 = J1 + 2
Return 
BTHDTL: Rem "Billing Header
Gosub PRNTHEADER
Print #0; Using "##########"; Tab 1;"BILLING INV # ";HLDREF
J1 = J1 + 1
T9[0] = T9[0] + T2[7]
Return 
BTITTL: Rem "Billing Invoice Totals
Gosub PRNTHEADER
Print #0; Using EMASK$; Tab 80;"TOTAL TAX"; Tab 91;T2[7]
Print #0; Using EMASK$; Tab 80;"TOTAL BILLING INV $"; Tab 103;T9[11]
Print #0;""
J1 = J1 + 3
T9[11] = 0
Return 
BLDTL: Rem "Billing Line Detail
If J1 + 4 > J9 Let J1 = 90
Gosub PRNTHEADER
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1;CNVTA = L7[4]
Gosub CONVERT
Print #0; Using QMASK$; Tab 1;(AMOUNT * TMULTI);
Print #0; Tab 15;A$[140,151];
CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = OLM[3]
Gosub CONVERT
Print #0; Using PMASK$; Tab 34;AMOUNT;
Print #0; Using EMASK$; Tab 46;(L5[3] * TMULTI)
Print #0; Tab 15;A$[9,38]
Print #0; Tab 15;A$[63,92]
Print #0;""
J1 = J1 + 4
T9[4] = T9[4] + (L5[3] * TMULTI)
T9[11] = T9[11] + (L5[3] * TMULTI)
Return 
BTSDTL: Rem "Shipping Header
Gosub PRNTHEADER
Print #0; Using "##########"; Tab 1;"SHIPPING INV # ";HLDREF
J1 = J1 + 1
Return 
STITTL: Rem "Shipping Invoice total
Gosub PRNTHEADER
Print #0; Using EMASK$; Tab 25;"TOTAL SHIPPING INV $"; Tab 46;T9[1];
Print #0; Using EMASK$; Tab 70;"TOTAL SHIPPING COST $"; Tab 103;T9[2]
Print #0;""
J1 = J1 + 2
Return 
SLDTL: Rem "Shipping Line Detail
If J1 + 4 > J9 Let J1 = 90
Gosub PRNTHEADER
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1;CNVTA = L7[4]
Gosub CONVERT
Print #0; Using QMASK$; Tab 1;(AMOUNT * TMULTI);
Print #0; Tab 15;A$[140,151];
CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = OLM[3]
Gosub CONVERT
Print #0; Using PMASK$; Tab 34;AMOUNT;
Print #0; Using EMASK$; Tab 46;(L5[3] * TMULTI);
X3[2] = L5[3] - S3[12]
X3[3] = 0 \ If L5[3] Let X3[3] = FNT(X3[2] * 100 / L5[3])
Print #0; Using EMASK$; Tab 60;(X3[2] * TMULTI);
Print #0; Using "---#.###"; Tab 72;X3[3];
Print #0; Using PMASK$; Tab 80;DCOST;
Print #0; Using EMASK$; Tab 91;(S3[12] * TMULTI)
Print #0; Tab 15;A$[9,38]
Print #0; Tab 15;A$[63,92]
Print #0;""
T9[1] = T9[1] + (L5[3] * TMULTI)
T9[2] = T9[2] + (S3[12] * TMULTI)
J1 = J1 + 4
Return 
PRNTBTTTLS: Rem "Totals For this BillTo
Gosub PRNTHEADER
Print #0;""
Print #0; Using EMASK$; Tab 18;"TOTAL SHIPPING INV $ BILL-TO"; Tab 46;T9[3];
Print #0; Using EMASK$; Tab 70;"TOTAL SHIPPING COST $ BILL-TO"; Tab 103;T9[5]
X3[4] = T9[3] - T9[5]
X3[5] = 0 \ If T9[3] Let X3[5] = FNT(X3[4] * 100 / T9[3])
If BILLD And T9[3] = 0 And T9[5] = 0 ! "billing, no shipping
  OT36ONLY = OT36ONLY + BILLD
  X3[4] = BILLD
End If 
Print #0; Using EMASK$; Tab 85;"TOTAL PROFIT FOR BILL-TO"; Tab 107;X3[4];
Print #0; Using "---#.###"; Tab 123;X3[5];"%"
BTVAR = BILLD - T9[3]
If BILLD = 0 And ORGBILLD ! "we chg'd from original
  BTVAR = ORGBILLD - T9[3]
End If 
Print #0; Using EMASK$; Tab 85;"TOTAL VAR BILLING $ VS SHIPPING $"; Tab 117;BTVAR
J1 = 90
T9[6] = T9[6] + T9[4];T9[4] = 0
T9[7] = T9[7] + T9[5];T9[5] = 0
T9[8] = T9[8] + T9[0];T9[0] = 0
T9[9] = T9[9] + T9[3];T9[3] = 0
T9[10] = T9[10] + BTVAR;BTVAR = 0
ORGBILLD = 0;ORGCOSTD = 0
Return 
SILTTLS: Rem "Shipping Invoice Totals
Gosub PRNTHEADER
T9[3] = T9[3] + T9[1];T9[1] = 0
T9[5] = T9[5] + T9[2];T9[2] = 0
Return 
PRNTRTTLS: Rem "Report Totals
If J1 + 8 > J9 Let J1 = 90
Gosub PRNTHEADER
Print #0;""
Print #0; Tab 55;"REPORT TOTAL: TOTAL BILLING $";
Print #0; Using EMASK$; Tab 90;T9[6]
Print #0; Tab 55;"REPORT TOTAL: TOTAL SHIPPING LOAD COST $";
Print #0; Using EMASK$; Tab 95;T9[7]
X3[3] = T9[6] - T9[7]
X3[4] = 0 \ If T9[6] Let X3[4] = FNT(X3[3] * 100 / T9[6])
Print #0; Tab 55;"REPORT TOTAL: TOTAL PROFIT";
Print #0; Using EMASK$; Tab 107;X3[3];
Print #0; Using "----#.##"; Tab 122;X3[4];"%"
Print #0; Tab 55;"REPORT TOTAL: TOTAL TAX";
Print #0; Using EMASK$; Tab 90;T9[8]
Print #0;""
Print #0; Tab 55;"REPORT TOTAL: TOTAL SHIPPING INV $";
Print #0; Using EMASK$; Tab 90;T9[9]
Print #0; Tab 55;"REPORT TOTAL: TOTAL VARIANCE BILLING $ VS SHIPPING $";
Print #0; Using EMASK$; Tab 117;T9[10]
For X = 0 To 20 \ T9[X] = 0 \ Next X
J1 = 90
Return 
PRNTHEADER: Rem "
If J1 < J9 Return 
If J2
  !If SCRN
  !  Print @0,23;"PRESS <CR> TO CONTINUE  ";'CL';
  !  Input Len 16384 + 1;""ANS$
  !  Print 'CS';
  !Else 
    Print #0;"\14\";
  !End If 
End If 
J2 = J2 + 1
Print #0; Tab 1;"DATE: ";ARDATE$;
Print #0; Tab (65 - (Int(Len(CONM$) / 2)));CONM$;
Print #0; Tab 120;"PAGE: ";J2
Print #0;"-411- ";
X$ = "" \ Call Time(X$)
Print #0;X$;
Print #0; Tab 51;"EVAP MONTH END RECAP - ";
If Not(FINEOM) Print #0;"AUDIT"
If FINEOM Print #0;"FINAL"
Print #0; Tab 52;"FOR A/R MONTH ";
Print #0; Using "&&";MNTHE;" YEAR ";
Print #0; Using "####";ARYEAR
Print #0;""
If TYPE = 36
  Print #0; Tab 1;"BILL-TO CUSTOMER";
End If 
If TYPE = 37
  Print #0; Tab 1;"SHIP-TO CUSTOMER";
End If 
Print #0; Tab 36;"UNIT PRICE"; Tab 47;"EXTEND PRICE";
Print #0; Tab 64;"PROFIT $"; Tab 75;"PROF %";
Print #0; Tab 84;"UNIT COST"; Tab 95;"EXTEND COST"
Print #0;""
J1 = 6
Return 
READ_IHEAD: Rem "Read Inv Header/Totals
Mat Read #2,R[2],0;H0;
Mat Read #2,R[2],104;H5;
MAT READ #2,R[2],408;H6;
Mat Read #2,R[2],512;OREF;
Mat Read #3,OREF[5],8;T2;
Return 
READ_ILINE: Rem "Read Inv Lines
CH_ROL = 4;REC_ROL = R[4]
Mat Read #CH_ROL,REC_ROL,0;L2;
Mat Read #CH_ROL,REC_ROL,8;L3;
Mat Read #CH_ROL,REC_ROL,16;L4;
Mat Read #CH_ROL,REC_ROL,32;L5;
Mat Read #CH_ROL,REC_ROL,56;L6;
Mat Read #CH_ROL,REC_ROL,80;L6$;
Mat Read #CH_ROL,REC_ROL,140;L1$;
Mat Read #CH_ROL,REC_ROL,160;L9;
Mat Read #CH_ROL,REC_ROL,168;L7;
Mat Read #CH_ROL,REC_ROL,246;PL;
Mat Read #CH_ROL,REC_ROL,250;UN;
Mat Read #CH_ROL,REC_ROL,256;S2;
Mat Read #CH_ROL,REC_ROL,260;S3;
Mat Read #CH_ROL,REC_ROL,368;MT$;
Mat Read #CH_ROL,REC_ROL,370;S3$;
Mat Read #CH_ROL,REC_ROL,404;OLM;
Mat Read #CH_ROL,REC_ROL,446;EUN;
Mat Read #CH_ROL,REC_ROL,452;UNF;
Mat Read #CH_ROL,REC_ROL,494;LCO;
Mat Read #CH_ROL,REC_ROL,502;CST;
Mat Read #CH_ROL,REC_ROL,508;LTAX1;
Mat Read #CH_ROL,REC_ROL,538;LTAX2;
Mat Read #CH_ROL,REC_ROL,542;QPB;
Read #CH_ROL,REC_ROL,548;LPRINTED;
Read #CH_ROL,REC_ROL,550;OWHS;
Read #CH_ROL,REC_ROL,552;LP_DATE;
Read #CH_ROL,REC_ROL,556;LP_TIME;
Return 
WRITE_ILINE: Rem "write back
CH_ROL = 4;REC_ROL = R[4]
Mat Write #CH_ROL,REC_ROL,0;L2;
Mat Write #CH_ROL,REC_ROL,8;L3;
Mat Write #CH_ROL,REC_ROL,16;L4;
Mat Write #CH_ROL,REC_ROL,32;L5;
Mat Write #CH_ROL,REC_ROL,56;L6;
Mat Write #CH_ROL,REC_ROL,80;L6$;
Mat Write #CH_ROL,REC_ROL,140;L1$;
Mat Write #CH_ROL,REC_ROL,160;L9;
Mat Write #CH_ROL,REC_ROL,168;L7;
Mat Write #CH_ROL,REC_ROL,246;PL;
Mat Write #CH_ROL,REC_ROL,250;UN;
Mat Write #CH_ROL,REC_ROL,256;S2;
Mat Write #CH_ROL,REC_ROL,260;S3;
Mat Write #CH_ROL,REC_ROL,368;MT$;
Mat Write #CH_ROL,REC_ROL,370;S3$;
Mat Write #CH_ROL,REC_ROL,404;OLM;
Mat Write #CH_ROL,REC_ROL,446;EUN;
Mat Write #CH_ROL,REC_ROL,452;UNF;
Mat Write #CH_ROL,REC_ROL,494;LCO;
Mat Write #CH_ROL,REC_ROL,502;CST;
Mat Write #CH_ROL,REC_ROL,508;LTAX1;
Mat Write #CH_ROL,REC_ROL,538;LTAX2;
Mat Write #CH_ROL,REC_ROL,542;QPB;
Write #CH_ROL,REC_ROL,548;LPRINTED;
Write #CH_ROL,REC_ROL,550;OWHS;
Write #CH_ROL,REC_ROL,552;LP_DATE;
Write #CH_ROL,REC_ROL,556;LP_TIME;
Return 
GET_PRODUCT: Rem "Get Product Information
A$[9,38] = L6$[1,30]
A$[63,92] = L6$[31,60]
A$[140,151] = L1$[1,12]
A$[152,155] = L1$[17,20]
A$[156,156] = MT$[1,1]
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[18] = UN[0];PFU1[19] = UN[0]
PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
Return 
GET_CUSTOMER: Rem "Need Customer Name
If TYPE = 36
  K3$ = " ",K3$;K3$ = H0[1] Using "######"
  Search #6,2,1;K3$,R[6],E \ If E > 1 Gosub ERR_SEARCH
  If E = 1
    K3$ = H0[4] Using "######"
    Search #6,2,1;K3$,R[6],E \ If E > 1 Gosub ERR_SEARCH
    If E = 1 Let R[6] = 0
  End If 
End If 
If TYPE = 37
  K3$ = " ",K3$;K3$ = H0[4] Using "######"
  Search #6,2,1;K3$,R[6],E \ If E > 1 Gosub ERR_SEARCH
  If E = 1 Let R[6] = 0
End If 
If R[6] > 0
  Mat Read #6,R[6],0;A1$;
  Mat Read #6,R[6],544;CFIN;
Else 
  A1$ = " ",A1$;A1$[31] = "CUSTOMER NOT ON FILE!"
  CFIN[8] = 0
End If 
Return 
UPDATELINE: Rem "Update it
Gosub WRITE_ILINE
T2[1] = T2[1] + L5[3]
T2[24] = T2[24] + L5[0]
Return 
GET_BTOTTLS: Rem "Read Totals from File
K9$ = " ",K9$;K9$ = BILLTO Using "######"
Search #10,2,1;K9$,R[10],E \ If E > 1 Gosub ERR_SEARCH
If E
  BADDATA = 1
  BILLD = 0;COSTD = 0
Else 
  Read #10,R[10],4;BILLD;
  Read #10,R[10],12;COSTD;
End If 
Return 
UPDATETOTALS: Rem "Need to write Totals Back (Shipping Only)
If Not(FINEOM) Return 
T2[0] = T2[1] - T2[3] + T2[4] + T2[5] + T2[6] + T2[7]
! for commissions
H5[13] = T2[1] - H6[6] \ H5[14] = T2[17]
If P9$[35,35] = "Y" Let H5[13] = H5[13] + T2[5] + H6[6]
If P9$[36,36] = "Y" Let H5[13] = H5[13] - T2[3]
If P9$[37,37] = "Y" Let H5[14] = H5[14] + T2[20]
If P9$[38,38] = "Y" Let H5[13] = H5[13] + T2[6]
H5[13] = H5[13] + TOT[1];H5[14] = H5[14] + TOT[2]
If BH0[3] > 0
  MAT WRITE #2,R[2],104;H5; ! comm$
  Mat Write #3,BH0[3],8;T2;
End If 
Return 
COMMUPDATE: Rem "Update Commission for OT 36
K1$ = " ",K1$;BADDATA = 0;HLDCUST = 0
CUSLOOP: Rem "
Search #9,3,1;K1$,R[2],E \ If E = 2 Goto CMUDONE
If E Gosub ERR_SEARCH
X2 = K1$[7,8] \ If X2 <> 37 Goto CUSLOOP
Gosub READ_IHEAD
Gosub GET_CUSTOMER
If R[6] <= 0 Goto CUSLOOP
HLDCUST = K3$[1,6]
BILLTO = K1$[1,6]
Gosub GET_BTOTTLS
If BILLD < 0 Or COSTD < 0 Goto CUSLOOP
K2$ = " ",K2$;K2$ = H0[11] Using "###"
Search #5,2,1;K2$,R[5],E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  R[22] = 0 - R[2];CFIN[0] = BILLD;CFIN[1] = COSTD
  R[26] = R[6];R[25] = R[5]
  Call "EVAPSLSCOM.DL4",R[26],R[22],R[25],CFIN[]
End If 
Goto CUSLOOP
CMUDONE: Rem "done
Return 
end select ! above for ProcessEVAP
goto OutEnd2
Sub VERIFYEVAP()! verify eop 
 Try
	if armonth<0 or armonth>12
		let eflg=eflg+1
		let errmsg$=errmsg$+"Invalid A/R Month. "
	endif
	if EVAPMTH<0 or EVAPMTH>12
		let eflg=eflg+1
		let errmsg$=errmsg$+"Invalid EVAP Month. "
	endif
	If EVPFFOUND ! Gosub INPROCESS \ Goto OUTEND
		eflg=eflg+1
		INPROCESS: Rem "If Mth<0 or TTLS File exists Means being Run Elsewhere!
		errmsg$="PROGRAM ALREADY BEING RUN ON DIFFERENT USER!"
		If BILLTO 
			let errmsg$=errmsg$+" USER: " ! +Str$(BILLTO)
			URec=Billto
			tmp$=GetUIDInfo$(e$,IntCo,URec)
			let errmsg$=errmsg$+RTrim$(tmp$[21,40])
		Endif
		!goto OutEnd
	Endif
	if eflg<>0
		let returnstatus=0
		let message$=errmsg$
	endif
else
    include "src/callsuberr.inc"
 end try
end sub ! Verify Evap
OUTNORUN: Rem "Aborted before takeoff
MESSAGE$="PROGRAM NOT RUN! NO CHANGES MADE!"
returnstatus=1 ! ok or error?
! Print @0,23;"PRESS <CR> TO EXIT  "
!Input Len 16384 + 1;""ANS$ \ Goto OUTEND
OUTEND: Rem "Outta Here - no run or issue prevents it
! send to user
! Returnstatus=0 ! failure let program decide
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)

OUTEND2: ! really done
Close 
!Print 'CS'
!Chain "MX000"
END
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: Rem ALL UB 5+!!  IF SPC 4>1280 GOTO cvtstartb: ! "unibasic 5+

CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Error 11000                                 
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
END