! ubsvendappotran.src
!
! displays an individual transaction for a vendor
!
! 
!
! loadsave -w -n 100,10 -o prog/dxport/ubsvendappotran.dl4 src/ubsvendappotran.src
!
include "src/copyright.inc"
!
! sub & functions for list library
!
!  S  GetVendApPOTran		get Vendor AP Trans Detail

include "src/inc/filea80vm.inc" ! "VENDOR file
include "src/inc/fileapdeth.inc" ! a/p history file 
include "src/inc/filepohead.inc" ! purchase order header
include "src/inc/filepoline.inc" ! purchase order line
include "src/inc/fileappohh.inc" ! ap/po history header file
include "src/inc/fileappolh.inc" ! ap/po history line item file
Include "src/inc/filepomiscchrg.inc" ! po misc charge file misc.
include "src/inc/fileprod.inc" ! product	prod.
include "src/inc/filewhinfoz.inc" ! warehouse wh.
include "src/inc/fileccodesz.inc" ! u/m file! ccode - not needed
include "src/inc/filenstkdesc.inc" ! non stock file nstk.
include "src/inc/filepoctfle.inc" ! poctfle
!
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetDelimiters,CreateNetStatus

External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Sub Utage5,UserCntrl

External Lib "getglname.lib"
Declare External Function GetGLName$

External Lib "libprodconv.lib"           
Declare External Function ConvProdAmount 

External Lib "ubsprconv.dl4"     
Declare External Function XUnit$ 

Declare Intrinsic Sub Env,FormatDate,JuliantoDate,DatetoJulian


! --------------------------------------------------------------------------------------
External Sub GetVendApPoTran(e$,List$[],maxcnt,intCo,ReturnStatus,Message$,rstr$)
  ! Creates a list of the VENDOR's Transaction Detail
  !
  ! e$         : error message
  ! List$[]    : VENDOR misc list
  ! maxcnt     : max # of lines for list$[]
  ! intCo      : company id #
  ! ReturnStatus	: used for status
  ! Message$	: used for Status
try
!
	Declare Function umtofactor
	Declare sub SetPRtoPol, CalcExtAmt ,Factorum


	dim 1%,c0[6],spO
    dim 1%,tmp1,Dir,VENDChan,CTLChan,aphchan,X,apachan
    dim 1%,tmpCh,FndAR,APHChan,CDir,TARDChan
	dim 2%,tmp2,tmpcnt,VENDid,reftype,taxcode,terms,aptype
	dim 2%,TDate[5],Whs,Div,OType
    dim 3%,tmp3,VENDRec,Refnum,glacct
	dim 3%,APHRec,ACRec
	dim keyapph$[50],1%,ch_apph,3%,rec_apph
	dim keyapm$[50],1%,ch_apm,3%,rec_apm,apmsg$[50],apchkmsg$[50]
	dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]! ,! rstr$[500]
    dim tmp$[200],tmp1$[200],WebStr$[1000],Message$[200]
	dim VENDKey$[64],Mode$[2],blank$[100],VEND$[64],refnum$[12]
	dim taxcoded$[20],artermd$[16],reftype$[3],CMode$[3]
	dim X$[20],P9$[50],P60$[50],P61$[256],Type$[81]
	dim aphkey$[64],CPO$[20],TDesc$[30],apakey$[50]
	dim keyglm$[30],glname$[22]
	dim keyappoh$[50],keypoh$[50],keypol$[50],transid$[12],chkkey$[50],keypoc$[50],keyappol$[50]
	dim xdate$[10],qtyum$[4],costum$[4],qmask$[20],pmask$[20]
	Dim 1%,flags[11]
	dim 2%,q0[1]
	dim 3%,totappld,1%,aph3[4],3%,aph4[4]
	dim 3%,totporec
!
	dim VEND. as a80vm
	dim aph.  as apdeth
	dim pol. as poline
	dim poh. as pohead
	dim appol. as appolh
	dim appoh. as appohh
	Dim misc. as  pomiscchrg ! po misc charge file misc.
	Dim pr. as prod ! product	prod.
	Dim wh. as whinfo ! warehouse wh.
	dim umc. as ccodes ! um codes file! ccode - not needed
	dim nstk. as  nstkdesc
	dim poc. as poctfle ! poctfle
	 Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H) ! rounding to nearest penny
	! Open any files for this program
    CTLChan=OpenFile(-9999,intCo) \ If CTLChan = -1 Error 42
	mat read #CTLChan,19,50;P9$;
	mat read #CTLChan,60,50;P60$;
	mat read #CTLChan,61,0;P61$;
	mat read #ctlchan,51,18;C0;
	mat read #ctlchan,51,76;spo;
	 Mat Read #ctlchan,115,40;Q0; 
	QMask$ = "-----------#.##"                                              
	tmp$ = "#",tmp$                                                         
	If Q0[1] <= 0 Let Q0[1] = 2                                             
	If Q0[1] Let PMask$ = "-----------#.",tmp$[1,Q0[1]] !price mask

	VENDChan=OpenFile(-2400,intCo) \ If VENDChan = -1 Error 42
	aphchan=OpenFile(-432,intCo) \ If aphchan = -1 Error 42
	!apaChan=OpenFile(-144,intCo) \ If apaChan = -1 Error 42
	!ch_apm=OpenFile(-9820,intCo) \ If Ch_apm = -1 Error 42 ! ap detail header file
	ch_appoh=OpenFile(-9807,intCo) \if ch_appoh=-1 Error 42
	ch_appol=OpenFile(-9808,intCo) \if ch_appol=-1 Error 42
	ch_poh = OpenFile(-2416,intCo) \ If ch_poh = -1 Error 42 !"po header file 
	Ch_Pol = OpenFile(-2432,intCo) \ If Ch_Pol = -1 Error 42 !"po lines file  
	ch_misc = OpenFile(-9949,intCo) \ If ch_misc = -1 Error 42 !po misc charge              
	Ch_Prod = OpenFile(-1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
	Ch_Wh = OpenFile(-2768,intCo) \ If Ch_Wh = -1 Error 42  !" warehouse file
	Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file
	ch_nstk = OpenFile(2448,intCo) \ If ch_nstk = -1 Error 42 ! nonstock p
    ch_poc=OpenFile(-9944,intCo) \ If Ch_poc = -1 Error 42!   
	
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	Call DXGet("VENDid",VEND$) \ VENDid=VEND$
	VEND$=VENDid using "######"
	VEND$ = VEND$+"            "
	VEND$[7]="" ! "cut after 6 chars
	! We need the reference number to detail & optionally a ref type
	Call DXGet("REFNUM",tmp$)
	Let Refnum$=tmp$+"               "
	let transid$=refnum$
	Call DXGet("REFTYPE",tmp$)
	Let RefType$=RTrim$(tmp$) 
	ReturnStatus = 1
	Message$=""
	TYPE$ = "INVC/MM/C"
	!! get the reference type number
	let reftype=0
	if refnum$<>""
		if len(reftype$)>=3
			for x=1 to 3
				if reftype$[1,3]=type$[((x*3)-2),(x*3)]
					let reftype=x
				endif
			next x
		endif
	endif
	let transtype=reftype
    mode$="="
	dir=1
    VENDRec = filegeta80vm(e$,VENDChan,mode$,dir,VEND$,VEND.)
	if VENDRec<=0
		Clear VEND.
		ReturnStatus = 0
		Message$="VENDOR Not Found"
		goto endgetappohdr: 
	endif
	APHKEY$ = " ",aphkey$
	aphkey$[1,6] = VEND$
	aphkey$[7,18] = REFNUM$ 
	let aphkey$[19,20]=(reftype) using "##"
	MODE$="=" 
	dir=1
	APHRec=filegetapdeth(e$,APHChan,mode$,dir,aphkey$,APH.)
	IF APHREC<=0
		RETURNSTATUS=0
		LET MESSAGE$="AP Transaction Not Found "
		goto endgetappohdr:
	endif
	Call Dxget("POID",tmp$)
	let poid=tmp$
	if poid<=0 or poid>999999
		let message$="Invalid Purchase Order Number Submitted"
		returnstatus=0
		goto endgetappohdr:
	endif
	
	let KEYAPPOH$=" ",KEYAPPOH$
	let KEYAPPOH$[1,6]=vendid using "######"
	let KEYAPPOH$[7,18]=transid$
	let KEYAPPOH$[19,20]=transtype using "##"                        
	let KEYAPPOH$[21,26]=poid USING "######"       
	SEARCH #CH_APPOH,2,1;KEYAPPOH$,REC_APPOH,E
	if not(e)
		read record #ch_appoh,rec_appoh;appoh.;
	else
		let returnstatus=0
		let message$=message$+" Purchase Order "+str$(poid)+" Not linked to this Payable Transaction "
		goto endgetappohdr:
	endif
	let keypoh$=" ",keypoh$
	let keypoh$[1,6]=appoh.povendid using "######"
	let keypoh$[7,12]=appoh.PoID using "######"
	search #ch_poh,2,2;keypoh$,rec_poh,e
	if e<>0
		let returnstatus=0
		let message$=""
		if transtype<>2
			let message$="Purchase Order "
		else
			let message$="Debit Memo "
		endif
		let returnstatus=0
		message$=message$+str$(poid)+" For Vendor "+str$(appoh.povendid)+" Not Found "
		goto endgetappohdr: 
	endif
	read record#ch_poh,rec_poh;poh.; 
	endgetappohdr: ! 
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POAddrInfo" + fdel$ ! section name
	webstr$="APTransID",fdel$
	webstr$=webstr$,"APAmount",fdel$
	webstr$=webstr$,"BuyName",fdel$
	webstr$=webstr$,"BuyAddr1",fdel$
	webstr$=webstr$,"BuyAddr2",fdel$
	webstr$=webstr$,"BuyCity",fdel$
	webstr$=webstr$,"BuyState",fdel$
	webstr$=webstr$,"BuyZip",fdel$
	webstr$=webstr$,"POVendId",fdel$
	webstr$=webstr$,"PoId",fdel$
	webstr$=webstr$,"ShipName",fdel$
	webstr$=webstr$,"ShipAddr1",fdel$
	webstr$=webstr$,"ShipAddr2",fdel$
	webstr$=webstr$,"ShipCity",fdel$
	webstr$=webstr$,"ShipState",fdel$
	webstr$=webstr$,"ShipZip",fdel$
	webstr$=Webstr$,"VendId",fdel$
	let list$[1]=webstr$
	row=2
	if returnstatus<>0 ! no errors send over the data
		webstr$=rtrim$(transid$),fdel$
		webstr$=webstr$,(aph.OriginalAmount using "-----------.##"),fdel$
		webstr$ = webstr$,RTRIM$(vend.name$),fdel$                              
		webstr$ = webstr$,RTRIM$(vend.address$),fdel$              
		webstr$ = webstr$,rtrim$(vend.optaddress$),fdel$           
		webstr$ = webstr$,rtrim$(vend.city$),fdel$                 
		webstr$ = webstr$,rtrim$(vend.state$),fdel$                
		webstr$ = webstr$,rtrim$(vend.zip$),fdel$     
		webstr$=webstr$,str$(poh.vendorcode),fdel$
		webstr$=webstr$,str$(poh.purchaseorder),fdel$ ! need to add level?
		webstr$=webstr$,rtrim$(poh.ShipToName$),fdel$
		webstr$=webstr$,rtrim$(poh.Address1$),fdel$                       
		webstr$=webstr$,rtrim$(poh.Address2$),fdel$                          
		webstr$=webstr$,rtrim$(poh.city$),fdel$
		webstr$=webstr$,rtrim$(poh.state$),fdel$
		webstr$=webstr$,rtrim$(poh.zipcode$),fdel$
		webstr$=Webstr$,str$(VendId),fdel$
		LIST$[2]=WEBSTR$
		row=row+1
	endif
	LIST$[row]=esdel$
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	!Call AddToStr(e$,rstr$,esdel$) ! end of section
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POHeaderInfo" + fdel$ ! section name
	webstr$="POVendId",fdel$
	webstr$=webstr$,"POId",fdel$
	webstr$=webstr$,"PODate",fdel$
	webstr$=webstr$,"DueDate",fdel$
	webstr$=webstr$,"VendorRef",fdel$
	webstr$=webstr$,"ShipViaId",fdel$
	webstr$=webstr$,"ShipViaDesc",fdel$
	webstr$=webstr$,"Routing",fdel$
	webstr$=webstr$,"Terms",fdel$
	Webstr$=webstr$,"FOB",fdel$
	webstr$=webstr$,"Confirmed",fdel$
	webstr$=webstr$,"ConfDate",fdel$
	webstr$=webstr$,"Type",fdel$
	webstr$=webstr$,"Typedesc",fdel$
	webstr$=webstr$,"Warehouse",fdel$
	webstr$=webstr$,"WarehouseDesc",fdel$
	webstr$=webstr$,"SalesOrder",fdel$
	webstr$=Webstr$,"VendId",fdel$
	let list$[1]=webstr$
	row=2
	if returnstatus<>0 ! no errors send over the data
		webstr$=str$(poh.vendorcode),fdel$
		webstr$=webstr$,str$(poh.purchaseorder),fdel$
		if poh.orderdate
			let xdate$=pdate$(poh.orderdate)
		else
			let xdate$=" ",xdate$
		endif
		WebStr$=WebStr$,RTrim$(xdate$),fdel$ ! po date
		if Poh.duedate
			let xdate$=pdate$(poh.duedate)
		else
			let xdate$=" ",xdate$
		endif
		WebStr$=WebStr$,RTrim$(xdate$),fdel$ ! due date
		WebStr$=WebStr$,RTrim$(poh.VendorRef$),fdel$ ! vendor ref #
		Webstr$=webstr$,str$(poh.shipviaid),fdel$ ! ship via id
		Webstr$=webstr$,rtrim$(poh.shipvia$),fdel$ ! ship via desc
		Webstr$=webstr$,rtrim$(poh.Routing$),fdel$ ! routing
		Webstr$=webstr$,rtrim$(poh.terms$),fdel$ ! terms
		Webstr$=webstr$,rtrim$(poh.fob$),fdel$ ! fob
		Webstr$=webstr$,rtrim$(poh.ConfirmName$),fdel$ ! confirmed
		if poh.ConfirmDate
			if poh.ConfirmDate<>999999
				let xdate$=pdate$(poh.ConfirmDate)
			else
				let xdate$="999999"
			endif
		else
			let xdate$=" ",xdate$
		endif
		WebStr$=WebStr$,RTrim$(xdate$),fdel$ ! ship date
		let tmp$=""
		if poh.type=0 let tmp$="W "
		if poh.type=1 let tmp$="D "
		if poh.type=2 let tmp$="I "
		Webstr$=webstr$,tmp$,fdel$ ! po type id
		let tmp$=""
		if poh.type=0 let tmp$="Warehouse"
		if poh.type=1 let tmp$="Direct"
		if poh.type=2 let tmp$="Indirect"
		Webstr$=webstr$,tmp$,fdel$ ! po type id description
		Webstr$=webstr$,str$(poh.warehouse),fdel$
		if poh.warehouse>0
			read record #ch_wh,(poh.warehouse-1);wh.; 
		else
			clear wh.
		endif
		Webstr$=webstr$,rtrim$(wh.whname$),fdel$
		Webstr$=webstr$,(poh.SalesOrder using "######"),fdel$
		webstr$=Webstr$,str$(VendId),fdel$
		let list$[2]=webstr$
		row=row+1
	endif
	let list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	! total section
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POHDRTOT" + fdel$ ! section name
	webstr$="DESCRIPTION",fdel$
	webstr$=webstr$+"RVCD ON PO",fdel$
	webstr$=webstr$+"PREVIOUS AP",fdel$
	webstr$=webstr$+"CURRENT AP",fdel$
	webstr$=webstr$+"VARIANCE",fdel$
	LIST$[1]=webstr$ ! heading
	row=2
	if returnstatus=1
		IF P61$[60,60]="Y" AND POH.TotGlRec<>0
			LET TOTPOREC=POH.TotGlRec           
		ELSE                             
			 LET TOTPOREC=POH.TotPoRcvd             
		ENDIF 
		let poh.apamtpend=poh.apamtpend-appoh.totap
		let poh.freightapplpend=poh.freightapplpend-appoh.totfrgt
		let poh.miscapplpend= poh.miscapplpend-appoh.totmisc
		! merchandise
		webstr$="MERCHANDISE",fdel$
		webstr$=webstr$+(totporec using  "###########.##"),fdel$
		webstr$=webstr$+((POH.TotApMerchAppl+POH.ApAmtPend) using  "###########.##"),fdel$
		webstr$=webstr$+(appoh.TotAP using  "###########.##"),fdel$
		webstr$=webstr$+(((POH.TotApMerchAppl+POH.ApAmtPend+appoh.TotAP)-TOTPOREC) using  "-----------.##"),fdel$
		list$[2]=webstr$
		! freight
		webstr$="FREIGHT",fdel$
		webstr$=webstr$+(POH.TotPoFreightRec using  "###########.##"),fdel$
		webstr$=webstr$+((POH.TotFreightAppl+POH.FreightApplPend) using  "###########.##"),fdel$
		webstr$=webstr$+(appoh.TotFrgt using  "###########.##"),fdel$
		webstr$=webstr$+(((POH.TotFreightAppl+POH.FreightApplPend+appoh.TotFrgt)-POH.TotPoFreightRec) using  "-----------.##"),fdel$
		list$[3]=webstr$   
		! misc charge
		webstr$="MISC CHARGE",fdel$
		webstr$=webstr$+(POH.TotMiscCharges using  "###########.##"),fdel$
		webstr$=webstr$+((POH.TotMiscAppl+POH.MiscApplPend) using  "###########.##"),fdel$
		webstr$=webstr$+(appoh.TotMisc using  "###########.##"),fdel$
		webstr$=webstr$+(((POH.TotMiscAppl+POH.MiscApplPend+appoh.TotMisc)-POH.TotMiscCharges) using  "-----------.##"),fdel$
		list$[4]=webstr$
		! totals
		webstr$="TOTALS",fdel$
		let tmp3=totporec+POH.TotPoFreightRec+POH.TotMiscCharges ! po received
		webstr$=webstr$+(tmp3 using  "###########.##"),fdel$
		tmp3=POH.TotApMerchAppl+POH.ApAmtPend+POH.TotFreightAppl+POH.FreightApplPend+POH.TotMiscAppl+POH.MiscApplPend ! prev ap amount
		webstr$=webstr$+(tmp3 using  "###########.##"),fdel$ 
		tmp3=appoh.TotAP+appoh.TotFrgt+appoh.TotMisc ! current a/p amounts
		webstr$=webstr$+(tmp3 using  "###########.##"),fdel$
		tmp3=((POH.TotApMerchAppl+POH.ApAmtPend+appoh.TotAP)-TOTPOREC)! PO RCVD
		TMP3=TMP3+((POH.TotFreightAppl+POH.FreightApplPend+appoh.TotFrgt)-POH.TotPoFreightRec) ! PREV
		TMP3=TMP3+((POH.TotMiscAppl+POH.MiscApplPend+appoh.TotMisc)-POH.TotMiscCharges) ! CURR
		webstr$=webstr$+(tmp3 using  "-----------.##"),fdel$
		list$[5]=webstr$
		row=6
	endif
	list$[row]=esdel$ ! end of section
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	!call AddToStr(e$,rstr$,WebStr$)
	!Call AddToStr(e$,rstr$,esdel$) ! end of section
	tmpcnt=maxcnt
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POLineHdrInfo" + fdel$ ! section name
	webstr$="TotalRcvd",fdel$
	webstr$=webstr$,"PrevAppld",fdel$
	webstr$=webstr$,"CurrAppld",fdel$
	
	let list$[1]=webstr$
	row=2
	if returnstatus<>0 ! no errors send over the data
		let poh.apamtpend=poh.apamtpend-appoh.totap
		let poh.freightapplpend=poh.freightapplpend-appoh.totfrgt
		let poh.miscapplpend= poh.miscapplpend-appoh.totmisc
		IF P61$[60,60]="Y" AND POH.TotGlRec<>0
			LET TOTPOREC=POH.TotGlRec           
		ELSE                             
			 LET TOTPOREC=POH.TotPoRcvd             
		ENDIF 
		
		webstr$=trim$(totporec using  "###########.##"),fdel$ ! total rcvd
		webstr$=webstr$,trim$((POH.TotApMerchAppl+POH.ApAmtPend) using  "###########.##"),fdel$ ! prev rec
		webstr$=webstr$,trim$(appoh.TotAP using  "###########.##"),fdel$ ! currappld

		LIST$[2]=WEBSTR$
		row=row+1
	endif
	LIST$[row]=esdel$
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	!Call AddToStr(e$,rstr$,esdel$) ! end of section
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POLineList" + fdel$ ! section name
	webstr$="CntrlId",fdel$
	WebStr$=webstr$,"LineId",fdel$
	WebStr$=WebStr$,"ProdID",fdel$
	Webstr$=webstr$,"Desc1",fdel$
	webstr$=webstr$,"Desc2",fdel$
	webstr$=webstr$,"VendProdId",fdel$
	webstr$=webstr$,"LastRcvdDate",fdel$
	Webstr$=Webstr$,"CostUm",fdel$,"CostUmID",fdel$,"CostFactor",fdel$
	Webstr$=Webstr$,"QtyUm",fdel$,"QtyUmId",fdel$,"QtyFactor",fdel$
	WebStr$=WebStr$,"POQty",fdel$
	Webstr$=Webstr$,"POUnitCost",fdel$
	webstr$=webstr$,"POExtCost",fdel$
	WebStr$=WebStr$,"PrevQty",fdel$
	Webstr$=Webstr$,"PrevUnitCost",fdel$
	webstr$=webstr$,"PrevExtCost",fdel$
	WebStr$=WebStr$,"CurrQty",fdel$
	Webstr$=Webstr$,"CurrUnitCost",fdel$
	webstr$=webstr$,"CurrExtCost",fdel$
	webstr$=webstr$,"Close",fdel$
	Webstr$=Webstr$,"Whse",fdel$
	webstr$=webstr$,"ExtWeight",fdel$
	webstr$=webstr$,"Weight",fdel$
	webstr$=webstr$,"WgtFactor",fdel$
	webstr$=webstr$,"WgtUm",fdel$
	let list$[1]=webstr$
	row=2
	tmpcnt=maxcnt
	if returnstatus<>0 ! no errors send over the data
		
		LET keyappol$=" ",keyappol$                                   
		LET keyappol$[1,6]=vendid USING "######" \ LET keyappol$[7,18]=transid$[1,12]       
		LET keyappol$[19,20]=transtype USING "##" \ LET keyappol$[21,26]=poid USING "######"
		do
			SEARCH #CH_APPOL,3,1;KEYAPPOL$,REC_APPOL,E
			IF E<>0 EXIT DO
			LET TMP3=KEYAPPOL$[1,6]\IF TMP3<>VENDID EXIT DO
			IF KEYAPPOL$[7,18]<>TRANSID$[1,12] EXIT DO
			LET TMP3=KEYAPPOL$[19,20]\IF TMP3<>TRANSTYPE EXIT DO
			LET TMP3=KEYAPPOL$[21,26]\IF TMP3<>POID EXIT DO
			!LET keyappol$[27,29]=poc.LineNum USING "###"                                   
			!LET keyappol$[30,35]=POC.CntrlNum USING "######"                              
			read record #ch_appol,rec_appol;appol.;	 
			! get the poline
			let keypol$=" ",keypol$
			let keypol$[1,6]=poid using "######"
			let keypol$[7,9]=appol.LineNum using "###"
			let keypol$[10]=""
			rec_pol = filegetpoline(e$,ch_pol,"=",1,keypol$,pol.)
			if rec_pol<=0 goto getnxtpoc:
			X2 = POL.flags ! ! REM UNPACK pol.Flags TO FLAGS[x]
			For K = 0 To 11                                    
				flags[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)   
			Next K                                             
			NonStk = flags[0]                                  
			Closedshort = flags[1]                             
			Zline = flags[2]                                    
			IF zline<>0 goto getnxtpoc: ! 
			if pol.Status=1 and pol.QtyRcvdToDate=0  goto getnxtpoc:! not received and not qty received                 		
			! Find product/nonstock
			If Not(NonStk) ! it's a prod
				rec_prod=pol.ProdDescRec
				Read record #ch_prod,rec_prod,0;PR.;
			else		
				Read Record #ch_nstk,pol.ProdDescRec;nstk.;
			endif
			Call SetPRtoPol() !!! 
			LET QTYUMid=pol.QtyUm                       
			IF appol.CWFlag LET QTYUMid=-3  ! catch weight item qty in lbs
			COSTUMID=pol.CostUm
			!------quantity conversions-----------
			! poqty, prevqty, currqty                          
			if not (appol.CWFlag)    ! not catchweight by lb item
				let poqty=0
				LET CNVTA=pol.QtyRcvdToDate
				if cnvta<>0
					LET CNVTU[0]=0 \ LET CNVTU[1]=qtyumid \ LET CNVTU[2]=1
					amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)
					let poqty=amount ! po qty received
				endif
				let prevqty=0  			
				let cnvta=pol.TotApQty +(pol.ApQtyPend-appol.APQty) !poc.ApQtyRcvd  +(poc.ApQtyAppl-appol.APQty)
				if cnvta<0 let cnvta=0
				if cnvta<>0
					 LET CNVTU[0]=0 \ LET CNVTU[1]=qtyumid \ LET CNVTU[2]=1
					 amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)
					 let prevqty=amount ! previous ap qty applied 
				endif
				let currqty=0                            
				LET CNVTA=appol.APQty ! appol.APQty
				if cnvta<>0
					 LET CNVTU[0]=0 \ LET CNVTU[1]=qtyumid \ LET CNVTU[2]=1    
					 amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)
					 let currqty=amount ! current ap qty applied
				endif                           
			else  
				! catchweight by lbs --- qty is in lbs
				let poqty= pol.QtyRcvdToDate                                                 
				let prevqty=pol.TotApQty +(pol.ApQtyPend-appol.APQty) ! poc.ApQtyRcvd+(poc.ApQtyAppl-appol.APQty)                                          
				let currqty=appol.APQty                                                        
			endif
			!------cost conversions-------
			! pocost, currcost --- no prevcost is retained
			let pocost=0
			LET CNVTA=pol.NetCost
			if cnvta<>0
			        lET CNVTU[0]=0 \ LET CNVTU[1]=costumid \ LET CNVTU[2]=2                                      
				amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)
				let pocost=amount
			End If                              
			currcost=0
			if not (appol.CWFlag)                         
				LET CNVTA=appol.APCost
				if cnvta<>0
					prodfact=PR.LbsFact;prodlbs=PR.LbsUnit ! save product weight factors
					let PR.LbsFact=appol.LbsFact;PR.LbsUnit=appol.LbsUnit
					LET CNVTU[0]=0 \ LET CNVTU[1]=costumid \ LET CNVTU[2]=2 
					amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)
					let currcost=amount ! current ap cost                  
					let PR.LbsFact=prodfact;PR.LbsUnit=prodlbs
				endif
			else                                                                       
				let currcost=appol.APCost ! appol.APCost                                                       
			endif                                                                           
			!------extended amount conversions-------
			let poextcost=0;currextcost=0;prevextcost=0
			if not(appol.CWFlag)
				lineqty=pol.QtyRcvdToDate !pol.qtyship
				lineum=costumid
				linecost=pol.NetCost !pol.unitcost
				lineextamt=0
				lbsunit=appol.LbsUnit
				lbsfact=appol.lbsfact
				prodfact=PR.LbsFact;prodlbs=PR.LbsUnit ! save product weight factors
				let PR.LbsFact=appol.LbsFact;PR.LbsUnit=appol.LbsUnit
				call calcextamt(lineqty,lineum,linecost,lineextamt,lbsunit,lbsfact)
				let PR.LbsFact=prodfact;PR.LbsUnit=prodlbs
				let poextcost=lineextamt
				! for ext curr ap cost
				lineqty=appol.APQty !pol.qtyship
				lineum=costumid
				linecost=appol.APCost !pol.unitcost
				lineextamt=0
				lbsunit=appol.LbsUnit
				lbsfact=appol.lbsfact
				prodfact=PR.LbsFact;prodlbs=PR.LbsUnit
				let PR.LbsFact=appol.LbsFact;PR.LbsUnit=appol.LbsUnit                  		
				call calcextamt(lineqty,lineum,linecost,lineextamt,lbsunit,lbsfact)
				let PR.LbsFact=prodfact;PR.LbsUnit=prodlbs
				let currextcost=lineextamt
			else
				! lb for lb 
				poextcost=fnr(pol.QtyRcvdToDate*pol.NetCost) ! poc.PoCost)
				currextcost=fnr(appol.Apqty*pol.NetCost)
			endif
			let prevextcost=POL.TotApExtCost-APPOL.ExtCost! poc.ApAmtRcvd
			If prevextcost<0 let prevextcost=0
			QTYUM$=xunit$(QTYUMID,ch_ccode) ! u/m
			COSTUM$=xunit$(COSTUMID,ch_ccode) 
			WEBSTR$=""
			webstr$=(appol.CntrlId using "######"),fdel$ ! cntrl #
			WebStr$=webstr$,(appol.LineNum),fdel$
			WebStr$=webstr$,pol.prodcode$,fdel$ ! prodid
			Webstr$=webstr$,RTrim$(pol.desc1$),fdel$  ! desc1
			WebStr$=WebStr$,RTrim$(pol.desc2$),fdel$  ! desc 2
			webstr$=webstr$,rtrim$(pol.VendProdCode$),fdel$
			if pol.DateLastRcvd<>0
				let xdate$=pdate$(pol.DateLastRcvd)
			else
				let xdate$=""
			endif
			webstr$=webstr$,xdate$,fdel$ !"LastRcvdDat
			x3=umtofactor(costumid) ! get um for factor
			if not(x3) let x3=1
			Webstr$=Webstr$,rtrim$(CostUm$),fdel$,str$(CostUmID),fdel$,str$(x3),fdel$
			X3 = UMtoFactor(qtyumid) ! get qty um factor
			if not(x3) let x3=1
			Webstr$=Webstr$,rtrim$(QtyUm$),fdel$,str$(QtyUmId),fdel$,str$(x3),fdel$
			WebStr$=WebStr$,(POQty Using QMask$),fdel$
			Webstr$=Webstr$,(POCost  Using PMask$),fdel$
			webstr$=webstr$,(POExtCost   using "----------.##"),fdel$
			WebStr$=WebStr$,(PrevQty Using QMask$) ,fdel$
			Webstr$=Webstr$,"",fdel$ ! not available
			webstr$=webstr$,(PrevExtCost using "----------.##"),fdel$
			WebStr$=WebStr$,(CurrQty Using QMask$),fdel$
			Webstr$=Webstr$,(CurrCost Using PMask$),fdel$
			webstr$=webstr$,(CurrExtCost using "----------.##"),fdel$
			let tmp$="N"
			if rec_appol>0
				if appol.APClose<>0 let tmp$="Y"
			else
				if pol.CloseAP<>0 let tmp$="Y"
			endif
			webstr$=webstr$,tmp$,fdel$ ! close
			Webstr$=Webstr$,(appol.Whse using "##"),fdel$ !
			if pol.ExtWght>0 ! poc.PoWgtRcvd>0
				webstr$=webstr$,(pol.ExtWght using "----------.##"),fdel$
			else
				webstr$=webstr$,"",fdel$
			endif
			if  not(appol.lbsfact)
				let appol.lbsunit=pol.lbsunit
				let appol.lbsfact=pol.lbsfactor
			endif
			if appol.lbsfact=0 let appol.lbsfact=1
			WebStr$ = WebStr$,LTrim$(appol.LbsUnit Using "##########.##"),fdel$ ! unit weight
			WebStr$ = WebStr$,Str$(appol.LbsFact),fdel$! weight factor                                                                    
			tmp$ = Str$(appol.LbsFact)                                          
			Call factorum(tmp$) ! get um for factor                             
			WebStr$ = WebStr$,RTrim$(tmp$),fdel$ ! wgt um
			list$[row]=webstr$
			row=row+1
			If row > tmpcnt Let tmpcnt = expandarray(e$,List$[])
			
			getnxtpoc:  !get the next control #
		loop
		
	endif
	endgetappol: ! 
	let list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	
	
	dim appoht. as appohh
	
	if rec_appoh>0
		read record #ch_appoh,rec_appoh;appoh.;
		mat Read #ch_appoh,rec_appoh,48;aph3;
		mat read #ch_appoh,rec_appoh,58;aph4;
	else
		rec_appoh=-1
		clear appoh.
		for ctr=0 to 4
			let aph3[ctr]=0
			let aph4[ctr]=0
		next ctr
	endif
	
	
	endgetappotot: ! 
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POTotalInfo" + fdel$ ! section name
	webstr$=""
	webstr$="AcctPayAmt",fdel$
	webstr$=webstr$,"Applied",fdel$
	webstr$=webstr$,"Variance",fdel$
	webstr$=webstr$,"FreightPO",fdel$
	webstr$=webstr$,"FreightPrev",fdel$
	webstr$=webstr$,"FreightCurr",fdel$ ! *****
	webstr$=webstr$,"FreightVar",fdel$
	webstr$=webstr$,"MiscChrgPO",fdel$
	webstr$=webstr$,"MiscChrgPrev",fdel$
	webstr$=webstr$,"MiscChrgCurr",fdel$
	webstr$=webstr$,"MiscChrgVar",fdel$
	webstr$=webstr$,"VendorID",fdel$
	
	let list$[1]=webstr$
	row=2
	if returnstatus<>0 ! no errors send over the data
		let poh.apamtpend=poh.apamtpend-appoh.totap
		let poh.freightapplpend=poh.freightapplpend-appoh.totfrgt
		let poh.miscapplpend= poh.miscapplpend-appoh.totmisc
		
		IF P61$[60,60]="Y" AND POH.TotGlRec<>0
			LET TOTPOREC=POH.TotGlRec           
		ELSE                             
			 LET TOTPOREC=POH.TotPoRcvd             
		ENDIF 
		totappld=0
		LET KEYAPPOH$=" ",KEYAPPOH$                                               
		LET CHKKEY$[1,6]=vendid USING "######"                                     
		LET CHKKEY$[7,18]=TRANSID$[1,12]                                               
		LET CHKKEY$[19,20]=TRANSTYPE USING "##"
		
		eflag=0
		LET KEYAPPOH$=" ",KEYAPPOH$
		let keyappoh$[1,20]=chkkey$[1,20]
		do               
			SEARCH #ch_appoh,3,1;KEYAPPOH$,rec_appoh,E 
			IF e>0 exit do                                                                 
			IF KEYAPPOH$[1,20]<>CHKKEY$[1,20] exit do                         
			read record #ch_appoh,rec_appoh;appoht.;
			let totappld=totappld+appoht.TotAP+appoht.TotFrgt+appoht.TotMisc	
		loop                 
		webstr$=trim$(aph.OriginalAmount using "-----------.##"),fdel$ !AcctPayAmt
		webstr$=webstr$,(totappld using "-----------.##"),fdel$ ! Applied 
		webstr$=webstr$,((aph.OriginalAmount-totappld) using "-----------.##"),fdel$ 
		webstr$=webstr$+(POH.TotPoFreightRec using  "-----------.##"),fdel$ ! po freight
		webstr$=webstr$+((POH.TotFreightAppl+POH.FreightApplPend) using  "-----------.##"),fdel$ ! prev freight
		webstr$=webstr$+(appoh.TotFrgt using  "-----------.##"),fdel$ ! curr freight
		webstr$=webstr$+(((POH.TotFreightAppl+POH.FreightApplPend+appoh.TotFrgt)-POH.TotPoFreightRec) using  "-----------.##"),fdel$ ! var
		webstr$=webstr$+(POH.TotMiscCharges using  "-----------.##"),fdel$
		webstr$=webstr$+((POH.TotMiscAppl+POH.MiscApplPend) using  "-----------.##"),fdel$
		webstr$=webstr$+(appoh.TotMisc using  "-----------.##"),fdel$
		webstr$=webstr$+(((POH.TotMiscAppl+POH.MiscApplPend+appoh.TotMisc)-POH.TotMiscCharges) using  "-----------.##"),fdel$
		webstr$=webstr$+str$(vendid),fdel$
		
		LIST$[2]=WEBSTR$
		row=row+1
	endif
	LIST$[row]=esdel$
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	!Call AddToStr(e$,rstr$,esdel$) ! end of section
	Clear List$[]                                                         
	List$[0] = bsdel$ + "POTotalMisc" + fdel$ ! section name
	webstr$="MiscCode",fdel$
	webstr$=webstr$,"Description",fdel$
	webstr$=webstr$,"MiscAmount",fdel$
	let list$[1]=webstr$
	row=2
	if returnstatus<>0 ! no errors send over the data
		for ctr=0 to 4
			if aph3[ctr]<>0
				webstr$=str$(aph3[ctr]),fdel$
				read record #ch_misc,aph3[ctr];misc.;
				let tmp$=misc.desc$
				webstr$=webstr$+Rtrim$(tmp$)+fdel$
				webstr$=webstr$+ Rtrim$(aph4[ctr] Using "-----------.##") + fdel$
				list$[row]=webstr$
				row=row+1
			endif
		next ctr
	endif
	let list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	clear list$[]
	! status section
	If returnstatus=1 let message$="OK"
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	!call SetOutput(e$,rstr$)


	goto outend: 








	

	


	

!--------------------------------------------------------------------
Sub SetPRtoPol()
! set up prod (PR.) with line values (stock & NonStock)
 Try
	Dim 1%,PFU1[20]
	Dim 3%,PFU2[6]
	IF ZLINE GOTO L30099:    ! stock factors 
	if NonStk<>0
		let rec_nstk=pol.ProdDescRec !!!! IS THIS THE LINE
		read record #ch_nstk,rec_nstk;nstk.;
		clear pr.                                             
		pr.baseum=nstk.BaseUM ! nsd1[2]
		pr.um2=nstk.CostUM !    nsd1[3]
		pr.um3=nstk.PurchUM !nsd1[4]
		pr.um4=nstk.StockUM !nsd1[5]
		pr.UMStkDefault = nstk.StockUM ! NSD1[5]
		pr.UMPurchDefault=nstk.PurchUM ! NSD1[4]
		pr.UMCostDefault= nstk.CostUM  ! NSD1[3]
		pr.UM2Fact=nstk.CostFact !nsd3[3]
		pr.UM3Fact=nstk.POFact !nsd3[4]
		pr.UM4Fact=nstk.StkFact !nsd3[5]                                             
		pr.LbsFact=nstk.WgtFact !NSD3[7]
		pr.LbsUnit=nstk.Wgt  !NSD3[6]  
		IF NOT(pr.LbsUnit) LET pr.LbsUnit=1;pol.LbsFactor=1    
		LET pr.CubicFeet=nstk.Cube;pr.CubicFtFactor=nstk.CubeFact
		IF NOT(pr.CubicFtFactor) LET pr.CubicFtFactor=1;pol.CbfFactor=1
		pr.comdtycode$=nstk.cmdtycode$
		pr.RollLbItem$="N"                          
		LET pr.UM5=0                                          
		LET pr.UM6=0;pr.UM7=0;pr.UM8=0
		CHGSTK=0
		                                  
		
	endif
	! below gets rid of dupes - not easy with names - so load into pfu1,pfu2
	PFU1[0]=pr.BaseUM
	pfu1[1]=pr.UM2;PFU2[0]=pr.UM2Fact
	Pfu1[2]=pr.UM3;pfu2[1]=pr.UM3Fact
	pfu1[3]=pr.UM4;pfu2[2]=pr.UM4Fact
	pfu1[4]=pr.UM5;pfu2[3]=pr.UM5Fact
	FOR X1=1 TO 4                                                   
		FOR X2=0 TO X1-1                                              
			IF PFU1[X1]=PFU1[X2] LET PFU1[X1]=0;PFU2[X1-1]=0            
		NEXT X2                                                       
	NEXT X1 
	! now reload checked um's to names
	pr.BaseUM=PFU1[0]
	pr.UM2=pfu1[1];pr.UM2Fact=PFU2[0]
	pr.UM3=Pfu1[2];pr.UM3Fact=pfu2[1]
	pr.UM4=pfu1[3];pr.UM4Fact=pfu2[2]
	pr.UM5=pfu1[4];pr.UM5Fact=pfu2[3]
	L30099: ! finito	
 else
    include "src/callsuberr.inc"
 end try
end sub ! SetPRtoPol
! --------------------------------------------------------------------------------------

!--------------------------------------------------------------------
Sub CalcExtAmt(lineqty,lineum,linecost,lineextamt,lbsunit,lbsfact)

! bring extended amount to costing unit of measure factors
! cost should be in base 
 Try
	 Dim 1%,CNVTU[2],FLAG,e
	dim 3%,tmpqty,tmpcost
	DIM 3%,CNVTA
	lineextamt=0
	if lineqty=0 exit sub ! no qty extension will be zero
	if linecost=0 exit sub ! no cost exension will be zero
	If lineum=-2 ! lot costing 
		let lineextamt=linecost
		exit sub
	endif
	if lineum>=0                                                   
		LET CNVTA=lineqty
		let CNVTU[0]=0 ! currently in base
		let CNVTU[1]=lineum ! unit of measure
		let CNVTU[2]=5 
		Amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)
		let tmpqty=amount
                                                
	                                                                   
		LET CNVTA=linecost
		CNVTU[0]=0
		CNVTU[1]=lineum
		CNVTU[2]=2 
		Amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)                                                                  
		LET tmpcost=AMOUNT                                                      
		LET lineextamt=FNR(tmpqty*tmpcost)
		exit sub
	endif
	
	IF lineum=-1 or lineum=-3! cwt 
		let tmpqty=lineqty
		LET CNVTA=linecost
		CNVTU[0]=0
		CNVTU[1]=lineum
		CNVTU[2]=2 
		Amount = ConvProdAmount(e$,CNVTU[],CNVTA,CTLCHAN,FLAG,PR.)                                                                  
		LET tmpcost=AMOUNT                              
		if lineum=-1 ! cwt
			LET lineextamt=FNR(tmpcost*(lbsunit*tmpqty/lbsfact)/100)
			exit sub
		endif
		if lineum=-3 ! per lb
			LET lineextamt=FNR(tmpcost*(lbsunit*tmpqty/lbsfact))
			exit sub
		endif
	endif
 else
    include "src/callsuberr.inc"
  end try
end sub ! CalcExtAmt

!--------------------------------------------------------------------------------------------------------
Function UMtoFactor(UMRec)
! from sent um # - get um factor for it
! if no match - send factor back as one (base?)
 Try
	
	dim 3%,factor
	let factor=0
	if umrec<=0 exit function 0 ! no um - no factor!
	If umrec=Pr.BaseUM let factor=1
	if umrec=PR.UM2 let factor=pr.UM2Fact
	if umrec=PR.UM3 let factor=pr.UM3Fact
	if umrec=PR.UM4 let factor=pr.UM4Fact
	if umrec=PR.UM5 let factor=pr.UM5Fact
	if umrec=PR.UM6 let factor=pr.UM6Fact
	if umrec=PR.UM7 let factor=pr.UM7Fact
	if umrec=PR.UM8 let factor=pr.UM8Fact
	
 else
    include "src/callsuberr.inc"
  end try
end Function Factor ! umtofactor

!--------------------------------------------------------------------
Sub Factorum(tmp$)
! from sent factor (in tmp$) - get um text for it
! if no match - send factor back as um
 Try
	dim um$[4]
	dim 1%,umrec
	dim 3%,factor
	let factor=tmp$
	if factor<=0 let factor=1
	umrec=0
	if factor=pr.UM2Fact let umrec=PR.UM2
	if factor=pr.UM3Fact let umrec=PR.UM3
	if factor=pr.UM4Fact let umrec=PR.UM4
	if factor=pr.UM5Fact let umrec=PR.UM5
	if factor=pr.UM6Fact let umrec=PR.UM6
	if factor=pr.UM7Fact let umrec=PR.UM7
	if factor=pr.UM8Fact let umrec=PR.UM8
	If factor=1 let umrec=pr.BaseUM
	if umrec>0
		Read record #ch_Ccode,umrec,0;UMC.;
		let tmp$=umc.Code$ ! send back um attached
	Else
		if factor=1000 ! hardcode an "M"?
			tmp$="M" ! why not
		Else
			Let tmp$=Str$(Factor) ! send back w/no um (factor instead of um)
		Endif
	Endif
 else
    include "src/callsuberr.inc"
  end try
end sub ! Factorum



outend: ! all done
	Close #VENDChan
	If aphchan>0 Close #aphchan
	if ch_poh>0 close #ch_poh
	if ch_pol>0 close #ch_pol
	if ch_appoh>0 close #ch_appoh
	if ch_appol>0 close #ch_appol
	IF ch_misc >0 close # ch_misc       
	IF Ch_Prod >0 close #ch_prod
	IF Ch_Wh >0 close #ch_wh
	IF Ch_Ccode>0 close #ch_ccode
	IF ch_nstk>0 close #ch_nstk 
    IF ch_poc>0 close #ch_poc    
	
        Close #CTLChan
	!
	! List$[row]=esdel$ ! end of section
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! GetVendAPPOTran
