! 1.0 03/14/2010 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp766.dl4 src/serp766.src
!
! from original code
Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC  3, 2008  16:05:24
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/mx766.src (univ2) [mary] {60903}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX766    MISC CHARGE MAINT
Rem
Rem Last Update: zyc 07/17/00 cct137682 modified the prompt
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"

Declare Intrinsic Sub InpBuf,String
Option Default Dialect IRIS1
External Lib "ubsfunc.dl4"
Declare External Function openfile

dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[500],tmp2$[1000],b$[200]
b$=" ",b$
dim message$[150],webstr$[200]
!
! call dxopen()
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)

! If Err 0 Gosub ERR_TRAP
Dim 1%,J9[2],J0,J2,J3,J4,J5,J6,J8,X1
Dim 2%,X2
Dim 3%,J,J1
Dim J$[75],J0$[10],J1$[75],J2$[40],J3$[40],J5$[75],J7$[75],J9$[75],J4$[75]
Dim X$[10],P9$[50],J6$[40]
Dim J8$[6],P60$[50],C$[36]
Dim 1%,MS1[2],MS2[2]
Dim 3%,D0,MS3
Dim 2%,D,K,K1
Dim K$[25]
Dim U5$[50],MS$[32]
Dim F$[16]
Dim 3%

! Print @0,0;'CS'; Tab 20;"Miscelleneous Charges ";
! Print @0,5;"Option:  1> Sales Orders ";
! Print @0,7;"         2> Purchase Order ";
! ASKOPT: Rem!
! Print @0,23;'CL';"Enter Option Desired or <CR>: end ";
! Input Len (16384 + 1);""J4$
! Call String(1,J4$)
! If J4$ = "" Goto OUTEND
! OPT = J4$
! If OPT < 1 Goto ASKOPT
! If OPT > 2 Goto ASKOPT
! If OPT = 2 Chain "MX766PO"

W = 0
Read #1,88,2032;F$;
Open #2,F$
Z9 = Chf(2) - 1
if z9<0 let z9=0
Mat Read #1,19,50;P9$; \ Read #1,60,50;P60$;
If P9$[17,17] = "Y" Or P9$[17,17] = "M"
	Read #1,88,176;F$; \ Open #3,F$
End If


if action1$ <> "GETLIST"
	call dxget("ID", tmp$) \ K1 = tmp$
	if K1 < 1 OR k1 > 999
		e$ = "Invalid charge code.  Must be between 1 and 999."
		error 10000
	end if
	gosub GetCharge:
end if

!
! get wh list
!
select case action1$
	case "GETLIST"
		gosub BuildDroplist
		! status section
		Message$=""
	case "GETDATA"
		gosub LoadData
		! status section
		Message$=""
	case "SUBMITDATA"
		gosub UnloadDataAndSave
		! status section
		message$ = "Charge updated."
	case "DELETE"
		gosub DeleteCharge
		! status section
		Message$="Charge deleted."
	case else
		e$ = "Unknown action1: "+action1$ \ error 10000
endselect
! message should be set.  if we got here - we've got a good status
ReturnStatus=1
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
goto OutEnd:


! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************

!----------------------------------------------------------------------------
! build a list of misc charge codes to send back to the web
!----------------------------------------------------------------------------
BuildDropList:
	tmp$ = bsdel$+"DropList"+fdel$+rdel$+"ID"+fdel$+"Desc"+fdel$+rdel$
	call AddToStr(e$, rstr$, tmp$)
	for k1 = 1 to 999
		gosub GetCharge:
		If MS1[2] AND (MS$ <> "" AND MS$[1,5] <> "     ")
			tmp$=str$(k1)+fdel$+str$(k1)+" - "+ms$[1,20]+fdel$+rdel$
			call addToStr(e$, rstr$, tmp$)
		end if
	next k1
	call addToStr(e$,rstr$,esdel$)
Return

!----------------------------------------------------------------------------
! load data of selected misc. charge
!----------------------------------------------------------------------------
LoadData:
	Gosub InitCharge:
	tmp$ = bsdel$+"Table"+fdel$+rdel$+"ID"+fdel$+"Desc"+fdel$+"GPInc"+fdel$
	tmp$ = tmp$+"Taxable"+fdel$+"GLAcct"+fdel$
	call addToStr(e$,rstr$,tmp$+rdel$)
	tmp$ = str$(k1)+fdel$+ms$[1,20]+fdel$+str$(ms1[1])+fdel$
	tmp$ = tmp$+str$(ms2[0])+fdel$+str$(ms3)+fdel$
	call addToStr(e$,rstr$,tmp$+rdel$+esdel$)
	!
	! build GL droplist
	!
	tmp$ = bsdel$+"GLDropList"+fdel$+rdel$+"ID"+fdel$+"Desc"+fdel$+rdel$
	call addToStr(e$, rstr$, tmp$)
	tmp$="0"+fdel$+"Default GL-AR Account"+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$)
	If P9$[17,17] = "Y" Or P9$[17,17] = "M"
		K$ = " ",K$
		do
			Search #3,3,1;K$,R1,E \ if e > 2 error 42
			If E exit do
			tmp = k$
			if tmp > 0
				Mat Read #3,R1,0;C$;
				tmp$=k$[1,9]+fdel$+k$[1,9]+" - "+c$[15,36]+fdel$
				call addToStr(e$,rstr$,tmp$+rdel$)
			end if
		loop
	end if
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! load data of selected misc. charge
!----------------------------------------------------------------------------
UnloadDataAndSave:
	If k1>chf(2)-1 ! new record is greater than file size
		let ms$=" ",ms$
		for ctr=0 to 2
			let ms1[ctr]=0
			let ms2[ctr]=0
		next ctr
		MS3=0
		for ctr=chf(2) to k1
			MS1[0] = ctr
			Try
				Mat Write #2,ctr;MS1
				Mat Write #2,ctr,6;MS$
				Mat Write #2,ctr,38;MS2
				Mat Write #2,ctr,44;MS3;
			else
				! do not write out
			end try

		next ctr
	 endif
	
	Gosub InitCharge:
	call DxGet("Desc",tmp$) \ tmp$ = ucase$(tmp$) \ ms$[1,20]=tmp$+b$
	call DxGet("GPInc", tmp$) \ ms1[1] = tmp$
	call DxGet("Taxable", tmp$) \ ms2[0] = tmp$
	Call DxGet("GLAcct", tmp$) \ ms3[0] = tmp$
	Gosub WriteCharge:
Return

!----------------------------------------------------------------------------
! read the charge record based on K1
!----------------------------------------------------------------------------
GetCharge:  ! get charges
Try
	Mat Read #2,K1;MS1;
	Mat Read #2,K1,6;MS$;
	Mat Read #2,K1,38;MS2;
	Mat Read #2,K1,44;MS3
else
	! clear variables
	let ms$=" ",ms$
	for ctr=0 to 2
		let ms1[ctr]=0
		let ms2[ctr]=0
	next ctr
	MS1[0] = K1
	MS3=0
end try
Return

WriteCharge:

	Mat Write #2,K1;MS1
	Mat Write #2,K1,6;MS$
	Mat Write #2,K1,38;MS2
	Mat Write #2,K1,44;MS3;
Return

!----------------------------------------------------------------------------
! preload all the stuff we know HAS to be
!----------------------------------------------------------------------------
InitCharge:
	ms1[2] = 2 ! misc. charge always for order (PO are elsewhere now)
	! if no GL module, default 0 to gl code
	If P9$[17,17] <> "Y" And P9$[17,17] <> "M" ms3 = 0
	ms1[0] = k1 ! default record number to code
Return

DeleteCharge:
	MS$ = " ",MS$
	MS1[0] = 0;MS1[1] = 0;MS1[2] = 0
	MS3 = 0
	Mat Write #2,K1;MS1
	Mat Write #2,K1,6;MS$
	Mat Write #2,K1,44;MS3;
Return

OUTEND: Rem EXIT ROUTINE
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end



