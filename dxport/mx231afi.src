! --- mx231afi
! description Freight Invoice list/select
!
! 1.0 mm/dd/yyyy change??
!
! loadsave -w -n 100,10 -o prog/dxport/mx231afi.dl4 src/mx231afi.src
!
Rem MX231AFI  INVOICE SELECTOR FOR FREIGHT INVOICE
Rem  AUTHOR: G.DOSCHER   7/17/80
Rem  LAST UPDATE: roman 05/30/1991. fix screen prompts
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY 19, 2008  10:43:20
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx2/mx231afi.src (univ2) [txc] {61201}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!     This program has S9[1] & S9[2] passed to it from 231a
!      S9[1]=customer record #, S9[2]=header record #
!     From here the user selects which invoice from history
!     they will be charging freight only to (no line items).
!
!     They can select none, whereas nothing changes on the
!     order header, or select one which changes misc. things
!     (see 3500 routine)
!     CH0, etc are the ORDER variables, Regular H0, etc  are HISTORY
include "src/copyright.inc"
!
! *declare additional external libs & subs & functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub SubErr,GetDelimiters
External Lib "ubsfunc.dl4"
Declare External Function openfile,JDate$,PDate$
Declare External Sub getportdefault
Declare Intrinsic Sub FormatDate,InpBuf,String,programdump
Declare Intrinsic Sub DateToJulian
! Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
Dim J4$[50],1%,Z9[9],3%,S9[9]

Dim 1%,E,F,J,Q,Y9,H3[1],H4[2],CH3[1],CH4[2],csplitflag,splitflag
Dim 2%,B1,C,C1,C2[12],D,H,H0[12],H5[16],H6[8],I2,I3,J1,L1
Dim 2%,Q2,T1[1],V2,X2,AXCESS,CH0[12],CH5[16],CH6[8]
Dim 2%,CDPT,DPT,INVDATE,JDate[5]
dim 2%,cslsm[9],ccommbase[4],slsm[9],commbase[4],csplt[4],ccsplt[4]
Dim 3%,T2[20],K5$[50],D1$[8],H0$[20],S1$[118],S2$[20]
Dim A$[64],C$[30],C1$[137],F$[64],I$[32],N$[34],P$[10],P0$[20]
Dim P9$[50],Q$[64],V0$[12],X$[10],I1$[5]
Dim CH0$[20],CS1$[118],CS2$[20],CP0$[20],CV0$[12]
Dim 2%,S5,CS5,S6[1],CS6[1],SRN[3],CSRN[3]
Dim 3%,OREF[5],N0,H1,V1,COREF[5],R[99]
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim action$[30],options$[30],userid$[8],blank$[200],action1$[30],Action2$[30]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
dim tmp$[1200],tmp1$[300],Msg$[150],List$[50,1000]
dim Message$[200],WebStr$[2000],SessionID$[200]
! call dxopen() ! done in menu
call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
blank$=" ",blank$
maxcnt=50
! If S9[1] <= 0 Or S9[2] <= 0 Goto L_9030
!Window Open @0,0; Size Msc(33),Msc(34);
!If Err 0 Gosub ERR_TRAP
Read #1,88,1136;I$[1,16]; \ ROpen #98,I$
Read #1,88,1152;I$[1,16]; \ ROpen #99,I$
Read #1,88,1168;I$[1,16]; \ ROpen #97,I$
read #1,88,1808;i$[1,16]; \ ROpen #5,i$ ! customer
Read #1,88,1840;I$[1,16]; \ Open #8,I$
Read #1,88,1856;I$[1,16]; \ Open #9,I$
Read #1,88,1872;I$[1,16]; \ Open #10,I$
Mat Read #1,19,50;P9$;
MAT READ #1,0,182;INVDATE;
X$=invdate using "&&&&&&"
Call DateToJulian(1,X$,tmp$,e)
if e let tmp$=Str$(tim(6))
let JDate[0]=tmp$[1,5] ! inv date in julian (go back only 1 yr in history!)
!Gosub L_4000
!Goto L_330
! need same info all actions!
call dxget("CUSTID",tmp$)
CustNo=tmp$
if custno>0 and custno<1000000
	tmp$=" ",tmp$;tmp$=CustNo Using "######"
	search #5,2,1;tmp$,R,E
Else
	e=1
Endif
if e
	returnstatus=0
	message$="Customer not found"
	goto OutEnd
Endif
S9[1]=R ! customer rec
i2=custno
Call dxget("ORDERID",tmp$)
OrderNo=tmp$
if orderno<1 or orderno>999999 or fra(orderno)
	let e=1
Else
	tmp$=" ",tmp$
	tmp$[1,6]=custno using "######"
	tmp$[7,12]=Orderno using "######"
	search #8,2,2;tmp$,R,E
Endif
if e
	returnstatus=0
	message$="Order not found"
	goto OutEnd
Endif
S9[2]=R ! order rec
action1$=UCase$(RTrim$(action1$))
action2$=UCase$(RTrim$(action2$))
returnstatus=0
message$="Action1 not found"
select case action1$ ! go to various programs based on action
   case "GETINVLIST"
	! get the list of inv's for customer
	returnstatus=1
	message$="OK"
	clear List$[]
	list$[0]=bsdel$,"INVLIST",fdel$
	webstr$="INVOICEID",fdel$,"ORDERNO",fdel$,"INVDATE",fdel$
	webstr$=webstr$,"CUSTPO",fdel$,"SHIPTONAME",fdel$
	webstr$=webstr$,"WEIGHT",fdel$,"FRGTCHGD",fdel$
	webstr$=webstr$,"STATUS",fdel$,"ODETL",fdel$
	List$[1]=webstr$
	row=2
	M=6 ! always last first
	gosub L_1500 ! list 'em
	call addtostr(e$,rstr$,list$[])
	! end of getinvlist
   Case "SUBMITINV"
	! selected an invoice to copy
	Close #98
	Read #1,88,1136;I$[1,16]; \ Open #98,I$
	returnstatus=1
	message$="OK"
	call dxget("INVOICEID",tmp$)
	InvNo=tmp$
	if invno<=0 ! none is ok
		message$="NO INVOICE SELECTED-OK"
		goto outEnd
	Endif
	i$=Str$(invno)
	N0 = I$
	A$[1,6] = I2 Using "######"
	A$[7,16] = N0 Using "##########"
	D = 2
	C = 98
	Gosub L_2760
	Goto L_960 ! fail to find
	H1 = V1
	Gosub L_3360
	If H0[0] <> 30 Goto L_960 ! only invoices
	If H5[7] = 20 Goto L_960 ! already fi
	Gosub L_3310
	Goto L_3500
	! end of submitinv 
 end select  !action options
 goto outend

L_960: ! no good
	returnstatus=0
	Message$="Invalid Invoice"
Goto OutEnd ! L_810

L_1500: Rem LIST ALL ORDERS
! Gosub L_1010
A$ = " ",A$;A$[1,6] = I2 Using "######"
If M = 6 Let A$[7,12] = "}}}}}}"
L_1540: Search #98,M,2;A$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_1800
I3 = A$[1,6] \ If I2 <> I3 Goto L_1800
H1 = V1
Gosub L_3360
If H0[0] <> 30 Or H5[7] = 20 Goto L_1540 ! not inv or already frt inv
x$=h0[8] using "&&&&&&"
Call DateToJulian(1,x$,tmp$,e)
if e let tmp$="99999"
JDate[1]=tmp$[1,5]
if JDATE[1]<(JDATE[0]-365) GOTO L_1540 ! show only past year
r[0]=oref[4]
mat read #99,r,8;s1$; ! ship
r[1]=oref[5]
mat read #97,r[1],8;t2; ! totals

webstr$=Str$(OREF[1]),fdel$,Str$(H0[7]),fdel$
P$ = "" ! H0[8] Using "&&&&&&" \ Call FormatDate(P$)
If H0[8] let p$=PDate$(H0[8])
Webstr$=webstr$,P$,fdel$,RTrim$(P0$),fdel$
webstr$=webstr$,RTrim$(S1$[1,30]),fdel$ ! ship to name
webstr$=webstr$,LTrim$(T2[16] Using "########.##"),fdel$ ! weight shipped
webstr$=webstr$,LTrim$(T2[5] USING "########.##"),fdel$ ! frgt in totals
tmp$=""
If H5[4] = 0 tmp$="NOT FLAGGED" ! AWAITING FREIGHT" ! ; \ Return 
If H5[4] = 1 tmp$="WAITING FOR FREIGHT" ! ; \ Return 
If H5[4] = 2 tmp$="FREIGHT INVOICED" ! ;
webstr$=webstr$,tmp$,fdel$ 
tmp$=""
If H5[2] Or OREF[2]
  If H5[2] tmp$="On PO "+Str$(H5[2])+"  "
  If OREF[2]
    tmp$=tmp$+"Orig. Order "+LTrim$(OREF[2] Using "########")
    
  End If 
  
End If 
webstr$=webstr$,tmp$,fdel$
List$[row]=webstr$
row=row+1
if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
goto L_1540

L_1800: Rem NO MORE INVOICES
list$[row]=esdel$
Return

L_2100: Rem CHECK ON BILLTO
Q$ = " ",Q$;Q$ = C2[4] Using "######"
Search #5,2,1;Q$,V1,E \ If E Gosub ERR_SEARCH
Return 

L_2760: Rem SEARCH INDEX
Search #C,2,D;A$,V1,V2
If Not(V2) Return 1
Return 
L_3310: Rem "============================== read customer
Mat Read #5,C1,30;C$;
Mat Read #5,C1,142;C2;
Return 
L_3360: Rem READ HEADER REC.
Mat Read #98,H1;H0;
Mat Read #98,H1,52;H3;
Read #98,H1,446;P0$;
Mat Read #98,H1,104;H5;
mat  read #98,h1,278;slsm;
Read #98,h1,494;DPT;
Mat Read #98,H1,512;ORef;
mat read #98,h1,548;csplt;
mat Read #98,H1,598;SPLITFLAG;
mat Read #98,H1,600;commbase; 
Return 
L_3400: Rem NOT WAITING, DOUBLE CHECK
!If H5[4] = 2 Print @0,22;'RB CE';"THIS INVOICE HAS FREIGHT INVOICED";
!If H5[4] <> 2 Print @0,22;'RB CE';"THIS INVOICE IS NOT AWAITING FREIGHT";
!Print ",  DO ANYWAY? (Y/N)  ";
!Input ""I1$ \ Print @0,22;'CE';
!If I1$ = "Y" Return 1
!If I1$ <> "N" Goto L_3400
Return 1
L_3500: Rem GET HIST INV INFO & WRITE IN FI HEADER
Gosub L_2100 ! CHECK BILLTO
Gosub L_6000 ! READ HISTORY
! If H5[4] <> 1 Gosub L_3400 \ Goto L_810 ! cannot ask
let h5[4]=2 ! flag as invoiced!
Mat Write #98,H1,104;H5; ! added serp - record frgt invoiced!
Gosub L_6100 ! READ ORDER
If CH0[11] <> H0[11] Gosub SLSM_KEY
CH0[10] = H0[10]
CH0[11] = H0[11]
CH0[12] = H0[12]
CDPT = DPT
CH3[1] = H3[1]
CP0$ = P0$
CV0$ = V0$
CH4[0] = H4[0]
CH4[1] = H4[1];CH4[2] = H4[2]
CH0$ = H0$
CH5[5] = T2[16]
COREF[2] = OREF[1]
CH5[8] = H5[8]
CH5[9] = H5[9]
CH5[11] = H5[11]
CH5[12] = H5[12]
for i=0 to 9 \ cslsm[i]=slsm[i] \ next i  !"salesman code and comm %
CH6[0] = H6[0]
CH6[1] = 1
CH6[8] = H6[8]
csplitflag=splitflag ! "commission flag
for i=0 to 4 
	ccsplt[i]=csplt[i]
	ccommbase[i]=commbase[i] 
next i 
CS1$ = S1$
CS2$ = S2$
CS5 = S5
CS6[0] = S6[0]
CS6[1] = S6[1]
CSRN[0] = SRN[0]
CSRN[1] = SRN[1]
CSRN[2] = SRN[2]
CSRN[3] = SRN[3]
If CS6[1] > 0 Let CS6[1] = 0 - CS6[1]
If CS6[1] = 0 Let CS6[1] = (-1)
Gosub L_6200 ! WRITE ORDER
Returnstatus=1
Message$="Invoice copied to the order"
Goto OUTEND
L_4000: Rem "============================== check if axcess

L_4130: Return 
L_6000: Rem READ INV
Mat Read #98,H1,0;H0;
Mat Read #98,H1,52;H3;
mat read #98,h1,278;slsm;      
Mat Read #98,H1,446;P0$;
Mat Read #98,H1,66;V0$;
Mat Read #98,H1,78;H4;
Mat Read #98,H1,84;H0$;
Mat Read #98,H1,104;H5;
Mat Read #98,H1,408;H6;
Read #98,H1,494;DPT;
Mat Read #98,H1,512;OREF;
mat read #98,h1,548;csplt;
mat Read #98,H1,598;SPLITFLAG; 
mat Read #98,H1,600;commbase;  

Mat Read #99,OREF[4],8;S1$;
Mat Read #99,OREF[4],126;S2$;
Read #99,OREF[4],146;S5;
Mat Read #99,OREF[4],150;S6;
Mat Read #99,OREF[4],154;SRN;
Mat Read #97,OREF[5],8;T2;
Return 
L_6100: Rem CURRENT ORDER & SHIP INFO
H2 = S9[2]
Mat Read #8,H2,0;CH0;
Mat Read #8,H2,52;CH3;
Mat Read #8,H2,446;CP0$;
Mat Read #8,H2,66;CV0$;
Mat Read #8,H2,78;CH4;
Mat Read #8,H2,84;CH0$;
Mat Read #8,H2,104;CH5;
mat read #8,h2,278;cslsm;
Mat Read #8,H2,408;CH6;
Read #8,H2,494;CDPT;
Mat Read #8,H2,512;COREF;
mat read #8,h2,548;ccsplt;
Mat Read #8,H2,598;CSPLITFLAG;
Mat Read #8,H2,600;ccommbase;
!
Mat Read #9,CH0[2],8;CS1$;
Mat Read #9,CH0[2],126;CS2$;
Read #9,CH0[2],146;CS5;
Mat Read #9,CH0[2],150;CS6;
Mat Read #9,CH0[2],154;CSRN;
Return 
L_6200: Rem WRITE NEW CURRENT ORDER INFO
Mat Write #8,H2,0;CH0;
Mat Write #8,H2,52;CH3;
Mat Write #8,H2,446;CP0$;
Mat Write #8,H2,66;CV0$;
Mat Write #8,H2,78;CH4;
Mat Write #8,H2,84;CH0$;
Mat Write #8,H2,104;CH5;
mat write #8,h2,278;cslsm; 
Mat Write #8,H2,408;CH6;
Write #8,H2,494;CDPT;
Mat Write #8,H2,512;COREF;
mat write #8,h2,548;ccsplt;
Mat write #8,H2,598;CSPLITFLAG;
Mat write #8,H2,600;ccommbase; 
! NOW CURR SHIPTO
Mat Write #9,CH0[2],8;CS1$;
Mat Write #9,CH0[2],126;CS2$;
Write #9,CH0[2],146;CS5;
Mat Write #9,CH0[2],150;CS6;
Mat Write #9,CH0[2],154;CSRN;
Return 
SLSM_KEY: Rem Delete old and insert new key
A$ = " ",A$;A$[1,3] = CH0[11] Using "###";A$[4] = CH0[7] Using "###### "
Search #8,5,3;A$,V1,E \ If E Gosub ERR_SEARCH
If V1 <> H2 Let E = 1 \ Gosub ERR_SEARCH
A$[1,3] = H0[11] Using "###"
Search #8,4,3;A$,V1,E \ If E Gosub ERR_SEARCH
Return 
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
returnstatus=0
message$=msg$
Call programdump("tmp/mx231afise!","")
OUTEND: Rem EXIT ROUTINE
! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
L_9030: ! Chain ""
End 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"

End ! the whole program