! >>> Program serp217
!
! description change customer order is entered for
! loadsave -w -n 100,10 -o prog/dxport/serp217.dl4 src/serp217.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem     MX217 -  CHANGE CUSTOMER ON ORDER
Rem
Rem LAST UPDATE: NATE 8/2/94 - CLEANUP/BUG FIX
Rem BEDIT Version: 2.3 OBJECT CODE     Created: JUL 20, 2011  16:06:59
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/mx2/mx217.src (univ2) [bill] {03888}
Rem  Copyright (c) 2011 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/inc/fileedittrack.inc"
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function expandarray
External Lib "libedittrack.lib"
Declare External Sub MakeEdittrack
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,openfile
External Lib "ubscredck.dl4"
Declare External Sub GetCredCk
External Lib "getordtypd.lib"
Declare External Function Getordtypd$
External Lib "getcredcdd.lib"
Declare External Function Getcredcdd$
Declare Intrinsic Sub DateToJulian,Echo,FormatDate,InpBuf,String,Time,VerifyDate
!Option Default Dialect IRIS1

Com 2%,S9[9],J4$[50],SEL,SEL$[5],1%,Z9[9],SC,SR
! Window On 
If Err 0 Gosub ERR_TRAP
DIM 1%,OHCURRID,3%,OHCURRFACT,KEYCNOTE$[10],1%,CUSTCURRID,3%,rec_cnote
Dim 1%,TCH[12],Chan[9]
Dim 1%,E,F,J,L3[3],Q,Y9,H4[2],T9[11],CREDIT_ON_HOLD
Dim 1%,LOCKPORT,S6[1],C7[4],S0[20],CC2[2]
Dim 2%,B1,C,C1,C2[12],D,H,H0[12],H1,H3,H5[16],I2,J1,L1,L2[1],L4[3],X4
Dim 2%,N0,T1[5],V1,V2,X2,A0[3],AXCESS,SPMIN,CUST_SRC_CODE,CUST_DEST_CODE
Dim 2%,CWH,H6[8],S1[2],S5,SL2[4],D0,DT3[1],X1[1],CLFLAG,OL2
Dim 3%,L5[3],T2[24],C9,K5$[50],CUST_SRC_REC,CUST_DEST_REC,SRN[5],R[99],TOT[4]
Dim 3%,OREF[5]
Dim 4%,SC1,ROL
Dim A$[64],C$[30],C1$[137],F$[64],I$[32],N$[34],P$[10],P0$[20],T$[20],P2$[15]
Dim P9$[50],Q$[64],X$[10],D1$[10],PN$[16],S1$[118],S2$[20],R$[33],C5$[25]
Dim A1$[142],A2$[30],P60$[50],D5$[28],A3$[22],OLD_ZONE$[2],J9$[50]
Dim P61$[256],CSZONE$[2],SCRATCH$[80],H0$[20],F1$[16],K1$[60],k2$[60],K3$[60]
Dim 2%,CC1[12],A2[5],ARDATE,JARDATE,TDATE,FCHAN[3],A4[8]
Dim 3%,C4[6],C12[0],I3,A3[13],OUTSTAND,AMT_TRANSFER
Dim BTC1$[142],I$[32],REASON$[15],credcoded$[16],artermd$[16],ordtyped$[20],ONPICK$[1]
dim clsdpswd$[8]
Rem {begin src/inc/dim.edittrack.i}
Dim 1%,ETLINE,ETSTAT,ETUNIT,ETNONSTOCK,ETPRINT,ETPUNIT[2]
Dim 2%,ETORDER,ETDATE,ETTIME,ETPORT,ETACTION,ETCUST,ETSLS
Dim 3%,ETINVOICE,ETOQTY[2],ETNQTY[2],ETORIGTOT,ETUNITPRICE[1]
Dim 3%,ETLOADCOST[1],ETWGT[1]
Dim ETPROD$[12],ETUSER$[10]
!
Dim 2%,tmpcnt,maxcnt \ maxcnt=100
Dim List$[maxcnt,1000],webstr$[1000]
dim action$[30],options$[30],userid$[8],blank$[200],action1$[30],action2$[30],fields$[1,30]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
dim tmp$[1200],tmp1$[2000],tmp2$[300],MSG$[200],message$[200],Work$[200]
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Blank$=" ",Blank$
! CALL DXOPEN() ! for standalone - testing
Rem {end dim.edittrack.i}
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
!Close 
!X2 = Spc(5)
!F$ = Int((X2 - Int(X2 / 16384) * 16384) / 64) Using "CNTRL#"
!Open #1,F$
Dim etr. as edittrack
UIDRec=getuidrec(e$,IntCo,Userid$)
COID=IntCo
!If Err 0 Rem
!Read #1,88,1552;F$;
!Open #0,F$
!J = Spc(6);X2 = 0
!Write #0,J;X2;
!Close #0 \ If Err 0 Gosub ERR_TRAP
Z9[1] = 5
For J = 2 To 33
  Read J1 \ If J1 = -1 Goto L_270
  Read #1,88,Abs(J1);F$;
  If J1 < 0 Ropen #J,F$ Else Open #J,F$
L_270: Next J
Data "2400","1792","2288","1808","1952","1104","1840","1856","1872","1888","2128"
Data "2112","1824","2176","2528","2320","1680","1376","-1","1632","-1","1920","-688"
Data "2880","1728","1664","1936","2352","1744","928","1712","720"
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,60,16;CWH;
Mat Read #1,61,0;P61$;

F$ = "2/ARTERMCODE"+Str$(COID) ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64) Using "2/ARTERMCODE#"
Ropen #50,F$
!If SEL = 7777 If S9[4] = 217 Goto L_3550
! Gosub CHK_ACCESS
Action1$=UCase$(RTrim$(Action1$))
Returnstatus=0
message$="Action 1 not found"
Select case action1$
	case "GETFROMCUST" ! customer we are changing from      doc=CC217-Getfromcust.doc
		gosub select_source_cust
		Clear list$[]
		list$[0]=bsdel$,"FROMCUST",fdel$
		list$[1]="CUSTID",fdel$,"CUSTNAME",fdel$
		List$[2]=Str$(CUST_SRC_CODE),fdel$,RTrim$(N$),fdel$
		lIST$[3]=esdel$
		call addtostr(e$,rstr$,List$[])
		Returnstatus=1
		message$="OK"
	case "GETORDERS" ! send a list of orders for from cust  doc=CC217-GetcustOrderList.doc
		gosub select_source_cust
		gosub L_1500
		call addtostr(e$,rstr$,List$[])
		Returnstatus=1
		message$="OK"
	case "CHECKORDER" ! check if order is ok to change		doc=CC217-CheckOrder.doc
		GOSUB select_source_cust
		gosub L_800
		Returnstatus=1
		message$="OK"
	case "GETNEWCUST" ! enter/check customer changing to	doc=CC217-CheckNewCustomer.doc
		docchng=0 ! no change yet!
		GOSUB select_source_cust ! need orig cust
		gosub L_800 ! need for totals
		gosub SELECT_NEW_CUST ! new cust - credit chk, etc
		Returnstatus=1
		message$="OK"
		if p61$[136,136]="Y"
			let keycnote$=CUST_DEST_CODE using "######"
			search #33,2,1;keycnote$,rec_cnote,e
			if e<>0			
				returnstatus=0
				message$="Customer is not notes file"
				goto OutEnd
			else
				mat read #33,rec_cnote,434;custcurrid;
				if custcurrid<>ohcurrid
					let returnstatus=0
					let message$="Customer is not the same currency as order"
				endif
			endif			
		Endif
	case "DOCHANGE" ! ok - change order customers			doc=CC217-ChangeOrder.doc
		docchng=1 ! doing the change now - does maj checks, no clsd/crd chk returned
		GOSUB select_source_cust
		gosub L_800
		gosub SELECT_NEW_CUST ! get new, set cchk
		if p61$[136,136]="Y"
			let keycnote$=CUST_DEST_CODE using "######"
			search #33,2,1;keycnote$,rec_cnote,e
			if e<>0		
				returnstatus=0
				message$="Customer is not notes file"
				goto OutEnd
			else
				mat read #33,rec_cnote,434;custcurrid;
				if custcurrid<>ohcurrid
					let returnstatus=0
					let message$="Customer is not the same currency as order"
					goto outend:
				endif
			endif
		endif
		goto L_3780 ! do it
End select
goto OutEnd
! Goto SELECT_SOURCE_CUST
L_320: Gosub BAD_MESS
SELECT_SOURCE_CUST: Rem "============================== SELECT SOURCE CUSTOMER
L_340: Q$ = " ",Q$
!J0 = 1 \ Gosub L_2000
If S9 = 201 Let I$ = S9[3] \ Goto OUTEND
If S9 = 231 Let I$ = S9[3] \ Goto OUTEND
If S9 = 251 Let I$ = S9[3] \ Goto OUTEND
L_350: !Print 'CS CR'; Tab 25;D1$;" CUSTOMER CHANGE";'CR'
L_450: !Print @0,3;"FROM CUSTOMER NAME, CODE OR ''-'': ";'CL';
!Print @36,3;'CL'; \ Input ""I$
call dxget("FROMCUSTID",i$)
If I$ = "" Goto L_510
!Gosub L_6600 \ Goto L_450
CUST_SRC_CODE = I$
If CUST_SRC_CODE<=0 Let E = 1 \ Goto L_320
Q$[1,6] = CUST_SRC_CODE Using "######"
Search #5,2,1;Q$,CUST_SRC_REC,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_320
C1 = CUST_SRC_REC
Gosub READ_CUST
N$ = C$
Return ! Goto L_800 ! WEB SUBROUTINE
L_510: ! NO CUST Print 'CR';
If I$ = "" Goto L_545
!Goto SELECT_SOURCE_CUST
!Goto L_800
L_545: If I$ = "" Let S9[0] = 0;S9[1] = 0;S9[2] = 0;S9[3] = 0
Returnstatus=0
message$="No From Customer"
Goto OUTEND
BAD_MESS: Rem "=========================== error message
If E = 1 Message$=" INVALID FROM CUSTOMER";Returnstatus=0
If E = 2 Message$="ORDER HAS ALREADY BEEN PRINTED. CANNOT EDIT";Returnstatus=0
If E = 3 Message$="NOT AN AXCESS ORDER. CANNOT EDIT";Returnstatus=0
If E = 4 Message$="CANNOT CHANGE CUSTOMER FOR A WAREHOUSE TRANSFER. CANNOT EDIT";Returnstatus=0
If E = 5 Message$="CANNOT CHANGE CUSTOMER FOR A CONSIGNMENT ORDER. CANNOT EDIT";Returnstatus=0
If E = 6 Message$="CANNOT CHANGE TO A WAREHOUSE TRANSFER CUSTOMER. CANNOT EDIT";Returnstatus=0
If E = 7 Message$="CANNOT CHANGE CUSTOMER FOR BILL & HOLD ORDER. CANNOT EDIT";Returnstatus=0
If E = 8 Message$="CANNOT CHANGE CUSTOMER FOR HOLD & BILL ORDER. CANNOT EDIT";Returnstatus=0
If E = 11 Message$=" INVALID TO CUSTOMER";Returnstatus=0
If returnstatus=0 goto OutEnd
Return 
L_800: Rem "=========================== FOUND CUSTOMER CODE
!J0 = 1 \ Gosub L_2000
L_810: !Print 'CS CR'; Tab 25;D1$;" CUSTOMER CHANGE";'CR'
!Print @0,3;"CUSTOMER: ";CUST_SRC_CODE;"    ";N$
!If AXCESS Let I$ = "?" \ Goto L_860
!Print @0,5;'CL';"ENTER ";D1$;" #  :              (?:list, D+ord:display order)";
!Print @21,5;
!Input ""I$
call dxget("ORDERID",i$)
L_850: If I$ = "" Goto L_960 ! OutEnd ! L_340
L_860: !If I$ = "?" Goto L_1500
N0 = I$ \ If I$[1,1] = "D" Let N0 = I$[2]
A$[1,6] = CUST_SRC_CODE Using "######"
A$[7,12] = N0 Using "######"
D = 2
C = 8
E = Spc(9)
Gosub SRCH_IDX
Goto L_960
H1 = V1
Gosub READ_ROH
C1 = CUST_SRC_REC \ Gosub READ_CUST
If H5[7] = 16 Let E = 4 \ Gosub BAD_MESS !\ Signal 3,20 \ Goto L_810
If H5[7] = 7 Or H5[7] = 8 Let E = 5 \ Gosub BAD_MESS !\ Signal 3,20 \ Goto L_810
If H5[7] = 15 Let E = 7 \ Gosub BAD_MESS !\ Signal 3,20 \ Goto L_810
If H5[7] = 4 Let E = 8 \ Gosub BAD_MESS !\ Signal 3,20 \ Goto L_810
If H0 >= 90 If I$[7,7] = "!" Return ! Goto SELECT_NEW_CUST
If H0 < 5 Return ! Goto SELECT_NEW_CUST
If H0[0] >= 90 Message$=" ORDER IS IN PROCESS -- CANNOT EDIT !! "
L_950: Message$="  ORDER NOT STATUS 1 - 4 -- CANNOT EDIT !! "
L_951: Returnstatus=0
Goto OutEnd ! L_810
L_960: Message$=" ORDER NOT FOUND "
returnstatus=0
Goto OutEnd
L_1010: Rem "======================= headings
!Print @0,5;'CL BD BU';" ORDER NO.      DATE     CUSTOMER P.O. #      STATUS              ORIG. ORDER ";'EU ED'
!Print @0,6;'CE'
!Y9 = 7
Return 
L_1150: On H0 Goto L_1152,L_1154,L_1156,L_1158,L_1160,L_1162,L_1164,L_1166
L_1152: tmp$="  ENTERED"
Return 
L_1154: tmp$="  PRINTED"
Return 
L_1156: tmp$="  REGISTERED"
Return 
L_1158: tmp$="  PENDING SHIP"
Return 
L_1160: tmp$="  INV ENTERED"
Return 
L_1162: tmp$="  INV PRINTED"
Return 
L_1164: tmp$="  INV REGISTERED"
Return 
L_1166: tmp$="  INVOICE ACCEPTED"
Return 
L_1500: Rem LIST ALL ORDERS
!Gosub L_1010
clear list$[]
List$[0]=bsdel$,"OpenOrderList",fdel$
	WebStr$="OrderID",fdel$
	WebStr$=WebStr$,"Date",fdel$,"Status",fdel$
	WebStr$=WebStr$,"PO#",fdel$,"Ship To Name",fdel$,"Type",fdel$,"PO Link",fdel$
	List$[1]=WebStr$
	row=2;tmpcnt=maxcnt
A$ = " ",A$;A$[1,6] = CUST_SRC_CODE Using "######"
L_1540: Search #8,3,2;A$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_1800
I3 = A$[1,6] \ If CUST_SRC_CODE <> I3 Goto L_1800
L_1560: H1 = V1
If Err 0 Goto LOCKED_REC
Mat Read #8,H1,0,10;H0
Gosub READ_ROH
If Err 0 Gosub ERR_TRAP
If H0 > 4 Goto L_1540
! fill webstr
Webstr$=Str$(H0[7]),fdel$
X$=""
if h0[9]
X$ = H0[9] Using "&&&&&&" \ Call FormatDate(X$)
Endif
webstr$=webstr$,X$,fdel$

Webstr$=webstr$,Str$(H0[0])
Gosub L_1150 ! load tmp$ with status
webstr$=webstr$,tmp$,fdel$
webstr$=webstr$,RTrim$(P0$),fdel$
webstr$=webstr$,RTrim$(S1$[1,30]),fdel$
let ordtyped$=getordtypd$(ctlc,H5[7],intco)
tmp$=ordtyped$
Webstr$=Webstr$,rtrim$(tmp$),fdel$ ! order type
!If OREF[2] Print Using "######"; Tab 74;OREF[2];
If H5[2] tmp$="PO ",Str$(H5[2])  Else tmp$=""
webstr$=webstr$,tmp$,fdel$
List$[row]=webstr$
row=row+1 \ if row>tmpcnt Let tmpcnt = expandarray(e$,List$[]) 
!Print 
!Y9 = Y9 + 1
goto L_1540 ! If Y9 < 20 Goto L_1540
!Print @0,Y9 + 1 - 1;"--MORE--"
!Input "  ENTER ORDER #, OR ''C'' TO CONTINUE "I$
!L_1690: If Not(AXCESS) If I$ <> "C" Goto L_850
!If AXCESS If I$ <> "C" Goto OUTEND
!Gosub L_1010
!Goto L_1540
L_1800: Rem NO MORE INVOICES
!Print @0,Y9 + 1 - 1;"--END--"
!Input "  ENTER ORDER # "I$
!Goto L_1690
!L_2000: Rem FLDS
!J2 = (J0 - 1) * 10
!Read #1,18,J2;D1$;
list$[row]=esdel$ ! done
Return 
L_2100: Rem =========================== CHECK ON BILLTO
Q$ = " ",Q$ \ Q$ = C2[4] Using "######"
Search #5,2,1;Q$,V1,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_2170
Message$="BILL TO CUSTOMER INVALID! ORDER EDIT ABORTED"
Returnstatus=0
Goto OUTEND
L_2170: Rem GET BILL TO NAME
Mat Read #5,V1,0;BTC1$;
BTR = V1
Return 

SRCH_IDX: Rem SEARCH INDEX
Search #C,2,D;A$,V1,V2
If Not(V2) Return 1
Return 
L_2800: Rem EDIT
Return ! If AXCESS Return 

L_3000: Rem
Return

READ_CUST: Rem "====================== read cust rec
Mat Read #5,C1;A1$;
Mat Read #5,C1,19;P$;
Mat Read #5,C1,30;C$;
Mat Read #5,C1,142;C2;
Mat Read #5,C1,194;CC2;
Mat Read #5,C1,348;A2$;
Mat Read #5,C1,378;C7;
Mat Read #5,C1,388;A3$;
Mat Read #5,C1,486;A0;
Mat Read #5,C1,502;S0;
!If Err 0 Rem
!Read #1,88,1552;F$;
!Open #0,F$
!V2 = Spc(6)
!Write #0,V2;C2[1];
!Close #0
!If Err 0 Gosub ERR_TRAP
Return 
READ_ROH: Rem "============================= read header
Mat Read #8,H1;H0
Mat Read #8,H1,52;H3
Mat Read #8,H1,446;P0$
Mat Read #8,H1,104;H5
Mat Read #8,H1,78;H4;
Mat Read #8,H1,512;OREF;
Mat Read #8,H1,624;OHCURRID;
Mat Read #8,H1,626;OHCURRFACT;
Mat Read #9,H0[2],8;S1$;
Mat Read #9,H0[2],126;S2$;
Mat Read #9,H0[2],146;S5;
Mat Read #9,H0[2],154;SRN;
Mat Read #10,H0[3],8;T2;
Mat Read #10,H0[3],328;TOT;
LET ONPICK$=" "                                      
LET ONPICK$=S1$[118,118] ! save the on pick flag     
Return 
L_3550: Rem ! continue/end
Gosub L_2100 ! chk billto
S9[1] = CUST_DEST_REC
S9[3] = C2[7]
S9[2] = H1
S9 = 5 \ S9[4] = 217
!Gosub L_2800 ! edit opt
!Gosub L_3000 ! edit prg
!If SEL = 7000 Or SEL = 8888 Or SEL = 9999 Gosub CLEAR_EDIT_STATUS
Gosub CLEAR_EDIT_STATUS
!If Not(AXCESS)
!  If SEL Gosub L_5500 ! display scrn
!  Chain PN$
!End If 
!If AXCESS
!  Chain "MX208A"
!  Chain Write AXCESS,S9,SEL
!End If 
Returnstatus=1
Message$="CUSTOMER CHANGED - OK"
Goto OUTEND
SELECT_NEW_CUST: Rem GET TO CUSTOMER
!If I$[1,1] = "D" Goto L_8800
!Print @0,4;"  TO CUSTOMER NAME, CODE OR ''-'': ";'CL';
!Print @36,4;'CL'; \ Input ""I$
Call dxget("NEWCUSTID",i$)
If I$ = "" 
	returnstatus=0
	message$="NO NEW CUSTOMER ENTERED"
	Goto OUTEND ! L_350
Endif
! Gosub L_6600 \ Goto SELECT_NEW_CUST
CUST_DEST_CODE = I$
If CUST_DEST_CODE <= 0 Or CUST_DEST_CODE > 999999 ! Goto SELECT_NEW_CUST
	returnstatus=0
	message$="INVALID CUSTOMER"
	GOTO OUTEND
Endif
Q$ = " ",Q$;Q$ = CUST_DEST_CODE Using "######"
Search #5,2,1;Q$,CUST_DEST_REC,E
If E = 0 Goto L_3770
E = 11 \ Gosub BAD_MESS !\ Signal 3,20 \ Goto SELECT_NEW_CUST
L_3770: C1 = CUST_DEST_REC \ Gosub READ_CUST
If CUST_DEST_CODE = CUST_SRC_CODE ! Goto SELECT_NEW_CUST
	returnstatus=0
	message$="Customer is already on the order"
	goto OutEnd
Endif
If A0[1] If A0[1] < CWH Let E = 6 \ Gosub BAD_MESS !\ Signal 3,20 \ Goto SELECT_NEW_CUST
Gosub L_2100 ! chk billto
If docchng=0 ! do closed/
	List$[0]=bsdel$,"CLOSED ACCOUNT",fdel$
	WebStr$="Closed",fdel$,"Password",fdel$
	List$[1]=WebStr$
	If C2[0]>0 and c2[0]<=16 ! to customer
		let credcoded$=getcredcdd$(ctlc,C2[0],intco)
		read #ctlc,182,44;clsdpswd$;
		tmp$="0" ! closed = no
		if credcoded$[1,1]="*" let tmp$="1" ! closed - yes
		if clsdpswd$="" 
			let tmp$="0" ! no password -- no closed
		endif
	
		if clsdpswd$[1,8]="        "
			let tmp$="0"
		endif
		if tmp$="0"
			let clsdpswd$=" ",clsdpswd$
		endif
		webstr$=tmp$+fdel$  ! closed account flag
		webstr$=webstr$+rtrim$(clsdpswd$)+fdel$ ! closed account password	
		let list$[2]=webstr$
	endif
	call AddToStr(e$,rstr$,List$[])
	Call AddToStr(e$,rstr$,esdel$) ! end of section
Endif
Gosub CHECK_CREDIT ! \ Goto SELECT_NEW_CUST
return ! done w/this part
!Print @45,4;'CL';C$;
L_3780: !Print @0,20;'CE';"   OKAY TO PROCEED WITH CUSTOMER CHANGE? (Y/N)   ";
!Input ""I$
I$="Y" ! assume Y if here
If I$ <> "Y" If I$ <> "N" Goto L_3780
If I$ = "N" Goto SELECT_SOURCE_CUST
S9[1] = CUST_DEST_REC;S9[2] = H1;S9[3] = C2[7];S9[4] = 217;S9[0] = 5
Gosub SET_EDIT_STATUS
C1 = CUST_SRC_REC \ Gosub READ_CUST
Gosub READ_ROH
BILL_SRC_CODE = H0[1]
C1 = CUST_DEST_REC
Gosub READ_CUST \ Gosub CHK_SHIPLIST
Gosub WRITE_EDITTRACK
A$ = " ",A$ \ A$ = H0[7] Using "######"
READ_ROL: Rem "============================= read rolnew
Search #11,3,1;A$,ROL,E \ If E > 2 Gosub ERR_SEARCH
x2=a$[1,6] \ if x2<>h0[7] let e=2
If Not(E)
  Mat Read #11,ROL;L2
  Mat Read #11,ROL,8;L3
  Mat Read #11,ROL,16;L4
  If L2[1] = H0[7]
    If P9$[21,21] = "Y" ! "multi slsm flag
      L4[1] = S0[L3[3]]
    Else 
      L4[1] = C2[2]
    End If 
    Write #11,ROL,20;L4[1];
	gosub miscfchng ! change cust in sordlot,kit
    Goto READ_ROL
  End If 
End If 
N$ = C$
Gosub L_4300 ! roh dir 3
A$ = " ",A$;A$[1,6] = CUST_SRC_CODE Using "######"
A$[7] = H0[7] Using "######"
V1 = H1
Search #8,5,2;A$,V1,E \ If E Gosub ERR_SEARCH
A$[1,6] = CUST_DEST_CODE Using "######";V1 = H1
Search #8,4,2;A$,V1,E \ If E > 1 Gosub ERR_SEARCH
If OLD_ZONE$ <> S2$[19,20] Let F5 = 99 Else Let F5 = 0
H0[4] = C2[1];H0[1] = C2[4];H0[11] = C2[2]
H0[12] = CC2[0]
H0$ = A1$[1,20]
H4[0] = CC2[1]
Gosub L_3950 ! cust on order
Gosub L_8100 ! zone
Gosub ROS_REC_NUM \ Gosub WRITE_ROS
Mat Write #8,H1;H0;
Mat Write #8,H1,78;H4;
Mat Write #8,H1,84;H0$;
Mat Write #8,H1,104;H5;
!Print @0,21;'CE';" CHANGING CUSTOMER # ON THIS ORDER, PLEASE WAIT. . ." \ Signal 3,0
CHKTAXCHG: Rem check if taxes have been changed
If P9$[24,24] = "Y" And SRN[5] <> 0 Goto ENDCHKTAXCHG
TCH[1]=1 ! cntrl
TCH[2] = 3
TCH[3] = 5
TCH[4] = 9
TCH[5] = 8
TCH[6] = 10
TCH[7] = 11
TCH[8] = 12
TCH[9] = 31
TCH[10] = 15
TCH[11] = 26
TCH[12] = 19
Call "mxcalctax",TCH[],H1,intco
ENDCHKTAXCHG: Rem            Looks to need to go here 8/16/2006
Read #8,H1,412;H6[1];
If Not(H6[1]) Gosub SET_HOLD_CODE
SEL = 7777
! Swap 1,"MX201H"
!SEL = 0 \ Print @0,20;'CE'
Goto L_3550
L_3950: Rem ORDER TOTAL - Cust on order
If H5[7] = 15 And H0[5] Return 
Read #5,CUST_SRC_REC,412;C9
If H5[7] = 4 And H0[5] <> 0
  C9 = C9 - T2[0]
Else 
  If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
    C9 = C9 - (T2[0] - T2[1] + T2[24] - TOT[4])
  Else 
    C9 = C9 - T2[0]
  End If 
End If 
Write #5,CUST_SRC_REC,412;C9;
If BILL_SRC_CODE = CUST_SRC_CODE Goto L_3974
K5$ = " ",K5$;K5$ = BILL_SRC_CODE Using "######"
Search #5,2,1;K5$,R5,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_3974
Read #5,R5,412;C9
If H5[7] = 4 And H0[5] <> 0
  C9 = C9 - T2[0]
Else 
  If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
    C9 = C9 - (T2[0] - T2[1] + T2[24] - TOT[4])
  Else 
    C9 = C9 - T2[0]
  End If 
End If 
Write #5,R5,412;C9;
L_3974: Read #5,CUST_DEST_REC,412;C9
If H5[7] = 4 And H0[5] <> 0
  C9 = C9 + T2[0]
Else 
  If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
    C9 = C9 + (T2[0] - T2[1] + T2[24] - TOT[4])
  Else 
    C9 = C9 + T2[0]
  End If 
End If 
Write #5,CUST_DEST_REC,412;C9;
If H0[1] = H0[4] Return 
K5$ = " ",K5$;K5$ = H0[1] Using "######"
Search #5,2,1;K5$,R5,E \ If E > 2 Gosub ERR_SEARCH
If E Return 
Read #5,R5,412;C9
If H5[7] = 4 And H0[5] <> 0
  C9 = C9 + T2[0]
Else 
  If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
    C9 = C9 + (T2[0] - T2[1] + T2[24] - TOT[4])
  Else 
    C9 = C9 + T2[0]
  End If 
End If 
Write #5,R5,412;C9;
Return 
CHK_ACCESS: Rem "============================== check if axcess
AXCESS = 0;E = 0

Return 
L_4300: Rem UPDATE INDEX 3 IF ROH FILE FOR SALESMAN CHANGE
If H0[11] = C2[2] Return 
A$ = " ";A$[1,3] = H0[11] Using "###"
A$[4] = H0[7] Using "######" \ A$[10] = " "
V1 = H1
Search #8,5,3;A$,V1,E \ If E Gosub ERR_SEARCH
A$[1,3] = C2[2] Using "###"
Search #8,4,3;A$,V1,E \ If E Gosub ERR_SEARCH
Return 
L_5500: Rem "============================= display screen data

Return 
L_6600: Rem SWAP

Return 1
CHK_SHIPLIST: Rem SHIPLIST STUFF
SHPLT = 0
A$ = " ",A$;A$ = C2[1] Using "######.000000"
Search #13,2,1;A$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Gosub L_7400 \ Return 
X3 = A$[1,6] \ If X3 <> C2[1] Gosub L_7400 \ Return 
SHPLT = 1 \ R[13] = V1 \ Gosub READ_SHIPLIST
Return 
ROS_REC_NUM: Rem ==========================CREATE NEW SHIPTO RECORD
E = 2 \ V1 = 0
V1 = H0[2]
H0[2] = V1;S9[1] = CUST_DEST_REC
Return 
WRITE_ROS: Rem "================================ write ship to
R[9] = V1;S1[0] = H0[0];S1[1] = H0[7]
LET S1$[118,118]=ONPICK$[1] ! save the on pick setting from before the change
Mat Write #9,R[9];S1;
Mat Write #9,R[9],8;S1$;
Mat Write #9,R[9],126;S2$;
Mat Write #9,R[9],146;S5
Mat Write #9,R[9],150;S6;
Mat Write #9,R[9],154;SRN;
Return 
READ_SHIPLIST: Rem "================================ read shiplist
Read #13,R[13],0;S1$[1,117];
Read #13,R[13],117;C5$;
Mat Read #13,R[13],150;R$;
Mat Read #13,R[13],142;SC1;
Mat Read #13,R[13],184;SL2;
S2$ = " ",S2$
S1$[118,118] = "1";S2$[1,15] = R$[13,25];S2$[19,20] = R$[32,33]
SRN[4] = SL2[3];SRN[3] = 2;SRN[2] = C2[1];SRN[1] = Fra(SC1) * 1000000
H4[1] = R$[26,31]
If SRN[4] = 0 Let SRN[4] = A0[3]
If P61$[34,34] = "Y" Gosub CSMZONE
Return 
L_7400: Rem ================================= use cust for shipto
S1$ = " ",S1$ \ S2$ = " ",S2$
S1$[1,107] = A1$[31,137];S1$[108,117] = A2$[1,10];S1$[118,118] = "0"
S1$[118,118] = "1";S2$[1,15] = A3$[7,21];S2$[19,20] = A2$[29,30]
SRN[3] = 0
SRN[4] = A0[3]
SRN[2] = C2[1]
H4[1] = C7[4]
If P61$[34,34] = "Y" Gosub CSMZONE
Return 
CSMZONE: Rem "Cust/Shipto MultiZone (get shipdate,Zone,Stop)
TMPSRN = 0
If Not(H0[9]) Return 
Call "MXOHCSZONE",SRN[2],TMPSRN,H0[9],H5[8],H4[2],H0[10],CSZONE$,H4[1],intco
R$[32,33] = CSZONE$
S2$[19,20] = R$[32,33]
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
L_8100: Rem ZONE
If Err 0 Goto L_8104
L_8104: If Err 0 Gosub ERR_TRAP
A$ = " ",A$ \ A$ = S2$[19,20]
Search #23,2,1;A$,V1,E
If E Let D0 = 0 \ Goto L_8123
Read #23,V1,32;S5;
Read #23,V1,28;D0;
Mat Read #23,V1,0;D5$;
L_8123: If Not(F5) Return 
If P61$[34,34] = "Y" Return 
X2 = H0[9]
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
X2 = X$[1,5]
X2 = X2 + D0
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
X2 = X$
H0[10] = X2;H5[1] = X2
VDATE = X2;STAT = 1;WARN = 0;PARAM[0] = H4[2];PARAM[1] = H5[8]
Call "validdate",VDATE,STAT,WARN,PARAM[]
H0[10] = VDATE;H5[1] = VDATE
X2 = VDATE \ Gosub L_7700
Return 
L_8800: Rem DISPLAY ORDER
!S9[1] = C1;S9[2] = H1;S9[3] = 217
!Swap 1,"MX236A"
Goto L_800

SET_EDIT_STATUS: Rem "=================================== 91 = EDIT
If H0 >= 90 Return 
Read #8,H1,416;H6[2]
Read #8,H1,64;LOCKPORT
H6[2] = H0
LOCKPORT = UIDRec ! Spc(6)
A$ = " ",A$;A$[1,2] = H0 Using "##";A$[3] = H0[7] Using "######"
Search #8,2,1;A$,R1,E \ If E = 1 Goto L_17110
If E Gosub ERR_SEARCH
Search #8,5,1;A$,R1,E
If E Gosub ERR_SEARCH
H0 = 91
L_17110: A$[1,2] = H0 Using "##"
E = 0;R1 = H1
Search #8,4,1;A$,R1,E
If E > 1 Gosub ERR_SEARCH
Write #8,H1,0;H0
Write #8,H1,416;H6[2]
Write #8,H1,64;LOCKPORT;
Return 
CLEAR_EDIT_STATUS: Rem "=================================== RESET STATUS
If H0 < 90 Return 
Read #8,H1,416;H6[2]
Read #8,H1,64;LOCKPORT
If H6[2] <= 1 And H5[7] <> 5 ! "not for future orders
  If P9$[45,45] = "Y" Let H6[2] = 2
End If 
If H6[2] <= 0 Let H6[2] = 1
If H6[2] > 11 Or Fra(H6[2]) Let H6[2] = 1
A$ = " ",A$;A$[1,2] = H0 Using "##";A$[3] = H0[7] Using "######"
Search #8,2,1;A$,R1,E \ If E = 1 Goto L_17420
If E Gosub ERR_SEARCH
Search #8,5,1;A$,R1,E
If E Gosub ERR_SEARCH
L_17420: A$[1,2] = H6[2] Using "##"
E = 0;R1 = H1
Search #8,4,1;A$,R1,E
If E > 1 Gosub ERR_SEARCH
H0 = H6[2];H6[2] = 0
LOCKPORT = 0
Write #8,H1,0;H0
Write #8,H1,416;H6[2]
Write #8,H1,64;LOCKPORT;
Return 
CHECK_CREDIT: Rem "============================ check customer credit
! Print @0,5;'CE';
COSTOK = 1
R6 = 0 \ F9 = 0
F = 0
I$ = ""
Mat Read #5,CUST_DEST_REC,142;CC1;
Mat Read #5,BTR,142;C2;
Mat Read #5,BTR,194;CC2;
Mat Read #5,BTR,668;C12;
clear chan[]
	chan[1] =ctlc    ! cntrl file
    chan[2] =5 ! customer file
	chan[3] = 0	 ! saract file ** not opened **
	chan[4] = 0      ! credit check file ** not opened ** ch_credck
	chan[5] =8	 ! order header
	chan[6] =10	 ! order total
	chan[7] =9	 ! order ship to
	work$=""
	flag=1 \ if docchng let flag=0 ! 0=wrt crdchk file, 1=Do not write
	call getcredck(chan[],CC1[1],CC1[4],h1,T2[0],intCo,ReturnStatus,Message$,flag,work$)
	clear list$[]
	if docchng=0 ! send on first check
		List$[0]=bsdel$,"CreditCheck",fdel$
		WebStr$="Chktype",fdel$,"Message$",fdel$,"AR Balance",fdel$
		WebStr$=Webstr$,"Open Order Amt",fdel$
		Webstr$=Webstr$,"Standard Terms",fdel$
		Webstr$=Webstr$,"Payment History",fdel$
		Webstr$=Webstr$,"Note1",fdel$
		Webstr$=Webstr$,"Note2",fdel$
		List$[1]=WebStr$
		let tmp$=flag using "#"
		let Webstr$=tmp$,fdel$
		let webstr$=webstr$,work$,fdel$
		let f=flag
	Else ! just get flag
		let f=flag \ if f>0 Let CREDIT_ON_HOLD = 1 ! on f=6 (order 2 order)?
		return
	Endif
! rest is for getting open/ar amounts
L_10400: Rem ======= check if sold-to or bill-to is "*" coded
Read #1,22,(CC1 - 1) * 16;I$[1,16];
CLFLAG = 0 \ If I$[1,1] = "*" Let CLFLAG = 1
Read #1,22,(C2 - 1) * 16;I$[1,16];
If I$[1,1] = "*" Let CLFLAG = 1
If CLFLAG = 1 and docchng=0
  ! done upon new cust entry (closed)
End If 
If Err 0 Goto L_10460
Read #1,88,720;F$;
Open #0,F$
Q$ = " ",Q$ \ Q$ = CC1[1] Using "######"
Search #0,2,1;Q$,R6,E \ If E > 1 Gosub ERR_SEARCH
If E Let R6 = 0 \ Goto L_10455
Mat Read #0,R6;A1$;
If A1$[1,5] = "     " If A1$[51,55] = "     " Let R6 = 0
L_10455: Close #0
L_10460: If Err 0 Gosub ERR_TRAP
L1 = C12[0]
Mat Read #5,BTR,210;C4;
Read #5,BTR,412;C9;
If C9 < 0 Let C9 = 0
If C4[1] < 0 Let C4[2] = C4[2] - C4[1] \ C4[1] = 0
OUTSTAND = C4[0] + C4[2] + C4[3] + C4[4] + C4[5] - C4[1]
OUTSTAND = OUTSTAND + C9
If P60$[40,40] = "O"
  AMT_TRANSFER = T2[0] - T2[1] + T2[24]
Else 
  AMT_TRANSFER = T2[0]
End If 
If Not(C2[3]) Goto L_10600
If (L1 - OUTSTAND - AMT_TRANSFER) > 0 And C2[3] <> 999 Goto L_10530
F = 1 \ F9 = 2
!If (L1 - OUTSTAND) < 0
!  Print @0,9;"OVER CREDIT LIMIT ";
!  If COSTOK
!    Print ;"BY : ";
!    Print Using "-$$$$,$$$,$$#.##";@21,9;(OUTSTAND + AMT_TRANSFER - L1);
!  End If 
!End If 
!If COSTOK
!  Print @0,11;"TTL A/R : ";
!  Print Using "-$$$,$$$,$$#.##";@22,11;(OUTSTAND - C9)
!  Print @0,12;"OPN ORD : "
!  Print Using "-$$$,$$$,$$#.##";@22,12;C9 + AMT_TRANSFER
!  Print Using "-$$,$$$,$$#.##";@37,12;"(INCLUDING ";AMT_TRANSFER
!  Print Using "######";@62,12;" FOR ORDER ";N0;")"
!End If 
L_10530: If Not(C2[3]) Goto L_10600
If C2[3] = 999 Goto L_10550
If OUTSTAND <= 0 Goto L_10640
GETARAGE: Rem "========================= over days ar check
Mat Read #1,0,108;ARDATE;
X$ = ARDATE Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
If Not(E)
  JARDATE = X$[1,5]
Else 
  Call Time(J4$) \ J4$[13] = ""
  Call VerifyDate(J4$,X$,E) \ If E Gosub ERR_SEARCH
  X2 = X$ \ X$ = X2 Using "&&&&&&"
  Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
  JARDATE = X$[1,5]
End If 
If (C4[0] - C4[1] + C4[2] + C4[3] + C4[4] + C4[5]) <= 0
  PASTDUE = 0
  Goto L_10575
End If 
If Err 0 Rem
Close #22
If Err 0 Gosub ERR_TRAP
Mat Read #1,88,1504;F$; \ Open #22,F$
OUTSTAND = 0;I3 = C4[1]
Q$ = " ",Q$;Q$[1,6] = C2[4] Using "######"
SEARCHAR: Search #22,3,2;Q$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto ENDARCHK
X2 = Q$[1,6] \ If X2 <> C2[4] Goto ENDARCHK
TYPE = Q$[23] \ If P9$[19,19] <> "Y" And TYPE > 5 Goto SEARCHAR
Mat Read #22,V1,0;A2;
TDATE = A2[4]
If (JARDATE - TDATE) <= C2[3] Goto ENDARCHK
If P9$[25,25] = "Y"
  Mat Read #22,V1,154;A4;
  If A4[3]
    X$ = A4[3] Using "&&&&&&"
    Call DateToJulian(1,X$,X$,E)
    If Not(E)
      TDATE = X$[1,5]
    End If 
  End If 
End If 
If (JARDATE - TDATE) <= C2[3] Goto SEARCHAR
Mat Read #22,V1,24;A3;
If Not(A3[0] - A3[1] - A3[2]) Goto SEARCHAR
If TYPE > 5 ! credit balances
  I3 = I3 + (A3[0] - A3[1] - A3[2])
  OUTSTAND = OUTSTAND - (A3[0] - A3[1] - A3[2])
Else 
  I3 = I3 - (A3[0] - A3[1] - A3[2])
  OUTSTAND = OUTSTAND + (A3[0] - A3[1] - A3[2])
End If 
Goto SEARCHAR
ENDARCHK: Rem "eof. see if there is a balance
If Err 0 Rem
Close #22
If Err 0 Gosub ERR_TRAP
If I3 >= 0 Goto L_10575
L_10550: F = 1 \ F9 = 3
If C2[3] <> 999
!  Print @0,10;"ACCOUNT PAST DUE :     ";
!  If COSTOK Print Using "-$$,$$$,$$#.##";OUTSTAND
Else 
!  Print @16,10;'CL';"ORDER TO ORDER "; \ F9 = 6
  F = 1 \ F9 = 6
!  If COSTOK
!    Print @0,12;"OPN ORD : "
!    Print Using "-$$$,$$$,$$#.##";@22,12;C9 + AMT_TRANSFER
!    Print Using "-$$,$$$,$$#.##";@37,12;"(INCLUDING ";AMT_TRANSFER
!    Print Using "######";@61,12;" FOR ORDER ";N0;")"
!  End If 
End If 
L_10575: L1 = C12[0]
If OUTSTAND <= 0 If L1 - (OUTSTAND + C4[2]) > 0 Goto L_10640
F = 1
L_10600: If Not(F) Goto L_10640
Read #1,22,(C2 - 1) * 16;I$[1,16];
!Print @0,14;"PAYMENT HISTORY:       ";I$
credcoded$=i$
I$ = " ",I$
If CC2[0] = 0
  I$ = "CASH SALE"
Else 
  If CC2[0] > 0 And CC2[0] <= 99
    Read #50,CC2[0],0;I$;
  End If 
End If 
artermd$=i$
!Print @0,13;"STANDARD TERMS :       ";I$
L_10640: !If R6 Print @8,18;"NOTE !! ";A1$[1,50];
!If R6 Print @16,19;A1$[51,100];
If F Let CREDIT_ON_HOLD = 1
If R6 If Not(F9) Let F9 = 1
! If Not(F) If Not(R6) Return 1
!If F Print @25,7;'BB RB';"** CREDIT ALERT **";'EB'
!If CC1[1] <> CC1[4] Print Using "######";@50,8;"BILL TO: ";CC1[4]
L_10680: !Print @13,22;"DO YOU WISH TO CONTINUE WITH THIS INVOICE? (Y/N) ";
!Input ""F$
!If F$ <> "Y" If F$ <> "N" Goto L_10680

if docchng=0 ! send on first time
	! set at first call
	let tmp$=(OUTSTAND - C9) using  "-$$$$,$$$,$$#.##"
	webstr$=webstr$,tmp$,fdel$
	let tmp$=(C9 + AMT_TRANSFER) using  "-$$$$,$$$,$$#.##"
	webstr$=webstr$,tmp$,fdel$
	webstr$=webstr$,artermd$,fdel$
	webstr$=webstr$,credcoded$,fdel$
	webstr$=webstr$,RTrim$(A1$[1,50]),fdel$
	webstr$=webstr$,RTrim$(A1$[51,100]),fdel$
	list$[2]=webstr$
	! otherwise no details
	call AddToStr(e$,rstr$,List$[]) ! "add the list from subs to string
	Call AddToStr(e$,rstr$,esdel$) ! end of section 
Endif
If Not(F) Goto L_10700
L_10700: !Signal 3,0

Return ! Goto L_10680
L_8500: Rem ============================ update credit check file
! done in credchk call
Return 
CONVTOJUL: Rem "Convert date(X2) as yymmdd to julian
Gosub YMD2JUL \ X2 = 0
If X2 = 0 ! "bad Date
  SCRATCH$ = "" \ Call Time(SCRATCH$)
  SCRATCH$[13] = ""
  Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
  X2 = X$[1,6]
  Gosub YMD2JUL \ Gosub ERR_SEARCH
End If 
Return 
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
if x2<=0 return
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&"
X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6]
Return 
SET_HOLD_CODE: Rem =============================== set credit check hold code
Read #10,H0[3],134;T2[21];
X4 = T2[21]
For K = 0 To 11
  T9[K] = Sgn(Fra(X4 / 2))
  X4 = Int(X4 / 2)
Next K
If CREDIT_ON_HOLD
  T9[0] = 1
Else 
  T9[0] = 0
End If 
X4 = 0
Mat Read #1,66,0;F1$;
If F1$[1,1] <= " " Let T9[0] = 0
Mat Read #1,66,16;F1$;
If F1$[1,1] <= " " Let T9[1] = 0
Mat Read #1,66,48;F1$;
If F1$[1,1] <= " " Let T9[3] = 0
Mat Read #1,66,96;F1$;
If F1$[1,1] <= " " Let T9[6] = 0
Mat Read #1,66,112;F1$;
If F1$[1,1] <= " " Let T9[7] = 0
For K = 0 To 11
  If T9[K] Let X4 = X4 + 2 ^ K
Next K
T2[21] = X4
Write #10,H0[3],134;T2[21];
Return 
WRITE_EDITTRACK: Rem  create 916 audit trail record
Clear etr.
etr.OrdNum = H0[7]
etr.LineNum = 0
etr.Status = H0[0]
If etr.Status > 89 Let etr.Status = H6[2]
etr.ProdCode$ = " ",etr.ProdCode$
etr.EtAction = 217
etr.CustNum = CUST_DEST_CODE
FCHAN[0] = -1
FCHAN[1] = -1
FCHAN[2] = -1
!Call "makeedittrack",ETORDER,ETLINE,ETSTAT,ETPROD$,ETOQTY[],ETNQTY[],ETACTION,ETUNIT,ETNONSTOCK,ETINVOICE,ETORIGTOT,ETCUST,ETPRINT,FCHAN[]
call MakeEdittrack(e$,IntCo,fchan[],etr.)
Return 
MiscfChng: ! change customer in other order files (sordlot,kit)
k1$=" ",k1$;k1$=a$ ! order/line
SLT_Loop: ! sordlot (kit sordlots too)
search #17,3,3;k1$,R[17],E \ if e=2 goto dokits
if e gosub err_search
if k1$[1,9]<>a$[1,9] goto dokits
read #17,r[17],52;ol2;
ol2=CUST_DEST_CODE
write #17,r[17],52;ol2;
goto SLT_Loop
Dokits: ! kit lines
kitc=openfile(1312,Intco) \ if kitc=-1 goto kitdone
k1$=" ",k1$;k1$=A$ ! order/line
ktl_loop: ! kit lines
Search #kitc,3,1;k1$,R[39],E \ if e=2 goto kitdone
if e gosub err_search
if k1$[1,9]<>a$[1,9] goto kitdone
read #kitc,r[39],74;ol2;
ol2=CUST_DEST_CODE
write #kitc,r[39],74;ol2;
goto ktl_loop
kitdone: ! done
if kitc>0 try close #kitc Else rem
Return
LOCKED_REC: Rem SKIP LOCKED RECORD- IF ESC GO BACK, ETC
!If Spc(8) = 99 Print 'RB ML';" ";'ML'; \ Goto L_1560
!If Spc(8) <> 123 Gosub ERR_TRAP
!Print 'RB CL';"SKIPPING ORDER #";A$[7,12];" WHICH WAS ";
!Print "IN USE(LOCKED) WHILE CHECKING ORDERS"
!Signal 3,20
!Y9 = Y9 + 1
If Err 0 Gosub ERR_TRAP
Goto L_1540
OUTEND: Rem EXIT
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	Call AddToStr(e$,rstr$,WebStr$)
    call SetOutPut(e$,rstr$)
	!
END
!!Print 'CS'
!!Close 
!!Chain "MX000"
!!Stop 
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROG "+MSC$(4)
message$ = msg$                            
Call programdump("tmp/serp217.se!","") 
returnstatus=0                  
Goto Outend ! E$=msg$ \ Error 10000
END
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
Rem {end rtn.error.s}
END