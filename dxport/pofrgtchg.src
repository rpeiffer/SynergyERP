Rem pofrgtchg - calculate freight charges on purchase orders
!
!loadsave -w -n 100,10 -o prog/dxport/pofrgtchg src/pofrgtchg.src
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR 25, 2005  11:47:29
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/po/pofrgtchg.src (univ2) [mary] {47166}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
!Option Default Dialect IRIS1
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault
Declare External Function OpenFile,PDate$,FormatDate2$
Rem pofrgtchg - calculate freight charges on purchase orders
Enter chan[],parm[]
If Err 0 Gosub ERR_TRAP
Dim 2%,COID
Dim F$[16]
Dim 1%,CH_POFH,CH_POFL,POTYPE
Dim KEYPOFH$[10],POFH0$[6],POFH1$[30]
Dim KEYPOFL$[10],POFL$[6],1%,POFL0[2],3%,POFL1[11],POFL2[11],POFL3[11]
Dim POFL4[11],POFL5[11],P60$[256]
Dim VFRGT$[6]
Dim 2%,POH0[5],POH3[4],POH[4],POH6[1]
Dim 1%,POH4[3],POH1[9],POH5[10],POFRT[1]
Dim 3%,POH7,POH8[9],POH9[12]
Dim POH$[82],POH1$[116],ST$[14],POH2$[40],POFRT$[6],msg$[300]
dim Rstr$[500],e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables

Dim 3%
Def FNR(H) = Sgn(H) * (Int(Abs(H) * 100 + .5) * .01)
INTCO=PARM[9]
if not (chan[0]) ! cntrl file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
if not (chan[1]) ! purchase order header  #8
	 Ch_Poh = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
else
	ch_poh=chan[1]
endif
if not (chan[16]) ! vendor file
	 Ch_Vend = OpenFile(2400,intCo) \ If Ch_Vend = -1 Error 42  ! vend
else
	let ch_vend=chan[16]
endif
ch_pofl=OpenFile(-9952,intCo) \ If Ch_pofl = -1 Error 42  ! freight charge file d
If Err 0 Gosub ERR_TRAP
let source=parm[1]
If SOURCE <> 361 Goto OUTEND
If Not(parm[0]) Goto OUTEND
REC_POHEAD = parm[0]
EditMode = parm[2] ! 1 = new po , 2= edit
Mat Read #ctlc,60,50;P60$;


Rem open po freight charge



Gosub READ_POHEAD
If POH0 > 5 And POH0 <> 90 And POH0 <> 91 and poh0 <> 95 Goto OUTEND
If POH8[3] Goto OUTEND
If EditMode <> 1 And POFRT[1] <> 0 Goto OUTEND
If EditMode = 1
  POFRT[0] = 0;POFRT[1] = 0;POFRT$ = " ",POFRT$
End If 
Mat Read #ch_vend,POH0[1],116;VFRGT$;
If VFRGT$ = "" Or VFRGT$ = "      "
  If EditMode = 1 ! entry no freight table
    Goto OUTEND
  End If 
  If EditMode = 2 ! edit stage
    If POFRT$ = "" Or POFRT$[1,6] = "      " Goto OUTEND
    VFRGT$ = POFRT$
  End If 
End If 
KEYPOFL$ = " ",KEYPOFL$
KEYPOFL$[1,6] = VFRGT$[1,6]
KEYPOFL$[7,8] = (POH4[0] + 1) Using "##"
Search #CH_POFL,2,1;KEYPOFL$,REC_POFL,E \ If E > 1 Error 11000 ! Gosub ERR_SEARCH
If Not(E) ! we found 1
  Gosub READ_POFL
  POFRT$[1,6] = POFL$[1,6]
  POFRT[0] = POFL0[0]
Else 
  KEYPOFL$[7,8] = " 0"
  Search #CH_POFL,2,1;KEYPOFL$,REC_POFL,E \ If E > 1 Error 11000 ! ERR_SEARCH
  If Not(E)
    Gosub READ_POFL
    POFRT$[1,6] = POFL$[1,6]
    POFRT[0] = POFL0[0]
  Else 
    If EditMode = 1 Goto OUTEND
    POFRT[1] = 99
    Goto OUTEND
  End If 
End If 
POH1[5] = POFL0[1]
COMPLEVEL = 0
If POFL0[2] = 1 ! weight
  COMPLEVEL = POH8[1]
Else 
  If POFL0[2] = 2 ! merch $
    COMPLEVEL = POH8[0]
  Else 
    If POFL0[2] = 3 ! cube
      COMPLEVEL = POH9[9]
    Else 
      If POFL0[2] = 4 ! piece
        COMPLEVEL = POH9[10]
      End If 
    End If 
  End If 
End If 
Gosub GET_FREIGHT_CHG
If POH1[5] = 0
  POH8[2] = POH9[6]
Else 
  If POH1[5] = 1
    POH8[2] = FNR(POH8[1] * POH9[6])
  Else 
    If POH1[5] = 2
      POH8[2] = FNR((POH8[1] / 100) * POH9[6])
    Else 
      If POH1[5] = 3
        POH8[2] = FNR(POH9[9] * POH9[6])
      Else 
        If POH1[5] = 4
          POH8[2] = FNR(POH9[10] * POH9[6])
        End If 
      End If 
    End If 
  End If 
End If 
Gosub WRITE_POHEAD
Goto OUTEND
OUTEND: Rem EXIT ROUTINE
Unlock #ch_poh
if not (chan[0]) and ctlc<>1 close #ctlc ! cntrl file
if not (chan[1]) close #ch_poh
if not (chan[16]) close #ch_vend! vendor file
If CH_POFL Close #CH_POFL
End 
READ_POHEAD: Rem  read purchase order header
Mat Read #ch_poh,REC_POHEAD,0;POH0;
Mat Read #ch_poh,REC_POHEAD,24;POH$;
Mat Read #ch_poh,REC_POHEAD,106;POH1$;
Mat Read #ch_poh,REC_POHEAD,222;POH3;
Mat Read #ch_poh,REC_POHEAD,242;POH4;
Mat Read #ch_poh,REC_POHEAD,250;POH8;
Mat Read #ch_poh,REC_POHEAD,310;POH;
Mat Read #ch_poh,REC_POHEAD,330;POH1;
Mat Read #ch_poh,REC_POHEAD,350;POH9;
Mat Read #ch_poh,REC_POHEAD,428;ST$;
Mat Read #ch_poh,REC_POHEAD,442;POH2$;
Mat Read #ch_poh,REC_POHEAD,482;POH5;
Mat Read #ch_poh,REC_POHEAD,504;POH6;
Mat Read #ch_poh,REC_POHEAD,528;POH7
Mat Read #ch_poh,REC_POHEAD,564;POFRT
Mat Read #ch_poh,REC_POHEAD,592;POFRT$
Return 
WRITE_POHEAD: Rem write purchase order header
Mat Write #ch_poh,REC_POHEAD,0;POH0
Mat Write #ch_poh,REC_POHEAD,24;POH$
Mat Write #ch_poh,REC_POHEAD,106;POH1$
Mat Write #ch_poh,REC_POHEAD,222;POH3
Mat Write #ch_poh,REC_POHEAD,242;POH4
Mat Write #ch_poh,REC_POHEAD,250;POH8
Mat Write #ch_poh,REC_POHEAD,310;POH
Mat Write #ch_poh,REC_POHEAD,330;POH1
Mat Write #ch_poh,REC_POHEAD,350;POH9
Mat Write #ch_poh,REC_POHEAD,428;ST$
Mat Write #ch_poh,REC_POHEAD,442;POH2$
Mat Write #ch_poh,REC_POHEAD,482;POH5
Mat Write #ch_poh,REC_POHEAD,504;POH6
Mat Write #ch_poh,REC_POHEAD,528;POH7
Mat Write #ch_poh,REC_POHEAD,564;POFRT
Mat Write #ch_poh,REC_POHEAD,592;POFRT$
Return 
READ_POFL: Rem read purchase order freight line
Mat Read #CH_POFL,REC_POFL,0;POFL$;
Mat Read #CH_POFL,REC_POFL,6;POFL0;
Mat Read #CH_POFL,REC_POFL,12;POFL1;
Mat Read #CH_POFL,REC_POFL,84;POFL2;
Mat Read #CH_POFL,REC_POFL,156;POFL3;
Mat Read #CH_POFL,REC_POFL,228;POFL4;
Mat Read #CH_POFL,REC_POFL,300;POFL5
Return 
GET_FREIGHT_CHG: Rem -------------------------from level on freight table
For LEVEL = 0 To 6
  If COMPLEVEL <= POFL1[LEVEL] Goto FOUND_LEVEL
Next LEVEL
If LEVEL > 6 Let LEVEL = 6
FOUND_LEVEL: Rem
POH9[6] = POFL2[LEVEL]
Return 
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
error 11000 ! Goto ERR_MAIN
ERR_MAIN: Rem
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet_call.inc"
END
