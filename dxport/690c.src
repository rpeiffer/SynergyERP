! >>> Program 690c
!
! description 690c - Dead Inventory by Sales Rep
! loadsave -w -n 100,10 -o prog/dxport/690c.dl4 src/690c.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx


Rem BEDIT Version: 2.3 OBJECT CODE     Created: FEB 29, 2012  17:05:45
Rem /w2/papermaster/r2005//usr/acct/dave/work/custom/gti/mx690c.src (univ2) [dave] {63731}
Rem  Copyright (c) 2012 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
!
!!Option Default Dialect IRIS1
Try 
Rem MX690c - Dead Inventory Report
Rem cct 186728 - Glover
Rem cct 219553 jliu 11/7/07 add the new prompt "no items received with x number of! days"
Com 1%,COST_LEV[3]
If Err 0 Gosub ERR_TRAP
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J6[1],J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Dim K1$[60],K2$[60],K3$[60],K4$[60],K5$[60],K6$[60],K10$[50]
Dim VEND$[30],BUYR$[30],A$[156],RETVAL$[512],FLE$[20]
Dim P9$[50],P60$[50],P61$[256],CSTUM$[4],QTYUM$[4],K8$[50]
Dim CONM$[30],DATE$[8],TME$[30],BPROD$[12],EPROD$[12],PROD$[12],PUDA$[650]
Dim 1%,PFU1[20],W1[2],RPT[5],FLD,BYR[5],WH[5]
Dim 1%,NMTH,NEGOH,CSTUM,QTYUM,CNVTU[2],SCRN,DAYS,LT1[3]
Dim 2%,W2[9],B[24],VEND,BUYER,VND[5],JDATE[5],DT3[1]
Dim 4%,PUDA[3]
Dim 3%,W3[24],A[33],A1[7],PFU2[6],DPLY[20]
Dim 3%,R[99],CNVTA,AMOUNT,X3[9],TTLS[20],LT2[5],REC_PRUDA
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
dim blank$[200],endparam$[200]
!!! check this
Dim b$[200]!
let blank$=" ",blank$
let endparam$="z",endparam$
!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!
j8 = 0
If Err 0 Let j8 = Spc(8)
try
	J9 = Chf(0) 
else
	let j8=99
end try
If Err 0 Gosub ERR_TRAP
RPT[1] = 62;RPT[2] = 0;SCRN = 0
for ctr=1 to 99
	If ctr<>9
		Try Close #ctr Else Rem
	endif
next ctr
COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1

Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
For J = 2 To 8
  Read J1 \ If J1 = -1 Goto NXTFLE
  Read #1,88,J1;FLE$[1,16];
  Ropen #J,FLE$
NXTFLE: Next J
Data "1792","1744","2400","1728","-1","-1","2512"
FLE$ = "2/BUYERS"
Ropen #6,FLE$
FLE$ = COID Using " 2/SPRODUDA#"
Ropen #10,FLE$
CH_PRUDA = 10
Mat Read #1,3,0;CONM$;
Mat Read #1,0,100;DATE$;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Call VerifyDate(DATE$,X$,E)
If Not(E) ! "date okay
  X2 = X$
  X$ = X2 Using "&&&&&&"
  Call DateToJulian(1,X$,X$,E) \ If E Let X$ = Str$(Tim(6))
Else 
  X2 = Tim(6)
  X$ = X2 Using "#####"
  Call JulianToDate(1,X$,DATE$,E) \ If E Gosub ERR_SEARCH
End If 
JDATE[0] = X$[1,5]

message$=""
let eflag=0
call dxget("SWHSE",tmp$)\let wh[1]=tmp$
If rtrim$(tmp$) = "" Let WH[1] = 1
If WH[1] < 1 Or WH[1] > 99 
	let eflag=eflag+1
	Let message$ = message$+"Invalid starting warehouse, must be between 1 and 99!" 
endif
call dxget("EWHSE",tmp$) \let wh[2]=tmp$
If rtrim$(tmp$) = "" Let WH[2] = 99 
If WH[2] < 1 Or WH[2] > 99 
	let eflag=eflag+1
	Let message$ = message$+"Invalid ending warehouse, must be between 1 and 99!" 
endif
if wh[1]>wh[2]
	let eflag=eflag+1
	Let message$ = message$+"Ending Warehouse Must Be Greater Than Starting. "
endif
call dxget("SBUYER",tmp$) \ BYR[1] = tmp$
if rtrim$(tmp$)="" let byr[1]=0
if byr[1]<0 or byr[1]>999
	let eflag=eflag+1
	Let message$ = message$+"Invalid starting buyer, must be between 1 and 999! " 
endif
call dxget("EBUYER",tmp$) \ Let BYR[2] = tmp$
If rtrim$(tmp$) = "" Let BYR[2] =  999 
if byr[2]<0 or byr[2]>999
	let eflag=eflag+1
	Let message$ = message$+"Invalid ending buyer, must be between 1 and 999! " 
endif
if byr[1]>byr[2]
	let eflag=eflag+1
	Let message$ = message$+"Ending Buyer Must Be Greater Than Starting. "
endif
call dxget("SVEND",tmp$) \ VND[1] = tmp$
if rtrim$(tmp$)="" let vnd[1]=0
if vnd[1]<0 or vnd[1]>999999
	let eflag=eflag+1
	Let message$ = message$+"Invalid starting vendor, must be between 1 and 999999! " 
endif
call dxget("EVEND",tmp$) \  Let VND[2] = tmp$
If rtrim$(tmp$) = "" Let VND[2] = 999999
if vnd[2]<0 or vnd[2]>999999
	let eflag=eflag+1
	Let message$ = message$+"Invalid ending vendor, must be between 1 and 999999! " 
endif
if vnd[1]>vnd[2]
	let eflag=eflag+1
	Let message$ = message$+"Ending Vendor Must Be Greater Than Starting. "
endif
call dxget("SPROD",tmp$) \ BPROD$ = rtrim$(tmp$),Blank$
call dxget("EPROD",tmp$) \ EPROD$ = rtrim$(tmp$),EndParam$
if bprod$>eprod$
	let eflag=eflag+1
	Let message$ = message$+"Ending Product Must Be Greater Than Starting. "
endif
call dxget("NMTH",tmp$) \  Let DAYS = tmp$
If rtrim$(tmp$) = "" Let DAYS = 30 
If days < 1 Or days > 999 
	let eflag=eflag+1
	Let message$ = message$+"Invalid number of days with no sales, must be between 1 and 999!" 
endif
call dxget("CSTUM",tmp$) \ CSTUM = tmp$
if rtrim$(tmp$)="" let cstum=4 ! default to costing unit of measure
if cstum<1 or cstum>5
	let eflag=eflag+1
	let message$=message$+"Invalid Costing Unit Of Measure. "
endif
call dxget("QTYUM",tmp$) \ QTYUM = tmp$
if rtrim$(tmp$)="" let qtyum=1
if qtyum<1 or qtyum>3
	let eflag=eflag+1
	let message$=message$+"Invalid Quanity Unit Of Measure. "
endif
call dxget("NEGOH",tmp$) \ If rtrim$(tmp$) = "" Let NEGOH = 0 Else Let NEGOH = 1

If j8<>0 ! browser
		tmp$="WHSE",fdel$
		tmp$=tmp$,"SALESREP",fdel$
		tmp$=tmp$,"SLSREP MESSAGE",fdel$
		tmp$=tmp$,"ITEM CODE",fdel$
		tmp$=tmp$,"DESCRIPTION 1",fdel$
		tmp$=tmp$,"CGY",fdel$
		tmp$=tmp$,"ON HAND",fdel$
		tmp$=tmp$,"AVERAGE COST",fdel$
		tmp$=tmp$,"EXTENSION",fdel$
		tmp$=tmp$,"LST SOLD",fdel$
		tmp$=tmp$,"LST REC",fdel$
	tmp$=tmp$,rdel$
	Call addtostr(e$,rstr$,tmp$)
Endif
if eflag<>0 
	goto outend: ! errors have occured
endif

STRTSORT: Rem "report start
!Print @0,22;'CE';"SORTING, PLEASE WAIT  "
K1$ = " ",K1$
CLR_SORT: Rem "
Search #9,3,1;K1$,R[9],E \ If E = 2 Goto PROD_SORT
If E Gosub ERR_SEARCH
Search #9,5,1;K1$,R[9],E \ If E Gosub ERR_SEARCH
Goto CLR_SORT
PROD_SORT: Rem "through Prod & Whse Files
K1$ = " ",K1$;K1$ = BPROD$
NOREC = 0
Search #2,2,1;K1$,R[2],E \ If E = 0 Goto GOT_FRST
If E > 1 Gosub ERR_SEARCH
PF_SORT: Rem "Sorting Loop
Search #2,3,1;K1$,R[2],E \ If E = 2 Goto SORTDONE
If E Gosub ERR_SEARCH
GOT_FRST: Rem "found 1st
NOREC = NOREC + 1
! If Not(Fra(NOREC / 250)) Print @40,22;NOREC;K1$;'CL'
If K1$[1,12] > EPROD$ Goto SORTDONE
K10$ = K1$
Search #CH_PRUDA,2,1;K10$,REC_PRUDA,E
If E Goto PF_SORT
Mat Read #CH_PRUDA,REC_PRUDA,0;PROD$;
Mat Read #CH_PRUDA,REC_PRUDA,12;PUDA$;
Mat Read #CH_PRUDA,REC_PRUDA,662;PUDA;
If Not(PUDA[1]) Goto PF_SORT
Mat Read #2,R[2],156;B;
K2$ = " ",K2$;K2$[1,12] = K1$
K2$[13,14] = WH[1] Using "##"
Search #3,2,1;K2$,R[3],E \ If E = 0 Goto GFWHSE
If E > 1 Gosub ERR_SEARCH
PW_SORT: Rem "all whses selected
Search #3,3,1;K2$,R[3],E \ If E = 2 Goto PF_SORT
If E Gosub ERR_SEARCH
GFWHSE: Rem "match on starting
If K2$[1,12] <> K1$[1,12] Goto PF_SORT
WH = K2$[13,14] \ If WH > WH[2] Goto PF_SORT
NOREC = NOREC + 1
!If Not(Fra(NOREC / 250)) Print @40,22;NOREC;K2$;'CL'
Mat Read #3,R[3],32;W1;
Mat Read #3,R[3],38;W2;
Mat Read #3,R[3],78;W3;
VEND = W2[3] \ If VEND <= 0 Let VEND = B[24]
If VEND < VND[1] Or VEND > VND[2] Goto PW_SORT
BUYER = W1[2]
If BUYER < BYR[1] Or BUYER > BYR[2] Goto PW_SORT
Rem "now do nosales check
If W3[0] = 0 Goto PW_SORT
If NEGOH = 0 And W3[0] <= 0 Goto PW_SORT
If W2[6] = 0 Goto PW_SORT2
X$ = W2[6] Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Let X$ = "00001"
JDATE[1] = X$[1,5]
X2 = NMTH * 30
If JDATE[0] - JDATE[1] < X2 Goto PW_SORT
PW_SORT2: Gosub CHK_INVTRANS
If JDATE[2] = 0 Goto ADD2SORT
If JDATE[0] - JDATE[2] < DAYS Goto PW_SORT
BUYER = 0
ADD2SORT: Rem "put in sort file
K3$ = " ",K3$;K3$[1,2] = W1[0] Using "##"
K3$[3,6] = BUYER Using "####"
K3$[7,12] = PUDA[1] Using "######"
K3$[13,24] = K1$[1,12]
K3$[25,29] = JDATE[2] Using "&&&&&"
Search #9,4,1;K3$,R[2],E \ If E Gosub ERR_SEARCH
Goto PW_SORT
SORTDONE: Rem "and now we print
For X = 0 To 20 \ TTLS[X] = 0 \ Next X
!If Err 0 Gosub ERR_ESCAPE
!If SCRN Print 'CS';
if not(j8)
	If RPT[2] ! "second go round?
		Print #0;"\14\";
	End If
endif
RPT[2] = 0;RPT[0] = 90
NOREC = 0;K1$ = " ",K1$
BYR[0] = -1;VND[0] = -1;WH[0] = -1
VNDPRTD = 0;EOR = 0
SF_LOOP: Rem "thru to end
Search #9,3,1;K1$,R[2],E \ If E = 2 Goto RPTDONE
If E Gosub ERR_SEARCH
NOREC = NOREC + 1
!If Not(SCRN) And Not(Fra(NOREC / 250)) Print @40,22;NOREC;K1$[1,12];'CL'
X2 = K1$[1,2]
If WH[0] <> -1 And X2 <> WH[0] ! "whse Chg
  Gosub PRNT_BUYTTLS
  Gosub PRNT_VNDTTLS
  Gosub PRNT_WHSTTLS
  RPT[0] = 99
End If 
X2 = K1$[7,12]
If X2 <> VND[0] Let VNDPRTD = 0
If VND[0] <> -1 And X2 <> VND[0] ! vendor / slsm change
  Gosub PRNT_VNDTTLS
  RPT[0] = 99
End If 
WH[0] = K1$[1,2]
BYR[0] = K1$[3,6]
VND[0] = K1$[7,12]
BUYER = BYR[0]
VEND = VND[0]
Mat Read #2,R[2],0;A$;
Mat Read #2,R[2],156;B;
Mat Read #2,R[2],256;A;
Mat Read #2,R[2],460;A1;
Mat Read #2,R[2],512;PFU1;
Mat Read #2,R[2],554;PFU2;
K2$ = " ",K2$;K2$[1,12] = K1$[13,24];K2$[13,14] = K1$[1,2]
Search #3,2,1;K2$,R[3],E \ If E = 1 Goto SF_LOOP
Mat Read #3,R[3],38;W2;
Mat Read #3,R[3],78;W3;
K10$ = " ",K10$
K10$[1,12] = K2$[1,12]
Search #CH_PRUDA,2,1;K10$,REC_PRUDA,E
If E Goto SF_LOOP
Mat Read #CH_PRUDA,REC_PRUDA,0;PROD$;
Mat Read #CH_PRUDA,REC_PRUDA,12;PUDA$;
Mat Read #CH_PRUDA,REC_PRUDA,662;PUDA;
BUYR$ = " ",BUYR$
If BUYER Mat Read #6,BUYER,0;BUYR$;
VEND$ = " ",VEND$
Goto SKIPVEND
K3$ = " ",K3$;K3$ = VEND Using "######"
Search #4,2,1;K3$,R[4],E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #4,R[4],0;VEND$;
Else 
  VEND$ = "VENDOR NOT ON FILE      "
End If 
SKIPVEND: Rem skip vendor read now uda for salesperson
CSTUM$ = "    "
X2 = CSTUM + 7
If PFU1[X2] = -1 Let CSTUM$ = "CWT "
If PFU1[X2] = -2 Let CSTUM$ = "LOT "
If PFU1[X2] = -3 Let CSTUM$ = "LB  "
If PFU1[X2] > 0 Read #5,PFU1[X2],10;CSTUM$;
CNVTU[0] = 0;CNVTU[1] = PFU1[X2];CNVTU[2] = 2
X3 = B[21]
If P9$[32,32] = "Y" And W3[15] > 0 Let X3 = W3[15]
CNVTA = X3 \ Gosub CONVERT
DPLY[0] = AMOUNT
QTYUM$ = "    "
X2 = QTYUM + 7
If PFU1[X2] = -1 Let QTYUM$ = "CWT "
If PFU1[X2] = -2 Let QTYUM$ = "LOT "
If PFU1[X2] = -3 Let QTYUM$ = "LB  "
If PFU1[X2] > 0 Read #5,PFU1[X2],10;QTYUM$;
CNVTU[0] = 0;CNVTU[1] = PFU1[X2];CNVTU[2] = 1
CNVTA = W3[0] \ Gosub CONVERT
DPLY[1] = AMOUNT
DPLY[2] = FNR(W3[0] * X3)
Gosub PRNT_HEADER
If Not(VNDPRTD) Gosub PRNT_VENDINFO
Gosub PRNT_DETAIL
Gosub ADD2TTLS
Goto SF_LOOP
ADD2TTLS: Rem "
TTLS[1] = TTLS[1] + DPLY[1];TTLS[2] = TTLS[2] + DPLY[2]
TTLS[3] = TTLS[3] + DPLY[1];TTLS[4] = TTLS[4] + DPLY[2]
TTLS[5] = TTLS[5] + DPLY[1];TTLS[6] = TTLS[6] + DPLY[2]
TTLS[7] = TTLS[7] + DPLY[1];TTLS[8] = TTLS[8] + DPLY[2]
Return 
PRNT_VENDINFO: Rem "vendor number/name
if j8<>0 return
VNDPRTD = 1
Return 
Gosub PRNT_HEADER
Print #0; Using "######"; Tab 5;"VENDOR: ";VEND; Tab 20;VEND$
RPT[0] = RPT[0] + 1
VNDPRTD = 1
Return 
PRNT_BUYTTLS: Rem "buyer subtotals
Return 
if j8<>0 return
If RPT[0] + 3 > RPT[1] ! "will go past bottom
  RPT[0] = 99 \ Gosub PRNT_HEADER
End If 
Print #0;""
Print #0; Tab 10;"BUYER";BYR[0];"TOTALS";
Print #0; Using "-----,---,--#.##"; Tab 43;TTLS[1];
Print #0; Using "------,---,--#.##"; Tab 88;TTLS[2]
Print #0;""
BYR[0] = K1$[3,6]
TTLS[1] = 0;TTLS[2] = 0
Return 
PRNT_VNDTTLS: Rem "vendor  subtotals
if j8<>0 return
If RPT[0] + 3 > RPT[1] ! "will go past bottom
  RPT[0] = 99 \ Gosub PRNT_HEADER
End If 
Print #0;""
Print #0; Tab 10;"SALESMAN ";VND[0];"TOTALS";
Print #0; Using "-----,---,--#.##"; Tab 43;TTLS[7];
Print #0; Using "------,---,--#.##"; Tab 88;TTLS[8]
Print #0;""
VND[0] = K1$[7,12]
TTLS[7] = 0;TTLS[8] = 0
Return 
PRNT_WHSTTLS: Rem "whse subtotals
if j8<>0 return
If RPT[0] + 3 > RPT[1] ! "will go past bottom
  RPT[0] = 99 \ Gosub PRNT_HEADER
End If 
Print #0;""
Print #0; Tab 10;"WAREHOUSE";WH[0];"TOTALS";
Print #0; Using "-----,---,--#.##"; Tab 43;TTLS[3];
Print #0; Using "------,---,--#.##"; Tab 88;TTLS[4]
Print #0;""
WH[0] = K1$[1,2]
TTLS[3] = 0;TTLS[4] = 0
Return 
PRNT_RPTTTLS: Rem "report totals
if j8<>0 return
EOR = 99
RPT[0] = 99 \ Gosub PRNT_HEADER
Print #0;""
Print #0; Tab 10;"REPORT TOTALS";
Print #0; Using "------,---,--#.##"; Tab 42;TTLS[5];
Print #0; Using "-------,---,--#.##"; Tab 87;TTLS[6]
EOR = 0;TTLS[5] = 0;TTLS[6] = 0
Return 
PRNT_DETAIL: Rem "product detail
totrec=totrec+1
if j8<>0
		tmp$=""
		Tmp$=ltrim$(WH[0] using "##"),fdel$
		tmp$=tmp$,ltrim$(puda[1] using "###"),fdel$
		tmp$=tmp$,RTrim$(puda$[501,519]),fdel$	
		tmp$=tmp$,RTrim$(a$[140,151]),fdel$
		tmp$=tmp$,RTrim$(a$[9,37]),fdel$
		tmp$=tmp$,LTrim$(b[11] using "##"),fdel$
		tmp$=tmp$,LTrim$((dply[1]) using "-------#.##")," ",qtyum$,fdel$
		tmp$=tmp$,LTrim$((dply[0]) using "--------#.##")," ",cstum$,fdel$
		tmp$=tmp$,LTrim$((dply[2]) using "----------#.##"),fdel$
		X2 = W2[6]
		If X2 Gosub ISDUNPACK Else Let X$ = " NEVER  "
		tmp$=tmp$,x$[1,8],fdel$
		X2 = K1$[25,29]
		If X2 Gosub JUL2DATE Else Let X$ = " NEVER  "
		tmp$=tmp$,x$[1,8],fdel$
		tmp$=tmp$,rdel$
		Call addtostr(e$,rstr$,tmp$)
else
Print #0; Using "###"; Tab 1;PUDA[1];
Print #0; Tab 5;PUDA$[501,519];
Print #0; Tab 23;A$[140,151];
Print #0; Tab 36;A$[9,37];
Print #0; Using "##"; Tab 66;B[11];
Print #0; Using "-------#.##"; Tab 68;DPLY[1];" ";QTYUM$;
Print #0; Using "######.##"; Tab 82;DPLY[0];" ";CSTUM$;
Print #0; Using "---------#.##"; Tab 95;DPLY[2];
X2 = W2[6]
If X2 Gosub ISDUNPACK Else Let X$ = " NEVER  "
Print #0; Tab 114;X$[1,8];
X2 = K1$[25,29]
If X2 Gosub JUL2DATE Else Let X$ = " NEVER  "
Print #0; Tab 123;X$[1,8]
RPT = RPT + 1
endif
Return 
PRNT_HEADER: Rem "report header
if j8<>0 return
If RPT < RPT[1] Return 
If RPT[2] ! "after page 1
  !If SCRN
  !  Print @0,23;'CL';"PRESS <CR> TO CONTINUE  ";
  !  Input Len 16384 + 1;""J$
   ! Print 'CS';
  !End If 
  Print #0;"\14\";
End If 
Print #0;""
RPT[2] = RPT[2] + 1
Print #0; Tab 1;"DATE: ";DATE$;
Print #0; Tab (Int(64 - (Len(CONM$) / 2)));CONM$;
Print #0; Tab 120;"PAGE: ";RPT[2]
Print #0;" -690c- ";
TME$ = "" \ Call Time(TME$)
Print #0;TME$;
Print #0; Tab 45;"D E A D   I N V E N T O R Y   R E P O R T";
Print #0; Tab 110;Str$(Days);" Days"
Print #0;""
Print #0; Tab 1;"SLSM MESSAGE";
Print #0; Tab 23;"ITEM CODE"; Tab 36;"DESCRIPTION 1"; Tab 65;"CGY";
Print #0; Tab 74;"ON HAND"; Tab 83;"AVERAGE COST";
Print #0; Tab 102;"EXTENSION"; Tab 114;"LST SOLD"; Tab 124;"LST REC"
Print #0;""
If Not(EOR)
  Print #0; Tab 1;"WAREHOUSE:";WH[0];
  Print #0;""
End If 
RPT[0] = 9
VNDPRTD = 0
Return 
CHK_INVTRANS: Rem
JDATE[2] = 0
K8$ = " ",K8$;K8$[1,12] = K1$
K8$[13,26] = "99999999999999"
TRANS_LOOP: Rem
Search #8,6,2;K8$,R8,E
If E > 3 Gosub ERR_SEARCH
If E Goto END_TRANS_LOOP
If R8 < 1 Or R8 > Chf(8) - 1 Goto TRANS_LOOP
If K8$[1,12] <> K1$[1,12] Goto END_TRANS_LOOP
Mat Read #8,R8,56;LT1;
Mat Read #8,R8,64;LT2;
If LT1[1] <> WH Goto TRANS_LOOP
If LT1[0] <> 1 Goto TRANS_LOOP
JDATE[2] = LT2[0]
END_TRANS_LOOP: Rem
Return 
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
RPTDONE: Rem "done
Gosub PRNT_BUYTTLS
Gosub PRNT_WHSTTLS
Gosub PRNT_RPTTTLS
!If SCRN
!  Print @0,23;'CL';"PRESS <CR> TO EXIT  ";
!  Input Len 16384 + 1;""J$
!End If 
Goto OUTEND

ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 

ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 


Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: Rem ALL UB 5+!!  IF SPC 4>1280 GOTO cvtstartb: ! "unibasic 5+
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}


ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End



ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
If not(j8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions to print"
			message$=message$+"."
		else
			Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
