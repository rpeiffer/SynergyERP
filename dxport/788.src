! >>> Program 788
!
! description Inventory Service Level Report
!
! loadsave -w -n 100,10 -o prog/dxport/788.dl4 src/788.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB 10, 2006  11:15:10
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx77/mx788.src (univ2) [txc] {47096}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX788 Inventory Service Level Report
Rem Last Update: 06/O5/00 MTG -for achieving effective inventory management
Rem              02/25/02 zyc -cct154941 wrong prod code on subtotal
!
Declare Intrinsic Sub InpBuf,String
! - Option Default Dialect IRIS1
Com 1%,REPORT
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
! - CHOOSE_REPORT: Rem ======================================================
! - Print 'CL';@0,0;"mx788";
! - Print 'CS';@30,0;"SERVICE LEVEL REPORT";
! - Print 'CL';@12,4;"1> Service Level Report"
! - Print 'CL';@12,6;"2> Service Level Report - Buyer Version"
! - Print 'CL';@12,8;"3> Service Level Report - Company Version"
! - Print @12,10;"Enter # to choose report type, or  E: exit ";
! - Input Len (16384 + 1);""REPORT$
! - Call String(1,REPORT$)
! - If REPORT$[1,1] = "E" Goto L_9040
! - If REPORT$[1,1] = "2"
! -   REPORT = 1
! -   Chain "mx788a"
! - End If 
! - If REPORT$[1,1] = "3"
! -   REPORT = 2
! -   Chain "mx788a"
! - End If 
! - If REPORT$[1,1] <> "1" Goto CHOOSE_REPORT
!
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim REPORT$[1]
Dim 1%,SORTVEND
Dim 1%,F,L,ARMTH,LSTMTH
Dim 2%,E,COMP
Dim 2%,J,D,ARDATE
Dim D2$[10]
Dim P9$[50]
Dim 2%,R[10],WHSE[1],VEND[1],VENDCHK
Dim 3%,T[4]
Dim 3%,V9,PCTR
Dim F$[30],C$[30],M$[16],ARDATE$[8],P$[20],SPROD$[12],EPROD$[12]
Dim CNAME$[30]
Dim LINES$[132],RETVAL$[256],Z2$[2]
Dim KEYPW$[14],KEY_$[50],PRODCHK$[12]
Dim VENDNAME$[30]
Dim KEYPROD$[12],KEYPRWH$[14],KEYVEND$[6],KEYSORT$[50]
Dim 1%,MTH,MULTWHSE,CH_PROD,CH_PRWH,CH_VEND,URECFLAG
Dim 3%,TURN,GROSSMARGIN,ADJMARGIN,SVCLVL,WHT9[0,5],VNDT90[99,5]
Dim 3%,GRDT90[99,5],T9[0,5],AVGCOST,PREVEOMBAL,UNITPURCH,GMROI
Dim 3%,REC_PROD,REC_PRWH,REC_VEND,T8[0,3]
Dim 4%,TOTCHK
Dim PW$[12]
Dim 1%,PW[0],MONTHS_EXIST
Dim 3%,PWS[12,2],PWSL[12,2],PWOH[12],PWOHL[12],PWAVG[12],PWAVGL[12]
Dim 3%,PWFRCST[12],PWFRCSTL[12],2%,SRVLVL[12,1],LSRVLVL[12,1]
Dim 1%,VNDA[4],VNDM4[1]
Dim 2%,VND1[6],VND3
Dim 3%,VNDA2[11],VNDC1[5],VND4[1],VNDA3[7]
Dim VNDA$[264],VNDC2$[44],VNDA1$[20],VNDA2$[8],VNDA3$[4],VNDA5$[60]
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1]
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Dim 3%
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNI(H) = Int(Abs(H) + .5) * Sgn(H)
LINES$ = "-",LINES$
! dx add xport reporting code
DXSetup:
Dim tmp$[1000],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
F = 0
If Err 0 Let F = Spc(8)
N = Chf(0)
If Err 0 Gosub ERR_TRAP
SCRPRT = 0
L9 = 63
If F
  L9 = 22 \ J8=F
  SCRPRT = 99
End If 
Read #1,0,108;ARDATE;
Read #1,0,100;ARDATE$;
Read #1,0,120;ARMTH;
LSTMTH = ARMTH - 1 \ If LSTMTH < 1 Let LSTMTH = 12
Read #1,18,30;D2$;
Read #1,3;CNAME$;
Mat Read #1,19,50;P9$;
For I = 2 To 5
  Read L
  If L
    Read #1,88,L;J$;
    Ropen #I,J$
  End If 
Next I
Data "1792","1744","2400","2288"
CH_PROD = 2
CH_PRWH = 3
CH_VEND = 4
! - X2 = Spc(5) \ COMP = Int((X2 - Int(X2 / 16384) * 16384) / 64)
! - F$ = "4/PWSALES" + Str$(COMP) \ Open #6,F$
!
F$ = "4/PWSALES" + Str$(intCO) \ Open #6,F$
!call dxsave(0,"tmp/788in.txt!")
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"788",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("sortvendor",tmp$) \ if tmp$="" let SortVend=0 else SortVend=1 ! sort by vendor
call dxget("begvendor",tmp$) \ VEND[0]=tmp$ ! starting vendor
call dxget("endvendor",tmp$) \ if tmp$="" let VEND[1]=999999 else VEND[1]=tmp$ ! ending vendor
call dxget("begprod",SPROD$) ! starting product
call dxget("endprod",EPROD$) ! ending product
call dxget("begwhse",tmp$) \ if tmp$="" let WHSE[0]=1 else WHSE[0]=tmp$ ! starting warehouse
call dxget("endwhse",tmp$) \ if tmp$="" let WHSE[1]=99 else WHSE[1]=tmp$ ! ending warehouse
call dxget("sortlevel",tmp$) \ if tmp$="" let SortLevel=0 else SortLevel=1 ! sort by srvlevel
call dxget("ASCEND",tmp$) \ Ascend=tmp$ ! service level % order 1=ascending 0=descending
!  dx end
!
! vendor section
if VEND[0]<0 or VEND[0]>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
if VEND[1]<VEND[0] or VEND[1]>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
! product section
SPROD$=UCase$(SPROD$),Blank$
EPROD$=UCase$(EPROD$),EndParam$
if EPROD$<SPROD$ or EPROD$>EndParam$ let e$="Invalid ending product, must be between starting product and ",EndParam$[1,12],"!" \ error 10000
!
! warehouse
if WHSE[0]<1 or WHSE[0]>99 let e$="Invalid starting warehouse, must be between 1 and 99!" \ error 10000
if WHSE[1]<WHSE[0] or WHSE[1]>99 let e$="Invalid ending warehouse, must be between starting warehouse and 99!" \ error 10000
!
! service level
if SortLevel=0 let Ascend=0

If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If
! - Call "progdflt","788","",77,RETVAL$
! - If RETVAL$[1,5] = "@@@@@"
! -   RETVAL$ = " ",RETVAL$
! -   RETVAL$[1,1] = "0"
! -   RETVAL$[2,3] = " 0"
! -   RETVAL$[4,5] = "99"
! -   RETVAL$[6,17] = "            "
! -   RETVAL$[18,29] = "zzzzzzzzzzzz"
! -   RETVAL$[30,35] = "     0"
! -   RETVAL$[36,41] = "999999"
! -   RETVAL$[42,42] = "0"
! -   RETVAL$[43,43] = "0"
! -   Call "progdfltw","788","",77,RETVAL$,URECFLAG
! - End If 
! - SORTVEND = RETVAL$[1,1]
! - WHSE[0] = RETVAL$[2,3];WHSE[1] = RETVAL$[4,5]
! - VEND[0] = RETVAL$[30,35];VEND[1] = RETVAL$[36,41]
! - SPROD$ = RETVAL$[6,17];EPROD$ = RETVAL$[18,29]
! - SORTLEVEL = RETVAL$[42,42]
! - ASCEND = RETVAL$[43,43]
! - L_1000: Rem SELECT RANGES
! - Gosub L_5600 \ Gosub L_5700
! - L_1070: Print @0,23;'CL';"Enter #:field to edit  R: reselect all  P: print  S: save default or  E: exit ";
! - Input Len (16384 + 1);""J$
! - Call String(1,J$)
! - If J$ = "E" Goto L_9040
! - If J$ = "P" Goto CHKSORT
! - If J$ = "S"
! - ASK_SAVE: Print @0,22;'CL';"Save for  A: all or  U: user access only, <CR>: do not save ";
! -   Input Len 16384 + 1;""Z2$
! -   Call String(1,Z2$)
! -   If Z2$ = "" Print @0,22;'CL'; \ Goto L_1070
! -   If Z2$ <> "A" And Z2$ <> "U" Goto ASK_SAVE
! -   If Z2$ = "A" Let URECFLAG = 0 Else Let URECFLAG = 1
! -   Call "progdfltw","788","",77,RETVAL$,URECFLAG
! -   Print @0,22;'CL'
! -   Goto L_1070
! - End If 
! - If J$ = "R"
! -   For K = 1 To 4
! -     If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! -     On K Gosub SORTVENDOPT,PRODRNGOPT,WHSERNGOPT,SORTLEVELOPT
! -     If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! -   Next K
! -   Goto L_1070
! - End If 
! - K = J$
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On K Gosub SORTVENDOPT,PRODRNGOPT,WHSERNGOPT,SORTLEVELOPT,SORTORDEROPT
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Goto L_1070
!
! *** Sort Section
CHKSORT: Rem chk to see if file needs to be sorted
CHPRNT = 6
If Not(SORTVEND) If Not(SORTLEVEL) Goto L_1900 ! bypass sort
CHPRNT = 9
KEYSORT$ = " ",KEYSORT$
CLEARSORT: Rem clear sortwork file
Search #9,3,1;KEYSORT$,R[9],E
If E = 2 Goto STARTSORT
Search #9,5,1;KEYSORT$,R[9],E
If E Let e$ = "syserrorfile 788 sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",KEYSORT$ \error 10000
Goto CLEARSORT
!
STARTSORT: Rem start sorting file
KEYPW$ = " ",KEYPW$
KEYPW$ = SPROD$
! - Print @0,22;'CE';"Sorting, please wait...";
SRCHSORT: Rem search key
Search #6,3,1;KEYPW$,R[6],E
If E = 2 Goto L_1900
KEYSORT$ = " ",KEYSORT$
! - If E Gosub ERR_SEARCH
If KEYPW$[1,12] > EPROD$[1,12] Goto L_1900
PCTR = PCTR + 1
! - If Not(Fra(PCTR / 500)) Print Using "#######";@25,22;PCTR;" Records Processed";
Gosub READPWSALES
If PW[0] < WHSE[0] Or PW[0] > WHSE[1] Goto SRCHSORT
KEYPRWH$ = KEYPW$
Search #CH_PRWH,2,1;KEYPRWH$,REC_PRWH,E
If E Goto SRCHSORTPROD
Gosub READPRWH
If SORTVEND If W2[3] ! vendor #
  If W2[3] < VEND[0] Or W2[3] > VEND[1] Goto SRCHSORT
  KEYSORT$ = " ",KEYSORT$
  KEYSORT$[1,6] = W2[3] Using "######"
  Goto ADDSORTKEY
End If 
If W0[0] Goto SRCHSORT
SRCHSORTPROD: Rem search product file for key
KEYPROD$ = KEYPW$[1,12]
Search #CH_PROD,2,1;KEYPROD$,REC_PROD,E 
If E = 1 Goto SRCHSORT
Gosub READPROD
If B[24] < VEND[0] Or B[24] > VEND[1] Goto SRCHSORT
If SORTVEND Let KEYSORT$[1,6] = B[24] Using "######"
ADDSORTKEY: Rem set up key & insert into sort file
If SORTLEVEL
  For X = 0 To 3 \ T8[0,X] = 0 \ Next X
  For X = 1 To 12
    T8[0,2] = T8[0,2] + SRVLVL[X,0]
    T8[0,3] = T8[0,3] + SRVLVL[X,1]
  Next X
  SVLV = 0
  If T8[0,3]
    SVLV = FNR((T8[0,2] / T8[0,3]) * 100)
  End If 
  If ASCEND
    KEYSORT$[7,11] = SVLV * 100 Using "#####"
  Else 
    KEYSORT$[7,11] = 99999 - SVLV * 100 Using "#####"
  End If 
End If !"sorting by serivce level
KEYSORT$[12] = KEYPW$
Search #9,4,1;KEYSORT$,R[6],E
If E Let e$ = "syserrorfile 788 sortfile mode (m)=4 keyno (k)=1 r=",R[6]," e=",e," keyval (k$)=",KEYSORT$ \error 10000
Goto SRCHSORT
!
! *** Process Section
L_1900: Rem start here
! - If Not(SCRPRT)  Print @0,22;'CE';"Printing, please wait...";
! - If Err 0 Gosub ERR_ESCAPE
! - If L9 = 22 Print 'CS'
! - Signal 3,0
!
if J8 ! dx xml headings
  If SortVend ! vendor
    tmp$="VENDOR",fdel$,"VENDOR NAME",fdel$
    tmp$=tmp$,"PRODUCT",fdel$,"PRODUCT DESC",fdel$
  else ! product
    tmp$="PRODUCT",fdel$,"PRODUCT DESC",fdel$
  endif
  If P9$[26,26] = "Y" let tmp$=tmp$,"PRODUCT DESC 2",fdel$
  tmp$=tmp$,"COMM",fdel$,"WH",fdel$
  tmp$=tmp$,"COST OF SALES",fdel$,"AVG INVENTORY",fdel$
  tmp$=tmp$,"TURN",fdel$,"GROSS MARG",fdel$
  tmp$=tmp$,"ADJ MARGIN",fdel$,"GMROI",fdel$
  tmp$=tmp$,"SERV %",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
L = 70 \ V9 = 0
For X = 0 To 5 \ T9[0,X] = 0 \ WHT9[0,X] = 0 \ Next X
For X = 0 To 5
  For I = 0 To 99 \ VNDT90[I,X] = 0 \ GRDT90[I,X] = 0 \ Next I
Next X
KEY_$ = " ",KEY_$
VENDCHK = -1;MULTWHSE = 0;PRODCHK$ = ""
If Not(SORTVEND) If Not(SORTLEVEL)
  KEY_$ = SPROD$ \ CHPRNT = 6
Else 
  CHPRNT = 9
End If 
PRNTSRCH: Rem search for items to print here
Search #CHPRNT,3,1;KEY_$,R[6],E 
If E = 2 Goto OUTEND
Gosub READPWSALES
If Not(SORTVEND) If Not(SORTLEVEL)
  If KEY_$[1,12] > EPROD$[1,12] Goto OUTEND
  If PW[0] < WHSE[0] Or PW[0] > WHSE[1] Goto PRNTSRCH
Else 
  X2 = KEY_$[1,6]
  If VENDCHK <> X2
    If VENDCHK >= 0
      Gosub PRNTWHSETOT
      Gosub PRNTVENDTOT
    End If 
    PRODCHK$ = ""
    VENDCHK = X2
    KEYVEND$ = VENDCHK Using "######"
    Search #CH_VEND,2,1;KEYVEND$,REC_VEND,E
    If Not(E)
      Gosub READVEND
      VENDNAME$ = VNDA$[1,30]
    Else 
      VENDNAME$ = "*** Vendor Not On File ***"
    End If 
    L = 99
  End If 
End If 
If PRODCHK$[1,12] <> PW$[1,12]
  If PRODCHK$ <> "" Gosub PRNTWHSETOT
  PRODCHK$ = ""
  KEYPROD$ = PW$[1,12]
  Search #CH_PROD,2,1;KEYPROD$,REC_PROD,E
  If E Goto PRNTSRCH
  Gosub READPROD
  MULTWHSE = -1
End If 
If B[24] < VEND[0] Or B[24] > VEND[1] Goto PRNTSRCH
KEYPRWH$ = " ",KEYPRWH$
KEYPRWH$[1,12] = PW$[1,12];KEYPRWH$[13,14] = PW Using "##"
Search #CH_PRWH,2,1;KEYPRWH$,REC_PRWH,E
If E Goto PRNTSRCH
Gosub READPRWH
If W0[0] Goto PRNTSRCH
PRODCHK$ = PW$[1,12]
Gosub CALCWHTOT
TOTCHK = 0
For I = 0 To 5 \ TOTCHK = TOTCHK + T9[0,I] \ Next I
If Not(TOTCHK) Goto PRNTSRCH
MULTWHSE = MULTWHSE + 1
LINES = 2
Gosub L_5800
Gosub L_5000
Gosub ACCUMTOT
Goto PRNTSRCH
!
! - SORTVENDOPT: J0$ = "6000 12506"
! - J2$ = "#" \ J1 = SORTVEND
! - J5$ = "Do you wish to sort & subtotal by vendor (Y/N)"
! - Gosub ISINPUT
! - SORTVEND = J1
! - Print @0,8;'CL';
! - If SORTVEND
! -   Print @5,8;"    VENDOR";
! -   Print Using "######";@32,8;VEND[0];@50,8;VEND[1];
! - VENDRNGOPT: J0$ = "3000 63208"
! -   J2$ = "######" \ J1 = VEND[0]
! -   J5$ = "Enter Starting Vendor Code"
! -   Gosub ISINPUT
! -   VEND[0] = J1
! -   J0$ = "3000 65008"
! -   J2$ = "######" \ J1 = VEND[1]
! -   J5$ = "Enter Ending Vendor Code"
! -   Gosub ISINPUT
! -   VEND[1] = J1
! -   If VEND[0] > VEND[1]
! -     Print @0,23;'CL RB';"Ending Vendor Code Must Be Greater Than Starting";
! -     Signal 3,20 \ Goto VENDRNGOPT
! -   End If 
! - Else 
! -   Print @0,8;'CL';
! - End If 
! - RETVAL$[1,1] = SORTVEND Using "#"
! - RETVAL$[30,35] = VEND[0] Using "######"
! - RETVAL$[36,41] = VEND[1] Using "######"
! - Return 
! - SORTLEVELOPT: Rem
! - J0$ = "6000 13514"
! - J1 = SORTLEVEL
! - J5$ = "Do you wish to sort by service level% (Y/N)"
! - Gosub ISINPUT
! - SORTLEVEL = J1
! - RETVAL$[42,42] = SORTLEVEL Using "#"
! - If SORTLEVEL
! -   Gosub SORTORDEROPT
! - Else 
! -   Print @0,16;'CL';
! - End If 
! - Return 
! - SORTORDEROPT: Rem
! - If SORTLEVEL
! -   Print @5,16;"5>  Service Level % Sort Order:  A: ascending   D: descending ";
! - BWORDEROPT: Rem
! -   J0$ = "2 00017216"
! -   J5$ = "Sorting in  A: ascending  or  D: descending "
! -   If ASCEND Let J1$ = "A" Else Let J1$ = "D"
! -   Gosub ISINPUT
! -   If J$ <> "A" And J$ <> "D"
! -     Print @0,23;'CL RB';"INVALID ENTRY";
! -     Signal 3,20 \ Goto BWORDEROPT
! -   End If 
! -   If J$ = "A" Let ASCEND = 1 Else Let ASCEND = 0
! - Else 
! -   Print @0,16;'CL';
! - End If 
! - RETVAL$[43,43] = ASCEND Using "#"
! - Return 
! - PRODRNGOPT: J0$ = "2 00122610"
! - J1$ = SPROD$[1,12]
! - J5$ = "Enter Starting Product Code"
! - Gosub ISINPUT
! - SPROD$[1,12] = J$
! - J0$ = "2 00124410"
! - J1$ = EPROD$[1,12]
! - J5$ = "Enter Ending Product Code"
! - Gosub ISINPUT
! - EPROD$[1,12] = J$
! - If EPROD$ < SPROD$
! -   Print @0,23;'CL RB';"Ending Code Must Be Greater Than Starting Code";
! -   Signal 3,30 \ Goto PRODRNGOPT
! - End If 
! - RETVAL$[6,17] = SPROD$
! - RETVAL$[18,29] = EPROD$
! - Return 
! - WHSERNGOPT: Rem warehouse #3
! - J0$ = "3000 23612"
! - J2$ = "##" \ J1 = WHSE[0]
! - J5$ = "Enter Starting Warehouse"
! - Gosub ISINPUT
! - WHSE[0] = J1
! - J0$ = "3000 25412"
! - J2$ = "##" \ J1 = WHSE[1]
! - J5$ = "Enter Ending Warehouse"
! - Gosub ISINPUT
! - WHSE[1] = J1
! - If WHSE[0] > WHSE[1]
! -   Print @0,23;'CL RB';"Ending Warehouse Must Be Greater Than Starting";
! -   Signal 3,30 \ Goto WHSERNGOPT
! - End If 
! - RETVAL$[2,3] = WHSE[0] Using "##"
! - RETVAL$[4,5] = WHSE[1] Using "##"
! - Return 
!
PRNTVENDTOT: Rem print vendor totals
if J8 goto VendorTotalExit ! dx xml
!
MULTWHSE = -1
A$ = " ",A$
For X = 1 To 99
  TOTCHK = 0
  For I = 0 To 5
    TOTCHK = TOTCHK + VNDT90[X,I]
  Next I
  If TOTCHK
    For I = 0 To 5 \ T9[0,I] = VNDT90[X,I] \ Next I
    LINES = 2
    If MULTWHSE = -1
      Print #0;"*** Vendor Totals ***";
    End If 
    Print #0; Using "##"; Tab 49;X;
    MULTWHSE = MULTWHSE + 1
    Gosub LINEPRNT
  End If 
Next X
If MULTWHSE > 0
  LINES = 2 \ Gosub L_5800
  For I = 0 To 5 \ T9[0,I] = VNDT90[0,I] \ Next I
  Print #0; Tab 48;"ALL";
  Gosub LINEPRNT
End If 
!
VendorTotalExit:
For I = 0 To 5
  For X = 0 To 99 \ VNDT90[X,I] = 0 \ Next X
Next I
Return 
!
PRNTWHSETOT: Rem print warehouse totals
if J8=0
  If MULTWHSE > 0
    LINES = 2 \ Gosub L_5800
    Print #0;"**** total for product ";PRODCHK$[1,12];" ****";
    For X = 0 To 5 \ T9[0,X] = WHT9[0,X] \ Next X
    Gosub LINEPRNT
  End If 
endif
For X = 0 To 5 \ WHT9[0,X] = 0 \ Next X
Return 
!
PRNTGRDTOT: Rem print grandtotals
if J8 return ! dx xml
!
MULTWHSE = -1
A$ = " ",A$
For X = 1 To 99
  TOTCHK = 0
  For I = 0 To 5
    TOTCHK = TOTCHK + GRDT90[X,I]
  Next I
  If TOTCHK
    For I = 0 To 5 \ T9[0,I] = GRDT90[X,I] \ Next I
    LINES = 2
    If MULTWHSE = -1
      Print #0;"*** Grand Totals ***";
    End If 
    Print #0; Using "##"; Tab 49;X;
    MULTWHSE = MULTWHSE + 1
    Gosub LINEPRNT
  End If 
Next X
If MULTWHSE
  LINES = 2 \ Gosub L_5800
  If MULTWHSE < 0
    Print #0;"*** Grand Totals ***";
  End If 
  For I = 0 To 5 \ T9[0,I] = GRDT90[0,I] \ Next I
  Print #0; Tab 48;"ALL";
  Gosub LINEPRNT
End If 
For I = 0 To 5
  For X = 0 To 99 \ GRDT90[X,I] = 0 \ Next X
Next I
Return 
!
L_5000: Rem print detail line info
!
if J8
  If SortVend ! vendor
    tmp$=KeyVend$[1,6],fdel$,rtrim$(VendName$),fdel$
    tmp$=tmp$,PW$[1,12],fdel$,rtrim$(A$[9,38]),fdel$
  else 
    tmp$=PW$[1,12],fdel$,rtrim$(A$[9,38]),fdel$
  endif
  If P9$[26,26] = "Y" let tmp$=tmp$,rtrim$(A$[63,92]),fdel$
  tmp$=tmp$,A$[152,155],fdel$,PW[0] Using "##",fdel$
  tmp$=tmp$,FNR(T9[0,1]) using "---,---,---.##",fdel$
  If MONTHS_EXIST < 1 Let MONTHS_EXIST = 1
  If MONTHS_EXIST > 12 Let MONTHS_EXIST = 12
  tmp$=tmp$,FNR(T9[0,4] / MONTHS_EXIST) Using "---,---,---.##",fdel$
  !
  If T9[0,4] let TURN = FNI(T9[0,1] / (T9[0,4] / MONTHS_EXIST)) else TURN=0
  If T9[0,0] let GROSSMARGIN = FNR(((T9[0,0] - T9[0,1]) / T9[0,0]) * 100) else GROSSMARGIN = 0 ! for %
  If T9[0,0] let ADJMARGIN = FNR((((T9[0,0] - T9[0,1]) - (T9[0,5])) / T9[0,0]) * 100) else ADJMARGIN = 0 ! for %
  If T9[0,3] let SVCLVL = FNR((T9[0,2] / T9[0,3]) * 100) else SVCLVL = 0
  !
  GMROI = TURN * GROSSMARGIN
  tmp$=tmp$,TURN Using "----#",fdel$
  tmp$=tmp$,GROSSMARGIN Using "----,---.##%",fdel$
  tmp$=tmp$,ADJMARGIN Using "---,---.##%",fdel$
  tmp$=tmp$,GMROI Using "----.##%",fdel$
  tmp$=tmp$,SVCLVL Using "###.##%",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
!
If Not(MULTWHSE)
  Print #0;PW$[1,12];
  Print #0; Tab 13;A$[9,38];
  Print #0; Tab 44;A$[152,155];
End If 
Print #0; Using "##"; Tab 49;PW[0];
LINEPRNT: Rem start here for totals
If Not(SCRPRT)
  PCTR = PCTR + 1
! -   If Not(Fra(PCTR / 500))
! -     Print Using "#######";@25,22;PCTR;" Records Printed";
! -     Print Using "   Page ####";V9[0];
! -   End If 
End If 
Print #0; Using "---,---,---.##"; Tab 56;FNR(T9[0,1]);
If MONTHS_EXIST < 1 Let MONTHS_EXIST = 1
If MONTHS_EXIST > 12 Let MONTHS_EXIST = 12
Print #0; Using "---,---,---.##"; Tab 70;FNR(T9[0,4] / MONTHS_EXIST);
TURN = 0
If T9[0,4]
  TURN = FNI(T9[0,1] / (T9[0,4] / MONTHS_EXIST))
End If 
Print #0; Using "----#"; Tab 85;TURN;
GROSSMARGIN = 0
If T9[0,0] ! for %
  GROSSMARGIN = FNR(((T9[0,0] - T9[0,1]) / T9[0,0]) * 100)
End If 
Print #0; Using "----,---.##%"; Tab 90;GROSSMARGIN;
ADJMARGIN = 0
If T9[0,0] ! for %
  ADJMARGIN = FNR((((T9[0,0] - T9[0,1]) - (T9[0,5])) / T9[0,0]) * 100)
End If 
Print #0; Using "---,---.##%"; Tab 102;ADJMARGIN;
GMROI = TURN * GROSSMARGIN
Print #0; Using "----.##%"; Tab 115;GMROI;
SVCLVL = 0
If T9[0,3]
  SVCLVL = FNR((T9[0,2] / T9[0,3]) * 100)
End If 
Print #0; Using "###.##%"; Tab 124;SVCLVL
Print #0;""
Return 
!
! - L_5600: Rem DISPLAY SCREEN
! - Print 'CS';@0,0;"-mx788-"; Tab 27;"INVENTORY SERVICE LEVEL REPORT";
! - Print @5,6;"1> SORT BY VENDOR : ";
! - Print @29,7;'BR';"STARTING";'ER';@49,7;'BR';"ENDING";'ER';
! - If SORTVEND
! -   Print @5,8;"   VENDOR";
! - End If 
! - Print @5,10;"2> PRODUCT CODE";
! - Print @5,12;"3> WAREHOUSE";
! - Print @5,14;"4> Sort by service level %? ";
! - Return 
! - L_5700: Rem DISPLAY SCREEN VARIABLES
! - If SORTVEND
! -   Print @25,6;"Y";
! -   Print Using "######";@32,8;VEND[0];@50,8;VEND[1];
! - Else 
! -   Print @25,6;"N";
! - End If 
! - Print @26,10;SPROD$[1,12];@44,10;EPROD$[1,12];
! - Print Using "##";@36,12;WHSE[0];@54,12;WHSE[1];
! - If SORTLEVEL
! -   Print @35,14;"Y";
! -   Print @5,16;"5>  Service Level % Sort Order:  A: ascending   D: descending ";
! -   If ASCEND Print @72,16;"A" Else Print @72,16;"D"
! - Else 
! -   Print @35,14;"N";
! - End If 
! - Return 
!
L_5800: Rem HEADING ROUTINE
if J8 return ! dx xml
!
L = L + LINES
If L < L9 Return 
If V9 = 0 Goto L_5835
If L9 <> 22 Goto L_5830
HEADMORE: Rem check for more
! - Print @0,23;'CL';"Press <CR>: continue  E: exit ";
! - Input Len 1;""J1$
! - Call String(1,J1$)
! - If J1$ = "E" Gosub L_9040
! - If J1$ <> "" Goto HEADMORE
! - Print 'CS'
L_5830: 
Print #0;"\14\"
L_5835: V9 = V9 + 1
Print #0;"-mx788-";
Print #0; Tab 10;ARDATE$; Tab (66 - Int(Len(CNAME$) / 2));CNAME$; Tab 100;"PAGE";V9
Print #0; Tab 2;Msc$(3);
Print #0; Tab 45;"I N V E N T O R Y   S E R V I C E   L E V E L   R E P O R T"
If SORTVEND
  Print #0; Using "###### ";"Vendor: ";VENDCHK;VENDNAME$[1,30];
End If 
Print #0; Tab 55;D2$;": ";
Print #0; Using "##";WHSE[0];" THRU ";WHSE[1];
Print #0;" "
If SORTLEVEL
  If ASCEND
    Print #0; Tab 55;"SORT BY SERVICE LEVEL % IN ASCENDING";
  Else 
    Print #0; Tab 55;"SORT BY SERVICE LEVEL % IN DESCENDING";
  End If 
End If 
Print #0;" "
Print #0;"PRODUCT"; Tab 13;"DESCRIPTION"; Tab 44;"COMM";
Print #0; Tab 49;"WH";
Print #0; Tab 57;"COST OF SALES";
Print #0; Tab 71;"AVG INVENTORY"; Tab 86;"TURN"; Tab 92;"GROSS MARG";
Print #0; Tab 103;"ADJ MARGIN";
Print #0; Tab 117;"GMROI";
Print #0; Tab 125;"SERV %";
Print #0;""
Print #0;""
L = 7
Return 
!
! - Rem {begin call.input.i}
! - ISINPUT: Rem  Drop-in change to Call Input   G.Doscher  10/29/96
! - Call "Input",J1,J$,J0$,J1$,J4$,J5$
! - Return 
! - ISERRMSG: X1 = Len(J7$)
! - Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
! - Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
! - Print 'K1'; \ Window Close \ Return 
! - ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
! - X$ = " ",X$ \ X$[10] = ""
! - X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
! - X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
! - X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
! - X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
! - If Not(X2) Let X$ = "        "
! - Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end call.input.i}
READPWSALES: Rem read pwsales
Mat Read #6,R[6],0;PW$;
Mat Read #6,R[6],12;PW;
Mat Read #6,R[6],14;PWS;
Mat Read #6,R[6],248;PWSL;
Mat Read #6,R[6],482;PWOH;
Mat Read #6,R[6],560;PWOHL;
Mat Read #6,R[6],638;PWAVG;
Mat Read #6,R[6],716;PWAVGL;
Mat Read #6,R[6],794;PWFRCST;
Mat Read #6,R[6],872;PWFRCSTL;
Mat Read #6,R[6],950;SRVLVL;
Mat Read #6,R[6],1054;LSRVLVL;
Mat Read #6,R[6],1158;MONTHS_EXIST;
Return 
!
READPROD: Rem read product file
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Return 
!
READVEND: Rem read vendor file
Mat Read #CH_VEND,REC_VEND,0;VNDA$
Mat Read #CH_VEND,REC_VEND,264;VND1
Mat Read #CH_VEND,REC_VEND,292;VNDA2
Mat Read #CH_VEND,REC_VEND,364;VNDC1
Mat Read #CH_VEND,REC_VEND,400;VNDC2$
Mat Read #CH_VEND,REC_VEND,444;VND3
Mat Read #CH_VEND,REC_VEND,448;VND4
Mat Read #CH_VEND,REC_VEND,460;VNDA1$
Mat Read #CH_VEND,REC_VEND,480;VNDA2$
Mat Read #CH_VEND,REC_VEND,488;VNDA
Mat Read #CH_VEND,REC_VEND,498;VNDA3
Mat Read #CH_VEND,REC_VEND,546;VNDA3$
Mat Read #CH_VEND,REC_VEND,554;VNDM4
Mat Read #CH_VEND,REC_VEND,576;VNDA5$
Return 
!
READPRWH: Rem read product whse file
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
Read #CH_PRWH,REC_PRWH,396;WHLPOOL
Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
Read #CH_PRWH,REC_PRWH,404;FCWGT
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Read #CH_PRWH,REC_PRWH,798;WHRPLN
Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
Mat Read #CH_PRWH,REC_PRWH,842;WHLM
Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
Read #CH_PRWH,REC_PRWH,894;RESTRICTED
Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
Read #CH_PRWH,REC_PRWH,922;VLIST
Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
Read #CH_PRWH,REC_PRWH,938;WHBASE
Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
Return 
!
ACCUMTOT: Rem accumlate totals
For X = 0 To 5 \ WHT9[0,X] = WHT9[0,X] + FNR(T9[0,X]) \ Next X
If SORTVEND
  For X = 0 To 5
    VNDT90[PW,X] = VNDT90[PW,X] + FNR(T9[0,X])
    VNDT90[0,X] = VNDT90[0,X] + FNR(T9[0,X])
  Next X
End If 
For X = 0 To 5
  GRDT90[PW,X] = GRDT90[PW,X] + FNR(T9[0,X])
  GRDT90[0,X] = GRDT90[0,X] + FNR(T9[0,X])
Next X
Return 
!
CALCWHTOT: Rem calculate warehouse balances
For X = 0 To 5 \ T9[0,X] = 0 \ Next X
For X = 1 To 12
  T9[0,0] = T9[0,0] + PWS[X,1]
  If X <> ARMTH
    T9[0,1] = T9[0,1] + (PWS[X,0] * PWAVG[X])
    T9[0,5] = T9[0,5] + (PWOH[X] * PWAVG[X])
  Else 
    AVGCOST = W3[15] \ If Not(AVGCOST) Let AVGCOST = B[21]
    T9[0,1] = T9[0,1] + (PWS[X,0] * AVGCOST)
    T9[0,5] = T9[0,5] + (W3[0] * AVGCOST)
  End If 
  T9[0,2] = T9[0,2] + SRVLVL[X,0]
  T9[0,3] = T9[0,3] + SRVLVL[X,1]
Next X
T9[0,4] = T9[0,5]
If Not(MONTHS_EXIST) Let MONTHS_EXIST = 1
If MONTHS_EXIST > 12 Let MONTHS_EXIST = 12
T9[0,5] = T9[0,5] / MONTHS_EXIST
T9[0,5] = FNR(T9[0,5] * W3[13])
If T9[0,4] < 0 Let T9[0,4] = 0
Return 
!
OUTEND: Rem OUT
Gosub PRNTWHSETOT
If SORTVEND Gosub PRNTVENDTOT
Gosub PRNTGRDTOT
!
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
End 
!
! - If L9 <> 22 Goto L_9030
! - ENDMORE: Rem end ask to continue
! - Print @0,22;'CL';"End of Report Range.  Press <CR>: continue  E: exit ";
! - Input Len 1;""J1$
! - Call String(1,J1$)
! - If J1$ = "E" Goto L_9040
! - If J1$ <> "" Goto OUTEND
! - L_9030: if J8=0 Print #0;"\14\" \ Print 'CS'; \ Goto L_1000
! - L_9040: Print 'CS'
! - Chain "MX000C"
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
