! >>> Program 389b
!
! description Purchasing Receipts to Stock History (Non-Stocked Items)
!
! loadsave -w -n 100,10 -o prog/dxport/389b.dl4 src/389b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 25, 2003  12:35:59
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/po/po389b.src (univ2) [jcs] {31540}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem PO389B - RECEIPTS TO STOCK HISTORY (FOR NON STOCK ITEMS)
Rem rev:   12/29/95 - kmm - taken from mx784b
Rem           4/30/97 tc cct102702 print extended amts, number prompts
!
Declare Intrinsic Sub DateToJulian,FormatDate,InpBuf,JulianToDate,String,Time,VerifyDate
! - Option Default Dialect IRIS1
Com 1%,COST,UnitType
Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim tmp$[600],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim 1%,LN,LT1[3],PRONTO,CH_PROD,CH_INVTRNS,CH_CCODES,CH_CNTRL,CH_SORT
Dim 1%,CH_POHEAD,CH_POLINE,STAT,CH_VEND,L1[5],TC,SORTBUYER,SORTSLSM,CH_CUST
Dim 1%,DPORT[1024],SORT,SPOKE,SORTPO,PAGEBREAK,BUYER,H4[3],SORTBOTH,NSD1[7]
Dim 2%,UNIT$[4],LT3[1],POLINENO,SAVEKEY$[50]
Dim 2%,D1,D2,W1,CURDAT,OFFSET,Q0[1],SLSM,CUST
Dim 2%,H0[5],H3[4],C1[6],L2[2],COMP,CLEARDATE
Dim 3%,LT2[5],TOTEXT,PTTOTEXT,REC_PROD,REC_POHEAD,REC_POLINE,R3,NSD3[9]
Dim 3%,J,X3,T9[20],REC_POL,Q1[9],L3[6],NUMDEL,R6,V1,ORDNO,REC_CUST,ponum
Dim 3%,gltotqty[99],gltotcost[99]
Dim 3%,POTOTQTY,BUYERTOTQTY,GRANDTOTQTY,POTOTEXT,BUYERTOTEXT,GRANDTOTEXT
Dim K1$[50],K2$[20],K3$[20],T9$[26],KPOHEAD$[8],KPROD$[12],KPOLINE$[16],KPOL$[9]
Dim LT0$[56],LT1$[6],A$[156],T1$[12],T2$[12],PREVCODE$[50],DATE$[10],WHEEL$[4]
Dim UM$[15],SCRATCH$[80],J8$[8],TC$[1],PRONTO$[1],CONAM$[30],DPORTS$[80],Z$[20]
Dim LINE_$[131],MASK$[12],PREVPO$[50],U9$[131],H$[82],V$[30],L1$[120],PREVBUYER$[50]
Dim SDATE$[8],EDATE$[8],F$[16],K6$[60],K9$[60],K8$[8],TEMP_DATE$[6],CUSTNAME$[30]
Dim KCUST$[6],CUNIT$[4]
dim keypoh$[30],2%,vendnum,ponum
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Rem {end dim.prod.i}
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
! - X2 = Spc(5)
! - COMP = Int((X2 - Int(X2 / 16384) * 16384) / 64)
For J = 2 To 11
  Read JA1
  If JA1 <= 0 Goto L_830
  Read #1,88,JA1;J$;
  Ropen #J,J$
L_830: Next J
Data "-1","1792","1728","2416","2432","2400","1840","-1","1808","2448"
CH_CNTRL = 1
CH_INVTRNS = 2
CH_PROD = 3
CH_CCODES = 4
CH_POHEAD = 5
CH_POLINE = 6
CH_VEND = 7
CH_ROH = 8
CH_SORT = 9
CH_CUST = 10
CH_NSTK = 11
SORT = 0
! - J$ = COMP Using "4/NSINVTRANS#" \ Open #CH_INVTRNS,J$
! - Window On 
PREVCODE$ = " ",PREVCODE$
Mat Read #1,0,100;J8$;
Read #1,3;CONAM$;
If Err 0 Let J8 = Spc(8)
J8 = 0 \ PGLEN = Chf(0) 
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
PGLEN = 60 \ If J8 Let PGLEN = 18
LN = PGLEN
WHEEL$ = "|/-"
Call String(4,220,WHEEL$[4])
LINE_$ = "-",LINE_$;U9$ = "=",U9$
Mat Read #1,115,40;Q0;
MASK$ = "#",MASK$
If Q0[1]
  SCR = Len(MASK$) - Q0[1]
  MASK$[SCR,SCR] = "."
End If 
X = Int(Tim(4) / 100)
CURDAT=Tim(4)
! - CURDAT = ((Tim(4) - X * 100) * 10000) + X
!
! dx add xport reporting code
DXSetup:

Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
J$ = intCO Using "4/NSINVTRANS#" \ Open #CH_INVTRNS,J$
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"389b",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("costs",tmp$) \ if tmp$="" let COST=0 else COST=1 ! print costs
call dxget("um",tmp$) \ UnitType=tmp$ ! unit type for report
call dxget("begprod",K2$) \ K2$=UCase$(K2$),Blank$ ! starting product
call dxget("endprod",K3$) \ K3$=UCase$(K3$),EndParam$ ! ending product
call dxget("begdate",tmp$) \ if tmp$="" let D1=CURDAT else D1=tmp$ ! starting date
call dxget("enddate",tmp$) \ if tmp$="" let D2=CURDAT else D2=tmp$ ! ending date
call dxget("whse",tmp$) \ W1=tmp$ ! warehouse
call dxget("receipts",tmp$) \ TC=tmp$ ! print by  1=buyer/po  2=salesman/po  3=both
call dxget ("excdir",tmp$)\ let excdir=0\ if rtrim$(tmp$)<>"" let excdir=99
call dxget("pronto",PRONTO$) ! pronto  p=pronto  n=normal  b=both
!  dx end
!
! unit of measure type
UM$ = " ",UM$
If UnitType = 1 Let UM$ = "STOCK U/M "
If UnitType = 2 Let UM$ = "SELL U/M "
If UnitType = 3 Let UM$ = "PURCH. U/M "
If UnitType = 4 Let UM$ = "COSTING U/M"
If UnitType = 5 Let UM$ = "PRICING U/M"
!
! product section
if K3$<K2$ let e$="Invalid ending product, must be >= starting product!" \ error 10000
!
! starting date
tmp$ = D1 Using "&&&&&&" \ DATE$=tmp$[5,6],tmp$[1,4]
Call DateToJulian(1,DATE$,DATE$,E)
If E let e$="Invalid starting date!" \ error 10000
D1 = DATE$
!
! ending date
tmp$ = D2 Using "&&&&&&" \ DATE$=tmp$[5,6],tmp$[1,4]
Call DateToJulian(1,DATE$,DATE$,E)
If E let e$="Invalid ending date!" \ error 10000
D2 = DATE$
if D2<D1 let e$="Invalid ending date, must be >= to the starting date!" \ error 10000
!
! warehouse
If W1<0 Or W1>99 let e$="Invalid warehouse, must be between 0 and 99!" \ error 10000
!
! sort by
SORTBUYER = 0 \ SORTSLSM = 0 \ SORTBOTH = 0
If TC = 1 Or TC = 2 Or TC = 3
  SORTPO = 1
  If TC = 1 Let SORTBUYER = 1
  If TC = 2 Let SORTSLSM = 1
  If TC = 3 Let SORTBOTH = 1
  If SORTPO let PAGEBREAK = 1 Else PAGEBREAK = 0
Else 
  SORTPO = 0 \ PAGEBREAK = 0
End If 
!!stop
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  ! try call dxclose() else rem
End If 
!
! - ASK_QUEST: Rem
! - Print 'CS';
! - Print @0,0;"PO389B";@20,0;"  RECEIPTS TO STOCK TRANSACTIONS (FOR NON STOCK ITEMS)"
! - Print @1,2;" 1> Print Costs (<Y>/N) : ";
! - Print @10,4;" 1: STOCK      3: PURCHASING     5: PRICING "
! - Print @10,5;" 2: SELL       4: COST"
! - Print @1,6;" 2> Unit to use on the report :";
! - Print @1,8;" 3> Starting Item Code, <CR> for First : ";
! - Print @1,9;" 4> Ending   Item Code, <CR> for Last  : ";
! - Print @1,10;" 5> Starting Date (MMDDYY) : ";
! - Print @1,11;" 6> Ending   Date (MMDDYY) : ";
! - Print @0,12;'CL';
! - Print @1,13;" 7> Warehouse #, <CR> for All : ";
! - Print @1,14;" 8> Print:  1: Buyer/PO,  2: Salesman/PO, or  3: Both : ";
! - Print @1,16;" 9>  P: pronto accepted,  N: normal accepted, or  B: both : ";
! - For PROMPT = 1 To 9 \ Gosub PROMPT_SUBS \ Next PROMPT
! - Goto PROCEED_QUEST
! - PROMPT_SUBS: Rem
! - Print @0,23;'CL';
! - If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On PROMPT Gosub COST_QUEST,UNIT_QUEST,PROD_QUEST_1,PROD_QUEST_2
! - On PROMPT - 4 Gosub DATE1_QUEST,DATE2_QUEST,WHSE_QUEST,TC_QUEST
! - On PROMPT - 8 Gosub PRONTO_QUEST
! - If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
! - COST_QUEST: Rem
! - J1 = 1
! - J0$ = "6 00012902"
! - Gosub ISINPUT
! - COST = J1
! - Return 
! - UNIT_QUEST: Rem
! - J1 = 3
! - J0$ = "3 00013406"
! - Gosub ISINPUT
! - UNIT = J1
! - If UNIT < 1 Or UNIT > 5 Goto UNIT_QUEST
! - UM$ = " ",UM$
! - If UNIT = 1 Let UM$ = "STOCK U/M "
! - If UNIT = 2 Let UM$ = "SELL U/M "
! - If UNIT = 3 Let UM$ = "PURCH. U/M "
! - If UNIT = 4 Let UM$ = "COSTING U/M"
! - If UNIT = 5 Let UM$ = "PRICING U/M"
! - Return 
! - PROD_QUEST_1: Rem
! - J1$ = "            "
! - J0$ = "2 00124208"
! - Gosub ISINPUT
! - K2$ = J$
! - PROD_CHECK = 0
! - Gosub PROD_QUEST_CHECK
! - If PROD_CHECK Goto PROD_QUEST_1
! - Return 
! - PROD_QUEST_2: Rem
! - J1$ = "zzzzzzzzzzzz"
! - J0$ = "2 00124209"
! - Gosub ISINPUT
! - K3$ = J$
! - PROD_CHECK = 0
! - Gosub PROD_QUEST_CHECK
! - If PROD_CHECK Goto PROD_QUEST_2
! - Return 
! - PROD_QUEST_CHECK: Rem
! - If K3$ = "" Let K3$ = "zzzzzzzzzzzz"
! - If K2$ > K3$
! -   Print @0,23;"INVALID RANGE ! ";'CE';
! -   Signal 3,15
! -   PROD_CHECK = 1
! - End If 
! - Return 
! - DATE1_QUEST: Rem
! - D1 = 0
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00063010"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto DATE1_QUEST
! - D1 = DATE$
! - DATE_CHECK = 0
! - Gosub DATE_QUEST_CHECK
! - If DATE_CHECK Goto DATE1_QUEST
! - Return 
! - DATE2_QUEST: Rem
! - D2 = 0
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00063011"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto DATE2_QUEST
! - D2 = DATE$
! - DATE_CHECK = 0
! - Gosub DATE_QUEST_CHECK
! - If DATE_CHECK Goto DATE2_QUEST
! - Return 
! - DATE_QUEST_CHECK: Rem
! - If D2 And D1 > D2
! -   Print @0,23;"INVALID RANGE ! ";'CE';
! -   Signal 3,15
! -   DATE_CHECK = 1 \ Return 
! - End If 
! - Return 
! - WHSE_QUEST: Rem
! - J1 = 0
! - J1$ = ""
! - J0$ = "3 00023313"
! - Gosub ISINPUT
! - W1 = J1
! - Return 
! - TC_QUEST: Rem
! - Print @1,15;'CL';
! - J1 = 1
! - J0$ = "3 00015814"
! - Gosub ISINPUT
! - If J1 <> 1 And J1 <> 2 And J1 <> 3
! -   Print 'RB';
! -   Goto TC_QUEST
! - End If 
! - SORTBUYER = 0;SORTSLSM = 0;SORTBOTH = 0
! - TC = J1
! - If TC = 1 Or TC = 2 Or TC = 3
! -   SORTPO = 1
! -   If TC = 1 Let SORTBUYER = 1
! -   If TC = 2 Let SORTSLSM = 1
! -   If TC = 3 Let SORTBOTH = 1
! -   If SORTPO
! -     PAGEBREAK = 1
! -   Else 
! -     PAGEBREAK = 0
! -   End If 
! - Else 
! -   SORTPO = 0;PAGEBREAK = 0
! - End If 
! - Return 
! - PRONTO_QUEST: Rem
! - J1$ = "B"
! - J0$ = "2 00016116"
! - Gosub ISINPUT
! - If J$ <> "P" And J$ <> "B" And J$ <> "N"
! -   Print 'RB';
! -   Goto PRONTO_QUEST
! - End If 
! - PRONTO$ = J$
! - Return 
! - PROCEED_QUEST: Rem
! - Print @0,23;'CL';"ENTER #:Field to edit,  P: print,  R: reselect all,  E: exit ";
! - Input ""SCRATCH$
! - PROMPT = SCRATCH$
! - If PROMPT Gosub PROMPT_SUBS \ Goto PROCEED_QUEST
! - If SCRATCH$ = "E" Goto OUTEND
! - If SCRATCH$ = "R" Goto ASK_QUEST
! - If SCRATCH$ <> "P" Print 'RB'; \ Goto PROCEED_QUEST
!
!Call dxsave(0,"tmp/389bin.txt!")
T1$ = K2$ \ T2$ = K3$
K1$ = D1 Using "&&&&&"
K3$ = D2 Using "&&&&&"
MAIN: Rem
! - If J8 Print 'CS';
! - If Err 0 Gosub ERR_ESCAPE
If SORT Or SORTPO
  Gosub DO_SORT
  CH = CH_SORT
  If SORTBUYER Let K1$ = " ",K1$;K1$[1,1] = "B";COUNT = 1
  If SORTSLSM Let K1$ = " ",K1$;K1$[1,1] = "S";COUNT = 1
  If SORTBOTH Let K1$ = " ",K1$;K1$[1,1] = "B";COUNT = 2
Else 
  CH = CH_INVTRNS
End If 
If SORT And SORTPO Let OFFSET = SORT * 12
If SORT And Not(SORTPO) Let OFFSET = 6
If Not(SORT) And SORTPO Let OFFSET = 14
If Not(SORT) And Not(SORTPO) Let OFFSET = 0
CNT = 0
START_IT: Rem
if J8 ! dx xml headings
  !
  if TC=2 let tmp1$="SALESMAN" else tmp1$="BUYER"
  tmp$=tmp1$,fdel$,"PO #",fdel$,"DATE",fdel$
  tmp$=tmp$,"VENDOR",fdel$,"VENDOR NAME",fdel$
  tmp$=tmp$,"VENDOR REF #",fdel$,"TYPE",fdel$
  tmp$=tmp$,"LINE",fdel$,"PRODUCT CODE",fdel$
  tmp$=tmp$,"DESCRIPTION",fdel$,"DESCRIPTION 2",fdel$
  tmp$=tmp$,"VENDOR ITEM #",fdel$
  tmp$=tmp$,"ORDERED QUANTITY",fdel$,"ORDERED U/M",fdel$
  if COST let tmp$=tmp$,"UNIT COST",fdel$,"COST U/M",fdel$
  tmp$=tmp$,"RECEIVED QUANTITY",fdel$,"DUE QUANTITY",fdel$
  if COST let tmp$=tmp$,"EXT COST",fdel$
  tmp$=tmp$,"CUSTOMER",fdel$,"CUSTOMER NAME",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
If SORTPO Let PREVPO$ = "";PREVBUYER$ = "";FIRSTTIME = 1
! - Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
MAIN_LOOP: Rem
Search #CH,3,1;K1$,R1,E
If E Goto DONE
If Not(SORTSLSM) And Not(SORTBOTH) If K1$[1,1] = "S" Goto DONE
If SORTBOTH If (K1$[1,1] = "S") And (CNT = 0) Goto DONE
PREVCODE$[1,5] = K1$[1 + OFFSET,5 + OFFSET]
If SORTPO
  If PREVBUYER$[1,4] <> K1$[1,4]
    If Not(FIRSTTIME) Gosub PRINT_PO_TOTAL
    If Not(FIRSTTIME) Gosub PRINT_BUYER_TOTAL
    PREVBUYER$[1,4] = K1$[1,4]
    If PAGEBREAK Let LN = PGLEN
    Gosub SORTPO_HEADER
    FIRSTTIME = 1
  End If 
  If PREVPO$[1,6] <> K1$[5,10]
    If Not(FIRSTTIME) Gosub PRINT_PO_TOTAL
    PREVPO$[1,6] = K1$[5,10]
    NEED_SUBHEADER = 1
    Gosub SUB_HEADER
    NEED_SUBHEADER = 0
  End If 
End If 
If SORTPO Let FIRSTTIME = 0
Mat Read #CH_INVTRNS,R1,0;LT0$;
Mat Read #CH_INVTRNS,R1,56;LT1;
Mat Read #CH_INVTRNS,R1,64;LT2;
Mat Read #CH_INVTRNS,R1,100;LT1$;
Mat Read #CH_INVTRNS,R1,106;LT3;
Mat Read #CH_INVTRNS,R1,114;PRONTO;
If Not(SORT) And Not(SORTPO)
  If LT0$[1,12] < T1$[1,12] Goto MAIN_LOOP
  If LT0$[1,12] > T2$[1,12] Goto MAIN_LOOP
  If W1 If W1 <> LT1[1] Goto MAIN_LOOP
  If PRONTO$ = "P" And Not(PRONTO) Goto MAIN_LOOP
  If PRONTO$ = "N" And PRONTO Goto MAIN_LOOP
  If LT1[0] <> 1 And LT1[0] <> 7 And LT1[0] <> 30 Goto MAIN_LOOP
  If TC$ = "P" And LT1[0] <> 1 Goto MAIN_LOOP
  If TC$ = "M" And LT1[0] = 1 Goto MAIN_LOOP
  If DPORT And DPORT[LT1[2]] = 0 Goto MAIN_LOOP
End If 
IF EXCDIR<>0 AND LT1[0]=1 AND LT0$[25,26]="PO" AND CH<>9 ! PURCHASE ORDER
	vendnum=lt0$[42,47]\if not(vendnum) goto endexcdir:
	ponum=0
	if lt0$[25,27]="PO#"
		let ponum=lt0$[28,33]
	else
		let ponum=lt0$[27,32]
	endif
	if not (ponum) goto endexcdir:
	let keypoh$=" ",keypoh$
	let keypoh$[1,6]=vendnum using "######"
	let keypoh$[7,12]=ponum using "######"
	search #ch_pohead,2,2;keypoh$,rec_pohead,e
	if e<>0 goto endexcdir:
	Mat Read #CH_POHEAD,REC_POHEAD,242;H4;
	if h4[0]=1 goto main_loop:
	if h4[0]=5 goto main_loop:
	endexcdir: ! 
endif	


UNIT$ = "    "
A$ = "NOT FOUND ",A$
L_2100: Rem.
If LT1 >= 15 Let LT2[2] = 0 - LT2[2]
J = LT1 - 1
Read #1,108,(J * 15);J3$[1,15];
If Not(SORTPO) And Not(SORT) Gosub HEADER
If SORTPO
  Gosub SUB_HEADER
  Gosub SORTPO_PRINT_LINE
  NEED_SUBHEADER = 0
Else 
  Gosub PRINT_LINE
End If 
! - Signal 2,J0,A,B \ If J0 <> -1 Gosub L_9615
Goto MAIN_LOOP
!
DO_SORT: Rem
K1$ = " ",K1$
SORTCLEAR_LOOP: Rem
Search #CH_SORT,5,1;K1$,R1,E
If Not(E) Goto SORTCLEAR_LOOP
! - Print @0,23;'CL';"Sorting...";'K0';
K1$ = " ",K1$
K1$ = D1 Using "&&&&&"
SORT_LOOP: Rem
Search #CH_INVTRNS,3,1;K1$,R1,E
If Not(E) And K1$[1,Len(K3$)] <= K3$
  SPOKE = SPOKE + 1
  If SPOKE > 40 Let SPOKE = 1
  If Not(Fra(SPOKE / 10))
    SCR = Int(SPOKE / 10)
    ! - Print @12,23;WHEEL$[SCR,SCR];
  End If 
  PREVCODE$[1,5] = K1$[1,5]
  Mat Read #CH_INVTRNS,R1,0;LT0$;
  Mat Read #CH_INVTRNS,R1,64;LT2;
  Mat Read #CH_INVTRNS,R1,56;LT1;
  Mat Read #CH_INVTRNS,R1,100;LT1$;
  Mat Read #CH_INVTRNS,R1,106;LT3;
  Mat Read #CH_INVTRNS,R1,114;PRONTO;
  If LT0$[1,12] < T1$[1,12] Goto SORT_LOOP
  If LT0$[1,12] > T2$[1,12] Goto SORT_LOOP
  If W1 If W1 <> LT1[1] Goto SORT_LOOP
  If PRONTO$ = "P" And Not(PRONTO) Goto SORT_LOOP
  If PRONTO$ = "N" And PRONTO Goto SORT_LOOP
  If LT1[0] <> 1 And LT1[0] <> 7 And LT1[0] <> 30 Goto SORT_LOOP
  If TC$ = "P" And LT1[0] <> 1 Goto SORT_LOOP
  If TC$ = "M" And LT1[0] = 1 Goto SORT_LOOP
	IF EXCDIR<>0 AND LT1[0]=1 AND LT0$[25,26]="PO"! PURCHASE ORDER
	vendnum=lt0$[42,47]\if not(vendnum) goto endexcdir1:
	ponum=0
	if lt0$[25,27]="PO#"
		let ponum=lt0$[28,33]
	else
		let ponum=lt0$[27,32]
	endif
	if not (ponum) goto endexcdir1:
	let keypoh$=" ",keypoh$
	let keypoh$[1,6]=vendnum using "######"
	let keypoh$[7,12]=ponum using "######"
	search #ch_pohead,2,2;keypoh$,rec_pohead,e
	if e<>0 goto endexcdir1:
	Mat Read #CH_POHEAD,REC_POHEAD,242;H4;
	if h4[0]=1 goto SORT_loop:
	if h4[0]=5 goto SORT_loop:
	endexcdir1: ! 
endif	
  SCRATCH$ = " ",SCRATCH$
  If SORT
    If Not(SORTPO)
      SCRATCH$[1,6] = LT1[2] Using "######"
    Else 
      SCRATCH$[1,6] = LT1[2] Using "######"
	  gosub parseponum:
	  LET SCRATCH$[7,12]=(ponum using "######")
    End If 
	let scratch$[16,29]=k1$  !! sninvtrans key
  Else 
    If SORTPO
      Gosub GET_BUYER
      Gosub GET_SLSM_CUST
	  gosub parseponum:
	  LET SCRATCH$[1,4]=BUYER USING "B###"
	  LET SCRATCH$[5,10]=(ponum using "######")
	  LET SCRATCH$[11,13]=LT2[1] USING "###"
	  LET SCRATCH$[14,15]=STAT USING "##"
	  let scratch$[16,29]=k1$   !! sninvtrans key
	  SEARCH #CH_SORT,4,1;SCRATCH$,R1,E
      If E Goto INSERT_SLSM_KEY
INSERT_SLSM_KEY: Rem
      SCRATCH$[1,4] = SLSM Using "S###"
      Goto INSERT_IT
    End If 
  End If 
  SCRATCH$ = SCRATCH$ + K1$
INSERT_IT: Rem
  Search #CH_SORT,4,1;SCRATCH$,R1,E
  If E Goto SORT_LOOP
  Goto SORT_LOOP
End If 
! - Print 'K2';
Return 
!
GET_BUYER: Rem get buyer from pohead
KPOHEAD$ = " ",KPOHEAD$
PASS = 0
gosub parseponum:
For STATUS = 1 To 7
  KPOHEAD$[1,2] = STATUS Using "##"
  KPOHEAD$[3,8] = ponum using "######"
  Search #CH_POHEAD,2,1;KPOHEAD$,REC_POHEAD,E
  If Not(E)
    PASS = 1
    STAT = STATUS
    STATUS = 7
  End If 
Next STATUS
If PASS
  Read #CH_POHEAD,REC_POHEAD,342;BUYER;
Else 
  BUYER = 0
End If 
Return 
!
GET_SLSM_CUST: Rem get salesman & customer if po is copied from sales order
gosub parseponum:
KPOL$ = " ",KPOL$
KPOL$[1,6] = ponum USING "######"
KPOL$[7,9] = LT2[1] Using "###"
Search #CH_POLINE,2,1;KPOL$,REC_POL,E
If Not(E)
  Read #CH_POLINE,REC_POL,292;ORDNO;
Else 
  ORDNO = 0
  SLSM = 0
  CUST = 0
End If 
If Not(ORDNO) Let SLSM = 0;CUST = 0 \ Return 
K8$ = " ",K8$;SLSM = 0;CUST = 0
For ORDSTAT = 1 To 6
  K8$[1,2] = ORDSTAT Using "##"
  K8$[3,8] = ORDNO Using "######"
  Search #CH_ROH,2,1;K8$,R8,E 
  If Not(E) Goto FOUND
Next ORDSTAT
Return 
!
FOUND: Rem --- ORDER NUMBER FOUND IN SORDFLEH
Read #CH_ROH,R8,16;CUST;
Read #CH_ROH,R8,44;SLSM;
Return 
!
GET_CUST_NAME: Rem get customer name if copy from sales order
KCUST$ = " ",KCUST$
KCUST$ = CUST Using "######"
Search #CH_CUST,2,1;KCUST$,REC_CUST,E 
If Not(E)
  Mat Read #CH_CUST,REC_CUST,30;CUSTNAME$;
Else 
  CUSTNAME$ = " ",CUSTNAME$
End If 
Return 
!
GET_POLINE_NUMBER: Rem get po line #
KPROD$ = " ",KPROD$;KPOLINE$ = " ",KPOLINE$
KPROD$[1,12] = LT0$[1,12]
gosub parseponum:
Search #3,2,1;KPROD$,R3,E
If Not(E)
  KPOLINE$[1,6] = R3 Using "######"
  KPOLINE$[7,12] = Val(ponum using "######")
  Search #CH_POLINE,3,2;KPOLINE$,REC_POLINE,E
  If Not(E) And Val(KPOLINE$[7,12]) = ponum
    POLINENO = KPOLINE$[13,15]
  Else 
    POLINENO = 0
  End If 
Else 
  POLINENO = 0
End If 
Return 
!
DO_CONVERSIONS: Rem CONVERSIONS HERE
Mat UWORK = Zer
UWORK[0] = 0
UN[0] = 0
UN[0] = PFU1[UnitType + 7]
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = LT2[2] \ Gosub CONVERT
LT2[2] = AMOUNT
CNVTU[2] = 2;CNVTA = LT2[5]
If COST
  Gosub CONVERT \ UWORK[0] = AMOUNT
  CNVTU[2] = 2;CNVTA = LT2[3]
  Gosub CONVERT \ UWORK[1] = AMOUNT
  CNVTU[2] = 2;CNVTA = LT2[4]
  Gosub CONVERT \ UWORK[2] = AMOUNT
End If 
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = A[0] \ Gosub CONVERT
A[0] = AMOUNT
UNIT$ = "    "
If UN[0] > 0 Read #CH_CCODES,UN[0],10;UNIT$;
Return 
!
POQTY_CONVERSION: Rem "Convert
LET CNVTA=LT2[2] \ LET CNVTU[0]=0 \ LET CNVTU[1]=L1[5] \ LET CNVTU[2]=1
GOSUB CONVERT: \ LET Q1[6]=AMOUNT  !! QUANTY FROM NSINVTRANS
CNVTA = L2[0] \ CNVTU[0] = 0 \ CNVTU[1] = L1[5] \ CNVTU[2] = 2
Gosub CONVERT \ Q1[0] = AMOUNT
CNVTA = L3[2] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub CONVERT \ Q1[1] = AMOUNT
CNVTA = L3[3] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub CONVERT \ Q1[2] = AMOUNT
CNVTA = L3[4] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub CONVERT \ Q1[3] = AMOUNT
CNVTA = L3[4] \ CNVTU[0] = 0 \ CNVTU[1] = PFU1[8] \ CNVTU[2] = 1
Gosub CONVERT \ Q1[4] = AMOUNT
CNVTA = L2[0] \ CNVTU[0] = 0 \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2
Gosub CONVERT \ Q1[5] = AMOUNT
UNIT$ = "    "
If L1[4] > 0 Read #CH_CCODES,L1[4],10;UNIT$;
If L1[4] = -1 Let UNIT$ = "CWT "
If L1[4] = -2 Let UNIT$ = "LOT "
If L1[4] = -3 Let UNIT$ = "LB  "
CUNIT$ = " ",CUNIT$
If L1[5] > 0 Read #CH_CCODES,L1[5],10;CUNIT$;
If L1[5] = -1 Let CUNIT$ = "CWT "
If L1[5] = -2 Let CUNIT$ = "LOT "
If L1[5] = -3 Let CUNIT$ = "LB  "
Return 
!
HEADER: Rem HEADINGS ROUTINE
if J8 return ! dx xml
!
If LN < PGLEN Return 
If JA2
  If J8
    ! - Input @0,23;"PRESS <RETURN> TO CONTINUE "J$ \ Print 'CS';
  Else 
    Print #0;"\14\";
  End If 
End If 
JA2 = JA2 + 1 \ LN = 10
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;J8$; Tab (64 - Len(CONAM$) / 2);CONAM$; Tab 120;"PAGE";JA2
Print #0;" - 389b - ";T9$;
Print #0; Tab 52;"RECEIPTS TO STOCK HISTORY";
if excdir<>0 print #0; tab 111;"(Excludes Directs)";
print #0;""
Print #0;" "
Print #0; Tab 20;"IN DATE/TIME ORDER"
Print #0; Tab 1;"TRANS#";
Print #0; Tab 8;"LOT CODE";
Print #0; Tab 20;"ITEM CODE";
Print #0; Tab 32;"DESCRIPTION";
Print #0; Tab 62;"SOURCE/DEST";
Print #0; Tab 74;"COMMENT";
Print #0; Tab 94;"TC";
Print #0; Tab 109;"DATE";
Print #0; Tab 117;"LOCATION";
Print #0; Tab 130;"WH"
Print #0; Tab 66;"QUANTITY UM";
Print #0; Tab 84;"PO COST";
Print #0; Tab 99;"AVG COST";
Print #0; Tab 115;"EXTEND PO";
Print #0;""
Print #0;LINE_$
Print #0;" "
Return 
!
SORTPO_HEADER: Rem HEADINGS ROUTINE
if J8 return ! dx xml
!
If LN < PGLEN Return 
If JA2
  If J8
    ! - Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
  Else 
    Print #0;"\14\";
  End If 
End If 
JA2 = JA2 + 1 \ LN = 7
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
X2 = D1 \ Gosub L_7700 \ SDATE$[1,8] = X$
X2 = D2 \ Gosub L_7700 \ EDATE$[1,8] = X$
Print #0; Tab 10;J8$; Tab (64 - Len(CONAM$) / 2);CONAM$; Tab 120;"PAGE";JA2
Print #0;" - 389B - ";T9$;
Print #0; Tab 40;"RECEIPTS TO STOCK NON-STOCK ITEM HISTORY (WORK SHEET FORMAT)"
If K1$[1,1] = "B" Print #0; Tab 52;"       BUYER: ";K1$[2,4]
If K1$[1,1] = "S" Print #0; Tab 52;"     SALESMAN: ";K1$[2,4]
Print #0; Tab 52;"FOR ";SDATE$;" TO ";EDATE$
Print #0;" "
NEED_SUBHEADER = 1
Return 
!
SUB_HEADER: Rem NEW P.O. HEADINGS
IF EXCDIR<>0
	Gosub READ_POHEAD
	IF H4[0]=1 OR H4[0]=5 Return
ENDIF
if J8 return ! dx xml
!
If LN + 5 > 56
  LN = 99 \ Gosub SORTPO_HEADER
End If 
If Not(NEED_SUBHEADER) Return 
Print #0;U9$ \ LN = LN + 1
PRINT_SUB_HEADER: Rem print sub header
Gosub READ_POHEAD

Print #0;"  PO #"; Tab 12;"DATE"; Tab 34;"VENDOR"; Tab 70;"VENDOR REF#";
Print #0; Tab 88;"TYPE" \ LN = LN + 1
X2 = H0[3] \ Gosub L_7750
Print #0; Using "######";H0[2]; Tab 10;X$;
Print #0; Using "######:  "; Tab 30;C1[1];V$; Tab 70;H$[1,14]; Tab 87;
If H4[0] = 0 Print #0;"WAREHOUSE #";H4[1];
If H4[0] = 4 Print #0;"IMPT WHSE #";H4[1];
If H4[0] = 1 Print #0;" DIRECT";
If H4[0] = 5 Print #0;"IMPT DIRECT";
Print #0;"" \ LN = LN + 1
Print #0;LINE_$ \ LN = LN + 1
Print #0; Tab 69;"ORDERED"; Tab 85;"UNIT"; Tab 96;"RECEIVED";
Print #0; Tab 110;"DUE"
Print #0;"LN#  PRODUCT CODE";
Print #0; Tab 20;"DESCRIPTION"; Tab 49;"PACK"; Tab 69;"QUANTITY";
Print #0; Tab 85;"COST"; Tab 96;"QUANTITY"; Tab 108;"QUANTITY";
Print #0; Tab 122;"EXT COST" \ LN = LN + 1
Print #0;U9$ \ LN = LN + 1
F1 = 99
Return 
!
PRINT_LINE: Rem PRINT LINE ! **** line 1 ****



Print #0; Using "#######"; Tab 0;R1;
Print #0; Tab 8;LT0$[13,24];
Print #0; Tab 20;LT0$[1,12];
Print #0; Tab 32;A$[9,38];
Print #0; Tab 62;LT0$[25,36];
Print #0; Tab 74;LT0$[37,56];
Print #0; Using "##"; Tab 94;LT1[0];" ";J3$[1,8];
X2 = LT3[0] \ Gosub L_7700
Print #0; Tab 107;X$[1,8];
Print #0; Tab 116;LT1$;
Print #0; Using "##"; Tab 130;LT1[1];
Print #0;""
Print #0; Tab (8);"Port: ";LT1[2];
If PRONTO Print #0;" PRONTO";
Print #0; Tab 32;A$[63,92];
Print #0; Using "-------#.##"; Tab 62;LT2[2];
Print #0;UNIT$[1,4];
If COST
  Print #0; Using MASK$; Tab 79;UWORK[1];"/";UNIT$;
  Print #0; Using MASK$; Tab 94;UWORK[2];"/";UNIT$;
  Print #0; Using "-------#.##"; Tab 115;FNR(LT2[2] * UWORK[1]);
End If 
Print #0;" "
Print #0;" "
LN = LN + 3
If cost
	TOTEXT = TOTEXT + FNR(LT2[2] * UWORK[1]) \ PTTOTEXT = PTTOTEXT + FNR(LT2[2] * UWORK[1])
endif
Return 
!
SORTPO_PRINT_LINE: Rem print detail
Gosub READ_POLINE
Gosub READ_NSTKDESC
Gosub POQTY_CONVERSION
Gosub GET_SLSM_CUST
If CUST Gosub GET_CUST_NAME
!
If J8 ! dx xml
  ! po /vendor
  Gosub READ_POHEAD
  tmp$=K1$[2,4],fdel$
  X2 = H0[3] \ Gosub L_7750
  tmp$=tmp$,H0[2] Using "######",fdel$,X$,fdel$
  tmp$=tmp$,C1[1] Using "######",fdel$,rtrim$(V$),fdel$
  tmp$=tmp$,rtrim$(H$[1,14]),fdel$
  tmp1$=""
  If H4[0] = 0 let tmp1$="WAREHOUSE #",H4[1] using "##"
  If H4[0] = 4 let tmp1$="IMPT WHSE #",H4[1] using "##"
  If H4[0] = 1 let tmp1$="DIRECT"
  If H4[0] = 5 let tmp1$="IMPT DIRECT"
  tmp$=tmp$,tmp1$,fdel$
  !
  tmp$=tmp$,L1[2] Using "###",fdel$,rtrim$(LT0$[1,12]),fdel$
  tmp$=tmp$,rtrim$(L1$[1,30]),fdel$,rtrim$(L1$[31,60]),fdel$
  tmp$=tmp$,rtrim$(L1$[61,80]),trim$(PR_A2$[13,27]),fdel$
  tmp$=tmp$,Q1[1] using "----,--#.##",fdel$,UNIT$[1,4],fdel$
  If COST let tmp$=tmp$,Q1[0] Using "---#.##",fdel$,CUNIT$[1,4],fdel$
  tmp$=tmp$,Q1[6] Using "----,--#.##",fdel$
  X3 = Q1[1] - Q1[6]
  tmp$=tmp$,X3 Using "----,--#.##",fdel$
  If COST let tmp$=tmp$,FNR(LT2[2] * L2[0]) Using "---,---,--#.##",fdel$
  ! - If (L1$[31,31] = "" Or L1$[31,40] = "          ") And (A$[93,93] = "" Or A$[93,96] = "    ") Goto L_5480
  If CUST
    tmp$=tmp$,CUST Using "######",fdel$,rtrim$(CUSTNAME$[1,30]),fdel$
  else
    tmp$=tmp$,"",fdel$,"",fdel$
  End If 
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
!
Print #0; Using "###";L1[2];
Print #0; Tab 5;LT0$[1,12]; Tab 18;L1$[1,30];
Print #0;" ";PR_A2$[13,27];
Print #0; Using "----,--#.## "; Tab 64;Q1[1];
Print #0;UNIT$[1,4];
If COST
  Print #0; Using "----#.## "; Tab 79;Q1[0];
  Print #0;CUNIT$[1,4];
End If 
Print #0; Using "----,--#.## "; Tab 92;Q1[6];
X3 = Q1[1] - Q1[6]
Print #0; Using "----,--#.##"; Tab 104;X3;
If COST
  Print #0; Using "---,---,--#.##"; Tab 116;FNR(LT2[2] * L2[0])
End If 
Print #0;""
LN = LN + 1
If (L1$[31,31] = "" Or L1$[31,40] = "          ") And (A$[93,93] = "" Or A$[93,96] = "    ") Goto L_5480
Print #0; Tab 18;L1$[31,60];
Print #0; Tab 50;"VENDOR ITEM #: ";L1$[61,80];
If CUST
  Print #0;"CUSTOMER: ";
  Print #0; Using "######  ";CUST;
  Print #0;CUSTNAME$[1,30];
End If 
Print #0;""
LN = LN + 1
L_5480: Print #0;"" \ LN = LN + 1
POTOTQTY = POTOTQTY + Q1[6]
BUYERTOTQTY = BUYERTOTQTY + Q1[6]
GRANDTOTQTY = GRANDTOTQTY + Q1[6]
POTOTEXT = POTOTEXT + FNR(LT2[2] * L2[0]) !FNR(Q1[2] * Q1[0])
BUYERTOTEXT = BUYERTOTEXT + FNR(LT2[2] * L2[0]) ! FNR(Q1[2] * Q1[0])
GRANDTOTEXT = GRANDTOTEXT + FNR(LT2[2] * L2[0]) ! FNR(Q1[2] * Q1[0])
PTTOTEXT = PTTOTEXT + FNR(LT2[2] * L2[0]) ! FNR(Q1[2] * Q1[0])
Extcost=FNR(LT2[2] * L2[0]) ! FNR(Q1[2] * Q1[0])
IF LT0$[25,27]="PO#" and sortpo
   gltotqty[b[11]]=gltotqty[b[11]]+Q1[6]
   gltotcost[b[11]]=gltotcost[b[11]]+extcost
endif
Return 
!
PRINT_PO_TOTAL: Rem
if J8 return ! dx xml
!
Print #0;""
Print #0; Tab 30;"PO TOTAL: ";
Print #0; Using "----,--#.##"; Tab 93;POTOTQTY;
If COST
  Print #0; Using "---,---,--#.##"; Tab 116;POTOTEXT;
End If 
Print #0;""

POTOTQTY = 0;POTOTEXT = 0
LN = LN + 3
if Cost
	!"cct198924
    let ln=ln+5	
    gosub header:
	print #0;""
	print #0;tab 0;"SUMMARY BY PRODUCT CATEGORY" 
	print #0;tab 0;"----------------------------" 
	print #0;tab 0;"SALES CAT";TAB 20;"AMOUNT" ! ;TAB 40;"GL CODE" 
	for i=1 to 99
	  if gltotcost[i]
		 gosub header:
		 print #0;using "#####";tab 0;i;
		 print #0;USING "----------#.##";tab 11;gltotcost[i] ! ;
		 ! print #0;using "######";tab 40;glcode[i]
		 let ln=ln+1
       endif
	next i
Endif ! of if cost print catgy summary cost
Print #0;""
	!pttotqty=0
	!pttotext=0
    for i=1 to 99             
	   let gltotqty[i]=0     
	   let gltotcost[i]=0    
	next i
LN = 99 ! \ Gosub SORTPO_HEADER
Return 
!
PRINT_BUYER_TOTAL: Rem
if J8 return ! dx xml
!
If LN + 2 > 60
	LET SAVEKEY$=K1$
	LET K1$=PREVBUYER$
  LN = 99 \ Gosub SORTPO_HEADER
	LET K1$=SAVEKEY$
End If 
Print #0;""
If PREVBUYER$[1,1] = "B" Print #0; Tab 30;"BUYER  TOTAL: ";
If PREVBUYER$[1,1] = "S" Print #0; Tab 30;"SALESMAN  TOTAL: ";
Print #0; Using "----,--#.##"; Tab 93;BUYERTOTQTY;
If COST
  Print #0; Using "---,---,--#.##"; Tab 116;BUYERTOTEXT;
End If 
Print #0;""
BUYERTOTQTY = 0;BUYERTOTEXT = 0
LN = LN + 2
Return 
!
PRINT_GRAND_TOTAL: Rem
if J8 return ! dx xml
!
If LN + 2 > 60
  LN = 99 \ Gosub SORTPO_HEADER
End If 
Print #0;""
Print #0; Tab 30;"GRAND  TOTAL: ";
Print #0; Using "----,--#.##"; Tab 93;GRANDTOTQTY;
If COST
  Print #0; Using "---,---,--#.##"; Tab 116;GRANDTOTEXT;
End If 
Print #0;""
GRANDTOTQTY = 0;GRANDTOTEXT = 0
LN = LN + 2
Return 
!
PRINT_TOTAL: Rem
if J8 return ! dx xml
!
If Not(COST) Return 
Gosub HEADER
Print #0; Tab 111;"---------------"
Print #0; Using "------------.##"; Tab 111;TOTEXT
TOTEXT = 0
LN = LN + 2
Return 
!
READ_POHEAD: Rem read data from pohead
KPOHEAD$ = " ",KPOHEAD$
KPOHEAD$[1,2] = K1$[14,15];KPOHEAD$[3,8] = K1$[5,10]
Search #CH_POHEAD,2,1;KPOHEAD$,REC_POHEAD,E
If Not(E)
  Mat Read #CH_POHEAD,REC_POHEAD;H0;
  Mat Read #CH_POHEAD,REC_POHEAD,24;H$;
  Mat Read #CH_POHEAD,REC_POHEAD,222;H3;
  Mat Read #CH_POHEAD,REC_POHEAD,242;H4;
  Mat Read #CH_VEND,H0[1];V$;
  Mat Read #CH_VEND,H0[1],264;C1;
Else 
  V$ = " ",V$
End If 
Return 
!
READ_POLINE: Rem get vendor item # from poline
KPOL$ = " ",KPOL$
KPOL$[1,6] = K1$[5,10];KPOL$[7,9] = K1$[11,13]
Search #CH_POLINE,2,1;KPOL$,REC_POL,E
If Not(E)
  Mat Read #CH_POLINE,REC_POL,0;L1;
  Mat Read #CH_POLINE,REC_POL,12;L2;
  Mat Read #CH_POLINE,REC_POL,24;L3;
  Mat Read #CH_POLINE,REC_POL,66;L1$;
Else 
  L1$[61,80] = " ",L1$[61,80]
End If 
Return 
!
READ_NSTKDESC: Rem read non-stock desc to units out
Mat Read #CH_NSTK,L3[1],96;NSD1
Mat Read #CH_NSTK,L3[1],132;NSD3;
A[6] = NSD3[6];A[5] = NSD3[7] \ If Not(A[5]) Let A[5] = 1
B[11]=NSD1[1]
B[23] = NSD3[2];A1[3] = NSD3[3] \ If Not(A1[3]) Let A1[3] = 1
PFU1[0] = NSD1[2];PFU1[1] = NSD1[3]
PFU1[2] = NSD1[4];PFU1[3] = NSD1[5]
PFU1[4] = 0;PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = NSD1[5];PFU1[9] = NSD1[4];PFU1[10] = NSD1[4]
PFU1[11] = NSD1[3];PFU1[12] = NSD1[4]
PFU1[13] = PFU1[0];PFU1[16] = PFU1[0];PFU1[17] = PFU1[0]
PFU1[18] = PFU1[0];PFU1[19] = PFU1[0]
PFU2[0] = NSD3[3];PFU2[1] = NSD3[4]
PFU2[2] = NSD3[5]
PFU2[3] = 0;PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 3
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
Return 
!
L_7700: Rem CONVERT FROM JULIAN
DATE$ = " ",DATE$;X$ = " ",X$
DATE$ = X2 Using "&&&&&"
Call JulianToDate(1,DATE$,DATE$,E) 
if E=0 let X$ = DATE$ else X$=""
Return 
!
L_7750: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
!
! - Rem {begin rtn.input.s}
! - ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 >= 3 If J0 <= 4
! -   If J0 = 3 Let J2$ = "#",J2$
! -   If J0 = 4 Let J2$ = "-",J2$
! -   J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - End If 
! - J1$[J3 + 1] = ""
! - If J0 < 3 Goto ISENTER
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 <> 6
! -   If J0 = 5
! -     J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
! -     J1$ = J9$[4,7],J9$[2,3],"  "
! -   Else 
! -     J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! -     If Len(J5$) > Msc(33) - 3 Let J5$[Msc(33) - 3] = ""
! -   End If 
! - End If 
! - ISENTER: Rem
! - If J5 < Msc(34) - 1
! -   Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - End If 
! - Print @J4 + J3,J5;'EU';@J4 - 1,J5;'BU';
! - Print @J4,J5;J1$[1,J3]; Tab (J4 + J3);'EU'; \ If J0 = 5 Print "  ";
! - Print @J4 - 1,J5;'BU';@J4,J5; \ Input Len J3 + 16384;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) > J3
! -   J7$ = "TOO LONG !" \ Gosub ISERRMSG \ Goto ISENTER
! - End If 
! - J9$ = J4$
! - If Not(Len(J9$))
! -   If J0$[3,4] = "00"
! -     J9$ = J1$
! -   Else 
! -     J7$ = "FIELD MUST BE ENTERED !" \ Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - End If 
! - For cnt = 1 To Len(J9$)
! -   If J9$[cnt,cnt] < " " Or J9$[cnt,cnt] > "~"
! -     J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!"
! -     Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - Next cnt
! - On J0 Goto ISTYPE1,ISTYPE1,ISTYPE3,ISTYPE3,ISTYPE3,ISTYPE6 \ Stop 
! - ISTYPE1: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto ISOUT
! - ISTYPE3: Rem
! - J9 = 0
! - X1 = 0
! - For cnt = 1 To Len(J9$)
! -   If J0 = 4 And Not(X1)
! -     If J9$[cnt,cnt] = "-" Or J9$[cnt,cnt] = "+"
! -       X1 = 1
! -       Goto ISNCONT1
! -     End If 
! -   End If 
! -   If J9$[cnt,cnt] > "/" If J9$[cnt,cnt] < ":" Goto ISNCONT2
! -   If J9$[cnt,cnt] = " " Goto ISNCONT1
! -   If Len(J0$) > 10
! -     J7$ = "" \ Let J7$ = J0$[10] To J9$[cnt,cnt] : J7 \ If J7 Goto ISNCONT1
! -   End If 
! -   If J9$[cnt,cnt] <> "." Goto ISNUMERR1
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto ISDECERR
! -   If J9 Goto ISNUMERR1
! -   J9 = 1
! - ISNCONT2: Rem
! -   X1 = 1
! -   If J9 Let J9 = J9 + 1
! - ISNCONT1: Rem
! - Next cnt
! - If J0 = 5 Goto ISTYPE5
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto ISDECERR
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto ISOUT
! - ISNUMERR1: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - ISDECERR: Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE5: If Len(J0$) > 10 If J9$ = J0$[11,11] Goto ISOUT
! - If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto ISDTERR
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto ISDTOUT
! - If J9[1] = 0 Goto ISDTERR
! - On J9 Goto ISMO31,ISMOFEB,ISMO31,ISMO30,ISMO31,ISMO30
! - On J9 - 6 Goto ISMO31,ISMO31,ISMO30,ISMO31,ISMO30,ISMO31
! - Goto ISDTERR
! - ISMO30: If J9[1] > 30 Goto ISDTERR
! - ISMO31: If J9[1] > 31 Goto ISDTERR
! - Goto ISDTOUT
! - ISMOFEB: If J9[1] > 29 Goto ISDTERR
! - If Fra(J9[2] / 4) ! *** 2000 is leap year! OR NOT FRA(J9[2]/100)
! -   If J9[1] > 28 Goto ISDTERR
! - End If 
! - ISDTOUT: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub ISDUNPACK
! - J$ = X$ \ J3 = 8 \ Goto ISOUT
! - ISDTERR: J7$ = "INVALID DATE !" \ Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE6: Call String(1,J9$)
! - If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto ISOUT
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto ISOUT
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !"
! - Gosub ISERRMSG \ Goto ISENTER
! - ISOUT: J$[J3 + 1] = "" \ Print @J4,J5;J$; \ Return 
! - ISERRMSG: X1 = Len(J7$)
! - Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
! - Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
! - Print 'K1'; \ Window Close \ Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end rtn.input.s}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: goto CVTSTARTB ! - was If Spc(4) > 1280 Goto CVTSTARTB
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
CVTTRY: Rem "this is a remark
! - Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto CVTTRY
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
!
DONE: Rem
if J8 goto OUTEND ! dx xml
!
If SORTPO
  Gosub PRINT_PO_TOTAL
  Gosub PRINT_BUYER_TOTAL
  Gosub PRINT_GRAND_TOTAL
Else 
  Gosub PRINT_TOTAL
End If 
POTOTQTY = 0
BUYERTOTQTY = 0
GRANDTOTQTY = 0
POTOTEXT = 0
BUYERTOTEXT = 0
GRANDTOTEXT = 0
PTTOTEXT = 0
CNT = CNT + 1
If CNT < COUNT
   If SORTBOTH Let K1$ = " ",K1$;K1$[1,1] = "S"
   Goto START_IT
End If 
! - If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
For K = 0 To 20
  T9[K] = 0
Next K
goto OUTEND ! bypass purge
!
! - If Err 0 Rem
! - Close #0
! - PURGE_QUESTION: Rem prompt for purging 4/nsinvtrans file
! - Print 'CS';@0,22;"DO YOU WANT TO PURGE NON STOCK TRANSACTION HISTORY? (YES/N) ";
! - Input ""J$
! - If J$ = "N" Goto OUTEND
! - If J$ <> "YES" Goto PURGE_QUESTION
! - DATE_PROMPT: Rem ENTER DATE HERE
! - Print 'CS MH';
! - Print @0,0;"NON STOCK TRANSACTION HISTORY PURGE";
! - Print @10,10;"ENTER ACCEPT DATE TO CLEAR UP TO: ";'ML ML ML ML ML ML';
! - J1 = CURDAT
! - J1$ = ""
! - J0$ = "5 00064410"
! - Gosub ISINPUT
! - DATE$ = J1 Using "&&&&&&"
! - CLEARDATE = DATE$
! - Call FormatDate(DATE$,DATE$,E) \ If E Goto DATE_PROMPT
! - Print @10,11;"WILL CLEAR UP TO ";DATE$;
! - OKEY_TO_BEGIN_PROMPT: Rem "ask again to make sure
! - Print @10,14;'CE';"OKAY TO BEGIN? (YES/N) ";
! - Input Len 16387;""F$
! - If F$ = "N" Goto PURGE_QUESTION
! - If F$ <> "YES" Goto OKEY_TO_BEGIN_PROMPT
! - NUMDEL = 0
! - K1$ = " ",K1$
! - NEXT_NSINVTRANS_REC: Rem LOOP HERE
! - Search #CH_INVTRNS,3,1;K1$,V1,E \ If E > 2 Gosub ERR_SEARCH
! - If E Goto DONE_PURGE
! - Mat Read #CH_INVTRNS,V1,0;LT0$;
! - Mat Read #CH_INVTRNS,V1,56;LT1;
! - Mat Read #CH_INVTRNS,V1,64;LT2;
! - Mat Read #CH_INVTRNS,V1,100;LT1$;
! - Mat Read #CH_INVTRNS,V1,106;LT3;
! - Mat Read #CH_INVTRNS,V1,114;PRONTO;
! - DATE$ = " ",DATE$;DATE$ = K1$[1,5]
! - Call JulianToDate(1,DATE$)
! - Call VerifyDate(DATE$)
! - X2 = DATE$
! - If X2 > CLEARDATE Goto DONE_PURGE
! - If Not(Fra(NUMDEL / 150)) Print @0,22;'CL';"Doing:";X2;".";NUMDEL;"records deleted";
! - NUMDEL = NUMDEL + 1
! - Gosub DEL_NSINVTRANS_REC
! - Goto NEXT_NSINVTRANS_REC
! - DEL_NSINVTRANS_REC: Rem NOW DELTET NSTRANS RECORD
! - R6 = V1
! - K6$ = " ",K6$;K6$ = K1$
! - Search #CH_INVTRNS,5,1;K6$,R6,E \ If E Gosub ERR_SEARCH
! - K6$ = " ",K6$
! - K6$ = LT0$[1,12],K1$
! - R6 = V1
! - Search #CH_INVTRNS,5,2;K6$,R6,E \ If E Gosub ERR_SEARCH
! - R6 = V1;E = 3
! - Search #CH_INVTRNS,1,0;K9$,R6,E \ If E Gosub ERR_SEARCH
! - Return 
! - DONE_PURGE: Rem "finish purging nsinvtrans file
! - Print @0,4;'CE';'RB';"COMPLETE ! - "
! - Print Using "######";"NUMBER TRANSACTIONS DELETED =";NUMDEL;
! - Print 'CR'; \ Input "PRESS <CR> TO EXIT "F$
! - If F$ <> "" Goto DONE_PURGE
!
OUTEND: Rem
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
! try call dxclose() else rem
End 
!
! - Print 'CS'
! - Close 
! - Chain "MX000"
!
Rem {end rtn.convert.s}
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 


parseponum: !search lt0$[25,36],"PO#",e
!if e=0 then ponum=0 \ return
!ponum=lt0$[27+e]
!return
	search lt0$[25,36],"PO#",e
	if E<>0
		let ponum=lt0$[27+e]
		let polineno=0
		return
	else
		if lt0$[25,26]="PO" and lt0$[33,33]="-"
			let ponum=lt0$[27,32] ! and e=0
			let poline=lt0$[34,36] 
			if poline<0 or poline>999
				let polineno=0
			endif
			return
		else
			ponum=0 
			polineno=0
			 return
		endif
	endif
return