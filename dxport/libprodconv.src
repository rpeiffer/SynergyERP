! libprodconv.src  converted from ubsprconv.src
!
! loadsave -w -n 100,10 -o prog/dxport/libprodconv.lib src/libprodconv.src
!
! 1.0 09/12/07 new
! 1.5 05/06/2008 - new prod struct
!
include "src/copyright.inc"
!
! List of Subs and Functions in Lib
!
!  sub       ProdConvert
!  function  ConvProdAmount
!
include "src/inc/fileprod.inc" ! product
!
!External Lib "libprodconv.lib"
!Declare Function ProdConvert
!
! ----------------------------------------
External Sub ProdConvert(e$,CNVTU[],CNVTA,ctlc,Flag,PR. as prod)
  !
  Try
    !
    DIM 1%,tmp1,X1[9],PFU1[7],Bunit[1]
    DIM 2%,tmp2,RECS[9],X1[9],Q0[1],E
    DIM 3%,tmp3,Amount,PFU2[6]
	!
    DIM A$[14],F$[16],J4$[80],X$[20],P9$[50]
	!
    DEF FNR(H)=INT(ABS(H)*100+.5)*.01*SGN(H)
    DEF FNN(H)=INT(ABS(H)*10^Q0[1]+.5)*10^-Q0[1]*SGN(H)
    DEF FNT(H)=INT(ABS(H)*10^Q0[1])*10^-Q0[1]*SGN(H)
    DEF FNV(H)=INT(ABS(H)*10^Q0[1]+.9999999)*10^-Q0[1]*SGN(H)
    DEF FNU(H)=INT(ABS(H)+SGN(FRA(ABS(H))))*SGN(H)
    DEF FNF(H)=INT(ABS(H)*10^F+.5)*10^-F*SGN(H)
    !
	PFU2[0]=PR.UM2Fact
	PFU2[1]=PR.UM3Fact
	PFU2[2]=PR.UM4Fact
	PFU2[3]=PR.UM5Fact
	PFU2[4]=PR.UM6Fact
	PFU2[5]=PR.UM7Fact
	PFU2[6]=PR.UM8Fact
	!
	PFU1[0]=PR.BaseUM 
	PFU1[1]=PR.UM2 
	PFU1[2]=PR.UM3 
	PFU1[3]=PR.UM4 
	PFU1[4]=PR.UM5
	PFU1[5]=PR.UM6
	PFU1[6]=PR.UM7
	PFU1[7]=PR.UM8
	!

    BUNIT=0;Bunit[1]=0
	If Cnvtu[2]=6 ! "no price/cost rounding
	 Let Bunit[1]=1;cnvtu[2]=2 ! "no round/back to cost/price
	Endif
    IF CNVTU[2]<>5 GOTO L_880: ! 5=no qty round when from base
    BUNIT=1
    CNVTU[2]=1
    GOTO L_890:
    !
 L_880: rem
    LET BUNIT=0
    !
 L_890: REM
   MAT  READ #ctlc,19,50;P9$;
   MAT  READ #ctlc,115,40;Q0;
   ON CNVTU[2]+1 GOTO L_1000:,L_2000:,L_2000:
   !
 L_1000: REM CHECK IF VALID CONVERSION
   !
   FOR X1[1]=0 TO 1
     IF CNVTU[X1[1]]=0 GOTO L_1080:
     IF CNVTU[X1[1]]=-1 OR CNVTU[X1[1]]=-3 GOTO L_1080:
     FOR X1[2]=0 TO 7
       IF CNVTU[X1[1]]=PFU1[X1[2]] GOTO L_1080:
     NEXT X1[2]
     FLAG=1 \ GOTO L_8000:
     !
 L_1080: 
   NEXT X1[1]
   FLAG=0 \ GOTO L_8000:
   !
 L_2000: REM CONVERT COST/PRICE/QTY
   AMOUNT=CNVTA
   FOR X1[1]=0 TO 1
     LET CMODE=1 \ IF X1[1] LET CMODE=-1
     IF CNVTU[X1[1]]=0 GOTO L_2170:
     IF CNVTU[X1[1]]=-1 OR CNVTU[X1[1]]=-3 GOTO L_2100:
     FOR CUNIT=0 TO 7
       IF PFU1[CUNIT]=CNVTU[X1[1]] GOTO L_2090:
     NEXT CUNIT
     FLAG=0 \ GOTO L_8000:
     !
 L_2090:  
     IF CUNIT=0 GOTO L_2170:
     !
 L_2100: 
     IF CNVTU[2]=2 LET CMODE=-CMODE
	 !
     IF CNVTU[X1[1]]=-1 ! " <>-1 GOTO L_2150: ! ITS CWT
       IF PR.LbsFact IF CMODE<0 LET Amount=(Amount*(PR.LbsUnit/PR.LbsFact))/100
       IF PR.LbsUnit IF PR.LbsFact IF CMODE>0 LET Amount=Amount*100/(PR.LbsUnit/PR.LbsFact)
     ELSE 
       IF CNVTU[X1[1]]=-3 ! " Catch Weight Item
         IF PR.LbsFact IF CMODE<0 LET Amount=(Amount*(PR.LbsUnit/PR.LbsFact))
         IF PR.LbsUnit IF PR.LbsFact IF CMODE>0 LET Amount=Amount/(PR.LbsUnit/PR.LbsFact)
       ELSE 
         IF CMODE>0 LET Amount=Amount*PFU2[CUNIT-1]
         IF PFU2[CUNIT-1] IF CMODE<0 LET Amount=Amount/PFU2[CUNIT-1]
       ENDIF 
     ENDIF 
     !
 L_2170:  
   NEXT X1[1]
   !
   IF CNVTU[2]<>1 GOTO L_2180: ! not qty
   IF FRA(Amount) IF (NOT(CNVTU[1]) OR CNVTU[1]=PFU1[0]) LET Amount=FNU(Amount)
   IF BUNIT GOTO move_on: ! no qty round
   IF CNVTU[1] IF CNVTU[1]<>PFU1[0] LET Amount=FNR(Amount) 
   goto move_on ! qty's do not need 6 digit truncate
   L_2180: IF CNVTU[2]<>2 GOTO move_on: ! not price
   If BUNIT[1] GOTO move_on: ! "no price rounding
   IF NOT(CNVTU[1]) GOTO L_2250: ! to base
   IF P9$[42,42]="N" LET Amount=FNN(Amount)
   IF P9$[42,42]="T" LET Amount=FNT(Amount)
   IF P9$[42,42]="U" LET Amount=FNV(Amount)
   !
 L_2250: REM
   !if # of decimals for costs is 4 or 5, only store 6 significant digits in
   !base, make sure those digits are rounded.
   IF CNVTU[1] GOTO MOVE_ON: ! to specific u/m - not to base
    F=6  ! THIS CUTS OFF ANY DIGIT > 6 FROM BASE? as no price identifier
   IF INT(ABS(Amount))  ! If >6 in front of decimal - DOES NOTHING!
     FOR X=1 TO 6
       IF NOT(INT(ABS(Amount)/10^X))
          F=6-X
         GOTO LOOP_DONE:
       ENDIF 
     NEXT X
   ELSE 
     FOR X=1 TO 3
       IF NOT(INT(ABS(Amount)*10^X)) LET F=F+1
     NEXT X
   ENDIF 
   !
 LOOP_DONE: 
    Amount=FNF(Amount)
   !
 MOVE_ON: 
   FLAG=0
   GOTO L_8000:
   !
 L_8000: REM RETURN FOR MODES 0-2
   CNVTA=Amount
   !
 OUTEND: REM OUT
 !
  else
    include "src/callsuberr.inc"
  end try

 END SUB ! ProdConvert
 !
! ----------------------------------------
External Function ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,Flag,PR. as prod)
  !
  ! Replaces function xamount in ubsprconv.dl4,
  ! using current def structures
  ! 
  Try
    !
    DIM 3%,Amount
    !
    ! IF CNVTU[2]=3 GOTO PRCONV SECTION, SHOULD NOT HAPPEN: 
    ! 
    IF CNVTU[2]=1 AND CNVTU[1]=CNVTU[0] THEN
      Amount=CNVTA
      EXIT FUNCTION Amount
    END IF
    !
    IF CNVTU[0]=-2 OR CNVTU[1]=-2 THEN
      Amount=CNVTA
      EXIT FUNCTION Amount
    END IF
    !
    ! IF CNVTU[2]=0 GOTO L_20050:
    IF NOT(CNVTA) AND CNVTU[2]<>0 THEN
      Amount=0
      EXIT FUNCTION Amount
    END IF
    !
    REM "====== Converted External UB Call
    CALL ProdConvert(e$,CNVTU[],CNVTA,ctlc,Flag,PR.)
    ! 
    IF CNVTU[2]=0 OR FLAG THEN
      Amount=0
    EXIT FUNCTION AMOUNT
    END IF
    !   
    Amount=CNVTA
  else
    include "src/callsuberr.inc"
  end try
  !
END FUNCTION Amount ! ConvProdAmount
!
! ----------------------------------------
