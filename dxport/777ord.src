!  777ord  reset order rasl information to pre-rasl status

! loadsave -w -n 100,10 -o prog/dxport/777ord.dl4 src/777ord.src

External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,programdump,env
External Lib "libgeneral.lib" !general routines    
Declare External Sub suberr,mainerr,searcherr

Enter intco,order,CHOpen[]
! intco		Company #
! order		sales order number
! CHOPen[20] - Pass channels files are open on - 0=not open
!  [0] = Control File
!  [1] = Product
!  [2] = ROH 
!  [3] = ROL 
!  [4] = sordlot
!  [5] = sprodlot
!  [6] = sProdLot
!  [7] = prodwhse

sub OpenFiles()
try
	let ch_cntrl=CHOpen[0]
	LeT CH_PROD=CHOpen[1]
	LET CH_ROH=CHOpen[2] 
	LET CH_ROL=CHOpen[3] 
	LET CH_sordlot=CHOpen[4]
	LET CH_sprodlot=CHOpen[5]
	LET CH_WH=CHOpen[6]
	LET CH_ProdWhse=CHOpen[7]
	
	If not(chopen[0]) ! control file
	  Let ch_cntrl=OpenFile(9999,intco) \ if ch_cntrl=-1 Error 42
	  chopen[0]=-ch_cntrl
	Endif
	If not(chopen[1]) ! prod
	  Let ch_prod=OpenFile(-1792,intco) \ if ch_prod=-1 Error 42
	  chopen[1]=-ch_prod
	Endif
	If not(chopen[2]) ! ORDER HEADER
	  Let ch_roh=OpenFile(-1840,intco) \ if ch_roh=-1 Error 42
	  chopen[2]=-ch_roh
	Endif
	If not(chopen[3]) ! ORDER LINES
	  Let ch_rol=OpenFile(-1888,intco) \ if ch_rol=-1 Error 42
	  chopen[3]=-ch_rol
	Endif
	If not(chopen[4]) ! sordlot
	  Let ch_sordlot=OpenFile(2320,intco) \ if ch_sordlot=1 Error 42
	  chopen[4]=-ch_sordlot
	Endif
	If not(chopen[5]) ! prodlot
	  Let ch_sprodlot=OpenFile(2528,intco) \ if ch_sprodlot=-1 Error 42
	  chopen[5]=-ch_sprodlot
	Endif
	If not(chopen[6]) ! whinfo
	  Let ch_wh=OpenFile(-2768,intco) \ if ch_wh=-1 Error 42
	  chopen[6]=-ch_wh
	Endif
	If not(chopen[7]) ! prodwhse
	  Let ch_prodwhse=OpenFile(-1744,intco) \ if ch_prodwhse=-1 Error 42
	  chopen[7]=-ch_prodwhse
	Endif
 else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! OpenFiles

SUB Chk_WHIRASL() ! "RASL FLAG in Warehouse Info
TRY
	Let N1[4]=1 ! "if RASL n already taken care of
	If P9$[41,41]<>"W" Exit Sub  ! "for R97 - would be Y or N only
	Let R[7]=L4[3]-1 \ If R[7]<0 Or R[7]>98 Exit Sub
	Mat Read #ch_wh,R[7],122;N1;
 else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! CHK_WHIRASL

SUB GetNewSprodLot() ! "need new record
TRY
	Let E=2;R[6]=0
	Search #CH_SPRODLOT,1,0;K5$,R[6],E 
	If E Let e$ = "search error CH_SPRODLOT mode=1 keyno=0 rec=",r[6]," e=",E," keyval=",k5$ \ Error 10000
	Let p0$=" ",P0$;P1$=" ",P1$
	For X=0 to 4
	If X<=1 Let P1[x]=0
	If X<=2 Let P2[x]=0
	If X<=4 Let P3[x]=0
	Next X
	Let P0$[1,24]=S0$[1,24];P1$=HOL2$[11,16]
	Let P1[0]=ol1[2];P1[1]=3
	Let P3[2]=AvgCost;P4=0
	Mat Write #CH_SPRODLOT,R[6],0;P0$;
	Mat Write #CH_SPRODLOT,R[6],66;p1;
	Mat Write #CH_SPRODLOT,R[6],70;p2;
	Mat Write #CH_SPRODLOT,R[6],82;p3;
	Write #CH_SPRODLOT,R[6],112;p4;
	Mat Write #CH_SPRODLOT,R[6],114;p1$;
	Write #CH_SPRODLOT,R[6],120;PLTR;
	Search #CH_SPRODLOT,4,2;K5$,R[6],E 
	If E Let e$ = "search error CH_SPRODLOT mode=4 keyno=2 rec=",r[6]," e=",E," keyval=",k5$ \ Error 10000
	Let J$=" ",j$
	Let J$[1,12]=p0$[13,24];J$[23,30]=k5$[13,20]
	Let J$[31]=P0$[1,12]
	Search #CH_SPRODLOT,4,1;J$,R[6],E
	If E Let e$ = "search error CH_SPRODLOT mode=4 keyno=1 rec=",r[6]," e=",E," keyval=",J$ \ Error 10000
	Let J$=" ",j$
	Let J$[1,8]=K5$[13,20];j$[9,32]=P0$[1,24]
	Search #CH_SPRODLOT,4,3;J$,R[6],E 
	If E Let e$ = "search error CH_SPRODLOT mode=4 keyno=3 rec=",r[6]," e=",E," keyval=",J$ \ Error 10000
	Let J$=" ",j$
	Let J$[1,12]=P0$[1,12];J$[13,14]=P1[0] Using "##"
	Let J$[15,26]=P0$[13,24];J$[37,42]=P1$[1,6]
	Search #CH_SPRODLOT,4,4;J$,R[6],E 
	If E Let e$ = "search error CH_SPRODLOT mode=4 keyno=4 rec=",r[6]," e=",E," keyval=",J$ \ Error 10000
else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! GetNewSprodLot


!-------------------------------------------------------------------------------------
! Main program starts here
  try
	DIM buttonlist$[5,50],nextlist$[5,100],rstr$[2000] 
	Dim K1$[60],k2$[60],k3$[60],k4$[60],K5$[60],e$[1000]
	DIM L1$[20],OL2$[16],S0$[36],P0$[66],P1$[6]
	Dim p9$[50],P60$[50],p61$[255],J$[60],HOL2$[16]
	DIM 1%,H4[2],L3[3],S2[1],N1[5],OL1[3],P1[1],P4,PLTR
	DIM 2%,H0[12],H5[16],L4[3],B[24],OL2[3],P2[2]
	DIM 3%,r[15],L7[12],W3[24],AvgCost,OL3[5],HS3[5],P3[4]

	CALL OPENFILES()
	Mat Read #CH_CNTRL,19,50;p9$;
	Mat Read #CH_CNTRL,60,50;P60$;
	Mat Read #CH_CNTRL,61,0;P61$;
	If P9$[41,41]<>"Y" And P9$[41,41]<>"W" Goto OUTEND
	
	StartWork: ! "And we're Off
	Let K1$=" ",k1$
	for Stat = 1 to 99
		! "Order Header Loop
		k1$[1,2] = Stat using "##"
		k1$[3,8] = Order using "######"
		Search #CH_ROH,2,1;K1$,R[3],E \ if e=2 Goto OutEnd
		If E>2 Let e$ = "search error CH_ROH mode=2 keyno=1 rec=",r[3]," e=",E," keyval=",k1$ \ Error 10000
		if not(e)
			stat=100 ! early about, found order
			Mat Read #ch_roh,R[3],0;H0;
			Mat Read #ch_roh,R[3],78;h4;
			Mat Read #ch_roh,R[3],104;H5;

			Let K2$=" ",k2$;k2$[1,6]=K1$[3,8]
			OrdL_Loop: ! "Order Lines
			Search #CH_ROL,3,1;k2$,R[4],e
			If E>2 Let e$ = "search error CH_ROL mode=3 keyno=1 rec=",r[4]," e=",E," keyval=",k2$ \ Error 10000	
			If NOT(E) AND K2$[1,6]=k1$[3,8]
				Mat Read #ch_rol,R[4],8;L3;
				Mat Read #ch_rol,R[4],16;L4;
				Mat Read #ch_rol,R[4],140;L1$;
				Mat Read #ch_rol,R[4],168;L7;
				Mat Read #ch_rol,R[4],256;S2;
				If L3[0] Goto OrdL_Loop: ! "Non-stock
				If Not(L3[1]) Goto OrdL_Loop: ! "non-inventory
				If S2[0]=3 Goto OrdL_Loop: ! "Message
				call Chk_WHIRASL() ! "check Wh Info for RASL Flag
				If Not(N1[4]) Goto OrdL_Loop: ! " Return ! "no RASL For Whse
				Mat Read #CH_PROD,L4[0],156;B;
				Let AvgCost=B[21]
				If P9$[32,32]="Y" ! "whse price/cost
					Let J$=" ",j$;J$[1,12]=L1$[1,12];J$[13]=L4[3] Using "##"
					Search #CH_PRODWHSE,2,1;J$,R[8],E
					If E>1 Let e$ = "search error CH_PRODWHSE mode=2 keyno=1 rec=",r[8]," e=",E," keyval=",J$ \ Error 10000
					If Not(E)
						Mat Read #CH_PRODWHSE,R[8],78;W3;
						If W3[15]>0 Let AvgCost=W3[15]
					Endif
				Endif
				Let K3$=" ",K3$;K3$[1,9]=K2$[1,9]
				SordL_Loop: ! "Get previous Allocations
				Search #CH_SORDLOT,3,3;K3$,R[5],E
				If E>1 Let e$ = "search error CH_SORDLOT mode=3 keyno=3 rec=",r[5]," e=",E," keyval=",K3$ \ Error 10000
				IF NOT(E) AND K3$[1,9]=K2$[1,9]
					Mat read #ch_sordlot,r[5],0;s0$;
					Mat Read #ch_sordlot,R[5],36;OL1;
					Mat Read #ch_sordlot,r[5],44;ol2;
					Mat Read #ch_sordlot,r[5],60;OL3;
					Mat Read #ch_sordlot,R[5],96;ol2$;
					If Ol2$[11,16]="NONE  " Goto SOrdL_Loop: ! "already at none
					If Not(OL3[1]+OL3[4]+OL3[5]) Goto SOrdL_Loop: ! "nothing there B/O?
					Let K4$=K3$;K4$[12,17]="NONE  "
					Search #ch_sordlot,2,3;K4$,R[15],E 
					If E>1 Let e$ = "search error CH_SORDLOT mode=2 keyno=3 rec=",r[15]," e=",E," keyval=",K4$ \ Error 10000
					If E=1
						Let E=2;R[15]=0
						Search #ch_sordlot,1,0;K4$,r[15],e
						If E>1 Let e$ = "search error CH_SORDLOT mode=1 keyno=1 rec=",r[15]," e=",E," keyval=",K4$ \ Error 10000
						Mat Write #ch_sordlot,R[15],0;S0$; ! "nothing changes here
						Mat Write #ch_sordlot,R[15],36;ol1; ! "ditto
						Mat Write #ch_sordlot,R[15],44;OL2; ! "same here
						For X=0 to 5 \ Let HS3[x]=0 \ Next X
						Mat Write #ch_sordlot,R[15],60;HS3; ! " cleared 
						Let HOL2$=" ",HOL2$;HOL2$=OL2$
						Let HOL2$[11,16]="NONE  "
						Mat Write #ch_sordlot,R[15],96;HOL2$;
						Search #ch_sordlot,4,3;K4$,R[15],e 
						If E Let e$ = "search error CH_SORDLOT mode=4 keyno=3 rec=",r[15]," e=",E," keyval=",K4$ \ Error 10000
						Let K5$=" ",K5$;k5$[1,12]=S0$[1,12];K5$[13]=K4$
						Search #ch_sordlot,4,1;K5$,R[15],E 
						If E Let e$ = "search error CH_SORDLOT mode=1 keyno=3 rec=",r[15]," e=",E," keyval=",K5$ \ Error 10000
						Let K5$=" ",K5$;K5$[1,12]=S0$[13,24];k5$[13,22]=HOL2$[1,10]
						Let K5$[23,39]=K4$[1,17];K5$[40,51]=S0$[1,12]
						Search #ch_sordlot,4,2;K5$,R[15],E 
						If E Let e$ = "search error CH_SORDLOT mode=2 keyno=3 rec=",r[15]," e=",E," keyval=",K5$ \ Error 10000
					Endif
					Mat Read #ch_sordlot,R[15],60;HS3 
					Let HS3[0]=HS3[0]+ol3[0] ! "req'd
					Let HS3[1]=HS3[1]+ol3[1] ! "fulfil
					Let HS3[4]=HS3[4]+ol3[4] ! "Consign
					Let HS3[5]=HS3[5]+ol3[5] ! "B&H
					Mat Write #ch_sordlot,R[15],60;HS3;
					BackoutOldLoc: ! "out of orig location Sprodlot
					Let K5$=" ",K5$;K5$[1,12]=S0$[1,12];K5$[13]=K3$[10]
					Search #ch_sprodlot,2,2;k5$,R[6],E
					If E>2 Let e$ = "search error CH_SPRODLOT mode=2 keyno=2 rec=",r[6]," e=",E," keyval=",K5$ \ Error 10000
					If E=1 And OL2$[11,16]="NONE  " Gosub AddtoNewLoc:
					If E=1 And OL2$[11,16]<>"NONE  " Goto SOrdL_Done:
					Mat Read #ch_SPRODlot,R[6],82;P3
					Let P3[3]=P3[3]-OL3[1] \ If P3[3]<0 Let P3[3]=0
					Mat Write #CH_SPRODLOT,R[6],82;P3;
					! We're not checking if zero and could delete - just leave it!
					AddtoNewLoc: ! "
					Let K5$[15,20]=HOL2$[11,16]
					Search #CH_SPRODLOT,2,2;K5$,R[6],E 
					If E>1 Let e$ = "search error CH_SPRODLOT mode=2 keyno=2 rec=",r[6]," e=",E," keyval=",K5$ \ Error 10000
					If E=1 CALL GetNewSprodlot()
					Mat Read #CH_SPRODLOT,R[6],82;P3
					Let P3[3]=P3[3]+OL3[1]
					Mat Write #CH_SPRODLOT,R[6],82;P3;
					Let HS3[2]=P3[2] ! "Cost Update to Sprodlot Cost
					Mat Write #CH_SORDLOT,R[15],60;HS3;
	
					SordL_DOne: ! "Done - Delete
					K4$=K3$ ! "Original Key
					If S3[3] And Ol2$[11,16]="STOCK " Goto SOrdL_Loop:
					Search #CH_SORDLOT,5,3;K4$,R[9],e 
					If E Let e$ = "search error CH_SORDLOT mode=5 keyno=3 rec=",r[9]," e=",E," keyval=",K4$ \ Error 10000
					Let K5$=" ",K5$;k5$[1,12]=S0$[1,12];K5$[13]=K4$
					Search #CH_SORDLOT,5,1;K5$,R[9],E 
					If E Let e$ = "search error CH_SORDLOT mode=5 keyno=1 rec=",r[9]," e=",E," keyval=",K5$ \ Error 10000
					Let K5$=" ",K5$;K5$[1,12]=S0$[13,24];k5$[13,22]=HOL2$[1,10]
					Let K5$[23,39]=K4$[1,17];K5$[40,51]=S0$[1,12]
					Search #CH_SORDLOT,5,2;K5$,R[9],E
					If E Let e$ = "search error CH_SORDLOT mode=5 keyno=2 rec=",r[9]," e=",E," keyval=",K5$ \ Error 10000
					let E=3
					Search #ch_sordlot,1,0;K4$,R[5],E 
					If E Let e$ = "search error CH_SORDLOT mode=1 keyno=0 rec=",r[5]," e=",E," keyval=",K4$ \ Error 10000
					Goto SordL_Loop: 
				endif
				GOTO ORDL_LOOP
			ENDIF
		endif !! no header key found
	next stat
	OutEnd: ! done
	for x=0 to ubound(chOpen[],1)
		IF chopen[x]<-1  CLOSE #ABS(CHOpen[X])
	NEXT X

  else
    include "src/callmainerrnet_call.inc"
  end try
  !
end 
