Rem SOPOCRTE PURCHASE ORDER AUTO-GENERATE  From Sales Order
Rem  AUTHOR: G.DOSCHER   8/10/88
Rem  LAST UPDATE:  THIS IS A CALLED PROGRAM (specs say ordertotal screen)
!
! loadsave -w -n 100,10 -o prog/dxport/sopocrte.dl4 src/sopocrte.src
!
Rem created from: po367 with subs/funcs from serppoh
Rem Pass in thru s9 = the order details
Rem if any are "Mill Items" (in prodgrp) and line is updatestock=N
Rem Group lines by Vendor and create a DIRECT PO
Rem tied to the Sales order by using posolinecopy
include "src/copyright.inc" ! dx
Include "src/inc/fileprtdefault.inc" ! port defaults
include "src/inc/fileprod.inc" ! product
include "src/inc/fileordhead.inc" ! order header, order shipto, order rot
include "src/inc/filea80vm.inc" ! vendor file
include "src/inc/filecust.inc" ! customer
! prod desc key
include "src/inc/filepohead.inc" ! po header
include "src/inc/filepoline.inc" ! po lines file
include "src/inc/fileprodwhse.inc" ! prod warehouse
Include "src/inc/filepom.inc" ! purchase order message file
include "src/inc/filewhinfoz.inc" ! warehouse
! commodity code
include "src/inc/filenstkdesc.inc" ! non stock file
include "src/inc/filevendtag.inc" ! vendor tag file
include "src/inc/filerolz.inc" ! order line file
! for multicurrency
include "src/inc/filecurrency.inc" ! currency exchange file
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub GetDelimiters
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Sub UserCntrl,GetPortDefault
Declare External Function GetUIDRec,buildsort

External Lib "libprodconv.lib"           
Declare External Function ConvProdAmount 
! intrinsic used in program
Declare Intrinsic Sub Findf,programdump
Declare Intrinsic Function findchannel
! Option Default Dialect IRIS1
Declare Sub CalcPoTotals,CalcExtAmt
Declare Function CalcExtWgt,CalcExtCube
Try
Enter S9[],Intco,Chan[],userid$,E$,returnstatus,message$,List$[]
Dim prt. as prtdefault
dim 1%,plcurrid,phcurrid,olcurrid,ohcurrid
dim 3%,plcurrfact,phcurrfact,olcurrfact, ohcurrfact
dim 1%,cnvcu[10],3%,cnvca[10],keycurr$[10],3%,rec_curr,currfact,vcurrid
Dim tmp$[200],WebStr$[1000],Blank$[128]
dim buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim action$[30],options$[30],b$[200],action1$[30],msg$[256],action2$[30]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
Dim StFld$[30],bcdata$[5],sfld$[30], Key1$[64]
Dim keypol$[60],keychk$[60],mode$[5]
Dim 1%,UREC,Ctlc,Flags[15],cnvtu[2]
Dim 2%,maxcnt \ maxcnt=50 ! init max records in arrays for list
! dim List$[maxcnt,1000] ! for .net (larger size - ZLines)
Dim 1%,J,L2,X1[9],H4[3],M4[1],WH,A2[2],PD1[2]
DIM 1%,ordl3[3],pgmlit,APMI,PRW1[2]
dim 2%,ordl4[3],prw2[9],pchan[50],B[24]
Dim 3%,H8[9],A1[5],A4,WHMISC2[7],ordl7[12],sospec[20],parm[9]
Dim 2%,C1[6],D9[20],CHECKH0[5],H0[5],H3[4],R5,R8,X2,X3,PH[4],N0,NUMBERSKIP
Dim K5$[50],C$[264],C2$[44],F$[20],H$[82],H1$[116],P$[64],S$[64],S1$[80]
Dim ST$[14],P4$[40],OLL2$[20],X$[20],P61$[256],k51$[60],POFRT$[6]
Dim 1%,PO1[9],PO4[10],OLL3[3],ordh4[2],POSent,POFRT[1]
Dim 2%,PO5[1],OLL2[1],CHECKH3[4],Ordh0[12],ordh5[16],PODisc[2]
Dim 3%,PO3[12],ORDT2[25],COID,E,POH7[1],tp[999],r51,r[99]
Dim A$[20],U5$[80],K2$[60],M2$[72],SHIPVIA$[10],K15$[60]
Dim FLG$[10],K3$[60],K16$[50],Custom_customer$[30]
Dim l0$[20]
Dim 3%,Amount,CNVTA
Dim J$[40],J0$[10],J1$[40],J2$[20],J4$[40],J5$[70],J7$[70],J8$[8],J9$[40]
Blank$=" ",Blank$
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H) ! rounding to nearest penny
! for the copied subs/functions - need layouts
dim prod. as prod ! prod
  dim Cust. as cust ! customer
  dim roh. as roh ! order header
  dim ros. as ros ! order ship
  dim rot. as rot ! order totals
  dim vend. as a80vm ! vendor file
  ! prod desc key
  dim poh. as pohead ! po header
  dim pol. as poline ! po line file
  Dim pw. as prodwhse! prod warehouse
  dim pom. as pom ! po message file
  dim wh. as whinfo ! warehouse file
  ! cc codes 
  dim nstk. as  nstkdesc ! po nonstk file
  dim vtag. as vendtag ! vendor tag file
  dim rol. as rolnew ! order lines file
  ! for currency exchange
  dim curr. as currency
! call dxopen() - done in serpordh
! call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
ch_prod=chan[1]
if ch_prod<=0
	Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file
Endif
ch_prwh=chan[2]
if ch_prwh<=0
    Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
endif
ch_wh=chan[3]
if ch_wh<=0
    Ch_Wh = OpenFile(-2768,intCo) \ If Ch_Wh = -1 Error 42  !" warehouse file
endif
ch_ccode=chan[4]
if ch_ccode<=0
    Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file 
endif
ch_roh=chan[5]
if ch_roh<=0
	Ch_Roh = openfile(1840,intCo) \ If Ch_Roh = -1 Error 42     !"order header file
endif
ch_rol=chan[6]
if ch_rol<=0
    Ch_RoL = openfile(1888,intCo) \ If Ch_Rol = -1 Error 42     !"order lines file
endif
ch_ros=chan[7]
if ch_ros<=0
	Ch_Ros = openfile(1856,intCo) \ If Ch_Ros = -1 Error 42     !"order shipto file
endif
ch_rot=chan[8]
if ch_rot<=0
	Ch_Rot = openfile(1872,intCo) \ If Ch_Rot = -1 Error 42     !"order total file
endif
ch_rom=chan[9]
if ch_rom<=0
    Ch_Rom = openfile(1968,intCo) \ If Ch_Rom = -1 Error 42     !"order message file
endif
ch_sproddesc=chan[10]
if ch_sproddesc<=0
	ch_sproddesc=OpenFile(2128,intCo) \ If Ch_sproddesc = -1 Error 42 ! nonstock product
Endif
If p61$[136,136]="Y"
	ch_curr=OpenFile(-9712,IntCo) \ if ch_curr = -1 Error 42 
endif
COID = IntCo
UserId$=UCase$(Userid$)+Blank$
Call GetPortDefault(e$,IntCO,UserID$,portnum,rec_uac,prt.)
try Close #1 else rem ! (it may be READ ONLY)
CTLC=OpenFile(9999,IntCo) \ if ctlc=-1 Error 42
If Ctlc<>1 Error 42 ! REOPEN AS READ/WRITE (PO NUMBER INCREMENT)
ch_sort=buildsort(e$,15,0) \ if ch_sort<0 error 42 ! sortfile
CH_PGP=OpenFile(-9965,IntCo) \ if ch_pgp=-1 error 42 ! prodgrp
Ch_vend=Openfile(2400,Intco) \ if ch_vend=-1 error 42 ! vendor
ch_poh=Openfile(2416,Intco) \ if ch_poh=-1 error 42 ! po head
ch_pol=Openfile(2432,Intco) \ if ch_pol=-1 error 42 ! po line
Ch_Pom = openfile(2464,intCo) \ If Ch_Pom = -1 Error 42     !"po message file
ch_nstk=OpenFile(2448,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
ch_VTag=Openfile(-1120,Intco) \ if ch_vtag=-1 error 42 ! vendor tag
!For K1 = 2 To 26 
  !Read J \ If J = -1 Goto L_820
  !Read #1,88,J;F$;
  !Open #K1,F$
  
!L_820: Next K1
!Data "2752","1792","1840","2400","1808","-1","2416","2432","1744","2464","2768","1728","2448","1120"
!Data "1888","2128","-1","864","1552","-1","-1","-1","-1","-1","-1"
!Open #24,"6/POWORK"
ch_posv=findchannel()
F$ = "3/POSHPVIA" + Str$(COID) \ Ropen #ch_posv,F$
ch_sot=findchannel()
F$="3/SORDTYPE"+Str$(COID) \ ROpen #ch_sot,F$
! F$ = "3/POBROKER" + Str$(COID) \ Ropen #27,F$
! let f$="2/POMISCCHRG"+STR$(COID) \ ROPEN #18,F$
S1$ = "ENTERED   PRINTED   REGISTEREDOPEN      IN PROCESSCLOSED    "
MAT  READ #1,61,0;P61$;
Mat Read #1,60,6;FLG$;
Mat read #1,115,60;custom_customer$;
Custom_Customer$=UCase$(Trim$(custom_customer$))
UserRec=GetUIDRec(e$,IntCo,Userid$)
EDII = (FLG$[2,2] = "T" Or FLG$[2,2] = "H")
If EDII
  ch_edic=findchannel()
  Open #ch_edic,"cntrl/EDICNTRL" + Str$(COID)
End If 
! ok - check order lines for any mill items
if s9[4]<>201 and s9[4]<>208 goto outdone ! ORDER ENTRY/EDIT ONLY!
rec_roh=s9[2]
MAT READ #CH_ROH,REC_ROH,0;ORDH0;
MAT READ #CH_ROH,REC_ROH,78;ORDH4;
MAT READ #CH_ROH,REC_ROH,104;ORDH5;
Mat Read #ch_ROT,ORDH0[3],8;ORDT2; ! FOR HOLDS
LET X3=ORDT2[21] ! unpack hold flags
FOR CTR=1 TO 12                          
	LET FLags[CTR]=SGN(FRA(X3/2));X3=INT(X3/2)
NEXT CTR 
if flags[1] goto outdone ! credit hold - no po?
! 2,4,5,7,8,9,15,16,20,21,22 = ORDER TYPES TO EXCLUDE
!IF H5[7]=2 OR H5[7]=4 OR H5[7]=5 OR H5[7]=7 GOTO OUTDONE
!IF H5[7]=8 OR H5[7]=9 OR H5[7]=15 OR H5[7]=16 OR H5[7]=20 GOTO OUTDONE
!IF H5[7]=21 OR H5[7]=22 GOTO OUTDONE
! now in sordtype file
Key1$=" ",Key1$
Key1$=ordh5[7] using "##"
search #ch_sot,2,1;Key1$,R[2],E
if e goto OutDone ! not there - not allowed!
read #ch_sot,r[2],48;APMI;
IF APMI<>1 GOTO OUTDONE ! NOT A Y - no po for this ordtype
Clear List$[]
List$[0]=bsdel$,"POBUILT",fdel$
List$[1]="VENDID",fdel$,"POID",fdel$,"MESSAGE",fdel$
row=2
LET K5$=" ",K5$
K5$[1,6]=ORDH0[7] USING "######"
CHK_ROLLOOP: ! 
SEARCH #CH_ROL,3,1;K5$,R[5],e 
IF E GOTO CHKROLDONE
X2=K5$[1,6] \ IF X2<>ORDH0[7] GOTO CHKROLDONE
MAT READ #CH_ROL,R[5],8;ORDL3;
IF ORDL3[0]=1 GOTO CHK_ROLLOOP ! NO PRDGRP ON NON-STOCKS!!
if ordl3[1]=1 goto chk_rolloop ! updates stock - that is not mill
mat read #ch_rol,r[5],16;ordl4; ! rec/po/whse
if ordl4[3]<1 or ordl4[3]>99 or fra(ordl4[3]) let ordl4[3]=ordh4[2] ! whse check
mat read #ch_rol,r[5],140;l0$; ! prodcode
mat read #ch_rol,r[5],168;ordl7; ! quantity
if ordl7[2]<=0 goto chk_rolloop ! no order qty - ignore
if ordl4[2]<>0 goto chk_rolloop ! already on po - ignore
let k2$=" ",k2$
k2$[1,12]=l0$[1,12] ! prodwhse for prodgroup
k2$[13]=ordl4[3] using "##"
search #ch_prwh,2,1;k2$,r[3],e
if e goto chk_rolloop ! not found = no prodgrp!
mat read #ch_prwh,r[3],32;prw1;
mat read #ch_prwh,r[3],38;prw2;
mat read #ch_prwh,r[3],846;WHMISC2;
pgmlit=0
if whmisc2[0]>0 and whmisc2[0]<1000 ! if no prodgrp - it's not a millitem
	K3$=" ",k3$
	k3$=whmisc2[0] using "###" ! 3
	search #ch_pgp,2,1;k3$,r[4],e
	if not(e)
		read #ch_pgp,r[4],136;pgmlit;
	endif
endif
if pgmlit<>1 goto chk_rolloop ! not a mill item!
! made it through - store vendor/item for po create
vend=prw2[3]
if prw2[3]=0
	mat read #ch_prod,ordl4[0],156;b;
	if b[24] let vend=b[24]
endif
if vend<=0 goto chk_rolloop ! no vendor - NO PO!
let k3$=" ",k3$
let k3$=vend using "######"
let k3$[7,8]="  " ! ordl4[3] using "##" ! whse? - it's going direct!!
let k3$[9]=k5$ ! order/line key
search #ch_sort,4,1;k3$,r[5],e \ if e goto chk_rolloop ! already there - ignore
goto chk_rolloop
CHKROLDONE: ! ok now back through
numline=0;hvend=-1;source=361;vend=0
let k3$=" ",k3$
clear rstr$ ! used for line messages
rvndloop: ! 
search #ch_sort,3,1;k3$,r[5],e
if e goto rvldone
x2=k3$[1,6]
if x2<>hvend ! first in or new vend
! if existing - need totalling? YES
	if numline>0 ! at least one line - finish the po we're on
		webstr$=Str$(VEND),fdel$,Str$(H0[2]),fdel$,rstr$,fdel$
		list$[row]=webstr$
		row=row+1
		Read Record #ch_poh,Rec_poh;poh.; ! read what we got
		call calcpototals()
		if rec_poh>0
			Write Record #ch_poh,Rec_poh;poh.;
			clear parm[]
			Parm[0]=rec_poh
			Parm[1]=361 ! source
			Parm[2]=1 ! 1=entry
			Parm[9]=intco ! company #                                                                        
			 clear pchan[]
			pchan[0]=ctlc 
			pchan[1]=ch_poh
			pchan[16]=ch_vend! vendor file
			CALL "POFRGTCHG",pchan[],parm[]  
		endif
	endif ! done with curr po - now create new one
	vend=k3$[1,6] ! current/new vendor
	w1=ordh4[2] ! warehouse (from order header)
	gosub getolinedata ! get misc data for po header
	gosub Buildpohead ! build header
	hvend=k3$[1,6]
	numline=0 ! no lines yet
endif
! do the line
If not(PASS) goto rvndloop ! header failed - NO LINES!!!
clear pchan[]
	pchan[0]= ctlc ! cntrl file
	pchan[1]=ch_poh ! purchase order header  #60
	pchan[2]=ch_pol ! po lines #61
	pchan[3]=ch_roh ! order header #62
	pchan[4]=ch_prod ! product file #64
	pchan[5]=ch_prwh ! product warehouse #65
	pchan[6]=ch_sproddesc !  nonstock #66
	pchan[7]=ch_ccode ! unit of measure file #67
	pchan[8]=ch_rol ! order lines #68
	pchan[9]=ch_pom! po messages #69
	pchan[10]=ch_rom ! order message #70
	pchan[11]=ch_pogen ! po gen work #72
	pchan[12]=ch_deal ! deals #19
	pchan[13]=ch_cust ! customer file
	pchan[14]=ch_rot ! order total file
	pchan[15]=ch_alt ! alternate vendor
	clear sospec[]
	sospec[0]=rec_poh ! purchase order record #
	sospec[1]=OrdH0[7] ! sales order id #
	sospec[7]=0 ! flag to copy all lines and all message (we want only 1 line!)
	sospec[8]=UserRec ! rec_uac
	sospec[9]=intco ! control #
	msg$=""
	errtype=0
	! as we only want to create this one line - send info to posolinecopy
	!tmp$="1" ! we're only copying the one line
	!call dxset("ttlordline",tmp$) ! send numlines to copy (always just this one)
	x2=k3$[15,17]
	!call dxset("ordlinenum1",str$(X2)) ! order line number
	!call dxsave(0,"tmp/jcststsopo!")
	let sospec[18]=1;sospec[19]=x2 ! dxset not working?!
     call "posolinecopy.dl4",PChan[],sospec[],msg$,errtype,userid$
if errtype ! something amiss in copy (possibly STILL added the line!)
	let rstr$=rstr$+Msg$+"  "
Endif
numline=numline+1
goto rvndloop ! next mill/sort item
rvldone: ! finished
! if there's one in process - need totalling? YES
if numline>0 ! at least one line on current po - if none continue without
	webstr$=Str$(VEND),fdel$,Str$(H0[2]),fdel$,rstr$,fdel$
	list$[row]=webstr$
	row=row+1
	Read Record #ch_poh,Rec_poh;poh.; ! read what we got
	call calcpototals()
	if rec_poh>0
		Write Record #ch_poh,Rec_poh;poh.;
		clear parm[]
		Parm[0]=rec_poh
		Parm[1]=361 ! source
		Parm[2]=1 ! 1=entry
		Parm[9]=intco ! company #                                                                        
		 clear pchan[]
		pchan[0]=ctlc 
		pchan[1]=ch_poh
		pchan[16]=ch_vend! vendor file
		CALL "POFRGTCHG",pchan[],parm[]  
	endif
endif
List$[row]=esdel$ ! we are done
goto outdone

GetOLineData: ! reget line data (for poheader)
mat read #ch_rol,r[5],16;ordl4; ! rec/po/whse
if ordl4[3]<1 or ordl4[3]>99 or fra(ordl4[3]) let ordl4[3]=ordh4[2] ! whse check
mat read #ch_rol,r[5],140;l0$; ! prodcode
let k2$=" ",k2$
k2$[1,12]=l0$[1,12] ! prodwhse for prodgroup
k2$[13]=ordl4[3] using "##"
search #ch_prwh,2,1;k2$,r[3],e
if not(e)  ! not found = no prodgrp!
	mat read #ch_prwh,r[3],32;prw1;
	mat read #ch_prwh,r[3],38;prw2;
	mat read #ch_prwh,r[3],846;WHMISC2;
Else
	clear prw1[]
	clear prw2[]
	clear whmisc2[]
endif
Return

Buildpohead: !
	K15$ = Vend Using "######"
	Search #CH_Vend,2,1;K15$,R5,E
	If E
		ReturnStatus=0;Pass=0
		Message$="VENDOR NOT FOUND"
		Goto POHDone
	Endif
	let PONum=0
	Gosub L_1390 ! read & check
	If Not(PASS) Goto POHDone ! a problem found
			
	!List$[row]=Str$(Vend),fdel$,Str$(H0[2])
	!row=row+1!call AddToStr(e$,rstr$,List$[]) ! add droplist to string
POHDone: ! header built
Return
		! 
		ReturnStatus=1
		Message$="OK"

	OutDone: ! finished
	!close any files opened here!
	try close #ch_sort else rem
	try close #CH_PGP else rem
	try close #Ch_vend else rem
	try close #ch_poh else rem
	try close #ch_pol else rem
	try close #ch_VTag else rem
	Try close #ch_sot else rem
	Try close #Ch_Pom else rem
	Try close #ch_NStk else rem
	Try close #ch_edic else rem
	Try close #ch_posv else rem
	If p61$[136,136]="Y"
		Try close #ch_curr else rem
	endif
	if chan[1]<=0 
		try close #CH_Prod else rem
	endif
	if chan[2]<=0 
		try close #Ch_PrWh else rem
	endif
	if chan[3]<=0 
		try close #Ch_Wh else rem
	endif
	if chan[4]<=0 
		try close #Ch_Ccode else rem
	endif
	if chan[5]<=0 
		try close #Ch_Roh else rem
	endif
	if chan[6]<=0 
		try close #Ch_Rol else rem
	endif
	if chan[7]<=0 
		try close #Ch_Ros else rem
	endif
	if chan[8]<=0 
		try close #Ch_Rot else rem
	endif
	if chan[9]<=0 
		try close #CH_Rom else rem
	endif
	if chan[10]<=0 
		try close #ch_sproddesc else rem
	endif


Else
	include "src/callmainerrnet.inc"
end try
End ! the whole program

! start of subroutines

L_1390: Rem FOUND VENDOR
Pass=1
Gosub L_1660 ! read vendor
! L_1410: Gosub L_5200 \ Return ! checks so line
If Not(Pass) Return ! gosub L_1600

! NO OLD PO key
Goto L_2000

SET_STATUS: Rem  SET STATUS TO 95 ! was 91
Mat Read #ch_poh,V1,0;H0
U5$ = " ",U5$
U5$[1,2] = H0[0] Using "##"
U5$[3,8] = H0[2] Using "######";U5$[9] = ""
Search #ch_poh,5,1;U5$,R8,E \ If E Gosub ERR_SEARCH
Mat Read #ch_poh,R8,310;PH
Mat Read #ch_poh,R8,330;PO1
PH[4] = H0[0];PO1[8] = Userrec ! Spc(6)
H0[0] = 95
U5$[1,2] = H0[0] Using "##"
U5$[3,8] = H0[2] Using "######";U5$[9] = ""
Search #ch_poh,4,1;U5$,R8,E
If E Gosub ERR_SEARCH
Mat Write #ch_poh,R8;H0
Mat Write #ch_poh,R8,310;PH
Mat Write #ch_poh,R8,330;PO1;
S9[0] = A1[3] \ S9[1] = A1[2] \ S9[2] = 2
Goto L_8040
L_1600: Rem HEAD B
! Print 'MH'
! Print Using "###### :  ";@30,2;"VENDOR: ";C1[1];C$[1,30];'CL';
Return 
L_1660: Rem READ VNDR.REC.
Read #ch_vend,R5,0;C$
Mat Read #CH_Vend,R5,264;C1;
Mat Read #CH_Vend,R5,400;C2$;
Mat Read #CH_Vend,R5,554;M4;
Mat Read #ch_vend,r5,504;VCURRID;
K15$ = " ",K15$;K15$ = C1[1] Using "######"
M2$ = " ",M2$
Search #ch_VTag,2,1;K15$,R15,E \ If E Goto L_1780
Mat Read #ch_VTag,R15,314;M2$;
L_1780: Gosub L_8300 ! PO SHIPVIA
Return 
L_2000: Rem NEW PO
L_2010: !Print @0,5;"ENTER   #:new po number    <CR>: auto assign     ";'CE';
!Input ""S$  ! how do we do this?
S$="" ! always system! \ if PONum Let S$=Str$(PONum) ! sent one
If S$ = "" Gosub L_2500 \ Goto L_2100
N0 = S$
If N0 < 1 Or N0 > 99999 
	PONum=0 \ Goto L_2000
Endif
Gosub L_2600 \ Goto L_2100
!PONum=0 ! failed test
!Goto L_2010
pass=0;returnstatus=0
message$="PO number is ALREADY IN USE"
return ! fail it
L_2100: Rem SETUP HEADER RECORD
!Print @0,7;"Please wait . . .  ";'CE'; \ Signal 3,0
E = 2 \ Search #ch_poh,1,0;K5$,R8,E \ If E Gosub ERR_SEARCH
ST$ = " ",ST$;P4$ = " ",P4$
POH7[0] = 0;POH7[1] = 0
Gosub L_8200 ! set up fields
Mat Write #ch_poh,R8;H0
Mat Write #ch_poh,R8,24;H$
Mat Write #ch_poh,R8,106;H1$
Mat Write #ch_poh,R8,222;H3
Mat Write #ch_poh,R8,242;H4
Mat Write #ch_poh,R8,250;H8
Mat Write #ch_poh,R8,310;PH
Mat Write #ch_poh,R8,330;PO1
Mat Write #ch_poh,R8,350;PO3
Mat Write #ch_poh,R8,428;ST$
Mat Write #ch_poh,R8,442;P4$
Mat Write #ch_poh,R8,482;PO4
Mat Write #ch_poh,R8,504;PO5
Mat Write #ch_poh,R8,528;POH7;
Mat Write #ch_poh,R8,564;POFRT;
Mat Write #ch_poh,R8,592;POFRT$;
Mat Write #ch_poh,R8,598;PODisc;
mat write #ch_poh,r8,610;POSent;
mat write #ch_poh,r8,612;phcurrid;
mat write #ch_poh,r8,614;phcurrfact;  
Write #CH_Vend,R5,444;H0[3];
K5$ = H0 Using "##" \ K5$[3] = H0[2] Using "######"
Search #ch_poh,4,1;K5$,R8,E \ If E Gosub ERR_SEARCH
K5$ = H3[3] Using "######" \ K5$[7] = H0[2] Using "######"
Search #ch_poh,4,2;K5$,R8,E \ If E Gosub ERR_SEARCH
!S9[0] = R8 \ S9[2] = 1
!K2$ = W1 Using "##" \ K2$[3] = C1[1] Using "######"
Rec_poh=R8 ! for calls
pass=1 ! created/wrote POH
Goto L_8000
L_2500: Rem "======================= get next auto po #
NUMBERSKIP = 0
Read #1,20,94;N0
L_2520: N0 = N0 + 1
! Print Using "######";@55,5;N0;'CL';
Gosub L_2600 \ Goto L_2580
NUMBERSKIP = NUMBERSKIP + 1
If NUMBERSKIP >= 20 Goto L_2590 ! skipped over 20 po#'s give it up!
Goto L_2520
L_2580: Write #1,20,94;N0;
Return 
L_2590: Rem PROBLEMS- GIVE WARNING & EXIT
!Print 'RB CR CR CL';"WARNING: STARTING WITH PO NUMBER ";N0 - NUMBERSKIP + 1;"THERE ARE A NUMBER OF PO'S ALREADY"
!Print 'CL';"IN USE(AT LEAST 10 IN A ROW)!  THIS COULD INDICATE CROSSING OLD PO'S,"
!Print 'CL';"OR DEBIT MEMOS, OR OTHER ISSUES.  IF YOU HAVE ANY QUESTIONS OR NEED"
!Print 'CL';"HELP PURGING OLD PO'S(IF APPROPRITE) PLEASE CONTACT UNIVERSAL."
!Input "     PRESS <CR> TO EXIT PROGRAM "J4$
ReturnStatus=0;Pass=0
Message$="PO NUMBERS ARE ALREADY IN USE"
Return ! Goto OUTEND
L_2600: Rem LOOK FOR PO EXISTING
U5$ = " ",U5$
For X = 1 To 27 ! need 1-16 & 90-99
  X3 = X
  If X > 17 Let X3 = X + 72
  U5$[1,2] = X3 Using "##"
  U5$[3] = N0 Using "######"
  E = Spc(9)
  Search #ch_poh,2,1;U5$,V1,E \ If E > 1 Gosub ERR_SEARCH
  If E Goto L_2700
  Return 1
L_2700: Next X
Return 

U5$ = X2 Using "&&&&&&&"
P$[1,2] = U5$[4,5]
P$[3,3] = "/"
P$[4,5] = U5$[6,7]
P$[6,6] = "/"
P$[7,8] = U5$[2,3]
Return 
L_8000: Rem CHAIN TO NEXT PROGRAM
Pass=1 ! we created a po
L_8040: ! 
Return ! return to do lines!


L_8200: Rem SETUP VARIABLES
H0[0] = 1 \ H0[1] = R5 \ H0[2] = N0
X2 = (Tim(8) * 10000) + (Tim(9) * 100) + Tim(10)
H0[3] = X2 \ H0[4] = X2 \ H0[5] = X2 \ PH[2] = 0 \ PH[4] = 1
PO1[6]=PRW1[2];PO1[8] = 0 ! UserRec ! Spc(6)
H$ = " ",H$;H1$ = " ",H1$;H3[0] = 0;H3[1] = 0;H3[2] = 0
H3[4] = Ordh0[7] \ H4[0] = 1 \ H4[2] = 0 \ H4[3] = 0
H4[1] = W1 \ H3[3] = C1[1]
H$[15,24] = C2$[1,10] \ H$[25,34] = C2$[11,20]
H$[35,48] = C2$[21,34];H$[49,58] = C2$[35,44]
!If custom_Customer$="ACME"
!	let h$[59,61]="NO "
!Else
!	H$[59,61] = "YES"
!Endif
!IF P61$[62,62]="N" 		!! default confirmed to N
	LET H$[59,61]="NO " ! this is auto generate - it's not confirmed!
	h0[5]=0
!endif
! Ship to - is direct to customer
!Mat Read #Ch_Wh,H4[1] - 1,4;H1$;
Mat Read #ch_ros,ordh0[2],8;H1$; ! ship to address
For K = 1 To 112 \ If H1$[K,K] < " " Let H1$[K,K] = " " \ Next K
Read #ch_ros,ordh0[2],126;P4$[1,15]; ! country
let pofrt$=" ",pofrt$
PO4[0] = M4[1]
gosub l_6100: ! send it edi?
let poh.currid=0
let poh.currfact=0
if p61$[136,136]="Y" and vcurrid>0
	keycurr$ = " ",keycurr$                   
	keycurr$[1,4] = vcurrid Using "####"  
	Search #ch_curr,2,1;keycurr$,rec_curr,e   
	If e <> 0                                 
		poH.currfact = 0 
		poH.currid=0
	Else                                      
		Read Record #ch_curr,rec_curr;curr.; 
		let poH.currid=vcurrid
		let poH.currfact=curr.ExcRate
	endif
else
	let poH.currfact=0
	let poH.currid=0
endif
let phcurrid=poh.currid
let phcurrfact=poh.currfact=0
Return 
L_8300: Rem READ SHIP VIA
If M4[1] <= 0 Return 
If M4[1] < 1 Or M4[1] >= Chf(ch_posv) Return 
Mat Read #ch_posv,M4[1],0;SHIPVIA$;
SHIPVIA$ = SHIPVIA$ + "           "
C2$[1,10] = SHIPVIA$[1,10]
Return
L_6100: ! "================================= edi interface
IF NOT(EDII) RETURN 
IF ST$[1,1]<>" " AND ST$<>"" RETURN  !"already been setup for edi
LET K51$=" ",K51$;K51$[1,8]=H3[3] USING "VN######" !"vendor #
SEARCH #ch_edic,2,1;K51$,R51,E \ IF E>1 GOSUB Err_Search:
IF E GOTO L_6190: !"vendor is not a edi trading partner
MAT  READ #ch_edic,R51,8;TP;
IF NOT(INT(ABS(TP[850]))) GOTO L_6190: ! " not set up to send p.o.s
LET ST$=" ",ST$;ST$[1,1]="n"
L_6190: RETURN 
OUTEND: Rem EXIT
S9[0] = 0
Close 
! Chain "MX000"
End 

ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
call programdump("tmp/sopocrtese!","")
returnstatus=0
message$=msg$
goto OutDone ! alt - send user message
Error 11000
End
! subs/functions from serppoh to do other things on new po
!--------------------------------------------------------------------
Sub CalcPOTotals() 
                                                 	  
! record layout poh. read before the call!
try
                                                    
!iF poh.status<>7 !LET poh.TotAmt=0 ! "only recalc if po is open              
!poh.TotWeight=0
NumLines=0                                                    
!poh.TotCubes=0
!poh.TotPieces=0
totordamt=0
totrordqty=0
totordwgt=0
totordcube=0
let totrcvdamt=0
let totrcvdqty=0
let totrcvdwgt=0
let totrcvdcube=0
LET VALUE_RECV=0;WEIGHT_RECV=0;CUBES_RECV=0;QTY_RECV=0                    
let keypol$=" ",keypol$
let keypol$[1,6]=poh.PurchaseOrder using "######"
let keychk$=" ",keychk$
let keychk$[1,6]=keypol$[1,6]
let mode$=">"
let dir=1
Do
	Rec_pol=FileGetPoline(e$,Ch_Pol,mode$,dir,keypol$,pol.)
	if rec_pol<0 exit do
	if keypol$[1,6]<>keychk$[1,6] exit do
	! unpack flags                  
	LET X2=pol.flags 
	FOR K=0 TO 11                           
		LET FLAGS[K]=SGN(FRA(X2/2)) \ LET X2=INT(X2/2) 
	NEXT K                                                                             
	if not(flags[2]) ! not a message line                                                               
		if not (flags[0]) ! stock item
			read record #ch_prod,pol.ProdDescRec;prod.;
		else ! nonstock item
			read record #ch_nstk,pol.ProdDescRec;nstk.;
			clear prod.
			let rec_nstk=pol.ProdDescRec
			read record #ch_nstk,rec_nstk;nstk.;
			clear prod.                                                           
			prod.baseum=nstk.BaseUM ! nsd1[2]
			prod.um2=nstk.CostUM !    nsd1[3]
			prod.um3=nstk.PurchUM !nsd1[4]
			prod.um4=nstk.StockUM !nsd1[5]
			prod.UMStkDefault = nstk.StockUM ! NSD1[5]
			prod.UMPurchDefault=nstk.PurchUM ! NSD1[4]
			prod.UMCostDefault= nstk.CostUM  ! NSD1[3]
			prod.UM2Fact=nstk.CostFact !nsd3[3]
			prod.UM3Fact=nstk.POFact !nsd3[4]
			prod.UM4Fact=nstk.StkFact !nsd3[5]                                             
			prod.LbsFact=nstk.WgtFact !NSD3[7]
			prod.LbsUnit=nstk.Wgt  !NSD3[6]  
		endif		
		! calculate totals
		NumLines=NumLines+1
		if source=371 or source=381
			if pol.currqtyrcvd<>0
			
				let cnvta=pol.currqtyrcvd
				If source=381 let cnvta=pol.currqtyrcvd+pol.freeqtyrcvd
				let amount=0
				if cnvta<>0
					CNVTU[0] = 0;CNVTU[1] = prod.UMPurchDefault;CNVTU[2] = 1         
					Amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PRod.)
					totrcvdqty=totrcvdqty+amount
				endif                          
				lineqty = pol.currqtyrcvd-pol.freeqtyrcvd 
				If source=381 let lineqty=pol.currqtyrcvd
				lineum = pol.CostUM                                                 
				linecost = pol.netcost                                              
				lineextamt = 0                                                      
				LbsUnit = pol.LbsUnit                                               
				LbsFact = pol.LbsFactor  
				if lineqty<>0 and linecost<>0 
					Call CalcExtAmt(lineqty,lineum,linecost,lineextamt,LbsUnit,LbsFact) 
					totrcvdamt = totrcvdamt+ lineextamt
				endif
				lineqty = pol.currqtyrcvd
				If source=381 let lineqty=pol.currqtyrcvd+pol.freeqtyrcvd
				tmp3 = calcextwgt(lineqty,pol.LbsUnit,pol.LbsFactor) 
				totrcvdwgt=totrcvdwgt+tmp3
				tmp3 = calcextcube(lineqty,pol.cbfunit,pol.cbffactor)
				totrcvdcube=totrcvdcube+tmp3
			endif
		endif
		if source=370
			let recv_qty=0; recv_qty1=0
			if poh.Status<>5 and poh.OldStatus<>5                                               
				RECV_QTY1=(pol.QtyRcvdToDate-pol.Totfreeqtyrcvd);RECV_QTY=pol.QtyRcvdToDate
			else
				ReCV_QTY1=(pol.CurrQtyRcvd-pol.Freeqtyrcvd);RECV_QTY=pol.CurrQtyRcvd	
			endif                               
                                   
					
			let cnvta=RECV_QTY ! with free goods
			let amount=0
			if cnvta<>0
				CNVTU[0] = 0;CNVTU[1] = prod.UMPurchDefault;CNVTU[2] = 1         
				Amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PRod.)
				totrcvdqty=totrcvdqty+amount
			endif  
			lineqty = RECV_QTY1 ! without the free goods
			lineum = pol.CostUM                                                 
			linecost = pol.netcost                                              
			lineextamt = 0                                                      
			LbsUnit = pol.LbsUnit                                               
			LbsFact = pol.LbsFactor  
			if lineqty<>0 and linecost<>0 
				Call CalcExtAmt(lineqty,lineum,linecost,lineextamt,LbsUnit,LbsFact) 
				totrcvdamt = totrcvdamt+ lineextamt
			endif
			lineqty = recv_qty ! with free goods
			tmp3=0
			if lineqty<>0
				tmp3 = calcextwgt(lineqty,pol.LbsUnit,pol.LbsFactor) 
			endif
			totrcvdwgt=totrcvdwgt+tmp3
			tmp3=0
			if lineqty<>0
				tmp3 = calcextcube(lineqty,pol.cbfunit,pol.cbffactor)
				totrcvdcube=totrcvdcube+tmp3
			endif
		endif
		! order totals ! 
		lineum = pol.CostUM                                                 
		linecost = pol.netcost                                              
		lineextamt = 0                                                      
		LbsUnit = pol.LbsUnit                                               
		LbsFact = pol.LbsFactor
		If poh.status=7
			let lineqty=pol.QtyOrd
		else
			let lineqty=pol.QtyShip 
		endif
		if lineqty<>0 and linecost<>0 
			Call CalcExtAmt(lineqty,lineum,linecost,lineextamt,LbsUnit,LbsFact) 
			totordamt = totordamt+ lineextamt
		endif
		If poh.status=7
			let lineqty=pol.QtyOrd+POL.FreeGoods 
		else
			let lineqty=pol.QtyShip+pol.FreeGoods-Totfreeqtyrcvd 
		endif
		let amount=0
		let cnvta=lineqty
		if cnvta<>0
			CNVTU[0] = 0;CNVTU[1] = prod.UMPurchDefault;CNVTU[2] = 1         
			Amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PRod.)
			TotOrdQty=TotOrdQty+amount
		endif
		tmp3 = calcextwgt(lineqty,pol.LbsUnit,pol.LbsFactor) 
		totordwgt=totordwgt+tmp3
		tmp3 = calcextcube(lineqty,pol.cbfunit,pol.cbffactor)
		totordcube=totordcube+tmp3
	endif
Loop
if poh.status=7 or poh.status=14 ! close po or debit memo
	let totordamt=poh.totamt
	let totordwgt=poh.totweight
	let totordcube=poh.totcubes
	let totordqty=poh.TotPieces
else
	if source=371 or source=381
		let poh.totamt=totrcvdamt
		let poh.totweight=totrcvdwgt
		let poh.totcubes=totrcvdcube
		let poh.totpieces=totrcvdqty
	else
		if source<>370 ! not inquiry
			let poh.totamt=totordamt
			let poh.totweight=totordwgt
			let poh.totcubes=totordcube
			let poh.totpieces=totordqty
		endif
	endif
endif
	
else
	include "src/callsuberr.inc"
end try
end sub ! calcpototals
!--------------------------------------------------------------------
Sub CalcExtAmt(lineqty,lineum,linecost,lineextamt,lbsunit,lbsfact)

! bring extended amount to costing unit of measure factors
! cost should be in base 
 Try
	 Dim 1%,CNVTU[2],FLAG,e
	dim 3%,tmpqty,tmpcost
	DIM 3%,CNVTA
	lineextamt=0
	if lineqty=0 exit sub ! no qty extension will be zero
	if linecost=0 exit sub ! no cost exension will be zero
	If lineum=-2 ! lot costing 
		let lineextamt=linecost
		exit sub
	endif
	if lineum>=0                                                   
		LET CNVTA=lineqty
		let CNVTU[0]=0 ! currently in base
		let CNVTU[1]=lineum ! unit of measure
		let CNVTU[2]=5 
		Amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PRod.)
		let tmpqty=amount
                                                
	                                                                   
		LET CNVTA=linecost
		CNVTU[0]=0
		CNVTU[1]=lineum
		CNVTU[2]=2 
		Amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PRod.)                                                                  
		LET tmpcost=AMOUNT                                                      
		LET lineextamt=FNR(tmpqty*tmpcost)
		exit sub
	endif
	
	IF lineum=-1 or lineum=-3! cwt 
		let tmpqty=lineqty
		LET CNVTA=linecost
		CNVTU[0]=0
		CNVTU[1]=lineum
		CNVTU[2]=2 
		Amount = ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PRod.)                                                                  
		LET tmpcost=AMOUNT                              
		if lineum=-1 ! cwt
			LET lineextamt=FNR(tmpcost*(lbsunit*tmpqty/lbsfact)/100)
			exit sub
		endif
		if lineum=-3 ! per lb
			LET lineextamt=FNR(tmpcost*(lbsunit*tmpqty/lbsfact))
			exit sub
		endif
	endif
 else
    include "src/callsuberr.inc"
  end try
end sub ! CalcExtAmt
!
!--------------------------------------------------------------------
 Function CalcExtWgt(lineqty,lbsunit ,lbsfact)
 ! send over the qty to calc, lbs per unit, lbs per factor
  Try
	
	Dim 3%,extwgt

	extwgt=0
	if lbsfact<>0
		let extwgt=fnr(lbsunit*lineqty/lbsfact)
	endif
 
  else
    include "src/callsuberr.inc"
  end try
end Function ExtWgt ! CalcExtWgt 
 !--------------------------------------------------------------------
 Function CalcExtCube(lineqty,cubeunit ,cubefact)
 ! send over the qty to calc, cube per unit, cube per factor
  Try
	
	Dim 3%,extcube

	extcube=0
	if cubefact<>0
		let extcube=fnr(cubeunit*lineqty/Cubefact)
	endif
 
  else
    include "src/callsuberr.inc"
  end try
end Function ExtCube ! CalcExtCube
!--------------------------------------------------------------------