! >>> Program 366a
!
! description  Purchasing Order Auto-Generate Print Part 2
!
! loadsave -w -n 100,10 -o prog/dxport/366a.dl4 src/366a.src
!
! ERP Scheduler enabled
!
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem PO366A  P.O. AUTO-GENERATE LISTING REC TRANSFER LISTING
Rem AUTHOR: D.DEVITO   OCT 21, 1996
Rem LAST UPDATE:  6/7/96 - jlp added whse selected to header
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG  9, 2006  13:44:13
Rem /w2/papermaster/r2005//usr/acct/dave/work/custom/spicer.rev9/po366a.src (univ2) [dave] {13281}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!              01/15/97 cct99009- line 2410 getting vdr from wrong place
! ----------------  notes for upgrade to rev9 for Spicer  ---------------------
!   note:  program is custom because it uses an array "A5[99]" in spogenwrk &
!           also runs off of the sort file
!   05/03/06 vst cct203555 - used current custom prog & added in code for:
!   04/09/1997 - date compares julian
!   04/20/1999 - zyc cct122118 be49@2000 searched on the wrong file
! AS THIS IS A COMPLETLY DIFFERENT FORMAT - NO XML OPTION !!!
! -----------------------------------------------------------------------------

Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate,programdump
! Option Default Dialect IRIS1
Declare External Sub ERPCronSuccess

Com 1%,PFU1[20],CNVTU[2],UN[2],WH
Com 2%,C4[8],CUST$[142],R1[5],R1$[20],R2$[20]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[15],BASE,FIELD,PRODREC,AMOUNT
try ! main try
Dim P1$[156],A$[20],CALCSRC$[36],EXCTYPE$[16]
Dim 1%,A2[2],OLL3[3],UN[2],EUN[2],DL1[6],M2[2],OLL3[3],PW_W1[3],J9[2]
Dim 2%,B1[24],DL2[4],PC_DATE,HA3[2],OLL2[1],W7[14],A4[1]
Dim 2%,DT3[1],JPCDATE,JDATE[1]
Dim 3%,T2[17],P1[33],P2[7],A1[5],W3[24],UNF[6],WEIGHT,DL3[3],PF_A1[7],M1[117],OLL5[3]
Dim 3%,J1,A5[99]
Dim J$[40],J0$[10],J1$[40],J2$[20],J4$[40],J5$[70],J7$[70],J8$[8],J9$[40],K6$[50],K12$[50]
Dim P9$[50],M2$[72],M1$[200],K11$[50],P61$[256]
Dim 1%,F,X1,2%,X2,3%,J,X3,OLL6$[60],OLS3$[33],OLL2$[12],PUNIT$[4]
Dim J3$[30],K1$[50],V$[30],X$[10],DL$[22],K9$[50]
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[200],message$[200]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
! as it's NOT RUN TO XML - reget needed items
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Read #1,3;J3$;
Read #1,3,172;PC_DATE;
Read #1,0,100;J8$;
X2 = PC_DATE \ Gosub L_7820 \ X2 = 0
If X2 Let JPCDATE = X2 Else Let X2 = Tim(6)
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
J7 = 0
try
	HJ9 = Chf(0)
else
	Let J7 = Spc(8)
end try
If J7 If J7 <> 49 error j7
HJ9 = 54 !\ If J7 Let HJ9 = 18
CALCSRC$ = "EOQI/CSEAS/UARBM/M"
EXCTYPE$ = "Y TWS RCSLLBX FZ"
WHSE_HOLD = -99;J1 = 99
!Print @0,21;"PRINTING TRANSFER LISTING , PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
K1$ = " ",K1$
L_2000: Search #9,3,1;K1$,R2,E
If E Goto L_9100
X1 = K1$[1,2]
WHSE = X1
If WHSE_HOLD = -99 Let WHSE_HOLD = WHSE
If WHSE_HOLD <> WHSE Let J1 = 99 \ WHSE_HOLD = WHSE
Mat Read #2,R2,0;A$;
Mat Read #2,R2,20;A1;
Mat Read #2,R2,56;A2;
Mat Read #2,R2,92;A4;
Mat Read #2,R2,140;A5;
If A2[2] Goto L_2000
Mat Read #3,A1[0],0;P1$;
Mat Read #3,A1[0],156;B1;
Mat Read #3,A1[0],256;A;
Mat Read #3,A1[0],460;PF_A1;
Mat Read #3,A1[0],460;P2;
Mat Read #3,A1[0],512;PFU1;
Mat Read #3,A1[0],554;PFU2;
Gosub L_6000
If A2[2] If NOWHSE Goto L_2000
X2 = A$[3,8] \ If X2 = V9 Goto L_2460
V9 = X2 \ J$ = V9 Using "######"
Search #4,2,1;J$,R4,E \ If E > 1 error 11000
!Gosub L_6800 ! mins not used!
V$ = "** NOT ON FILE **" \ If Not(E) Read #4,R4;V$;
L_2460: Gosub L_5800
WEIGHT = (FNR(A[6] * ((A1[3] + FREE_QTY) / A[5])))
If PF_A1[3] Let CUBE = (FNR(B1[23] * ((A1[3] + FREE_QTY) / PF_A1[3]))) Else Let CUBE = 0
Gosub L_8000
EXT_COST = NET_COST * A1[3]
Gosub L_5000
TOT_QTY = TOT_QTY + A1[3] + FREE_QTY
TOT_WEIGHT = TOT_WEIGHT + WEIGHT
TOT_CUBE = TOT_CUBE + CUBE
TOT_COST = TOT_COST + EXT_COST
Goto L_2000

L_5000: Rem PRINT LINE
Print #0;P1$[140,151]; Tab 13;P1$[9,35]; Tab 41;PUNIT$;
Print #0; Using "######.##"; Tab 46;PO_COST;
Print #0; Using "-------#.##"; Tab 57;(W3[0] - W3[2]);
Print #0; Using "-------#.##"; Tab 70;SURPLUSE;
Print #0; Using "-------#.##"; Tab 83;TRNS_QTY;
Print #0; Tab 96;"____________________";
Print #0;"" \ J1 = J1 + 1
Print #0; Tab 13;P1$[63,92];
Print #0;"" \ J1 = J1 + 1 \ Return 
L_5800: Rem HEADINGS ROUTINE
If J1 < HJ9 Return 
!If J2 If J7 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If Not(J7) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 11
If Not(J7) Print #0;"\15\";
Print #0; Tab 10;J8$; Tab (64 - Len(J3$) / 2);J3$; Tab 120;"PAGE";J2;"\15\"
Print #0; Tab 41;"PURCHASE ORDER AUTO-GENERATE TRANSFER WORKSHEET"
Print #0; Using "##"; Tab 55;"FROM ";WHSE;" TO WAREHOUSE ";R1[4]
Print #0; Tab 85;"RECOMENDED"
Print #0;"PRODUCT CODE DESCRIPTION";
Print #0; Tab 41;"U/M"; Tab 48;"PO COST"; Tab 59;"AVAILABLE"; Tab 72;"SURPLUS"; Tab 85;"TRANS QTY";
Print #0;""
Return 
L_6000: Rem SPROD WHS
NOWHSE = 0
K6$ = P1$[140,151]
K6$[13,14] = WHSE Using "##"
Search #5,2,1;K6$,R6,E
If E Let NOWHSE = 99 \ Return 
Mat Read #5,R6,32;PW_W1;
Mat Read #5,R6,78;W3;
Mat Read #5,R6,696;W7;
Return 
!TAB1 = 18
!Print #0; Tab 8;"MINIMUMS : ";
!If M1[0] Print #0; Using "$$,$$$,$$#.## "; Tab TAB1;"$ AMOUNT:";M1[0]; \ TAB1 = TAB1 + 18
!If M1[1] Print #0; Using "##,###,###.## "; Tab TAB1;"WEIGHT:";M1[1]; \ TAB1 = TAB1 + 18
!If M1[2] Print #0; Using "##,###,###.## "; Tab TAB1;"CUBE:";M1[2]; \ TAB1 = TAB1 + 18
!If M1[3] Print #0; Using "##,###,###.## "; Tab TAB1;"UNITS:";M1[3];
!Print #0;" "
!Return 
!Print #0; Using "###### "; Tab 2;"TOTALS FOR VENDOR ";V9;V$;
!Print #0; Using "######.## "; Tab 81;"REORDER"; Tab 90;TOT_QTY; Tab 100;TOT_WEIGHT;
!Print #0; Using "######.## "; Tab 110;TOT_CUBE; Tab 120;TOT_COST
!J1 = J1 + 1
!SHORT = 0
!If M1[3] If TOT_QTY < M1[3] Let SHORT = 99
!If M1[2] If TOT_CUBE < M1[2] Let SHORT = 99
!If M1[0] If TOT_COST < M1[0] Let SHORT = 99
!If M1[1] If TOT_WEIGHT < M1[1] Let SHORT = 99
!If SHORT Print #0; Tab 71;"MINIMUMS SHORT BY";
!If M1[3] If TOT_QTY < M1[3]
!  Print #0; Using "######.##"; Tab 90;(M1[3] - TOT_QTY);
!End If 
!If M1[1] If TOT_WEIGHT < M1[1]
!  Print #0; Using "######.##"; Tab 100;(M1[1] - TOT_WEIGHT);
!End If 
!If M1[2] If TOT_CUBE < M1[2]
!  Print #0; Using "######.##"; Tab 111;(M1[2] - TOT_CUBE);
!End If 
!If M1[0] If TOT_COST < M1[0]
!  Print #0; Using "######.##"; Tab 120;(M1[0] - TOT_COST);
!End If 
!Print #0;"" \ J1 = J1 + 1
!If M1[3] If TOT_QTY If TOT_QTY < M1[3]
!  Print #0; Using " ###.###%"; Tab 90;((M1[3] - TOT_QTY) / TOT_QTY) * 100;
!End If 
!If M1[1] If TOT_WEIGHT If TOT_WEIGHT < M1[1]
!  Print #0; Using " ###.###%"; Tab 100;((M1[1] - TOT_WEIGHT) / TOT_WEIGHT) * 100;
!End If 
!If M1[2] If TOT_CUBE If TOT_CUBE < M1[2]
!  Print #0; Using " ###.###%"; Tab 111;((M1[2] - TOT_CUBE) / TOT_CUBE) * 100;
!End If 
!If M1[0] If TOT_COST If TOT_COST < M1[0]
!  If TOT_COST Print #0; Using " ###.###%"; Tab 120;((M1[0] - TOT_COST) / TOT_COST) * 100;
!End If 
!Print #0;"" \ J1 = J1 + 1
!Print #0;"" \ J1 = J1 + 1
!TOT_QTY = 0;TOT_WEIGHT = 0;TOT_CUBE = 0;TOT_COST = 0
!Return 
L_6500: Rem LOOK FOR DEALS
DOLLOR = 0;PERCENT = 0;FREE_QTY = 0
CNVTA = A1[3];CNVTU[0] = PFU1[10];CNVTU[1] = 0;CNVTU[2] = 1
Gosub L_20000
K12$ = " ",K12$
K12$[1,6] = V9 Using "######"
K12$[7,18] = P1$[140,151]
K12$[19,27] = 999999999 - (AMOUNT + 1) Using "#########"
L_6570: Search #10,3,1;K12$,R12,E
If E Goto L_6790
X2 = K12$[1,6] \ If X2 <> V9 Goto L_6790
If K12$[7,18] <> P1$[140,151] Goto L_6790
Mat Read #10,R12,0;DL2;
Mat Read #10,R12,20;DL1;
Mat Read #10,R12,34;DL3;
X2 = DL2[1] \ Gosub L_7820 \ X2 = 0
JDATE[0] = X2
X2 = DL2[4] \ Gosub L_7820 \ X2 = 0
JDATE[1] = X2 \ If DL2[4] = 999999 Let JDATE[1] = DL2[4]
If JPCDATE < JDATE[0] Or (DL2[4] And JPCDATE > JDATE[1]) Goto L_6570
If DL1[1] = 1 Let PERCENT = DL3[0]
If DL1[1] = 2
  CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 2
  Gosub L_20000
  DOLLOR = AMOUNT
End If 
If DL1[1] = 3
  CNVTA = DL3[2];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
  Gosub L_20000
  WITH_QTY = AMOUNT
  CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
  Gosub L_20000
  FREE_QTY = Int(A1[3] / WITH_QTY) * AMOUNT
End If 
L_6790: Return 
L_6800: Rem GET VEND MINS (NOT USED!)
For X = 0 To 17 \ M1[X] = 0 \ Next X
K11$ = V9 Using "######"
Search #11,2,1;K11$,R11,E
If E Goto L_6890
Mat Read #11,R11;M1$;
Mat Read #11,R11,200;M2;
Mat Read #11,R11,206;M1;
Mat Read #11,R11,314;M2$;
If P61$[63,63] = "Y" ! "check vend/whse mins
  X = 0
  Call "POVWMIN.dl4",V9,R1[4],M1[],J$,X,e$,rstr$,intCO
End If 
If M1[0] Let DOLFLG = 1 Else Let DOLFLG = 0
L_6890: If M1[1] Let WTFLG = 1 Else Let WTFLG = 0
If M1[3] Let UNFLG = 1 Else Let UNFLG = 0
If M1[2] Let CBFLG = 1 Else Let CBFLG = 0
Return 
 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 

L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
if x2<=0 return
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 

L_8000: Rem CONVERT
If W7[12] <> 6 Let SURPLUSE = (W3[0] - W3[2]) - (W3[5] + W3[11])
If W7[12] = 6 Let SURPLUSE = (W3[0] - W3[2]) - W3[4]
CNVTU[0] = 0
CNVTU[1] = PFU1[10]
CNVTU[2] = 1
For X = 0 To 6
  If X = 3 Or X = 4 Goto L_8090
  CNVTA = W3[X]
  Gosub L_8900
  W3[X] = AMOUNT
L_8090: Next X
CNVTA = SURPLUSE \ Gosub L_8900
SURPLUSE = AMOUNT
CNVTA = A5[WHSE] \ Gosub L_8900
TRNS_QTY = AMOUNT
For X = 1 To 5
  CNVTA = A1[X]
  Gosub L_8900
  A1[X] = AMOUNT
Next X
If PFU1[10] Mat Read #8,PFU1[10],10;PUNIT$;
If PFU1[10] = -1 Let PUNIT$ = " CWT"
If PFU1[10] = -3 Let PUNIT$ = "LB  "
Gosub L_6500
CNVTU[0] = 0
CNVTU[1] = PFU1[10]
CNVTU[2] = 2
If P9$[32,32] = "Y" And W3[16] > 0 Let CNVTA = W3[16] Else Let CNVTA = B1[10]
Gosub L_8900
PO_COST = AMOUNT
NET_COST = PO_COST - (PO_COST * (PERCENT / 100)) - DOLLOR
Return 
L_8900: Rem UNIT CONVERSION RETURNS AMOUNT
Gosub L_20000
Return 
OUTEND: Rem EXIT PROGRAM
!Print 'CS' \ Close 
!Chain "MX000"
	call ERPCronSuccess()
End
L_9100: Rem END OF THIS RANGE
!!If J7 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
End 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: !
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ error 11000
AMOUNT = CNVTA
L_20160: Return 
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1];PFU1[13] = UN[0]
PFU1[16] = EUN[0];PFU1[17] = EUN[0];PFU1[18] = UN[0]
PFU1[19] = UN[0]
PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
Return 
!

else ! main try
! dx replace entire error routine
include "src/callmainerrnet.inc"
End try 
