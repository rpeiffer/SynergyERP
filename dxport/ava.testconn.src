Rem AVA.TESTCONN
!
! loadsave -w -n 100,10 -o prog/dxport/ava.testconn.dl4 src/ava.testconn.src
!
Rem  Copyright (c) 2016 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!
include "src/copyright.inc" ! dx
!
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare Intrinsic Sub FindF,InpBuf,String,Time,VerifyDate
declare intrinsic function FindChannel
! Option Default Dialect IRIS1
Rem AVA.TESTCONN.src - Test to see if connection can be made
Rem 53250
Rem file name is now a template for a ping of the Avalara server

If Err 0 Gosub ERR_TRAP
Enter CONNSTAT
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim WRKLINE$[1000],TMPLINE$[1000],VAR$[10],WORK$[1000],TEMP$[1000]
Dim FLE$[30],RETVAL$[512],AVAACCTNO$[20],AVALCKEY$[16],DIRTO$[64]
Dim AVATID$[20],S1$[118],S2$[20],A1$[142],A2$[30],A3$[22],L1$[20]
Dim S3$[33],K1$[64],K2$[64],K3$[64],K4$[64],XMLFLE$[80],TMPFLE$[30]
Dim X$[20],VARNM$[60],LOGFNM$[50],SPACES$[200],TEXNO$[20]
Dim FAULTSTRING$[256],INXMLFLE$[128]
Dim 1%,X,X1[9],COID,CH_CNTRL,CH_CUST,CH_ROL,CH_ROS,CH_ROT,CH_ROL,CH_INFLE
Dim 1%,L3[3],S2[1],H4[2],TCB,CH_ROH,CH_TAX,POS0,POS1,POS2,POS3,CH_DTL
Dim 1%,CH_AVATRNS,TTLLNS,LDLN,LNNO,SCR,CREDIT,RTAX,FLEFND,CCHAN[10]
Dim 1%,FOUND,BADDATA,RCOMMIT,RCANCEL,RESPFAULT,BADORD,RLINE
Dim 2%,X2[9],H0[12],MCODE[9],L4[3],H6[8],H5[16]
Dim 3%,X3[9],SRN[5],T2[25],MCHARGE[9,1],L5[3],L7[12]
Dim 3%,ORDREC,R[99],TAXAMT,E,H
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim WebStr$[256],msg$[100],message$[300],RSTR$[500]
SPACES$ = " ",SPACES$
CONNSTAT = 0 ! so far no good
returnstatus=1;message$="OK"
! Print @0,22;'CE';"TESTING CONNECTION TO AVALARA, PLEASE WAIT";
CHNL = 97 \ Gosub GETCHAN
If Err 0 Gosub ERR_TRAP ! getchan changes to err_escape:?
If CHNL > 1 ! valid channel
  Call "progdflt","AVA","",CHNL,RETVAL$
  If RETVAL$[1,5] = "@@@@@" Let RETVAL$ = " ",RETVAL$
  AVAACCTNO$ = RETVAL$[1,20] ! "customer id
  AVALCKEY$ = RETVAL$[21,36] ! "licensekey
  DIRTO$ = RETVAL$[37,101] ! "send file to
  LOGFNM$ = RETVAL$[102,139] ! "log file name
Else ! "NO DEFAULTS!?
  returnstatus=0;message$="NO DEFAULTS DEFINED!"
  !Signal 3,30
  Goto OUTDONE
End If 
AVAACCTNO$=Trim$(AVAACCTNO$)
AVALCKEY$=Trim$(AVALCKEY$)
DIRTO$=Trim$(DIRTO$)
If AVAACCTNO$ = "" Or DIRTO$ = "" ! "NEED THESE!! Or AVALCKEY$="" OR
  !returnstatus=0;message$="MISSING DEFAULT VALUES!"
  returnstatus=9;message$="MISSING DEFAULT VALUES!" ! per 60477 - if not set-up allow accept
  !Signal 3,30 ! VERY DANGEROUS BUT PIEDMONT IS USING ON LEARN BUT NOT LIVE!
  Goto OUTDONE
End If 
LOGFNM$=Trim$(LOGFNM$)
If LOGFNM$ = "" ! no name defined - hardcode default name
  LOGFNM$ = "files/1/avataxout.log"
Else ! see if set for dl4
  IF Logfnm$[1,1]<>"/" and LOGFNM$[1,6]<>"files/" ! NEEDS THIS ON DL4!!
	TEMP$="files/"+logfnm$
	logfnm$=temp$ ! MUST START WITH files/ if to a directory!
  Endif
End If 
If DIRTO$ = "" Or DIRTO$[1,10] = SPACES$[1,10] Let DIRTO$ = "/tmp/" ! SEND IT SOMEWHERE!
FLE$ = "txt/ava.ping.xmlo" ! ava name = ping
Call FindF(FLE$,H)
If Not(H)
  returnstatus=0;message$="TEMPLATE FILE NOT FOUND"
  !Signal 3,30
  Goto OUTDONE
End If 
CHNL = 97 \ Gosub GETCHAN
If Err 0 Gosub ERR_TRAP ! getchan changes to err_escape:?
If CHNL > 1 ! valid
  CH_TMPL = CHNL
  Open #CH_TMPL,FLE$
Else 
  returnstatus=0;message$="TEMPLATE FILE NOT OPENED"
  !Signal 3,30
  Goto OUTDONE
End If 
TEMP$ = "" \ Call Time(TEMP$) ! get todays info
WORK$ = TEMP$[1,13] ! just the MMM dd, yyyy
X1 = 5 ! need yyyymmdd
Call VerifyDate(WORK$,X$,E,X1)
WORK$ = X$[1,8] ! yyyymmdd
WORK$[9] = Tim(11) Using "&&" ! hour
WORK$[11] = Tim(12) Using "&&" ! minute
WORK$[13] = Tim(13) Using "&&" ! second
WORK$[15] = H0[7] Using "&&&&&&" ! order
XMLFLE$ = WORK$ + ".pl" ! final file name (PERL Script)
INXMLFLE$ = WORK$ + "in.txt"
TMPFLE$ = "/tmp/" + WORK$[1,14] + Spc(6) Using "&&&&" ! temp(detail)=/tmp/YYYYMMDDHHMMSSPPPP
CHNL = 90 \ Gosub GETCHAN
If Err 0 Gosub ERR_TRAP ! getchan changes to err_escape:?
CH_DTL = CHNL
Build #CH_DTL, + TMPFLE$ + "!"
TEMPLT_LOOP: Rem read until detail done
WRKLINE$ = "";CH_INFLE = CH_TMPL
Gosub READ_TEMPLATE
If WRKLINE$ = "" Goto ORDDONE
If WRKLINE$[1,6] = "DOHEAD" Goto ORDDONE ! finished detail marker (ADDED MANUALLY TO FILE!)
Gosub PARS_LINE
If Not(POS1) ! no variable
  Print #CH_DTL;WRKLINE$ ! send whole line
Else ! need to insert a variable
  Print #CH_DTL;WRKLINE$[1,POS1 - 1]; ! FIRST send beginning string
  If VARNM$ = "ACCOUNTID" ! trans id
    Print #CH_DTL;AVAACCTNO$;
  End If 
  If VARNM$ = "AVAPWID" ! license key
    Print #CH_DTL;AVALCKEY$;
  End If 
  If VARNM$ = "AVACLIENT" !
    Print #CH_DTL;"ubs connector ver. 1.1";
  End If 
  If VARNM$ = "AVAADAPTER" !
    Print #CH_DTL;"ver. 1.1";
  End If 
  If VARNM$ = "AVADEVNAME" !
    Print #CH_DTL;"ubs connector ver. 1.1";
  End If 
  Print #CH_DTL;WRKLINE$[POS2 + 1] ! LAST send remaining string
End If 
Goto TEMPLT_LOOP
ORDDONE: Rem detail done, now header
Close #CH_DTL ! close detail
WORK$ = TMPFLE$ + "H!" ! name =/tmp/YYYYMMDDHHMMSSPPPPH (same as dtl with H appended)
Build #CH_DTL, + WORK$ ! build the temp header file
HDR_LOOP: Rem rest is header
WRKLINE$ = "";CH_INFLE = CH_TMPL
Gosub READ_TEMPLATE
If WRKLINE$ = "" Goto FINFILE
If WRKLINE$[1,6] = "DOHEAD" Goto HDR_LOOP ! place holder (not part of send file)
Gosub PARS_LINE ! see if any needed data
If POS1 ! yes data needed
  Print #CH_DTL;WRKLINE$[1,POS1 - 1]; ! send beginning string
  If VARNM$ = "LENGTH" ! "get byte count of detail file
    WORK$ = "wc -c " + TMPFLE$ + " > /tmp/WC" + Str$(H0[7]) + Str$(Spc(6))
    System WORK$,X2
    If Not(X2) ! no errors
      WORK$ = "/tmp/WC" + Str$(H0[7]) + Str$(Spc(6)) ! file sent to above
      If Err 0 Rem
      Close #76
      If Err 0 Gosub ERR_TRAP
      Open #76,WORK$
      TEMP$ = "";X3 = 0
WCR_LOOP: Rem if loop needed
      Read #76;TEMP$;
      If TEMP$ <> "" ! hopefully one line w/no blank start/end
        X3 = TEMP$ ! get any number before the file name
      End If 
      Close #76
      Kill WORK$ ! clean up temp wc file
      Print #CH_DTL;Str$(X3);
    End If 
  End If 
  Print #CH_DTL;WRKLINE$[POS2 + 1] ! send remaining string
Else 
  Print #CH_DTL;WRKLINE$
End If 
Goto HDR_LOOP
FINFILE: Rem now add the xml detail
Print #CH_DTL;"" ! Skip a line (insert a blank line after header
Close #CH_DTL ! close header file
X2 = 0;X3 = 0 ! error = none
X$ = "\\"
WORK$ = "tr -d '" + X$ + "000' < " + TMPFLE$ + "H > " + DIRTO$ + XMLFLE$ ! hdr to final
System WORK$,X2
WORK$ = "tr -d '" + X$ + "000' < " + TMPFLE$ + " >> " + DIRTO$ + XMLFLE$ ! detail append to final
System WORK$,X3
If X2 Or X3 ! unix reported errors
  !Print @0,22;'RB CE';"ERROR REPORTED ON FILE COMPILATION";
  !Signal 3,30
End If 
WORK$ = TMPFLE$ + "H"
If Err 0 Rem
Kill WORK$ ! remove temp header
Kill TMPFLE$ ! remove temp detail
If Err 0 Gosub ERR_TRAP
Close #CH_TMPL
If Not(X2) And Not(X3) ! "no errors on file create
  WORK$ = "chmod +x " + DIRTO$ + XMLFLE$
  System WORK$,X1 ! need to make it executable
  ! Print @0,22;'CL';"SENDING FILE NOW";
  WORK$ = DIRTO$ + XMLFLE$ + " " + DIRTO$ + INXMLFLE$
  System WORK$ ! "execute - results to inxmlfle$
  FLESENTO = 1
End If 
RESTARTHERE: Rem retry receiving (if needed)
XMLFLE$ = DIRTO$ + INXMLFLE$ ! "we know the full name of file
CHNL = 97 \ Gosub GETCHAN ! "look for channel for infile
CH_WRKFLE = CHNL ! "response file channel
WORK$ = XMLFLE$ ! full file name
FLEFND = 0
CHK4FLE: Rem "wait and try again loop
Call FindF(WORK$,FOUND)
If FOUND ! it's there - open it
  Open #CH_WRKFLE,WORK$
Else 
  If FLEFND <= 4 ! not there yet? try 4 times(0,1,2,3)(=12 seconds), then give up
    FLEFND = FLEFND + 1
    !Print @40,22;'CL';"NO FILE YET..";Str$(FLEFND);
    Signal 3,30 ! wait 3 seconds
    Goto CHK4FLE
  End If 
  returnstatus=0;message$="RESPONSE FILE MISSING!"
  ! Signal 3,30
  Goto OUTDONE
End If 
BADDATA = 1;RESPFAULT = 0
INFLE_LOOP: Rem until done or EOF
WRKLINE$ = "";CH_INFLE = CH_WRKFLE
Gosub READ_TEMPLATE
If WRKLINE$ = "" Goto FLEDONE
Rem the only way I see it is do hardcode literal search
VARNM$ = "FAULT"
Gosub CHK_LINE
If POS1 ! PERL found a problem
  RESPFAULT = 1
End If 
VARNM$ = "<RESULTCODE" ! don't include ">" as parse uses it
Gosub CHK_LINE
If POS1 ! see if we can grab what result is
  Gosub PARS_DATA
  FAULTSTRING$ = TEMP$ ! now get actual result sentence
  Call String(1,FAULTSTRING$)
  RESPFAULT = 0
End If 
If RESPFAULT ! if send fault - get details!!
  VARNM$ = "<FAULTSTRING" ! don't include ">" as parse uses it
  Gosub CHK_LINE ! see if is actual fault
  If POS1 ! see if we can grab what result is
    Gosub PARS_DATA
    FAULTSTRING$ = TEMP$ ! now get actual fault sentence
    Call String(1,FAULTSTRING$)
    RESPFAULT = 1
  End If 
End If 
Goto INFLE_LOOP ! next line
READ_TEMPLATE: Rem read (needs any processing?)
Read #CH_INFLE;WRKLINE$;
STRPCCHAR: Rem "remove cr/lf etc
If Len(WRKLINE$) > 1 
  if WRKLINE$[Len(WRKLINE$)] < " "
	WRKLINE$[Len(WRKLINE$)] = "" ! Strip control chars
	Goto STRPCCHAR
  Endif
End If 
Return 
CHK_LINE: Rem See if line holds what we're looking for
WORK$ = WRKLINE$
Call String(1,WORK$) ! "ALL UPPERCASE
POS0 = 1;POS1 = 0;POS2 = 0
Search WORK$[POS0],VARNM$,POS1
Return 
PARS_LINE: Rem See if line holds variables
VARNM$ = " ",VARNM$
POS0 = 1;POS1 = 0;POS2 = 0
Search WRKLINE$[POS0],"~",POS1
If Not(POS1) Return ! none there
Let VARNM$ = WRKLINE$[POS1 + 1] To "~" : POS2 ! variable now has ~name~
VARNM$ = WRKLINE$[POS1 + 1,POS2 - 1] ! trim the ~'s
Call String(1,VARNM$) ! make sure UPPERCASE
Return 
PARS_DATA: Rem get the data from the line
WORK$ = "";TEMP$ = "" ! clear working vars
Search WRKLINE$[POS0 + POS1],">",POS2
If POS2 ! got it
  WORK$ = "";TEMP$ = ""
  X = POS2 + POS0 + POS1
  Let WORK$ = WRKLINE$[X] To "<" : POS2
  For X1 = 1 To Len(WORK$) ! "now strip any possible < or >
    If WORK$[X1,X1] <> ">" And WORK$[X1,X1] <> "<" And WORK$[X1,X1] <> ""
      TEMP$ = TEMP$ + WORK$[X1,X1]
    End If 
  Next X1
End If 
Return 
STRPCHARS: Rem as we use cat - we need to strip 'invalid' chars
WORK$ = FAULTSTRING$
If Len(WORK$) = 0 Return 
For X = 1 To Len(WORK$)
  If WORK$[X,X] = ")" Let WORK$[X,X] = " "
  If WORK$[X,X] = "(" Let WORK$[X,X] = " "
Next X
FAULTSTRING$ = " ",FAULTSTRING$
FAULTSTRING$ = WORK$
Return 
FLEDONE: Rem file reading is done - write order files
If RESPFAULT Let BADDATA = 1 ! "we got a reponse of fault like we wanted
Close #CH_INFLE
POS0 = 1;POS1 = 0
If Len(FAULTSTRING$) > 1
  Search FAULTSTRING$[POS0],"SUCCESS",POS1
  If POS1 Let CONNSTAT = 1 ! "that's the fault we want
End If 
If RESPFAULT Let CONNSTAT = 1 ! "in case test script changed and we still got a fault response
OUTDONE: Rem finished
!Print @0,22;'CE';@0,23;"CONNECTION IS ";
If CONNSTAT = 0 
	Message$="CONNECTION IS NOT OPERABLE"
	returnstatus=0
endif
!If CONNSTAT = 1 Print "WORKING OKAY";
OUTEND: Rem outta here
if returnstatus=0 goto Outerr
End 
Rem {begin src/inc/rtn.getchan.i}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
CHNL=FindChannel() ! (chnl)
Return 
OutErr: ! something amiss
CONNSTAT=0 ! NO GOOD
End ! let caller handle it
if returnstatus=0 let returnstatus=1 ! as it's blockid?
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
End
Rem {end rtn.getchan.i}
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
Call programdump("tmp/ava.testconnse!","")
returnstatus=0
message$=msg$
goto OutErr ! alt - send user info
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End 
