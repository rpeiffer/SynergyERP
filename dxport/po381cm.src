! >>> Program po381cm
!
! description Copy Credit Memo into a Debit Memo
! loadsave -w -n 100,10 -o prog/dxport/po381cm.dl4 src/po381cm.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY  5, 2008  11:32:05
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/po381cm.src (univ2) [mary] {25996}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,Logic,String,Time,VerifyDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$,openfile,OpenMySQLMirror
include "src/inc/sql_prod.inc"

!Option Default Dialect IRIS1
Rem po381cm debit memo credit memo copy
Rem last update: 7/98  mtg cct#112286/112287 - credit memo copy
Rem cct151597 kag 11/9/01 assign vendor code from prod file to WHBLD[2] before
Try
!parm[0]=vendid ! vendor #
!parm[1]=cmid ! sales order id #
!parm[8]=poid ! debit memo id
!parm[9]=intco ! control #
	
Enter Chan[],parm[],rstr$,message$,eflg
Dim 3%,vend,credno,poid,intco
let vend=parm[0]
let credno=parm[1]
let intco=parm[9]
! need channels
! need vendor code
! need credit memo #
dim 1%,POL1[5],NSD1[7],PFU1[20],CNVTU[9],SC,SR,COST_LEV[3],COPY_FLAG
dim 1%,FLAGS[11],SOURCE,COPY_SALES_ORD
dim 2%,POL2[2],POL9,NSD2[4],S9[9],ORDER,LINE_,ELINE,VEND,Z9[9]
dim 3%,POL3[6],NSD3[9],PFU2[6],CNVTA[4],A[33]
dim J4$[50],POL1$[120],NSD$[96],PROD$[12],VEND$[50]
! If Err 0 Gosub ERR_TRAP
Dim 1%,C8[9,9],D1,E,J0,J2,J3,J4,J5,J6,J8,J9[5],T8[4],X1[9]
Dim 1%,DL1[6]
Dim 1%,CH_INVH,CH_POHEAD,CH_VEND,CH_INVL,CH_INVHIST,CH_PROD
Dim 1%,CH_DIV,CH_PRWH,CH_CCODE
Dim 2%,X2[9],WHBLD[2],AV2[6]
Dim 2%,SOPO,OH5[16],DL2[4],CURRDATE
Dim 2%,VEND,CREDNO,ORDNUM,PONUM,N0,3%,CRED
Dim 3%,B0,J1,H8[9],R0,R8,R9,T9[9],Q1[4],Q9,X3[9]
Dim 3%,TO_[3],M1[12],A1[7]
Dim 3%,DL3[3],R24,REC_INVH,REC_POHEAD,REC_VEND,REC_INVHIST,REC_INVL
Dim 3%,REC_PROD,REC_POLINE,REC_PRWH,REC_CCODE
Dim 3%,POLNUM
Dim J$[40],J0$[12],J1$[40],J2$[40],J5$[75],J7$[75],J9$[40],F$[16]
Dim M1$[14],P$[80],S$[20],S1$[10],U5$[50],X$[22]
Dim I$[5],K12$[50]
Dim P9$[50]
Dim AV1$[32],DIVDESC$[24]
Dim P60$[50],WHPROD$[12],KEYINVH$[30],KEYVEND$[30],KEYHIST$[30],KEYINVL$[30]
Dim KEYPOL$[30],KEYPOL2$[30]
Dim KEYNS$[50],KEYINVHIST$[50]
Dim KEYPOH$[30],KEYPOH2$[30],KEYCODE$[30]
Rem {begin src/inc/dim.invh.i}
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8]
Dim 2%,HFAX[1],HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL,OREF[5]
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Rem {end dim.invh.i}
Rem {begin src/inc/dim.invl.i}
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,INVNO,QPB,ROL0
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Rem {end dim.invl.i}
Dim 2%,POH0[5],POH3[4],POH[4],POH6[1]
Dim 1%,POH4[3],POH1[9],POH5[10]
Dim 3%,POH7[1],POH8[9],POH9[12]
Dim POH$[82],POH1$[116],ST$[14],POH2$[40]
Dim 1%,POL0[4],POMISC[2]
Dim 3%,POL[5],POL4[23],POL5[9],POL6[9]
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],LM[1],UPCT,PR_PO[1]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],PF_LOAD2,PLV[1],PRPARC[3],U3,PFN[1]
Rem {begin src/inc/dim.vend.i}
Dim 1%,VNDA[4],VNDM4[1]
Dim 2%,VND1[6],VND3
Dim 3%,VNDA2[11],VNDC1[5],VND4[1],VNDA3[7]
Dim VNDA$[264],VNDC2$[44],VNDA1$[20],VNDA2$[8],VNDA3$[4],VNDA5$[60]
Rem {end dim.vend.i}
Rem {begin src/inc/dim.prwh.i}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i}
dim e$[500],buttonlist$[5,50],nextlist$[5,100],msg$[100] ! error handling variables
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNU(H) = Int(Abs(H)) + Sgn(Fra(Abs(H))) * Sgn(H)

! CHAN[0]=CTLC
! CHAN[1]=CH_POH
! CHAN[2]=CH_POL
! CHAN[3]=CH_VEND
! CHAN[4]=CH_PROD
! CHAN[5]=CH_PRWH
! CHAN[6]=CH_NS
! CHAN[7]=CH_CCODE
! CHAN[8]=CH_WH
! CHAN[9]=CH_INVH
if not (chan[0]) ! cntrl file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
if not (chan[1]) ! purchase order header  #8
	 Ch_Pohead = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
else
	ch_pohead=chan[1]
endif
if not (chan[2]) ! po lines #9
	Ch_PoLINE = openfile(2432,intCo) \ If Ch_Pol = -1 Error 42     !"po lines file
else
	let ch_poline=chan[2]
endif
if not (chan[3]) ! vend
	Ch_Vend = openfile(2400,intCo) \ If Ch_Vend = -1 Error 42     !Vendor FIle
else
	let ch_vend=chan[3]
endif
if not (chan[4]) ! product file #3
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
else
	let ch_prod=chan[4]
endif
if not (chan[5]) ! product warehouse #10
	Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
else
	let ch_prwh=chan[5]
endif
if not (chan[6]) !  nonstock #14
	ch_ns=OpenFile(2448,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
else
	let ch_ns=chan[6]
endif
If not (chan[7]) ! 
	Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file
else
	let ch_Ccode=chan[6]
endif
If not (chan[8]) ! warehouse file #12 
	Ch_Wh = OpenFile(2768,intCo) \ If Ch_Wh = -1 Error 42  !" warehouse file
else
	let ch_wh=chan[8]
endif
! open files here
IF NOT(CHAN[9]) ! INVOICE HISTORY
	Ch_Invh = OpenFile(1136,intCo) \ If Ch_Invh = -1 Error 42 
else
	let ch_invh=chan[9]
endif
Ch_Invl = OpenFile(1184,intCo) \ If Ch_Invl = -1 Error 42
Ch_Div = OpenFile(688,intCo) \ If Ch_Div = -1 Error 42
Ch_Invhist = OpenFile(1136,intCo) \ If Ch_Invhist= -1 Error 42
sqlChan = OpenMySQLMirror(e$)
!CH_INVH = 67
!CH_INVL = 68
!CH_DIV = 69
!CH_INVHIST = 70
Mat Read #ctlc,19,50;P9$;
Mat Read #ctlc,60,50;P60$;
X2 = Tim(8) \ If X2 > 99 Let X2 = X2 - 100
CURRDATE = (X2 * 10000) + (Tim(9) * 100) + Tim(10)
KEYVEND$ = VEND Using "######"
Search #CH_VEND,2,1;KEYVEND$,REC_VEND,E
If e>0
	let eflg=eflg+1
	let message$="Vendor "+str$(Vend)+"Not Found"
	goto outend:
endif
Rem {begin src/inc/read.vend.i}
Mat Read #CH_VEND,REC_VEND,0;VNDA$
Mat Read #CH_VEND,REC_VEND,264;VND1
Mat Read #CH_VEND,REC_VEND,292;VNDA2
Mat Read #CH_VEND,REC_VEND,364;VNDC1
Mat Read #CH_VEND,REC_VEND,400;VNDC2$
Mat Read #CH_VEND,REC_VEND,444;VND3
Mat Read #CH_VEND,REC_VEND,448;VND4
Mat Read #CH_VEND,REC_VEND,460;VNDA1$
Mat Read #CH_VEND,REC_VEND,480;VNDA2$
Mat Read #CH_VEND,REC_VEND,488;VNDA
Mat Read #CH_VEND,REC_VEND,498;VNDA3
Mat Read #CH_VEND,REC_VEND,546;VNDA3$
Mat Read #CH_VEND,REC_VEND,554;VNDM4
Mat Read #CH_VEND,REC_VEND,576;VNDA5$
Rem {end read.vend.i}
ASKCM: Rem ask cm # to copy
!Print @0,5;'CE';"Enter #:Credit Memo to copy  E: end  X: exit ";
!Input Len (16384 + 6);""J4$
!Call String(1,J4$)
!If J4$ = "E"
  !J4$ = VEND Using "######"
  !Goto OUTEND
!End If 
!If J4$ = "X"
  !J4$ = ""
  !Goto OUTEND
!End If 
! CREDNO = J4$
If CREDNO < 1 
	let eflg=eflg+1
	let message$=message$+"Invalid Credit Memo Number Entered"
	goto outend:
Endif
If CREDNO > 999999 !
	let eflg=eflg+1
	let message$=message$+"Invalid Credit Memo Number Entered"
	goto outend: 
	!Goto ASKCM
endif
KEYINVH$ = " ",KEYINVH$
KEYINVH$[1,2] = "31"
KEYINVH$[3,12] = CREDNO Using "##########"
Search #CH_INVH,2,1;KEYINVH$,REC_INVH,E
If E > 1 Gosub ERR_SEARCH
If E = 1
  let eflg=eflg+1
  let message$=message$+"Credit Memo is Not On File"
  goto outend:
  !Print @0,23;'CL';"Credit Memo is not on file....";
  ! Signal 3,20 \ Goto ASKCM
End If 

Rem {begin src/inc/read.invh.i}
Mat Read #CH_INVH,REC_INVH,0;H0
Mat Read #CH_INVH,REC_INVH,52;H3
Mat Read #CH_INVH,REC_INVH,56;TOT_SELL
Mat Read #CH_INVH,REC_INVH,64;LOCKPORT
Mat Read #CH_INVH,REC_INVH,66;V0$
Mat Read #CH_INVH,REC_INVH,78;H4
Mat Read #CH_INVH,REC_INVH,84;H0$
Mat Read #CH_INVH,REC_INVH,104;H5
Mat Read #CH_INVH,REC_INVH,172;ST3
Mat Read #CH_INVH,REC_INVH,272;H1$
Mat Read #CH_INVH,REC_INVH,278;SLSM
Mat Read #CH_INVH,REC_INVH,318;SCOM
Mat Read #CH_INVH,REC_INVH,348;SMER
Mat Read #CH_INVH,REC_INVH,378;SCST
Mat Read #CH_INVH,REC_INVH,408;H6
Mat Read #CH_INVH,REC_INVH,444;HMAT$
Mat Read #CH_INVH,REC_INVH,446;P0$
Mat Read #CH_INVH,REC_INVH,466;HFAX
Mat Read #CH_INVH,REC_INVH,474;HSTI
Mat Read #CH_INVH,REC_INVH,482;H2
Mat Read #CH_INVH,REC_INVH,486;OWHT
Mat Read #CH_INVH,REC_INVH,490;OWHT1
Mat Read #CH_INVH,REC_INVH,498;TOTGL
Mat Read #CH_INVH,REC_INVH,504;PICKBY
Mat Read #CH_INVH,REC_INVH,512;OREF
Rem {end read.invh.i}
!If H5[2]
  !Print @0,22;'CL RB';"Warning...Credit Memo has already been copied to Debit Memo ";H5[2];
!ASKOKTOCOPY: Rem check if ok to copy again
  !P!rint @0,23;'CL RB';"Do you still wish to copy (Y/N) ";
  !Input Len 16384 + 1;""J$
  !Call String(1,J$)
  !If J$ = "N" Goto ASKCM
  !If J$ <> "Y" Goto ASKOKTOCOPY
!End If 
! Print @0,23;'CL';"Copying Credit Memo into Debit Memo...Please Wait...";
N0 = CREDNO
CHKDMNO: Rem REM LOOK FOR DEBIT  EXISTING
KEYPOH$ = " ",KEYPOH$
For X = 1 To 99
  If X > 17 And X < 90 Goto GETNEXTSTAT
  KEYPOH$[1,2] = X Using "##"
  KEYPOH$[3] = N0 Using "######"
  Search #CH_POHEAD,2,1;KEYPOH$,REC_POHEAD,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Read #ctlc,20,118;N0
    N0 = N0 + 1
    Write #ctlc,20,118;N0;
    Goto CHKDMNO
  End If 
GETNEXTSTAT: Rem getnext status for debit check
Next X
SETUPPOH: Rem REM SETUP purchase order HEADER RECORD
E = 2 \ Search #CH_POHEAD,1,0;KEYPOH$,REC_POHEAD,E \ If E Gosub ERR_SEARCH
For K1 = 0 To 5 \ POH0[K1] = 0 \ Next K1
POH$ = " ",POH$;POH1$ = " ",POH1$;POH2$ = " ",POH2$
For K1 = 0 To 4 \ POH3[K1] = 0 \ Next K1
For K1 = 0 To 3 \ POH4[K1] = 0 \ Next K1
For K1 = 0 To 9 \ POH8[K1] = 0 \ Next K1
For K1 = 0 To 4 \ POH[K1] = 0 \ Next K1
For K1 = 0 To 9 \ POH1[K1] = 0 \ Next K1
For K1 = 0 To 12 \ POH9[K1] = 0 \ Next K1
For K1 = 0 To 10 \ POH5[K1] = 0 \ Next K1
For K1 = 0 To 1 \ POH6[K1] = 0 \ Next K1
POH7[0] = 0;POH7[1] = 0
ST$ = " ",ST$
POH[1] = CREDNO
POH0[0] = 11
POH0[1] = REC_VEND
POH0[2] = N0
poid = N0
parm[8]=poid ! set the debit memo 
POH0[3] = CURRDATE;POH0[4] = CURRDATE;POH0[5] = CURRDATE
If OREF[1] <> H0[7] ! " h0[6]<>h0[7]
  KEYINVHIST$ = " ",KEYINVHIST$
  KEYINVHIST$[1,2] = "30"
  KEYINVHIST$[3,12] = OREF[1] Using "##########"
  Search #CH_INVHIST,2,1;KEYINVHIST$,REC_INVHIST,E
  If Not(E)
    Read #CH_INVHIST,REC_INVHIST,28;ORDNUM;
    Read #CH_INVHIST,REC_INVHIST,112;PONUM;
    POH$[1,6] = ORDNUM Using "######"
    POH3[4] = PONUM
  End If 
End If 
POH3[3] = VEND
POH$[15,24] = VNDC2$[1,10];POH$[25,34] = VNDC2$[11,20]
POH$[35,48] = VNDC2$[21,34];POH$[49,58] = VNDC2$[35,44];POH$[59,60] = "NO"
POH4[1] = H4[2]
Mat Read #ch_wh,POH4[1] - 1,4;POH1$;
POH1[9] = H5[8]
POH4[0] = 0
If H5[7] = 2 Let POH4[0] = 1
If H5[7] = 3 Let POH4[0] = 2
Rem {begin src/inc/write.pohead.i}
Mat Write #CH_POHEAD,REC_POHEAD,0;POH0
Mat Write #CH_POHEAD,REC_POHEAD,24;POH$
Mat Write #CH_POHEAD,REC_POHEAD,106;POH1$
Mat Write #CH_POHEAD,REC_POHEAD,222;POH3
Mat Write #CH_POHEAD,REC_POHEAD,242;POH4
Mat Write #CH_POHEAD,REC_POHEAD,250;POH8
Mat Write #CH_POHEAD,REC_POHEAD,310;POH
Mat Write #CH_POHEAD,REC_POHEAD,330;POH1
Mat Write #CH_POHEAD,REC_POHEAD,350;POH9
Mat Write #CH_POHEAD,REC_POHEAD,428;ST$;
Mat Write #CH_POHEAD,REC_POHEAD,442;POH2$;
Mat Write #CH_POHEAD,REC_POHEAD,482;POH5;
Mat Write #CH_POHEAD,REC_POHEAD,504;POH6;
Mat Write #CH_POHEAD,REC_POHEAD,528;POH7;
Rem {end write.pohead.i}
KEYPOH$ = POH0 Using "##" \ KEYPOH$[3] = POH0[2] Using "######"
Search #CH_POHEAD,4,1;KEYPOH$,REC_POHEAD,E \ If E Gosub ERR_SEARCH
KEYPOH2$ = POH3[3] Using "######" \ KEYPOH2$[7] = POH0[2] Using "######"
Search #CH_POHEAD,4,2;KEYPOH2$,REC_POHEAD,E \ If E Gosub ERR_SEARCH
LINENUM = 1
SOPO = POH0[2]
Write #CH_INVH,REC_INVH,112;SOPO;
Write #CH_INVH,REC_INVH,428;POH3[3];
KEYINVL$ = " ",KEYINVL$
KEYINVL$[1,10] = CREDNO Using "##########"
SEARCHINVLINE: Rem search credit memo lines
Search #CH_INVL,3,1;KEYINVL$,REC_INVL,E \ If E > 2 Gosub ERR_SEARCH
If E Goto ALMOSTOUTEND
CRED = KEYINVL$[1,10] \ If CRED <> CREDNO Goto ALMOSTOUTEND
For X = 0 To 11 \ FLAGS[X] = 0 \ Next X
Rem {begin src/inc/read.invl.i}
Mat Read #CH_INVL,REC_INVL,0;L2
Mat Read #CH_INVL,REC_INVL,8;L3
Mat Read #CH_INVL,REC_INVL,16;L4
Mat Read #CH_INVL,REC_INVL,32;L5
Mat Read #CH_INVL,REC_INVL,56;L6
Mat Read #CH_INVL,REC_INVL,80;L6$
Mat Read #CH_INVL,REC_INVL,140;L1$
Mat Read #CH_INVL,REC_INVL,160;L9
Mat Read #CH_INVL,REC_INVL,168;L7
Mat Read #CH_INVL,REC_INVL,246;PL
Mat Read #CH_INVL,REC_INVL,250;UN
Mat Read #CH_INVL,REC_INVL,256;S2
Mat Read #CH_INVL,REC_INVL,260;S3
Mat Read #CH_INVL,REC_INVL,368;MT$
Mat Read #CH_INVL,REC_INVL,370;S3$
Mat Read #CH_INVL,REC_INVL,404;OLM
Mat Read #CH_INVL,REC_INVL,446;EUN
Mat Read #CH_INVL,REC_INVL,452;UNF
Mat Read #CH_INVL,REC_INVL,494;LCO
Mat Read #CH_INVL,REC_INVL,502;CST
Mat Read #CH_INVL,REC_INVL,508;LTAX1
Mat Read #CH_INVL,REC_INVL,514;CTWT
Mat Read #CH_INVL,REC_INVL,518;INVNO
Mat Read #CH_INVL,REC_INVL,538;LTAX2
Mat Read #CH_INVL,REC_INVL,542;QPB
Read #CH_INVL,REC_INVL,548;LPRINTED
Read #CH_INVL,REC_INVL,550;OWHS
Read #CH_INVL,REC_INVL,552;LP_DATE
Read #CH_INVL,REC_INVL,556;LP_TIME
Read #CH_INVL,REC_INVL,564;ROL0
Rem {end read.invl.i}
If S2[0] = 3 Goto SEARCHINVLINE
Gosub INITPOLINE
POLNUM = POH0[2]
POL1[0] = 11
POL1[1] = POH4[1]
POL1[2] = LINENUM
POL1[3] = 0
POL0[2] = 1
POL2[2] = POH0[4]
POL3[0] = REC_POHEAD
POL4[10] = L2[1]
POL4[11] = L3[2]
POMISC[0] = L3[1]
If POH4[0] = 1 Let POMISC[0] = 0
If POH4[0] = 2 And P60$[22,22] <> "Y" Let POMISC[0] = 0
If L3[0] Let POMISC[0] = 0
POL4[10] = L2[1];POL4[11] = L3[2]
If Not(L3[0])
  REC_PROD = L4[0]
  Mat Read #CH_PROD,REC_PROD,0;A$
  Mat Read #CH_PROD,REC_PROD,156;B
  Mat Read #CH_PROD,REC_PROD,256;A
  Mat Read #CH_PROD,REC_PROD,460;A1
  Mat Read #CH_PROD,REC_PROD,508;A2
  Mat Read #CH_PROD,REC_PROD,512;PFU1
  Mat Read #CH_PROD,REC_PROD,554;PFU2
  Mat Read #CH_PROD,REC_PROD,596;PRPARC
  Mat Read #CH_PROD,REC_PROD,620;LM
  Mat Read #CH_PROD,REC_PROD,624;PR_PO
  Read #CH_PROD,REC_PROD,630;LLC
  Mat Read #CH_PROD,REC_PROD,632;PSN$
  Mat Read #CH_PROD,REC_PROD,652;PSN
  Mat Read #CH_PROD,REC_PROD,660;U2
  Mat Read #CH_PROD,REC_PROD,670;U4
  Read #CH_PROD,REC_PROD,678;U3
  Mat Read #CH_PROD,REC_PROD,684;U3$
  Mat Read #CH_PROD,REC_PROD,744;HZ$
  Mat Read #CH_PROD,REC_PROD,834;A3
  Mat Read #CH_PROD,REC_PROD,846;PFTB
  Read #CH_PROD,REC_PROD,854;UPCT
  Mat Read #CH_PROD,REC_PROD,856;C1$
  Mat Read #CH_PROD,REC_PROD,894;PR_C4
  Read #CH_PROD,REC_PROD,938;PF_LOAD2
  Mat Read #CH_PROD,REC_PROD,944;PR_A2$
  Mat Read #CH_PROD,REC_PROD,974;PFCO
  Mat Read #CH_PROD,REC_PROD,990;PLV
  Mat Read #CH_PROD,REC_PROD,1002;PLC
  Mat Read #CH_PROD,REC_PROD,1018;PFN
  If POMISC[0]
    A[3] = A[3] + L7[4]
  End If 
  Mat Write #CH_PROD,REC_PROD,256;A;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, a$[140,151], sqlChan, ch_prod)
	if e <> 1 ! returns the number of records add/updated/deleted
		gosub ERR_SEARCH
	end if
end if
  If P9$[33,33] = "Y" Gosub UPDATEPRWH
  If P9$[32,32] = "Y" If W3[16] Let POL2[0] = W3[16] Else Let POL2[0] = B[10]
  If P60$[46,46] = "Y" And H4[0] > 3 Let POMISC[1] = PR_PO[0];POMISC[2] = PR_PO[1]
  If Not(POL2[0]) Let POL2[0] = B[21]
  If H5[7] = 2 And L5[1] Let POL2[0] = L5[1]
  If H5[7] = 3 And L5[1] Let POL2[0] = L5[1]
  If H5[7] = 2 Or H5[7] = 3
    If L7[7] Let POL2[0] = L7[7] \ POL4[0] = L7[7]
  End If 
  POL1[5] = PFU1[11]
  CNVTA = POL2[0] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[5] \ CNVTU[2] = 2
  Gosub L_20000
  CNVTU[0] = POL1[5] \ CNVTU[1] = 0 \ CNVTU[2] = 2 \ Gosub L_20000
  POL2[0] = CNVTA
  POL3[1] = L4[0]
  POL1[4] = EUN[1]
  POL1[5] = PFU1[11]
  POL3[2] = L7[4];POL3[4] = L7[4]
  POL4[5] = L7[4]
  If POL1[5] <> -2
    POL4[6] = FNR(POL4[5] * POL2[0])
    POL4[0] = POL2[0] - (POL2[0] * (POL4[2] / 100)) - POL4[3]
    CNVTA = POL4[0] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[5] \ CNVTU[2] = 2
    Gosub L_20000
    CNVTU[0] = POL1[5] \ CNVTU[1] = 0 \ CNVTU[2] = 2 \ Gosub L_20000
    POL4[0] = CNVTA
    POL4[7] = FNR(POL4[5] * POL4[0])
  Else 
    POL4[6] = FNR(POL2[0]) \ POL4[0] = POL2[0] \ POL4[7] = FNR(POL4[0])
  End If 
  POL4[12] = L6[4];POL4[13] = UNF[5]
  POL4[14] = L6[2];POL4[15] = UNF[4]
  POL3[5] = 0 \ If POL4[13] Let POL3[5] = L7[4] * L6[4] / POL4[13]
  POL3[6] = 0 \ If POL4[15] Let POL3[6] = L7[4] * POL4[14] / POL4[15]
  POL1$[1,60] = L6$[1,60]
  POL1$[61,80] = A$[93,112]
  POL1$[81,92] = L1$[1,12]
  If S2[1] > 1
    POL1$[1,30] = A$[9,38];POL1$[31,60] = A$[63,92]
  End If 
End If 
If L3[0] ! nonstock item
  S3[14] = POH3[3]
  If Not(L7[7]) Let POL2[0] = L5[1] \ POL4[0] = L5[1]
  If L7[7] Let POL2[0] = L7[7] \ POL4[0] = L7[7]
  A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
  B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
  PFU1[0] = EUN[0];PFU1[1] = UN[0]
  PFU1[2] = UN[1];PFU1[3] = UN[2]
  PFU1[4] = EUN[1]
  PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
  PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
  PFU1[11] = UN[2];PFU1[12] = UN[1];PFU1[15] = CTWT
  PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
  PFU1[18] = UN[0];PFU1[19] = UN[0]
  PFU2[0] = UNF[0];PFU2[1] = UNF[1]
  PFU2[2] = UNF[2];PFU2[3] = UNF[3]
  PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
  For K = 1 To 4
    For X2 = 0 To K - 1
      If PFU1[K] = PFU1[X2] Let PFU1[K] = 0;PFU2[K - 1] = 0
    Next X2
  Next K
  POL1[5] = UN[2]
  CNVTA = POL2[0] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[5] \ CNVTU[2] = 2
  Gosub L_20000
  CNVTU[0] = POL1[5] \ CNVTU[1] = 0 \ CNVTU[2] = 2 \ Gosub L_20000
  POL2[0] = CNVTA
  POL1[4] = EUN[1]
  POL3[2] = L7[2];POL4[5] = L7[2];POL3[4] = L7[2]
  If UNF[5] Let POL3[5] = L7[2] * L6[4] / UNF[5]
  If UNF[4] Let POL3[6] = L7[2] * L6[2] / UNF[4]
  If UN[2] = -2 ! " cost u/m = lot
    POL4[6] = L5[1];POL4[7] = L5[1];POL4[0] = L5[1]
  Else 
    POL4[6] = L7[2] * POL2[0];POL4[7] = L7[2] * POL4[0]
    POL4[0] = POL2[0] - (POL2[0] * (POL4[2] / 100)) - POL4[3]
    CNVTA = POL4[0] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[5] \ CNVTU[2] = 2
    Gosub L_20000
    CNVTU[0] = POL1[5] \ CNVTU[1] = 0 \ CNVTU[2] = 2 \ Gosub L_20000
    POL4[0] = CNVTA
    POL4[7] = FNR(POL4[5] * POL4[0])
  End If 
  POL1$[1,60] = L6$[1,60]
  POL1$[61,80] = S3$[1,20]
  POL1$[81,92] = L1$[1,12]
  For X = 0 To 6 \ W3[X] = 0 \ Next X
  NSD$[1,12] = L1$[1,12] \ NSD$[13,42] = L6$[1,30]
  NSD$[43,72] = L6$[31,60] \ NSD$[73,92] = S3$[1,20]
  NSD$[93,96] = L1$[17,20]
  NSD3[6] = L6[4] \ NSD3[7] = UNF[5] \ NSD3[8] = UNF[4]
  NSD1[1] = L3[3] \ NSD2[0] = POH0[2] \ NSD2[1] = S3[14]
  NSD2[3] = L5[1] \ NSD2[4] = REC_INVL \ NSD1[7] = CTWT
  NSD3[2] = L6[2]
  For X = 2 To 5
    If X = 2 Let NSD1[X] = EUN[0]
    If X = 3 Let NSD3[X] = UNF[2];NSD1[X] = UN[2]
    If X = 4 Let NSD3[X] = UNF[3];NSD1[X] = EUN[1]
    If X = 5 Let NSD3[X] = UNF[0];NSD1[X] = UN[0]
  Next X
  If Fra(L7[4]) > 0
    Gosub GETNSUM
    If REC_CCODE Gosub SETUPNS
  End If 
  If S2 = 3 Goto WRITEINVLINE
  X1 = 0 \ FLAGS[0] = 1
GETNSLINE: KEYNS$ = NSD$[1,12] \ KEYNS$[13] = X1 Using "##"
  Search #CH_NS,2,1;KEYNS$,POL3[1],E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    X1 = X1 + 1 \ If X1 > 99 Gosub ERR_SEARCH
    Goto GETNSLINE
  End If 
  nsd1[6] = x1 ! store tie breaker
  E = 2 \ Search #CH_NS,1,0;KEYNS$,POL3[1],E \ If E Gosub ERR_SEARCH
  Search #CH_NS,4,1;KEYNS$,POL3[1],E \ If E Gosub ERR_SEARCH
  Mat Write #CH_NS,POL3[1];NSD$
  Mat Write #CH_NS,POL3[1],96;NSD1
  Mat Write #CH_NS,POL3[1],112;NSD2
  Mat Write #CH_NS,POL3[1],132;NSD3;
End If 
WRITEINVLINE: L4[2] = POH0[2]
Mat Write #CH_INVL,REC_INVL,16;L4;
Mat Write #CH_INVL,REC_INVL,260;S3;
Gosub FLAGSPACK
Gosub WRITEPOLINE
If UN[2] = -2 And L3[0] ! cost u/m = lot and nonstock item
  POH8[0] = POH8[0] + POL4[6]
Else 
  POH8[0] = POH8[0] + (POL3[2] * POL2[0])
End If 
POH8[1] = POH8[1] + POL3[5]
Mat Write #CH_POHEAD,REC_POHEAD,250;POH8;
LINENUM = LINENUM + 1
Goto SEARCHINVLINE
INITPOLINE: Rem CLEAR LINE VARS
For X = 0 To 23
  If X < 6 Let POL1[X] = 0
  If X < 3 Let POL2[X] = 0;POMISC[X] = 0
  If X < 7 Let POL3[X] = 0
  If X < 5 Let NSD2[X] = 0;POLO[X] = 0
  If X < 8 Let NSD1[X] = 0
  If X < 10 Let NSD3[X] = 0;POL5[X] = 0;POL6[X] = 0
  POL4[X] = 0
Next X
POL1$ = " ",L1$
NSD$ = " ",NSD$
POLNUM = POH0[2]
E = 2
Search #CH_POLINE,1,0;KEYPOL$,REC_POLINE,E
If E Gosub ERR_SEARCH
Return 
GETNSUM: Rem FIND EAH U/M FOR FRA NON STOCKS
REC_CCODE = 0
KEYCODE$ = " ",KEYCODE$
KEYCODE$ = "EA  "
Search #CH_CCODE,2,1;KEYCODE$,REC_CCODE,E
If E
  KEYCODE$ = "EACH"
  Search #CH_CCODE,2,1;KEYCODE$,REC_CCODE,E
  If E Let REC_CCODE = 0 \ Return 
End If 
Return 
SETUPNS: Rem SET UP FRA
NSD1[2] = REC_CCODE
NSD3[3] = 100
NSD3[4] = 100
NSD3[5] = 100
If L7[7] Let POL2[0] = (L7[7] / 100) Else Let POL2[0] = (L5[1] / 100)
CNVTA = POL2[0] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[5] \ CNVTU[2] = 2
Gosub L_20000
CNVTU[0] = POL1[5] \ CNVTU[1] = 0 \ CNVTU[2] = 2 \ Gosub L_20000
POL2[0] = CNVTA
POL3[2] = L7[4] * 100
NSD3[7] = 100
NSD3[8] = 100
Return 
UPDATEPRWH: Rem UPDATE WAREHOUSE FILE
U5$ = L1$[1,12] \ U5$[13] = POH4[1] Using "##"
Search #CH_PRWH,2,1;U5$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto UPDATEPRWHQTY
If X1 < 0 Gosub ERR_SEARCH
WHPROD$[1,12] = L1$[1,12];WHBLD[0] = 65;WHBLD[1] = POH4[1];WHBLD[2] = B[24]
Call "MXWHCREATE",WHPROD$,WHBLD[]
REC_PRWH = WHBLD[2];E = 0;WHBLD[2] = 0 \ Goto UPDATEPRWHQTY
UPDATEPRWHQTY: Rem update prodwhse quantities
Gosub READPRWH
If POMISC[0]
  W3[2] = W3[2] + L7[4]
End If 
Gosub WRITEPRWH
Return 
READPRWH: Rem READ WHPR FILE
Rem {begin src/inc/read.prwh.i}
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
Read #CH_PRWH,REC_PRWH,396;WHLPOOL
Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
Read #CH_PRWH,REC_PRWH,404;FCWGT
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Read #CH_PRWH,REC_PRWH,798;WHRPLN
Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
Mat Read #CH_PRWH,REC_PRWH,842;WHLM
Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
Read #CH_PRWH,REC_PRWH,894;RESTRICTED
Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
Read #CH_PRWH,REC_PRWH,922;VLIST
Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
Read #CH_PRWH,REC_PRWH,938;WHBASE
Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
Rem {end read.prwh.i}
Return 
WRITEPRWH: Rem WRITE WHPR FILE
Mat Write #CH_PRWH,REC_PRWH,78;W3;
Return 
EXTCOST: Rem EXTEND COST ! routine no longer used
POL3[5] = 0 \ If POL4[13] Let POL3[5] = POL4[12] * POL4[5] / POL4[13]
POL3[6] = 0 \ If POL4[15] Let POL3[6] = POL4[14] * POL4[5] / POL4[15]
Return 
WRITEPOLINE: Rem WRITE LINE REC
Mat Write #CH_POLINE,REC_POLINE,0;POL1
Mat Write #CH_POLINE,REC_POLINE,12;POL2
Mat Write #CH_POLINE,REC_POLINE,24;POL3
Mat Write #CH_POLINE,REC_POLINE,66;POL1$
Mat Write #CH_POLINE,REC_POLINE,186;POL
Mat Write #CH_POLINE,REC_POLINE,222;POL0
Mat Write #CH_POLINE,REC_POLINE,232;POL4
Mat Write #CH_POLINE,REC_POLINE,376;POMISC
Mat Write #CH_POLINE,REC_POLINE,382;POL5
Mat Write #CH_POLINE,REC_POLINE,442;POL6
Mat Write #CH_POLINE,REC_POLINE,542;POLNUM;
KEYPOL$ = POH0[2] Using "######"
KEYPOL$[7] = POL1[2] Using "###"
Search #CH_POLINE,4,1;KEYPOL$,REC_POLINE,E \ If E Gosub ERR_SEARCH
KEYPOL2$ = POL3[1] Using "######"
KEYPOL2$[7] = POH0[2] Using "######"
KEYPOL2$[13] = POL1[2] Using "###"
Search #CH_POLINE,4,2;KEYPOL2$,REC_POLINE,E \ If E Gosub ERR_SEARCH
Return 

FLAGSPACK: Rem pack chain type from flags
X2 = 0
For K = 0 To 11
  If FLAGS[K] Let X2 = X2 + 2 ^ K
Next K
POL1[3] = X2
Return 

ALMOSTOUTEND: Rem set up purchase order # for return
J4$ = POH0[2] Using "P######"
Goto OUTEND

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem EXIT
!J4$[Len(J4$) + 1] = "\15\"
!Call InpBuf(J4$)
if not (chan[0]) ! cntrl file
	Try Close #ctlc  Else Rem
endif
if not (chan[1]) ! purchase order header  #8
	 Try Close #Ch_Pohead Else Rem
endif
if not (chan[2]) ! po lines #9
	Try CLose #Ch_PoLINE Else Rem
endif
if not (chan[3]) ! vend
	Try Close #Ch_Vend Else Rem
endif
if not (chan[4]) ! product file #3
	 Try Close #Ch_Prod Else Rem
endif
if not (chan[5]) ! product warehouse #10
	Try Close #Ch_PrWh Else Rem
endif
if not (chan[6]) !  nonstock #14
	Try CLose #ch_nstk Else Rem 
endif
If not (chan[7]) ! 
	Try Close #Ch_Ccode Else Rem
endif
If not (chan[8]) ! warehouse file #12 
	Try Close #Ch_Wh Else Rem
endif
if not (chan[9]) ! inv header
	Try Close #CH_INVH Else Rem
endif
Try Close #CH_INVL Else Rem
Try Close #CH_DIV Else Rem 
Try Close #CH_Invhist Else Rem 
if sqlChan >= 0 try close #sqlChan else rem
! End 
ELSE
!
include "src/callmainerrnet.inc"
end try
end
