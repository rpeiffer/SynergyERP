! >>> Program 689t
!
! description 689t - Inventory Value Report Multiple Cost
!
! loadsave -w -n 100,10 -o prog/dxport/689t.dl4 src/689t.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem BEDIT Version: 2.3 OBJECT CODE     Created: DEC 29, 2011  10:10:48
Rem /w2/papermaster/r2005//usr/acct/becky/work/custom/gti/mx689gti.src (univ2) [becky] {53479}
Rem  Copyright (c) 2011 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX689gti - INVENTORY VALUE
Rem AUTHOR: DAVE  AUG 10, 1987
Rem LAST UPDATE:  roman 08/23/1993 clean-up. prep for fiber cct #55474
!--- custom_customer$ --------------
! PCS jliu 2/25/03 cct165195 if the product's commodity code is "TIME", don't   
!    print the product info  
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
!
!!Option Default Dialect IRIS1
Try 

Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
!If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Dim 1%,P1[1],F,X1,Y8,Y7,Y9,WHLM[1],LM[1],TABS,INCNEG,ZEROVL,W1[2]
Dim 2%,B1[24],A3,WHSE,Q0[1],C4[8],X2,ECTR,ELN[11],I
Dim 3%,A2[7],W3[24],P3[3],COST[10],CUNIT,UNIT,J,X3,W5[12],4%,T9[20]
Dim 3%,PRPARC[2],PF_LOAD2,WHMISC[2],A1[33],VENDOR
Dim 4%,EXTCOST[10],TOTEXTCOST[10]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[60],ARDATE$[8],A$[156]
Dim U5$[130],SUNIT$[4],CUNIT$[4],UNIT$[10],P9$[50],PMASK$[15]
Dim K1$[50],K2$[20],K3$[20],X$[10],K5$[60],COST$[4],VENDNAME$[30]
Dim D1$[10],D2$[10],ANS$[10],custom_customer$[30]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[2500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
!!! check this
Dim b$[200]!
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!
j8 = 0
If Err 0 Let j8 = Spc(8)
try
	J9 = Chf(0) 
else
	let j8=99
end try
If Err 0 Gosub ERR_TRAP
J9 = 55 \ If j8 Let J9 = 18

COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1
! open files
For J = 2 To 6
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1792","2528 ","1728","1744","2400"
Mat Read #1,0,100;ARDATE$;
Mat Read #1,19,50;P9$;
Read #1,3;CNAME$;
mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(rtrim$(custom_customer$))
Read #1,0,120;Y7; \ Read #1,51,72;Y8;
U5$ = "=",U5$
Y9 = Y7 - Y8 \ If Y9 <= 0 Let Y9 = Y9 + 12
Y8 = Y9
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."

COST$ = "ABWL";PAMU = 0;ZEROVL = 0;INCNEG = 0
WHSE = 0;UNIT = 1
SBUY = 0;EBUY = 999
K2$ = " ",K2$;K3$ = "z",K3$
!Window On 
!L_900: Rem GET RANGES
!Print 'CS';@30,0;"INVENTORY VALUE BY ITEM CODE"
!Print @0,2;" 1> ENTER STARTING ITEM CODE, <CR>: first,  E: exit   ";K2$[1,12]
!Print @0,3;"    ENTER   ENDING ITEM CODE, <CR>: last,   E: exit   ";K3$[1,12]
!Print @0,4;" 2> WAREHOUSE NUMBER TO PRINT,  0: all ";WHSE
!Print @0,5;" 3> INCLUDE PRODUCTS WITH ZERO ON HAND? (Y/<CR>) ";"N"
!Print @0,6;" 4> INCLUDE EXTENDED COST FOR PRODUCTS WITH NEGATIVE QUANTITY ? (Y/<CR>) ";"N"
!Goto FINALQ
!GET_ITEMRANGE: Rem "start/end
!Print @53,2;'CL';
!Input Len 16384 + 12;""K2$ \ Call String(1,K2$)
!If K2$ = "E" Goto OUTEND
!Print @53,3;'CL';
!Input Len 16384 + 12;""K3$ \ Call String(1,K3$)
!If K3$ = "E" Goto OUTEND
!If K3$ = "" Let K3$ = "z",K3$
!If Len(K3$) < 12 Let K3$[(Len(K3$)) + 1,12] = "            "
!Print @53,3;'CL';K3$[1,12];
!If K2$ <= K3$ Goto L_990
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto GET_ITEMRANGE
!L_990: K1$ = K2$
!Return 
!FINALQ: Rem "final answer
!Print @0,22;'CE';"ENTER #:field to edit,  R: reselect all,  P: print,  E: exit  ";
!Input Len 16384 + 1;""J$ \ Call String(1,J$)
!If J$ = "E" Goto OUTEND
!If J$ = "P" Goto STARTPRNT
!If J$ = "R" Goto EDT_ALL
!FLD = J$ \ If FLD < 1 Or FLD > 4 Or Fra(FLD) Goto FINALQ
!Gosub EDT_FLD
!Goto FINALQ
!EDT_ALL: Rem "all of 'em
!For FLD = 1 To 4
!  Gosub EDT_FLD
!Next FLD
!Goto FINALQ
!EDT_FLD: Rem "change 'em here
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!On FLD Gosub GET_ITEMRANGE,GET_WHSE,L_1060,PRNTNEG
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!Return 
!GET_WHSE: Rem "
!L_10560: Print @39,4;'CL';
!Input Len 16384 + 2;""UNIT$
!WHSE = UNIT$
!If WHSE < 0 Or WHSE > 99 Goto L_10560
!Print Using "##";@39,4;WHSE;
!Return 
!L_1060: Print @49,10;'CL';
!Input Len 16384 + 1;""J2$ \ Call String(1,J2$)
!If J2$ = "" Let J2$ = "N"
!Print @49,10;'CL';J2$;
!If J2$ <> "Y" And J2$ <> "N" Goto L_1060
!If J2$ = "Y" Let ZEROVL = 99 Else Let ZEROVL = 0
!Return 
!PRNTNEG: Rem "Print neg values?
!Print @73,11;'CL';
!Input Len 16384 + 1;""J2$ \ Call String(1,J2$)
!If J2$ = "" Let J2$ = "N"
!Print @73,11;'CL';J2$;
!If J2$ <> "Y" And J2$ <> "N" Goto PRNTNEG
!If J2$ = "Y" Let INCNEG = 99 Else Let INCNEG = 0
!Return
let eflag=0
let message$=""
! - !  dx add xport reporting code
call dxget("begcode",tmp$) \ K2$=UCase$(tmp$),Blank$ ! starting product code
if rtrim$(tmp$)="" let k2$=" ",k2$
let k1$=k2$
call dxget("endcode",tmp$) \ K3$=UCase$(tmp$),EndParam$ ! ending product code
if rtrim$(tmp$)="" let k3$="z",k3$
if K3$<K2$
	let eflag=eflag+1
	let message$="Invalid ending code, must be greater than starting code!" \ error 10000
endif
call dxget("whse",tmp$)
if rtrim$(tmp$)="" let WHSE=0 else WHSE=tmp$ ! warehouse
if whse<0 or whse>99
	let eflag=eflag+1
	let message$=message$+" Invalid Warehouse Entered "
endif
Call dxget("zerovl",tmp$) \ if rtrim$(tmp$)="" let ZEROVL=0 else ZEROVL=99! include zero on hand
call dxget("prntneg",tmp$) \ if rtrim$(tmp$)="" let INCNEG=0 else INCNEG=99 ! include negative quantity
If j8<>0 ! browser
	!tmp$ = bsdel$,"689t",fdel$,rdel$
    !Call addtostr(e$,rstr$,tmp$)
	! browser fields
	tmp$="Item Code",fdel$,"Description",fdel$
	tmp$=tmp$,"Vendor Name",fdel$,"STK-UM",fdel$
	tmp$=tmp$,"On Hand",FDEL$,"Cst-UM",FDEL$
	tmp$=tmp$,"Factor",fdel$
	tmp$=tmp$,"Net Po Cost ",fdel$,"Ext Net Po Cost",fdel$
	tmp$=tmp$,"Base Cost",fdel$,"Ext Base Cost",fdel$
	tmp$=tmp$,"Po Cost",fdel$,"Ext Po Cost",fdel$
	tmp$=tmp$,"Load Cost",fdel$,"Ext Load Cost",fdel$
	tmp$=tmp$,"Avg Cost",fdel$,"Ext Avg Cost",fdel$
	tmp$=tmp$,rdel$
	Call addtostr(e$,rstr$,tmp$)
!Else ! printer
!	Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
Endif
if eflag<>0 
	goto outend: ! errors have occured
endif



STARTPRNT: Rem "and we're off
J1 = 90 \ J2 = 0
! Off 
!Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
!If J8 Print 'CS';
!If Err 0 Gosub ERR_ESCAPE
Search #2,2,1;K1$,R1,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_2010
L_2000: Search #2,3,1;K1$,R1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_9100
L_2010: If K1$[1,Len(K3$)] > K3$[1,Len(K3$)] Goto L_9100
Gosub L_6000
if custom_customer$="PCS"
	if A$[152,155]="TIME" goto L_2000
Endif
Gosub L_10300 \ Goto L_2000
Gosub L_3000
Gosub L_10200
T9 = 0 \ T9[1] = 0 \ T9[2] = 0 \ T9[3] = 0
If A$[152,155] = "MACH" Let A[0] = 0
If A$[152,155] = "LABR" Let A[0] = 0
If A$[152,155] = "TIME" Let A[0] = 0
T9[2] = A[0] - A[1] - A[3]
If P9$[28,28] = "Y" Let T9[2] = T9[2] + A[2]
If B1[20] = 0 Let B1[20] = 1
If INCNEG Goto L_2062
If A[0] < 0 Goto L_2065
L_2062: For LOOP_ = 1 To 5
  EXTCOST[LOOP_] = FNR(A[0] * (COST[LOOP_]))
Next LOOP_
L_2065: If Not(ZEROVL) If A[0] = 0 Goto L_2000
If Not(INCNEG) If A[0] < 0 Goto L_2000
L_2150: Gosub L_10000
Gosub L_5800
Gosub L_5000
let totrec=totrec+1
Gosub L_2200
Goto L_2000
L_2200: Rem TOTALS CALC
T9[10] = T9[10] + A[0]
For LOOP_ = 1 To 5
  TOTEXTCOST[LOOP_] = TOTEXTCOST[LOOP_] + EXTCOST[LOOP_]
Next LOOP_
Return 
L_3000: Rem GET ON HAND FROM SPRODLOT
A[0] = 0;A[1] = 0;A[3] = 0
J4$ = " ",J4$;J4$ = A$[140,151]
L_3010: Search #3,3,2;J4$,R4,E \ If E > 2 Gosub ERR_SEARCH
If E Return 
If J4$[1,12] <> A$[140,151] Return 
Mat Read #3,R4,66;P1;
Mat Read #3,R4,82;P3;
If WHSE If WHSE <> P1[0] Goto L_3010
A[0] = A[0] + P3[0] - P3[1]
A[3] = A[3] + P3[3]
Goto L_3010
L_4000: Rem TOTAL PRINT
if j8<>0 return
Gosub L_5800
Print #0;"\15\** TOTALS **";
Print #0; Using "-------------#.##"; Tab 44;T9[10];
Print #0; Tab 75;"NET PO COST";
Print #0; Using "-----------#.##"; Tab 87;TOTEXTCOST[1];
Print #0; Tab 104;"BASE COST";
Print #0; Using "-----------#.##"; Tab 113;TOTEXTCOST[4]
Print #0; Tab 79;"PO COST";
Print #0; Using "-----------#.##"; Tab 87;TOTEXTCOST[2];
Print #0; Tab 104;"LOAD COST";
Print #0; Using "-----------#.##"; Tab 113;TOTEXTCOST[5]
Print #0; Tab 78;"AVG COST";
Print #0; Using "-----------#.##"; Tab 87;TOTEXTCOST[3];
Print #0;"" \ J1 = J1 + 1
Print #0;"\15\"
Return 
L_5000: Rem PRINT LINE
if j8
    tmp$=rtrim$(a$[140,151]),fdel$ ! item code
	tmp$=tmp$,rtrim$(a$[9,38]),fdel$ ! description
	tmp$=tmp$,rtrim$(vendname$),fdel$ ! vendor name
	tmp$=tmp$,rtrim$(sunit$),fdel$ ! stock um
	tmp$=tmp$,ltrim$(a[0] Using "-------#.##"),fdel$ ! on hand
	tmp$=tmp$,rtrim$(cunit$),fdel$ ! cost um
	tmp$=tmp$,ltrim$(factor Using "-------#"),fdel$ ! factor
	! Net Po Cost/ext net po cost
	tmp$=tmp$, ltrim$(cost[1] Using PMASK$),fdel$
	tmp$=tmp$,ltrim$(extcost[1] Using "----------#.##"),fdel$
	! Base cost
	tmp$=tmp$, ltrim$(cost[4] Using PMASK$),fdel$
	tmp$=tmp$,ltrim$(extcost[4] Using "----------#.##"),fdel$
	!PO COST
	tmp$=tmp$, ltrim$(cost[2] Using PMASK$),fdel$
	tmp$=tmp$,ltrim$(extcost[2] Using "----------#.##"),fdel$
	!LOAD COST
	tmp$=tmp$, ltrim$(cost[5] Using PMASK$),fdel$
	tmp$=tmp$,ltrim$(extcost[5] Using "----------#.##"),fdel$
    !AVG COST
	tmp$=tmp$, ltrim$(cost[3] Using PMASK$),fdel$
	tmp$=tmp$,ltrim$(extcost[3] Using "----------#.##"),fdel$
	tmp$=tmp$,rdel$
	Call addtostr(e$,rstr$,tmp$)
else
	For LOOP_ = 1 To 3
		If LOOP_ = 1
			Print #0; Tab 1;A$[140,151];
			Print #0; Tab 14;A$[9,38];
			Print #0; Tab 45;SUNIT$;
			Print #0; Using "-------#.##"; Tab 50;A[0];
			Print #0; Tab 64;CUNIT$;
			Print #0; Using "-------#"; Tab 68;FACTOR;
		End If 
		If LOOP_ = 2 Print #0; Tab 14;VENDNAME$;
		Print #0; Using PMASK$; Tab 77;COST[LOOP_];
		Print #0; Using "----------#.##"; Tab 88;EXTCOST[LOOP_];
		If LOOP_ <> 3
			Print #0; Using PMASK$; Tab 104;COST[LOOP_ + 3];
			 Print #0; Using "----------#.##"; Tab 114;EXTCOST[LOOP_ + 3];
		End If 
		Print #0;"" \ J1 = J1 + 1
	Next LOOP_
	L_5770: Rem
	Print #0;"\15\";
endif
Return 
L_5800: Rem HEADINGS ROUTINE
IF J8<>0 RETURN
J1 = J1 + 1 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 9
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;Msc$(3);
Print #0; Tab 44;"I N V E N T O R Y   V A L U E   R E P O R T"; Tab 120;"    "
TABS = 58
If ZEROVL Or INCNEG Let TABS = 48
If INCNEG Let TABS = 43
If ZEROVL And INCNEG Let TABS = 35
If Not(WHSE) Print #0; Tab TABS;"FOR ALL WAREHOUSES ";
If WHSE Print #0; Using "FOR WAREHOUSE ## "; Tab TABS;WHSE;
If ZEROVL Print #0;"WITH ZERO ON HAND ";
If INCNEG If ZEROVL Print #0;"AND ";
If INCNEG Print #0;"WITH NEGATIVE COSTS EXTENDED";
Print #0;"\15\"
Print #0; Tab 78;"NET PO COST";
Print #0; Tab 104;"BASE COST"
Print #0; Tab 78;"PO COST";
Print #0; Tab 104;"LOADED COST"
Print #0; Tab 1;"ITEM CODE";
Print #0; Tab 14;"DESCRIPTION/VENDOR";
Print #0; Tab 41;"STK-UM";
Print #0; Tab 51;"ON HAND";
Print #0; Tab 61;"CST-UM";
Print #0; Tab 69;"FACTOR";
Print #0; Tab 78;"AVE COST";
Print #0; Tab 91;"EXTENSION";
Print #0; Tab 117;"EXTENSION"
Print #0;U5$;
Print #0;"\15\";
Return 
L_6000: Rem "====================================== read product record
Mat Read #2,R1,0;A$;
Mat Read #2,R1,156;B1;
Mat Read #2,R1,256;A; \ Mat Read #2,R1,256;A1;
Mat Read #2,R1,460;A2;
Mat Read #2,R1,508;A3;
Mat Read #2,R1,512;PFU1;
Mat Read #2,R1,554;PFU2;
Mat Read #2,R1,894;C4;
Mat Read #2,R1,596;PRPARC;
Mat Read #2,R1,938;PF_LOAD2;
Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 

L_9100: Rem END OF THIS RANGE
Gosub L_4000
!If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
ECTR = ECTR + 1 \ ELN[ECTR] = ELINE
Restor 
For J = 2 To 5
  Read I \ If I = -1 Goto L_9250
  Read #1,88,I;J$;
  Close #J \ Open #J,J$
L_9250: Next J
Return -1
Stop 
L_10000: Rem
CNVTU[0] = 0
CNVTU[1] = PFU1[11]
CNVTU[2] = 2
For X = 1 To 5
  CNVTA = COST[X]
  Gosub L_20000
  COST[X] = AMOUNT
Next X
CNVTU[1] = PFU1[8]
CNVTU[2] = 1
For X = 0 To 3
  If X = 1 Goto L_10130
  If X = 0 Let CNVTU[2] = 5
  If X <> 3 Let CNVTA = T9[X] \ Gosub L_20000 \ T9[X] = AMOUNT
  CNVTA = A[X] \ Gosub L_20000 \ A[X] = AMOUNT
L_10130: Next X
If PFU1[8] > 0 Mat Read #4,PFU1[8],10;SUNIT$;
If PFU1[8] = -1 Let SUNIT$ = "CWT "
If PFU1[8] = -3 Let SUNIT$ = "LB  "
If PFU1[11] > 0 Mat Read #4,PFU1[11],10;CUNIT$;
If PFU1[11] = -1 Let CUNIT$ = "CWT "
If PFU1[11] = -3 Let CUNIT$ = "LB  "
FACTOR = 1
If PFU1[11] <> -1 If PFU1[11] <> -3
  For X = 1 To 7
    If PFU1[11] = PFU1[X] Let FACTOR = PFU2[X - 1]
  Next X
End If 
Return 
L_10200: Rem "============================================== SET COST
for ctr=0 to 5\let cost[ctr]=0\next ctr
if p9$[32,32]="Y"
	If W3[15]<>0 Let COST[3] = W3[15] Else Let COST[3] = B1[21]
	If W3[18]<>0 Let COST[4] = W3[18] Else Let COST[4] = C4[4]
	If W3[17]<>0 Let COST[5] = W3[17] Else Let COST[5] = B1[8]
	If W3[16]<>0 Let COST[2] = W3[16] Else Let COST[2] = B1[10]
	If WHMISC[2]<>0 Let COST[1] = WHMISC[2] Else Let COST[1] = PRPARC[2]
	If W2[3]<>0 Let VENDOR = W2[3] Else Let VENDOR = B1[24]
else
	Let COST[3] = B1[21]
	Let COST[4] = C4[4]
	Let COST[5] = B1[8]
	Let COST[2] = B1[10]
	Let COST[1] = PRPARC[2]
	Let VENDOR = B1[24]
endif
VENDNAME$ = "VENDOR NOT FOUND"
K5$ = " ",K5$
K5$ = VENDOR Using "######"
Search #6,2,1;K5$,R6,E
If Not(E)
  Mat Read #6,R6;VENDNAME$
End If 
Return 
L_10300: Rem WAREHOUSE
WHMISC[2] = 0
For X = 0 To 24 \ W3[X] = 0 \ Next X
For X = 0 To 12 \ W5[X] = 0 \ Next X
If Not(WHSE) Return 1
K5$ = " ",K5$
K5$[1,12] = A$[140,151]
K5$[13,14] = WHSE Using "##"
Search #5,2,1;K5$,R5,E \ If E > 1 Gosub ERR_SEARCH
If E Return 
Mat Read #5,R5,32;W1;
Mat Read #5,R5,78;W3;
Mat Read #5,R5,228;W5; \ Mat Read #5,R5,800;WHMISC;
If P9$[32,32] = "Y" Gosub L_69000
Return 1
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B1[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B1[21]
  If Not(W3[16]) Let W3[16] = B1[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B1[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B1[24]
End If 
Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
If not(J8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions to print"
			message$=message$+"."
		else
			Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program