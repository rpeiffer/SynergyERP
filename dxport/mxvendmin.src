! MXVENDMIN  --- Displays the vendor minimums --- 
! loadsave -w -n 100,10 -o prog/dxport/mxvendmin.dl4 src/mxvendmin.src
!!Option Default Dialect IRIS1
Declare External sub mxvendmin



External Sub mxvendmin(Chan[],specs[],prod$,msg$,errtype,list$[],maxcnt,cost_lev[])
Declare Intrinsic Sub InpBuf,String
!!Option Default Dialect IRIS1
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault
Declare External Function OpenFile,PDate$,FormatDate2$
External Lib "libgeneral.lib"
Declare External Sub SubErr,CreateNetStatus,GetDelimiters
Declare External Sub GetSession,AddToStr,SetOutPut
Declare External Function getmsg$,expandarray 
External Lib "libprodconv.lib" 
Declare External Function ConvProdAmount 
include "src/copyright.inc"


Try
!!! start of com variables !!!
dim 1%,PFU1[20],CNVTU[9],COST_LEV[3],MAIN,MODE,DIR,WH
dim 2%,PF_B[24],VENDOR,ORDER,M3[2]
dim 3%,PFU2[6],A[33],CNVTA[4],AMOUNT,FIELD,BASE,PO_COST,SUG_QTY,DSP_UNIT
dim 3%,R2,PF_A1[7],POLREC
dim PROD$[12],J4$[50],PF_A$[156],VEN$[264],VEND_C2$[44],UNT$[4]
dim VEN_ITEM$[20],keyprod$[50],W1$[32],VMIN$[50]
DIM 3%,SUGWT,SUGCBF,POWT,POCBF,SUGDOL,PODOL,SUGQTY,PO_QTY
!!! end of com variables
IF NOT (MAXCNT) LET MAXCNT=50
DIM LIST$[MAXCNT,1000]
Dim 1%,J9[2],J0,J2,J3,J4,J5,J6,J8,X1,MAIN_W0[3],MAIN_W1[2]
Dim 3%,M1[17],OL3[5],R[20]
Dim J$[75],J0$[10],J1$[75],J2$[40],J3$[40],J5$[75],J7$[75],J9$[75]
Dim X$[10],P9$[50],J6$[40],MAIN_W2$[36],MAIN_W1$[32],KEY_$[50],A5$[60]
Dim ALT1_W2$[36],ALT1_W1$[32],PF_A2$[30],REA$[10],K12$[50]
Dim ALT2_W2$[36],ALT2_W1$[32],F$[16],BUYER$[30],BASE$[4],WEBSTR$[2500]
Dim ALT3_W2$[36],ALT3_W1$[32],WH_NAME$[4],P60$[50],P61$[256],F1$[16]
Dim MTH1$[10],MTH2$[10],MTH3$[10],MTH4$[10],MTH5$[10],MTH6$[10],K18$[60],K19$[60]
dim mth7$[10],mth8$[10],mth9$[10],mth10$[10],mth11$[10],mth12$[10]
Dim K2$[50],K3$[50],K6$[50],K10$[50],PHONE$[15],K16$[50],TY$[2],C$[16],TMP$[100],E$[256]
DIM KEYTMP$[50],2%,VW5[1],3%,REC_TMP,vw3[11]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000] 
dim 3%
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
wh=specs[1]
main=specs[2]
vendor=specs[3]
intco=specs[10] ! company #
! openfiles 
if not (chan[0]) ! cntrl file #1
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
if not (chan[1]) ! vendor file
	ch_vend=OpenFile(-2400,intCo) \ If Ch_vend = -1 Error 42 ! vendor code
else
	let ch_vend=chan[1]
endif
if not (chan[2]) ! Vendor Tag File
	ch_vtag=OpenFile(-1120,intCo) \ If Ch_vtag = -1 Error 42 ! vendor tag
else
	let ch_vtag=chan[2]
endif

if not (chan[4]) ! product file #2 * 
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
else
	let ch_prod=chan[4]
endif
if not (chan[5]) ! product warehouse #3 * 
	Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
else
	let ch_prwh=chan[5]
endif
if not (chan[7]) ! unit of measure file #5* 
	Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file
else
	let ch_ccode=chan[7]
endif




If Not(WH) Let WH = MAIN
If Not(WH) Let WH = 1


Read #ctlc,0,108;AR_DATE;
Read #ctlc,3,184;FIXPO;
Mat Read #ctlc,19,50;P9$; \ Mat Read #ctlc,60,50;P60$;
Mat Read #ctlc,61,0;P61$;
LET SUGWT=0;SUGCBF=0;POWT=0;POCBF=0;SUGDOL=0;PODOL=0;SUGQTY=0;PO_QTY=0
LET BASESUG=0 
Mat M1 = Zer \ Mat M3 = Zer \ MIN_TYPE = -1
K6$ = " ",K6$
Let K6$[1,6] = vendor Using "######"
Search #ch_vend,2,1;K6$,R6,E
If E <>0
	let errtype=99
	Let msg$ = "Vendor Not on File " 
else
	Mat Read #ch_vend,R6,0;VEN$;
	Mat Read #ch_vend,R6,400;VEND_C2$;
	Mat Read #ch_vend,R6,576;A5$;
endif
if vendor=0
	let errtype=99
	let msg$="Invalid Vendor Code"
endif
if not (errtype)
	LET SUGWT=0;SUGCBF=0;POWT=0;POCBF=0;SUGDOL=0;PODOL=0;SUGQTY=0;PO_QTY=0
	LET BASESUG=0 
	K16$ = " ",K16;K16$[1,6] = vendor Using "######"
	Mat M1 = Zer \ Mat M3 = Zer \ MIN_TYPE = -1
	Search #ch_vtag,2,1;K16$,R16,E
	If not(E)  
		Mat Read #ch_vtag,R16,206;M1;
		Mat Read #ch_vtag,R16,386;M3;
	endif
	if prod$<>""
		let keyprod$=prod$
		search #ch_prod,2,1;prod$,rec_prod,e
		if e<>0 goto getvendwh:
		LET VMIN$=" ",VMIN$                                                
		LET VMIN$[1,2]=WHSE USING "##";VMIN$[3,8]=VENDOR USING "######" 
		let vmin$[9]=prod$
		search #ch_prwh,2,3;vmin$,rec,e
		if e<>0 goto getvendwh:
		goto readprwh:
	endif
	LET VMIN$=" ",VMIN$                                                
	LET VMIN$[1,2]=WHSE USING "##";VMIN$[3,8]=VENDOR USING "######" 
	
	L_10060: SEARCH #ch_prwh,3,3;VMIN$,REC,E                                
	IF E GOTO getvendwh:                                                 
	LET X2=VMIN$[3,8] \ IF X2<>VENDOR GOTO getvendwh:                    
	LET X2=VMIN$[1,2] \ IF WHSE AND X2<>WHSE GOTO getvendwh:
	readprwh: ! read the product warehouse
	LET BASESUG=0 
	MAT  READ #ch_prwh,REC,0;W1$;  
	MAT  READ #ch_prwh,REC,32;W1;  
	MAT  READ #ch_prwh,REC,38;W2;  
	MAT  READ #ch_prwh,REC,78;W3;  
	MAT  READ #ch_prwh,REC,420;W0; 
	MAT  READ #ch_prwh,REC,428;WH7;
	MAT  READ #ch_prwh,REC,696;W7; 
	LET PROD$[1,12]=W1$[1,12] 
	getprod: ! 
	LET K2$=" ",K2$                                                 
	LET K2$[1,12]=PROD$[1,12]                                       
	SEARCH #ch_prod,2,1;K2$,R2,E                                          
	IF E                                                            
         	MAT  READ #ch_prod,R2,0;PF_A$;                                        
		MAT  READ #ch_prod,R2,156;PF_B;                                       
		MAT  READ #3,R2,256;A;                                          
		MAT  READ #3,R2,460;PF_A1;                                      
		MAT  READ #3,R2,512;PFU1;                                       
		MAT  READ #3,R2,554;PFU2;                                       
		LET DSP_UNIT=PFU1[10]                                           
		LET COST=0                                                      
		IF P9$[32,32]="Y"                                               
			IF W3[16] LET COST=W3[16] ELSE  LET COST=W3[15]               
		ENDIF                                                           
		IF NOT (COST)                                                     
			IF PF_B[10] LET COST=PF_B[10] ELSE  LET COST=PF_B[21]         
		ENDIF                                                           
	endif 
	
	LET SUGQTY=SUGQTY+W3[11];PO_QTY=PO_QTY+POQTY                 
	IF A[5] LET SUGWT=SUGWT+(A[6]*BASESUG/A[5])                  
	IF PF_A1[3] LET SUGCBF=SUGCBF+(PF_B[23]*BASESUG/PF_A1[3])    
	IF A[5] LET POWT=POWT+(A[6]*BASEPOQTY/A[5])                  
	IF PF_A1[3] LET POCBF=POCBF+(PF_B[23]*BASEPOQTY/PF_A1[3])    
	LET SUGDOL=SUGDOL+FNR(BASESUG*COST) 
	getvendwh: ! check for vendor warehouse
	If P61$[63,63] = "Y" ! "look for vend/whse minimums
		! vendor warehouse info -- truck size
		Ch_tmp = openfile(-9961,intCo)
		if ch_tmp>0 
			let keytmp$=" ",keytmp$
			let keytmp$[1,6]=Vendor USING "######" ! vendor 
			let keytmp$[7,8]=Wh USING "##" ! WHSE
			search #ch_tmp,2,1;keytmp$,rec_tmp,e
			if not(e)
				MAT  READ #ch_tmp,Rec_tmp,442;VW3;
				 MAT  READ #ch_tmp,rec_tmp,792;VW5; 
				  FOR X=0 TO 7 \ LET M1[X]=VW3[X] \ NEXT X  
				 if vw5[0] 
					LET M3[0]=VW5[0]           
					IF VW5[1] LET M3[1]=VW5[1] 
				endif
			endif
			close #ch_tmp
		endif
	End If 
Endif

                          



	

Gosub L_5000
goto outend: 






L_5000: Rem Create List
Clear List$[]
List$[0]=bsdel$,"Vendor Minimums",fdel$
webstr$="VendID",fdel$
        
webstr$=webstr$,"Min Dollars",fdel$
webstr$=webstr$,"Min Weight",fdel$
webstr$=webstr$,"Min Cubes",fdel$
webstr$=webstr$,"Min Qty",fdel$
webstr$=webstr$,"Sugg Dollars",fdel$
webstr$=webstr$,"Sugg Weight",fdel$
webstr$=webstr$,"Sugg Cubes",fdel$
webstr$=webstr$,"Sugg Qty",fdel$
webstr$=webstr$,"Truck Size",fdel$
list$[1]=webstr$
row=2
if not (errtype)! alt wh 1
	let webstr$=rtrim$(vendor using "######"),fdel$
	! min
	webstr$=webstr$,rtrim$(m1[0] USING "#######.##"),fdel$
	webstr$=webstr$,rtrim$(m1[1] USING "#########"),fdel$
	webstr$=webstr$,rtrim$(m1[2] USING "#######.##"),fdel$
	webstr$=webstr$,rtrim$(m1[3] USING "#########"),fdel$
	! suggested
	webstr$=webstr$,rtrim$(sugdol USING "#######.##"),fdel$
	webstr$=webstr$,rtrim$(sugwt USING "#########"),fdel$
	webstr$=webstr$,rtrim$(sugcbf USING "#######.##"),fdel$
	webstr$=webstr$,rtrim$(sugqty USING "#########"),fdel$
        ! truck size
	let tmp$=""
	if m3[0]
		let tmp$=m3[0] using "####### "
		if m3[1]=1 let tmp$=tmp$,"LBS"
		if m3[1]=2 let tmp$=tmp$,"CBF"
	endif
	webstr$=webstr$,rtrim$(tmp$),fdel$
	list$[2]=webstr$
	let row=row+1
endif
list$[row]=esdel$ ! end of section
Return 


L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
L_20050: Rem "====== unibasic 5+ logic
let amount=0\if not(cnvta) goto L_20160:
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG 
AMOUNT = CNVTA
L_20160: Return

Outend: ! End the subroutine 
if not (chan[0]) and ctlc<>1 close #ctlc! cntrl file #1
if not (chan[1]) close #ch_vend ! vendor #6
if not (chan[2]) close #ch_vtag ! vendor tag file
if not (chan[4]) close #ch_prod !  product file #2 * 
if not (chan[5]) close #ch_prwh ! product warehouse #3 * 
if not (chan[7]) close #ch_ccode! unit of measure file #5* 
Else
	 include "src/callsuberr.inc"
end try
end sub 

