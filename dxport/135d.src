! >>> Program 135d
!
! description Update warehouse vendors
! loadsave -w -n 100,10 -o prog/dxport/135d.dl4 src/135d.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem   MX135d   -  Copy Main vendor to all warehouse records
Rem   author:  rce 07/16/96      
Rem
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 26, 2005  09:20:50
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx1/mx135d.src (univ2) [txc] {32284}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub CheckDigits,InpBuf,String,programdump
!Option Default Dialect IRIS1
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
If Err 0 Gosub ERR_TRAP
Dim 1%,SC,SR,CNVTU[2],SRC,COST_LEV[3],COST_SEC,Z9[9],UN[2]
Dim 2%,E1
Dim 3%,UNIT,CNVTA
Dim e$[500],buttonlist$[5,50],nextlist$[5,100],Msg$[500],rstr$[2000] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.prwh.i}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i}
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
DIM_VARS: Rem
Dim 1%,BWH,EWH,BICLASS,EICLASS,URECFLAG
Dim 3%,R[99],BVEND,EVEND
Dim RETVAL$[512],Z2$[2]
Dim K2$[16],K3$[14],VENDKEY$[50]
Dim BPROD$[12],EPROD$[12],V1$[10],W9$[4]
Dim BCOMM$[4],ECOMM$[4],P9$[50],P60$[50],P61$[256]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

OPEN_FILES: Rem          opens files here
For J = 2 To 3
  Read J1
  If J1 = -1 Goto NXTF
  Read #1,88,Abs(J1);J$;
  If J1 > 0 Open #J,J$ Else Ropen #J,J$
NXTF: Rem
Next J
Data "1792","1744"
Mat Read #1,60,50;P60$;
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
INIT_VARS: Rem sort flags
FLG = 0;ReturnStatus=0
WFLG = 0;Message$=""
BPROD$ = " ",BPROD$;EPROD$ = "z",EPROD$
BCOMM$ = "    ";ECOMM$ = "zzzz"
BVEND = 0;EVEND = 999999
VITEMFLAG = 0
CH_PROD = 2
CH_PRWH = 3
MAIN: Rem

!Gosub PRINT_SCREEN
!Goto INPUTS
PRINT_SCREEN: Rem
!Print 'CS'
!Print @2,0;"-MX135D-";@20,0;"WAREHOUSE VENDOR UPDATE";
!Print @35,2;'BR';"STARTING";@55,2;"ENDING";'ER';
!Print @2,5;"1> Product Code     :";
!Print @2,6;"2> Warehouse Number :";
!Print @2,7;"3> Commodity Code   :";
!Print @2,8;"4> Vendor Number    :";
!Print @2,10;"5> Update Vendor Item Code ? ";

INPUTS: Rem

FLD1: Rem product code
!J5$ = "Enter starting product code maximum zzzzzzzzzzzz, or  -: ,&,?:list option"
!J1$ = BPROD$;J0$ = "2 00123505"
!Gosub ISINPUT
!Gosub PRODSCAN \ Goto FLD1
call dxget("BPROD",J$)
BPROD$ = UCase$(J$)+B$
!Print @35,5;BPROD$;'CL';
!RETVAL$[1,12] = BPROD$
J5$ = " ",J5$
FLD2: Rem
!J5$ = "Enter ending product code maximum zzzzzzzzzzzz, or  -: ,&,?:list option"
!J1$ = EPROD$;J0$ = "2 00125505"
!Gosub ISINPUT
!Gosub PRODSCAN \ Goto FLD2
call dxget("EPROD",J$)
EPROD$ = UCase$(J$)+B$
!Print @55,5;EPROD$;'CL';
If BPROD$ > EPROD$
  Message$ = Message$+"Invalid product code range  "
  ReturnStatus=1
End If 
!RETVAL$[13,24] = EPROD$
J5$ = " ",J5$
!Return 
FLD3: Rem warehouse range
!J5$ = "Enter starting warehouse number maximum 99"
!J1 = BWH;J0$ = "3000023506"
!Gosub ISINPUT
call dxget("BWH",tmp$)
J1=tmp$
BWH = J1
!Print Using "##";@35,6;BWH;'CL';
!RETVAL$[25,26] = BWH Using "##"
J5$ = " ",J5$
FLD4: Rem
!J5$ = "Enter ending warehouse number maximum 99"
!J1 = EWH;J0$ = "3000025506"
!Gosub ISINPUT
call dxget("EWH",tmp$)
J1=tmp$
EWH = J1
!Print Using "##";@55,6;EWH;'CL';
If BWH > EWH
  Message$ = Message$+ "Invalid warehouse range  "
  Returnstatus=1
End If 
!RETVAL$[27,28] = EWH Using "##"
!Return 
FLD5: Rem commodity range
!J5$ = "Enter starting commodity code maximum zzzz, or  -: list"
!J1$ = BCOMM$;J0$ = "2 00043507"
!Gosub ISINPUT
!If J4$[1,1] = "-" Swap 1,"sw684" \ Goto FLD5
call dxget("BCOMM",j$)
BCOMM$ = J$+B$
!Print @35,7;BCOMM$;
!RETVAL$[29,32] = BCOMM$
J5$ = " ",J5$
FLD6: Rem
!J5$ = "Enter ending commodity code maximum zzzz, or  -: list"
!J1$ = ECOMM$;J0$ = "2 00045507"
!Gosub ISINPUT
!If J4$[1,1] = "-" Swap 1,"sw684" \ Goto FLD6
Call dxget("ECOMM",J$)
ECOMM$ = J$+B$
!Print @55,7;ECOMM$;
J5$ = " ",J5$
If BCOMM$ > ECOMM$
  Message$ = Message$+"Invalid commodity code range  "
  Returnstatus=1
End If 
!RETVAL$[33,36] = ECOMM$
!Return 
FLD7: Rem vendor range
!J5$ = "Enter starting vendor code maximum 999999, or  -: list"
!J1$ = BVEND Using "######";J0$ = "2 00063508"
!Gosub ISINPUT
!If J4$[1,1] = "-" Call "MXVEND5",J4$ \ Goto FLD7
call dxget("BVEND",J$)
BVEND = J$
!Print Using "######";@35,8;BVEND;'CL';
!RETVAL$[37,42] = BVEND Using "######"
J5$ = " ",J5$
FLD8: Rem
!J5$ = "Enter ending vendor code maximum 999999,  or  -: list"
!J1$ = EVEND Using "######";J0$ = "2 00065508"
!Gosub ISINPUT
!If J4$[1,1] = "-" Call "MXVEND5",J4$ \ Goto FLD8
call dxget("EVEND",J$)
EVEND = J$
!Print Using "######";@55,8;EVEND;'CL';
If BVEND > EVEND
  Message$ = Message$+"Invalid vendor code range  "
  ReturnStatus=1
End If 
!RETVAL$[43,48] = EVEND Using "######"
!Return 
FLD9: Rem
!J5$ = "Please Enter Y or N"
!J0$ = "6 00013510" \ J1 = VITEMFLAG;J$ = " " \ Gosub ISINPUT
!If J$ <> "Y" If J$ <> "N" Goto FLD9
call dxget("VITEMFLAG",J$)
VITEMFLAG = 0 \ If J$ = "Y" Let VITEMFLAG = 1
!RETVAL$[49,49] = VITEMFLAG Using "#"
!If VITEMFLAG Print @35,10;"Y" Else Print @35,10;"N";
!Return 
Check_INPUTS: ! see if ok
If ReturnStatus<>0 ! not okay
	e$=message$ ! it uses e$
	Goto Err_Msg
Endif
!call dxsave(0,"tmp/135dsv.txt!") ! save web send data
!goto nextstep
UPDATE: Rem
!Print @0,23;"Records updated...";'CL';
K2$ = " ",K2$;K3$ = " ",K3$
K2$ = BPROD$[1,11]
SEARCHP: Rem 
Search #CH_PROD,3,1;K2$,REC_PROD,E \ If E > 2 Gosub ERR_SEARCH
If E Goto NEXTSTEP
If K2$[1,12] > EPROD$ Goto NEXTSTEP
Gosub READ_PROD
If A$[152,155] < BCOMM$[1,4] Goto SEARCHP
If A$[152,155] > ECOMM$[1,4] Goto SEARCHP
If B[24] < BVEND Goto SEARCHP
If B[24] > EVEND Goto SEARCHP
K3$ = " ",K3$;K3$[1,12] = K2$[1,12]
SEARCHW: Rem
Search #CH_PRWH,3,1;K3$,REC_PRWH,E \ If E > 2 Gosub ERR_SEARCH
If E Goto SEARCHP
If K3$[1,12] <> A$[140,151] Goto SEARCHP
If K3$[13,14] > "98" Goto SEARCHW
Mat Read #CH_PRWH,REC_PRWH,32;W1;
If W1[0] < BWH Goto SEARCHW
If W1[0] > EWH Goto SEARCHP
Gosub READ_PRWH
VENDKEY$ = " ",VENDKEY$
VENDKEY$[1,2] = W1[0] Using "##"
VENDKEY$[3,8] = W2[3] Using "######"
VENDKEY$[9,20] = K2$[1,12]
Search #CH_PRWH,5,3;VENDKEY$,REC_PRWH,E
If E Gosub ERR_SEARCH
W2[3] = B[24]
VENDKEY$ = " ",VENDKEY$
VENDKEY$[1,2] = W1[0] Using "##"
VENDKEY$[3,8] = W2[3] Using "######"
VENDKEY$[9,20] = K2$[1,12]
Search #CH_PRWH,4,3;VENDKEY$,REC_PRWH,E
If E Gosub ERR_SEARCH
WRITEW: Rem
K = K + 1
!Print @18,23;K Using "######";
Write #CH_PRWH,REC_PRWH,50;W2[3];
If VITEMFLAG ! copy vendor item to be copied
  VENDKEY$ = " ",VENDKEY$
  VENDKEY$[1,2] = W1[0] Using "##"
  VENDKEY$[3,22] = W1$[13,32]
  VENDKEY$[23,34] = K2$[1,12]
  Search #CH_PRWH,2,4;VENDKEY$,REC_PRWH,E
  If E Gosub ERR_SEARCH
  Search #CH_PRWH,5,4;VENDKEY$,REC_PRWH,E
  If E Gosub ERR_SEARCH
  W1$[13,32] = A$[93,112]
  Mat Write #CH_PRWH,REC_PRWH;W1$
  VENDKEY$[3,22] = W1$[13,32]
  Search #CH_PRWH,4,4;VENDKEY$,REC_PRWH,E
  If E Gosub ERR_SEARCH
End If 
Goto SEARCHW
READ_PRWH: Rem
Rem {begin src/inc/read.prwh.i}
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
Read #CH_PRWH,REC_PRWH,396;WHLPOOL
Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
Read #CH_PRWH,REC_PRWH,404;FCWGT
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Read #CH_PRWH,REC_PRWH,798;WHRPLN
Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
Mat Read #CH_PRWH,REC_PRWH,842;WHLM
Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
Read #CH_PRWH,REC_PRWH,894;RESTRICTED
Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
Read #CH_PRWH,REC_PRWH,922;VLIST
Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
Read #CH_PRWH,REC_PRWH,938;WHBASE
Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
Rem {end read.prwh.i}
Return 
READ_PROD: Rem
Rem {begin src/inc/read.prod.i}
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Mat Read #CH_PROD,REC_PROD,628;AGEDAY
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Mat Read #CH_PROD,REC_PROD,1270;PRD0
Mat Read #CH_PROD,REC_PROD,1282;PRIML$
Mat Read #CH_PROD,REC_PROD,1294;PRD1
Mat Read #CH_PROD,REC_PROD,1304;PRD2
Rem {end read.prod.i}
Return 
NEXTSTEP: Rem
Unlock #CH_PROD,#CH_PRWH
!Input "      Press <CR> to Exit"X$
OUTEND: Rem
!Close 
!Chain "mx000"
!Stop 
ReturnStatus=0 ! 0= ok in blockid, is =1 elsewhere
Message$="Complete - "+Str$(K)+" Product & Warehouse Records Updated"
 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
 call AddToStr(e$,rstr$,WebStr$)
 call SetOutPut(e$,rstr$)
 try Call dxclose() else rem
End 

Rem {begin rtn.input.s}
ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
Return
ISERRMSG:  Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end rtn.input.s}
Rem {begin rtn.error.s}
ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/135dse!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
  call AddToStr(e$,rstr$,WebStr$)
  call SetOutPut(e$,rstr$)
  
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End
Rem {end rtn.error.s}