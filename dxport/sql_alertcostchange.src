! Generated by SQLToDL4.pl program on 8/14/2013
!
! loadsave -w -n 100,10 -o prog/dxport/sql_alertcostchange.lib src/sql_alertcostchange.src
!
! sql_alertcostchange.lib
!
include "src/copyright.inc"
!
include "src/inc/sql_alertcostchange.inc"
!
! alertcostchange_DL4SQLConvert
!
!
!
! alertcostchange_SQLGet
!
! PARAMETERS
! e$ - standard error message variable
! sqlChan - channel sql database open on
! SQL4_alertcostchange - SQL record structure to be loaded
!
! SQL structure must be loaded with values in
! the elements that are the primary keys
! look up is done and if successful, structure
! is loaded and return value > 0.  If not
! return value of 0
!
External Function alertcostchange_SQLGet(e$, sqlChan, SQL_alertcostchange. as SQL_alertcostchange)
try ! main try
	dim SQLStmt$[500]
	dim %1,returnRec
	dim %14

	SQLStmt$ = "SELECT * FROM alertcostchange WHERE "
	SQLStmt$ = SQLStmt$ + "`ProductID` = " + SQLDT$(SQL_alertcostchange.ProductID$)
	SQLStmt$ = SQLStmt$ + " AND `Warehouse` = " + SQLDT$(SQL_alertcostchange.Warehouse)
	Search #sqlChan;SQLStmt$
	returnRec = chf(sqlChan)
	if returnRec
		Map Record #sqlChan as sql_alertcostchange
		read record #sqlChan;sql_alertcostchange.
	end if
else  ! main try
  include "src/callsuberr.inc"
end try ! main try
end function returnRec
!
!
! alertcostchange_SQLInsert
!
! PARAMETERS
! e$ - standard error message variable
! sqlChan - channel sql database open on
! SQL_alertcostchange - SQL record structure to be loaded
!
! SQL structure must be loaded with all values
! RETURNS: number of rows Inserted (Should be 1, 0 is failure)
!
External Function alertcostchange_SQLInsert(e$, sqlChan, SQL_alertcostchange. as SQL_alertcostchange)
try ! main try
	dim SQLStmt$[500]
	dim %1,returnRec
	dim %14

	SEARCH #sqlChan;"INSERT alertcostchange (" + SQLN$(SQL_alertcostchange.) + ") VALUES (" + SQLDT$(SQL_alertcostchange.) + ")"
	returnRec = chf(sqlChan)
else  ! main try
  include "src/callsuberr.inc"
end try ! main try
end function returnRec
!
!
! alertcostchange_SQLUpdate
!
! PARAMETERS
! e$ - standard error message variable
! sqlChan - channel sql database open on
! SQL_alertcostchange - SQL record structure to be loaded
!
! SQL structure must be loaded with all values
! RETURNS: number of rows Updated (Should be 1, 0 is failure)
!
! NOTE: THIS FUNCTION ONLY WORKS IF PRIMARY KEY DOES IN MYSQL NOT CHANGE!
!
External Function alertcostchange_SQLUpdate(e$, sqlChan, SQL_alertcostchange. as SQL_alertcostchange)
try ! main try
	dim SQLStmt$[500]
	dim %1,returnRec
	dim %14

	SQLStmt$ = " WHERE "
	SQLStmt$ = SQLStmt$ + "`ProductID` = " + SQLDT$(SQL_alertcostchange.ProductID$)
	SQLStmt$ = SQLStmt$ + " AND `Warehouse` = " + SQLDT$(SQL_alertcostchange.Warehouse)
	SEARCH #sqlChan;"UPDATE alertcostchange SET " + SQLSNDT$(SQL_alertcostchange.) + SQLStmt$
	returnRec = chf(sqlChan)
else  ! main try
  include "src/callsuberr.inc"
end try ! main try
end function returnRec
!
!
! alertcostchange_SQLDelete
!
! PARAMETERS
! e$ - standard error message variable
! sqlChan - channel sql database open on
! SQL_alertcostchange - SQL record structure to be loaded
!
! SQL structure must be loaded with all values
! RETURNS: number of rows Deleted (Should be 1, 0 is failure)
!
! NOTE: THIS FUNCTION ONLY WORKS IF PRIMARY KEY IN MYSQL DOES NOT CHANGE!
!
External Function alertcostchange_SQLDelete(e$, sqlChan, SQL_alertcostchange. as SQL_alertcostchange)
try ! main try
	dim SQLStmt$[500]
	dim %1,returnRec
	dim %14

	SQLStmt$ = "DELETE FROM alertcostchange WHERE "
	SQLStmt$ = SQLStmt$ + "`ProductID` = " + SQLDT$(SQL_alertcostchange.ProductID$)
	SQLStmt$ = SQLStmt$ + " AND `Warehouse` = " + SQLDT$(SQL_alertcostchange.Warehouse)
	SEARCH #sqlChan;SQLStmt$
	returnRec = chf(sqlChan)
else  ! main try
  include "src/callsuberr.inc"
end try ! main try
end function returnRec
!
!
! alertcostchange_SQLAddUpdate
!
! PARAMETERS
! e$ - standard error message variable
! sqlChan - channel sql database open on
! SQL_alertcostchange - SQL record structure to be loaded
!
! SQL structure must be loaded with all values
! optional: skipUpdate, if 1, don't update if record exists, just do adds
! RETURNS: number of rows Added or Updated (Should be 1, 0 is failure)
!
! NOTE: THIS FUNCTION ONLY WORKS IF PRIMARY KEY IN MYSQL DOES NOT CHANGE!
!
External Function alertcostchange_SQLAddUpdate(e$, sqlChan, SQL_alertcostchange. as SQL_alertcostchange, ...)
try enter skipUpdate else dim %1,skipUpdate
try ! main try
	dim tmpSQL_alertcostchange. as SQL_alertcostchange
	dim %1,returnRec
	dim %14

	tmpSQL_alertcostchange. = SQL_alertcostchange.
	returnRec = alertcostchange_SQLGet(e$,sqlChan,tmpSQL_alertcostchange.)
	if returnRec
		if skipUpdate
			returnRec = 1
		else
			returnRec = alertcostchange_SQLUpdate(e$,sqlChan,SQL_alertcostchange.)
		end if
	else
		returnRec = alertcostchange_SQLInsert(e$,sqlChan,SQL_alertcostchange.)
	end if
else  ! main try
  include "src/callsuberr.inc"
end try ! main try
end function returnRec
