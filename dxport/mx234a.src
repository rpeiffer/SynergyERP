! --- mx234a
! description Order Quick Invoicing Processing
!
! 1.0 mm/dd/yyyy change??
!
! loadsave -w -n 100,10 -o prog/dxport/mx234a.dl4 src/mx234a.src
!
Rem MX234A     total up lines and write totals
Rem GEORGE DOSCHER  12/20/79
Rem last update: roman 01/16/1992  clean up (eliminate T3)
! last update : B.Swet 03/04/92 change how to handle credit alert
! last update: roman 03/27/1992 axcess II
! last update: dd 04/23/1992 hold code by execption list
! last update: roman 03/02/1994 trap search errors, clean up
!              jlp 12/11/96 add cutoff day for terms discount cct97719
! 10/29/98 tc cct117252 check if there is a hold password before putting on hold
! 11/17/98 tc cct117615 match hold logic of 201d for invoice entry/edit of lines
!                       match hold logic of 223c for invoice entry/edit totals
! 05/05/99 tc cct122130 don't check hold passwords for invoices
! 12/02/99 tc cct128923 if appropriate, put on line GP% hold if price=0 and
!		there is a qty shipped
! 01/19/00 jlp cct131793 don't close files before going back to mx234
! 04/04/00 jlp cct134295 hold for total order based on qty, not dollars
! 6/21/01 jliu cct146887 if the invoice date is greater that ship date # days 
! TASK#21594/05/14/09 rjs cct225460 - master delivery customer ( set ch[20]=50 arterms )
! ------------------------------------------------------------------------------
!         , don't calcuate the commission and commission amt is zero     
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG  9, 2007  08:55:00
Rem /w2/papermaster/r2005//usr/acct/txc/work/custom/htberry.r9/mx234a.src (univ2) [txc] {03640}
Rem  Copyright (c) 2007 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc"
include "src/inc/fileedittrack.inc"

external lib "ubsfunc.dl4"
declare external function Openfile

External Lib "libedittrack.lib"
Declare External Sub MakeEdittrack

Declare Intrinsic Sub DateToJulian,InpBuf,JulianToDate,String,programdump,env
declare intrinsic function findchannel
! Option Default Dialect IRIS1

!Com 2%,S9[9],R5,H1,V1
!Com 3%,CFIN[8]
If Err 0 Gosub ERR_TRAP
Enter S9[],r5,h1,v1,cfin[],Chan[],IntCo
dim 1%,Lchan[50],fchan[10],un[2]
dim 3%,otype,prec[3],LDSTAT[2],unf[6]
dim 3%,wh
dim l1$[20]
Dim keysot$[10],rstr$[1000],p60$[50],blank$[100]
dim 1%,ch_sot,ot2[15],3%,rec_sot,2%,lc0[1]
DIM 3%,ORGLOADCOST,NEWLOADCOST

Rem {begin src/inc/dim.prod.i}
dim 1%,ch_prod,3%,rec_prod
Dim pr_A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}

Rem {begin src/inc/dim.prwh.i}
dim 1%,ch_prwh,3%,rec_prwh,Key_prwh$[16]
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]


Dim 2%,PASSINFO[20],CH[99]
Dim S$[1],S1$[25],A$[30],A1$[100],N$[30],Q$[20],R$[15],J7$[76],J$[60],P61$[256]
Dim F$[20],I$[40],P9$[50],C$[30],K5$[50],U5$[50],B$[30],F1$[16],A2$[20]
Dim X$[10],msg$[200],1%,CHOPEN[20]
Dim 1%,X1[10],L3[3],H4[2],T9[11],S2[1],C2[2],CHNL,D3[2],CDAY,MCTXBL[9],DCLVL
Dim 2%,L1,T1[5],L6[5],T7,T8,CASH_CUST,C1[12],AXCESS,MCODE[9]
Dim 2%,N0,H0[12],L4[3],X2,B[24],M1,H6[8],H5[16],TRMS[1],D$[16]
Dim 2%,U1[12],A2[4],D0[3],K11$[60],INVDATE,NDNC,NDNCBO,SLSM[9]
Dim 3%,C9,X3[1],L5[3],T2[25],L2[5],S3[17],L7[10],A1[7],TOT_HOLD
Dim 3%,EX[18],MCHARGE[9,1],TOT[4],TOT_SELL,SCOM[4]
Dim 3%,OREF[5],REFINV,COMMSRVCHG
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim custom_customer$[30]

Dim etr. as edittrack
blank$=" ",blank$
Def FNS(Z) = 365 * Y + U1[M] + D + L + Int(Y / 4 + .9)
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Ch_ctrl=Abs(Chan[1])
Ch_roh=Abs(chan[2])
Ch_ros=Abs(chan[3])
ch_rot=Abs(chan[4])
ch_rol=Abs(chan[5])
Ch_cust=Abs(chan[6])
ch_slsm=Abs(chan[7])
ch_prod=Abs(chan[8])
ch_prwh=Abs(chan[9])
ch_sot=abs(chan[10])
! IF YOU OPEN ANY FILES IN THIS PROGRAM - CLOSE THEM IN OUTEND!
If not(ch_ctrl)
	Ch_ctrl=OpenFile(9999,IntCo) \ if ch_ctrl=-1 error 42
Endif
if not(ch_roh)
	ch_roh=OpenFile(1840,IntCo) \ if ch_roh=-1 Error 42
Endif
if not(ch_ros)
	ch_ros=OpenFile(1856,IntCo) \ if ch_ros=-1 Error 42
Endif
if not(ch_rot)
	ch_rot=OpenFile(1872,IntCo) \ if ch_rot=-1 error 42
Endif
if not(ch_rol)
	ch_rol=OpenFile(1888,IntCo) \ if ch_rol=-1 error 42
Endif
if not(ch_cust)
	ch_cust=OpenFile(1808,IntCo) \ if ch_cust=-1 error 42
Endif
if not(ch_slsm)
	ch_slsm=OpenFile(1824,IntCo) \ if ch_slsm=-1 error 42
Endif
if not(ch_prod)
	ch_prod=OpenFile(1792,IntCo) \ if ch_prod=-1 error 42
Endif
if not(Ch_prwh)
	ch_prwh=OpenFile(1744,IntCo) \ if ch_prwh=-1 error 42
Endif
if not(ch_sot)
	CH_SOT=OpenFile(-10108,IntCo) \ if CH_SOT=-1 Error 42 ! Order Type 
endif
CH_ART=OpenFile(-9981,IntCo) \ if ch_art=-1 Error 42
L_130: For J = 1 To 12 \ Read U1[J] \ Next J
Data "0","31","59","90","120","151","181","212","243","273","304","334"
Mat Read #ch_ctrl,3,172;D0; \ B$ = D0 Using "######"
D = B$[5,6] \ M = B$[3,4] \ Y = B$[1,2] \ L = 0
If Fra(Y / 4) = 0 If M > 2 Let L = 1
D0 = FNS(Z)
Mat Read #ch_ctrl,19,50;P9$;
Mat Read #ch_ctrl,60,50;P60$;
Mat Read #ch_ctrl,61,0;P61$;
Mat Read #ch_ctrl,182,60;NDNC;
Mat Read #ch_ctrl,182,64;NDNCBO;
Read #ch_ctrl,20,180;REFINV \ REFINV = REFINV + 1
Write #ch_ctrl,20,180;REFINV;
Read #ch_ctrl,0,182;INVDATE;
mat read #1,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
H1 = S9[2]
Gosub L_7000 ! read header
!if custom_customer$="HTBERRY" ! no longer custom
	COMMSRVCHG = CFIN[8]
	Mat Write #ch_roh,H1,568;COMMSRVCHG;
!Endif

OREF[1] = REFINV
H0[8] = INVDATE
Gosub L_7200 ! read totals
Gosub L_5100 ! unpack holds
T9[1] = 0 \ T9[6] = 0 \ T9[7] = 0 \ T9[3] = 0
Gosub L_7800 ! read hold exceptions
Gosub L_5400 ! get customer
let keysot$=h5[7] using "##"
search #ch_sot,2,1;keysot$,rec_sot,e
if e<>0
	let ot2[13]=0
else
	mat read #ch_sot,rec_sot,32;ot2;
endif
Gosub CHECK_NUMDAY_NOCOMM
If NOCOMM Goto COMM_SKIP
Gosub L_6100
COMM_SKIP: Rem
K11$ = " ",K11$
K11$[1,6] = H0[7] Using "######"
L_1020: Search #ch_rol,3,1;K11$,L1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_2000
X2 = K11$[1,6] \ If X2 <> H0[7] Goto L_2000
Gosub L_7100 ! read line items
If S2[0] = 3 Goto L_1020 ! message line
if ot2[13]<>0 gosub calcnewload: 

Gosub L_6500 ! check order exception
Goto L_1020
L_2000: Rem TOTALS
Gosub L_6600 ! CHECK ORDER EXCEPTIONS
Gosub L_5140 ! HOLD CODES
Gosub L_7300 ! WRITE TOTAL RECORD
S9[0] = H0[7] \ S9[1] = R5 \ S9[3] = 2 \ S9[4] = 221
S9[5] = 0 \ S9[6] = 0 \ S9[7] = 0 \ S9[8] = 0 \ S9[9] = 0
CTLC=ch_ctrl;s9[2]=h1
CHOPEN[0] = 1;CHOPEN[1] = ch_prod;CHOPEN[2] = ch_roh;CHOPEN[3] = ch_rol;CHOPEN[4] = 0
CHOPEN[5] = 0;CHOPEN[6] = 0;CHOPEN[7] = 0;CHOPEN[8] = 0;CHOPEN[9] = 0
! Call "MXRASL5",S9[],CHOPEN[]
Call "MXRASL5.DL4",intco,Ctlc,S9[],CHOPEN[]
Gosub L_3000
Gosub DO_ORDER_TOTALS
If NOCOMM !"commission amt becomes zero cct#146887
  For I = 0 To 4
    SLSM[I + 5] = 0
    SCOM[I] = 0
  Next I
  Mat Write #ch_roh,H1,278;SLSM;
  Mat Write #ch_roh,H1,318;SCOM;
End If 
S9[3] = 99
Goto OUTEND
L_3000: Rem CHANGE STATUS
K11$ = " ",K11$;K11$[1,2] = H0[0]
K11$[3,8] = H0[7] Using "######"
Search #ch_roh,5,1;K11$,R8,E \ If E Gosub ERR_SEARCH
H0[0] = 5
If H5[7] = 16 And P61$[55,55] = "N" Let H0[0] = 6
K11$ = " ",K11$;K11$[1,2] = H0[0]
K11$[3,8] = H0[7] Using "######"
Search #ch_roh,4,1;K11$,R8,E \ If E Gosub ERR_SEARCH
Gosub L_6900
Return 
L_3500: Rem "================================== calculate terms date/amt
TRMS[0] = 0;TRMS[1] = 0;CDAY = 0
If H0[12] > 0 And H0[12] <= 99
  Mat Read #ch_art,H0[12],52;TRMS;
  Mat Read #ch_art,H0[12],76;CDAY;
End If 
If Not(H0[8]) Let T2[22] = 0;T2[23] = 0 \ Goto L_3630
D$ = H0[8] Using "&&&&&&"
D3[0] = D$[3,4];D3[1] = D$[5,6];D3[2] = D$[1,2]
If TRMS[1] < 0 Goto L_3560
Call DateToJulian(1,D$,D$,E)
If E Let T2[22] = 0;T2[23] = 0 \ Goto L_3630
D2 = D$;D2 = D2 + TRMS[1];D$ = D2 Using "&&&&&&"
Call JulianToDate(1,D$,D$,E)
If E Let E = 0 \ Gosub ERR_SEARCH
D3[0] = D$[1,2];D3[1] = D$[4,5];D3[2] = D$[7,8]
Goto L_3600
L_3560: Rem "terms are days into next month
D3[0] = D3[0] + 1 \ If D3[0] > 12 Let D3[0] = 1;D3[2] = D3[2] + 1
If CDAY If D3[1] > CDAY Let D3[0] = D3[0] + 1 \ If D3[0] > 12 Let D3[0] = 1;D3[2] = D3[2] + 1
D3[1] = Abs(TRMS[1])
If D3[0] > 12 Let D3[0] = 1;D3[2] = D3[2] + 1
If D3[2] > 99 Let D3[2] = D3[2] - 100
L_3575: D$ = D3[2] * 10 ^ 4 + D3[0] * 10 ^ 2 + D3[1] Using "&&&&&&"
Call DateToJulian(D$,D$,E) \ If Not(E) Goto L_3600
D3[1] = D3[1] - 1
If D3[0] = 2 If D3[1] < 28 Let T2[22] = 0;T2[23] = 0 \ Goto L_3630
If D3[0] <> 2 If D3[1] < 30 Let T2[22] = 0;T2[23] = 0 \ Goto L_3630
Goto L_3575
L_3600: Rem "got due date, place into file variables
T2[22] = FNR((T2[1] - T2[3] - H6[6]) * TRMS[0] / 100)
T2[23] = D3[2] * 10 ^ 4 + D3[0] * 10 ^ 2 + D3[1]
If TRMS[1] = 99 Let T2[23] = H0[8]
L_3630: Return 
L_5100: Rem "=================================== UNPACK T2[21] TO T9[x]
X2 = T2[21] \ For K = 0 To 11
  T9[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
L_5140: Rem "=================================== PACK CHAIN TYPE FROM T9[]
X2 = 0 \ For K = 0 To 11
  If T9[K] Let X2 = X2 + 2 ^ K
Next K \ T2[21] = X2 \ Return 
L_5400: Rem "==================== get customer record #
K5$ = H0[4] Using "######"
Search #Ch_cust,2,1;K5$,R5,E \ If E Gosub ERR_SEARCH
Return 
L_6100: Rem ! "========================== commission
Gosub L_6800
J$ = " ",J$ \ J$ = H0[11] Using "###"
Search #ch_slsm,2,1;J$,V1,E \ If E Gosub ERR_SEARCH
Mat Read #ch_slsm,V1,0;S$;
Gosub L_7300
Gosub L_6900
! Swap 1,"MXSLSCOM" ! change to the call5
S9[1] = IntCo
S9[2] = H0[11]
X3=V1
clear ch[]
Ch[1]=ch_ctrl;ch[3]=ch_prod;ch[5]=ch_cust;ch[6]=ch_prwh
ch[8]=ch_roh;ch[9]=ch_rot;ch[10]=ch_rol;ch[13]=ch_slsm
Call "MXSLSCOM5",S9[],CH[],R5,H1,V1,CFIN[] 
V1=x3
Gosub L_7000
Return 
CHECK_NUMDAY_NOCOMM: Rem"cct146887 check number of day for no commission
NOCOMM = 0
If H5[7]=19 Return ! "not on this order type
X2 = H0[8] \ Gosub L_7820 \ JINVDATE = 0 \ JINVDATE = X2
X2 = H0[10] \ Gosub L_7820 \ JSHPDATE = 0 \ JSHPDATE = X2
If H0[5] !"backorder
  If NDNCBO If (JINVDATE - JSHPDATE) > NDNCBO Let NOCOMM = 1
Else 
  If NDNC If (JINVDATE - JSHPDATE) > NDNC Let NOCOMM = 1
End If 
If NOCOMM
  For I = 0 To 4
    SLSM[I + 5] = 0
    SCOM[I] = 0
  Next I
  Write #ch_roh,H1,278;SLSM;
  Write #ch_roh,H1,318;SCOM;
End If 
Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
if x2<=0 Return
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
L_6500: Rem CHECK ORDER LINE EXCEPTIONS
GP = L5[3] - S3[12]
If H6[1] Or L7[4] <= 0 Return 
If H5[7] = 16 Return 
If EX[3] If GP < EX[3] Let T9[1] = 1
If EX[4] If GP > EX[4] Let T9[1] = 1
If EX[9] If L5[0] < EX[9] Let T9[6] = 1
If EX[10] If L5[0] > EX[10] Let T9[6] = 1
If EX[13] If S3[13] < EX[13] Let T9[7] = 1
If EX[14] If S3[13] > EX[14] Let T9[7] = 1
If EX[17] If Not(L5[3]) Let T9[1] = 1
If L5[3] If EX[17] If FNR((GP / L5[3]) * 100) < EX[17] Let T9[1] = 1
If L5[3] If EX[18] If FNR((GP / L5[3]) * 100) > EX[18] Let T9[1] = 1
if custom_customer$="WENELSON" goto skip_password1:
Mat Read #ch_ctrl,66,16;F1$;
If F1$[1,1] <= " " Let T9[1] = 0
Mat Read #ch_ctrl,66,96;F1$;
If F1$[1,1] <= " " Let T9[6] = 0
Mat Read #ch_ctrl,66,112;F1$;
If F1$[1,1] <= " " Let T9[7] = 0
skip_password1: ! dont check passwords
Gosub L_5140
Return 
L_6600: Rem CHECK ORDER TOTALS EXECPTIONS
Gosub L_6800
GP = H5[13] - H5[14]
If H6[1] Or TOT_SELL <= 0 Return 
If H5[7] = 16 Return 
If EX[1] If GP < EX[1] Let T9[1] = 1
If EX[2] If GP > EX[2] Let T9[1] = 1
If EX[7] If T2[1] < EX[7] Let T9[6] = 1
If EX[8] If T2[1] > EX[8] Let T9[6] = 1
If EX[11] If T2[17] < EX[11] Let T9[7] = 1
If EX[12] If T2[17] > EX[12] Let T9[7] = 1
If EX[5] If T2[5] + H6[6] < EX[5] Let T9[3] = 1
If EX[15] If Not(H5[13]) Let T9[1] = 1
If EX[6] If T2[5] + H6[6] > EX[6] Let T9[3] = 1
If H5[13] If EX[15] If FNR((GP / H5[13]) * 100) < EX[15] Let T9[1] = 1
If H5[13] If EX[16] If FNR((GP / H5[13]) * 100) > EX[16] Let T9[1] = 1
GTM = 0 \ If T2[1] Let GTM = (T2[1] - T2[17]) / T2[1] * 100
If T2[1] <> 0 Or T2[17] <> 0
  If EX[15] If GTM < EX[15] Let T9[1] = 1
  If EX[16] If GTM > EX[16] Let T9[1] = 1
  If EX[1] If (T2[1] - T2[17]) < EX[1] Let T9[1] = 1
  If EX[2] If (T2[1] - T2[17]) > EX[2] Let T9[1] = 1
End If 
if custom_customer$="WENELSON" goto skip_password2:
Mat Read #ch_ctrl,66,16;F1$;
If F1$[1,1] <= " " Let T9[1] = 0
Mat Read #ch_ctrl,66,48;F1$;
If F1$[1,1] <= " " Let T9[3] = 0
Mat Read #ch_ctrl,66,96;F1$;
If F1$[1,1] <= " " Let T9[6] = 0
Mat Read #ch_ctrl,66,112;F1$;
If F1$[1,1] <= " " Let T9[7] = 0
skip_password2: ! 
Return 
L_6800: Rem "================================= gp component(s)
H5[13] = T2[1] - H6[6] \ H5[14] = T2[17]
If P9$[35,35] = "Y" Let H5[13] = H5[13] + T2[5] + H6[6]
If P9$[36,36] = "Y" Let H5[13] = H5[13] - T2[3]
If P9$[37,37] = "Y" Let H5[14] = H5[14] + T2[20]
H5[14] = H5[14] + TOT[2]
If P9$[38,38] = "Y" Let H5[13] = H5[13] + T2[6]
H5[13] = H5[13] + TOT[1]
Return 
L_6900: Rem "========================= write header
Mat Write #ch_roh,H1;H0
Mat Write #ch_roh,H1,78;H4
Mat Write #ch_roh,H1,104;H5
Mat Write #ch_roh,H1,278;SLSM
Mat Write #ch_roh,H1,318;SCOM
Mat Write #ch_roh,H1,408;H6;
Mat Write #ch_roh,H1,512;OREF;
Return 
L_7000: Rem "====================================== read header
Mat Read #ch_roh,H1;H0
Mat Read #ch_roh,H1,56;TOT_SELL
Mat Read #ch_roh,H1,78;H4
Mat Read #ch_roh,H1,104;H5
Mat Read #ch_roh,H1,278;SLSM
Mat Read #ch_roh,H1,318;SCOM
Mat Read #ch_roh,H1,408;H6
Mat Read #ch_roh,H1,512;OREF
Return 
L_7100: Rem "===================================== read line record
Mat Read #ch_rol,L1,8;L3;
Mat Read #ch_rol,L1,16;L4;
Mat Read #ch_rol,L1,32;L5;
Mat Read #ch_rol,L1,56;L6;
Mat Read #ch_rol,L1,168;L7;
Mat Read #ch_rol,L1,256;S2;
Mat Read #ch_rol,L1,260;S3;
mat read #ch_rol,L1,494;lc0;
mat read #ch_rol,L1,140;l1$;
L_7200: Rem "================================ read totals
Mat Read #ch_rot,H0[3],8;T2;
Mat Read #ch_rot,H0[3],168;MCODE;
Mat Read #ch_rot,H0[3],208;MCHARGE;
Mat Read #ch_rot,H0[3],328;TOT;
Return 
L_7300: Rem "============================= write total record
Gosub L_3500
Mat Write #ch_rot,H0[3],8;T2;
Return 

! ---------------------------------------------------
read_prod:! read product file
Rem {begin src/inc/read.prod.i}
    Mat Read #CH_PROD,REC_PROD,0;PR_A$
    Mat Read #CH_PROD,REC_PROD,156;B
    Mat Read #CH_PROD,REC_PROD,256;A
    Mat Read #CH_PROD,REC_PROD,460;A1
    Mat Read #CH_PROD,REC_PROD,508;A2
    Mat Read #CH_PROD,REC_PROD,512;PFU1
    Mat Read #CH_PROD,REC_PROD,554;PFU2
    Mat Read #CH_PROD,REC_PROD,596;PRPARC
    Mat Read #CH_PROD,REC_PROD,620;LM
    Mat Read #CH_PROD,REC_PROD,624;PR_PO
    Mat Read #CH_PROD,REC_PROD,628;AGEDAY
    Read #CH_PROD,REC_PROD,630;LLC
    Mat Read #CH_PROD,REC_PROD,632;PSN$
    Mat Read #CH_PROD,REC_PROD,652;PSN
    Mat Read #CH_PROD,REC_PROD,660;U2
    Mat Read #CH_PROD,REC_PROD,664;LBSORD
    Mat Read #CH_PROD,REC_PROD,670;U4
    Read #CH_PROD,REC_PROD,678;U3
    Mat Read #CH_PROD,REC_PROD,684;U3$
    Mat Read #CH_PROD,REC_PROD,744;HZ$
    Mat Read #CH_PROD,REC_PROD,834;A3
    Mat Read #CH_PROD,REC_PROD,846;PFTB
    Read #CH_PROD,REC_PROD,854;UPCT
    Mat Read #CH_PROD,REC_PROD,856;C1$
    Mat Read #CH_PROD,REC_PROD,894;PR_C4
    Read #CH_PROD,REC_PROD,938;PF_LOAD2
    Mat Read #CH_PROD,REC_PROD,944;PR_A2$
    Mat Read #CH_PROD,REC_PROD,974;PFCO
    Mat Read #CH_PROD,REC_PROD,990;PLV
    Mat Read #CH_PROD,REC_PROD,1002;PLC
    Mat Read #CH_PROD,REC_PROD,1018;PFN
    Mat Read #CH_PROD,REC_PROD,1030;STK
    Mat Read #CH_PROD,REC_PROD,1048;FDT
    Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
    Mat Read #CH_PROD,REC_PROD,1066;PRBASE
    Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
    Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
    Mat Read #CH_PROD,REC_PROD,1088;FUT
    Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
    Mat Read #CH_PROD,REC_PROD,1108;PRREDI
    Mat Read #CH_PROD,REC_PROD,1120;PIC$
    Mat Read #CH_PROD,REC_PROD,1270;PRD0
    Mat Read #CH_PROD,REC_PROD,1282;PRIML$
    Mat Read #CH_PROD,REC_PROD,1294;PRD1
    Mat Read #CH_PROD,REC_PROD,1304;PRD2
    Rem {end read.prod.i}
return
! --------------------------------------------------
read_prwh: ! read prodwhse ifle
	Rem {begin src/inc/read.prwh.i}
		Mat Read #CH_PRWH,REC_PRWH,0;W1$
		Mat Read #CH_PRWH,REC_PRWH,32;W1
		Mat Read #CH_PRWH,REC_PRWH,38;W2
		Mat Read #CH_PRWH,REC_PRWH,78;W3
		Mat Read #CH_PRWH,REC_PRWH,228;W5
      Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
      Read #CH_PRWH,REC_PRWH,396;WHLPOOL
      Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
      Read #CH_PRWH,REC_PRWH,404;FCWGT
      Mat Read #CH_PRWH,REC_PRWH,420;W0
      Mat Read #CH_PRWH,REC_PRWH,428;WH7
      Mat Read #CH_PRWH,REC_PRWH,444;WH8
      Mat Read #CH_PRWH,REC_PRWH,540;WH9
      Mat Read #CH_PRWH,REC_PRWH,696;W7
      Mat Read #CH_PRWH,REC_PRWH,756;WH3$
      Mat Read #CH_PRWH,REC_PRWH,780;WHLV
      Read #CH_PRWH,REC_PRWH,798;WHRPLN
      Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
      Mat Read #CH_PRWH,REC_PRWH,842;WHLM
      Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
      Read #CH_PRWH,REC_PRWH,894;RESTRICTED
      Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
      Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
      Read #CH_PRWH,REC_PRWH,922;VLIST
      Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
      Read #CH_PRWH,REC_PRWH,938;WHBASE
      Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
      Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
      Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
      Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
      Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
      Rem {end read.prwh.i}
return
!------------------------------------------------
CALC_LOAD: Rem
PREC[0] = REC_PROD
IF NOT(PREC[0]) LET PREC[0]=L4[0]
PREC[2] = FNR(Abs((L6[4] * L7[2]) / A[5]))
If L6[4] And L6[4] <> A[6] ! line lbs different from prod file lbs
  PREC[3] = L6[4]
Else 
  PREC[3] = 0
End If 
CNVTA = -999 ! SET TO CALCULATE BASED UPON PROD/PRODWHSE
OTYPE = - H5[7] 
Call "MXLOAD5.DL4",OTYPE,WH,LTBL,PREC[],CNVTA,Intco,E$,RSTR$
Return 




L_7800: Rem READ ORDER HOLD CODE EXCEPTION LIST
Mat Read #ch_ctrl,88,1760;F$;
CHNL = findchannel() ! 80
If Err 0 Gosub ERR_TRAP
Open #CHNL,F$
If Err 0 Gosub ERR_TRAP
Mat Read #CHNL,H5[7],0;EX;
Close #CHNL
Return 

DO_ORDER_TOTALS: Rem
S9[0] = H0[7] \ S9[1] = R5 \ S9[3] = 2 \ S9[4] = 221
Mat CH = Zer
ch[1] =0 ! misc changes
CH[2] = 0 ! zone
CH[3] = ch_prod
CH[4] = 0 ! 4 commcode
CH[5] = ch_cust ! 5
CH[6] = ch_prwh ! 30
CH[7] = ch_ros ! 9
CH[8] = ch_roh ! 8
CH[9] = ch_rot ! 10
CH[10] = ch_rol ! 11
CH[11] = 0 ! 12 sproddesc
CH[12] = 0 ! custtax
CH[13] = ch_slsm ! 14
CH[14] = 0 ! 15 taxcode
CH[15] = 0 ! 16 sprodlot
CH[16] = 0 ! 17 sordlot
CH[17] = 0 ! 26 ccodes
CH[18] = 0 ! delivery charges
CH[19] = 0 ! misc charges
ch[20] = ch_art ! arterms
If p61$[109,109]="Y" let ch[20]=50   !* arterms code
PASSINFO[0] = 0 ! credit chk
PASSINFO[1] = 0 ! no cred chk
PASSINFO[2] = 0 ! no except chk
PASSINFO[3] = 1 ! write totals
PASSINFO[4] = 1 ! no rettl cust ord
PASSINFO[5] = 0 ! no manual edit clr
PASSINFO[6] = 0 ! clr cash
PASSINFO[10] = 0 ! for term code misc cost - calculate for invoice
Call "ordertotal",S9[],H1,PASSINFO[],CH[],T1[],T2[],MCODE[],MCHARGE[],TOT[],MCTXBL[],DCLVL,R5,V1,CFIN[]
Return 

calcnewload: ! calc new load cost based upon order type
if l3[0]<>0 return ! not a stock item
if lc0=11 return !11 - special salesman cost
if lc0=10 return ! !10 - rebate salesman cost 
if ot2[13]<>1 return ! flag to update load cost
if l4[0]<=0 return ! no product record number
! read the product file
REC_PROD = L4[0]
gosub read_prod:   
let ld1=0 ! that is the new load cost
ORGLOADCOST=0
NEWLOADCOST=0
If P9$[32,32] = "Y" ! warehouse pricing
	! get prodwhse file
	let whlm[0]=0;w3[17]=0
	Key_prwh$ = " ",Key_prwh$
	Key_prwh$[1,12] =L1$[1,12]
	Key_prwh$[13,14] = H4[2] Using "##"
	Search #CH_PRWH,2,1;Key_prwh$,REC_PRWH,E \ If E goto outend:
	If Not(E)
		gosub read_prwh: 
	ELSE
		GOTO ENDWHLOAD: ! no warehouse record
	endif
	if whlm[0]=0 
       	LD1 = W3[17]
		!goto endwhload:
		if LD1<=0 goto endwhload:
		GOTO ENDLOADCOST:
	endif
	WH = H4[2];LTBL = WHLM[0]
    Gosub CALC_LOAD
    LD1 = CNVTA
	if ld1>0 goto endloadcost: 
End If 
	endwhload: ! end warehouse load costing
	! check the product load table
	If LM[0]
        WH = 0;LTBL = LM[0]
        Gosub CALC_LOAD
        LD1 = CNVTA 
    Else 
       	LD1 = B[8]
    End If ! find load table
	endloadcost: ! end finding load cost
	if ld1>0 and ld1<>l5[1]
		LET ORGLOADCOST=L5[1]
		LET NEWLOADCOST=LD1	
		Mat Read #ch_rol,l1,32;L5;
		Mat Read #ch_rol,L1,168;L7;
		Mat read #CH_ROL,l1,250;UN; 
		Mat read #ch_rol,l1,260;S3;
		Mat read #CH_ROL,l1,452;UNF   
		let l5[1]=ld1
		If Not(UNF[5]) Let UNF[5] = 1
		netcost=l5[1]
		S3[13] = FNR(L7[2] * l5[1])
		If H5[7] = 4 Or H5[7] = 15 ! "bill and hold
			S3[12] = FNR(S3[7] * NETCOST)
		Else 
			S3[12] = FNR(L7[4] * NETCOST)
		End If 
		If UN[2] = -2 Let S3[12] = FNR(NETCOST * Sgn(L7[4]));S3[13] = FNR(NETCOST[0] * Sgn(L7[2]))
		Mat Write #ch_rol,l1,32;L5;
		Mat Write #ch_rol,l1,260;S3;
	endif
	endloadcstupd: ! 
	if p60$[44,44]="Y" then gosub edittrack ! for everyone? lets try it



return

Edittrack: ! do edittracking
FOR I=0 TO 2 \ LET FCHAN[I]=-1 \ NEXT I
if p60$[44,44]<>"Y" return
IF ORGLOADCOST=NEWLOADCOST return
FOR I=0 TO 2 \ LET FCHAN[I]=-1 \ NEXT I
! fchan[0] =-1 edittrack not open
! fchan[1] =-1 usercntrl not open
etr.Status=h0[0] ! STATUS
etr.OrdNum=H0[7]
etr.LineNum=L3[2]
etr.ProdCode$=l1$[1,12]
etr.etaction=234
!CALL $LOGIC,1,2^0,PL1[3],etnonstock                                             
etr.NstkFlag = 0 ! stock items only
etr.umsell=0
let etr.umsell=un[0]
! There is no qty change ... just for tracking
etr.OrgQtyOrd=l7[2]
etr.OrgQtyShip=l7[4]
etr.OrgQtyBO=l7[3]
etr.NewQtyOrd=l7[2]
etr.NewQtyShip=l7[4]
etr.NewQtyBO=l7[3]
!
etr.InvNum=oref[1]
etr.OrgOrdTot=t2[0]
etr.CustNum=h0[4]
etr.Printer=0
let etr.OrgLoadCost=0
let etr.NewLoadCost=0
let etr.umcost=0
IF ORGLOADCOST<>0 OR NEWLOADCOST<>0
	IF ORGLOADCOST<>NEWLOADCOST
		let etr.umcost=un[2]
		let etr.OrgLoadCost=ORGLOADCOST
		let etr.NewLoadCost=NEWLOADCOST ! get load cost
	ENDIF
ENDIF
ETR.AccessCode$ = "Invoicing"+BLANK$
Call MakeEdittrack(e$,IntCo,fchan[],etr.)
Let e$=""
Return


OUTEND: Rem EXIT   close files...if opened in this program!
for x=2 to 9
	if chan[2]=0 try close #Ch_roh Else rem
	if chan[3]=0 try close #Ch_ros Else rem
	if chan[4]=0 try close #ch_rot Else rem
	if chan[5]=0 try close #ch_rol Else rem
	if chan[6]=0 try close #Ch_cust Else rem
	if chan[7]=0 try close #ch_slsm Else rem
	if chan[8]=0 try close #ch_prod Else rem
	if chan[9]=0 try close #ch_prwh Else rem
	If chan[10]=0 try close #ch_sot Else rem
Next X
Try Close #CH_Art Else rem
! Chain "MX234"
END ! now called!
Stop 
Stop 
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM ",MSC$(4)
call programdump("tmp/mx234ase!","")
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
Stop 
Rem {end rtn.error.s}