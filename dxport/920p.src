! ut920p - cost history purge
!
! loadsave -w -n 100,10 -o prog/dxport/920p.dl4 src/920p.src
!
! converted: 10/11/11
Rem costhistpurge cost change history purge
Rem              purge of costhist file
Rem create rjs 04/29/2011 task #3560
Rem BEDIT Version: 2.3 OBJECT CODE     Created: MAY  2, 2011  10:02:58
Rem /w2/papermaster/r2005//usr/acct/becky/work/r2005/misc/costhistpurge.src (univ2) [becky] {34710}
Rem  Copyright (c) 2011 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc"
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
Declare Intrinsic Sub DateToJulian,InpBuf,String,Findf
! Option Default Dialect IRIS1

If Err 0 Gosub ERR_TRAP
Dim J$[50],J0$[15],J1$[50],J2$[20],J5$[70],J7$[40],J4$[50],J9$[50]
Dim F$[50],SPROD$[12],EPROD$[12],X$[50],MSGTXT$[75]
Dim KEY_$[50],KEY1$[50]
Dim 1%,SWHSE,EWHSE,MM,DD,YY
Dim 2%,EFlag[9]
Dim 3%,SDATE,EDATE,JSDATE,JEDATE,X2,CSTHST[13]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[1800],tmp1$[1000],tmp2$[1000],tmp3$[1000],Message$[1000],webstr$[256]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="Z",EndParam$
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128],action1$[30],action2$[30] ! status file
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
F$ = "4/costhist"+Str$(COID)
Open #2,F$
! Gosub DISPLAY_SCREEN
DISPLAY_SCREEN: Rem let's display the header
!Print @0,0;'CS';"costhistpurge";@30,0;"Purge Cost Change History File"
!Print @35,3;'BR';"STARTING";@55,3;"ENDING";'ER';'BD';
!Print @1,5;"   Product";
!Print @1,6;"   Warehouse";
!Print @1,7;"   Date ";
!Print @0,5;" 1> ";@0,6;" 2> ";@0,7;" 3> ";
!Return 
GET_STARTED: Rem default
SDATE = 700101
EDATE = 591231
SWHSE = 0
EWHSE = 99
SPROD$ = " ",SPROD$
EPROD$ = "zzzzzzzzzzzz"
Clear Message$
Eflag=0
returnstatus=0 ! 0=ok on blockids
GET_INPUTS: Rem
EDT_ALL_FLG = 0
!For LINE_LOOP = 1 To 3
!  Gosub EDT_FLDS
!Next LINE_LOOP

!EDT_FLDS: Rem "edit them here
!FLG = 1
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!On LINE_LOOP Gosub PROD_RANGE,WHSE_RANGE,DATE_RANGE
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!Return 
PROD_RANGE: Rem get product range
!J0$ = "2 00123505"
!J1$ = SPROD$
!J5$ = "Enter Starting Product Code "
Call dxget("SPROD",tmp$) ! Gosub ISINPUT
J$=RTrim$(UCase$(tmp$))
if j$="" let j$=SProd$
SPROD$ = J$+Blank$
If SPROD$ = "" Let SPROD$ = "            "
ENDING_PROD: Rem
!J0$ = "2 00125505"
!J5$ = "Enter Ending Product Code "
!J1$ = EPROD$
!Gosub ISINPUT
call dxget("EPROD",tmp$)
J$=RTrim$(UCase$(tmp$))
if j$="" let j$=EProd$
EPROD$ = J$+Blank$ ! EndParam$
If SPROD$ > EPROD$
  EFlag=EFlag+1;Message$=Message$+"Invalid Product Range  " ! Gosub BAD_RANGE
  ! Goto PROD_RANGE
End If 
! Return 
WHSE_RANGE: Rem get product warehouse range
!J5$ = "Enter Starting Warehouse 0-99 0=product main level"
!J0$ = "3000033506" \ J1 = SWHSE
call dxget("SWHSE",tmp$) !Gosub ISINPUT
if rtrim$(tmp$)="" let tmp$=Str$(SWHSE)
J1=tmp$
If J1>=0 Let SWHSE = J1
ENT_ENDWHSE: Rem
!J5$ = "Enter Ending Warehouse 0-99 0=product main level"
!J0$ = "3000035506" \ J1 = EWHSE
Call dxget("EWHSE",tmp$) ! Gosub ISINPUT
if rtrim$(tmp$)="" let tmp$=Str$(EWHSE)
J1=tmp$ ! Whse
If J1>=0 Let EWHSE = J1
If EWHSE < SWHSE
  Message$=Message$+"Invalid Warehouse Range  " !Gosub BAD_RANGE
  EFlag=EFlag+1 ! Goto WHSE_RANGE
End If 
!Return 
DATE_RANGE: Rem get the range
!J0$ = "5 00063507"
!If SDATE = 0 Let SDATE = 700101
!J1 = SDATE
!J5$ = "Please Enter the Starting Date MMDDYY  "
Call dxget("SPDate",tmp$) ! Gosub ISINPUT \ X2 = 0 ! sent as MMDDYY
If tmp$="" 
	Let X$=Str$(SDate)
Else
	x$=tmp$[5,6],tmp$[1,4]
Endif
j1=x$;E=0
If J1 Let X2 = J1 \ Gosub YMD2JUL \ E=1
if e
	message$=message$+"Invalid Start Date  "
	Eflag=eflag+1;Eflag[1]=1
Endif
SDATE = J1;JSDATE = X2
ENT_ENDDATE: Rem "Ending
!J0$ = "5 00065507"
!J5$ = "Please Enter the Ending date MMDDYY    "
!If EDATE = 0 Let EDATE = 591231
!J1 = EDATE
!Gosub ISINPUT
Call dxget("EPDATE",tmp$)
if tmp$=""
	let x$=Str$(EDate)
Else
	x$=tmp$[5,6],tmp$[1,4]
Endif
J1=x$;E=0
X2 = J1 \ Gosub YMD2JUL \ Let E=1
If E
	message$=Message$+"Invalid Ending Date  "
	Eflag=Eflag+1;Eflag[1]=1
Endif
EDATE = J1;JEDATE = X2
If JEDATE < JSDATE And not(EFlag[1])
  Message$=Message$+"Invalid Date Range"
  EFlag=Eflag+1
End If 
X2 = SDATE \ Gosub NUM2DATE
SDATE = X$[3]
X2 = EDATE \ Gosub NUM2DATE
EDATE = X$[3]
!Return 
WHAT_TO_DO: Rem well what
If EFlag>0 ! something entered wrong
	Goto Outerr
	!Goto Outend
Endif
! AS IT MAY TAKE A WHILE - CREATE A STATUS FILE!
ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
BaseName1$ = "costhist_purge"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
StatusFile$ = ReportDir$ + "/"+BaseName1$
Call FindF(StatusFile$,tmp)
If tmp Kill StatusFile$
StatChan = 88 ! FindChannel() ! channel to build text file need fixed channel
Try Close #88 Else Rem
Try
	Build #StatChan,StatusFile$ As "TEXT"
Else
	returnstatus=1
	let message$=messaGE$+"Error in Building Status File "
	goto outerr
end TRY
Try Close #StatChan Else Rem
Try
	Open #StatChan,StatusFile$
else
	returnstatus=1
	let message$=message$+"Error in Opening Status File "
	goto outerr
end TRY
Print #StatChan;"Purge Process Started..."
! PAUSE 20
e = AddToMYReports(BaseName1$) 
if e<0
	message$=message$+"Error adding to my reports!" 
	returnstatus=1
	goto outerr
endif
returnstatus=0 ! or is it 1?
message$="Please check under My Reports "+basename1$+" for status and completion"
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)
! let's print selections
Message$="PROD: START "+SPROD$+" END "+EPROD$
Print #StatChan;message$
Message$="WHSE: START "+sTR$(SWHSE)+" END "+STR$(EWHSE)
Print #StatChan;message$
TMP$=PDATE$(SDATE)
MESSAGE$="DATE: START "+TMP$+" END "
TMP$=PDATE$(EDATE)
MESSAGE$=MESSAGE$+TMP$
Print #StatChan;message$
!Print @0,23;'CE';"Enter #:field to edit  R: reselect  P: purge  or  E: exit ";
!Input Len 16384 + 3;""X$ \ Call String(1,X$)
!Print @0,23;'CE';
!If X$ = "P" Goto START_PURGE
!If X$ = "E" Let J8 = 0 \ Goto OUTEND
!If X$ = "R"
!  Print @35,7;'CL';
!  Goto GET_STARTED
!End If 
!If X$ = "" Goto WHAT_TO_DO
!LINE_LOOP = X$
!Gosub EDT_FLDS
!Goto WHAT_TO_DO
START_PURGE: Rem let's get going
CTR = 0;Count=0
!Print @10,15;"Purging.... ";
KEY_$ = " ",KEY_$
KEY_$ = SPROD$[1,12]
PURGE_LOOP: Search #2,3,1;KEY_$,R2,E \ If E=2 Goto OUTDone
if e gosub err_search
If KEY_$[1,12] > EPROD$[1,12] Goto OUTDone
CTR = CTR + 1
If Not(Fra(CTR / 100)) ! show progress
	Print #StatChan;"Checking ";Str$(CTR);" Product: ";Key_$[1,12]
	!Print @25,15;'CL';CTR;
Endif
Mat Read #2,R2,52;CSTHST
If CSTHST[6] < SWHSE Goto PURGE_LOOP
If CSTHST[6] > EWHSE Goto PURGE_LOOP
If CSTHST[0] < JSDATE Goto PURGE_LOOP
If CSTHST[0] > JEDATE Goto PURGE_LOOP
KEY1$ = " ",KEY1$
KEY1$[1,14] = KEY_$[1,14]
KEY1$[15,16] = KEY_$[26,27]
KEY1$[17,27] = KEY_$[15,25]
Search #2,2,2;KEY1$,R,E \ If E Gosub ERR_SEARCH
Search #2,5,2;KEY1$,R,E \ If E Gosub ERR_SEARCH
Search #2,5,1;KEY_$,R,E \ If E Gosub ERR_SEARCH
E = 3
Search #2,1,0;KEY_$,R2,E \ If E Gosub ERR_SEARCH
Count=Count+1
Goto PURGE_LOOP

YMD2JUL: Rem "convert yymmdd to julian
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
If E Return 
X2 = X$[1,5]
Return 1
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$ = X2 Using "&&&&&&"
YY = X$[1,2]
MM = X$[3,4]
DD = X$[5,6]
If YY > 67 Let YY = 1900 + YY
If YY < 68 Let YY = 2000 + YY
X$ = " ",X$
X$[1,4] = YY Using "&&&&"
X$[5,6] = MM Using "&&"
X$[7,8] = DD Using "&&"
If Not(X2) Let X$ = ""
Return 
!BAD_RANGE: Rem
!MSGTXT$ = "Ending value must be Greater than or Equal to starting value!"
!Call "errmsg",MSGTXT$
!Return 
!ISINPUT: Rem INPUT ROUTINE
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!Call "INPUT",J1,J$,J0$,J1$,J4$,J5$
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!Return 
OutDone: ! done with file
message$="Complete "+Str$(COUNT)+" records purged"
Print #StatChan;Message$
try close #StatChan Else Rem
Goto OUTEND
OUTEND: Rem "done
!Print 'CS';
!Close 
!Chain "MX000"
try call dxclose() else rem
END
OutErr: ! send back message
returnstatus=1 ! always on blockid errors
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
		call AddToStr(e$,rstr$,WebStr$)
		call SetOutPut(e$,rstr$)
End
!
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
message$ = "RETURN STATUS",(E + (CTERR * .001))
message$ = message$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
Print #StatChan;Message$
Call programdump("tmp/920pse!","")
goto OutEnd ! outerr ! already past sending message to user
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
End 
Rem {end rtn.error.s}