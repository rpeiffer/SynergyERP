! >>> Program 326b
!
! description 326 Collection Note Renumber
!
! loadsave -w -n 100,10 -o prog/dxport/326b.dl4 src/326b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL 10, 2006  19:40:44
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/mx/mx326b.src (univ2) [bill] {10847}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub DateToJulian,InpBuf,String,Time,VerifyDate
!Option Default Dialect IRIS1

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
Declare External Sub UserCntrl
!
!!Option Default Dialect IRIS1
Try 
Rem mx326b         COLLECTION REPORT PRINT & RENUMBER
Rem Author:       B.SWET 03/13/96
Rem                UNIVERSAL BUSINESS SYSTEMS
If Err 0 Gosub ERR_TRAP
dim A2$[50],1%,A5[10],3%,STATUS
Dim 1%,E
Dim 2%,SDATE,X1,X2,P1,P2,SFOUND,DIV,TMP
Dim 3%,R1,R2,R3,R4,COUNTER,RENUMBERCOUNT
Dim 3%,CN3[4],CUST,CNUM,FOLLOW,LINE_,CFIN[8]
Dim A1$[30],D$[8],F$[35],CN$[70]
Dim K$[30],K1$[30],K2$[30],K3$[50],K4$[50],K5$[50],K33$[50]
Dim M$[6],N$[30],CDIV$[2],DNAME$[24],BCUST$[6],ECUST$[6],CURRCUST$[6]
Dim T9$[26],X$[10],Z1$[25],X1$[10],2%,EDATE
Dim RENUMBER$[2],PRINTOPTION$[1]
Dim 2%,DT3[1],JSDATE,JWDATE,3%
Dim 3%,INCR,LASTCALL,NEXTCALL,REASONSKIP
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1],j$[50]
!!! check this
Dim b$[200]!

!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!

j8 = 0
try
	J9 = Chf(0) 
else
	let j8=99 ! browser
end try
L9 = 60 \ If J8 Let L9 = 22
If Err 0 Gosub ERR_TRAP
for ctr=1 to 99
	if ctr<>9
		Try Close #ctr Else Rem
	endif
next ctr

COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1

!Call DXGet("S_USER.ID",tmp$) ! get from system variable
! Let UserID$=UCase$(tmp$) ! make sure it's UPPERCASE as that's what PM uses
Call UserCntrl(USERID$,A2$,A5[],status,intCo)
if a5[6]=0
	eflag=99
	message$="User is not authorized to edit/delete/purge collection notes.  Please contact your administrator."
	goto outend:
Endif


Read #1,3;N$;
Mat Read #1,3,164;D$;
M$ = "##########"
Read #1,3,172;SDATE;
X2 = SDATE \ Gosub L_7700
L_900: Rem "=================================== get ranges
!Print 'CS';"326B ";@20,0;"326B A/R COLLECTION NOTES PRINT AND RENUMBER"
!Print @0,2;"THIS PROGRAM WILL RENUMBER &(OPTIONALLY) PRINT DETAILED COLLECTION"
!Print @0,3;"NOTES FOR CALLS RENUMBERED. IT WILL PRINT ANY NOTES SKIPPED IF IT";
!Print @0,4;"COULD NOT RENUMBER IT, OR IT WAS NOT WORTH RENUMBERING.  "
!L_950: Print @10,8;"THIS PROCEEDURE COULD TAKE A WHILE "
!Print @10,12;'CL';"DIVISION #,  0: for All "
!Print @10,14;'CL';"ENTER STARTING CUSTOMER # <CR> FOR FIRST "
!Print @10,15;'CL';"ENTER ENDING CUSTOMER #   <CR> FOR LAST "
!Print @10,16;'CL';"ENTER INCREMENT(IE: GAP BETWEEN CALLS RENUMBERED) "
!Print @10,17;'CL';"SKIP RENUMBERING CUSTOMERS WITH CALL NUMBERS < 10,000 (Y/N)"
!Print @10,18;'CL';"PRINT RENUMBERED ITEMS?( N: NO S: SUMMARY D: DETAIL) "
getdiv: ! 
call dxget("DIV",tmp$)
let j1=tmp$
if j1<0 or j1>99
	let eflag=eflag+1
	let message$=message$+"Invalid Division Entered. "
else
	let div=j1
endif

Call dxget("SCUST",tmp$) \ tmp=tmp$ ! starting customer
if tmp<0 or tmp>999999
	let eflag=eflag+1
	let message$=message$+"Invalid Starting Customer Entered. "
else
	let bcust$=tmp using "######"
endif
Call dxget("ECUST",tmp$)
if rtrim$(tmp$)=""
	let tmp$="999999"
endif
if tmp<0 or tmp>999999
	let eflag=eflag+1
	let message$=message$+"Invalid Ending Customer Entered. "
else
	let ecust$=tmp using "######"
endif
if Bcust$>Ecust$
	let message$=message$+"Ending Customer must be greater than Starting. "
	let eflag=eflag+1
endif

Call dxget("INCREMENT",tmp$) ! auditonly
if rtrim$(tmp$)="" let tmp$="10"
let incr=tmp$
If Fra(INCR) <> 0
	let eflag=eflag+1
	let message$=message$+" Increment Number must be whole number in 1-100 range. "
else
	If INCR <1 or INCR > 100 
		let eflag=eflag+1
		let message$=message$+" Increment Number must be whole number in 1-100 range. "
	endif
endif



Call dxget("SKIPCUST",tmp$) 
if rtrim$(tmp$)="false" let tmp$=""
LET RENUMBER$="Y"
if rtrim$(tmp$)="" ! not a preview
	let Renumber$="N"
endif

Call dxget("RPTYPE",tmp$) 
LET TMP$=UCASE$(rtrim$(tmp$))
LET PRINTOPTION$=TMP$
If printoption$<>"N" and printoption$<>"S" and printoption$<>"D"
	let eflag=eflag+1
	let message$=message$+" Invalid Report Type. "
endif

if eflag<>0 goto outend:
!!! START HERE
FOR J=2 TO 4                             
  READ J1                                
  IF J1=-1 GOTO L_270:                   
  READ #1,88,ABS(J1);F$;                 
  IF J1<=0 ROPEN #J,F$ ELSE  OPEN #J,F$  
L_270: NEXT J                            
DATA -688,736,-1808                      
L_1500: Rem CHECK PRINTER TYPE
P2 = 0
P1 = 0
!Print @0,23;'CL';"WORKING ...please wait";
!Signal 3,0
!If P2 Print 'CS'
Rem ======================================= PRINT/RENUMBER LOOP
K$ = " ",K$
K$ = ""
K1$ = ""
CDIV$ = ""
K$ = BCUST$
L_2060: Search #3,3,1;K$,R1,E
If E = 2 Goto L_9100
If E Gosub ERR_SEARCH
If K$[1,6] > ECUST$ Goto L_9100
Mat Read #3,R1;CN$;
Mat Read #3,R1,70;CN3;
K2$ = K$[1,6] \ Gosub L_6000
If Not(DIV) Goto L_2090
If CFIN[4] <> DIV Goto L_2060
L_2090: CURRCUST$[1,6] = K$[1,6]
REASONSKIP = 0
Gosub L_3000
Rem NOW DETERMINE IF WE RENUMBER THIS CUSTOMER
If RENUMBER$ = "Y" And LASTCALL < 10000 Let REASONSKIP = 1 \ Goto L_2300
If COUNTER * INCR > 80000 Let REASONSKIP = 2 \ Goto L_2300
If COUNTER * INCR > LASTCALL * .8 Let REASONSKIP = 3 \ Goto L_2300
Rem PASSES, NOW RENUMBER
Gosub L_4000
RENUMBERCOUNT = RENUMBERCOUNT + 1
L_2175: K$[7,14] = "99999999"
L_2180: Goto L_2060
L_2300: Rem! SKIP RENUMBERING- TELL WHY
Gosub L_5800 \ Gosub L_5800
K3$ = " ",K3$
Gosub L_5000
If REASONSKIP = 1 Gosub L_5060
If REASONSKIP = 2 Gosub L_5070
If REASONSKIP = 3 Gosub L_5075
Rem IT SHOULD ALWAYS HAVE ONE OF THESE VALUES(UNLESS PROGRAM WAS CHANGED)
If REASONSKIP <> 1 If REASONSKIP <> 2 If REASONSKIP <> 3 Print #0;"**********UNABLE TO DETERMINE WHY IT SKIPPED- PLEASE INFORM UNIVERSAL CUST #:";K$
Goto L_2175
L_3000: Rem sort collection notes
K3$ = " ",K3$
L_3005: Search #9,3,1;K3$,R1,E
If E = 2 Goto L_3009
If E Gosub ERR_SEARCH
Search #9,5,1;K3$,R1,E
If E Gosub ERR_SEARCH
Goto L_3005
L_3009: K3$ = " ",K3$
K3$ = CURRCUST$
COUNTER = 0
LASTCALL = 0
Rem PUT IN FOR CURRENT CUSTOMER, 1 KEY FOR EACH CALL #, & COUNT
L_3020: Search #3,3,1;K3$,R1,E
If E = 2 Goto L_3130
If E Gosub ERR_SEARCH
If K3$[1,6] <> CURRCUST$[1,6] Goto L_3130
Mat Read #3,R1;CN$;
Mat Read #3,R1,70;CN3;
X2 = CN3[0] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
K2$ = K3$[1,6] \ Gosub L_6000
K1$ = " ",K1$
L_3088: K1$[1,6] = JWDATE Using "######"
K1$[7] = K3$
Search #9,4,1;K1$,R1,E
If E Gosub ERR_SEARCH
COUNTER = COUNTER + 1
totrec=totrec+1
LASTCALL = K3$[7,11]
L_3110: K3$[12,14] = "999"
Goto L_3020
L_3130: K3$ = " ",K3$
Return 
L_4000: Rem ===============================RENUMBER OPTION
!Print @0,23;'CL';"PLEASE WAIT RENUMBERING FILE ..... ";
!Print @20,20;'CL';"RENUMBERING:";K$[1,6];
K1$ = " ",K1$
K1$ = ""
NEXTCALL = 5 - INCR
L_4060: Search #9,3,1;K1$,R1,E
If E = 2 Return 
If E Gosub ERR_SEARCH
CNUM = K1$[13,17]
K33$ = " ",K33$
K33$ = K1$[7]
K3$ = K33$
K4$ = K33$
Rem KICK UP BY INCREMENT, THEN CHECK IF IT EXISTS
NEXTCALL = NEXTCALL + INCR
If NEXTCALL > 99000 Print #0;"***** ABORT RENUMBER OF ";K$[1,6];" - REACHED 99,000" \ Return 
L_4190: K33$[7,11] = NEXTCALL Using "#####"
K33$[12] = ""
Search #3,2,1;K33$,R4,E
If E = 0 Let NEXTCALL = NEXTCALL + 1 \ Goto L_4190
If E <> 1 Gosub ERR_SEARCH
K3$[12] = ""
L_4140: Search #3,3,1;K3$,R2,E
If E Goto L_4060
Mat Read #3,R2;CN$
Mat Read #3,R2,70;CN3
If K3$[1,11] <> K4$[1,11] Goto L_4060
Rem IF CN3[2]<>CNUM GOTO L_4060:
K33$ = " ",K33$
K33$ = K3$
K33$[7,11] = NEXTCALL Using "#####"
R3 = R2
If PRINTOPTION$ <> "N" If CN3[3] = 0 Gosub L_5800 \ Gosub L_5800
If PRINTOPTION$ <> "N" If CN3[3] = 0 Gosub L_5000 \ Gosub L_5050
If PRINTOPTION$ = "D" If CN3[3] <> 0 Gosub L_5800
If PRINTOPTION$ = "D" If CN3[3] <> 0 Gosub L_5100
Search #3,4,1;K33$,R3,E
If E Gosub ERR_SEARCH
L_4200: Search #3,5,1;K3$,R2,E
If E Gosub ERR_SEARCH
If R2 <> R3 Gosub ERR_SEARCH
CN3[2] = NEXTCALL
Mat Write #3,R2,70;CN3;
Goto L_4140
L_5000: Rem print all stuff =================================================
If K3$[1,6] = "      " Let K3$[7,11] = K$[7,11]
Print #0;A1$[1,25];" ";K$[1,6];" ";K3$[7,11];" ";CN$[1,70];" ";
X2 = CN3[0] \ Gosub L_7700
Print #0; Tab 112;X$
Return 
L_5050: Print #0; Tab 10;"****** RENUMBERING CALL TO CALL #: ";NEXTCALL
Return 
L_5060: Print #0; Tab 10;"****** SKIPPING CALL - HIGHEST CALL NUMBER LESS THAN 10,000"
Return 
L_5070: Print #0; Tab 10;"****** SKIPPING CALL - CALL NUMBER WOULD GO OVER 80,000 *******"
Return 
L_5075: Print #0; Tab 10;"****** SKIPPING CALL - NOT WORTH RENUMBERING"
Return 
L_5100: Rem PRINT REST OF DETAIL
Print #0; Tab 39;CN$[1,70];
X2 = CN3[0] \ Gosub L_7700
Print #0; Tab 112;X$
Return 
L_5400: Rem PRINT OUT DIVISION NAME
DNAME$ = "ALL DIVISIONS"
If Not(DIV) Goto L_5450
Mat Read #2,DIV;DNAME$;
L_5450: Return 
L_5800: Rem NEW PAGE ROUTINE
J9 = J9 + 1
If P1 = 0 Goto L_5880
If J9 < L9 Return 
If Not(P2) Goto L_5870
! Input @0,23;'CL';"PRESS <CR> TO CONTINUE "F$ \ Print 'CS' \ Goto L_5880
L_5870: Print #0;"\14\";
L_5880: J9 = 8
P1 = P1 + 1
if p1>100 and pageflag=0
	Call addtostr(e$,rstr$,esdel$) !end section
	 Message$="Report is still processing.  Check myreports later. "
	 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	 call addToStr(e$,rstr$,webstr$)
	 call setoutput(e$,rstr$)
  ! Call setoutput(e$,rstr$,2) !2 fl
	let pageflag=99
endif
T9$ = "" \ Call Time(T9$)
Print #0; Tab (66 - Int(Len(N$) / 2));N$
Print #0;"\15\";"- 326B-"; Tab 10;"DATE"; Tab 15;T9$;
Print #0; Tab 54;"A/R COLLECTION NOTES FOR RENUMBERING";
Print #0; Tab 105;"PAGE # "; Tab 113;P1
Print #0;" "
Gosub L_5400
Print #0; Tab 48;"DIVISION: ";DIV;" ";DNAME$
Print #0;" "
Print #0; Tab 8;"NAME"; Tab 26;"CUST #"; Tab 33;"CALL#";
Print #0; Tab 48;"NOTES"; Tab 113;"INPUT"
Print #0;" "
Return 
L_6000: Rem READ CUSTOMER RECORD
A1$ = " ",A1$
A1$[1,18] = "CUSTOMER NOT FOUND"
CFIN[4] = 0
Search #4,2,1;K2$,R2,E
If E Goto L_6070
Mat Read #4,R2,30;A1$;
Mat Read #4,R2,544;CFIN;
L_6070: Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_7900: Rem  date
X1$ = X2 Using "&&&&&&"
X$ = " ",X$
X$ = X1$[1,2],"/",X1$[3,4],"/",X1$[5,6]
Call VerifyDate(X$,X1$,E)
Return 

L_9100: Rem NO MORE
!If Err 0 Rem
!Close #0
!If Err 0 Gosub ERR_TRAP
!Print @0,23;'CL';"NUMBER RENUMBERED: ";RENUMBERCOUNT;".  PRESS <CR> TO EXIT";
!Input ""F$
Goto OUTEND

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End


ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
!Chain "MX000C"
!Chain "MX000"
!If j8 ! dx xml
!  Call addtostr(e$,rstr$,esdel$) !end section
!  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
!End If 
if not (pageflag)
if not(j8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions to print"
			message$=message$+"."
		else
			
			Let message$=message$+" Complete"
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
endif
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program


























