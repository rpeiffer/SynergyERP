! >>> Program 682
!
! description   Price List / History
!
! loadsave -w -n 100,10 -o prog/dxport/682.dl4 src/682.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX682  PRICE LIST FROM HISTORY
Rem REK 12/13/94 (COPY OF MX114 - HAHAHAHAHA)
Rem Last update: 05/23/1991 roman.  pick all/auth products and
!                                 prices in base u/m's
! Updated 9/91 REK  - To add (+) or (-) print for cust. price
!                        --related to last price
! "                   the "+" and "-" is related to current price vs.
! "                   last time they bought price. this has to be
! "                   re-done to use the price from the last time
! "                   this 114 was run.
! Last Update:  11/92 rek  new sp routine
! Last Update:  4/93 rek  fixed break level logic
!               10/93 - to make what prints agree with headings
! "             roman 05/13/1994  expand dept to 999
!                03/28/1997 - DATE COMPARE JULIAN
!                03/18/2003 - zyc cct166047 problem with curcost
!                04/05/2004 - zyc cct177596 
! cct176472 dgh 05/14/2004 - Correction if P9$[32,32]="Y" (whse pricing is
!           in effect) but select whse=0, use product record's default costs.
! cct167193 expand price types
!
! THIS PROGRAM USES A NON-STANDARD SPECIAL PRICE GET ROUTINE
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL  8, 2005  16:36:50
Rem /w2/papermaster/r2005//usr/acct/rce/work/r2005/mx/mx682.src (univ2) [rce] {42924}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/inc/fileprtdefault.inc" ! port default
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate,programdump
!Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
Dim 1%,PFU1[20],CNVTU[2],UN[2],COST_LEV[2]
Dim 2%,C4[8]
Dim 3%,PFU2[6],CNVTA,A[33],UWORK[10],FIELD,BASEX

!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNS(X) = Sgn(X) * (Int(Abs(X) * 1000 + .5) * .0001)
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Dim SLSM$[3],K33$[50],K34$[50],KCUST$[50],1%,TYPE,RB[2],RBL1[1],RBWH,RBUM[1]
Dim 2%,RB1[5],3%,RBCOST,RBSLCOST,RB5[2],RP_COST,SPSLCOST
Dim P$[16],C1$[142],A$[156],D6$[20],A3$[30],A2$[30],S8$[5],S7$[5]
Dim UNIT$[4],BUNIT$[4],PUNIT$[4],CUNIT$[4],P9$[50],I$[60],PMASK$[12]
Dim 1%,M5[3],M8,F,X1,BREAKPAGE,B3,PRFLAG,PRCOST,LPEUN[2]
Dim 1%,pm5[5,4],lm[1],whlm[1]
Dim 1%,STARTCHAN,CHAN,P3,PT[37],DFT_COST
Dim 1%,C3[4],C5[2],SPCUM[1],SPC3[2],WHPARC[5],PD1[9]
Dim 1%,CCBASE,CCUPBRK
Dim 2%,UNIT,C1[2],B[24],Z7[3],CFC1[12],ARDATE,Z1[1],M6[3],P2
Dim 2%,WHBLD[2],W7[14],WHSE,DFWH,LPDEPT,PACKUNIT$[4]
Dim 2%,SPC1[5],Q0[1],D9[20],3%,W3[24],CURCOST,DEXT,BRKAMT
Dim 2%,CCMULTI,DEPT
Dim 3%,BRACKET,BRACKET1,M7,SPC4[6],SPC5[4],2%,DT,BRKLVL,JUMP_,L6[1]
Dim 3%,PF_LOAD2,PERM[1],W3[24],WHLV[2],WHMISC[6],A4,PRPARC[3],x2[9]
Dim 3%,J,X3,X6,T9[20],C2[2],B1[9,2],C7,MU,LPC4[3],LPR[4],SGPRICE,R9,R1
Dim 1%,SPC6[4],aptype[8],abtype[8],amtype[8],3%,apfact[8],amqty[8],OrdQty ! add'l spcl prices2-9
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[40],ARDATE$[8],C5$[12],Z1$[50]
Dim S9$[8],A1$[50],S1$[30],K4$[40],K8$[1],EFFDATE$[8],REPDATE$[8]
Dim K1$[50],K2$[20],K3$[20],X$[10],K9$[50],U5$[130],BK$[10]
Dim K6$[12],K7$[12],AUTH$[1],P2$[84],COMM$[4],D$[35],P60$[50],A4$[22],F1$[16]
Dim SORT$[2],VNDNM$[30],K15$[30],LP$[60]
Dim WH$[2],WHPROD$[12],W1$[32]
Dim 1%,ARMTH,MTH,BOYMTH,NOMTHS
Dim 1%,DEJAVU
Dim BD1$[2],BD2$[2],BD3$[2],ED1$[2],ED2$[2],ED3$[2]
Dim K16$[50],HLD$[50],3%,QTY,LQTY,TYUNIT,LYUNIT,S1[12,2],S2[12,2]
Dim BDATE$[8],BDATE1$[8],EDATE$[8],EDATE1$[8],KEY_COMMODITY$[8]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[600],msg$[100],rstr$[2000],webstr$[2000]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[20]	  \ Blank$=" ",Blank$
dim prt. as prtdefault ! port defaults
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetCostLevels(e$,cost_lev[],IntCo,Userid$)
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
For J = 2 To 18
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Open #J,J$
L_830: Next J
Data "1376","1792","1808","1952","1936","1824","-1","-1","2880","1632","1728","1712","1920","0","2016 ","1744","752"
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
! 2=lastprice, 3=prod, 4=cust, 5=sbrktbl, 6=spcprice, 7=sslsm
! 8=commcode, 10=contracth, 11=deptfle, 12=ccodes, 13=sprodmark 
! 14=zonefle, 15=vendor, 16=slscurr , 17=prodwhse, 18=pricetype
! 21=pricemark,22=commodity
OPEN #21,"2/SPRICEMARK"+STR$(COID)
CH_CHEAD = 8;CH_CMDTY = 22
J$ = "2/commodity"+Str$(COID)
Open #CH_CMDTY,J$
J$ = "2/commhead"+Str$(COID)
Open #CH_CHEAD,J$
Read #1,51,74;BOYMTH; \ Mat Read #1,115,0;D9;
Read #1,0,120;ARMTH; \ MTH = ARMTH
NOMTHS = ARMTH - BOYMTH \ If NOMTHS < 0 Let NOMTHS = NOMTHS + 12
L_860: Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 64 \ If J8 Let J9 = 22
Mat Read #1,0,100;ARDATE$;
Read #1,0,108;ARDATE;
Read #1,3;CNAME$;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
U5$ = "-",U5$
! call dxsave(0,"tmp/682sv.txt!")
!Open #77,"PRTDFLT","USERPORT"
!Read #78,Spc(6),10;A4; \ If Not(A4) Let A4 = Spc(6)
!Mat Read #77,A4,0;PD1;
!Close #77,#78
call GetPortDefault(e$,IntCO,UserID$,portnum,rec_uac,prt.) ! get port default
DFWH = prt.Wh ! PD1[2]
eflag=0;e$=" "
DEJAVU = 0
!DFWH = PD1[2]
F9 = 0
!Print 'CS';@0,0;"MX682";@26,0;"SALESMAN/CUSTOMER PRICE LIST"
L_1045: !Print @0,4;"EFFECTIVE DATE: ";ARDATE$;@28,4;"(FOR SPECIAL PRICE CALCULATION)";@16,4;
!Input ""EFFDATE$ \
call dxget("EFFDATE",tmp$) ! returns as mmddyy
If tmp$ = "" Let EFFDATE$ = ARDATE Using "######" \ Goto L_1050
Effdate$=tmp$[1,2]+"/"+tmp$[3,4]+"/"+tmp$[5,6] ! convert to mm/dd/yy
Call VerifyDate(EFFDATE$,EFFDATE$,E) 
If E ! Goto L_1045
	eflag=eflag+1;e$=e$+"Invalid Effective Date"
	goto L_1055
Endif
L_1050: X2 = EFFDATE$;DT = X2 \ Gosub L_7700 \ EFFDATE$ = X$
X2 = DT \ Gosub L_7820 \ x2=-1
if x2<=0
	eflag=eflag+1;e$=e$+"Invalid Effective Date"
	goto L_1055
Endif
JDT = X2
! Print @16,4;'CL';EFFDATE$
L_1055: ! Print @0,5;"REPLACEMENT DATE: ";ARDATE$;@18,5;
! Input ""REPDATE$ \ 
call dxget("REPLDATE",tmp$) ! returns as mmddyy
If tmp$ = "" Let REPDATE$ = ARDATE Using "######" \ Goto L_1060
repdate$=tmp$[1,2]+"/"+tmp$[3,4]+"/"+tmp$[5,6] ! convert to mm/dd/yy
Call VerifyDate(REPDATE$,REPDATE$,E)
If E ! Goto L_1055
	eflag=eflag+1;e$=e$+" Invalid Replacement Date"
	goto L_1065
Endif
L_1060: X2 = REPDATE$ \ Gosub L_7700 \ REPDATE$ = X$
!Print @18,5;'CL';REPDATE$
L_1065: !
PRFLAG = 1
!Print @0,7;'CL';"PRINT ONLY CUSTOMERS WITH AUTHORIZED BUY LISTS? (Y/<CR>) ";
!Input ""AUTH$
call dxget("ABCUST",tmp$)
auth$="" \ if tmp$="Y" Let Auth$="Y"
If AUTH$ <> "Y" And AUTH$ <> "" ! Goto L_1065
	eflag=eflag+1;e$=e$+" Answer is Y or N for Auth Buy"
Endif
L_1080: !Print @0,9;"ENTER STARTING SLSM, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input ""K2$ \ If K2$ = "E" Goto OUTEND
call dxget("SSLSM",k2$)
If K2$ = "" Let K2$ = "0"
S1 = K2$
If S1<0 or S1 > 999 !Goto L_1080
	eflag=eflag+1;e$=e$+" Invalid Starting Slsm"
Endif
L_1100: !Print @6,10;"ENDING   SLSM, <CR> FOR LAST,   E: TO EXIT : ";'CL';
!Input ""K3$ \ If K3$ = "E" Goto OUTEND
call dxget("ESLSM",k3$)
If K3$ = "" Let K3$ = "999" \ S2 = 999
S2 = K3$
If S2<0 or S2 > 999 ! Goto L_1100
	eflag=eflag+1;e$=e$+" Invalid Ending Slsm"
Endif
If S1 <= S2 Goto L_1130
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1080
eflag=eflag+1;e$=e$+" Invalid Slsm Range"
L_1130: Rem
L_1140: !Print @0,11;"ENTER STARTING CUST, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input ""K2$ \ If K2$ = "E" Goto OUTEND
call dxget("SCUST",K2$)
If K2$ = "" Let K2$ = "0"
X0 = K2$ \ If X0 <= 0 Let X0 = 1
!Print @6,12;"ENDING   CUST, <CR> FOR LAST,   E: TO EXIT : ";'CL';
!Input ""K3$ \ If K3$ = "E" Goto OUTEND
call dxget("ECUST",k3$)
If K3$ = "" Let K3$ = "999999"
X5 = K3$
If X0 <= X5 Goto L_1200
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1140
eflag=eflag+1;e$=e$+" Invalid Customer Range"
L_1200: ! Print @0,13;"ENTER STARTING PROD, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input ""K6$ \ If K6$ = "E" Goto OUTEND
call dxget("SPROD",K6$)
K6$ = K6$ + "            " \ K6$ = Ucase$(K6$[1,12])
! Print @6,14;"ENDING   PROD, <CR> FOR LAST,   E: TO EXIT : ";'CL';
! Input ""K7$ \ If K7$ = "E" Goto OUTEND
call dxget("EPROD",K7$)
If K7$ = "" Let K7$ = "ZZZZZZZZZZZZ"
K7$ = K7$ + "            " \ K7$ = UCase$(K7$[1,12])
If K6$ <= K7$ Goto L_1245
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1200
eflag=eflag+1;e$=e$+" Invalid Product Range"
L_1245: K8$ = "P"
!Gosub L_13000
L_13000: Rem IF "P" GET DATE RANGE
If K8$ = "A" Let FLG = 1 \ goto L_1265 ! Return 
L_13020: !Print @0,15;'CE';"ENTER PURCHASED DATE RANGE <CR> FOR ALL  00/00/00 - 99/99/99";@41,15;
!Input Len 2;""BD1$ \ If BD1$ = "" Let BDATE$ = "000000";EDATE$ = "999999";BDATE = 0;EDATE = 999999 \ Goto L_13150
!Print @44,15; \ Input Len 2;""BD2$ \ Print @47,15; \ Input Len 2;""BD3$
call dxget("BPDATE",BD1$)
If BD1$ = "" Let BDATE$ = "000000";EDATE$ = "999999";BDATE = 0;EDATE = 999999 \ Goto L_13150
BDATE$[1,2] = BD1$[1,2];BDATE$[3,3] = "/";BDATE$[4,5] = BD1$[3,4];BDATE$[6,6] = "/";BDATE$[7,8] = BD1$[5,6]
Call VerifyDate(BDATE$,BDATE$,E)
If E ! Goto L_13020
	eflag=eflag+1;e$=e$+" Invalid Start Purchase"
Endif
X2 = BDATE$ \ Gosub L_7700 \ BDATE1$ = X$
X2 = BDATE$ \ Gosub L_7820 \ X2=-1
if x2<=0
	eflag=eflag+1;e$=e$+" Invalid Start Purchase Date"
Endif
BDATE = X2
!Print @41,15;BDATE1$;@52,15; \ Input Len 2;""ED1$ \ If ED1$ = "" Let EDATE$ = "" \ Goto L_13120
L_13100: !Print @55,15; \ Input Len 2;""ED2$ \ Print @58,15; \ Input Len 2;""ED3$
call dxget("EPDATE",ED1$)
If ED1$ = "" Let EDATE$ = "" \ Goto L_13120
EDATE$[1,2] = ED1$[1,2];EDATE$[3,3] = "/";EDATE$[4,5] = ED1$[3,4];EDATE$[6,6] = "/";EDATE$[7,8] = ED1$[5,6]
L_13120: If EDATE$ = "" Let EDATE$ = "12/31/59"
Call VerifyDate(EDATE$,EDATE$,E)
If E ! Goto L_13020
	eflag=eflag+1;e$=e$+" Invalid Ending Purchase"
Endif
L_13140: X2 = EDATE$ \ Gosub L_7700 \ EDATE1$ = X$
X2 = EDATE$ \ Gosub L_7820 \ X2=-1
if x2<=0
	eflag=eflag+1;e$=e$+" Invalid End Purchase Date"
Endif
EDATE = X2
L_13150: ! 
If EDATE < BDATE ! Print @42,19;"INVALID RANGE" \ Signal 3,10 \ Goto L_13020
	eflag=eflag+1;e$=e$+" Invalid Purchase Date Range"
Endif
L_13160: !Print @42,16;'CE'; \ Input Len 2;"  CORRECT? (Y/N)  "J$ \ If J$ = "" Goto L_13160
!If J$ <> "Y" If J$ <> "N" Goto L_13160
!If J$ <> "Y" Goto L_13020
!Return 
L_1265: If Not(PRFLAG) Let BRACKET = -9 \ Goto L_1297
!Print @0,16;"SHOW PRICES IN:  1> PRICING UM  2> BASE UM  3> BOTH? ";'CL';
call dxget("PRCUM",Z1$) ! Input ""Z1$ \ 
UMTYPE = Z1$
If UMTYPE > 0 And UMTYPE < 4 Goto L_1280
!Goto L_1265
eflag=eflag+1;e$=e$+" Price U/M is 1-3 Only"
L_1280: !Gosub L_7250
L_7250: Rem  PRINT CURRENT COST&MARGIN
PRCOST = 0 \ If Not(PRFLAG) Or UMTYPE = 3 Goto L_1285 ! Return 
If F9 Goto L_1285 !Return 
If Not(COST_LEV[1]) Goto L_1285 !Return 
L_7260: ! Print @0,17;'CL';"PRINT CURRENT COST & UNIT SALES? (Y/N)    ";
!Input ""Z1$ \ If Z1$ = "E" Goto OUTEND
Call dxget("CSTSLS",tmp$)
Z1$="N" \ if tmp$="Y" Let Z1$="Y"
If Z1$ <> "Y" If Z1$ <> "N" ! Goto L_7260
	eflag=eflag+1;e$=e$+" Answer is Y or N"
Endif
PRCOST = 0 \ If Z1$ = "Y" Let PRCOST = 1
! Return 
L_1285: ! cont
!Print @0,18;"ENTER BRACKET NUMBER TO USE FOR TEN BRACKET PRICES OR <CR> FOR NO PRICE ";'CE';
!Input ""BK$
call dxget("PBRKT",BK$)
If BK$ = "" Let BRACKET = -9 Else Let BRACKET = BK$
L_1297: COMM_DIGIT = 4
BREAKPAGE = 0
L_1360: Rem WAREHOUSE
If P9$[32,32] <> "Y" Let WHSE = 0 \ Goto L_1450
!Print @0,21;'CL';"ENTER WAREHOUSE TO PRINT FOR,  0: FOR MAIN, OR  E: TO EXIT:  ";
!Print @60,21; \ WHSE = 0
!If DFWH < 10 Print Using "#";DFWH; Else Print Using "##";DFWH;
!Print @60,21;
!Input Len 16386;""WH$ \ If WH$ = "E" Goto OUTEND
call dxget("WHSE",WH$)
If WH$ = "" Let WHSE = DFWH \ Goto L_1405
WHSE = WH$
L_1405: ! 
If WHSE < 0 Or WHSE > D9[5] ! Print 'RB'; \ Goto L_1360
	eflag=eflag+1;e$=e$+" Invalid Warehouse"
Endif
L_1450: Rem "================== all picked
if eflag ! some entry issue - cannot print
	! let e$=message$ ! already e$
	goto ERR_MSG
Endif
! call programdump("/tmp/682log1!","")
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
Endif
!Print @10,22;'CL'; \ Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
!If Z1$ = "R" Goto L_860
!If Z1$ <> "P" Goto L_1450
COMM$ = "----";DEPT = -9999
Gosub L_6000
!If Not(J8) Print @0,22;'CL';"Printing... please wait";'CE'; \ Signal 3,0
!If J8 Print 'CS';
If Err 0 Gosub ERR_TRAP
J1 = 90 \ J2 = 0
K1$ = " ",K1$
L_2000: Search #9,3,1;K1$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_9100
If K1$[1,3] = SLSM$[1,3] Gosub CUSTOMER_CHANGE
If K1$[1,3] <> SLSM$[1,3] Let SLSM$ = K1$[1,3];J1 = 99 \ Gosub L_5800
LP$ = " ",LP$;LP$ = K1$[4,9] + "   0" + K6$
L_2015: Search #2,3,1;LP$,R1,E \ If E And E <> 2 Gosub ERR_SEARCH
If E Or LP$[1,6] <> K1$[4,9] Goto L_2000
Mat Read #2,R1,0;P$;
Mat Read #2,R1,16;C1;
X2 = C1[2] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE < BDATE Or JWDATE > EDATE Goto L_2015
Mat Read #2,R1,28;C2;
Mat Read #2,R1,46;C3; \ Mat Read #2,R1,56;P2$;
Mat Read #2,R1,140;LPC4; \ If LPC4[3] Goto L_2015
Mat Read #2,R1,168;LPR;
Mat Read #2,R1,214;LPEUN;
Mat Read #2,R1,262;PERM;
Read #2,R1,320;LPDEPT;
If P$[1,12] > K7$ Goto L_2000
J3$ = " n/a  "
If C3 = 1 Let J3$ = "MATRX"
If C3 = 2 Let J3$ = "CONT"
If C3 = 3 Let J3$ = "PRMO"
If C3 = 4 Let J3$ = "COMD"
X3 = 0 \ X9 = 0
SGPRICE = 0
Gosub L_3500
Gosub L_3300
Gosub L_5800
PROD = 99;JUMP_ = 0;AMQTY = 0;DEXT = 0
Z9 = C1[0] \ Gosub L_25000
If P60$[33,33] = "Y" And P60$[12,12] <> "Y" And Not(L9[0]) Gosub L_17600
If X3 = -2 Let X3 = 0;BRKLVL = 0
If X9 If X3 Let SGPRICE = 0;C3[0] = 0
If Not(X9) If Not(X3) If C4[2] = 2 Gosub L_6800 \ Goto L_2170
If X9 = 0 And X3 = 0 Gosub L_4200
If Not(X3) If C2[1] Let X3 = C2[1]
If Not(L9[0]) If X3 Let L9[0] = 1
L_2170: If X3 Let AMQTY = 0 \ Gosub L_4000
CNVTU[0] = SPCUM[1] \ CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = SPC5[1]
Gosub L_20000
SPCL = 0 \ If X9 And SPC5[1] Let CURCOST = AMOUNT;SPCL = 1
CNVTU[0] = PFU1[18] \ CNVTU[1] = 0;CNVTU[2] = 1;CNVTA = 1
Gosub L_20000
PACK = AMOUNT
If P9$[13,13] <> "N" And P60$[33,33] <> "Y" And C3[0] = -7 Gosub L_12100
Gosub L_5000 \ L9[0] = 0
Goto L_2015
P$ = K1$[14,25]
C1[0] = K1$[4,9]
C1[1] = 0
C1[2] = 0
C2[0] = 0
C2[1] = 0
C2[2] = 0
C3[0] = 0
LPDEPT = 0
C3[2] = 0
C3[3] = 0
C3[4] = 0
LPC4[0] = 0
LPC4[1] = 0
LPC4[2] = 0
LPC4[3] = 0
LPEUN[2] = 0;PERM[0] = 0;PERM[1] = 0
Return 
L_3000: Rem "================================ get customer
DEJAVU = 1
If J4$ = K1$[4,9] Return 
J4$ = K1$[4,9]
If J1 + 8 > J9 Let J1 = 999 \ HFLG = 1 \ Gosub L_5800
Search #4,2,1;J4$,V1,E \ If E > 1 Gosub ERR_SEARCH
If E Let C1$ = "ERROR! ",J4$," NOT FOUND!" \ Goto L_3050
Mat Read #4,V1,0;C1$;
Mat Read #4,V1,142;CFC1;
Mat Read #4,V1,194;C5;
Mat Read #4,V1,348;A2$;
Mat Read #4,V1,388;A4$;
L_3050: Rem PRINT
P3 = CFC1[7]
Gosub L_8900
Gosub L_3105
Print #0;U5$[1,50]
Print #0; Using "###";"SALESMAN:    ";CFC1[2]; Tab 20;S1$[1,30]
Print #0;"CUSTOMER: ";K1$[4,9];
Print #0; Tab 20;C1$[31,60]
Print #0; Tab 20;C1$[61,90]
Print #0; Tab 20;C1$[121,135]; Tab 37;C1$[136,137]; Tab 41;A2$[1,10]
Print #0;""
J1 = J1 + 6
Return 
L_3105: Rem "============================= get salesman
K4$ = " ",K4$
K4$ = CFC1[2] Using "###"
Search #7,2,1;K4$,R4,E \ If E > 1 Gosub ERR_SEARCH
If E Let S1$ = " *** NOT ON FILE ***" \ Goto L_3200
Mat Read #7,R4,0;S1$;
Return 
L_3170: Rem "================================ cust heading
DEJAVU = 1
If J4$ <> K1$[4,9] Return 
J4$ = K1$[4,9]
Search #4,2,1;J4$,V1,E \ If E > 1 Gosub ERR_SEARCH
L_3200: If E Let C1$ = "ERROR! ",J4$," NOT FOUND!" \ Goto L_3230
Mat Read #4,V1,0;C1$;
Mat Read #4,V1,142;CFC1;
Mat Read #4,V1,194;C5;
Mat Read #4,V1,348;A2$;
Mat Read #4,V1,388;A4$;
L_3230: Rem PRINT
P3 = CFC1[7]
Gosub L_8900
Gosub L_3105
Print #0;U5$[1,50]
Print #0; Using "###";"SALESMAN:    ";CFC1[2]; Tab 20;S1$[1,30]
Print #0;"CUSTOMER: ";K1$[4,9];
Print #0; Tab 20;C1$[31,60]
Print #0; Tab 20;C1$[61,90]
Print #0; Tab 20;C1$[121,135]; Tab 37;C1$[136,137]; Tab 41;A2$[1,10]
Print #0;""
J1 = J1 + 6
Return 
L_3300: Rem "======================= vendor name
If LPC4[1] = 0 Let LPC4[1] = B[24]
If Not(LPC4[1]) Return 
K15$[1,6] = LPC4[1] Using "######"
Search #15,2,1;K15$,R15,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_3350
Mat Read #15,R15,0;VNDNM$;
Return 
L_3350: Rem NG
VNDNM$ = " ",VNDNM$
VNDNM$ = "VENDOR NOT ON FILE"
Return 
L_3500: Rem "============================== get product
J2$ = P$[1,12]
Search #3,2,1;J2$,V1,E \ If E > 1 Gosub ERR_SEARCH
If E Let A$ = " ",A$;A$[9,38] = "ERROR! PRODUCT NOT FOUND!" \ Return 
Mat Read #3,V1,0;A$;
Mat Read #3,V1,256;A;
Mat Read #3,V1,156;B; \ Mat Read #3,V1,512;PFU1; \ Mat Read #3,V1,554;PFU2;
mat read #3,v1,620;lm;
MAT  READ #3,V1,596;PRPARC;
Mat Read #3,V1,894;C4;
Mat Read #3,V1,938;PF_LOAD2;
Mat Read #3,V1,944;A3$;
If WHSE Gosub L_8100
If C2[2] = 0 Let C2[2] = B[8]
gosub loadcalc: ! "load tables
Gosub L_7300
L_3550: Goto L_3590
C3[2] = PFU1[9]
C3[3] = PFU1[12]
C3[4] = PFU1[11]
P2$[81,84] = A$[152,155]
LPC4[1] = B[24]
LPC4[2] = B[11]
L_3590: If Not(PRCOST) Return 
TYUNIT = 0;LYUNIT = 0
K16$ = " ",K16$;K16$[1,6] = C1[0] Using "######";K16$[7,18] = P$[1,12]
If K16$[1,18] = HLD$[1,18] Goto L_3690
HLD$ = K16$
L_3620: Search #16,3,1;K16$,R16,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_3690
If K16$[1,18] <> HLD$[1,18] Goto L_3690
Mat Read #16,R16,16;S1;
Mat Read #16,R16,256;S2;
Gosub L_3720
TYUNIT = TYUNIT + QTY
LYUNIT = LYUNIT + S2[0,0]
Goto L_3620
L_3690: Rem DONE
Return 
L_3720: Rem GET ONLY YTD THRU MONTH
QTY = 0;LQTY = 0
Return 
X2 = NOMTHS + 1
X = BOYMTH
For I = 1 To X2
  QTY = QTY + S1[X,0];LQTY = LQTY + S2[X,0]
  X = X + 1 \ If X > 12 Let X = X - 12
Next I
Return 
L_3800: Rem "==================================== totals
J1 = 99
Return 
L_4000: Rem Quantity break routine (REK - 01/22/93)   NON-STANDARD VERSION
If P60$[12,12] = "Y" Goto L_4190
L6[0] = 0;L6[1] = 0
If C4[2] <> 1 Or (Not(CCUPBRK) And P9$[10,10] = "Y") Goto L_4190
L6[0] = 0;L6[1] = 0
If L9[0] <> 1 And L9[0] <> 9 And Not(JUMP_) Goto L_4080
Gosub L_11000
If L6[1] > X3 Let L6[1] = X3;X4 = X3
L_4080: If (L6[0] Or L6[1]) Let L9[0] = 9 Else Let BRKLVL = 0
L_4190: Return 
L_4200: Rem MTRX
Gosub L_4500
FIELD = 0
Rem  IF P2[P3]=0 LET P2[P3]=1 ! "check multiplier
If Not(CCBASE) Let X3 = A[19 + CCMULTI] \ Goto L_4277
If CCBASE = 1 Let FIELD = 0
If CCBASE = 10 Let FIELD = 0
If CCBASE > 2 If CCBASE < 9 Let FIELD = CCBASE - 2
If CCBASE If CCBASE <> 2 If CCBASE <> 9 Gosub L_12000
If CCBASE = 1 Let X3 = B[8]
If CCBASE = 2 Let X3 = B[10]
If CCBASE >= 3 If CCBASE <= 8 Let X3 = A[17 + CCBASE]
If CCBASE = 9 Let X3 = C4[4]
If CCBASE = 10 Let X3 = PF_LOAD2
If CCMULTI = 0 Let CCMULTI = 1
X3 = X3 * CCMULTI
L_4277: S9$ = " ",S9$
If B[22] If CCUPBRK Let S9$ = "QB"
Return 
L_4350: Rem BASE TYPE
FIELD = 0
If SPC3[1] = 2 Let FIELD = 0
If SPC3[1] > 3 If SPC3[1] < 10 Let FIELD = SPC3[1] - 3
If FIELD Gosub L_12000
If SPC3[1] = 1 Let BASEX = C4[4]
If SPC3[1] = 2 Let BASEX = B[8]
If SPC3[1] = 3 Let BASEX = B[10]
If SPC3[1] = 4 Let BASEX = A[20]
If SPC3[1] = 5 Let BASEX = A[21]
If SPC3[1] = 6 Let BASEX = A[22]
If SPC3[1] = 7 Let BASEX = A[23]
If SPC3[1] = 8 Let BASEX = A[24]
If SPC3[1] = 9 Let BASEX = A[25]
If SPC3[1] = 10 Let BASEX = RBCOST
If SPC3[1] = 11 Let BASEX = SPSLCOST \ If SPC5[3] = 4 Let BASEX = CURCOST
If SPC3[1] = 12
  If C4[2] = 1 Gosub L_4200
  If C4[2] = 2 Gosub L_6800
  BASEX = X3 \ X3 = 0
End If 
If SPC3[1] = 13 Let BASEX = PF_LOAD2
Return 
L_4500: Rem "================================= get commodity
K3$ = " ",K3$
K3$[1,4] = A$[152,155]
K3$[5,8] = P3 Using "### "
Search #CH_CMDTY,2,1;K3$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_4550
Mat Read #CH_CMDTY,Z8,42;CCMULTI;
Mat Read #CH_CMDTY,Z8,40;CCBASE;
Mat Read #CH_CMDTY,Z8,53;CCUPBRK;
L_4550: Rem "error
CCBASE = 0;ccmulti=1;ccupbrk=0
L_4580: Return 
L_5000: Rem "===================================== print line
If Not(C2[2]) Return 
Gosub L_3000
Goto L_5170
Z1$ = " ",Z1$
K3$ = " ",K3$ \ K3$ = P2$[81,84]
Search #CH_CHEAD,2,1;K3$,Z8,E
If E = 1 Let Z1$ = K3$," NOT FOUND" \ Goto L_5160
If E Gosub ERR_SEARCH
Mat Read #CH_CHEAD,Z8,0;D$;
Z1$ = D$[1,16]
Goto L_5160
Read #11,LPDEPT,0;D$;
Z1$ = D$[1,24]
L_5160: Print #0; Tab 10;Z1$ \ J1 = J1 + 2 \ F7 = 0
L_5170: T9 = 0 \ If X3 Let T9 = C2[2] / X3
If SGPRICE Let T9 = C2[2] / SGPRICE;S9$ = "SG     "
MU = 0
If C2[1] Let MU = FNR((C2[1] - C2[2]) * 100 / C2[1])
Gosub L_10000
Print #0; Tab 0;P$[1,12];
Print #0; Tab 21;A$[9,38];
If A3$[13,14] = "  " Print #0; Using "######.##"; Tab 52;PACK;"/";PACKUNIT$;
If A3$[13,14] <> "  " Print #0; Tab 52;A3$[13,27];
Print #0; Tab 67;
If Not(PRFLAG) Goto L_5260
If Not(X3) Or (C4[2] = 2 And BRACKET = -9) Print #0;"CALL FOR PRICE "; \ Goto L_5260
If UMTYPE = 1 Or UMTYPE = 3 Print #0; Using PMASK$;X3;"/";PUNIT$;
If UMTYPE = 2 If X6 Print #0; Using PMASK$;FNN(X6);"/";BUNIT$;
If Not(F9) Print #0; Tab 82;S9$[1,7];
L_5260: If F9 Print #0;" " \ Goto L_5340
X2 = C1[2] \ Gosub L_7700 \ Print #0; Tab 89;X$[1,8];
If COST_LEV[1] Print #0; Using PMASK$; Tab 97;C2[2];"/";CUNIT$;
If COST_LEV[1] Print #0; Using "---#.##%"; Tab 112;MU;
Print #0; Using PMASK$; Tab 121;C2[1]
L_5340: Rem IF P9$[40,40]="Y" PRINT #0; TAB 0;A$[93,112]; ! "vendor item #
If P9$[26,26] = "Y" Print #0; Tab 21;A$[63,92];
Print #0; Tab 52;VNDNM$[1,15];
If Not(PRFLAG) Goto L_5390
If UMTYPE = 3 If X6 Print #0; Using PMASK$; Tab 67;FNN(X6);"/";BUNIT$;" ";
If COST_LEV[1] If PRCOST Print #0; Using PMASK$; Tab 67;CURCOST;
T9 = 0 \ If X3 Let T9 = FNR((X3 - CURCOST) * 100 / X3)
If Not(PRCOST) Goto L_5380
If COST_LEV[1] Print #0; Using "---#.##%"; Tab 78;T9;
If SPCL Print #0;"*";
L_5380: Rem IF NOT F9 PRINT #0; TAB 88;S7$; ! "rebate not in spcprice
If PRCOST Print #0; Using "--------#.##"; Tab 102;TYUNIT; Tab 118;LYUNIT;
L_5390: Print #0;" " \ J1 = J1 + 1
J1 = J1 + 1
S9$ = " ",S9$;SPCL = 0
Return 
L_5800: Rem "==================================== headings
If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 10
F7 = 99
Print #0; Tab (46 - Len(CNAME$) / 2);CNAME$;
If WHSE Print #0; Tab 90;"WAREHOUSE";WHSE;
Print #0; Using "PAGE ####"; Tab 122;J2
If F9 And PRFLAG Print #0; Tab 27;"CUSTOMER  PRICE  LISTING"
If F9 And Not(PRFLAG) Print #0; Tab 27;"CUSTOMER PURCHASE LISTING"
If Not(F9) Print #0; Tab 21;"SALESMAN  PRICE  LISTING FROM HISTORY"
Print #0; Tab 27;"EFFECTIVE DATE: ";EFFDATE$
If PRFLAG Print #0; Tab 27;"REPLACEMENT DATE: ";REPDATE$ Else Print #0;""
Print #0;" "
If F9 Print #0;U5$[1,79] Else Print #0;U5$
Print #0; Tab 1;"ITEM CODE"; Tab 21;"DESCRIPTION"; Tab 53;"PACK";
If PRFLAG Print #0; Tab 67;"CURRENT PRICE";
If Not(F9) Print #0; Tab 85;"LAST: DATE"; Tab 103;"COST"; Tab 116;"G/P%"; Tab 125;"PRICE"
If F9 Print #0;" "
If Not(F9) Print #0; Tab 52;"VEND NAME";
If PRCOST Print #0; Tab 71;"COST     G/P%";
If PRCOST Print #0; Tab 103;"MTD UNITS"; Tab 120;"YTD UNITS";
Print #0;" "
If F9 Print #0;U5$[1,79] Else Print #0;U5$
If Not(HFLG) Gosub L_3170
HFLG = 0
Return 
L_6000: Rem "================================== sort
K1$ = " ",K1$ \ Z1 = 0
K1$ = X0 - 1 Using "######"
!Print @0,22;"Sorting...please wait";'CL';
L_6220: Search #4,3,1;K1$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_6400
Mat Read #4,V1,0;C1$;
If AUTH$ = "Y" And C1$[138,138] <> "Y" Goto L_6220
Mat Read #4,V1,142;CFC1;
Mat Read #4,V1,195;C5;
If CFC1[1] > X5 Goto L_6400
If CFC1[2] < S1 Goto L_6220
If CFC1[2] > S2 Goto L_6220
A1$ = " ",A1$;A1$ = CFC1[1] Using "######" + "   0" + K6$
L_6355: Search #2,3,1;A1$,R1,E \ If E And E <> 2 Gosub ERR_SEARCH
If E Or A1$[1,6] <> K1$[1,6] Goto L_6220
Mat Read #2,R1,0;P$;
Mat Read #2,R1,16;C1;
X2 = C1[2] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE < BDATE Or JWDATE > EDATE Goto L_6355
Mat Read #2,R1,140;LPC4; \ If LPC4[3] Goto L_6355
If P$[1,2] > K7$ Goto L_6220
A1$ = " ",A1$;A1$[1,3] = CFC1[2] Using "###"
A1$[4,9] = K1$[1,6]
R1 = 0
Search #9,4,1;A1$,R1,E \ If E Gosub ERR_SEARCH
Goto L_6220
L_6400: Goto L_6480
K1$ = " ",K1$
If X0 <> 0 Let K1$ = X0 - 1 Using "######"
L_6410: Search #4,3,1;K1$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_6480
Mat Read #4,V1,0;C1$;
If AUTH$ = "Y" And C1$[138,138] <> "Y" Goto L_6410
Mat Read #4,V1,142;CFC1;
If CFC1[1] < X0 Goto L_6410
If CFC1[1] > X5 Goto L_6480
If CFC1[2] < S1 Goto L_6410
If CFC1[2] > S2 Goto L_6410
A1$ = " ",A1$ \ A1$[1,3] = CFC1[2] Using "###"
A1$[4,9] = K1$[1,6]
A1$[10] = ""
Search #9,2,1;A1$,R1,E
If E = 0 Goto L_6410
If E <> 1 Gosub ERR_SEARCH
A1$ = " ",A1$ \ A1$[1,3] = CFC1[2] Using "###"
A1$[4,9] = K1$[1,6]
Goto L_6410
L_6480: Return 
If K8$ <> "A" Goto L_6700
K2$ = " ",K2$ \ K2$ = K6$
L_6520: Search #3,3,1;K2$,R1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_6700
If K2$[1,12] = "Z ZZZZZZZZZZ" Goto L_6520
If K2$ < K6$ Goto L_6520
If K2$ > K7$ Goto L_6700
Mat Read #3,R1,0;A$;
Z1$ = " ",Z1$ \ Z1$[1,6] = K1$[1,6]
L_6550: Search #2,3,1;Z1$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_6600
If Z1$[1,6] = K1$[1,6] If Z1$[11,22] = K2$ Goto L_6520
If Z1$[1,6] = K1$[1,6] Goto L_6550
L_6600: A1$[10,13] = A$[152,155]
A1$[14,25] = K2$
A1$[29,29] = "*"
Search #9,4,1;A1$,R1,E \ If E Gosub ERR_SEARCH
Goto L_6520
L_6700: Rem
Return 
L_6800: Rem "===================================== calc bracket price
If BRACKET = -9 Let X3 = 0 \ Return 
BRACKET1 = BRACKET
If SPC3 = 5 Let BRACKET1 = BRACKET1 + (SPC3[1])
If SPC3 = 4 Let BRACKET1 = SPC3[1]
L_6825: B4 = (BRACKET1 * 1000) - 1000 + C4[3]
If B4 < 0 Let X3 = 0 \ Goto L_6920
Mat Read #13,B4,0;M5;
Mat Read #13,B4,10;M6;
If BRACKET1 > 1 If Not(M6[0]) Let BRACKET1 = BRACKET1 - 1 \ Goto L_6825
M7 = C4[4]
CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = M7 \ Gosub L_20000 \ M7 = AMOUNT
For M8 = 0 To 3
  If Not(M6[M8]) Goto L_6880
  If M5[M8] Let M7 = M7 + (M6[M8])
  If Not(M5[M8]) Let M7 = M7 + (M7 * (M6[M8] / 100))
Next M8
L_6880: Rem
X4 = M7
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = X4 \ Gosub L_20000 \ X4 = AMOUNT
M7 = X4
X3 = M7
S9$ = " ",S9$
S9$ = "10 B"
If X3 If SPC3 = 5 Or SPC3 = 4 Let S9$ = "10 B SP"
L_6920: Return 

L_7300: Rem GET DEFAULT COST
If P9$[32,32] = "Y" And WHSE
  CURCOST = W3[17]
  If DFT_COST = 2
    CURCOST = W3[14]
  Else 
    If DFT_COST = 3
      CURCOST = W3[15]
    Else 
      If DFT_COST = 4
        CURCOST = W3[16]
      Else 
        If DFT_COST = 5
          CURCOST = W3[18]
        End If 
      End If 
    End If 
  End If 
Else !"If whse=0 then use product's default
  CURCOST = B[8]
  If DFT_COST = 2
    CURCOST = PF_LOAD2
  Else 
    If DFT_COST = 3
      CURCOST = B[21]
    Else 
      If DFT_COST = 4
        CURCOST = B[10]
      Else 
        If DFT_COST = 5
          CURCOST = C4[4]
        End If 
      End If 
    End If 
  End If 
End If 
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
Return 
If F9 Return 
Print #0; Tab 2;" The following codes may appear under the price ;"
Print #0; Tab 5;" SP - SPECIAL PRICE due to prior agreement "
Print #0; Tab 5;" QB -MATRIX price,  QUANTITY BREAK available"
Print #0; Tab 5;" 10 B - Ten Bracket price  ."
Print #0; Tab 5;" 10 B SP  - Ten Bracket  special price ."
Print #0; Tab 5;" SG - SUGGESTED Price/Last price was manual ."
Return 
L_8100: Rem GET WHSE INFO
WHPROD$[1,12] = A$[140,151]
WHBLD[0] = 17;WHBLD[1] = WHSE;WHBLD[2] = 0
!Call "GETWHSE",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E
Call "GETWHSE.dl4",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E,e$,rstr$
If E 
  Let W3[17]=b[8];w3[16]=b[10];w3[15]=b[21];whparc[0]=b[22]
  let whparc[1]=c4[3];w3[18]=c4[4];w3[14]=pf_load2
  let whmisc[2]=prparc[2];whlm[0]=0;whlm[1]=0
  For ct=20 to 25 \ let w3[ct-1]=a[ct] \ next ct
  Let nowhse=1
  Return ! "NO PRODUCT whse FOUND!!!
Endif
B[8] = W3[17];B[10] = W3[16];B[21] = W3[15];B[22] = WHPARC[0]
C4[3] = WHPARC[1];C4[4] = W3[18];PF_LOAD2 = W3[14]
let prparc[2]=whmisc[2];NoWhse=0
For CT = 20 To 25
  A[CT] = W3[CT - 1]
Next CT
if not(e)
  mat read #17,whbld[2],842;whlm;
Else
  Let whlm[0]=0;whlm[1]=0
Endif
Return 
L_8500: Rem "================================= footnote space
Return 
If F9 Let J1 = 99 \ Return 
If J8 Goto L_8600
If J1 >= 50 Goto L_8600
For F5 = J1 To 49
  Print #0;" "
Next F5
L_8600: J1 = 999
Return 
CUSTOMER_CHANGE: Rem --------------
If DEJAVU Gosub L_3000
Return 
L_8900: Rem GET DEFAULT COST
Mat Read #18,P3,28;PT;
DFT_COST = PT[0]
If Not(DFT_COST) Let DFT_COST = P60$[29,29]
Return 

L_9100: Rem END OF THIS RANGE
Gosub L_3800
!If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
Stop 
L_10000: Rem CONVERT
X6 = X3
CNVTU[0] = 0
CNVTU[1] = C3[3]
CNVTU[2] = 2
X3 = X3 - L6[1]
If L6[0] Let X3 = X3 - (X3 * (L6[0] / 100))
If SGPRICE Let X3 = SGPRICE
X6 = X3
CNVTA = X3
Gosub L_20000
X3 = FNP(AMOUNT)
CNVTA = CURCOST \ Gosub L_20000
CURCOST = FNP(AMOUNT)
CNVTU[0] = 0
CNVTU[1] = C3[2]
CNVTU[2] = 1
CNVTA = C2[0]
Gosub L_20000
C2[0] = AMOUNT
CNVTA = LPR[3] \ Gosub L_20000 \ TYUNIT = AMOUNT
CNVTA = LPR[4] \ Gosub L_20000 \ LYUNIT = AMOUNT
If C3[3] > 0 Mat Read #12,C3[3],10;PUNIT$;
C3[4] = C3[3]
If C3[4] > 0 Mat Read #12,C3[4],10;CUNIT$;
If PFU1[0] > 0 Mat Read #12,PFU1[0],10;BUNIT$;
If PFU1[18] > 0 Mat Read #12,PFU1[18],10;PACKUNIT$;
If C3[3] = -1 Let PUNIT$ = "CWT "
If C3[3] = -2 Let PUNIT$ = "LOT "
If C3[3] = -3 Let PUNIT$ = "LB  "
If C3[4] = -1 Let CUNIT$ = "CWT "
If C3[4] = -2 Let CUNIT$ = "LOT "
If C3[4] = -3 Let CUNIT$ = "LB  "
If PFU1[0] = -1 Let BUNIT$ = "CWT "
If PFU1[18] = -1 Let PACKUNIT$ = "CWT "
If PFU1[18] = -2 Let PACKUNIT$ = "LOT "
If PFU1[18] = -3 Let PACKUNIT$ = "LB  "
CNVTU[0] = 0
CNVTU[1] = C3[4]
CNVTU[2] = 2
CNVTA = C2[2]
Gosub L_20000
C2[2] = FNP(AMOUNT)
CNVTU[0] = 0
CNVTU[1] = C3[3]
CNVTU[2] = 2
CNVTA = C2[1]
Gosub L_20000
C2[1] = FNP(AMOUNT)
Goto L_10290
CNVTU[2] = 1 \ CNVTA = TYUNIT
Gosub L_20000 \ TYUNIT = AMOUNT
CNVTA = LYUNIT \ Gosub L_20000
LYUNIT = AMOUNT
L_10290: Return 
L_11000: Rem QUANTITY BREAK SUBROUTINE (REK - 01/22/93)  NON-STANDARD
If B[22] <= 0 Or B[22] > Chf(5) - 1 Goto L_11250
Mat Read #5,B[22],0;B1;
Read #5,B[22],200;B3; \ If B3 = 1 Or B3 = 3 Goto L_11050
Goto L_11250
L_11050: If JUMP_ < 0 Let BRKLVL = B[22] + (Abs(JUMP_) / 100);JUMP_ = 0
I = -1 \ If BRKLVL And Not(JUMP_) Let I = Int(Fra(BRKLVL) * 100) - 1 \ BRKLVL = 0
If I >= 0 And I <= 9 Let X4 = B1[I,2];T0 = B1[I,1] \ Goto L_11180
X4 = 0;T0 = 99;I1 = 9
If B3 = 1 Let BRKAMT = AMQTY
If B3 = 3 Let BRKAMT = DEXT
For I = I1 To 0 Step -1
  If B1[I,0] < 0 Goto L_11250
  If I > 0 And B1[I,0] = 0 Goto L_11150
  If BRKAMT >= B1[I,0] Goto L_11160
L_11150: Next I
Goto L_11250
L_11160: If JUMP_ Let I = I + JUMP_ \ If I > 9 Let I = 9
L_11170: X4 = B1[I,2];T0 = B1[I,1]
L_11180: If Not(X4) And I > 0 ! "try again
  I = I - 1
  Goto L_11170
End If 
If Not(X4) Goto L_11250
If Not(T0) Let L6[0] = X4
If T0 <> 1 Goto L_11240
L6[1] = X4
CNVTU[0] = PFU1[8];CNVTU[1] = 0;CNVTU[2] = 2
CNVTA = L6[1] \ Gosub L_20000 \ L6[1] = AMOUNT;X4 = AMOUNT
L_11240: BRKLVL = B[22] + ((I + 1) / 100);JUMP_ = 0
L_11250: Return 

L_12000: ! CALC L PRICES FROM TABLE (Field 1 to 6) ONLY
If field<1 or field>6 Return ! "NO LOAD COST CALC HERE
IF C4[2]<>1 RETURN  ! "not matrix
IF C4[3]=0 RETURN  ! "no mark up table
Mat read #21,c4[3],18;pm5;
LET BASEx=C4[4];B1=Field ! "so ends up 1 - 6
if pm5[B1-1,4]=1 Let basex=b[10]
if pm5[b1-1,4]=2 let basex=b[8]
if pm5[b1-1,4]=3 let basex=pf_load2
if pm5[b1-1,4]=4 let basex=b[21]
if pm5[b1-1,4]=5 let basex=prparc[2]

GOSUB L_19000:
! X4 RETURNED

LET A[19+FIELD]=X4
RETURN 

Loadcalc: ! "calc loads from tables!
 IF LM[0]                                        
  LET LTBL=LM[0];PREC[0]=v1;WH=0;OTYPE=1;CNVTA=0
  GOSUB L_4650: \ LET B[8]=CNVTA                
 ENDIF                                           
 IF LM[1]                                        
  LET LTBL=LM[1];PREC[0]=v1;WH=0;OTYPE=1;CNVTA=0
  GOSUB L_4650: \ LET PF_LOAD2=CNVTA            
 ENDIF                                           
If NoWhse let W3[17]=b[8];w3[14]=pf_load2 ! "no whse rec#
If Whse
 IF WHLM[0]                                               
  LET LTBL=WHLM[0];PREC[0]=v1;WH=WHSE;OTYPE=1;CNVTA=0
  GOSUB L_4650: \ LET W3[17]=CNVTA                       
  if w3[17] Let B[8]=w3[17]
 ENDIF                                                    
 IF WHLM[1]                                               
  LET LTBL=WHLM[1];PREC[0]=v1;WH=W1[0];OTYPE=1;CNVTA=0
  GOSUB L_4650: \ LET W3[14]=CNVTA                       
  If W3[14] let pf_load2=w3[14]
 ENDIF                                                    
Endif
If not(w3[17]) let w3[17]=b[8]
if not(w3[14]) let w3[14]=pf_load2
RETURN                                                   

L_4650: REM CALC                                         
CALL "MXLOAD5",OTYPE,WH,LTBL,PREC[],CNVTA               
RETURN
L_12100: Rem CALCULATE SUGGESTED PRICE
SGPRICE = 0
If C3[0] <> -7 Goto L_12160
If Not(C2[1]) Or Not(C2[2]) Goto L_12160
SGPRICE = CURCOST
SGPRICE = SGPRICE + (SGPRICE * ((C2[1] - C2[2]) / C2[2]))
L_12160: Return 

L_17600: Rem ===== check permanent price
If Not(LPEUN[2]) Goto L_17970
X3 = 0
If LPEUN[2] <= -1 And LPEUN[2] >= -6 ! "lp 1-6
  If P9$[10,10] <> "Y" Or C4[2] <> 1 Goto L_17970
  If PERM[0] < 1 Or PERM[0] > 6 Goto L_17970
  FIELD = PERM[0] !  + 1
  Gosub L_12000
  A[19 + FIELD] = X4
  X3 = A[19 + FIELD]
  If X3 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
End If 
If LPEUN[2] <= -8 And LPEUN[2] >= -17 ! "bracket 1-10
  If C4[2] <> 2 Goto L_17970
  If PERM[0] < 1 Or PERM[0] > 10 Goto L_17970
  SPC3[0] = 4;SPC3[1] = PERM[0];BRACKET = - PERM[0] \ Gosub L_6800
  If X3 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
End If 
If LPEUN[2] = -7 ! "fixed price
  X3 = PERM[0] \ If X3 < 0 Let X3 = 0
  If X3 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
End If 
If LPEUN[2] = 9 ! "fixed break level
  If P9$[10,10] <> "Y" Or C4[2] <> 1 Goto L_17970
  If PERM[0] < 1 Or PERM[0] > 10 Goto L_17870
  X3 = 0;JUMP_ = - PERM[0];BRKLVL = 0
L_17870: End If 
If LPEUN[2] = 10 ! "% discount
  If PERM[0] < 1 Or PERM[0] > 100 Goto L_17970
  L6[0] = PERM[0];L6[1] = 0;L9[0] = LPEUN[2];BRKLVL = 0;X3 = 0
End If 
If LPEUN[2] = 14 ! "gtm %
  If PERM[0] < 1 Or PERM[0] >= 100 Goto L_17970
  If Not(PERM[0]) Let X3 = 0 \ Goto L_17950
  X3 = (CURCOST / ((100 - PERM[0]) / 100))
L_17950: If X3 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
End If 
L_17970: Return 
L_19000: Rem MATRIX PRICING, RETURNS X4

! Call "MX671BRK5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,C4[],FIELD,BASE
Call "MX671BRK5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,C4[],FIELD,BASEX,e$,rstr$
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
X4 = CNVTA
L_19090: Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
If L3 Let AMOUNT = CNVTA \ Goto L_20160
L_20050: !
L_20120: Rem "====== unibasic 5+ logic
!Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_23000: Rem CHECK FOR REBATE
RBCOST = 0 \ RBSLCOST = 0 \ SPSLCOST = 0
Read #1,88,320;F1$;
Ropen #33,F1$
Read #1,88,304;F1$;
Ropen #34,F1$
TYPE = 0
L_23070: K34$ = " ",K34$
If W2[3] Let K34$[1,6] = W2[3] Using "######" Else Let K34$[1,6] = B[24] Using "######"
X2 = 0 \ TYPE = TYPE + 1
If TYPE > 8 Goto L_23600
L_23110: Search #34,3,4;K34$,R34,E
If E > 2 Gosub ERR_SEARCH
If E Goto L_23070
X2 = K34$[1,6]
If W2[3] If X2 <> W2[3] Goto L_23070
If Not(W2[3]) If X2 <> B[24] Goto L_23070
KCUST$ = " ",KCUST$
If TYPE < 5 Let KCUST$[1,6] = CFC1[1] Using "######" Else Let KCUST$[1,6] = CFC1[7] Using "PT### "
KCUST$[7,12] = K34$[7,12]
Search #34,2,2;KCUST$,R34,E
If E Goto L_23110
K33$ = " ",K33$
If TYPE = 1 Or TYPE = 5
  K33$[1,12] = A$[140,151];K33$[13] = K34$[7,12],""
End If 
IF TYPE=2 OR TYPE=6
	LET K33$[1,1]="-";K33$[2,12]=A$[116,126];K33$[13]=K34$[7,12],""
ENDIF 
IF TYPE=3 OR TYPE=7
	K33$[1,1] = "*";K33$[2,5] = A$[152,155];K33$[13] = K34$[7,12],""
End If 
If TYPE = 4 Or TYPE = 8
  K33$[1,1] = "#";K33$[13] = K34$[7,12],""
End If 
K33$[19] = ""
Search #33,2,2;K33$,R33,E
If E > 1 Gosub ERR_SEARCH
If E Goto L_23110
Mat Read #33,R33,12;RB1;
Mat Read #33,R33,36;RBUM;
Mat Read #33,R33,40;RB;
Mat Read #33,R33,118;RBWH;
Mat Read #33,R33,126;RBL1;
Mat Read #33,R33,138;RB5;
X2 = RB1[2] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE > JDT Goto L_23110
X2 = RB1[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If RB1[4] If JWDATE < JDT Goto L_23110
If P9$[32,32] = "Y" If RBWH And WHSE If RBWH <> WHSE Goto L_23110
If TYPE <> 1 And TYPE <> 5 Let RBUM[0] = PFU1[RBUM[0]] \ RBUM[1] = PFU1[RBUM[1]]
If P9$[32,32] = "Y" And W3[16] <> 0 Let RP_COST = W3[16] Else Let RP_COST = B[10]
If RB[0] = 3 Let RBCOST = RB5[0]
If RB[0] = 1 Let RBCOST = (RP_COST * ((100 - RB5[0]) / 100))
If RB[0] = 2 Let CNVTU[0] = 0;CNVTU[1] = RBUM[0];CNVTU[2] = 2;CNVTA = RP_COST \ Gosub L_20000
If RB[0] = 2 Let CNVTA = (AMOUNT - RB5[0]);CNVTU[0] = RBUM[0];CNVTU[1] = 0 \ Gosub L_20000
If RB[0] = 2 Let RBCOST = AMOUNT
If RBL1[0] = 4 Let RBSLCOST = 0
If RBL1[0] = 3 Let RBSLCOST = RB5[1]
If RBL1[0] = 1 Or RBL1[0] = 2
  If RBL1[1] = 1 Let BASEX = C4[4]
  If RBL1[1] = 1 If P9$[32,32] = "Y" If W3[18] Let BASEX = W3[18]
  If RBL1[1] = 2 Let BASEX = B[8]
  If RBL1[1] = 2 If P9$[32,32] = "Y" If W3[17] Let BASEX = W3[17]
  If RBL1[1] = 3 Let BASEX = B[10]
  If RBL1[1] = 3 If P9$[32,32] = "Y" If W3[16] Let BASEX = W3[16]
  If RBL1[1] = 4 Let BASEX = RBCOST
  If RBL1[1] = 5 Let BASEX = PF_LOAD2
  If RBL1[1] = 5 If P9$[32,32] = "Y" If W3[14] Let BASEX = W3[14]
End If 
If RBL1[0] = 1 Let RBSLCOST = (BASEX * ((100 + RB5[1]) / 100))
If RBL1[0] = 2 Let CNVTU[0] = 0;CNVTU[1] = RBUM[1];CNVTU[2] = 2;CNVTA = BASEX \ Gosub L_20000
If RBL1[0] = 2 Let CNVTA = (AMOUNT + RB5[1]);CNVTU[0] = RBUM[1];CNVTU[1] = 0 \ Gosub L_20000
If RBL1[0] = 2 Let RBSLCOST = AMOUNT
If RBSLCOST And (Not(CURCOST) Or RBSLCOST < CURCOST) Let CURCOST = RBSLCOST
L_23600: Rem exit
Close #33
Close #34
Return 
L_24800: Rem Valid unit for product (special price)?
For X = 0 To 7
  If UNIT = PFU1[X] Return 1
Next X
Return 
L_24900: Rem ===== Check for cust/contract ======
I$ = " ",I$;I$[1,6] = Z9 Using "######"
L_24920: Search #10,3,2;I$,R10,E \ If E Return 
X2 = I$[1,6] \ If X2 <> Z9 Return 
K9$[1,6] = I$[7,12]
Search #6,2,1;K9$,Z8,E
If Not(E) Gosub L_25500 \ If X3 Goto L_24980
Goto L_24920
L_24980: Rem CONTRACT=I$[8,12] ! "retain contract #
Return 
L_25000: Rem Special Pricing (rek - 01/21/93) / NON-STANDARD VERSION
Gosub L_23000
X3 = 0;X9 = 0
PROD = 99;L9[0] = 2
K9$ = " ",K9$;K9$[1,6] = Z9 Using "######";K9$[7,18] = P$[1,12];K9$[19] = ""
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
Gosub L_24900 \ If X3 Goto L_29980
K9$[1,6] = "999999";L9[0] = 3
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
!
LET PROD=0;L9[0]=15 ! "customer/cost group price
LET K9$=" ",K9$;K9$[1,6]=Z9 USING "######";K9$[7,7]="-"
LET K9$[8,18]=A$[116,126];K9$[19]=""
SEARCH #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
IF NOT(E) GOSUB L_25500: \ IF X3 GOTO L_29980:
GOSUB L_24900: \ IF X3 GOTO L_29980: ! "check contract/exit if one 
LET K9$[1,6]="999999";L9[0]=16 ! "cost group promotion
SEARCH #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
IF NOT(E) GOSUB L_25500: \ IF X3 GOTO L_29980:
!
PROD = 0;L9[0] = 4
K9$ = " ",K9$;K9$[1,6] = Z9 Using "######";K9$[7,7] = "*"
K9$[8,11] = A$[152,155];K9$[19] = ""
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
Gosub L_24900 \ If X3 Goto L_29980
K9$[1,6] = "999999";L9[0] = 7
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
L9[0] = 12
UNIT = PFU1[19] \ If UNIT > 0 Mat Read #12,UNIT,10;UNIT$;
K9$ = " ",K9$;K9$[1,6] = Z9 Using "######";K9$[7,7] = "&"
K9$[8,11] = UNIT$[1,4];K9$[12,15] = UNIT Using "####";K9$[19] = ""
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
Gosub L_24900 \ If X3 Goto L_29980
K9$[1,6] = "999999";L9[0] = 11
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
L9[0] = 6
K9$ = " ",K9$;K9$[1,6] = Z9 Using "######";K9$[7,7] = "#";K9$[19] = ""
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
Gosub L_24900 \ If X3 Goto L_29980
K9$[1,6] = "999999";L9[0] = 8
Search #6,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If X3 Goto L_29980
X3 = 0;L9[0] = 0 \ Goto L_29980
L_25500: Rem Now get special price
Mat Read #6,Z8,12;Z1;
Mat Read #6,Z8,12;SPC1;
Mat Read #6,Z8,36;SPCUM;
Mat Read #6,Z8,40;SPC3;
Mat Read #6,Z8,46;SPC4;
Mat Read #6,Z8,138;SPC5;
mat read #6,Z8,168;spc6; ! this & below - 9 add'l prices
mat read #6,Z8,178;aptype;
mat read #6,Z8,196;abtype;
mat read #6,Z8,214;amtype;
mat read #6,Z8,232;apfact;
mat read #6,Z8,286;amqty;
!
!
X2 = SPC1[2] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE > JDT Goto L_29970
If (SPC3[0] = 4 Or SPC3[0] = 5) And C4[2] <> 2 Goto L_29970
X2 = SPC1[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If SPC1[4] And JWDATE < JDT Goto L_29970
!
if spc6[1]<>1 and spc6[1]<>2 let spc6[1]=1 ! default = qty min
! now the check of which price to use
let mlvl=0 ! no multiple levels yet
for x=0 to 8 \ if aptype[x] let mlvl=1 \ next x ! has a type (use prctype as decider)
if mlvl ! has levels - find right one - if not use main (orig)
	gosub MLVL_SPR:
Endif
! to make less changes - move whatever level into std var names
if spc6[1]<>1 and spc6[1]<>2 let spc6[1]=1 ! default = qty min
!
If SPC5[3] = 3 And SPC5[1] Let SPSLCOST = SPC5[1]
If SPC5[3] = 5 Let BASEX = PF_LOAD2
If SPC5[3] = 5 If P9$[32,32] = "Y" If W3[14] Let BASEX = W3[14]
If SPC5[4] = 1 Let BASEX = C4[4]
If SPC5[4] = 1 If P9$[32,32] = "Y" If W3[18] Let BASEX= W3[18]
If SPC5[4] = 2 Let BASEX = B[8]
If SPC5[4] = 2 If P9$[32,32] = "Y" If W3[17] Let BASEX = W3[17]
If SPC5[4] = 3 Let BASEX = B[10]
If SPC5[4] = 3 If P9$[32,32] = "Y" If W3[16] Let BASEX = W3[16]
If SPC5[4] = 4 Let BASEX = RBCOST
IF SPC5[4]=5 LET BASEX=PF_LOAD2
IF SPC5[4]=5 IF P9$[32,32]="Y" IF W3[14] LET BASEX=W3[14]
if spc5[4]=6 let basex=prparc[2]
if spc5[4]=6 IF P9$[32,32]="Y" if WHMISC[2] let basex=whmisc[2]
If SPC5[3] = 1 If BASE Let SPSLCOST = (BASEX * ((100 + SPC5[1]) / 100))
If SPC5[3] = 2 If BASE Let CNVTU[0] = 0;CNVTU[1] = SPCUM[1];CNVTU[2] = 2;CNVTA = BASEX \ Gosub L_20000
If SPC5[3] = 2 If AMOUNT Let CNVTA = (AMOUNT + SPC5[1]);CNVTU[0] = SPCUM[1];CNVTU[1] = 0 \ Gosub L_20000
If SPC5[3] = 2 If AMOUNT Let SPSLCOST = AMOUNT
If SPSLCOST And (Not(CURCOST) Or SPSLCOST < CURCOST) Let CURCOST = SPSLCOST
If RBSLCOST If Not(SPSLCOST) Let SPSLCOST = RBSLCOST
X3 = SPC5[0]
UNIT = SPCUM[0] \ Gosub L_24800 \ SPCUM[0] = C3[3]
UNIT = SPCUM[1] \ Gosub L_24800 \ SPCUM[1] = C3[4]
If PROD Let C3[3] = SPCUM[0];C3[4] = SPCUM[1]
S9$ = " ",S9$;S9$ = "SP";S8$ = " SC"
If SPC1[0] = 999999 Let S9$ = "SPP";S8$ = "SCP"
If SPC3[0] = 1 Or SPC3[0] = 2 Let S9$ = "GTM"
If SPC3[0] = 3 Let S9$ = "FP"
If SPC1[0] = 999999 And (SPC3[0] = 1 Or SPC3[0] = 2) Let S9$ = "SP-GTM"
If SPC1[0] = 999999 And SPC3[0] = 3 Let S9$ = "SP-FP"
If Not(PROD) And SPC3[0] = 3 ! "fixed price for commdy, allprod or size sp's
  CNVTU[0] = SPC3[2];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = X3
  Gosub L_20000 \ X3 = AMOUNT
End If 
If Not(SPC5[0]) And (SPC3[0] = 4 Or SPC3[0] = 5) Let X3 = 0 \ Goto L_29970
If SPC3[0] = 6 Let X3 = -2 \ Goto L_29970
If SPC3[0] = 1 Or SPC3[0] = 2 Gosub L_4350
If SPC3[0] = 3 Goto L_25740
If SPC5[0] And (SPC3[0] = 4 Or SPC3[0] = 5) Gosub L_6800 \ BASEX = X3;X3 = (BASEX * ((100 + SPC5[0]) / 100))
If SPC3[0] = 1 Let X3 = (BASEX * ((100 + SPC5[0]) / 100))
If SPC3[0] = 2 Let X3 = (BASEX / ((100 - SPC5[0]) / 100))
L_25740: If X3
  X9 = 99
  If SPC3[0] = 3 And (L9[0] = 2 Or L9[0] = 4 Or L9[0] = 6 Or L9[0] = 12 or l9[0]=15)
    L9[0] = 13
  End If 
Else 
  SPC5[0] = 0;SPC5[1] = 0
End If 
L_29970: Return 
L_29980: Rem Exit from special pricing
Return
!
!----------------------------------------------
! sort special price 1 - 10 by min qty/wgt
MLVL_SPR: ! multi level - return mlvl 1-10 (1 default)
UWork[0]=1;s3[4]=1
if spc3[2] ! qty um check
	let unit=spc3[2]
	! gosub CheckUnit: ! "check if valid unit
	if not(unit) let spc3[2]=0 ! "bad unit
Endif
amount=UWORK[0] ! base
if prod and spc3[2]
	let cnvtu[0]=0;cnvtu[1]=spc3[2];cnvtu[2]=1;cnvta=UWORK[0] ! "convert qty
	gosub L_20000: ! "get quantity in AMOUNT
Endif
if not(prod) and not(spc3[2])
	let cnvtu[0]=0; cnvtu[1]=pfu1[9]; cnvtu[2]=1; cnvta=UWORK[0]
   gosub L_20000:
Endif
OrdQty=amount ! for check of min=qty, s3[4]=weight
x2[1]=0;x2[2]=0;x2[3]=0;x2[4]=0 ! qty/wgt >=
if spc6[1]=1 ! main (price 1) - set the bar
	if ordqty>=spc4[0] and x2[1]<=spc4[0] let x2[1]=spc4[0];mlvl=1
Endif
if spc6[1]=2 ! main (price 1) - set the bar
	if s3[4]>=spc4[0] and x2[2]<=spc4[0] let x2[2]=spc4[0];mlvl=1
Endif
for x=0 to 8
	if aptype[x]>0 and aptype[x]<9 ! prctype determines used
		if amtype[x]<>2 let amtype[x]=1 ! default = qty
		if amtype[x]=1 ! qty
			if ordqty>=amqty[x] and x2[1]<=amqty[x] let x2[1]=amqty[x];x2[3]=x+2
		Endif
		if amtype[x]=2 ! wgt
			if s3[4]>=amqty[x] and x2[2]<=amqty[x] let x2[2]=amqty[x];x2[4]=x+2
		Endif
	Endif
Next x
! x2[3]=qtylvl;x2[4]=wgtlvl
if x2[3]=0 and x2[4]=0 RETURN ! no match of any other levels - use 1
if x2[1]=ordqty and X2[2]=s3[4] ! tie goes to wgt per specs
	if x2[4] 
		let mlvl=x2[4] 
		goto mlsprdone:
	Endif ! no wgt lvl - continue
Endif
MLvl=x2[4];x2[9]=0 ! wgt lvl has priority unless really low wgt lvl
if ordqty let X2[9]=s3[4]/ordqty ! unit wgt
if (x2[9]*x2[1])>x2[2] let mlvl=x2[3] ! qty lvl wgt>wgt lvl (ie: 20 cs>5 lbs)
If x2[1] and x2[2]=0 and x2[3]<>0 let mlvl=x2[3] ! qty level>0 - wght lvl=0
if x2[1]=0 and x2[2]=0 and x2[4]<>0 let mlvl=x2[4] ! both zero - use wgt
if mlvl=0 and x2[3]<>0 let Mlvl=x2[3] ! no wgt - use qty

MLSPRDone: ! done
if mlvl>1 ! from price 2-10 - move to standard vars
	x=mlvl-2 ! var displ 0-8
	C3[0]=APTYPE[X];C3[1]=ABTYPE[X]
	spc4[0]=amqty[x];spc6[1]=amtype[x]
	spc5[0]=apfact[x]
Endif
if mlvl<1 let mlvl=1
Return
!

OUTEND: Rem EXIT ROUTINE
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
!
try Call dxclose() else rem
End
!Print 'CS'
!Chain "MX000C"
!Stop 
Rem {begin rtn.error.s}
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/682se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             

Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End