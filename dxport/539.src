! >>> Program 539
!
! description 539 - UnConfirmed Purchase Order Report
!
! loadsave -w -n 100,10 -o prog/dxport/539.dl4 src/539.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem BEDIT Version: 2.3 OBJECT CODE     Created: JAN 23, 2012  12:09:25
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/la539.src (univ2) [mary] {63422}
Rem  Copyright (c) 2012 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub DateToJulian,InpBuf,Logic,String,VerifyDate
!Option Default Dialect IRIS1
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
!
!!Option Default Dialect IRIS1
Try 
Rem la539   Unconfirmed PURCHASE ORDER REPORT
Rem *   UNIVERSAL BUSINESS SYSTEM        *
Rem Last Update: MTG 12/11
Com 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33]
If Err 0 Gosub ERR_TRAP
Dim 1%,CNTRLCLOSE,POGLFLAG
Dim 1%,PO1[9]
Dim 1%,SPO,PCT3[2],L1[5],PL0[4],POMISC[2],NSD1[7],CHARGE,INCCHARGE,APCLOSE
Dim 1%,F,L,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],H4,IMPORTFLAG,DEBITMEMOFLAG,POCTDIR
Dim 4%,J1,T9[2],INVENT[9,2],NONINVENT[9,2]
Dim 2%,E,X2,PCT1[5],L2[2],POCNTRL,Q0[1],B[24],NSD2[4],POSTDATE,POSTDATE1
Dim 2%,J,D1,COMP,SDATE,EDATE,ARDATE,DT3[1],JDATE[5],JARDATE,APDATE
Dim J$[60],J0$[20],J1$[60],J2$[60],J4$[50],J5$[80],J7$[60],J9$[50]
Dim D2$[10],K5$[25],PCT$[12],L1$[120],PMASK$[12],M1$[4],A1$[156],NSD$[96]
Dim U5$[125]
Dim K3$[50]
Dim PMASK1$[12],PTRNM$[50],K11$[50]
Dim K2$[50],K4$[25],X$[10],WHNAME$[30],P9$[50],A$[30],ACPER$[4],P60$[50]
Dim POH$[82],2%,POH0[5],VENDNAME$[50]
Dim KEYSORT$[50],K12$[50],CUSTNAME$[30]
Dim O$[16],SORTOPT$[1]
Dim 1%,PCT7[2],PCT0[1]
Dim 2%,WH,CUST[1],D9[5],3%,R[20]
Dim 3%,PCT2[5],L3[6],PL[5],QTY,NSD3[9],A3[7],POQTY,APQTY
Dim 3%,PL4[23],PL5[9],PL6[9],T8[6,2],PCT4[1],PCT5[11],POCOST,APCOST
Dim 3%,PCT9[4],PCT8[11]
Dim 3%,PCT6[1],LBSUNIT,LBSFACTOR,CWT_WT_ADJ,TOTACC
Dim 1%,POTYPE
Dim F$[30],ARDATE$[8],EXTPOCOST
Dim CNAME$[30],3%
Dim 2%,PONUM[1],VEND[1],BUY[1],H0[10]
Dim 3%,LBSUNIT,LBSFACTOR
Dim 3%,CWT_WT_ADJ,PROD_WT_BASE,PO_WT_BASE
Dim 3%,DISP_QTY,DISP_COST,DISP_EXT
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
!!! check this
Dim b$[200]!

!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!

j8 = 0
try
	J9 = Chf(0) 
else
	let j8=99 ! browser
end try
If Err 0 Gosub ERR_TRAP
for ctr=1 to 99
	Try Close #ctr Else Rem
next ctr

COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1

! end new
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
O$ = "W D I M IWIDII  "
L9 = 60 \ If J8 Let L9 = 22
Mat Read #1,0,134;APDATE;
X$ = APDATE Using "&&&&&&";APPER = X$[1,4]
ACPER = X$[1,4]
Read #1,0,100;ARDATE$; \ Read #1,0,108;ARDATE;
Read #1,3;CNAME$;
X2 = ARDATE \ Gosub L_7820 \ X2 = 0
If X2 Let JARDATE = X2 Else Let JARDATE = Tim(6)
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
PMASK$ = "############"
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
PMASK1$ = PMASK$
If X
  For Y = 1 To (X - 1)
    PMASK1$[Y,Y] = "-"
  Next Y
End If 
Mat Read #1,115,0;D9;
Mat Read #1,51,76;SPO;
Mat Read #1,51,88;POGLFLAG;
If Not(SPO)
	Let Eflag=eflag+1
	let message$="This Report is Not Available. AP-PO Control Not Available"
	goto outend:
endif
let comp=intco
F$ = COMP Using "2/POCTFLE#" \ Open #2,F$
For I = 3 To 12
  Read L
  If L = -1 Goto L_845
  Read #1,88,L;J$;
  Ropen #I,J$
L_845: Next I
Data "2416","2432","2400","1792","1728","2768","-1","2448","1840","1808"
WH = 0;D1 = 2;SDATE = 700101;EDATE = 591231
X2 = SDATE \ Gosub L_7820 \ X2 = 0
JDATE[0] = X2
X2 = EDATE \ Gosub L_7820 \ X2 = 0
JDATE[1] = X2
POCTDIR = 1;SORTOPT$ = "P"
VEND[0] = 0;VEND[1] = 999999
BUY[0] = 0;BUY[1] = 999
PONUM[0] = 0;PONUM[1] = 999999
L = 99
! dxgets here

call dxget("Wh",tmp$)
let j1=tmp$
if j1<0 or j1>d9[5]
	let eflag=eflag+1
	let message$=message$+"Invalid Warehouse Entered "
else
	let wh=j1
endif
Call dxget("svend",tmp$) \ vend[0]=tmp$ ! starting vendor
Call dxget("evend",tmp$)
if rtrim$(tmp$)=""
	let vend[1]=999999
else
	let vend[1]=tmp$ ! ending vendor
endif
if Vend[0]>Vend[1]
	let message$=message$+"Ending Vendor must be greater than Starting. "
	let eflag=eflag+1
endif
Call dxget("sdate",tmp$)
if rtrim$(tmp$)="" 
	tmp$="010170"
endif
! need to convert for mmddyy to julian
LET TMP3=TMP$
LET TMP$=TMP3 USING "&&&&&&"
LET TMP1$=TMP$[5,6],TMP$[1,4] ! from mmddyy to yyddmm
let x2=tmp1$
gosub L_7820: ! convert from yyddmm to julian
sdate=tmp1$! error
sdate=tmp1$
if e<>0
	let eflag=eflag+1
	let message$=message$+" Invalid Date Entered. "
else
	let jdate[0]=x2
	let sdate=tmp1$
endif
Call dxget("edate",tmp$)
if rtrim$(tmp$)="" 
	tmp$="123159"
endif
! need to convert for mmddyy to julian
LET TMP3=TMP$
LET TMP$=TMP3 USING "&&&&&&"
LET TMP1$=TMP$[5,6],TMP$[1,4] ! from mmddyy to yyddmm
let x2=tmp1$
gosub L_7820: ! convert from yyddmm to julian
edate=tmp1$! error
edate=tmp1$
if e<>0
	let eflag=eflag+1
	let message$=message$+" Invalid End Date Entered. "
else
	let jdate[1]=x2
	let edate=tmp1$
endif
If JDATE[0] > JDATE[1]
  Message$=Message$+" Ending Date Must Be Greater Than Starting. "
  let eflag=eflag+1
End If 
Call dxget("sbuy",tmp$) \ buy[0]=tmp$ ! starting vendor
Call dxget("ebuy",tmp$)
if rtrim$(tmp$)=""
	let buy[1]=999
else
	let buy[1]=tmp$ ! ending vendor
endif
if buy[0]>buy[1]
	let message$=message$+"Ending Buyer must be greater than Starting. "
	let eflag=eflag+1
endif
If j8<>0 ! browser
    !tmp$=esdel$
	!call addtostr(e$,rstr$,tmp$)
	!tmp$ = bsdel$,"539",fdel$,rdel$
    !Call addtostr(e$,rstr$,tmp$)
	! browser fields
	tmp$="PO NUM",fdel$
	Tmp$=tmp$,"REC DATE",fdel$
	Tmp$=tmp$,"LINE",fdel$
	Tmp$=tmp$,"ITEM CODE",fdel$
	Tmp$=tmp$,"DESCRIPTION",fdel$
	Tmp$=tmp$,"QUANTITY",fdel$
	Tmp$=tmp$,"COST",fdel$
	Tmp$=tmp$,"EXT AMOUNT",fdel$
	Tmp$=tmp$,"ORDER#",fdel$
	Tmp$=tmp$,"CUSTOMER",fdel$
	tmp$=tmp$,"TERMS",fdel$
	tmp$=tmp$,"DUE DATE",fdel$
	tmp$=tmp$,"VENDOR NAME",fdel$
	tmp$=tmp$,rdel$
	Call addtostr(e$,rstr$,tmp$)
!Else ! printer
!	Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
Endif
if eflag<>0 
	! 
	goto outend: ! errors have occured
endif

L_1900: Rem start here
CH_POCT = 2
POCTDIR = 1
L = 70 \ P = 0 \ CHKVEND = 0 \ CHKBUY = 0
CHKPONUM = 0
T9[0] = 0;T9[1] = 0;T9[2] = 0
For I = 0 To 2
  BUYTOT[I] = 0
  For X = 0 To 6
    T8[X,I] = 0;NONINVENT[X,I] = 0;INVENT[X,I] = 0
  Next X
Next I
K2$ = " ",K2$
CHKPONUM = 0
L_2000: Search #CH_POCT,3,POCTDIR;K2$,R[2],E \ If E = 2 Goto L_4000
If E Gosub ERR_SEARCH
TMP3 = K2$[1,6]
If CHKPONUM <> TMP3 ! new ponum
  If CHKPONUM > 0 Gosub L_5200
  CHKPONUM = 0
End If 
Mat Read #2,R[2],60;PCT3;
If PCT3[0] <> 0 Goto L_2000
If WH <> 0 And PCT3[1] <> WH Goto L_2000
Mat Read #2,R[2],0;PCT1;
If PCT1[2] < VEND[0] Goto L_2000
If PCT1[2] > VEND[1] Goto L_2000
X2 = PCT1[4] \ Gosub L_7820 \ X2 = 0
JDATE[2] = X2
If JDATE[2] < JDATE[0] Goto L_2000
If JDATE[2] > JDATE[1] Goto L_2000
K4$ = " ",K4$;K4$[1,6] = PCT1[0] Using "######";K4$[7] = PCT1[1] Using "###"
Search #4,2,1;K4$,R[4],E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  Goto L_2000
End If 
Gosub L_8000
If PL4[10] = 0 Goto L_2000
Call Logic(1,2 ^ 2,L1[3],ZLINE)
If ZLINE Goto L_2000
K3$ = " ",K3$
K3$[1,6] = PCT1[2] Using "######"
K3$[7,12] = PCT1[0] Using "######"
Search #3,2,2;K3$,R[3],E
If E <> 0
  Goto L_2000
End If 
Mat Read #3,R[3],330;PO1;
If PO1[6] < BUY[0] Goto L_2000
If PO1[6] > BUY[1] Goto L_2000
Mat Read #3,R[3],0;POH0;
Mat Read #3,R[3],24;POH$;
Mat Read #5,POH0[1],0;VENDNAME$;
CHKPONUM = PCT1[0]
Mat Read #2,R[2],24;PCT2;
Mat Read #2,R[2],60;PCT3;
Mat Read #2,R[2],66;PCT$;
Mat Read #2,R[2],78;PCT4;
Mat Read #2,R[2],90;PCT5;
Mat Read #2,R[2],162;PCT6;
Mat Read #2,R[2],180;PCT9;
Mat Read #2,R[2],210;PCT8;
Mat Read #2,R[2],288;PCT0;
Mat Read #3,L3,242;H4;
Mat Read #3,L3,248;APCLOSE;
OKTOPRINT: Rem ok to print these types
PONUM = PCT1[0]
Gosub L_6100
K5$ = " ",K5$;K5$[1,6] = PCT1[2] Using "######"
A$ = "VENDOR NOT ON FILE!!!"
Search #5,2,1;K5$,R[5],E
If Not(E)
  Mat Read #5,R[5],0;A$;
End If 
Gosub L_5800
Gosub L_5000
let totrec=totrec+1
Gosub L_2200
Goto L_2000
L_2200: Rem calc totals
If H4 = 1 ! direct
  T9[0] = T9[0] + DISP_EXT
Else 
  If Not(POMISC) ! nonstock item
    T9[1] = T9[1] + DISP_EXT
  Else 
    T9[2] = T9[2] + DISP_EXT
  End If 
End If 
Return 

L_4000: Rem TOTALS
if j8<>0 return ! browser option
If CHKPONUM <> 0 Gosub L_5200
Gosub L_5800
Print #0;""
U5$ = "=",U5$
Print #0; Tab 75;U5$[1,50]
Print #0; Tab 75;"Total Directs ";
Print #0; Using "#########.##"; Tab 92;T9[0]
L = L + 1
Gosub L_5800
Print #0;""
Print #0; Tab 75;"Total Nonstocks ";
Print #0; Using "#########.##"; Tab 92;T9[1]
Goto OUTEND

L_5000: Rem print detail line info
if j8<>0
	tmp$=""
	tmp$=(pct1[0] using "######"),fdel$
	X2 = PCT1[4] \ Gosub L_7700
	tmp$=tmp$+X$[1,8],fdel$
	tmp$=tmp$+(pct1[1] Using "###"),fdel$
	
	tmp$=tmp$+rtrim$(L1$[81,92]),fdel$
	tmp$=tmp$+rtrim$(L1$[1,25]),fdel$
	! purchase order qty
	POQTY = 0;M1$ = " ",M1$
	If PCT0 = 0 !
		CNVTA = PCT2[0];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
		Gosub L_20000 \ POQTY = AMOUNT
		If L1[4] = -1 Let M1$ = "CWT"
		If L1[4] = -3 Let M1$ = "LB  "
		If L1[4] > 0 Mat Read #7,L1[4],10;M1$;
	Else 
	POQTY = PCT2[0] \ M1$ = "LB  "
	End If 
	tmp$=tmp$+(poqty Using PMASK$)+"/"+rtrim$(m1$),fdel$
	! purchase order cost
	CNVTA = PCT2[0];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 1
	DISP_QTY = AMOUNT
	CNVTA= PCT2[1];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
	DISP_COST = AMOUNT
	M1$ = ""
	If L1[5] = -1 Let M1$ = "CWT"
	If L1[5] = -3 Let M1$ = "LB  "
	If L1[5] > 0 Mat Read #7,L1[5],10;M1$;
	tmp$=tmp$+(DISP_COST Using PMASK$)+"/"+rtrim$(m1$),fdel$
	Gosub CALC_DISP_EXT
	Tmp$=tmp$+(disp_ext Using "########.##"),fdel$
	tmp$=tmp$+(pl4[10] Using "######"),fdel$
	K11$ = " ",K11$
	K11$[3,8] = PL4[10] Using "######"
	For X = 1 To 7
		K11$[1,2] = X Using "##"
		Search #11,2,1;K11$,R11,E
		If Not(E)
			Mat Read #11,R11,0;H0;
			K12$ = H0[4] Using "######"
			Search #12,2,1;K12$,R12,E
			If Not(E)
				Mat Read #12,R12,30;CUSTNAME$;
			Else 
				LET CUSTNAME$="Cust "+str$(H0[4])+" Not Found"
			End If 
			Goto GOTCUSTNAME1:
		End If 
	Next X
	CUSTNAME$ = "Order Not Open"
	GOTCUSTNAME1: Rem
	tmp$=tmp$+rtrim$(CUSTNAME$)+fdel$
	tmp$=tmp$+rtrim$(POH$[35,48]),fdel$ ! terms
	X2 = POH0[4] \ Gosub L_7700
	tmp$=tmp$+x$,fdel$ ! due date
	tmp$=tmp$+rtrim$(vendname$),fdel$ ! vendor name
	tmp$=tmp$,rdel$
	Call addtostr(e$,rstr$,tmp$)
else
	Print #0; Using "######"; Tab 0;PCT1[0];
	X2 = PCT1[4] \ Gosub L_7700
	Print #0; Tab 7;X$[1,8];
	Print #0; Using "###"; Tab 17;PCT1[1];
	Print #0; Tab 21;L1$[81,92];
	Print #0; Tab 34;L1$[1,25];
	POQTY = 0;M1$ = " ",M1$
	If PCT0 = 0 !
		CNVTA = PCT2[0];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
		Gosub L_20000 \ POQTY = AMOUNT
		If L1[4] = -1 Let M1$ = "CWT"
		If L1[4] = -3 Let M1$ = "LB  "
		If L1[4] > 0 Mat Read #7,L1[4],10;M1$;
	Else 
	POQTY = PCT2[0] \ M1$ = "LB  "
	End If 
	Print #0; Using PMASK$; Tab 59;POQTY;"/";M1$;
	CNVTA = PCT2[0];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 1
	DISP_QTY = AMOUNT
	CNVTA = PCT2[1];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
	DISP_COST = AMOUNT
	M1$ = ""
	If L1[5] = -1 Let M1$ = "CWT"
	If L1[5] = -3 Let M1$ = "LB  "
	If L1[5] > 0 Mat Read #7,L1[5],10;M1$;
	Print #0; Using PMASK$; Tab 76;DISP_COST;"/";M1$;
	Gosub CALC_DISP_EXT
	Print #0; Using "########.##"; Tab 93;DISP_EXT;
	Print #0; Using "######"; Tab 106;PL4[10];
	K11$ = " ",K11$
	K11$[3,8] = PL4[10] Using "######"
	For X = 1 To 7
		K11$[1,2] = X Using "##"
		Search #11,2,1;K11$,R11,E
		If Not(E)
			Mat Read #11,R11,0;H0;
			K12$ = H0[4] Using "######"
			Search #12,2,1;K12$,R12,E
			If Not(E)
				Mat Read #12,R12,30;CUSTNAME$;
			Else 
				LET CUSTNAME$="Cust "+str$(H0[4])+" Not Found"
			End If 
			Goto GOTCUSTNAME
	End If 
	Next X
	CUSTNAME$ = "Order Not Open"
	GOTCUSTNAME: Rem
	Print #0; Tab 113;CUSTNAME$[1,20];
	Print #0;""
endif
Return 
L_5200: Rem po total info
If L + 4 > L9
  L = L + 2
  Gosub L_5800
End If 
U5$ = "-",U5$
Print #0; Tab 7;U5$[1,124]
Print #0; Tab 7;"Terms: ";POH$[35,48];
Print #0; Tab 34;"     Due Date: ";
X2 = POH0[4] \ Gosub L_7700
Print #0; Tab 50;X$;
DISP_EXT = 0
Print #0; Tab 106;VENDNAME$[1,25]
Print #0;""
L = L + 4
Return 

L_5800: Rem HEADING ROUTINE
L = L + 2
If L < L9 Return 
If P = 0
 ! If L9 = 22 Print 'CS';
  Goto L_5836
End If 
If L9 <> 22 Goto L_5832
!Input Len 1;"\15\PRESS <CR> TO CONTINUE OR E: END "J1$
!Call String(1,J1$)
!If J1$ = "E" Gosub L_9040
!Print 'CS'
L_5832: Print #0;"\14\"
L_5836: P = P + 1
Print #0;"-la539-";
Print #0; Tab 10;ARDATE$; Tab (66 - Int(Len(CNAME$) / 2));CNAME$; Tab 100;"PAGE";P
Print #0; Tab 2;Msc$(3);
Print #0; Tab 53;"UNCONFIRMED PURCHASE ORDER REPORT";
Print #0;""
If WH
  R[8] = WH - 1 \ Read #8,R[8],4;WHNAME$;
  Print #0; Using "## "; Tab 2;"WAREHOUSE: ";WH;WHNAME$;
Else 
  Print #0; Tab 2;"ALL WAREHOUSES";
End If 
X2 = SDATE \ Gosub L_7700
Print #0; Tab 56;X$;" THRU ";
X2 = EDATE \ Gosub L_7700
Print #0;X$;
Print #0;""
Print #0;""
L = 7
Print #0;"PO NUM";
Print #0; Tab 7;"REC DATE";
Print #0; Tab 16;"LINE";
Print #0; Tab 21;"ITEM CODE";
Print #0; Tab 34;"DESCRIPTION";
Print #0; Tab 64;"QUANTITY";
Print #0; Tab 85;"COST";
Print #0; Tab 93;"EXT AMOUNT";
Print #0; Tab 106;"ORDER#";
Print #0; Tab 113;"CUSTOMER";
Print #0;""
Return 
L_6100: Rem "================================ get product
Call Logic(1,2 ^ 0,L1[3],X0)
NONSTOCK = X0
If Not(X0)
  Gosub L_6200
Else 
  Gosub L_6250
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  A[5] = NSD3[7] \ A[6] = NSD3[6] \ B[23] = NSD3[2] \ A3[3] = NSD3[8]
  PFU1[8] = NSD1[5];PFU1[10] = NSD1[4];PFU1[11] = NSD1[3];PFU1[15] = NSD1[7]
  A1$[9,38] = NSD$[13,42] \ A1$[63,92] = NSD$[43,72]
  A1$[140,151] = NSD$[1,12]
  If PFU1[15] = -3 Let A1$[127,127] = "Y"
End If 
Return 
L_6200: Rem READ PRODUCT FILE
Mat Read #6,L3[1];A1$;
Mat Read #6,L3[1],156;B;
Mat Read #6,L3[1],256;A; \ Mat Read #6,L3[1],460;A3;
Mat Read #6,L3[1],512;PFU1;
Mat Read #6,L3[1],554;PFU2;
Return 
L_6250: Rem READ NSTKDESC
Mat Read #10,L3[1];NSD$;
Mat Read #10,L3[1],96;NSD1;
Mat Read #10,L3[1],112;NSD2;
Mat Read #10,L3[1],132;NSD3;
Return 
CALC_DISP_EXT: Rem convert qty and cost to cost um, then calc ext cost
DISP_EXT = FNR(DISP_QTY * DISP_COST)
CNVTA = DISP_COST;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
DISP_COST = AMOUNT
If L1[5] = -1 Or L1[5] = -3
  If PCT6[0] <> 0 And PCT6[1] <> 0
    LBSUNIT = PCT6[0];LBSFACTOR = PCT6[1]
  Else 
    LBSUNIT = PL4[12];LBSFACTOR = PL4[13]
  End If 
  If LBSFACTOR <= 0 Let LBSFACTOR = 1
  If L1[5] = -1 Let DISP_EXT = FNR(DISP_COST * (LBSUNIT * DISP_QTY) / LBSFACTOR / 100)
  If L1[5] = -3 Let DISP_EXT = FNR(DISP_COST * (LBSUNIT * DISP_QTY) / LBSFACTOR)
End If 
If L1[5] = -2 Let DISP_EXT = DISP_COST
Return 
 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "00/00/00"
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 

L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem READ POLINE
Mat Read #4,R[4],0;L1;
Mat Read #4,R[4],12;L2;
Mat Read #4,R[4],24;L3;
Mat Read #4,R[4],66;L1$;
Mat Read #4,R[4],186;PL;
Mat Read #4,R[4],222;PL0;
Mat Read #4,R[4],232;PL4;
Mat Read #4,R[4],376;POMISC;
Mat Read #4,R[4],382;PL5;
Mat Read #4,R[4],442;PL6;
Mat Read #4,R[4],508;POCNTRL;
Return 
GETWTADJ: Rem get weight factor between product and po line
CWT_WT_ADJ = 1
PO_WT_BASE = 1
If Not(L3[1]) Return 
If L1[5] <> -1 And L1[5] <> -3 Return 
Call Logic(1,2 ^ 0,L1[3],X0)
NONSTOCK = X0
If Not(X0)
  Gosub L_6200
  If (L1[5] = -1 Or L1[5] = -3)
    If PCT6[0] <> 0 And PCT6[1] <> 0
      If (A[6] <> PCT6[0] Or A[5] <> PCT6[1]) ! do in diff units or unit/amts
        PROD_WT_BASE = A[6] / A[5]
        PO_WT_BASE = PCT6[0] / PCT6[1]
        If PROD_WT_BASE Let CWT_WT_ADJ = PO_WT_BASE / PROD_WT_BASE
      End If 
    Else 
      If (A[6] <> PL4[12] Or A[5] <> PL4[13]) ! do in diff units or unit/amts
        PROD_WT_BASE = A[6] / A[5]
        PO_WT_BASE = PL4[12] / PL4[13]
        If PROD_WT_BASE Let CWT_WT_ADJ = PO_WT_BASE / PROD_WT_BASE
      End If 
    End If 
  End If 
End If 
Return 

CLRSORT: Rem clear sort work file
KEYSORT$ = " ",KEYSORT$
SRCHCLR: Search #9,3,1;KEYSORT$,R[9],E \ If E = 2 Goto ENDCLRSORT
If E Gosub ERR_SEARCH
Search #9,5,1;KEYSORT$,R[9],E \ If E Gosub ERR_SEARCH
Goto SRCHCLR
ENDCLRSORT: Rem end of sort
Return 


L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End


ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
!Chain "MX000C"
!Chain "MX000"
!If j8 ! dx xml
!  Call addtostr(e$,rstr$,esdel$) !end section
!  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
!End If 
if not(j8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions to print"
			message$=message$+"."
		else
			Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
