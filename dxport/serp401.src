! >>> Program serp401
!
! description End of Period
!
! loadsave -w -n 100,10 -o prog/dxport/serp401.dl4 src/serp401.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dxRem BEDIT Version: 2.2 OBJECT CODE     Created: DEC  4, 2008  12:57:37
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/mx401.src (univ2) [mary] {00636}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! ----------------------  NOTE -----------------------
! if customer uses EVAP (order type 36/37) they will have EVAPMth set to non-zero
! if not using EVAP - LEAVE EVAPMTH AT ZERO !
! -----------------------------------------------------
!
Declare Intrinsic Sub FindF,InpBuf,String,Time,MiscStr,TrxCo
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
!External Lib "OLDCALLS.LIB"
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
Declare sub VerifyEop,reset_misc
!Option Default Dialect IRIS1
Try
	com 2%,intco,eoy,1%,DEBUG
	com rstr$[5000],Message$[600]
	dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10],action1$[20]
	dim 1%,SC,SR,Z9[9],PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10],J4$[50]
	dim 2%,WHSE,JRNL
	dim 1%,eflg,returnstatus
	dim e$[500] ! 
	dim 3%,SPREC,rec_uac,rec_misc
	
	dim List$[2000,2000]
Dim 1%,POGLFLAG,SPO,MRTS2[2],MRTS2[3]
Dim 1%,EOYMONTH,ARMONTH,MRTSFLAG,HOLIUPDATEBATMAN,EVAPMth
Dim A$[50],G$[128],P9$[20],P60$[50],1%,S0,T0,2%,S1,S2,S3[1],S9[1],X$[10],k_misc$[50]
Dim F$[16],M$[50],KEYMRTS$[30]
Dim 2%,CRFLAG[1],I2,I3,ardate,acper
Dim HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],LASTEOM$[8]
dim ReportDir$[75],Basename1$[75],StatusFile$[150],1%,statchan,3%
dim errmsg$[500]
! Try call dxopen() else Rem ! needed?
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$)
Try close #ctlc Else Rem
ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42  ! open with write permission
!LET j$="6/sortwork00045"\open #9,j$ !
Mat Read #CTLC,19,50;P9$;
	Read #CTLC,51,72;EOYMONTH;
mat READ #CTLC,0,8;LASTEOM$;
	Read #CTLC,0,120;ARMONTH;
	Read #CTLC,0,132;EVAPMth;
	Read #CTLC,52,32;S1;
	Read #CTLC,52,20;S2;
	Read #CTLC,51,76;SPO;
	Read #CTLC,51,88;POGLFLAG;
	Read #CTLC,0,120;S0;
	Mat Read #ctlc,0,108;ARDATE;
    tmp$ = ARDATE Using "&&&&&&" \ ARPER = tmp$[1,4]
	Call DateToJulian(1,tmp$,tmp$,E)
	j_ardate=tmp$
	coid=intco
	tmp$ = (val(lasteom$[7,8]) using "&&"),(val(lasteom$[1,2]) using "&&"),(val(lasteom$[4,5]) using "&&")
	Call DateToJulian(1,tmp$,tmp$,E)
	j_lasteom=tmp$
	if abs(J_ardate-J_lasteom)<20
		! something is wrong! did not run last eom at least 20 days ago
		let returnstatus=0
		let message$="Last EOM only "+str$(J_ardate-J_lasteom)+" days ago. "
		goto endeopproc
	endif
	action1$ = UCase$(action1$)
 action1$ = RTrim$(action1$) ! UPPERCASE & TRIMMED
	EVAP=0 \ if EVAPMth>0 and EVAPMTH<13 and not(fra(EVAPMth)) let EVAP=1 ! yes evap
select case action1$

case "STARTEOP"
	Call dxsave(0,"/tmp/md.txt!")
	COID=IntCo 
	let j8=99
	eflg=0
	returnstatus=1 ! no errors
	errmsg$=""
	G$ = "JANUARY  FEBRUARY MARCH    APRIL    MAY      JUNE     "
	G$[55] = "JULY     AUGUST   SEPTEMBEROCTOBER  NOVEMBER DECEMBER "
	if armonth<0 or armonth>12
		let eflg=eflg+1
		let errmsg$=errmsg$+"Invalid A/R Month. "
	endif
	if eoymonth<0 or eoymonth>12
		let eflg=eflg+1
		let errmsg$=errmsg$+"Invalid End of Year Month. "
	endif
	! message section
	Eoy=0
	If ARMONTH= EOYMONTH Let EOY = 99
	! section 1 ------
	clear list$[]
	let list$[0]=bsdel$,"ENDOFPERIOD",fdel$
	webstr$ = "EOY",fdel$,"MONTHCODE",fdel$,"MONTHNAME",fdel$
	list$[1]=webstr$
	let tmp$="N"
	if eoy<>0 let tmp$="Y"
	webstr$=tmp$,fdel$
	webstr$=webstr$+str$(armonth),fdel$
	webstr$=webstr$+rtrim$(G$[S0 * 9 - 8,S0 * 9]),fdel$
	list$[2]=webstr$
	call AddToStr(e$,rstr$,List$[]) 
	Call AddToStr(e$,rstr$,esdel$)	! end of section 
	clear list$[]
	list$[0]=bsdel$,"EOPMessages",fdel$
	list$[1]="Message",fdel$
	if not(eoy)
		list$[2]="** END OF MONTH "
	else
		list$[2]="** END OF MONTH AND END OF YEAR FOR "
	endif
	list$[2]=list$[2]+G$[S0 * 9 - 8,S0 * 9]
	list$[2]=List$[2]+" **",fdel$ 
	list$[3]="*BACKUP RECOMMENDED PRIOR TO PROCEEDING WITH END OF PERIOD AND RETAINED AS HISTORY *",fdel$
	List$[4]="This Procedure will clear "
	if not(eoy)
		let list$[4]=list$[4]+"Monthly "
	else
		let list$[4]=list$[4]+"Monthly and Yearly "
	endif
	list$[4]=list$[4]+fdel$
	list$[5]=list$[5]+"Data For the Following Files: ",fdel$
	list$[6]="     Customer, Salesperson, Product, Taxes, Vendor, etc. ",fdel$
	list$[7]=" ", fdel$! blank line
	list$[8]="      Prepare Warehouse Analysis File for Next Month ",fdel$
	list$[9]=" " ,fdel$! blank line
	list$[10]="The following procedures are recommended to be run prior to end of period: ",fdel$
	list$[11]="     ALL INVOICES, CREDIT MEMOS, CASH RECEIPTS, DIRECT A/R, STOCK TRANSACTIONS ",Fdel$
	list$[12]="     SHOULD BE ENTERED, JOURNALED & ACCEPTED ",fdel$
	list$[13]="     If Applicable, Service Charges generated and Statements ",fdel$
	List$[14]="     Salesman Commission Reports and Updates ",fdel$
	if not(EVAP)
	list$[15]=" ",fdel$
	Else
	list$[15]="     EVAP Updated for the Month ",fdel$
	endif
	list$[16]=" ",fdel$
	list$[17]=" ",fdel$
	list$[18]=" ",fdel$
	if eoy<>0
		Mat Read #1,179,482;HOLIUPDATEBATMAN
		if not(holiupdatebatman)
			List$[19]="Note: Holiday File Has Not Been Updated For Next Year ",fdel$
		endif
	endif
	List$[20]=" ",fdel$
	!list$[21]=esdel$
	call AddToStr(e$,rstr$,List$[])
	Call AddToStr(e$,rstr$,esdel$)	! end of section 
	Call VerifyEOP()
	! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	! done with it
	! Call dxsave(0,"/tmp/md.txt!")
        call SetOutput(e$,rstr$) ! "STARTEOP"

Case "PROCESSEOP"
	Returnstatus=1
	COID=IntCo 
	let j8=99
	eflg=0
	returnstatus=1 ! no errors
	errmsg$=""
	if armonth<0 or armonth>12
		let returnstatus=0
		let message$="Invalid A/R Month. "
		goto endeopproc
	endif
	if eoymonth<0 or eoymonth>12
		let returnstatus=0
		let message$="Invalid End of Year Month. "
		goto endeopproc
	endif
	! message section
	Eoy=0
	If ARMONTH= EOYMONTH Let EOY = 99
	Call VerifyEOP()
	if eflg<>0
		let returnstatus=0
		let message$=errmsg$
		let message$=message$+" END OF PERIOD NOT PERFORMED "
		goto endeopproc:
	endif
	F$ = COID Using "1/debug401#"
	If COID > 9 Let F$ = COID Using "1/debug401##"
	Call FindF(F$,K)
	If K<>0
		TrY Kill F$ Else Rem
	endif
	Tmp$="files/",f$
	Build #0,tmp$ ! F$
	M$ = " ",M$
	Write #0,0;M$;
	tmp$ = "files/",f$," <666>"
	Modify tmp$                       
	Try Close #0 Else Rem
	Try
		Open #0,F$
	Else
		let returnstatus=0
		let message$="Error in 401 Debug File "
		goto endeopproc:
	end Try
	If DEBUG<>0	
		M$ = F$
		Mat Write #0,0;M$
	End If 
	ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	BaseName1$ = "eop_stat"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
	StatusFile$ = ReportDir$ + "/"+BaseName1$
	Call FindF(StatusFile$,tmp)
	If tmp Kill StatusFile$
	StatChan = 88 ! FindChannel() ! channel to build text file need fixed channel
	Try Close #88 Else Rem
	Try
		Build #StatChan,StatusFile$ As "TEXT"
	Else
		eflg=eflg+1
		let message$=messaGE$+"Error in Building Status File "
		goto endeopproc:
	end TRY
	Try Close #StatChan Else Rem
	Try
		Open #StatChan,StatusFile$
	else
		eflg=eflg+1
		let message$=message$+"Error in Opening Status File "
		goto endeopproc:
	end TRY
	if eoy<>0
		print #statchan;"End of Month and Year ";
	else
		print #statchan;"End of Month ";
	endif
	print #statchan;G$[S0 * 9 - 8,S0 * 9]; 
	Print #StatChan;" Process Started..."

	if eoy<>0
		Mat Read #1,179,482;HOLIUPDATEBATMAN
		if not(holiupdatebatman)
			Print #statchan;"Reminder:  Holiday File Needs to be Updated for the New Year "
		endif
	endif
	! PAUSE 20
	e = AddToMYReports(BaseName1$) 
	if e<0
		message$=message$+"Error adding to my reports!" 
		print #statchan;"Error adding to my reports!" 
		let eflg=eflg+1
		goto endeopproc:
	endif
	! Misc Receipt to stock
	CHNL = FindChannel()
	F$ = COID Using "6/MISCRTS#"
	Open #chnl,F$
	KEYMRTS$ = " ",KEYMRTS$
	Search #chnl,3,1;KEYMRTS$,R,E
	If E = 2
		MRTSENT = 0 \ Write #ctlc,20,174;MRTSENT;
		Try Close #chnl Else Rem
			
	Else 
		let returnstatus=0
		message$=message$+"Misc Receipt to Stock Entries Need to be accepted."
		print #statchan;"Misc Receipt to Stock Entries Need to be accepted."
		
	endif
	read #ctlc,1,2;T0;
	if t0<>0
		let returnstatus=0
		let errmsg$=errmsg$+"End of Period Flagged in Process Elsewhere."
		print #statchan;"End of Period Flagged in Process Elsewhere."
		let message$=message$+errmsg$
		goto endeopproc:
	endif
	! verify customer credit history is in current period
	Mat Read #ctlc,60,50;P60$;
	If P60$[20,20] = "Y" ! customer credit history
		CHNL = FindChannel()
		Read #ctlc,88,336;F$;
		rOpen #chnl,F$
		Dim 2%,CHT0[1],3%
		dim keycrh$[50]
		let keycrh$=" ",keycrh$
		do
			search #chnl,3,1;keycrh$,tmp3,e
			if e=2 exit do
			if e<>0
				let returnstatus=0
				let message$=message$+"Error In Customer Credit History File "
				print #statchan;"Error In Customer Credit History File "
				goto endeopproc:
			endif
			Mat Read #chnl,tmp3,0;CHT0; 
			If CHT0[1]<> ArPER 
				Let returnstatus=0
				let message$="Cust Cred Hist Acct Per "+str$(cht0[1])+" A/R Acct Per "+str$(arper) 
				print #statchan;message$
				goto endeopproc:
			endif
			exit do
		loop
		try close #chnl else rem
	endif
	If EVAP ! using EVAP
		If S0<>EVAPMth ! must agree (always run before 401 so they agree)
			returnstatus=0;message$="FINAL MONTHLY EVAP RECONCILE (411) HAS NOT BEEN RUN THIS MONTH!!"
			print #statchan;message$
			Goto endeopproc: ! "abort 401
		Endif
	endif
	let t0=401
	write #ctlc,1,2;T0;
	Message$="End Of Period is processing.  Check back later in My Reports."
	print #statchan;message$
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	Message$="did call to CreateNetStatus"
	print #statchan;message$
	call addToStr(e$,rstr$,webstr$)
	Message$="did call to addToStr"
	print #statchan;message$
	call setoutput(e$,rstr$)
	Message$="did call to setoutput"
	print #statchan;message$
	message$ = "The following has been added to aid UBS in debugging." \ Print #statchan;message$                                                              
	message$ = "It has no affect on the processing." \ Print #statchan;message$                                                                              
	Trace On #statchan      
	try call dxclose() else rem
	let t0=401
	write #ctlc,1,2;T0;
	Message$="write 401 to crunch port"
	print #statchan;message$
	Trace Off                                                                
	message$ = "UBS debugging aid is now off." \ Print #statchan;message$    
	! rem let t9=0
	
	If P9$[17,17] = "Y"
		Message$="P9$[17,17] = Y"
		print #statchan;message$
		If POGLFLAG <> 0 And SPO <> 0
			Try
				print #statchan;"Process General Ledger Purchase Order Interface"
			else
				rem
			end try
			Message$="going to call mx013gl.dl4"
			print #statchan;message$
			Call "MX013GL.DL4",Message$,intco,rstr$
			Message$="returned from call mx013gl.dl4"
			print #statchan;message$
			Try
				print #statchan;"Complete General Ledger Purchase Order Interface Process"
			else
		rem
			end try	! Call "mx013gl"
		End If 
	End If 
	! remove after testing 
	!print #statchan;"Test Complete.. No Update Done.. Remove Line "
	!let t0=0 ! reset the flag
	!write #ctlc,1,2;T0;
	!goto CompEop: 
	! remove after testing
	print #statchan;"Setup completed. Moving to step 401A"
	Chain "401A.dl4"

	EndEopProc: ! end of year process
	! status section
	print #statchan;message$
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	! done with it
        call SetOutput(e$,rstr$) ! "STARTEOP"
	CompEoP: ! end of period complete
 end select
  ! call dxclose()
else
  include "src/callmainerrnet.inc"
  call dxclose()
end try
end


! --------------------------------------------------------------------
Sub VERIFYEOP()! verify eop 
 Try
	ReturnStatus=1
	Message$="OK" 
	
	If S0 <> S1 
		let eflg=eflg+1
		If P9$[17,17] = "Y"
			errmsg$=errmsg$+"Monthly G/L Cash Receipts Journal Has Not Been Accepted. "
		else
			errmsg$=errmsg$+"Monthly G/L Cash Receipts Journal Has Not Been Accepted. "
		endif
	endif

	If P9$[17,17] = "Y" 
		If S0 <>S2 
			eflg=eflg+1
			errmsg$=errmsg$+"Monthly G/L Sales Journal Has Not Been Accepted. " 
		endif
		If P9$[2,2] = "M"
			Mat Read #ctlc,52,48;S3;
			If S3[0]<>0  
				If S3[1] <> S0
					eflg=eflg+1
					errmsg$=errmsg$+"Monthly G/L MFG Report Has Not Been Accepted. "
				End If 
			End If 
		endif
	endif
	! lifo Reserve
	Mat Read #ctlc,60,50;P60$;
	If P60$[9,9] = "L"  ! lifo Inventory Method
		Mat Read #ctlc,52,36;S9;
		if s9<>0 ! lifo reserve is on 
			If S0 <> S9[1]
				eflg=eflg+1
				errmsg$=errmsg$+"Lifo Reserve Has Not Been Processed. "
			endif
		endif
	endif
	
	Mat Read #ctlc,20,0;MRTSFLAG;
	CHNL = FindChannel()
	F$ = COID Using "6/MISCRTS#"
	Open #chnl,F$
	KEYMRTS$ = " ",KEYMRTS$
	Search #chnl,3,1;KEYMRTS$,R,E
	If E = 2
		!MRTSENT = 0 \ Write #1,20,174;MRTSENT;
		! Close #99
		If MRTSFLAG<>0
			eflg=eflg+1
			errmsg$=errmsg$+"Miscellaneous Receipts To Stock in Journal/Accept Process. "
		endif	
	Else 
		IF MRTSFLAG<>4 
			!! flag says misc journal/receipt not in process
			!! so reset any misc receipt lines that are marked as being that way
			ch_misc = chnl
			Call reset_misc()
		ENDIF
		let eflg=eflg+1
		errmsg$=errmsg$+"Misc Receipt to Stock Entries Have Not Been Accepted "
		mat read #chnl,r,104;mrts2;
		if mrts2[2]<>0
			errmsg$=errmsg$+"for whse "+str$(mrts2[2])
		endif
		mat read #ctlc,20,0;mrtsflag;
		if not(mrtsflag)
			let mrtsflag=2\mat write #ctlc,20,0;mrtsflag;
		endif
	endif
	try Close #chnl else rem
    ! verify customer credit history is in current period
	Mat Read #ctlc,60,50;P60$;
	If P60$[20,20] = "Y" ! customer credit history
		CHNL = FindChannel()
		Read #ctlc,88,336;F$;
		rOpen #chnl,F$
		Dim 2%,CHT0[1],3%
		dim keycrh$[50]
		let keycrh$=" ",keycrh$
		do
			search #chnl,3,1;keycrh$,tmp3,e
			if e=2 exit do
			if e<>0
				let eflg=eflg+1
				errmsg$=errmsg$+"Error In Customer Credit History File "
				exit do
			endif
			Mat Read #chnl,tmp3,0;CHT0; 
			If CHT0[1]<> ArPER 
				let eflg=eflg+1
				errmsg$=errmsg$+"Cust Cred Hist Acct Per "+str$(cht0[1])+" A/R Acct Per "+str$(arper) 
				exit do
			endif
			exit do
		loop
		try close #chnl else rem
	endif
	If EVAP ! using EVAP
		If S0<>EVAPMth ! must agree (always run before 401)
			let eflg=eflg+1
			errmsg$=errmsg$+"FINAL MONTHLY EVAP RECONCILE (411) HAS NOT BEEN RUN THIS MONTH!  "
		Endif
	endif
	Read #ctlc,1,2;T0;
	if t0<>0
		let eflg=eflg+1
		let errmsg$=errmsg$+"End of Period Flagged in Process Elsewhere. "
	endif
	if eflg<>0
		let returnstatus=0
		let message$=errmsg$
	endif

else
    include "src/callsuberr.inc"
 end try
end sub ! Verify Eop

Sub reset_Misc()! reset any records in miscrts file that are stuck at status 1 or 2 
!       1 - in process of printing on 324 journal       
!       2 - in process of being accepted on 324 journal 
Try
	K_MISC$=" ",K_MISC$
misc_loop: search #ch_misc,3,1;k_misc$,rec_misc,e
	if not(e)
		mat read #ch_misc,rec_misc,104;mrts2
		if mrts2[3] = 1 or mrts2[3] = 2
			mrts2[3] = 0
			mat write #ch_misc,rec_misc,104;mrts2
		endif
		goto misc_loop
	endif
else
    include "src/callsuberr.inc"
 end try
end sub ! reset_misc
