! >>> Program 427
!
! description Customer MTD/YTD Summary or 12 Month Detail
!
! loadsave -w -n 100,10 -o prog/dxport/427.dl4 src/427.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL  9, 2003  14:38:15
Rem /w/papermaster/r2002//usr/acct/rce/work/devl/mx/mx427.src (univ2) [rce] {31753}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE! - ! ****
Rem
Rem  MX427  - Comparative Customer Sales
Rem  Done for Huff/Lewmar: CCT #85967 & 85526
Rem  Created: Feb  2, 1996 11:38 am
!
External Lib "ubsfunc.dl4"
Declare External Sub UTMonths,GetCostLevels
!
External Lib "libprod.lib"
Declare External Sub ProdGroup
!
Declare Intrinsic Sub InpBuf,MiscStr,String,Time
!
! - Option Default Dialect IRIS1
Com 1%,COST_LEV[3]
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim OrderType$[100]
dim Blank$[100] \ Blank$=" ",Blank$
dim EndParam$[100] \ EndParam$="}",EndParam$
dim 3%,tmp3
!
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J6,J7,J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {begin srcdevl/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1],PRD1
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1],PRD0
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Rem {end dim.prod.i}
Rem {begin srcdevl/inc/dim.cust.i}
Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142]
Dim 2%,A0[3],C1[12],REC,C3[1]
Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8,C11[2]
Dim 3%,C4[6],C10[5],CFIN[8],U1,C9,C5[5],C6[9],C12[1]
Rem {end dim.cust.i}
Rem {begin srcdevl/inc/dim.slsm.i}
Dim 3%,SLSM1[3],SLSM2[19,5],SLSM3[9]
Dim SLSM1$[118]
Rem {end dim.slsm.i}
Rem {begin srcdevl/inc/dim.lastpr.i}
Dim LP$[12],LP2$[84],LPMT$[2]
Dim 1%,LPC3[4],AI,LPEUN[2],LPWH,LPCPT,STVALUE
Dim 2%,LPDF,LPC1[2],LPR1[3],LPC5[3],LPPCDATE,LPCSDT,LPDEPT
Dim 3%,LPC2[2],LPC4[3],LPR[4],LPUNF[6],PERM[1],LPLPERM,LPCURR[1]
Rem {end dim.lastpr.i}
Dim CCD$[14],CNAME$[30],COMMOD$[31],DATE$[8],DHA2$[12],DHP3$[6]
Dim ECOMM$[4],EPROD$[12],FLE$[16],HLDCOMM$[4],HLDPROD$[12],KEY_COMMD$[10]
Dim KEY_CUST$[20],KEY_DIVH$[50],KEY_LASTPR$[50],KEY_PROD$[20],KEY_SLSM$[10]
Dim KEY_SORT$[60],LPDATE$[8],LPRICE$[12],LPUM$[5],MASK$[12],MTH$[108]
Dim P9$[50],P60$[50],SCOMM$[4],SELLUM$[4],SLNAME$[30],SPROD$[12]
Dim TME$[26],UNIT$[4]
Dim 1%,ARMONTH,BOYMNTH,CH_CCODES,CH_CNTRL,CH_COMMD,CH_CUST
Dim 1%,CH_DIVH,CH_LASTPR,CH_PROD,CH_SLSM,CH_SORT,CLIN,CMPRNTD,CNVTU[2]
Dim 1%,COMSORT,COMTOT,CTPRNTD,CUSTSORT,CUSTTOT,DHDIR,DMC2[38],I
Dim 1%,GTPRNTD,LINDTL,M9,MAXLN,MONTH_[4],MTDSUM,NC,NR,ORDTYPDTL,OTPRNTD,PPROF
Dim 1%,PRNTCOMM,PRNTCUST,PRNTDIFF,PRNTPROD,PRNTSLSM,PRODSORT,PTPRNTD
Dim 1%,SC,SLSM[1],SLSMSORT,SLSMTOT,SR,STPRNTD,VARIT,X,X6,X7,X8,Y,NOMTHS,ZERO
dim 1%,ch_pw,whse,emptysort
Dim 2%,CUST[1],DHC2,DHP3[4],DIV,E,FLAG,HLDCUST,HLDSLSM,HLDTYPE,MAXDEPT
Dim 2%,SCRN,SEL,VARTYPE,WHSE,CCTGY[1],D9[5],cpage
Dim 3%,AMOUNT,CMS1[12,2],CMS2[12,2],CNVTA,CUS1[12,2],CUS2[12,2]
Dim 3%,DHLYP2[12,2],DHP2[12,2],GTS1[12,2],GTS2[12,2],MINQTY,OTS1[12,2]
Dim 3%,OTS2[12,2],PFS1[12,2],PFS2[12,2],PRNT[12,2],REC_COMMD,REC_CUST
Dim 3%,REC_DIVH,REC_LASTPR,REC_PROD,REC_SLSM,REC_SORT,S1[12,2],S2[12,2]
Dim 3%,SLS1[12,2],SLS2[12,2],T1[12,2],T2[12,2],T3[12,2],T4[12,2],T9[5]
Dim 3%,VARAMT,VARPCT,parm[10],whmisc2[7] 
dim kpw$[50],custom_customer$[30]
Def FNI(X) = Sgn(X) * (Int(Abs(X) + .999))
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
FLEOPEN: Rem "Open Files Here
For A = 2 To 10
  Read J1 \ If J1 = -1 Goto NXTFLE
  Read #1,88,J1;FLE$;
  Ropen #A,FLE$
NXTFLE: Next A
Data "1824","1808","1792","2288","1376","1648","1728","-1","1744"
CH_SLSM = 2;CH_CUST = 3;CH_PROD = 4;CH_COMMD = 5;CH_LASTPR = 6
CH_DIVH = 7;CH_CCODES = 8;CH_SORT = 9;CH_CNTRL = 1
ch_pw=10
Read #1,88,1632;FLE$;
Ropen #11,FLE$
MAXDEPT = Chf(11) - 1
Close #11
mat read #1,115,60;custom_customer$;
If P9$[44,44] <> "Y" Let MAXDEPT = 0
Read #1,3,0;CNAME$;
Read #1,0,120;ARMONTH;
Read #1,0,100;DATE$;
Mat Read #1,115;D9;
Read #1,51,74;BOYMNTH;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
NOMTHS = ARMONTH - BOYMNTH \ If NOMTHS < 0 Let NOMTHS = NOMTHS + 12
NOMTHS = NOMTHS + 1
MASK$ = "--------#"
ZERO = 0
GET_MTHHDG: Rem "get the Month Headings (3 Char)
!
MONTH_[1] = 1;MONTH_[2] = 0 \ rem ! - Call "UTMONTHS",MONTH_[],MTH$
Call UTMonths(e$,MONTH_[],MTH$,BOYMNTH) ! set up month headers
!
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J1 = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
SCRN = J8
MAXLN = 60 \ If SCRN Let MAXLN = 21
!
!!!! dx add xport reporting code
Dim tmp$[500],tmp1$[300],tmp2$[300]
dim ProdXML$[200],CustXML$[200],SlsmXML$[200],CommXML$[200]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
call GetCostLevels(e$,Cost_Lev[],IntCO,UserID$) ! get cost levels
!! Call dxsave(0,"/tmp/in427!")  
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"427",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!!!  dx add xport reporting code
call dxget("mtdsum",tmp$) \ if tmp$="D" let mtdsum=0 else mtdsum=1 ! detail or summary
call dxget("slsmsort",tmp$) \ if tmp$="" let slsmsort=0 else slsmsort=1 ! sort by salesman
call dxget("slsmtot",tmp$) \ if tmp$="" let slsmtot=0 else slsmtot=1 ! salesman subtot
Call dxget("begslsm",tmp$) \ slsm[0]=tmp$ ! starting salesman
Call dxget("endslsm",tmp$) \ if tmp$="" let slsm[1]=999 else slsm[1]=tmp$ ! ending salesman
call dxget("custsort",tmp$) \ if tmp$="" let custsort=0 else custsort=1 ! sort by customer
call dxget("custtot",tmp$) \ if tmp$="" let custtot=0 else custtot=1 ! customer subtot
Call dxget("begcust",tmp$) \ cust[0]=tmp$ ! starting customer
Call dxget("endcust",tmp$) \ if tmp$="" let cust[1]=999999 else cust[1]=tmp$ ! ending customer
Call dxget("begcctgy",tmp$) \ cctgy[0]=tmp$ ! starting customer category
Call dxget("endcctgy",tmp$) \ if tmp$="" let cctgy[1]=999 else cctgy[1]=tmp$ ! ending customer category
call dxget("comsort",tmp$) \ if tmp$="" let comsort=0 else comsort=1 ! sort by commodity
call dxget("comtot",tmp$) \ if tmp$="" let comtot=0 else comtot=1 ! commodity subtot
Call dxget("begcom",SCOMM$) \ SCOMM$=SCOMM$,Blank$ ! starting commodity
Call dxget("endcom",ECOMM$) \ ECOMM$=ECOMM$,EndParam$ ! ending commodity
Call dxget("begprod",SPROD$) \ SPROD$=SPROD$,Blank$ ! starting product
Call dxget("endprod",EPROD$) \ EPROD$=EPROD$,EndParam$ ! ending product
call dxget("ordertype",OrderType$) ! order types format (1,2,4,5) <cr> for all
call dxget("prntdiff",tmp$) \ if tmp$="" let PRNTDIFF=0 else PRNTDIFF=1 ! diffence this & last year
call dxget("pprof",tmp$) \ if tmp$="" let PPROF=0 else PPROF=1 ! print profit
call dxget("vartype",tmp$) \ if tmp$="" let VARTYPE=0 else VARTYPE=tmp$ ! variance 0=none 1=units 2=dollars
call dxget("varit",tmp$) \ if tmp$="" let VARIT=0 else VARIT=1 ! variance 0=greater 1=less than
Call dxget("varamt",tmp$) \ VARAMT=tmp$ ! variance percent
Call dxget("minqty",tmp$) \ MINQTY=tmp$ ! min ytd & last ytd units sold
Call dxget("lindtl",tmp$) \ LINDTL=tmp$ ! type, 1=units 2=dollars 3=both
call dxget("div",tmp$) \ DIV=tmp$ ! division
Call dxget("whse",tmp$) \ WHSE=tmp$ ! warehouse
!!!  dx end
!
! salesman params
if SLSMSORT=0 let SLSMTOT=0 ! no sort, no totals
if SLSMTOT let CUSTTOT=0 \ COMTOT=0 ! print salesman total
if SLSM[0]<0 or SLSM[0]>999 let e$="Invalid starting salesman, must be between 0 and 999!" \ error 10000
if SLSM[1]<SLSM[0] or SLSM[1]>999 let e$="Invalid ending salesman, must be between starting salesman and 999!" \ error 10000
!
! customer params
if CUSTSORT=0 let CUSTTOT=0 ! no sort, no totals
if CUSTTOT let COMTOT=0 ! print customer total
if CUST[0]<0 or CUST[0]>999999 let e$="Invalid starting customer, must be between 0 and 999999!" \ error 10000
if CUST[1]<CUST[0] or CUST[1]>999999 let e$="Invalid ending customer, must be between starting customer and 999999!" \ error 10000
!
! cust category params
if CCTGY[0]<0 or CCTGY[0]>999 let e$="Invalid starting cust category, must be between 0 and 999!" \ error 10000
if CCTGY[1]<CCTGY[0] or CCTGY[1]>999 let e$="Invalid ending cust catgory, must be between starting cust category and 999!" \ error 10000
!
! commodity params
if COMSORT=0 let COMTOT=0 ! no sort, no totals
if ECOMM$<SCOMM$ or ECOMM$>EndParam$[1,len(ECOMM$)] let e$="Invalid ending commodity!" \ error 10000
!
! product params
if EPROD$<SPROD$ or EPROD$>EndParam$[1,len(EPROD$)] let e$="Invalid ending product!" \ error 10000
!
! - if SLSMSORT=0 if CUSTSORT=0 if COMSORT=0 let PRODSORT=1 
if SLSMTOT or CUSTTOT or COMTOT let PRODSORT=0 else PRODSORT=1
!
! order types
If OrderType$ 
  tmp$=OrderType$
  X = 1
  For cnt = 1 To 38 \ DMC2[cnt] = 0 \ Next cnt
NextType:
  X2 = 0 \ Let X$ = tmp$ To "," : X2
  X1 = X$ \ If X1 < 1 Or X1 > 38 Let X = 0 \ Goto ExitType
  DMC2[X1] = 1 
  if X2 let tmp$=tmp$[X2+1] \ goto NextType
ExitType:
  if X=0 let e$="Invalid order type entered" \ error 10000
else
  for cnt=1 to 38 \ DMC2[cnt]=1 \ next cnt
endif
!
! print profit
if COST_LEV[1]=0 let pprof=0
!
! variance params
IF VARTYPE=0 let VARIT=0 \ VARAMT=0 ! no variance selected
If VARAMT<0 or VARAMT>9999.9 let e$="Invalid variance percentage, must be between 0 and 9999.9!" \ error 10000

!
If DIV < 0 Or DIV > 99 let e$="Invalid division, must be between 0 and 99!" \ error 10000
!
If WHSE < 0 Or WHSE > D9[5] let e$="Invalid warehouse, must be between 0 and ",D9[5]," !" \ error 10000
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 


!
STRTSORT: Rem "start of Sort
! - Print @0,22;'CE';"SORTING, PLEASE WAIT. ." \ Signal 3,0
! - If Err 0 Gosub ERR_ESCAPE
CLRSORT_LOOP: Rem "in case - clear first
Search #CH_SORT,3,1;KEY_SORT$,REC_SORT,E
If E = 2 Goto STRTSORTLOOP
Search #CH_SORT,5,1;KEY_SORT$,REC_SORT,E
If E Let e$ = "syserrorfile 427 sortfile mode (m)=5 keyno (k)=1 r=",REC_SORT," e=",e," keyval (k$)=",KEY_SORT$ \error 10000
Goto CLRSORT_LOOP
!
STRTSORTLOOP: Rem "Start going thru Files?
DHDIR = 1
If Not(SLSMSORT) And Not(CUSTSORT) Let DHDIR = 6
KEY_DIVH$ = " ",KEY_DIVH$
If DHDIR = 1 Let KEY_DIVH$ = CUST[0] Using "######"
If DHDIR = 6 Let KEY_DIVH$ = SPROD$
DIVH_LOOP: Rem "Loop Thru All
Search #CH_DIVH,3,DHDIR;KEY_DIVH$,REC_DIVH,E
If E = 2 Goto SORTDONE
If DHDIR = 1
  X2 = KEY_DIVH$[1,6]
  If X2 > CUST[1] Goto SORTDONE
End If 
If DHDIR = 6
  If KEY_DIVH$[1,12] > EPROD$[1,12] Goto SORTDONE
End If 
Gosub READ_DIVH
HLDPROD$ = DHA2$[1,12] 
Gosub GET_PROD
GOSUB GET_PRODWHSE: !     
HLDCUST = DHC2 
Gosub GET_CUSTOMER
PARSE_SEL: Rem "Get ranges
If C1[2] < SLSM[0] Goto DIVH_LOOP
If C1[2] > SLSM[1] Goto DIVH_LOOP
If C1[1] < CUST[0] Goto DIVH_LOOP
If C1[1] > CUST[1] Goto DIVH_LOOP
If C1[9] < CCTGY[0] Goto DIVH_LOOP
If C1[9] > CCTGY[1] Goto DIVH_LOOP
If DHP3$[1,4] < SCOMM$ Goto DIVH_LOOP
If DHP3$[1,4] > ECOMM$ Goto DIVH_LOOP
If A$[140,151] < SPROD$ Goto DIVH_LOOP
If A$[140,151] > EPROD$ Goto DIVH_LOOP
REM if parm[2]=0 Goto DivH_Loop: ! discontinued item    
X1 = DHP3[3]
If DMC2[X1] = 0 Goto DIVH_LOOP
If DIV !"cct120563
  If DIV <> DHP3[2] Goto DIVH_LOOP
End If 
If WHSE
  If WHSE <> DHP3[1] Goto DIVH_LOOP
End If 
PASSD_PARSE: Rem "Made it Thru
Gosub CLRWORKVAR
Gosub CALCTYR \ Gosub CALCLYR
Gosub CALCYTD
If MINQTY
  For X = 1 To 12
    If S1[X,0] Goto GOT_QTY
    If S2[X,0] Goto GOT_QTY
  Next X
  Goto DIVH_LOOP
GOT_QTY: Rem "At least not all zeros
End If 
KEY_SORT$ = " ",KEY_SORT$
If SLSMSORT Let KEY_SORT$[1,3] = C1[2] Using "###"
If CUSTSORT Let KEY_SORT$[4,9] = DHC2 Using "######"
If COMSORT Let KEY_SORT$[10,13] = DHP3$[1,4]
If DHDIR = 6 And PRODSORT And Not(SLSMSORT) And Not(CUSTSORT) And Not(COMSORT)
  KEY_SORT$[1,12] = DHA2$
Else 
  If PRODSORT Let KEY_SORT$[14,25] = DHA2$[1,12]
End If 
KEY_SORT$[27,33] = REC_DIVH Using "#######"
Search #CH_SORT,4,1;KEY_SORT$,REC_DIVH,E
If E Let e$ = "syserrorfile 427 sortfile mode (m)=4 keyno (k)=1 r=",REC_DIVH," e=",e," keyval (k$)=",KEY_SORT$ \error 10000
Goto DIVH_LOOP
!
SORTDONE: Rem "Done Sorting
! 
! *** Process Section
!
if J8 ! dx xml headings
  !
  ! product headings
  tmp2$="PRODUCT",fdel$,"PRODUCT DESCRIPTION",fdel$
  tmp2$=tmp2$,"U/M",fdel$,"LAST PRICE",fdel$,"LAST DATE",fdel$
  !
  tmp1$=""
  if SLSMSORT ! salesman sort
    tmp1$="SALESMAN",fdel$,"SALESMAN NAME",fdel$
  endif
  if CUSTSORT ! customer sort
    tmp1$=tmp1$+"CUSTOMER",fdel$,"CUSTOMER NAME",fdel$
	tmp1$=tmp1$,"STATE",fdel$   ! ,"SALESMAN",fdel$
  endif
  if COMSORT ! commodity sort
    tmp1$=tmp1$+"COMMODITY",fdel$,"DESCRIPTION",fdel$
  endif
  !
  tmp$=tmp1$ \ if PRODSORT let tmp$=tmp$,tmp2$
  tmp$=tmp$,"TYPE",fdel$
  if MTDSUM ! summary format
    tmp$=tmp$,"MTD UNITS",fdel$,"MTD DOLLARS",fdel$
	if PPROF let tmp$=tmp$,"MTD G/P",fdel$,"MTD G/P %",fdel$
	tmp$=tmp$,"YTD UNITS",fdel$,"YTD DOLLARS",fdel$
	if PPROF let tmp$=tmp$,"YTD G/P",fdel$,"YTD G/P %",fdel$
  else ! detail
    for cnt=1 to 12
      tmp$=tmp$,MTH$[cnt * 3 - 2,cnt * 3],fdel$
    next cnt
  endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! - Print @0,22;'CE';"PRINTING, PLEASE WAIT. . ." \ Signal 3,0
! - If Err 0 Gosub ERR_ESCAPE
! - If SCRN Print 'CS'
KEY_SORT$ = " ",KEY_SORT$;CLIN = 90;CPAGE = 0; emptysort=1
HLDSLSM = -1;HLDCUST = -1
HLDCOMM$ = "    ";HLDPROD$ = " ",HLDPROD$
PRNTSLSM = 0;PRNTCUST = 0;PRNTCOMM = 0;PRNTPROD = 0
SORT_LOOP: Rem "Loop thru the Sort File
Search #CH_SORT,3,1;KEY_SORT$,REC_DIVH,E
If E = 2 Goto RNGDONE
emptysort=0  !! something there to print
If SLSMSORT
  If HLDSLSM = -1 Let HLDSLSM = KEY_SORT$[1,3]
  X2 = KEY_SORT$[1,3] \ If X2 <> HLDSLSM Gosub PRNTSLSM_TTL
End If 
If CUSTSORT
  If HLDCUST = -1 Let HLDCUST = KEY_SORT$[4,9]
  X2 = KEY_SORT$[4,9] \ If X2 <> HLDCUST Gosub PRNTCUST_TTL
End If 
If COMSORT
  If HLDCOMM$ = "    " Let HLDCOMM$ = KEY_SORT$[10,13]
  If HLDCOMM$[1,4] <> KEY_SORT$[10,13] Gosub PRNTCOMM_TTL
End If 
If PRODSORT
  If Not(CUSTSORT) And Not(SLSMSORT) And Not(COMSORT)
    If HLDPROD$[1,5] = "     " Let HLDPROD$ = KEY_SORT$[1,12]
    If HLDPROD$[1,12] <> KEY_SORT$[1,12] Gosub PRNTPROD_TTL
  Else 
    If HLDPROD$[1,5] = "     " Let HLDPROD$ = KEY_SORT$[14,25]
    If HLDPROD$[1,12] <> KEY_SORT$[14,25] Gosub PRNTPROD_TTL
  End If 
End If 
Gosub READ_DIVH
HLDPROD$ = DHA2$[1,12]
HLDCUST = DHC2
Gosub GET_PROD
HLDCOMM$ = DHP3$[1,4]
Gosub GET_COMMODITY
Gosub GET_CUSTOMER
HLDSLSM = C1[2]
Gosub GET_SLSM
Gosub GET_LASTPR
Gosub CALCTYR \ Gosub CALCLYR
Gosub CALCYTD
Gosub CONVINFO
Gosub ADDTOTALS
if cpage
	IF not(slsmsort) 
		If (Not(MINQTY) And Not(VARTYPE)) And (Not(SLSMTOT) Or Not(CUSTTOT) Or Not(COMTOT)) Gosub CHK_PRNTD
	endif
endif
STPRNTD = 0
CTPRNTD = 0
CMPRNTD = 0
PTPRNTD = 0
Goto SORT_LOOP
!
ADDTOTALS: Rem Add up all the Totals
STVALUE=1
IF CUSTOM_CUSTOMER$="GTI" 
LET STVALUE=0
ENDIF
For X = STVALUE To 12 \ For I = 0 To 2
    GTS1[X,I] = GTS1[X,I] + S1[X,I]
    GTS2[X,I] = GTS2[X,I] + S2[X,I]
    OTS1[X,I] = OTS1[X,I] + S1[X,I]
    OTS2[X,I] = OTS2[X,I] + S2[X,I]
    PFS1[X,I] = PFS1[X,I] + S1[X,I]
    PFS2[X,I] = PFS2[X,I] + S2[X,I]
    CMS1[X,I] = CMS1[X,I] + S1[X,I]
    CMS2[X,I] = CMS2[X,I] + S2[X,I]
    CUS1[X,I] = CUS1[X,I] + S1[X,I]
    CUS2[X,I] = CUS2[X,I] + S2[X,I]
    SLS1[X,I] = SLS1[X,I] + S1[X,I]
    SLS2[X,I] = SLS2[X,I] + S2[X,I]
	! goto nxtot: ! bypass this section needs testing
	if x<=nomths  ! set ytd to just be the amount to date for this/last yr
		Let GTS1[0,i]=GTS1[0,i]+S1[x,i]
		Let GTS2[0,i]=GTS2[0,i]+S2[x,i]
		Let OTS1[0,i]=OTS1[0,i]+S1[x,i]
		Let OTS2[0,i]=OTS2[0,i]+S2[x,i]
		Let PFS1[0,I]=PFS1[0,I]+S1[X,I]
		LET PFS2[0,I]=PFS2[0,I]+S2[X,I]
		LET CMS1[0,I]=CMS1[0,I]+S1[X,I]
		LET CMS2[0,I]=CMS2[0,I]+S2[X,I]
		LET CUS1[0,I]=CUS1[0,I]+S1[X,I]
		LET CUS2[0,I]=CUS2[0,I]+S2[X,I]
		LET SLS1[0,I]=SLS1[0,I]+S1[X,I]
		LET SLS2[0,I]=SLS2[0,I]+S2[X,I]
	endif
  nxtot: ! end bypass section
  Next I
Next X
Return 
!
PRNTGRND_TTL: Rem "Print Report Totals
if J8 ! dx xml
  if SLSMTOT gosub PRNTSLSM_TTL
  if CUSTTOT gosub PRNTCUST_TTL
  if COMTOT gosub PRNTCOMM_TTL
  if PRODSORT gosub PRNTPROD_TTL
  return
endif
!
If not(emptysort)
	Gosub PRNTSLSM_TTL
	CLIN = 90
	GTPRNTD = 1 \ Gosub PRNT_HEDNG
	For X = 0 To 12 \ For Y = 0 To 2
		PRNT[X,Y] = GTS1[X,Y]
	Next Y \ Next X
	Print #0;"*** GRAND TOTALS FOR REPORT ***" \ CLIN = CLIN + 1
	J4$ = "THIS YR" \ Gosub STD_LPRNT
	For X = 0 To 12 \ For Y = 0 To 2
		PRNT[X,Y] = GTS2[X,Y]
	Next Y \ Next X
	J4$ = "LAST YR" \ Gosub STD_LPRNT
	Gosub PRNTDIFF_TTLS
	If MTDSUM Print #0;"" \ CLIN = CLIN + 1
endif
If CLIN + 8 > MAXLN Let CLIN = 90 \ Gosub PRNT_HEDNG
Print #0;"\15\RANGES FOR REPORT"
Print #0;"SALESPERSON: ";SLSM[0];"TO";SLSM[1]
Print #0;"CUSTOMERS: ";CUST[0];"TO";CUST[1]
Print #0;"CUST CTGY: ";CCTGY[0];"TO";CCTGY[1]
Print #0;"COMMODITY: ";SCOMM$;" TO ";ECOMM$
Print #0;"PRODUCTS: ";SPROD$;" TO ";EPROD$
Print #0;"ORDER TYPES: ";
For X1 = 1 To 38
  If DMC2[X1] Print #0; Using "##";X1;" ";
Next X1
Print #0;""
GTPRNTD = 0
Return 
!
PRNTSLSM_TTL: Rem "Salesman Subtotals
if J8 if SLSMTOT=0 return ! dx xml, detail
!
if J8 let tmp1$=HLDSLSM Using "###",fdel$,SLNAME$,fdel$
!
if J8=0 ! print
  Gosub PRNTCUST_TTL
  If Not(SLSMSORT) Goto SLSMTOT_DONE
  If STPRNTD Return 
  If CLIN + 2 > MAXLN Let CLIN = 90
  STPRNTD = 1 \ Gosub PRNT_HEDNG
  If Not(PRNTSLSM) Gosub PRNT_SLSM
endif
!
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = SLS1[X,Y]
Next Y \ Next X
if J8=0 ! print
  If PRNTSLSM Print #0;"*** SALESMAN ";Str$(HLDSLSM);" TOTALS ***" \ CLIN = CLIN + 1
  J4$ = "THIS YR" \ Gosub STD_LPRNT
else ! dx xml
  J4$="THIS YEAR"
  gosub ProcXML ! process xml lines
endif
!
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = SLS2[X,Y]
Next Y \ Next X
if J8=0 ! print
  J4$ = "LAST YR" \ Gosub STD_LPRNT
  Gosub PRNTDIFF_TTLS
  If MTDSUM Print #0;"" \ CLIN = CLIN + 1
else ! dx xml
  J4$="LAST YEAR"
  gosub ProcXML ! process xml lines
  Gosub PRNTDIFF_TTLS
endif
!
SLSMTOT_DONE: Rem "Done
If SLSMSORT Let CLIN = 90
For X = 0 To 12 \ For Y = 0 To 2
    SLS1[X,Y] = 0;SLS2[X,Y] = 0
Next Y \ Next X
PRNTSLSM = 0;STPRNTD = 1
HLDSLSM = KEY_SORT$[1,3] \ Gosub GET_SLSM
Return 
!
PRNTCUST_TTL: Rem "Customer Totals
if J8 if CUSTTOT=0 return ! dx xml
!
Gosub PRNTCOMM_TTL
If SLSMTOT Goto CUSTTOT_DONE
If Not(CUSTSORT) Goto CUSTTOT_DONE
If CTPRNTD Return 
If (MINQTY Or VARTYPE) And CUSTTOT
  S1[0,0] = 0;S1[0,1] = 0
  S2[0,0] = 0;S2[0,1] = 0
  For X = 1 To NOMTHS \ For Y = 0 To 1
      S1[0,Y] = S1[0,Y] + CUS1[X,Y]
      S2[0,Y] = S2[0,Y] + CUS2[X,Y]
  Next Y \ Next X
  Gosub CHK_VAR \ Goto CUSTTOT_DONE
End If 
!
if J8=0 ! print
  If CLIN + 2 > MAXLN Let CLIN = 90
  CTPRNTD = 1 \ Gosub PRNT_HEDNG
  If Not(PRNTCUST) Gosub PRNT_CUST
endif
!
For X = 0 To 12 \ For Y = 0 To 2
  PRNT[X,Y] = CUS1[X,Y]
Next Y \ Next X
if J8=0 ! print
  If PRNTCUST Print #0;"*** CUSTOMER ";Str$(HLDCUST);" TOTALS ***" \ CLIN = CLIN + 1
  J4$ = "THIS YR" \ Gosub STD_LPRNT
else ! dx xml
  J4$="THIS YEAR"
  gosub ProcXML ! process xml line
endif
!
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = CUS2[X,Y]
Next Y \ Next X
if J8=0 ! print
  J4$ = "LAST YR" \ Gosub STD_LPRNT
  Gosub PRNTDIFF_TTLS
  If MTDSUM Print #0;"" \ CLIN = CLIN + 1
else ! dx xml
  J4$="LAST YEAR"
  gosub ProcXML
  gosub PRNTDIFF_TTLS
endif
!
CUSTTOT_DONE: Rem "Done
For X = 0 To 12 \ For Y = 0 To 2
    CUS1[X,Y] = 0;CUS2[X,Y] = 0
Next Y \ Next X
PRNTCUST = 0;CTPRNTD = 1
HLDCUST = KEY_SORT$[4,9] \ Gosub GET_CUSTOMER
Return 
!
PRNTCOMM_TTL: Rem "Commodity Subtotals
if J8 if COMTOT=0 return ! dx xml
!
if J8=0 ! print
  Gosub PRNTPROD_TTL
  If Not(COMSORT) Goto COMMTOT_DONE
  If CUSTTOT Or SLSMTOT Goto COMMTOT_DONE
  If CMPRNTD Return 
endif
!
If (MINQTY Or VARTYPE) And COMTOT
  S1[0,0] = 0;S1[0,1] = 0
  S2[0,0] = 0;S2[0,1] = 0
  For X = 1 To NOMTHS \ For Y = 0 To 1
      S1[0,Y] = S1[0,Y] + CMS1[X,Y]
      S2[0,Y] = S2[0,Y] + CMS2[X,Y]
  Next Y \ Next X
  Gosub CHK_VAR \ Goto COMMTOT_DONE
End If 
!
if J8=0 ! print
  If CLIN + 2 > MAXLN Let CLIN = 90
  Gosub PRNT_HEDNG
endif
!
If Not(PRNTCOMM) Gosub PRNT_COMMD
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = CMS1[X,Y]
Next Y \ Next X
if J8=0 ! print
  If PRNTCOMM And COMSORT And Not(COMTOT)
    Print #0;"*** COMMODITY ";HLDCOMM$;" TOTALS ***" \ CLIN = CLIN + 1
  End If 
  J4$ = "THIS YR" \ Gosub STD_LPRNT
else ! dx xml
  J4$="THIS YEAR"
  gosub ProcXML ! process xml line
endif
!
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = CMS2[X,Y]
Next Y \ Next X
if J8=0 ! print
  J4$ = "LAST YR" \ Gosub STD_LPRNT
  Gosub PRNTDIFF_TTLS
  If MTDSUM Print #0;"" \ CLIN = CLIN + 1
else ! dx xml
  J4$="LAST YEAR"
  gosub ProcXML
  Gosub PRNTDIFF_TTLS
endif
!
COMMTOT_DONE: Rem "Done
For X = 0 To 12 \ For Y = 0 To 2
    CMS1[X,Y] = 0;CMS2[X,Y] = 0
Next Y \ Next X
PRNTCOMM = 0;CMPRNTD = 1
HLDCOMM$ = KEY_SORT$[10,13] \ Gosub GET_COMMODITY
Return 
!
PRNTPROD_TTL: Rem "Product Totals
if J8 if (SLSMTOT=1 or CUSTTOT=1 or COMTOT=1) return ! dx xml, totals only
!
if J8=0 ! print
  If COMTOT Goto PRODTOT_DONE
  If CUSTTOT Or SLSMTOT Goto PRODTOT_DONE
  If Not(PRODSORT) Goto PRODTOT_DONE
  If PTPRNTD Return 
endif
!
If MINQTY Or VARTYPE
  S1[0,0] = 0;S1[0,1] = 0
  S2[0,0] = 0;S2[0,1] = 0
  For X = 1 To NOMTHS \ For Y = 0 To 1
      S1[0,Y] = S1[0,Y] + PFS1[X,Y]
      S2[0,Y] = S2[0,Y] + PFS2[X,Y]
  Next Y \ Next X
  Gosub CHK_VAR \ Goto PRODTOT_DONE
End If 
!
if J8=0 ! print
  If CLIN + 2 > MAXLN Let CLIN = 90
  Gosub PRNT_HEDNG
  If Not(PRNTPROD) Gosub PRNT_PROD
endif
!
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = PFS1[X,Y]
Next Y \ Next X
if J8=0 ! print
  J4$ = "THIS YR" \ Gosub STD_LPRNT
else
  J4$="THIS YEAR"
  gosub ProcXML
endif
!
For X = 0 To 12 \ For Y = 0 To 2
    PRNT[X,Y] = PFS2[X,Y]
Next Y \ Next X
if J8=0 ! print
  J4$ = "LAST YR" \ Gosub STD_LPRNT
  Gosub PRNTDIFF_TTLS
  If MTDSUM Print #0;"" \ CLIN = CLIN + 1
else ! dx xml
  J4$="LAST YEAR"
  gosub ProcXML
  Gosub PRNTDIFF_TTLS
endif
!
PRODTOT_DONE: Rem "Done
For X = 0 To 12 \ For Y = 0 To 2
    PFS1[X,Y] = 0;PFS2[X,Y] = 0
Next Y \ Next X
PRNTPROD = 0;PTPRNTD = 1
HLDPROD$ = KEY_SORT$[14,25];PTPRNTD = 0
If Not(CUSTSORT) And Not(SLSMSORT) And Not(COMSORT) Let HLDPROD$ = KEY_SORT$[1,12]
Gosub GET_PROD
Return 
!
! - PRNTTYPE_TTL: Rem "Order Type Totals
! - If Not(ORDTYPDTL) Goto TYPETOT_DONE
! - If CUSTTOT Or SLSMTOT Goto TYPETOT_DONE
! - If COMTOT Goto TYPETOT_DONE
! - If OTPRNTD Return 
! - If MINQTY Or VARTYPE
! -   S1[0,0] = 0;S1[0,1] = 0
! -   S2[0,0] = 0;S2[0,1] = 0
! -   For X = 1 To NOMTHS \ For Y = 0 To 1
! -       S1[0,Y] = S1[0,Y] + OTS1[X,Y]
! -       S2[0,Y] = S2[0,Y] + OTS2[X,Y]
! -     Next Y \ Next X
! -   Gosub CHK_VAR \ Goto TYPETOT_DONE
! - End If 
! - If CLIN + 2 > MAXLN Let CLIN = 90
! - Gosub PRNT_HEDNG
! - If Not(PRNTPROD) Gosub PRNT_PROD
! - For X = 0 To 12 \ For Y = 0 To 2
! -     PRNT[X,Y] = OTS1[X,Y]
! -   Next Y \ Next X
! - Print #0;" ORDER TYPE ";
! - If HLDTYPE <= 1 Print #0;"STOCK";
! - If HLDTYPE = 2 Print #0;"DIRECT";
! - If HLDTYPE = 3 Print #0;"OTHER";
! - Print #0;" TOTALS ***" \ CLIN = CLIN + 1
! - J4$ = "THIS YR" \ Gosub STD_LPRNT
! - For X = 0 To 12 \ For Y = 0 To 2
! -     PRNT[X,Y] = OTS2[X,Y]
! -   Next Y \ Next X
! - J4$ = "LAST YR" \ Gosub STD_LPRNT
! - Gosub PRNTDIFF_TTLS
! - If MTDSUM Print #0;"" \ CLIN = CLIN + 1
! - TYPETOT_DONE: Rem "Done
! - For X = 0 To 12 \ For Y = 0 To 2
! -     OTS1[X,Y] = 0;OTS2[X,Y] = 0
! -   Next Y \ Next X
! - OTPRNTD = 1
! - Return 
!
CHK_PRNTD: Rem "Check if Headings were Printed
!Gosub PRNT_HEDNG
If SLSMSORT If Not(PRNTSLSM) Gosub PRNT_SLSM
If CUSTSORT If Not(PRNTCUST) Gosub PRNT_CUST
If COMSORT If Not(PRNTCOMM) If (Not(SLSMTOT) Or Not(CUSTTOT)) Gosub PRNT_COMMD
Return 
!
STD_LPRNT: Rem "Standard 12 Month Print
Call String(1,J4$)
If MTDSUM
  Gosub STD_MTDPRNT
  Goto PRNT_DONE
End If 
If LINDTL = 0 Or LINDTL = 1
  J5$ = J4$ + " MTD UNITS"
  Gosub PRNT_HEDNG
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    Print #0; Using MASK$;FNI(PRNT[X7,0]);
    If J4$[1,4] = "THIS"
      T1[X,1] = PRNT[X7,0];J1 = J1 + PRNT[X7,0]
      T2[X,1] = J1
    Else 
      T3[X,1] = PRNT[X7,0];J1 = J1 + PRNT[X7,0]
      T4[X,1] = J1
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  Print #0;"" \ CLIN = CLIN + 1
  Gosub PRNT_HEDNG
  J5$ = J4$ + " YTD UNITS"
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  For X = 1 To 12
    If J4$[1,4] = "THIS" Print #0; Using MASK$;FNI(T2[X,1]);
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF" Print #0; Using MASK$;FNI(T4[X,1]);
  Next X
  Print #0;"" \ CLIN = CLIN + 1
End If 
If LINDTL = 0 Or LINDTL = 2
  J5$ = J4$ + " MTD $"
  Gosub PRNT_HEDNG
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    Print #0; Using MASK$;FNI(PRNT[X7,1]);
    If J4$[1,4] = "THIS"
      T1[X,2] = PRNT[X7,1];J1 = J1 + PRNT[X7,1]
      T2[X,2] = J1
    Else 
      T3[X,2] = PRNT[X7,1];J1 = J1 + PRNT[X7,1]
      T4[X,2] = J1
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  Print #0;"" \ CLIN = CLIN + 1
  If J4$[1,4] = "THIS" Gosub PRNT_HEDNG
  J5$ = J4$ + " YTD $"
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  For X = 1 To 12
    If J4$[1,4] = "THIS" Print #0; Using MASK$;FNI(T2[X,2]);
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF" Print #0; Using MASK$;FNI(T4[X,2]);
  Next X
  Print #0;"" \ CLIN = CLIN + 1
End If 
If PPROF
  J5$ = J4$ + " MTD G/P"
  Gosub PRNT_HEDNG
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    Print #0; Using MASK$;FNI(PRNT[X7,1] - PRNT[X7,2]);
    If J4$[1,4] = "THIS"
      T1[X,0] = PRNT[X7,1] - PRNT[X7,2]
      J1 = J1 + PRNT[X7,1] - PRNT[X7,2]
      T2[X,0] = J1
    Else 
      T3[X,0] = PRNT[X7,1] - PRNT[X7,2]
      J1 = J1 + PRNT[X7,1] - PRNT[X7,2]
      T4[X,0] = J1
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  Print #0;"" \ CLIN = CLIN + 1
  Gosub PRNT_HEDNG
  J5$ = J4$ + " YTD G/P"
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  For X = 1 To 12
    If J4$[1,4] = "THIS" Print #0; Using MASK$;FNI(T2[X,0]);
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF" Print #0; Using MASK$;FNI(T4[X,0]);
  Next X
  Print #0;"" \ CLIN = CLIN + 1
  J5$ = J4$ + " MTD G/P %"
  Gosub PRNT_HEDNG
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    If J4$[1,4] = "THIS"
      If T1[X,2] And (T1[X,0] > 0 Or T1[X,2] > 0)
        Print #0; Using "-----#.##";T1[X,0] / T1[X,2] * 100;
      Else 
        Print #0; Using "-----#.##";ZERO;
      End If 
    Else 
      If T3[X,2] And (T3[X,0] > 0 Or T3[X,2] > 0)
        Print #0; Using "-----#.##";T3[X,0] / T3[X,2] * 100;
      Else 
        Print #0; Using "-----#.##";ZERO;
      End If 
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  Print #0;"" \ CLIN = CLIN + 1
  Gosub PRNT_HEDNG
  J5$ = J4$ + " YTD G/P %"
  Print #0; Tab 1;J5$[1,18];
  Print #0; Tab 20;
  For X = 1 To 12
    If J4$[1,4] = "THIS"
      If T2[X,2] And (T2[X,0] > 0 Or T2[X,2] > 0)
        Print #0; Using "-----#.##";T2[X,0] / T2[X,2] * 100;
      Else 
        Print #0; Using "-----#.##";ZERO;
      End If 
    End If 
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF"
      If T4[X,2] And (T4[X,0] > 0 Or T4[X,2] > 0)
        Print #0; Using "-----#.##";T4[X,0] / T4[X,2] * 100;
      Else 
        Print #0; Using "-----#.##";ZERO;
      End If 
    End If 
  Next X
  Print #0;"" \ CLIN = CLIN + 1
End If 
PRNT_DONE: Rem "End the Print Here
Print #0;"" \ CLIN = CLIN + 1
Return 
!
STD_MTDPRNT: Rem "Standard print for MTD/YTD Summary
M9 = NOMTHS
!
if J8=0 ! print
  Gosub PRNT_HEDNG
  Print #0; Tab 1;J4$[1,20];
  If LINDTL = 0 Or LINDTL = 1 Print #0; Using "-------#.##"; Tab 41;PRNT[M9,0];
  If LINDTL = 0 Or LINDTL = 2 Print #0; Using "---------#.##"; Tab 52;PRNT[M9,1];
  T9[0] = PRNT[M9,1] - PRNT[M9,2]
  If PPROF Print #0; Using "---------#.##"; Tab 65;T9[0];
  T9[2] = 0 \ If PRNT[M9,1] Let T9[2] = FNR(T9[0] * 100 / PRNT[M9,1])
  If PPROF Print #0; Using "-----.##"; Tab 78;T9[2];
  If LINDTL = 0 Or LINDTL = 1 Print #0; Using "-------#.##"; Tab 86;PRNT[0,0];
  If LINDTL = 0 Or LINDTL = 2 Print #0; Using "---------#.##"; Tab 96;PRNT[0,1];
  T9[1] = PRNT[0,1] - PRNT[0,2]
  If PPROF Print #0; Using "---------#.##"; Tab 109;T9[1];
  T9[2] = 0 \ If PRNT[0,1] Let T9[2] = FNR(T9[1] * 100 / PRNT[0,1])
  If PPROF Print #0; Using "-----.##"; Tab 122;T9[2];
  !
else ! dx xml
  tmp$=tmp1$,J4$,fdel$
  If LINDTL = 0 Or LINDTL = 1 let tmp$=tmp$,PRNT[M9,0] Using "-------#.##",fdel$ else tmp$=tmp$,"",fdel$
  If LINDTL = 0 Or LINDTL = 2 let tmp$=tmp$,PRNT[M9,1] Using "---------#.##",fdel$ else tmp$=tmp$,"",fdel$
  If PPROF 
    T9[0] = PRNT[M9,1] - PRNT[M9,2]
    tmp$=tmp$,T9[0] Using "---------#.##",fdel$
    T9[2] = 0 \ If PRNT[M9,1] Let T9[2] = FNR(T9[0] * 100 / PRNT[M9,1])
    tmp$=tmp$,T9[2] Using "-----.##",fdel$
  endif
  If LINDTL = 0 Or LINDTL = 1 let tmp$=tmp$,PRNT[0,0] Using "-------#.##",fdel$ else tmp$=tmp$,"",fdel$
  If LINDTL = 0 Or LINDTL = 2 let tmp$=tmp$,PRNT[0,1] Using "---------#.##",fdel$ else tmp$=tmp$,"",fdel$
  If PPROF
    T9[1] = PRNT[0,1] - PRNT[0,2]
    tmp$=tmp$,T9[1] Using "---------#.##",fdel$
    T9[2] = 0 \ If PRNT[0,1] Let T9[2] = FNR(T9[1] * 100 / PRNT[0,1])
    tmp$=tmp$,T9[2] Using "-----.##",fdel$
  endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
endif
!
For X = 0 To 12
  If J4$[1,4] = "THIS"
    T1[X,0] = PRNT[X,1] - PRNT[X,2]
    T1[X,1] = PRNT[X,0]
    T1[X,2] = PRNT[X,1]
  Else 
    T3[X,0] = PRNT[X,1] - PRNT[X,2]
    T3[X,1] = PRNT[X,0]
    T3[X,2] = PRNT[X,1]
  End If 
Next X
Return 
!
PRNTDIFF_TTLS: Rem "Print / Clear Diffs
if J8=0 Gosub PRNT_HEDNG
If Not(PRNTDIFF) Goto DIFFDONE
For X = 0 To 12
  PRNT[X,0] = T1[X,1] - T3[X,1]
  PRNT[X,1] = T1[X,2] - T3[X,2]
  PRNT[X,2] = (T1[X,2] - T1[X,0]) - (T3[X,2] - T3[X,0])
  T2[X,0] = 0;T2[X,1] = 0;T2[X,2] = 0
  T4[X,0] = 0;T4[X,1] = 0;T4[X,2] = 0
Next X
if J8=0 ! print
  J4$ = "DIFF "
  Gosub STD_LPRNT
else ! dx xml
  J4$="DIFFERENT "
  gosub ProcXML
endif
!
DIFFDONE: Rem "done 'diffing'
For X = 0 To 12
  For Y = 0 To 2
    T1[X,Y] = 0;T2[X,Y] = 0
    T3[X,Y] = 0;T4[X,Y] = 0
  Next Y
Next X
Return 
!
PRNT_SLSM: Rem "Print Salesman
If GTPRNTD Return 
if J8=0
  Print #0; Using "###";"SALESMAN: ";HLDSLSM;"  ";SLNAME$
  CLIN = CLIN + 1;PRNTSLSM = 1
else
  SlsmXML$=HLDSLSM Using "###",fdel$,rtrim$(SLNAME$),fdel$
endif
Return 
!
PRNT_COMMD: Rem "Print Commodity
If GTPRNTD Or STPRNTD Or CTPRNTD Return 
if J8=0
  Print #0;"COMM: ";HLDCOMM$;"  ";COMMOD$
  CLIN = CLIN + 1;PRNTCOMM = 1
else
  CommXML$=HLDCOMM$,fdel$,COMMOD$,fdel$
endif
Return 
!
PRNT_CUST: Rem "Print Customer Info
If GTPRNTD Or STPRNTD Return 
if J8=0
  Print #0; Using "######";"CUSTOMER: ";HLDCUST;"  ";A1$[31,60];"  ";
  Print #0;A1$[136,137]; Tab 55;"SALESMAN: ";C1[2]
  CLIN = CLIN + 1;PRNTCUST = 1
else
  CustXML$=HLDCUST Using "######",fdel$,rtrim$(A1$[31,60]),fdel$
  CustXML$=CustXML$,A1$[136,137],fdel$   ! ,C1[2],fdel$
endif
Return 
!
PRNT_PROD: Rem "Print Product Info
If COMSORT If Not(PRNTCOMM) If (Not(CUSTTOT) Or Not(SLSMTOT)) Gosub PRNT_COMMD
if J8=0
  Print #0;"PROD: ";HLDPROD$;"  ";A$[9,38];" UM: ";SELLUM$;
  Print #0; Tab 70;"LAST PRICE: ";LPRICE$;LPUM$;"  ";LPDATE$
  CLIN = CLIN + 1;PRNTPROD = 1
else
  ProdXML$=HLDPROD$,fdel$,rtrim$(A$[9,38]),fdel$,SELLUM$,fdel$
  ProdXML$=ProdXML$,LPRICE$,LPUM$,fdel$,LPDATE$,fdel$
endif
Return 
!
PRNT_HEDNG: Rem "Print the Headings
if J8 return ! dx xml
!
If CLIN <= MAXLN Return 
! - If SCRN If CPAGE Input @0,23;"\15\PRESS <CR> TO CONTINUE"J$
If CPAGE Print #0;"\14\";
If Not(SCRN) Print #0;"\15\";
CPAGE = CPAGE + 1
Print #0; Tab 10;DATE$; Tab (Int(64 - (Len(CNAME$) / 2)));CNAME$;
Print #0; Tab 120;"PAGE";CPAGE
TME$ = "" \ Call Time(TME$)
Print #0;"- 427 -";TME$;
Print #0; Tab 50;"COMPARATIVE CUSTOMER SALES REPORT";
Print #0;""
If WHSE Print #0; Tab 5;"WHSE:";WHSE; Else Print #0; Tab 5;"ALL WHSES";
If DIV Print #0; Tab 20;"DIV:";DIV; Else Print #0; Tab 20;"ALL DIVS";
Print #0; Tab 54;
If SLSMSORT Print #0;"BY SLSM";
If CUSTSORT Print #0;" BY CUST";
If COMSORT Print #0;" BY COMMOD";
If PRODSORT Print #0;" BY PROD";
If VARTYPE
  Print #0; Tab 100;"VAR. ";
  If VARIT Print #0;"<"; Else Print #0;">";
  Print #0;VARAMT;
  Print #0;"%";
End If 
Print #0;""
Print #0;""
If MTDSUM
  Print #0; Tab 47;"---------------- M T D ----------------";
  Print #0; Tab 91;"---------------- Y T D ----------------"
End If 
Print #0;" DETAIL DESCRIPTION";
Print #0; Tab 21;
If Not(MTDSUM)
  For I = 1 To 12
    Print #0;"      ";MTH$[I * 3 - 2,I * 3];
  Next I
  Print #0;""
Else 
  If LINDTL = 0 Or LINDTL = 1 Print #0; Tab 47;"UNITS";
  If LINDTL = 0 Or LINDTL = 2 Print #0; Tab 53;"DOLLAR SALES";
  If PPROF
    Print #0; Tab 68;"GR. PROFIT";
    Print #0; Tab 79;"PERCENT";
  End If 
  If LINDTL = 0 Or LINDTL = 1 Print #0; Tab 91;"UNITS";
  If LINDTL = 0 Or LINDTL = 2 Print #0; Tab 97;"DOLLAR SALES";
  If PPROF
    Print #0; Tab 112;"GR. PROFIT";
    Print #0; Tab 123;"PERCENT";
  End If 
  Print #0;" "
End If 
PRNTSLSM = 0;PRNTCUST = 0;PRNTCOMM = 0
CLIN = 6 \ If MTDSUM Let CLIN = 7
If Not(SCRN) If CPAGE = 1 Let CLIN = CLIN + 2
if not(emptysort)
	If CPAGE <> 0 		
		If (Not(MINQTY) And Not(VARTYPE)) And (Not(SLSMTOT) Or Not(CUSTTOT) Or Not(COMTOT)) Gosub CHK_PRNTD
	Else 
		if slsmsort=0 or (slsmsort=1 and slsmtot=1) Gosub CHK_PRNTD
	End If 
endif
Return 
!
! *** Process XML Line
ProcXML:
tmp1$=""
if SLSMSORT gosub PRNT_SLSM \ tmp1$=tmp1$+SlsmXML$
if CUSTSORT gosub PRNT_CUST \ tmp1$=tmp1$+CustXML$
if COMSORT gosub PRNT_COMMD \ tmp1$=tmp1$+CommXML$
if PRODSORT gosub PRNT_PROD \ tmp1$=tmp1$,ProdXML$
!
If MTDSUM Gosub STD_MTDPRNT \return ! summary format
!
If LINDTL = 0 Or LINDTL = 1 
  tmp$=tmp1$,J4$," MTD UNITS",fdel$
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    tmp$=tmp$,FNI(PRNT[X7,0]) Using MASK$,fdel$
    If J4$[1,4] = "THIS"
      T1[X,1] = PRNT[X7,0];J1 = J1 + PRNT[X7,0]
      T2[X,1] = J1
    Else 
      T3[X,1] = PRNT[X7,0];J1 = J1 + PRNT[X7,0]
      T4[X,1] = J1
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
  tmp$=tmp1$,J4$," YTD UNITS",fdel$
  For X = 1 To 12
    If J4$[1,4] = "THIS" let tmp$=tmp$,FNI(T2[X,1]) Using MASK$,fdel$
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF" tmp$=tmp$,FNI(T4[X,1]) Using MASK$,fdel$
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
End If 
!
If LINDTL = 0 Or LINDTL = 2
  tmp$=tmp1$,J4$," MTD DOLLARS",fdel$
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    tmp$=tmp$,FNI(PRNT[X7,1]) Using MASK$,fdel$
    If J4$[1,4] = "THIS"
      T1[X,2] = PRNT[X7,1];J1 = J1 + PRNT[X7,1]
      T2[X,2] = J1
    Else 
      T3[X,2] = PRNT[X7,1];J1 = J1 + PRNT[X7,1]
      T4[X,2] = J1
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
  tmp$=tmp1$,J4$," YTD DOLLARS",fdel$
  For X = 1 To 12
    If J4$[1,4] = "THIS" let tmp$=tmp$,FNI(T2[X,2]) Using MASK$,fdel$
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF" let tmp$=tmp$,FNI(T4[X,2]) Using MASK$,fdel$
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
End If 
If PPROF
  tmp$=tmp1$,J4$," MTD G/P",fdel$
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    tmp$=tmp$,FNI(PRNT[X7,1] - PRNT[X7,2]) Using MASK$,fdel$
    If J4$[1,4] = "THIS"
      T1[X,0] = PRNT[X7,1] - PRNT[X7,2]
      J1 = J1 + PRNT[X7,1] - PRNT[X7,2]
      T2[X,0] = J1
    Else 
      T3[X,0] = PRNT[X7,1] - PRNT[X7,2]
      J1 = J1 + PRNT[X7,1] - PRNT[X7,2]
      T4[X,0] = J1
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
  tmp$=tmp1$,J4$," YTD G/P",fdel$
  For X = 1 To 12
    If J4$[1,4] = "THIS" let tmp$=tmp$,FNI(T2[X,0]) Using MASK$,fdel$
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF" let tmp$=tmp$,FNI(T4[X,0]) Using MASK$,fdel$
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
  tmp$=tmp1$," MTD G/P %",fdel$
  X7 = BOYMNTH;J1 = 0
  For X = 1 To 12
    X7 = X
    If J4$[1,4] = "THIS"
      If T1[X,2] And (T1[X,0] > 0 Or T1[X,2] > 0) let tmp3=T1[X,0] / T1[X,2] * 100 else tmp3=ZERO
      tmp$=tmp$,tmp3 Using "-----#.##",fdel$
    Else 
      If T3[X,2] And (T3[X,0] > 0 Or T3[X,2] > 0) let tmp3=T3[X,0] / T3[X,2] * 100 else tmp3=ZERO
      tmp$=tmp$,tmp3 Using "-----#.##",fdel$
    End If 
    X7 = X7 + 1 \ If X7 > 12 Let X7 = 1
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
  tmp$=tmp1$," YTD G/P %",fdel$
  For X = 1 To 12
    If J4$[1,4] = "THIS"
      If T2[X,2] And (T2[X,0] > 0 Or T2[X,2] > 0) let tmp3=T2[X,0] / T2[X,2] * 100 else tmp3=ZERO
      tmp$=tmp$,tmp3 Using "-----#.##",fdel$
    End If 
    If J4$[1,4] = "LAST" Or J4$[1,4] = "DIFF"
      If T4[X,2] And (T4[X,0] > 0 Or T4[X,2] > 0) let tmp3=T4[X,0] / T4[X,2] * 100 else tmp3=ZERO
      tmp$=tmp$,tmp3 Using "-----#.##",fdel$
	endif
  Next X
  call addtostr(e$,rstr$,tmp$+rdel$)
  !
End If 
Return 
!
READ_DIVH: Rem "read the divHist File
Mat Read #CH_DIVH,REC_DIVH,0;DHA2$;
Read #CH_DIVH,REC_DIVH,12;DHC2;
Mat Read #CH_DIVH,REC_DIVH,16;DHP2;
Mat Read #CH_DIVH,REC_DIVH,250;DHLYP2;
Mat Read #CH_DIVH,REC_DIVH,488;DHP3;
Mat Read #CH_DIVH,REC_DIVH,508;DHP3$;
Return 
!
GET_PROD: Rem "a duh
KEY_PROD$ = " ",KEY_PROD$
KEY_PROD$ = HLDPROD$[1,12]
Search #CH_PROD,2,1;KEY_PROD$,REC_PROD,E 
If Not(E)
  Rem {begin srcdevl/inc/read.prod.i}
  Mat Read #CH_PROD,REC_PROD,0;A$
  Mat Read #CH_PROD,REC_PROD,156;B
  Mat Read #CH_PROD,REC_PROD,256;A
  Mat Read #CH_PROD,REC_PROD,460;A1
  Mat Read #CH_PROD,REC_PROD,508;A2
  Mat Read #CH_PROD,REC_PROD,512;PFU1
  Mat Read #CH_PROD,REC_PROD,554;PFU2
  Mat Read #CH_PROD,REC_PROD,596;PRPARC
  Mat Read #CH_PROD,REC_PROD,620;LM
  Mat Read #CH_PROD,REC_PROD,624;PR_PO
  Read #CH_PROD,REC_PROD,630;LLC
  Mat Read #CH_PROD,REC_PROD,632;PSN$
  Mat Read #CH_PROD,REC_PROD,652;PSN
  Mat Read #CH_PROD,REC_PROD,660;U2
  Mat Read #CH_PROD,REC_PROD,670;U4
  Read #CH_PROD,REC_PROD,678;U3
  Mat Read #CH_PROD,REC_PROD,684;U3$
  Mat Read #CH_PROD,REC_PROD,744;HZ$
  Mat Read #CH_PROD,REC_PROD,834;A3
  Mat Read #CH_PROD,REC_PROD,846;PFTB
  Read #CH_PROD,REC_PROD,854;UPCT
  Mat Read #CH_PROD,REC_PROD,856;C1$
  Mat Read #CH_PROD,REC_PROD,894;PR_C4
  Read #CH_PROD,REC_PROD,938;PF_LOAD2
  Mat Read #CH_PROD,REC_PROD,944;PR_A2$
  Mat Read #CH_PROD,REC_PROD,974;PFCO
  Mat Read #CH_PROD,REC_PROD,990;PLV
  Mat Read #CH_PROD,REC_PROD,1002;PLC
  Mat Read #CH_PROD,REC_PROD,1018;PFN
  Mat Read #CH_PROD,REC_PROD,1270;PRD0
  Mat Read #CH_PROD,REC_PROD,1294;PRD1
  Rem {end read.prod.i}
Else 
  Call MiscStr(1,A$)
  PFU1[9] = -99;A$[9,38] = "ERROR. PRODUCT NOT FOUND!               "
End If 
Return 
!
GET_CUSTOMER: Rem "yes
KEY_CUST$ = HLDCUST Using "######"
Search #CH_CUST,2,1;KEY_CUST$,REC_CUST,E
If Not(E)
  Rem {begin srcdevl/inc/read.cust.i}
  Mat Read #CH_CUST,REC_CUST,0;A1$
  Mat Read #CH_CUST,REC_CUST,142;C1
  Mat Read #CH_CUST,REC_CUST,194;C2
  Mat Read #CH_CUST,REC_CUST,200;C3
  Mat Read #CH_CUST,REC_CUST,208;C0
  Mat Read #CH_CUST,REC_CUST,210;C4
  Mat Read #CH_CUST,REC_CUST,252;C5
  Mat Read #CH_CUST,REC_CUST,288;C6
  Mat Read #CH_CUST,REC_CUST,348;A2$
  Mat Read #CH_CUST,REC_CUST,378;C7
  Mat Read #CH_CUST,REC_CUST,388;A3$
  Mat Read #CH_CUST,REC_CUST,410;C8
  Mat Read #CH_CUST,REC_CUST,412;C9
  Mat Read #CH_CUST,REC_CUST,418;SUB_
  Mat Read #CH_CUST,REC_CUST,420;U1
  Mat Read #CH_CUST,REC_CUST,426;U2$
  Mat Read #CH_CUST,REC_CUST,486;A0
  Mat Read #CH_CUST,REC_CUST,502;S0
  Mat Read #CH_CUST,REC_CUST,544;CFIN
  Mat Read #CH_CUST,REC_CUST,598;SZN
  Mat Read #CH_CUST,REC_CUST,600;BT$
  Mat Read #CH_CUST,REC_CUST,620;REC
  Mat Read #CH_CUST,REC_CUST,624;C10
  Mat Read #CH_CUST,REC_CUST,660;C11
  Mat Read #CH_CUST,REC_CUST,668;C12
  Rem {end read.cust.i}
Else 
  A1$ = " ",A1$;C1[2] = -1
End If 
Return 
!
GET_COMMODITY: Rem "Get Commodity Desc
KEY_COMMD$ = HLDCOMM$[1,4]
Search #CH_COMMD,2,1;KEY_COMMD$,REC_COMMD,E 
If Not(E)
  Mat Read #CH_COMMD,REC_COMMD;COMMOD$;
Else 
  COMMOD$ = " ",COMMOD$
  COMMOD$ = "COMMODITY NOT ON FILE"
End If 
Return 
!
GET_SLSM: Rem "get salesman Name
KEY_SLSM$ = HLDSLSM Using "###"
Search #CH_SLSM,2,1;KEY_SLSM$,REC_SLSM,E 
If Not(E)
  Mat Read #CH_SLSM,REC_SLSM,0;SLNAME$;
Else 
  SLNAME$ = " ",SLNAME$
  SLNAME$ = "SALESMAN NOT ON FILE"
End If 
Return 
!
GET_LASTPR: Rem " --------------get last price info
KEY_LASTPR$[1,6] = C1[1] Using "######"
KEY_LASTPR$[11] = DHA2$
I = 0
SETLPDEPT: KEY_LASTPR$[7,10] = I Using "####"
Search #CH_LASTPR,2,1;KEY_LASTPR$,REC_LASTPR,E
If E
Then 
  If I = MAXDEPT
  Then 
    LPRICE$ = "NONE FOUND" \ LPUM$ = "" \ LPDATE$ = " ",LPDATE$
  Else 
    I = I + 1 \ Goto SETLPDEPT
  End If 
Else 
  Rem {begin srcdevl/inc/read.lastpr.i}
  Mat Read #CH_LASTPR,REC_LASTPR,0;LP$
  Read #CH_LASTPR,REC_LASTPR,12;LPDF
  Mat Read #CH_LASTPR,REC_LASTPR,16;LPC1
  Mat Read #CH_LASTPR,REC_LASTPR,28;LPC2
  Mat Read #CH_LASTPR,REC_LASTPR,46;LPC3
  Mat Read #CH_LASTPR,REC_LASTPR,56;LP2$
  Mat Read #CH_LASTPR,REC_LASTPR,140;LPC4
  Mat Read #CH_LASTPR,REC_LASTPR,164;LPMT$
  Read #CH_LASTPR,REC_LASTPR,166;AI
  Mat Read #CH_LASTPR,REC_LASTPR,168;LPR
  Mat Read #CH_LASTPR,REC_LASTPR,198;LPR1
  Mat Read #CH_LASTPR,REC_LASTPR,214;LPEUN
  Mat Read #CH_LASTPR,REC_LASTPR,220;LPUNF
  Mat Read #CH_LASTPR,REC_LASTPR,262;PERM
  Read #CH_LASTPR,REC_LASTPR,274;LPWH
  Mat Read #CH_LASTPR,REC_LASTPR,276;LPC5
  Read #CH_LASTPR,REC_LASTPR,292;LPPCDATE
  Read #CH_LASTPR,REC_LASTPR,296;LPLPERM
  Mat Read #CH_LASTPR,REC_LASTPR,302;LPCURR
  Read #CH_LASTPR,REC_LASTPR,314;LPCPT
  Read #CH_LASTPR,REC_LASTPR,316;LPCSDT
  Read #CH_LASTPR,REC_LASTPR,320;LPDEPT
  Rem {end read.lastpr.i}
  CNVTU[0] = 0;CNVTU[1] = LPC3[3];CNVTU[2] = 2;CNVTA = LPC2[1] \ Gosub CONVERT
  LPRICE$ = AMOUNT Using "#######.##"
  If LPC3[3] > 0 Mat Read #CH_CCODES,LPC3[3],0;CCD$; \ LPUM$ = "/" + CCD$[11,14]
  X2 = LPC1[2] \ Gosub ISDUNPACK \ LPDATE$ = X$
End If 
Return 
!
CONVINFO: Rem "Convert the Info into
If P9$[20,20] = "F" And DHA2$[1,12] = "Z ZZZZZZZZZZ" Let PFU1[9] = -99
For X = 0 To 12
  If PFU1[9] <> -99
    If S1[X,0]
      CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = S1[X,0]
      Gosub CONVERT
      S1[X,0] = AMOUNT
    End If 
    If S2[X,0]
      CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = S2[X,0]
      Gosub CONVERT
      S2[X,0] = AMOUNT
    End If 
  End If 
Next X
SELLUM$ = "Err."
If P9$[20,20] = "F" And DHA2$[1,12] = "Z ZZZZZZZZZZ" Let SELLUM$ = "LBS "
If PFU1[9] = -1 Let SELLUM$ = "CWT "
If PFU1[9] = -2 Let SELLUM$ = "LOT "
If PFU1[9] = -3 Let SELLUM$ = "LB  "
If PFU1[9] > 0 Read #CH_CCODES,PFU1[9],10;SELLUM$;
Return 
!
! - Rem {begin rtn.input.s}
! - ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 >= 3 If J0 <= 4
! -   If J0 = 3 Let J2$ = "#",J2$
! -   If J0 = 4 Let J2$ = "-",J2$
! -   J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - End If 
! - J1$[J3 + 1] = ""
! - If J0 < 3 Goto ISENTER
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 <> 6
! -   If J0 = 5
! -     J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
! -     J1$ = J9$[4,7],J9$[2,3],"  "
! -   Else 
! -     J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! -     If Len(J5$) > Msc(33) - 3 Let J5$[Msc(33) - 3] = ""
! -   End If 
! - End If 
! - ISENTER: Rem
! - If J5 < Msc(34) - 1
! -   Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - End If 
! - Print @J4 + J3,J5;'EU';@J4 - 1,J5;'BU';
! - Print @J4,J5;J1$[1,J3]; Tab (J4 + J3);'EU'; \ If J0 = 5 Print "  ";
! - Print @J4 - 1,J5;'BU';@J4,J5; \ Input Len J3 + 16384;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) > J3
! -   J7$ = "TOO LONG !" \ Gosub ISERRMSG \ Goto ISENTER
! - End If 
! - J9$ = J4$
! - If Not(Len(J9$))
! -   If J0$[3,4] = "00"
! -     J9$ = J1$
! -   Else 
! -     J7$ = "FIELD MUST BE ENTERED !" \ Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - End If 
! - For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] < " " Or J9$[J8,J8] > "~"
! -     J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!"
! -     Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - Next J8
! - On J0 Goto ISTYPE1,ISTYPE1,ISTYPE3,ISTYPE3,ISTYPE3,ISTYPE6 \ Stop 
! - ISTYPE1: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto ISOUT
! - ISTYPE3: Rem
! - J9 = 0
! - X1 = 0
! - For J8 = 1 To Len(J9$)
! -   If J0 = 4 And Not(X1)
! -     If J9$[J8,J8] = "-" Or J9$[J8,J8] = "+"
! -       X1 = 1
! -       Goto ISNCONT1
! -     End If 
! -   End If 
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto ISNCONT2
! -   If J9$[J8,J8] = " " Goto ISNCONT1
! -   If Len(J0$) > 10
! -     J7$ = "" \ J7$ = J0$[10] To J9$[J8,J8] \ If J7$ <> "" Goto ISNCONT1
! -   End If 
! -   If J9$[J8,J8] <> "." Goto ISNUMERR1
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto ISDECERR
! -   If J9 Goto ISNUMERR1
! -   J9 = 1
! - ISNCONT2: Rem
! -   X1 = 1
! -   If J9 Let J9 = J9 + 1
! - ISNCONT1: Rem
! - Next J8
! - If J0 = 5 Goto ISTYPE5
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto ISDECERR
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto ISOUT
! - ISNUMERR1: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - ISDECERR: Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE5: If Len(J0$) > 10 If J9$ = J0$[11,11] Goto ISOUT
! - If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto ISDTERR
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto ISDTOUT
! - If J9[1] = 0 Goto ISDTERR
! - On J9 Goto ISMO31,ISMOFEB,ISMO31,ISMO30,ISMO31,ISMO30
! - On J9 - 6 Goto ISMO31,ISMO31,ISMO30,ISMO31,ISMO30,ISMO31
! - Goto ISDTERR
! - ISMO30: If J9[1] > 30 Goto ISDTERR
! - ISMO31: If J9[1] > 31 Goto ISDTERR
! - Goto ISDTOUT
! - ISMOFEB: If J9[1] > 29 Goto ISDTERR
! - If Fra(J9[2] / 4) ! *** 2000 is leap year! OR NOT FRA(J9[2]/100)
! -   If J9[1] > 28 Goto ISDTERR
! - End If 
! - ISDTOUT: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub ISDUNPACK
! - J$ = X$ \ J3 = 8 \ Goto ISOUT
! - ISDTERR: J7$ = "INVALID DATE !" \ Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE6: Call String(1,J9$)
! - If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto ISOUT
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto ISOUT
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !"
! - Gosub ISERRMSG \ Goto ISENTER
! - ISOUT: J$[J3 + 1] = "" \ Print @J4,J5;J$; \ Return 
! - ISERRMSG: X1 = Len(J7$)
! - Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
! - Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
! - Print 'K1'; \ Window Close \ Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
!Rem {end rtn.input.s}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: goto CVTSTARTB ! dx change If Spc(4) > 1280 Goto CVTSTARTB
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
CVTTRY: Rem "this is a remark
Signal 2,X1,AMOUNT,FLAG \ rem ! - If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto CVTTRY
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
!
Rem {end rtn.convert.s}
CHK_VAR: Rem "Check if Variance
If MINQTY
  If S1[0,0] < MINQTY And S2[0,0] < MINQTY Return 
End If 
If Not(VARTYPE) Return 1
If VARTYPE = 1 ! "Units
  AMOUNT = S1[0,0] - S2[0,0]
  VARPCT = 0 \ If S1[0,0] Let VARPCT = FNR((AMOUNT * 100) / S1[0,0])
End If 
If VARTYPE = 2 ! "Dollars
  AMOUNT = S1[0,1] - S2[0,1]
  VARPCT = 0 \ If S1[0,1] Let VARPCT = FNR((AMOUNT * 100) / S1[0,1])
End If 
If VARIT = 0 And VARPCT >= VARAMT Return 1
If VARIT = 1 And VARPCT <= VARAMT Return 1
Return 
!
CALCTYR: Rem "==================== adjust this year buckets for fiscal year
X7 = BOYMNTH
For I = 0 To 12
  For X6 = 0 To 2
    If I Let S1[I,X6] = DHP2[X7,X6] Else Let S1[0,X6] = DHP2[0,X6]
  Next X6
  If I If X7 = ARMONTH Let I = 13
  If I Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
Return 
!
CALCLYR: Rem "==================== adjust last year buckets for fiscal year
X7 = BOYMNTH;X8 = 0
For I = 0 To 12
  For X6 = 0 To 2
    If Not(I) Let S2[0,X6] = DHLYP2[0,X6] \ Goto NXTLYCAT
    If Not(X8) Let S2[I,X6] = DHLYP2[X7,X6] Else Let S2[I,X6] = DHP2[X7,X6]
NXTLYCAT: Next X6
  If I If X7 = ARMONTH Let X8 = 1
  If I Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
Return 
!
CALCYTD: Rem "not that it COULD be correct
S1[0,0] = 0;S1[0,1] = 0;S1[0,2] = 0
S2[0,0] = 0;S2[0,1] = 0;S2[0,2] = 0
For I = 1 To 12
  For X = 0 To 2
    S1[0,X] = S1[0,X] + S1[I,X]
    S2[0,X] = S2[0,X] + S2[I,X]
  Next X
Next I
Return 
!
CLRWORKVAR: Rem "Clear Work Variables
For X = 0 To 12
  For I = 0 To 2
    S1[X,I] = 0;S2[X,I] = 0
  Next I
Next X
Return 
!
CLRVARS: Rem "Clear
SLSMSORT = 0;CUSTSORT = 0;COMSORT = 0;PRODSORT = 0
CUSTTOT = 0;COMTOT = 0;ORDTYPDTL = 0;PPROF = 0;PRNTDIFF = 0
LINDTL = 0;VARTYPE = 0;VARAMT = 0;MINQTY = 0
DIV = 0;WHSE = 0;SLSM[0] = 0;SLSM[1] = 999
CUST[0] = 0;CUST[1] = 999999;SCOMM$ = "    "
ECOMM$ = "}}}}";SPROD$ = " ",SPROD$;EPROD$ = "}",EPROD$
CCTGY[0] = 0;CCTGY[1] = 999
For X = 1 To 38 \ DMC2[X] = 1 \ Next X
Return 
GET_PRODWHSE: REM LOOK UP PROD GROUP    
LET Kpw$=" ",Kpw$  
if whse
	let pwhse=whse
else
	LET pWHSE=1  
endif                           
LET PARM[2]=1                           
CHK_WHSE: REM                           
IF PWHSE>99 RETURN                       
LET Kpw$[1,12]=A$[140,151]               
LET Kpw$[13,14]=PWHSE USING "##"          
SEARCH #ch_pw,2,1;Kpw$,Rec_pw,E    
IF E 
	if whse
		let pwhse=100
	else
		LET pWHSE=pWHSE+1   
	endif
	GOTO CHK_WHSE:                        
ENDIF                                   
MAT  READ #ch_pw,Rec_pw,846;WHMISC2;            
CHK_PRODGRP: REM                        
LET PARM[0]=0                           
LET PARM[1]=WHMISC2[0]    
Call ProdGroup(e$,intco,Parm[])                
RETURN         
!
! - BOX_: Rem "Print a box
! - Call "Box",SC,SR,NC,NR
! - Return 
!
RNGDONE: Rem "Done with
Gosub PRNTGRND_TTL
! - If SCRN Input @0,23;"\15\PRESS <CR> TO EXIT  "J$
!
OUTEND: Rem "Done - outta here
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  !! Call programdump("/tmp/b427log1!","")       
  !!!!!!print rstr$
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
End 
!
! - Print 'CS'
! - Chain "MX000C"
! - Close 
! - Chain "MX000"
! 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
