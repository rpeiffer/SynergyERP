!"serpfwgt" === description  synergy erp Forecast Table Maintenance
! 
! loadsave -w -n 100,10 -o prog/dxport/serpfwgt.dl4 src/serpfwgt.src
!  07/23/2009 started
!
include "src/copyright.inc"
!


! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus

External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,JDate$,FormatDate2$

Declare Intrinsic sub programdump,env,Logic
Declare Intrinsic Sub DateToJulian, JulianToDate

! internal subs/function
Declare Sub OpenFiles,UpdateLog,baddata
Declare Sub CPDATA,SbmtData,Snddata

OPTION GOSUB NESTING 16  ! Default is 8
Try
	Option String Redim is legal ! in case subs dim/use same names
	
	dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
	dim action$[30],options$[30],userid$[8],b$[200],action1$[30],Action2$[30]
	Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
	dim tmp$[1200],tmp1$[300],Msgdesc$[150],X$[20]
	dim Message$[200],WebStr$[2000],SessionID$[200]
	Dim Prod$[12],P9$[50],P60$[50],P61$[256]
	Dim QMask$[20],PMask$[20],Key1$[60],UA2$[50]
	Dim Mask32$[10],Title$[30]
	dim Blank$[100] \ Blank$=" ",Blank$
	Dim 1%,PRC,COMM_LEV,CYEAR,YEAR1
	dim 1%,cost_lev[4],Whse,debug,cnvtu[2],2%,Q0[1]
	Dim 2%,X2[9],UA2[2],FWGHT[23]
	Dim 2%,maxcnt \ maxcnt=50 ! init max records in arrays for list
	Dim 3%,PRR,FTRec
	Dim 3%,R[99],O1,UB0[16],Amount,CNVTA
	dim List$[maxcnt,1000] ! for .net (larger size - ZLines)
	dim slist$[maxcnt,1000] ! second list
	dim dmsg$[256],dblog$[60] \ dblog$="files/6/fwgt.log" ! fields for DEBUG

	Def FNI(H) = Int(Abs(H) +.5) * Sgn(H)
	Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)

	! call dxopen() ! done in pomenu - for standalone run
	call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
	
	debugDetail=0;debug=0 ! can do debug text by changing both to 1
	If debugDetail
		debug=1
		tmp$="serpfwgt"
		dmsg$[1,50]="-",dmsg$ \ Call updatelog(debug)               
		dmsg$="start...program "+tmp$ \ Call updatelog(debug)
	Endif
	Action$=UCase$(Action$)
	ACtion$=RTrim$(Action$) ! make sure UPPERCASE and No blanks at end
	Action1$=UCase$(action1$)
	Action1$=RTrim$(action1$) ! UC and trimmed
	Action2$=UCase$(action2$)
	Action2$=RTrim$(action2$) ! UC and trimmed
	if debugdetail
		dmsg$="SERPFWGT ACTION "+action$
		If Action1$<>"" let dmsg$=dmsg$+" ACTION1 "+action1$ 
		if Action2$<>"" let dmsg$=dmsg$+" ACTION2 "+action2$
		Call updatelog(debug)
	Endif
	
	call OpenFiles() ! open all needed files
	call GetCostLevels(e$,Cost_Lev[],IntCO,UserID$) ! get cost security
	
	Mat Read #ctlc,19,50;P9$;
	Mat Read #ctlc,60,50;P60$;
	Mat Read #ctlc,61,0;P61$;
	Mat Read #CTLC,115,40;Q0;
	                             
	Mask32$="###.##" ! 3.2 mask
	QMask$="---------#.##"
	tmp$="#",tmp$
	If q0[1]<=0 Let Q0[1]=2
	If Q0[1] Let Pmask$="-----------#.",tmp$[1,Q0[1]]     !price mask
	! get the Usercntrl Rec #
	If Userid$="" or UserID$[1,2]="  "
		Call DXGet("S_USER.ID",tmp$) ! get from system variable
	Else
		tmp$=UserID$
	Endif
	Let UserID$=UCase$(tmp$) ! make sure it's UPPERCASE as that's what PM uses
	Let Key1$=UserID$+"          " ! space fill it
	UCC = OpenFile(-9988, intCo) \ if UCC=-1 Error 42
	Key1$[11]="" ! cut to length
	Search #UCC,2,1;Key1$,Rec,E
	If Not(E)
	  Let SCR=Rec
	  Mat Read #ucc,scr,200;UA2;
	  Mat read #ucc,scr,336;Ua2$;
	  Read #ucc,scr,394;comm_lev;
	Else
	  Let SCR=0;comm_lev=0 ! 
	  UA2[0]=0;UA2$=" ",UA2$
	Endif
	Close #UCC
	! GET additional user data flags
	REM UNPACK A2[0] TO B0[]                         
	FOR X1=0 TO 15                                          
		LET O1=2^X1 \ LET M1=1
		! CALL $LOGIC,M1,O1,A2[0],B0[X1] ! ub
		Call Logic(m1,O1,UA2[0],UB0[X1])
		LET UB0[X1]=SGN(UB0[X1])
	NEXT X1   
	! call dxsave(0,"tmp/fwtsv.txt!") ! save web send data
	ReturnStatus=0
	Message$="Action 1 not found"
  select case action1$
	Case "GETLIST" ! tbl droplist							doc=FWT.GetList.doc
		returnstatus=1
		message$="OK"
		Clear List$[]
		tmpcnt=maxcnt
		list$[0]=bsdel$,"CURRTBLS",fdel$
		List$[1]="TBLNO",fdel$,"TITLE",fdel$
		row=2
		Let x2=CHF(FWT)-1
		for R=1 to x2
		  Try
			mat read #FWT,R,96;TITLE$;
		  Else
		    Clear title$
		  End try
			TMP$=RTrim$(title$)
			if tmp$<>""
				List$[row]=Str$(R),fdel$,Str$(R)+" - "+tmp$,fdel$
				row=row+1
				if row>tmpcnt  let tmpcnt=expandarray(e$,List$[])
			Endif
		Next R
		List$[row]=esdel$
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		if debugdetail
			dmsg$="Sent file droplist "+Message$ \ Call updatelog(debug)
		Endif
		! end of GETLIST
    Case "GETDATA" ! data from file							doc=FWT.GetData.doc
		returnstatus=1
		message$="OK"
		Call Snddata()
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		if debugdetail
			dmsg$="Sent table "+Str$(FTREC)+" "+Message$ \ Call updatelog(debug)
		Endif
		! end of GETDATA
	Case "COPYDATA" ! data copy from						doc=FWT.CopyTable.doc
		returnstatus=1
		message$="OK"
		call CPDATA()
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		if debugdetail
			dmsg$="Copy from table "+Str$(FRTREC)+" to "+Str$(FTREC)+" "+Message$ \ Call updatelog(debug)
		Endif
		! end of COPYDATA
	Case "SBMTDATA" ! FWT changes							doc=FWT.SubmitData.doc
		returnstatus=1
		message$="OK"
		Call SbmtData()
		if debugdetail
			dmsg$="Submit table "+Str$(FTREC)+" "+Message$ \ Call updatelog(debug)
		Endif
		! end of SBMTDATA

		! call programdump("tmp/fwtlog1!","")
  End Select
  SerpfwtDone: ! finished
  ! status section                                                       
  Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)                 
  Call AddToStr(e$,rstr$,WebStr$)                                        
  Call SetOutPut(e$,rstr$)       
  if debugdetail
		dmsg$="End of Program SERPFWGT" \ Call updatelog(debug)
  Endif
else
 include "src/callmainerrnet.inc"
end try
end  ! end of Main
!
!--------------------------------------------------------------------

! subs start now
!------------------------------------------------------------------------------------------
Sub OpenFiles()

 Try
    !
	FWT=OpenFile(9964,Intco) \ if FWT=-1 error 42
	if debugdetail
		dmsg$="Files Opened" \ Call updatelog(debug)
    Endif
 else
    include "src/callsuberr.inc"
  end try
end sub ! openfiles
!
!------------------------------------------------------------------------------------------
Sub SndData()
! send Table data
 Try
	Clear List$[]
	tmpcnt=maxcnt
	List$[0]=bsdel$,"WGTTABLE",fdel$
	Webstr$="TBLNO",fdel$,"TITLE",fdel$
	For x=1 to 24
		tmp$=Str$(X) ! X using "##"
		let webstr$=webstr$,tmp$,"MTHSAGO",fdel$
	Next X
	List$[1]=webstr$
	row=2
	call dxget("TBLNO",tmp$)
	X2=tmp$
	if x2<1 or X2>999 or fra(X2)
		returnstatus=0
		Message$="Invalid Table Number"
		goto SDDone
	Endif
	Try
		mat read #FWT,X2,0;FWGHT;
		mat read #FWT,X2,96;Title$;
	Else
		clear fwght[]
		clear title$
	End try
	Webstr$=Str$(X2),fdel$,RTRim$(Title$),fdel$
	for x=0 to 23
		webstr$=webstr$,LTrim$(FWGHT[x] Using Mask32$),fdel$
	Next X
	List$[2]=webstr$
	list$[3]=esdel$
	FTRec=x2
	SDDone: ! done
	! calling rtn to addtostr
 else
    include "src/callsuberr.inc"
  end try
end sub ! SndData
!
!------------------------------------------------------------------------------------------
Sub updatelog(debug)                                        
    If not(debug) Exit Sub                                    
	System "echo ''" + msc$(0) + " UID "+RTrim$(Userid$)+" " + dmsg$ + "'' >> " + dblog$
End Sub 
! 
!--------------------------------------------------------------------
Sub SbmtData()
! submit data (all fields)
 Try
	returnstatus=1
	message$="OK"
	call dxget("TBLNO",tmp$)
	X2=tmp$
	if x2<1 or X2>999 or fra(X2)
		returnstatus=0
		Message$="Invalid Table Number"
		goto SBTFWDone
	Endif
	FTREC=X2
	call dxget("TITLE",tmp$)
	if Trim$(tmp$)=""
		returnstatus=0
		Message$="Please enter a Title!"
		goto SBTFWDone
	Endif
	Title$=tmp$+Blank$
	Call dxget("MTHSAGO1",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[0]=x2
	Call dxget("MTHSAGO2",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[1]=x2
	Call dxget("MTHSAGO3",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[2]=x2
	Call dxget("MTHSAGO4",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[3]=x2
	Call dxget("MTHSAGO5",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[4]=x2
	Call dxget("MTHSAGO6",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[5]=x2
	Call dxget("MTHSAGO7",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[6]=x2
	Call dxget("MTHSAGO8",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[7]=x2
	Call dxget("MTHSAGO9",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[8]=x2
	Call dxget("MTHSAGO10",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[9]=x2
	Call dxget("MTHSAGO11",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[10]=x2
	Call dxget("MTHSAGO12",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[11]=x2
	Call dxget("MTHSAGO13",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[12]=x2
	Call dxget("MTHSAGO14",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[13]=x2
	Call dxget("MTHSAGO15",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[14]=x2
	Call dxget("MTHSAGO16",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[15]=x2
	Call dxget("MTHSAGO17",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[16]=x2
	Call dxget("MTHSAGO18",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[17]=x2
	Call dxget("MTHSAGO19",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[18]=x2
	Call dxget("MTHSAGO20",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[19]=x2
	Call dxget("MTHSAGO21",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[20]=x2
	Call dxget("MTHSAGO22",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[21]=x2
	Call dxget("MTHSAGO23",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[22]=x2
	Call dxget("MTHSAGO24",tmp$)
	x2=tmp$
	if x2<0 or x2>999.99 or fra(x2*100) call baddata()
	FWGHT[23]=x2
	if returnstatus=1 ! ok
		Mat write #FWT,FTRec,0;FWGHT;
		Mat write #FWT,FTREC,96;title$;
	Endif
  SBTFWDone: ! finished
 else
	include "src/callsuberr.inc"
  end try
end sub ! SbmtData
!
!------------------------------------------------------------------------------------------
Sub CPData()
! copy from one record to other?
  Try
	call dxget("FRMTBLNO",tmp$)
	X2=tmp$
	if x2<1 or X2>999 or fra(X2)
		returnstatus=0
		Message$="Invalid From Table Number"
		goto CPFWDone
	Endif
	FRTREC=X2
	Try
		mat read #FWT,X2,0;FWGHT;
		!mat read #FWT,X2,96;Title$; ! keep orig title
	Else
		clear fwght[]
		!clear title$
	End try
	call dxget("TBLNO",tmp$)
	X2=tmp$
	if x2<1 or X2>999 or fra(X2)
		returnstatus=0
		Message$="Invalid Table Number"
		goto CPFWDone
	Endif
	If X2=FRTREC
		returnstatus=0
		Message$="You cannot copy from same table"
		goto CPFWDone
	Endif
	FTRec=x2
	Try
		!mat read #FWT,X2,0;FWGHT; ! use from tbl wgt
		mat read #FWT,X2,96;Title$;
	Else
		!clear fwght[]
		clear title$
	End try
	List$[0]=bsdel$,"WGTTABLE",fdel$
	Webstr$="TBLNO",fdel$,"TITLE",fdel$
	For x=1 to 24
		tmp$=Str$(X) ! X using "##"
		let webstr$=webstr$,tmp$,"MTHSAGO",fdel$
	Next X
	List$[1]=webstr$
	Webstr$=Str$(FTREC),fdel$,RTRim$(Title$),fdel$
	for x=0 to 23
		webstr$=webstr$,LTrim$(FWGHT[x] Using Mask32$),fdel$
	Next X
	List$[2]=webstr$
	list$[3]=esdel$
  CPFWDone: ! finished
 else
	include "src/callsuberr.inc"
  end try
end sub ! CPData
!
!------------------------------------------------------------------------------------------
Sub Baddata()
! set flag for no good
Returnstatus=0
Message$="Invalid weight figure entered"
End Sub ! baddata
!
!------------------------------------------------------------------------------------------