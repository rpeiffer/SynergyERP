! >>> Program 316top
!
! description Current A/R Top 250 by Accounts Receivable Amount or Past Due 
!
! loadsave -w -n 100,10 -o prog/dxport/316top.dl4 src/316top.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
!
External Lib "ubsfunc.dl4"
Declare External Sub GetCostLevels
Declare External Sub UTAge5
Declare External Function GetUIDSalesrep
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,Time,VerifyDate
Declare Intrinsic sub programdump
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
If Err 0 Gosub ERR_TRAP 
!

dim 1%,picklist
dim 2%,N1[13],1%,N2[6],N1$[42],V9[4],J8,TIME$[22],DATE$[8] ! old com line
dim SZONE$[2],EZONE$[2],CNAME$[30],ITEM_LAB$[10],INVAC,INCM,INCALL9! old com line
dim custom_customer$[30]
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim BegProd$[12],EndProd$[12]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim Z1$[50],F1$[16],F2$[26],A$[26],K$[130],3%
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim KEY27$[2]
Dim 1%,J0,J2,J3,J4,J5,J6,J9[2],X1,X$[40],PRODRANGE,URECFLAG,repSecurity
Dim 2%,X2,DT3[1],D9[5]
Dim 3%,TT,intco
Dim 4%,J1
! dim.aract.i                   
Dim 1%, SA0[11]                 
Dim 2%, A2[5], A4[8], A1[2]     
Dim 3%, A3[13], A5[7], ARREF[1] 
Dim SA3$[16], A4$[60]           
dim 3%,chklev1, chklev2, chklev3

dim keycust$[30],3%,rec_cust,custname$[30],3%,invtot,cctype,payamt
dim repopt$[1],d$[25],ageopt$[1]
dim keysort$[75],keycash$[30],keyinvh$[30],keyar$[30],message$[1000]
dim 2%,sdate,edate,sdiv,ediv,sbank,ebank,swhse,ewhse,sortopt,repopt,jsdate,jedate
dim 3%,tot1[9],tot2[9],tot3[9],rec_ar, rec_sort, rec_invh, rec_roc, rec_rot
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[5500],tmp1$[200],TMP2$[300],b$[200],blockid$[100],msg$[100],rstr$[5000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
dim 2%,ardate,jardate,jduedate,D3[1],age[7]
dim 3%,tmp3
dim compname$[30],ARDATE$[8],p9$[50]

Dim RETVAL$[256],Z2$[2]
Call Time(D$)

TT = Spc(5) \ COID = Int((TT - Int(TT / 16384) * 16384) / 64)
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
l9= 65 \ If J8 Let l9 = 1000
let l=99
Mat Read #1,3,0;CNAME$;
Read #1,18,50;ITEM_LAB$;
Read #1,0,100;DATE$;
Mat Read #1,115;D9;
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
READ #1,0,108;ARDATE;  
READ #1,0,100;ARDATE$; 
Mat Read #1,19,50;P9$;
!
TIME$ = "" \ Call Time(TIME$) \ TIME$ = TIME$[15]
N1$=" ",N1$
!
!!!! dx add xport reporting code
DXSetup:
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8<>0 ! dx xml, setup rstr$
  !<section>
  search rstr$,"<section>",e
  if e<>0
	tmp$=rstr$[1,e-1]
	rstr$=tmp$
  endif
  tmp$ = bsdel$,"316top",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 

!

let eflag=0
message$=""
!!!  dx add xport reporting code
call dxget("REPOPT",tmp$) \ IF RTRIM$(TMP$)="" LET TMP$="A"
let tmp$=rtrim$(ucase$(tmp$))
if tmp$<>"A" and tmp$<>"D" 
	let message$=message$+"Invalid Report Option Selected. " \ eflag=eflag+1
endif
let repopt$=tmp$
! warehouse range 
Call dxget("SWHSE",tmp$) 
if rtrim$(tmp$)="" let tmp$="1"
let swhse=tmp$
if swhse<1 or swhse>99
	let message$=message$+"Invalid Starting Warehouse Must be between 1 and 99 " \ eflag=eflag+1
	goto getdiv:
endif
Call dxget("EWHSE",tmp$) 
if rtrim$(tmp$)="" let tmp$="99"
let ewhse=tmp$
if ewhse<1 or ewhse>99
	let message$=message$+"Invalid Ending Warehouse Must be between 1 and 99 " \ eflag=eflag+1
	goto getdiv:
endif
If ewhse<swhse
	let message$=message$+"Ending Warehouse Must be Greater than Starting " \ eflag=eflag+1
endif
getdiv: ! division range 
Call dxget("SDIV",tmp$) 
if rtrim$(tmp$)="" let tmp$="1"
let sdiv=tmp$
if sdiv<1 or sdiv>99
	let message$=message$+"Invalid Starting Division Must be between 1 and 99 " \ eflag=eflag+1
	goto getage:
endif
Call dxget("EDIV",tmp$) 
if rtrim$(tmp$)="" let tmp$="99"
let ediv=tmp$
if ediv<1 or ediv>99
	let message$=message$+"Invalid Ending Division Must be between 1 and 99 " \ eflag=eflag+1
	goto getage:
endif
If ediv<sdiv
	let message$=message$+"Ending Division Must be Greater than Starting " \ eflag=eflag+1
	goto getage:
endif
getage: ! get age date
!if repopt$="D" ! based upon date
	call dxget("AGERPT",tmp$) \ IF RTRIM$(TMP$)="" LET TMP$="N"
	let tmp$=rtrim$(ucase$(tmp$))
	if tmp$<>"N" and tmp$<>"Y" 
		let message$=message$+"Invalid Age Date Option Selected. " \ eflag=eflag+1
		goto nxtget:
	endif
	let ageopt$=tmp$
	if ageopt$="N"	
		let p9$[25,25]="N"
	else
		let P9$[25,25] = "Y" ! age by due date
	endif
! endif
nxtget:! 
If eflag<>0 goto outend:
OpenFiles: ! 
Read #1,88,1808;F1$;
Ropen #2,F1$ ! customer

Read #1,88,1504;f1$;
Ropen #3,f1$ ! saract
let ch_ar=3
!if j8=0 !if pdf or print, new method, after edits,setouput,dxclose
! Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
! try call dxclose() else rem
!end if
if j8<>0  ! browser option 

  tmp$ = "Customer Name",fdel$
  tmp$ = tmp$, "Cust #",fdel$
  tmp$ = tmp$, "Trans #",fdel$
  tmp$ = tmp$, "Date",fdel$
  If repopt$="D"
	tmp$ = tmp$, "Days Past Due*",fdel$
  else
    tmp$ = tmp$, "Days Past Due",fdel$
  endif
  if repopt$="A"
	tmp$ = tmp$, "Amount Past Due*",fdel$
  else
	tmp$ = tmp$, "Amount Past Due",fdel$
  endif
  Call addtostr(e$,rstr$,tmp$+rdel$)
end if


! clear sort
let keysort$=" ",keysort$
clrsort: !
search #9,3,1;keysort$,rec_sort,e
if e=2 goto startsort:
if e<>0 gosub err_search:
search #9,5,1;keysort$,rec_sort,e
if e<>0 gosub err_search:
goto clrsort:

! startsort
startsort: ! 


ordsort: ! sort orders
let keyar$=" ",keyar$
Do
	search #3,3,1;keyar$,rec_ar,e
	if e=2 goto startprint:
	if e<>0 gosub err_search:
	Mat Read #CH_Ar, Rec_ar,  0; A2;
	If Int(Fra(A2[3]) * 100) > 5 goto nextarrec:
	Mat Read #CH_ar, Rec_ar, 24; A3;
	if (a3[0]-a3[1]-a3[2])<=0 goto nextarrec:
	Mat Read #CH_ar, Rec_ar,124; SA0;
	IF SA0[3]<SWHSE goto nextarrec:
	if sa0[3]>ewhse goto nextarrec:
    if sa0[5]<sdiv goto nextarrec:
	if sa0[5]>ediv goto nextarrec:
	if repopt$="A"
		let keysort$[1,14]=(a3[0]-a3[1]-a3[2]) using "###########.##"
	else
		Mat Read #CH_ar, Rec_ar,154; A4;
		gosub L_3000: ! age a/r
		if age[1]<0 goto nextarrec:
		let keysort$[1,14]=age[1] using "###########.##"
	endif
	let keysort$[15]=keyar$	
	search #9,4,1;keysort$,rec_ar,e
	if e<>0 gosub err_search:
	nextarrec:  ! 
Loop ! sort
goto startprint:


goto startprint:

startprint: ! 
let keysort$="~",keysort$
do
	Search #9,6,1;keysort$,rec_ar,e
	if e=2 goto endreport
	if e<>0 gosub err_search:
	! Read.Aract.i                           
	Mat Read #CH_Ar, Rec_ar,  0; A2    
	Mat Read #CH_ar, Rec_ar, 24; A3    
	Mat Read #CH_ar, Rec_ar,108; SA3$  
	Mat Read #CH_ar, Rec_ar,124; SA0   
	Mat Read #CH_ar, Rec_ar,154; A4    
	Mat Read #CH_ar, Rec_ar,190; A1    
	Mat Read #CH_ar, Rec_ar,202; A5    
	Mat Read #CH_ar, Rec_ar,256; A4$   
	Mat Read #CH_ar, Rec_ar,316; ARREF ;
	! Read order header 
	gosub L_3000: ! aging
	gosub L_5800: ! heading
	gosub L_5000: ! line 
	let t9[0]=t9[0]+age[1]
	let t9[1]=t9[1]+(a3[0]-a3[1]-a3[2])
	if totrec>=250 goto endreport:
	
	getnxtsort:  ! 
loop ! print
endreport: ! 

gosub L_4000:
goto outend:

L_3000: Rem AGING ROUTINE
! If Not(A2[4]) let e$="No date found for reference # ",str$(ARREF),"!" \ error 10000
If P9$[19,19] <> "Y" ! 
	If Int(Fra(A2[3]) * 100) > 5 Goto L_3100
else
	If Int(Fra(A2[3]) * 100) > 5 Goto L_3100 ! excluding all credit
endif
X2 = A2[4] \ Gosub L_7870 \ X = D3[0]
X2 = A4[3] \ Gosub L_7840 \ IF NOT(X2) LET A4[3]=0
If P9$[25,25] = "Y" ! age by due date
	If A4[3]<>0 Let X = A4[3]
endif
If Int(Fra(A2[3]) * 100) > 5 And A4[3] = 0 Let X = D3[0]
AGE[1] = 0;AGE[2] = ARDATE;AGE[3] = X;AGE[4] = 0
!If P61$[67,67] = "Y" And P9$[50,50] <> "M"
!  AGE[7] = C7;AGE[6] = 50
!Else 
  AGE[7] = 0;AGE[6] = 0
!End If 
call UTAge5(e$,P9$,AGE[],1)
L_3070: If AGE[0] = 1 Let E = 0 \ rem ! - Gosub ERR_SEARCH
If AGE[0] = 2 Goto L_3100
L_3100: Return 




L_4000: Rem TOTAL PRINT
if j8 return
!
Print #0;"\15\** TOTALS **";
Gosub L_5800
Print #0; Using "-------#";Tab 72;t9[0];
print #0; Using "---,---,---.##";TAB 86;t9[1];
Print #0;""
For X = 0 To 4 \ t9[X] = 0 \ Next X
print #0;""
let l=l+1
Return 
!


!
L_5000: Rem PRINT LINE
let totrec=totrec+1
let keycust$=A2[2] using "######"
search #2,2,1;keycust$,rec_cust,e
if not(e)
	read #2,rec_cust,30;custname$;
else
	let custname$="Not On File "
endif
if j8 
	tmp$ = "Customer Name",fdel$
  tmp$ = tmp$, "Cust #",fdel$
  tmp$ = tmp$, "Trans #",fdel$
  tmp$ = tmp$, "Date",fdel$
  If repopt$="D"
	tmp$ = tmp$, "Days Past Due*",fdel$
  else
    tmp$ = tmp$, "Days Past Due",fdel$
  endif
  if repopt$="A"
	tmp$ = tmp$, "Amount Past Due*",fdel$
  else
	tmp$ = tmp$, "Amount Past Due",fdel$
  endif
	tmp$ = custname$,fdel$
    tmp$ = tmp$,a2[2] using "######",fdel$
    tmp$ = tmp$,arref[0] using "###########",fdel$
	if p9$[25,25]="Y" and a4[3]<>0
		let x2=a4[3] \ gosub L_7700:
	else
		X2 = A2[4] \ Gosub L_7770 
	endif
    tmp$=tmp$,X$[1,8],fdel$
	tmp$ = tmp$, age[1] using "-------#",fdel$
	tmp$ = tmp$, (a3[0]-a3[1]-a3[2]) using "#########.##",fdel$
 
  Call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
Print #0; Tab 1;custname$; ! 
Print #0; using "######";Tab 33;a2[2]; ! "Customer
Print #0; USING "########";Tab 44;arREF[0]; !"Invoice #";
if p9$[25,25]="Y" and a4[3]<>0
	let x2=a4[3] \ gosub L_7700:
else
	X2 = A2[4] \ Gosub L_7770 
endif
print #0;tab 56;x$[1,8]; ! date
Print #0; Using "-------#";Tab 72;AGE[1];
print #0; Using "###,###,###.##";TAB 85;(A3[0]-A3[1]-A3[2]);
Print #0;" "
Return 
!

L_5800: rem heading
if j8 return
!
L = L + 1
If L < L9 Return 
If Not(P) Goto L_5815
If L9 <> 20 Goto L_5810
!!Input "\15\PRESS <CR> TO CONTINUE "J$
!!Print 'CS'
L_5810: If P Print #0;"\14\";
L_5815: Print #0;" "
Print #0;"-316top-"; Tab 45;CName$[1,30] ! company name
P = P + 1
Print #0; D$;
Print #0; Tab 35;"Top 250 Outstanding A/R Transactions ";
if repopt$="A"
	print #0;"By Amount ";
else
	print #0;"By Days ";
endif
if p9$[25,25]="Y" 
	print #0;"Aged By Due Date ";
else
	print #0;"Aged By Invoice Date ";
endif
Print #0; Tab 110;"PAGE";P
Print #0;"A/R Date: ";ardate$;
if swhse=1 and ewhse=99
	print #0;tab 40;"All Warehouses";
else
	if swhse=ewhse
		print #0;using "##";tab 40;"Warehouse: ";swhse;
	else
		print #0;using "##";tab 40;"Warehouses ";swhse;" - ";ewhse;
	endif
endif
if sdiv=1 and ediv=99
	print #0;tab 60;"All Divisions";
else
	if sdiv=ediv
		print #0;using "##";tab 60;"Division: ";sdiv;
	else
		print #0;using "##";tab 60;"Divisions ";sdiv;" - ";ediv;
	endif
endif
Print #0;" "
Print #0;""
Print #0; Tab 1;"Customer Name";
Print #0; Tab 33;"Cust #";
Print #0; Tab 45;"Trans #";
Print #0; Tab 58;"Date";
Print #0; Tab 70;"Past Days";
Print #0; Tab 85;"Past Due Amount";
Print #0;" "
Print #0;" "
let l=9
Return 



L_7700: Rem REM  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 

L_7770: Rem REM DATE JULIAN X2 TO X$
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 

!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ E=0 \ Return ! good 
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
E=1
Return 

L_7840: Rem REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) 
If E<>0 
	let x2=0
	Return 
endif
X2 = X$[1,5]
Return
!
L_7870: Rem REM CONVERT JULIAN TO YYMMDD
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 


ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
E$=msg$
call programdump()
goto err_msg ! Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End

!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 


OUTEND: Rem EXIT ROUTINE
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		let message$=message$+"There are no transactions to print"
		message$=message$+"."
	else ! outend
		Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
!try Call dxclose() else rem

End ! the whole program