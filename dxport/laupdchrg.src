! >>> Program laupdchrg
!
! description A/P Data Entry Calc g/l distributions
! loadsave -w -n 100,10 -o prog/dxport/laupdchrg.dl4 src/laupdchrg.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC  4, 2008  11:21:50
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/laupdchrg.src (univ2) [mary] {36982}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub FindF,InpBuf,String
! Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian,Time,VerifyDate
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Rem laupdchrg  DISTRIBUTE FREIGHT AND MISC CHARGES
!Enter CH_AP[],APVEND,POVEND,INV_$,INVTYPE,PONUM,SRC
Rem ch_ap hold channel numbers for
Rem ch_ap[0]=appoh ch_ap[1]=appol  ch_ap[2]=poctfle  ch_ap[3]=pohead
Rem ch_ap[4]=poline
Rem if ch_ap[] if set to 0 will open files
!If Err 0 Gosub ERR_TRAP
Try
	Enter CH_AP[],APVEND,POVEND,TRANSID$,INVTYPE,PONUM,SRC,MESSAGE$,IntCo,rstr$,RETURNSTATUS
	dim e$[500],buttonlist$[5,50],nextlist$[5,100],msg$[100],TMP$[50] ! error 
Dim 1%,PFU1[20],CNVTU[9],SC,SR,FLAG
Dim 3%,A[33],PFU2[6]
Dim 3%,CNVTA[4]
Dim 1%,X1,L1[5],PL0[4],NSD1[7],PO1[9],POGLFLAG
Dim 3%,MS1
Dim 1%,H4[3],FLAGS[11],WH1[99,2],DFLT_DIST_TYPE
Dim 2%,X2,PFB[24],Q0[1],L2[2],NSD2[4],PH[4],H0[5],H3[4],GRP[3]
Dim 2%,APFRT,COID
Dim 3%,PFA1[7],AMOUNT,LINE_FRT,FRT_CHRG,HAZ[4],FRT[4],MISC[4]
Dim 3%,L3[6],PL[5],PL4[23],NSD3[9],H8[9],PO3[10]
Dim 3%,QTY,BILL_QTY,TMP_CHARGE,DISP_COST,DISP_QTY,DISP_EXT
Dim X$[10],P9$[50],U5$[10],PFA$[156],UNT$[4]
Dim L1$[120],NSD$[96],H$[82],H1$[116],P60$[50]
Dim GRP$[2],FNAME$[16]
Dim APHKEY$[30],APLKEY$[40],POCKEY$[30],POLKEY$[30],PRODKEY$[50],POHKEY$[30]
Dim 3%,REC_PROD,REC_POH,REC_POL,REC_POC,REC_APH,REC_APL
Dim 3%,PRODLBS,PRODFACT,POLBS,POFACT,WEIGHT,PIECE,CUBE

Dim APH$[12]
Dim 1%,APH1[0],APH3[4]
Dim 2%,APH0[2]
Dim 3%,APH2[2],APH4[4]
Dim APL$[12]
Dim 1%,APL1[5],APL3
Dim 2%,APL0[2]
Dim 3%,APL2[6]
Dim PCT$[12]
Dim 1%,PCT3[2],PCT0
Dim 2%,PCT1[5]
Dim 3%,PCT2[5],PCT4[1],PCT5[9],PCT6[1]
Rem open files    
if not (ch_ap[20]) ! cntrl file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=ch_ap[20]
endif
if not(Ch_ap[0]) ! appoh file
	ch_aph=OpenFile(9802,intCo) \ If Ch_aph = -1 Error 42!
else
	let ch_aph=ch_ap[0]
endif
if not(ch_ap[1])
	ch_apl=OpenFile(9803,intCo) \ If Ch_apl = -1 Error 42!
else
	let ch_apl=ch_ap[1]
endif

if not(Ch_ap[2])
	ch_poc=OpenFile(9944,intCo) \ If Ch_poc = -1 Error 42!
else
	let ch_poc=ch_ap[2]
endif
if not (ch_ap[3]) ! purchase order header  #8
	 Ch_Poh = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
else
	ch_poh=ch_ap[3]
endif
if not (ch_ap[4]) ! po lines #9
	Ch_PoL = openfile(2432,intCo) \ If Ch_Pol = -1 Error 42     !"po lines file
else
	let ch_pol=ch_ap[4]
endif
if not (ch_ap[9]) ! product file #3
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
else
	let ch_prod=ch_ap[9]
endif
If not (ch_ap[10]) ! warehouse file #12 
	Ch_Wh = OpenFile(2768,intCo) \ If Ch_Wh = -1 Error 42  !" warehouse file
else
	let ch_wh=ch_ap[10]
endif
if not(ch_ap[11]) ! pomisc
	ch_misc = OpenFile(-9949,intCo) \ If ch_misc = -1 Error 42 !po misc charge 
else
	CH_MISC=ch_ap[11]
			
endif
if not (ch_ap[12]) !  nonstock #14
	ch_nstk=OpenFile(2448,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
else
	let ch_nstk=ch_ap[12]
endif

Mat Read #ctlc,51,88;POGLFLAG;
Mat Read #ctlc,60,50;P60$;
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
For X1 = 0 To 99
  WH1[X1,0] = -99
  WH1[X1,1] = -99
  WH1[X1,2] = -99
Next X1
FRT_DT = -99;HAZ_DT = -99;MISC_DT = -99
APHKEY$ = " ",APHKEY$
APHKEY$[1,6] = APVEND Using "######"
APHKEY$[7,18] = transid$[1,12]
APHKEY$[19,20] = INVTYPE Using "##"
APHKEY$[21,26] = PONUM Using "######"
Search #CH_APH,2,1;APHKEY$,REC_APH,E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto OUTEND
Gosub READ_APPOH
If Not(APH2[1]) And Not(APH2[2]) Goto CHECKAPLINES
POHKEY$ = " ",POHKEY$
POHKEY$[1,6] = APH0[2] Using "######";POHKEY$[7,12] = PONUM Using "######"
Search #CH_POH,2,2;POHKEY$,REC_POH,E \ If E Gosub ERR_SEARCH
Gosub READ_POH
Read #CH_WH,(H4[1] - 1),122;DFLT_DIST_TYPE;
MISC_CHARGE = 0;HAZ_CHARGE = 0
If P60$[49,49] = "B" Or P60$[49,49] = "M"
  If APH2[2] ! misc charge
    For X2 = 0 To 4
      If APH3[X2]
        If APH3[X2] > Chf(CH_MISC - 1) Goto ENDMISC
        Mat Read #CH_MISC,APH3[X2],24;MS1;
        If MS1
          If MS1 = 1 Let MISC_CHARGE = MISC_CHARGE + APH4[X2]
          If MS1 = 2 Let HAZ_CHARGE = HAZ_CHARGE + APH4[X2]
        End If 
      End If 
ENDMISC: Rem end misc calc
    Next X2
  End If 
End If 
HAZ[1] = 0;HAZ[2] = 0;HAZ[3] = 0;HAZ[4] = 0
FRT[1] = 0;FRT[2] = 0;FRT[3] = 0;FRT[4] = 0
MISC[1] = 0;MISC[2] = 0;MISC[3] = 0;MISC[4] = 0
POCKEY$ = PONUM Using "######"
SRCHPOC1: Rem search po to find distribution amount
Search #CH_POC,3,1;POCKEY$,REC_POC,E \ If E = 2 Goto ENDSRCHPOC1
If E Gosub ERR_SEARCH
Mat Read #CH_POC,REC_POC,0;PCT1;
If PCT1[0] <> PONUM Goto ENDSRCHPOC1
If PCT1[2] <> APH0[2] Goto SRCHPOC1
POLKEY$ = " ",POLKEY$;POLKEY$[1,6] = PONUM Using "######"
POLKEY$[7] = PCT1[1] Using "###"
Search #CH_POL,2,1;POLKEY$,REC_POL,E \ If E = 1 Goto SRCHPOC1
If E Gosub ERR_SEARCH
Gosub READ_POL
Gosub READ_POC
If POGLFLAG
  If PCT3[0] = 97 Goto SRCHPOC1
  If PCT3[0] = 98 Goto SRCHPOC1
  If PCT3[0] = 99 Goto SRCHPOC1
End If 
If PCT3[0] = 89 Goto SRCHPOC1
If PCT3[0] = 88 Goto SRCHPOC1
If PCT3[0] = 87 Goto SRCHPOC1
If PCT6[0]
  POLBS = PCT6[0];POFACT = PCT6[1]
End If 
Mat Read #CH_POC,REC_POC,24;PCT2;
Gosub UNPKFLG
If FLAGS[2] Goto SRCHPOC1
If APH2[0] <> 0 And PCT2[5] = 0 ! merch applied & not qty applied for this line
  Goto SRCHPOC1
End If 
If APH2[0] = 0 And H8[9] <> 0 ! merch=0 and merch was previously applied
  If PCT2[3] = 0 Goto SRCHPOC1
End If 
If APH2[0] ! check if merch was received on this line
  APLKEY$ = " ",APLKEY$;APLKEY$[1,26] = APHKEY$[1,26]
  APLKEY$[27,29] = PCT1[1] Using "###"
  APLKEY$[30,35] = PCT1[3] Using "######"
  Search #CH_APL,2,1;APLKEY$,REC_APL,E \ If E > 1 Gosub ERR_SEARCH
  If E = 1 Goto SRCHPOC1
  Mat Read #CH_APL,REC_APL,36;APL2;
  If Not(APL2[0]) Goto SRCHPOC1
End If 
Gosub GET_PROD
If PL0[2] And WH1[L1[1],0] = -99
  Read #CH_WH,(L1[1] - 1),122;WH1[L1[1],0];
End If 
If PL0[3] = 1 And WH1[L1[1],1] = -99
  Read #CH_WH,(L1[1] - 1),122;WH1[L1[1],1];
End If 
If WH1[L1[1],2] = -99
  Read #CH_WH,(L1[1] - 1),122;WH1[L1[1],2];
End If 
If APH2[0] = 0
  If H8[9] <> 0 ! no merch recev - previously applied ap -- going off previous
    QTY = PCT2[3]
    DISP_EXT = PCT2[4]
  Else 
    Rem no merch received and no previous ap applied going off receive qty
    QTY = PCT2[0]
    QTY = PCT2[0] + PCT5[3]
    BILL_QTY = PCT2[0]
    If L1[5] <> -2
      DISP_QTY = BILL_QTY;DISP_COST = PCT2[1] \ Gosub CALC_DISP_EXT
    Else 
      DISP_EXT = PCT2[1]
    End If 
    If PCT0
      CNVTA = PCT2[1]
      CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
      Gosub L_20000
      DISP_EXT = FNR(QTY * AMOUNT)
    End If 
  End If 
Else 
  QTY = APL2[0]
  DISP_EXT = APL2[2]
End If 
BASEUM = 0
If PCT0 Let BASEUM = -3
A[5] = POFACT;A[6] = POLBS
CNVTA[0] = QTY;CNVTU[0] = BASEUM;CNVTU[1] = L1[4];CNVTU[2] = 1 \ Gosub L_20000
DSP_QTY = AMOUNT
If PCT0
  QTY = Int(FNR((QTY / POLBS) * POFACT))
End If 
A[5] = PRODFACT;A[6] = PRODLBS
PIECE = DSP_QTY
CUBE = 0
If PL4[15]
  CUBE = FNR(QTY * (PL4[14] / PL4[15]))
End If 
If POFACT
  WEIGHT = FNR(QTY * (POLBS / POFACT))
End If 
If PL0[3] = 1 ! haz charge
  HAZ[1] = HAZ[1] + CUBE
  HAZ[2] = HAZ[2] + WEIGHT
  HAZ[3] = HAZ[3] + PIECE
  HAZ[4] = HAZ[4] + (DISP_EXT)
End If 
If PL0[2] ! apply freight flag
  FRT[1] = FRT[1] + CUBE
  FRT[2] = FRT[2] + WEIGHT
  FRT[3] = FRT[3] + PIECE
  FRT[4] = FRT[4] + (DISP_EXT)
End If 
MISC[1] = MISC[1] + CUBE
MISC[2] = MISC[2] + WEIGHT
MISC[3] = MISC[3] + PIECE
MISC[4] = MISC[4] + (DISP_EXT)
Goto SRCHPOC1
ENDSRCHPOC1: Rem end of phase 1 of search
For X2 = 1 To 99
  If FRT_DT = -99 And WH1[X2,0] <> -99 Let FRT_DT = WH1[X2,0]
  If HAZ_DT = -99 And WH1[X2,1] <> -99 Let HAZ_DT = WH1[X2,1]
  If MISC_DT = -99 And WH1[X2,2] <> -99 Let MISC_DT = WH1[X2,2]
  If FRT_DT <> -99 And WH1[X2,0] <> -99 And FRT_DT <> WH1[X2,0]
    FRT_DT = DFLT_DIST_TYPE
  End If 
  If HAZ_DT <> -99 And WH1[X2,1] <> -99 And HAZ_DT <> WH1[X2,1]
    HAZ_DT = DFLT_DIST_TYPE
  End If 
  If MISC_DT <> -99 And WH1[X2,2] <> -99 And MISC_DT <> WH1[X2,2]
    MISC_DT = DFLT_DIST_TYPE
  End If 
Next X2
If MISC_DT = -99 Let MISC_DT = 0
If FRT_DT = -99 Let FRT_DT = 0
If HAZ_DT = -99 Let HAZ_DT = 0
If DFLT_DIST_TYPE <> 0 And PO1[5] <> 0 !
  If PO1[5] = 1 Let FRT_DT = 2
  If PO1[5] = 2 Let FRT_DT = 2
  If PO1[5] = 3 Let FRT_DT = 1
  If PO1[5] = 4 Let FRT_DT = 3
End If 
DST_CHARGE = 0 \ DST_FREIGHT = 0 \ DST_HAZ = 0
If MISC[MISC_DT]
  DST_CHARGE = MISC_CHARGE / MISC[MISC_DT]
End If 
If FRT[FRT_DT]
  DST_FREIGHT = APH2[1] / FRT[FRT_DT]
End If 
If HAZ[HAZ_DT] Let DST_HAZ = HAZ_CHARGE / HAZ[HAZ_DT]
POHKEY$[1,6] = APH0[2] Using "######"
POHKEY$[7,12] = PONUM Using "######"
Search #CH_POH,2,2;POHKEY$,REC_POH,E \ If E Gosub ERR_SEARCH
Gosub READ_POH
POCKEY$ = " ",POCKEY$
POCKEY$ = PONUM Using "######"
SRCHPOC2: Rem search po to find distribution amount
Search #CH_POC,3,1;POCKEY$,REC_POC,E \ If E = 2 Goto ENDSRCHPOC2
If E Gosub ERR_SEARCH
Mat Read #CH_POC,REC_POC,0;PCT1;
If PCT1[0] <> PONUM Goto ENDSRCHPOC2
If PCT1[2] <> APH0[2] Goto SRCHPOC2
Gosub READ_POC
If POGLFLAG
  If PCT3[0] = 97 Goto SRCHPOC2
  If PCT3[0] = 98 Goto SRCHPOC2
  If PCT3[0] = 99 Goto SRCHPOC2
End If 
If PCT3[0] = 89 Goto SRCHPOC2
If PCT3[0] = 88 Goto SRCHPOC2
If PCT3[0] = 87 Goto SRCHPOC2
POLBS = PCT6[0];POFACT = PCT6[1]
POLKEY$ = " ",POLKEY$;POLKEY$[1,6] = PONUM Using "######"
POLKEY$[7] = PCT1[1] Using "###"
Search #CH_POL,2,1;POLKEY$,REC_POL,E \ If E = 1 Goto SRCHPOC2
If E Gosub ERR_SEARCH
Gosub READ_POL
Mat Read #CH_POC,REC_POC,24;PCT2;
If PCT6[0]
  POLBS = PCT6[0];POFACT = PCT6[1]
End If 
Gosub UNPKFLG
If FLAGS[2] Goto SRCHPOC2
if aph2[0] ! check if merch was received on this line
	let aplkey$=" ",aplkey$;aplkey$[1,26]=aphkey$[1,26]
	Let aplkey$[27,29]=pct1[1] using "###" ! line
	let aplkey$[30,35]=pct1[3] using "######" ! contol number
	search #ch_apl,2,1;aplkey$,rec_apl,e\if e>1 gosub err_search:
	if e=1 goto srchpoc2: ! nothing was received on this line bypass
	mat read #ch_apl,rec_apl,36;apl2;
	if not (apl2[0]) goto srchpoc2: ! nothing was applied on this line
endif
Gosub GET_PROD
If APH2[0] <> 0 And PCT2[5] = 0 ! merch applied & not qty applied for this line
  Gosub UPDATEAPLINE
  Goto SRCHPOC2
End If 
If APH2[0] = 0 And H8[9] <> 0 ! merch=0 and merch was previously applied
  If PCT2[3] = 0
    Gosub UPDATEAPLINE
    Goto SRCHPOC2
  End If 
End If 
If APH2[0] ! check if merch was received on this line
  APLKEY$ = " ",APLKEY$;APLKEY$[1,26] = APHKEY$[1,26]
  APLKEY$[27,29] = PCT1[1] Using "###"
  APLKEY$[30,35] = PCT1[3] Using "######"
  Search #CH_APL,2,1;APLKEY$,REC_APL,E \ If E > 1 Gosub ERR_SEARCH
  If E = 1 Goto SRCHPOC2
  Mat Read #CH_APL,REC_APL,36;APL2;
  If Not(APL2[0])
    Gosub UPDATEAPLINE
    Goto SRCHPOC2
  End If 
End If 
If APH2[0] = 0
  If H8[9] <> 0 ! no merch recev - previously applied ap -- going off previous
    QTY = PCT2[3]
    DISP_EXT = PCT2[4]
  Else 
    Rem no merch received and no previous ap applied going off receive qty
    QTY = PCT2[0]
    QTY = PCT2[0] + PCT5[3]
    BILL_QTY = PCT2[0]
    If L1[5] <> -2
      DISP_QTY = BILL_QTY;DISP_COST = PCT2[1] \ Gosub CALC_DISP_EXT
    Else 
      DISP_EXT = PCT2[1]
    End If 
    If PCT0
      CNVTA = PCT2[1]
      CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
      Gosub L_20000
      DISP_EXT = FNR(QTY * AMOUNT)
    End If 
  End If 
Else 
  QTY = APL2[0]
  DISP_EXT = APL2[2]
End If 
BASEUM = 0
If PCT0 Let BASEUM = -3
A[5] = POFACT;A[6] = POLBS
CNVTA[0] = QTY;CNVTU[0] = BASEUM;CNVTU[1] = L1[4];CNVTU[2] = 1 \ Gosub L_20000
DSP_QTY = AMOUNT
If PCT0
  QTY = Int(FNR((QTY / POLBS) * POFACT))
End If 
A[5] = PRODFACT;A[6] = PRODLBS
PIECE = DSP_QTY
CUBE = 0
If PL4[15]
  CUBE = FNR(QTY * (PL4[14] / PL4[15]))
End If 
If POFACT
  WEIGHT = FNR(QTY * (POLBS / POFACT))
End If 
LINE_CHRG = 0;LINE_MISC = 0;LINE_FRT = 0;LINE_HAZ = 0
If PL0[2]
  LINE_FRT = DST_FREIGHT
End If 
LINE_CHRG = DST_CHARGE
If PL0[3] = 1
  LINE_HAZ = DST_HAZ
End If 
Gosub GET_FACTOR
Gosub UPDATEAPLINE
Goto SRCHPOC2
ENDSRCHPOC2: Rem end of allocating freight on po lines
Goto OUTEND
CALC_DISP_EXT: Rem convert qty and cost to cost um, then calc ext net cost
CNVTA[0] = DISP_QTY;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 1 \ Gosub L_20000
DISP_QTY = AMOUNT
CNVTA[0] = DISP_COST;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
DISP_COST = AMOUNT
DISP_EXT = FNR(DISP_QTY * DISP_COST)
Return 
GET_FACTOR: Rem FIND FACTOR
CHARGE = 0;FRT_CHRG = 0
If PL0[2] ! if freight charge applies
  If FRT_DT = 1 And PL4[15] <> 0 !  cube
    FRT_CHRG = LINE_FRT * (PL4[14] / PL4[15])
    If L1[5] = -2 !  lot
      FRT_CHRG = LINE_FRT * QTY * CUBE
    End If 
  End If 
  If FRT_DT = 2 And POFACT <> 0 ! wt
    FRT_CHRG = LINE_FRT * (POLBS / POFACT)
    If L1[5] = -2 !  lot
      FRT_CHRG = LINE_FRT * QTY * WEIGHT
    End If 
  End If 
  If FRT_DT = 3 ! piece
    If L1[5] = -2 ! lot
      FRT_CHRG = LINE_FRT * PIECE
    Else 
      CNVTA = LINE_FRT;CNVTU[0] = L1[4];CNVTU[1] = 0;CNVTU[2] = 2 \ Gosub L_20000
      FRT_CHRG = AMOUNT
    End If 
  End If 
  If FRT_DT = 4 And (QTY <> 0) ! value
    FRT_CHRG = LINE_FRT * DISP_EXT / QTY
  End If 
End If 
If MISC_DT = 1 And PL4[15] <> 0 !  cube
  CHARGE = (LINE_CHRG) * PL4[14] / PL4[15]
  If L1[5] = -2 !  lot
    CHARGE = (LINE_CHRG) * QTY * PL4[14] / PL4[15]
  End If 
End If 
If MISC_DT = 2 And POFACT <> 0 ! weight
  CHARGE = (LINE_CHRG) * POLBS / POFACT
  If L1[5] = -2 !  lot
    CHARGE = (LINE_CHRG) * QTY * POLBS / POFACT
  End If 
End If 
If MISC_DT = 3
  If L1[5] = -2 ! lot
    CHARGE = (LINE_CHRG) * PIECE
  Else 
    CNVTA = LINE_CHRG;CNVTU[0] = L1[4];CNVTU[1] = 0;CNVTU[2] = 2
    Gosub L_20000
    CHARGE = AMOUNT
  End If 
End If 
If MISC_DT = 4 And (QTY <> 0)
  CHARGE = (LINE_CHRG) * (DISP_EXT / QTY)
End If 
TMP_CHARGE = 0
If PL0[3] = 1
  If HAZ_DT = 1 And PL4[15] <> 0 ! cube
    TMP_CHARGE = (LINE_HAZ * PL4[14] / PL4[15])
    If L1[5] = -2 !  lot
      TMP_CHARGE = (LINE_HAZ * QTY * PL4[14] / PL4[15])
    End If 
  End If 
  If HAZ_DT = 2 And POFACT <> 0 ! cwt
    TMP_CHARGE = (LINE_HAZ * POLBS / POFACT)
    If L1[5] = -2 !  lot
      TMP_CHARGE = (LINE_HAZ * QTY * POLBS / POFACT)
    End If 
  End If 
  If HAZ_DT = 3
    If L1[5] = -2 ! lot
      TMP_CHARGE = (LINE_HAZ * PIECE)
    Else 
      CNVTA = LINE_HAZ;CNVTU[0] = L1[4];CNVTU[1] = 0;CNVTU[2] = 2
      Gosub L_20000
      TMP_CHARGE = AMOUNT
    End If 
  End If 
  If HAZ_DT = 4 And (QTY <> 0)
    TMP_CHARGE = (LINE_HAZ * DIST_EXT / QTY)
  End If 
  CHARGE = CHARGE + TMP_CHARGE
End If 
LINE_MISC = CHARGE
LINE_FREIGHT = FRT_CHRG
Return 
UPDATEAPLINE: Rem update ap lines with freight/misc charge
If CHARGE
  If P60$[49,49] <> "M" And P60$[49,49] <> "B" Let CHARGE = 0
End If 
If FRT_CHRG
  If P60$[49,49] <> "F" And P60$[49,49] <> "B" And P60$[19,19] = "N" Let FRT_CHRG = 0
End If 
APLKEY$ = " ",APLKEY$;APLKEY$[1,26] = APHKEY$[1,26]
APLKEY$[27,29] = PCT1[1] Using "###"
APLKEY$[30,35] = PCT1[3] Using "######"
Search #CH_APL,2,1;APLKEY$,REC_APL,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  If CHARGE = 0 And FRT_CHRG = 0 Goto ENDUPDATEAPLINE
  For X = 0 To 2 \ APL0[X] = 0 \ Next X
  For X = 0 To 5 \ APL1[X] = 0 \ Next X
  For X = 0 To 6 \ APL2[X] = 0 \ Next X
  APL0[0] = APH0[0];APL0[1] = APH0[1];APL0[2] = PCT1[3]
  APL$[1,12] = APH$[1,12];APL1[0] = APH1[0]
  APL1[0] = INVTYPE;APL1[1] = L1[4];APL1[2] = L1[5];APL1[3] = PCT1[1]
  APL3 = PCT0;APL2[5] = POLBS;APL2[6] = POFACT
  If PCT3[0] Let APL1[4] = 1
  APL1[5] = L1[1]
  E = 2 \ Search #CH_APL,1,0;APLKEY$,REC_APL,E \ If E Gosub ERR_SEARCH
  Gosub WRITE_APPOL
  Search #CH_APL,4,1;APLKEY$,REC_APL,E \ If E Gosub ERR_SEARCH
End If 
Gosub READ_APPOL
APFRT = FRT_CHRG
If L1[5] = -1 Or L1[5] = -3
  APFRT = ((FRT_CHRG / POLBS) * POFACT)
  CHARGE = ((CHARGE / POLBS) * POFACT)
End If 
APL2[3] = APFRT;APL2[4] = CHARGE
If SRC = 513
  APL2[3] = - APL2[3];APL2[4] = - APL2[4]
End If 
If APL2[3] = 0 And APL2[4] = 0 And APL2[0] = 0 And APL2[2] = 0
  Search #CH_APL,5,1;APLKEY$,REC_APL,E \ If E Gosub ERR_SEARCH
  E = 3 \ Search #CH_APL,1,0;APLKEY$,REC_APL,E \ If E Gosub ERR_SEARCH
Else 
  Gosub WRITE_APPOL
End If 
ENDUPDATEAPLINE: Rem end update of apline
Return 
UNPKFLG: Rem UNPACK L1[3] TO FLAGS[x]
X2 = L1[3] \ For K = 0 To 11
  FLAGS[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
GET_PROD: Rem FIND PRODUCT
If Not(FLAGS[0])
  PRODKEY$ = " ",PRODKEY$
  PRODKEY$[1,12] = L1$[81,92]
  Search #CH_PROD,2,1;PRODKEY$,REC_PROD,E
  If E Return 
  Mat Read #CH_PROD,REC_PROD,0;PFA$;
  Mat Read #CH_PROD,REC_PROD,156;PFB;
  Mat Read #CH_PROD,REC_PROD,256;A;
  Mat Read #CH_PROD,REC_PROD,460;PFA1;
  Mat Read #CH_PROD,REC_PROD,512;PFU1;
  Mat Read #CH_PROD,REC_PROD,554;PFU2;
  PRODLBS = A[6];PRODFACT = A[5]
Else 
  Mat Read #CH_NSTK,L3[1];NSD$
  Mat Read #CH_NSTK,L3[1],96;NSD1
  Mat Read #CH_NSTK,L3[1],112;NSD2
  Mat Read #CH_NSTK,L3[1],132;NSD3
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  PL4[12] = NSD3[6];PL4[13] = NSD3[7];PL4[14] = NSD3[2];PL4[15] = NSD3[8]
  PFU1[8] = NSD1[5];PFU1[10] = NSD1[4];PFU1[11] = NSD1[3];PFU1[15] = NSD1[7]
  L1$[1,30] = NSD$[13,42];L1$[31,60] = NSD$[43,72];L1$[61,80] = NSD$[73,92]
  L1$[81,92] = NSD$[1,12]
  PRODLBS = PL4[12];PRODFACT = PL4[13]
End If 
Return 
READ_POH: Rem READ PO RECORD
Mat Read #CH_POH,REC_POH;H0;
Mat Read #CH_POH,REC_POH,24;H$;
Mat Read #CH_POH,REC_POH,106;H1$;
Mat Read #CH_POH,REC_POH,222;H3;
Mat Read #CH_POH,REC_POH,242;H4;
Mat Read #CH_POH,REC_POH,250;H8;
Mat Read #CH_POH,REC_POH,310;PH;
Mat Read #CH_POH,REC_POH,330;PO1;
Mat Read #CH_POH,REC_POH,350;PO3;
Return 
READ_POL: Rem read po line
Mat Read #CH_POL,REC_POL;L1;
Mat Read #CH_POL,REC_POL,12;L2;
Mat Read #CH_POL,REC_POL,24;L3;
Mat Read #CH_POL,REC_POL,66;L1$;
Mat Read #CH_POL,REC_POL,186;PL;
Mat Read #CH_POL,REC_POL,222;PL0;
Mat Read #CH_POL,REC_POL,232;PL4;
POLBS = PL4[12];POFACT = PL4[13]
Return 
READ_POC: Rem read pocontrol line
Mat Read #CH_POC,REC_POC,0;PCT1;
Mat Read #CH_POC,REC_POC,24;PCT2;
Mat Read #CH_POC,REC_POC,60;PCT3;
Mat Read #CH_POC,REC_POC,66;PCT$;
Mat Read #CH_POC,REC_POC,78;PCT4;
Mat Read #CH_POC,REC_POC,90;PCT5;
Mat Read #CH_POC,REC_POC,162;PCT6;
Mat Read #CH_POC,REC_POC,288;PCT0;
Return 
READ_APPOL: Rem read appo line file
Mat Read #CH_APL,REC_APL,0;APL0;
Mat Read #CH_APL,REC_APL,12;APL$;
Mat Read #CH_APL,REC_APL,24;APL1;
Mat Read #CH_APL,REC_APL,36;APL2;
Mat Read #CH_APL,REC_APL,78;APL3
Return 
WRITE_APPOL: Rem write appo line file
Mat Write #CH_APL,REC_APL,0;APL0
Mat Write #CH_APL,REC_APL,12;APL$
Mat Write #CH_APL,REC_APL,24;APL1
Mat Write #CH_APL,REC_APL,36;APL2;
Mat Write #CH_APL,REC_APL,78;APL3;
Return 
READ_APPOH: Rem read appo head file
Mat Read #CH_APH,REC_APH,0;APH0;
Mat Read #CH_APH,REC_APH,12;APH$;
Mat Read #CH_APH,REC_APH,24;APH1;
Mat Read #CH_APH,REC_APH,30;APH2;
Mat Read #CH_APH,REC_APH,48;APH3;
Mat Read #CH_APH,REC_APH,58;APH4;
Return 
CHECKAPLINES: Rem not charges check if ap lines exist with charges
APLKEY$ = " ",APLKEY$;APLKEY$[1,26] = APHKEY$[1,26]
SRCHAPLINES: Rem start search for lines
Search #CH_APL,3,1;APLKEY$,REC_APL,E \ If E = 2 Goto ENDCHECKAPLINES
If E Gosub ERR_SEARCH
If APLKEY$[1,26] <> APHKEY$[1,26] Goto ENDCHECKAPLINES
Gosub READ_APPOL
If APL2[3] = 0 And APL2[4] = 0 Goto SRCHAPLINES
APL2[3] = 0;APL2[4] = 0
If APL2[0] = 0 And APL2[2] = 0 ! not qty no amt delete line
  Search #CH_APL,5,1;APLKEY$,REC_APL,E \ If E Gosub ERR_SEARCH
  E = 3 \ Search #CH_APL,1,0;APLKEY$,REC_APL,E \ If E Gosub ERR_SEARCH
End If 
Goto SRCHAPLINES
ENDCHECKAPLINES: Rem end check for no freight/no misc charge
GOTO OUTEND:
!!!!! 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: !If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 




ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End


OUTEND: Rem EXIT
if not (ch_ap[20]) ! cntrl file   
        Try Close #ctlc Else Rem  
endif                             
if not(Ch_ap[0]) ! appoh file     
        Try CLose #ch_aph Else Rem
endif                             
if not(ch_ap[1])                  
        Try Close #ch_apl Else Rem
endif                             
if not(Ch_ap[2])                  
        Try Close #ch_poc Else Rem
endif                             
if not (ch_ap[3]) ! purchase order
        Try Close #ch_poh Else Rem
endif                             
if not (ch_ap[4]) ! po lines #9   
        Try Close #ch_pol Else Rem
endif   
if not (ch_ap[9]) ! product file #3  
          Try Close #Ch_Prod Else Rem
endif                                
If not (ch_ap[10]) ! warehouse file #
         Try Close #Ch_Wh Else Rem   
endif                                
if not(ch_ap[11]) ! pomisc           
        Try Close #ch_misc Else Rem  
endif                                
if not (ch_ap[12]) !  nonstock #14   
        Try Close #ch_nstk Else Rem  
endif                                
!End 
!Stop 
ELSE
!
include "src/callmainerrnet.inc"
end try
end