! >>> Program 346
!
! description RASL PO NO PRIMARY
!
! loadsave -w -n 100,10 -o prog/dxport/348.dl4 src/348.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem mx348
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY  5, 2009  14:37:01
Rem /w2/papermaster/r2005//usr/acct/jliu/work/custom/acme.r9/mx348.src (univ2) [jliu] {49762}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare Intrinsic Sub DateToJulian,InpBuf,Logic,String,Time
!Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP

Dim 1%,PFU1[20],CNVTU[9]
Dim 3%,PFU2[6],CNVTA[4],A[33]
Dim TITLE$[60],SYSDATE$[22],COMP$[30],PRT_LINE$[132],PO_KEY$[8],POL_KEY$[10]
Dim PROD_KEY$[12],A$[156],PL_KEY$[20],P9$[50],L1$[120]
Dim U5$[50],X$[50],DATE$[8],K6$[36],K7$[50],M1$[14],PLOC$[18]
Dim 1%,L1[5],NS_FLAG,MSGL_FLAG,H4[3],PL1[1]
Dim 2%,PAGE_NO,LINE_NO,H0[5],M1[1]
Dim 2%,I,D9[20],MAXWHSE,WH,PROD_REC,PL_REC,PO_REC
Dim 3%,P3[4],POL_REC
Dim 4%,J1
Dim J$[75],J0$[12],J1$[75],J4$[75],J5$[75]
Dim E$[500],Rstr$[2000],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128]
B$=" ",B$
!call dxopen() ! NEEDS FOR DXTEST RUN!!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!Window On 
OPEN_FILES: Rem
For I = 2 To 8
  Read J1
  If J1 And J1 <> -1
    Read #1,88,Abs(J1);J4$[1,16];
    If J1 > 0 Open #I,J4$
    If J1 < 0 Ropen #I,J4$
  End If 
Next I
Data "-208","-1792","-2416","-2432","-2352","-2528","-1728"

If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 59 \ If J8 Let J9 = 21
Mat Read #1,19,50;P9$;
!If P9$[41,41] = "N"
!  Print @0,23;'CL RB';"RASL not enabled.  Continue (Y/<CR>)? ";
!  Input ""J4$
!  Call String(1,J4$)
!  If J4$ <> "Y" Goto OUTEND
!End If 
Read #1,3,0;COMP$;
TCOMP: If COMP$[Len(COMP$)] = " " Let COMP$ = COMP$[1,Len(COMP$) - 1] \ Goto TCOMP
!Gosub DISPLAY_SCREEN_PROMPTS
!Goto EDT_ALL
!Goto INPUTS

EDT_ALL: Rem "want's all
For X = 1 To 2
  Gosub EDT_FLDS
Next X
Goto INPUTS
EDT_FLDS: Rem "edit them here
On X Gosub EDT_WHSE,EDT_DATE
Return 
EDT_WHSE: Rem
Gosub DETERMINE_MAX_WH
Gosub GET_WH
Return 
EDT_DATE: Rem"after certain date
! Print @21,7;'CL';
Gosub CDATE
Gosub PDATE
CURDATE = X2
J1 = CURDATE
DATE$ = CURDATE Using "&&&&&&"
J1$ = DATE$[3,6] + DATE$[1,2]
!J5$ = "Please Enter the Date MMDDYY or A for all "
!J0$ = "2000062107"
!Call "INPUT",J1,J$,J0$,J1$,J4$,J5$
call dxget("CDATE",tmp$) \ if rtrim$(tmp$)="" let tmp$="A"
J$=tmp$
X2 = 0
If J$[1,1] = "A" Or J$[1,1] = "a"
  JDATE = 0
  !Print @21,7;"ALL      ";
  Return 
End If 
DATE$ = J$[5,6] + J$[1,4]
J1 = DATE$
If J1 Let X2 = J1 \ Gosub L_7820 \ Let E=E ! Goto EDT_DATE
If E
	message$="INVALID DATE"
	goto ERR_MSG
Endif
JDATE = X2
DATE$ = J1 Using "&&&&&&"
!Print @21,7;DATE$[3,4];"/";DATE$[5,6];"/";DATE$[1,2]
Return 
INPUTS: Rem
!Print @0,23;'CE';"Enter #:field to edit R: reselect all P: process or E: exit ";
!Input Len 16384 + 3;""X$ \ Call String(1,X$)
!Print @0,23;'CE';
If X$ = "P" Goto L_1450
!If X$ = "E" Goto OUTEND
!If X$ = "R" Goto EDT_ALL
!If X$ = "" Goto INPUTS
!X = X$
!If X < 1 Or X > 2 Goto INPUTS
!Gosub EDT_FLDS
!Goto INPUTS
L_1450: Rem
Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
PRT_LINE$ = "=",PRT_LINE$
PAGE_NO = 0
LINE_NO = 999
Gosub CHECK_POS
PAGE_NO = 0
LINE_NO = 999
If Not(J8) Print #0;"\14\";
Gosub CHK_POS2
!If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OutEnd

DISPLAY_SCREEN_PROMPTS: Rem
!Call Time(SYSDATE$)
!Print 'CS';@0,0;"-mx348-"
!Print @40 - (Len(COMP$) / 2),0;'BR';COMP$;'ER';
!Print @58,0;SYSDATE$
!Print @0,1;"----------------------------------------";
!Print "----------------------------------------";
!TITLE$ = "PRODUCTS ON PURCHASE ORDERS WITH NO PRIMARY LOCATION"
!Print @40 - (Len(TITLE$) / 2),2;TITLE$;
!Print @0,3;"----------------------------------------";
!Print "----------------------------------------";
!Print @3,5;"1> WAREHOUSE...."
!Print @3,7;"2> DUE DATE....."
Return 
DETERMINE_MAX_WH: Rem
Mat Read #1,115;D9;
MAXWHSE = D9[5] \ If MAXWHSE = 99 Let MAXWHSE = 98
Read #1,60,16;WH;
If WH Let MAXWHSE = WH - 1
Return 
GET_WH: Rem
!J0$ = "3002022005E"
!J1 = 0
!J5$ = "Enter wharehouse, 0: All warehouses."
!Call "INPUT",J1,J$,J0$,J1$,J4$,J5$
!If J4$ = "E" Return 
call dxget("WHSE",tmp$) \ if rtrim$(tmp$)="" let tmp$="0"
J1=tmp$
If J1 > MAXWHSE
  Message$ = "Highest warehouse number available is ",MAXWHSE Using "##","!"
  !Call "errmsg",J4$
  Goto ERR_MSG ! GET_WH
End If 
WH = J1
Return 
CHECK_POS: Rem ! part 1 start
If Err 0 Gosub ERR_TRAP
If J2 If Not(J8) Print #0;"\14\";
!Print @0,23;'CL';"Printing...";
!If J8 Print 'CS';
PO_KEY$ = " ",PO_KEY$
PO_LOOP: Rem
Search #4,3,1;PO_KEY$,PO_REC,E \ If E > 2 Gosub ERR_SEARCH
If E Or Val(PO_KEY$[1,2]) > 6 Goto END_PO_LOOP
Mat Read #4,PO_REC;H0;
Mat Read #4,PO_REC,242;H4;
If H4[0] <> 0 And H4[0] <> 4 Goto PO_LOOP
X2 = H0[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JDATE If JWDATE <> JDATE Goto PO_LOOP
POL_KEY$ = PO_KEY$[3,8]
POL_LOOP: Rem* loop through all the lines and check locations
Search #5,3,1;POL_KEY$,POL_REC,E
If E > 2 Gosub ERR_SEARCH
If E Or POL_KEY$[1,6] <> PO_KEY$[3,8] Goto END_POL_LOOP
Mat Read #5,POL_REC,0;L1;
Call Logic(1,L1[3],1,NS_FLAG)
Call Logic(1,L1[3],4,MSGL_FLAG)
If L1[0] = 3 Or NS_FLAG Or MSGL_FLAG Goto POL_LOOP
If (WH And L1[1] <> WH) Or L1[1] > MAXWHSE Goto POL_LOOP
Mat Read #5,POL_REC,66;L1$;
PL_KEY$ = L1$[81,92],L1[1] Using "##"
Search #2,3,1;PL_KEY$,PL_REC,E
If E > 2 Gosub ERR_SEARCH
If E Or PL_KEY$[1,12] <> L1$[81,92] Or Val(PL_KEY$[13,14]) <> L1[1]
  PROD_KEY$ = L1$[81,92]
  Search #3,2,1;PROD_KEY$,PROD_REC,E
  Rem IF E GOSUB ERR_SEARCH:
  If E = 0
    Mat Read #3,PROD_REC,0;A$;
  Else 
    Rem INVALID PRODUCTS THAT COULD HAVE BEEN DELETED YEARS AGO-WMB
    A$ = " ",A$
    A$[9,38] = "****INVALID PRODUCT CODE******"
  End If 
  Gosub PRINT_LINE
End If 
Goto POL_LOOP
END_POL_LOOP: Rem
Goto PO_LOOP
END_PO_LOOP: Rem
Return 
CHK_POS2: Rem Part 2 start
If Err 0 Gosub ERR_TRAP
If J2 If Not(J8) Print #0;"\14\";
!Print @0,23;'CL';"Printing...";
!If J8 Print 'CS';
PO_KEY$ = " ",PO_KEY$
PO_LOOP2: Rem
Search #4,3,1;PO_KEY$,PO_REC,E \ If E > 2 Gosub ERR_SEARCH
If E Or Val(PO_KEY$[1,2]) > 6 Goto END_PO_LOOP2
Mat Read #4,PO_REC;H0;
Mat Read #4,PO_REC,242;H4;
If H4[0] <> 0 And H4[0] <> 4 Goto PO_LOOP2
X2 = H0[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JDATE If JWDATE <> JDATE Goto PO_LOOP2
POL_KEY$ = PO_KEY$[3,8]
POL_LOOP2: Rem* loop through all the lines and check locations
Search #5,3,1;POL_KEY$,POL_REC,E
If E > 2 Gosub ERR_SEARCH
If E Or POL_KEY$[1,6] <> PO_KEY$[3,8] Goto END_POL_LOOP2
Mat Read #5,POL_REC,0;L1;
Call Logic(1,L1[3],1,NS_FLAG)
Call Logic(1,L1[3],4,MSGL_FLAG)
If L1[0] = 3 Or NS_FLAG Or MSGL_FLAG Goto POL_LOOP2
If (WH And L1[1] <> WH) Or L1[1] > MAXWHSE Goto POL_LOOP2
Mat Read #5,POL_REC,66;L1$;
Gosub CHK_ALTITEM
If ALTFLAG Goto POL_LOOP2
PLOC$ = " ",PLOC$
PROD_KEY$ = L1$[81,92]
Search #3,2,1;PROD_KEY$,PROD_REC,E
If E = 0
  Mat Read #3,PROD_REC,0;A$;
  Mat Read #3,PROD_REC,256;A;
  Mat Read #3,PROD_REC,512;PFU1;
  Mat Read #3,PROD_REC,554;PFU2;
Else 
  A$ = " ",A$
  A$[9,38] = "****INVALID PRODUCT CODE******"
End If 
Gosub CHK_PRODLOC
Gosub GET_AVLQTY
Gosub PRINT_LINE2
Goto POL_LOOP2
END_POL_LOOP2: Rem
Goto PO_LOOP2
END_PO_LOOP2: Rem
Return 
PRINT_HEADING: Rem
!If PAGE_NO If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If PAGE_NO If Not(J8) Print #0;"\14\";
PAGE_NO = PAGE_NO + 1
If Not(J8) Print #0;"\15\";
Print #0;SYSDATE$; Tab (Int(66 - (Len(COMP$) / 2)));COMP$;
Print #0; Tab (114);"mx348 - PAGE: ";PAGE_NO Using "####"
Print #0; Tab (36);"PRODUCTS ON PURCHASE ORDERS WITHOUT PRIMARY LOCATIONS"
Print #0;PRT_LINE$
Print #0;"PO #"; Tab (8);"LINE"; Tab (14);"WH"; Tab (18);
Print #0;"VENDOR SKU"; Tab (40);"PRODUCT"; Tab (54);"DESCRIPTION"
Print #0;PRT_LINE$
LINE_NO = 6
Return 
PRINT_HEADING2: Rem
!If PAGE_NO If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If PAGE_NO If Not(J8) Print #0;"\14\";
PAGE_NO = PAGE_NO + 1
If Not(J8) Print #0;"\15\";
Print #0;SYSDATE$; Tab (Int(66 - (Len(COMP$) / 2)));COMP$;
Print #0; Tab (114);"mx348 - PAGE: ";PAGE_NO Using "####"
Print #0; Tab (36);"PRODUCTS ON PURCHASE ORDERS WITHOUT UPC ALT ITEM CODE"
Print #0;PRT_LINE$
Print #0; Tab 0;"PRODUCT"; Tab 13;"DESCRIPTION";
Print #0; Tab 76;"VEND ITEM#";
Print #0; Tab 98;"PRIMARY LOC";
Print #0; Tab 112;"QTY"
Print #0;PRT_LINE$
LINE_NO = 6
Return 
PRINT_LINE: Rem
If LINE_NO > J9 Gosub PRINT_HEADING
Print #0;PO_KEY$[3,8]; Tab (8);POL_KEY$[7,9]; Tab (14);L1[1] Using "##";
Print #0; Tab (18);L1$[61,80]; Tab (40);L1$[81,92]; Tab (54);
Print #0;A$[9,38];" ";A$[63,92]
LINE_NO = LINE_NO + 1
Return 
PRINT_LINE2: Rem
If LINE_NO > J9 Gosub PRINT_HEADING2
Print #0; Tab 0;L1$[81,92]; Tab 13;A$[9,38];" ";A$[63,92];
Print #0; Tab 76;L1$[61,80]; Tab 98;PLOC$[13,18];" ";
If PLOC$[13,16] <> "    " And PLOC$[13,13] <> ""
  Print #0; Using "---######";P3[0] - P3[1] - P3[3];" ";M1$[1,4];
End If 
Print #0;""
LINE_NO = LINE_NO + 1
Return 
CDATE: Rem current date
U5$ = ""
J4$ = "JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC"
Call Time(U5$)
For K1 = 1 To 12
  If U5$[1,3] = J4$[K1 * 3 - 2,K1 * 3] Goto GET_X
Next K1
! Print "\15\DATE ERROR - STOP AT ";Spc(9) \ Stop 
GET_X: Rem
X$ = "/",X$
X$[1,2] = K1 Using "##"
X$[4,5] = U5$[5,6]
X$[7,8] = U5$[11,12]
For K1 = 1 To 8
  If X$[K1,K1] = " " Let X$[K1,K1] = "0"
Next K1
Return 
PDATE: Rem
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
if x2<=0 let e=1 \ return
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
CHK_ALTITEM: Rem
ALTFLAG = 0
K6$ = " ",K6$ \ K6$ = L1$[81,92];K6$[13] = ""
GET_ALT_CODE: Rem
Search #6,3,2;K6$,R6,E \ If E = 2 Return 
If E Gosub ERR_SEARCH
If K6$[1,12] <> L1$[81,92] Return 
Mat Read #6,R6,4;M1;
If Not(M1[1]) Goto GET_ALT_CODE
ALTFLAG = 1
Return 
CHK_PRODLOC: Rem
PL_KEY$ = L1$[81,92],L1[1] Using "##"
GET_LOCATION: Rem
Search #2,3,1;PL_KEY$,PL_REC,E
PLOC$ = " ",PLOC$
If E = 2 Goto END_GET_LOCATION
If E Gosub ERR_SEARCH
If PL_KEY$[1,12] <> L1$[81,92] Goto END_GET_LOCATION
WHSENO = PL_KEY$[13,14]
If WHSENO <> L1[1] Goto GET_LOCATION
Mat Read #2,PL_REC,0;PLOC$;
Mat Read #2,PL_REC,18;PL1;
If PL1[1] <> 1 Goto GET_LOCATION
END_GET_LOCATION: Rem
Return 
GET_AVLQTY: Rem
P3[0] = 0 \ P3[1] = 0 \ P3[3] = 0 \ P3[4] = 0
K7$ = " ",K7$
K7$[1,12] = L1$[81,92]
K7$[13,14] = L1[1] Using "##"
PRODLOT_LOOP: Rem
Search #7,3,4;K7$,R7,E
If E > 2 Gosub ERR_SEARCH
If K7$[1,12] <> L1$[81,92] Goto END_PRODLOT
WHSENO = K7$[13,14]
If WHSENO <> L1[1] Goto PRODLOT_LOOP
If K7$[37,42] <> PLOC$[13,18] Goto PRODLOT_LOOP
Mat Read #7,R7,82;P3;
END_PRODLOT: Rem
X1 = L1[4] \ Gosub L_4300
CNVTA = P3[0] \ CNVTU[0] = 0
CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ P3 = X3
CNVTA = P3[1] \ CNVTU[0] = 0
CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ P3[1] = X3
CNVTA = P3[3] \ CNVTU[0] = 0
CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ P3[3] = X3
CNVTA = P3[4] \ CNVTU[0] = 0
CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ P3[4] = X3
Return 
L_4200: Rem CALL CONV
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
L_4300: Rem GET UNITS
If X1 = -1 Let M1$ = "CWT " \ Goto L_4330
If X1 = -2 Let M1$ = "LOT " \ Goto L_4330
If X1 = -3 Let M1$ = "LB  " \ Goto L_4330
If X1 Read #8,X1,10;M1$;
L_4330: Return
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
call programdump("tmp/poc348se!","")
Error 11000
End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$

	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)

End
OUTEND: Rem
!Gosub CLOSE_FILES
!Chain "mx000"
End 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End