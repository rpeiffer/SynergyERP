! >>> Program 393b
!
! description 393b - BUYER DEMAND DAYS REVIEW REPORT
! loadsave -w -n 100,10 -o prog/dxport/393b.dl4 src/393b.src
!
! 1.0 mm/dd/yyyy change??
!
!task#13460/cct#237450 create new buyer report that selects products where quantity available is less than or equal to demand per day times user entered number of days. 
! -------------------------CUSTOM CODE FOR GENERAL PAPER GOODS  ---------------------------------------------------
! 02/08/16 vst task26710 - added 'custom_customer$' code to standard 
!						 - if custom_customer$="GPG" print out the product's "ABCD" classification (U3$[1,2]) 
!							 right before the description in brackets.
! --------------------------------------------------------------------------------------------

include "src/copyright.inc" ! dx

!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub FormatDate
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Sub UTMonths
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
External Lib "libprice.lib"       
Declare External Sub SysPriceCalc 
External Lib "librebates.lib"  
Declare External Sub rebates   

!
!!Option Default Dialect IRIS1
Try 

Rem BEDIT Version: 2.3 OBJECT CODE     Created: MAR 29, 2012  16:30:54
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/po393b.src (univ2) [mary] {31030}
Rem  Copyright (c) 2012 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,Logic,String
Option Default Dialect IRIS1
Rem PO393b  Buyer Demand Days Review  - Sort by Buyer/Vendor/Product
Rem Converted to bedit on  04/30/1996
Rem LAST UPDATE  roman 02/09/1993. check do-not-reorder flag cct #48631
Com 1%,PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10]
!If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],X$[40]
Dim U9$[131],Y$[80],K16$[60],W1$[32],K3$[12]
Dim U5$[50],K1$[50],D8$[12],F$[16],V$[20],LINE_$[130]
Dim P9$[50],KTR$[50],K12$[50],SPROD$[12],EPROD$[12]
Dim S1$[12],S2$[12],K9$[60],VEND$[30],K5$[60],KEYPROD$[14],K4$[30]
Dim D$[156],CNAME$[30],SUNIT$[4],UNIT$[10],K2$[50],BUYER$[30]
DIM custom_customer$[30],U3$[60]
Dim 1%,F,T1[1],H4,W0[3],L1[5],ORD_L3[3],ORD_UN[2],W1[2],ARMONTH,POMISC[2]
Dim 2%,X2,W2[9],B[24],D9[5],L2[2],ORD_H0[12],ORD_H5[16],ORD_L2[2],ORD_L4[3]
Dim 2%,ORD_L6[5],Q4,Q8
Dim 2%,W7[14],H0[5]
Dim 2%,BDAYS[24]
Dim 3%,Q2,Q3,AMOUNT,PLP3[4],QTYBO,L3[6],ORD_L7[12],ORD_S3[17],ORD_OLM[6]
Dim 3%,J,X1,W3[24],W5[25],A1[7],PL4[19]
Dim 3%,PROD_REC,QTYBO,TRANSIN_QTY,WHMISC2[7],PARM[5]
DIM DLOG$[50],DBLOG$[50]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
!!! check this
Dim b$[200]!

!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!

COID = intCO ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)

! printer or browser
j8 = 0
If Err 0 Let j8 = Spc(8)
try
	J9 = Chf(0) 
else
	let j8=99
end try
!If Err 0 Gosub ERR_TRAP
l9 = 60;p = 0;SCRN = 0 ! page len/lines/scrn 
for ctr=1 to 99
	If ctr<>9
		Try Close #ctr Else Rem
	endif
next ctr
COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1

! ====================================" task26710 - added get "custom_customer$" 
mat read #1,115,60;custom_customer$; ! ALT
custom_customer$=RTrim$(UCase$(custom_customer$))

Def FNR(X) = Sgn(X) * (Int((Abs(X) * 100) + .5) / 100)
Def FNU(X) = Int(Abs(X) + Sgn(Fra(Abs(X)))) * Sgn(X)
For K1 = 3 To 20
  Read J \ If J = -1 Goto NXTFLE
  Read #1,88,J;F$;
  Ropen #K1,F$
NXTFLE: Next K1
Data "1792","2432","2400","1808","1728","2416","-1","2448","2464"
Data "-1","-1","2480","2512","2336","2528","1744","1888","1840"
Ropen #85,"2/BUYERS"
Read #1,3;CNAME$;
Mat Read #1,115;D9;
Mat Read #1,19,50;P9$;
Read #1,0,120;ARMONTH;
Mat Read #1,11,0;BDAYS;
MTHDAYS = BDAYS[ARMONTH]
If MTHDAYS <= 0 Let MTHDAYS = 21
U5$ = Msc$(3)
LINE_$ = "-",LINE_$
D8$ = U5$[1,12]
!

SWHSE = 0
EWHSE = 99
SBUYER = 0
EBUYER = 999
SVENDOR = 0
EVENDOR = 999999
SPROD$[1,12] = "            "
EPROD$[1,12] = "zzzzzzzzzzzz"
NUMDAY = 0
UNIT = 1
! dxgets
! Warehouse Range
call dxget("swhse",tmp$) \swhse=tmp$ ! starting whse
Call dxget("ewhse",tmp$)
if rtrim$(tmp$)=""
	let ewhse=99
else
	let ewhse=tmp$ ! ending whse
endif
if swhse>ewhse
	let message$=message$+"Ending Warehouse must be greater than Starting. "
	let eflag=eflag+1
endif
! buyer range 
call dxget("sbuyer",tmp$) \sbuyer=tmp$ ! starting buyer
Call dxget("ebuyer",tmp$)
if rtrim$(tmp$)=""
	let ebuyer=999
else
	let ebuyer=tmp$ 
endif
if sbuyer>ebuyer
	let message$=message$+"Ending Buyer must be greater than Starting. "
	let eflag=eflag+1
endif
! vendor
call dxget("svend",tmp$) \svendor=tmp$
Call dxget("evend",tmp$)
if rtrim$(tmp$)=""
	let evendor=999999
else
	let evendor=tmp$ ! ending customer
endif
if svendor>evendor
	let message$=message$+"Ending Vendor must be greater than Starting. "
	let eflag=eflag+1
endif
!!PRODUCT RANGE
call dxget("SPROD",tmp$)
let sprod$=ucase$(rtrim$(tmp$))+"            "
call dxget("EPROD",tmp$)
If tmp$ = ""
	Let eprod$ ="z",eprod$
else
	let eprod$=ucase$(rtrim$(tmp$))+"zzzzzzzzzzzz"
endif
if sprod$>eprod$
	let message$=message$+"Ending Product must be greater than Starting. "
	let eflag=eflag+1
endif

! demand days
NUMDAY=0
Call dxget("NUMDAY",tmp$)
if rtrim$(tmp$)<>"" 
	LET NUMDAY=TMP$
endif
if numday<0
	let message$=message$+"Number of Days may not be less than Zero. "
	let eflag=eflag+1
endif
! unit of measure for cost
let unit=1 ! default to stocking
Call dxget("UNIT",tmp$)
if rtrim$(tmp$)<>"" 
	LET unit=TMP$
endif
if unit<1 or unit>5
	let message$=message$+"Invalid Unit of Measure. "
	let eflag=eflag+1
endif

If j8<>0 ! browser
	! reserve for browser option 
	 tmp$="",fdel$,"",fdel$
	 tmp$=tmp$,rdel$
	Call addtostr(e$,rstr$,tmp$)
Endif
if eflag<>0 
	goto outend: ! errors have occured
endif

U5$ = " ",U5$
If UNIT = 1 Let U5$ = "IN STOCKING UNITS "
If UNIT = 2 Let U5$ = "IN SELLING UNITS "
If UNIT = 3 Let U5$ = "IN PURCHASING UNITS "
If UNIT = 4 Let U5$ = "IN COSTING UNITS "
If UNIT = 5 Let U5$ = "IN PRICING UNITS "
If UNIT = 6 Let U5$ = "IN PRODUCTION UNITS "
UNIT = UNIT + 7
!


STRTSORT: Rem SORT BY BUYER/VENDOR/PROD
K9$ = " ",K9$
CLRSORT_LOOP: Rem "Clear sort file
Search #9,3,1;K9$,R1,E \ If E = 2 Goto CLRSORT_DONE
If E Gosub ERR_SEARCH
Search #9,5,1;K9$,R1,E \ If E Gosub ERR_SEARCH
Goto CLRSORT_LOOP
CLRSORT_DONE: Rem "okay now sort
K1$ = " ",K1$
PCTR = 0
K1$[1,12] = SPROD$[1,12]
Search #3,2,1;K1$,R1,E
If Not(E) Goto GET_PROD
PRODFLE_LOOP: Rem "thru Product File
Search #3,3,1;K1$,R1,E \ If E = 2 Goto SORT_DONE
If E Gosub ERR_SEARCH
GET_PROD: Rem
Mat Read #3,R1;D$;
Mat Read #3,R1,256;A;
Mat Read #3,R1,156;B;
Mat Read #3,R1,512;PFU1;
Mat Read #3,R1,554;PFU2;
If K1$[1,12] < SPROD$[1,12] Goto PRODFLE_LOOP
If K1$[1,12] > EPROD$[1,12] Goto SORT_DONE
K2$ = D$[140,151] \ K2$[13] = 0 Using "##"
PRODWHSE_LOOP: Rem whse loop
For X = 0 To 9 \ W2[X] = 0 \ Next X
For X = 0 To 2 \ W1[X] = 0 \ Next X
For X = 0 To 24 \ W3[X] = 0 \ Next X
Search #18,3,1;K2$,R8,E \ If E = 2 Goto PRODFLE_LOOP
WHSE = K2$[13,14]
If K2$[1,12] <> D$[140,151] Goto PRODFLE_LOOP
If WHSE < SWHSE Goto PRODWHSE_LOOP
If WHSE > EWHSE Goto PRODFLE_LOOP
Gosub READ_PRDWHSE
If W0[0] Goto PRODWHSE_LOOP
If Not(W2[3]) Let W2[3] = B[24]
If W2[3] < SVENDOR Or W2[3] > EVENDOR Goto PRODWHSE_LOOP
If W1[2] < SBUYER Or W1[2] > EBUYER Goto PRODWHSE_LOOP
Gosub CONVERT_STUFF
DMNDDAY = FNR(W3[9] / MTHDAYS)
If Not(DMNDDAY) Goto PRODWHSE_LOOP
If TOTAV > DMNDDAY * NUMDAY Goto PRODWHSE_LOOP
K9$ = " ",K9$
K9$[1,3] = W1[2] Using "###"
K9$[4,9] = W2[3] Using "######"
K9$[10,21] = K1$[1,12]
K9$[22,23] = WHSE Using "##"
Search #9,4,1;K9$,R8,E \ If E Gosub ERR_SEARCH
Goto PRODWHSE_LOOP
SORT_DONE: Rem Sort Done! BEGIN
L = 99 \ P = 0
K1$ = " ",K1$
BUYER = -999
SORTFLE_LOOP: Rem "Loop thru Sorted Info
Search #9,3,1;K1$,R8,E \ If E = 2 Goto SRTLOOP_DONE
If E Gosub ERR_SEARCH
X2 = K1$[1,3] \ If X2 <> BUYER Let L = 9999 \ BUYER = X2
For X = 0 To 9 \ W2[X] = 0 \ Next X
For X = 0 To 2 \ W1[X] = 0 \ Next X
For X = 0 To 24 \ W3[X] = 0 \ Next X
K2$ = K1$[10,21] \ K2$[13,14] = K1$[22,23]
Search #18,2,1;K2$,R8,E
If E Goto SORTFLE_LOOP
Gosub READ_PRDWHSE
Gosub READ_PROD
Gosub CONVERT_STUFF
DMNDDAY = FNR(W3[9] / MTHDAYS)
Gosub PRNT_HEDNG
Gosub PRNT_DETL
Goto SORTFLE_LOOP

PRNT_DETL: Rem PRINT LINE
let totrec=totrec+1
Gosub GET_BUYER
Gosub GET_VENDOR
Print #0; Using "###"; Tab 1;W1[2];
Print #0;"/";
Print #0;BUYER$[1,30];
Print #0; Tab 38;D$[140,151];
IF CUSTOM_CUSTOMER$="GPG"
	PRINT #0; TAB 52;"[";U3$[1,2];"]";TAB 57;D$[9,33];   ! "TASK26710
ELSE
	PRINT #0; TAB 52;D$[9,38];   !"desc1
ENDIF
Print #0; Using "-----#.##"; Tab 83;DMNDDAY;
Print #0; Using "-------#.##"; Tab 93;DMNDDAY * NUMDAY;
Print #0; Using "-------#.##"; Tab 104;TOTAV;
Print #0; Using "-------#.##"; Tab 116;W3[1];
Print #0; Tab 128;K1$[22,23]
Print #0; Using "######"; Tab 1;W2[3];
Print #0;"/";
Print #0;VEND$[1,30];
Print #0; Tab 52;D$[63,92];
Print #0; Tab 110;SUNIT$[1,4];
Print #0;" "
Print #0;" "
L = L + 3
Gosub DISP_POINFO
Return 
DISP_POINFO: Rem
K4$ = " ",K4$
K4$ = R3 Using "######"
K4$[7] = ""
POLINE_LOOP: Rem
Search #4,3,2;K4$,R4,E \ If E > 2 Gosub ERR_SEARCH
SCR = Val(K4$[1,6])
If Not(E) And R3 = SCR
  Mat Read #4,R4;L1;
  Mat Read #4,R4,232;PL4;
  Mat Read #4,R4,12;L2;
  Mat Read #4,R4,24;L3;
  Mat Read #4,R4,376;POMISC;
  Call Logic(1,2 ^ 0,L1[3],X1)
  If X1 Goto POLINE_LOOP
  If L1[0] = 3 Goto POLINE_LOOP
  WHS = K1$[22,23]
  If WHS <> L1[1] Goto POLINE_LOOP
  If L1 > 5 Goto POLINE_LOOP
  If (L3[3]) >= L3[2] Goto POLINE_LOOP
  S2 = K4$[7,12]
  Mat Read #8,L3[0];H0;
  If S2 <> H0[2] Goto POLINE_LOOP
  If H0[0] >= 7 And H0[0] < 91 Goto POLINE_LOOP
  If Not(POMISC[0]) Goto POLINE_LOOP
  Gosub PRNT_HEDNG
  Print #0; Tab 106;"PO ";
  Print #0; Using "######";H0[2];
  X2 = L2[2] \ Gosub L_7700
  Print #0;" ";X$;
  Print #0;" "
  L = L + 1
  Goto POLINE_LOOP
End If 
Return 
PRNT_HEDNG: Rem HEADING ROUTINE
L = L + 1
If L < L9 Return 
If P <> 0
    Print #0;"\14\";
End If 
P = P + 1
Print #0;" - 393B - ";Msc$(3); Tab 52;CNAME$;
Print #0; Tab 85;"SORTING BY BUYER/VENDOR/PROD"
Print #0; Tab 50;"BUYER DEMAND DAYS REVIEW REPORT";
Print #0; Tab 100;"PAGE ";
Print #0; Using "###";P
Print #0;LINE_$[1,130]
Print #0; Tab 94;"DEMAND QTY"
Print #0; Tab 1;"BUYER #/BUYER NAME";
Print #0; Tab 85;"DEMAND"; Tab 94;"DAY/X"; Tab 106;"QTY AVAIL"; Tab 120;"ON PO"
Print #0; Tab 1;"VENDOR #/VENDOR NAME"; Tab 38;"PROD CODE";
IF CUSTOM_CUSTOMER$="GPG"
	print #0; TAB 57;"PROD DESC1";tab 85;"QTY/DAY";TAB 94;"DEMAND DAY"; 
ELSE
	print #0; TAB 52;"PROD DESC1";tab 85;"QTY/DAY";TAB 94;"DEMAND DAY"; 
ENDIF
Print #0; Tab 106;"STOCK U/M"; Tab 127;"WHSE"
Print #0;LINE_$[1,130]
L = 7
Return 
GET_VENDOR: Rem READ VENDOR
K5$ = " ",K5$
K5$ = W2[3] Using "######"
Search #5,2,1;K5$,R5,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #5,R5,0;VEND$;
Else 
  VEND$ = " ",VEND$;VEND$ = "NOT ON FILE"
End If 
Return 
GET_BUYER: Rem
BUYER$ = " ",BUYER$
If W1[2] Mat Read #85,W1[2],0;BUYER$;
Return 
READ_PRDWHSE: Rem READ WHPR FILE
Mat Read #18,R8,0;W1$;
Mat Read #18,R8,32;W1;
Mat Read #18,R8,38;W2;
Mat Read #18,R8,78;W3;
Mat Read #18,R8,228;W5;
Mat Read #18,R8,420;W0;
Mat Read #18,R8,696;W7;
Mat Read #18,R8,846;WHMISC2;
Return 
READ_PROD: Rem
K3$ = " ",K3$
D$ = " ",D$
LET U3$=" ",U3$
K3$[1,12] = K1$[10,21]
Search #3,2,1;K3$,R3,E
If Not(E)
  Mat Read #3,R3;D$;
  Mat Read #3,R3,256;A;
  Mat Read #3,R3,156;B;
  Mat Read #3,R3,512;PFU1;
  Mat Read #3,R3,554;PFU2;
  Mat Read #3,R3,684;U3$;       ! "task26710 
End If 
Return 
SRTLOOP_DONE: Rem OUT OF HERE
Goto OUTEND

CONVERT_STUFF: Rem "==================================== converts
CNVTU[0] = 0
CNVTU[1] = PFU1[UNIT]
CNVTU[2] = 1
CNVTA = W3[9] \ Gosub CONVERT
W3[9] = AMOUNT
TOTAV = W3[0] - W3[2]
CNVTA = TOTAV \ Gosub CONVERT
TOTAV = AMOUNT
CNVTA = W3[1] \ Gosub CONVERT
W3[1] = AMOUNT
For X = 0 To 3
  CNVTA = A[X] \ CNVTU[2] = 1 \ Gosub CONVERT
  A[X] = AMOUNT
Next X
If PFU1[UNIT] = -1 Let SUNIT$ = "CWT " \ Goto TISDONE
If PFU1[UNIT] = -2 Let SUNIT$ = "LOT " \ Goto TISDONE
If PFU1[UNIT] = -3 Let SUNIT$ = "LB  " \ Goto TISDONE
If PFU1[UNIT] > 0 Mat Read #7,PFU1[UNIT],10;SUNIT$;
TISDONE: Return 

Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: Rem ALL UB 5+!!  IF SPC 4>1280 GOTO cvtstartb: ! "unibasic 5+
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}

L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
if not(outflag)
	If not(j8)
		Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
		let returnstatus=0
		If Eflag>0
			ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
			tmp$=""
		Endif
		if not(eflag)
			if not(totrec)
				returnstatus=1
				let message$=message$+"There are no transactions to print"
				message$=message$+"."
			else
				Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
			endif
		endif
		call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
		call AddToStr(e$,rstr$,WebStr$)
		call SetOutPut(e$,rstr$)
	else
		Call addtostr(e$,rstr$,esdel$) !end section
		Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
	End If
endif
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program

