! >>> Program 462
!
! description Non Stock Sales History Report
!
! loadsave -w -n 100,10 -o prog/dxport/462.dl4 src/462.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem /w/papermaster/r2002//usr/acct/jcs/work/devl/mx/mx462.src (univ2) [jcs] {00028}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX462 - NON STOCK SALES HISTORY REPORT
Rem AUTHOR: DAVE  MAR 24, 1987
Rem LAST UPDATE: MTG 6/92 TO !!-!! Print NON-STOCK FROM HISTORY
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray !
External Lib "ubsfunc.dl4"
Declare External Sub UTMonths
!

!- Option Default Dialect IRIS1

Try
! - If Spc(13) = 11 !!-!! Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
dim 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],AMOUNT!
dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[40],ARDATE$[8]
Dim L$[30],L2$[16],P9$[50],S3$[33]
Dim 2%,DIV[1],INVM,INVDATE[1]
Dim I$[50],2%,DT3[1],JDATE[1],JWDATE
Dim I$[50], I0$[50], I1$[50], I2$[50], I3$[50], I4$[50], 2%,DT3[1],JDATE[1],JWDATE
Dim 1%,F,X1,EUN[2],OT19Part
Dim 2%,L1[2],X2,D9[1]
Dim K1$[50],K2$[40],K3$[50],X$[10],K4$[50]
Dim 3%,J,X3,T9[20],T8[20],OLM[6],UNF[6],R[23]
Dim 1%,H3[1],H4[2]
Dim 2%,H0[12],H5[16],S3[24],SLSM[9],H6[8]
Dim 3%,SCOM[4],SMER[4],SCST[4],OREF[5]
Dim P0$[12],V0$[12],H0$[20],H1$[6]
Dim 2%,T1[1],JRNL
Dim 3%,T2[25]
Dim 1%,L3[3],UN[2],S2[1],DIVFLAG,DATEFLAG
Dim 2%,L2[1],L4[3],L6[5],L9[1]
Dim 3%,L5[3],L7[12],S3[17]
Dim L6$[60],L1$[20],MT$[12],S3$[33]
Dim 3%,Contador,Custom_customer$[30]

!!!! dx add xport reporting code
Dim tmp$[500],tmp1$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[2000],bsdel$[10],esdel$[10],rdel$[10]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim blockid$[100],msg$[100]
DIM 1%,SORTFLAG,3%,RECCNT
!Try call dxopen() Else Rem ! needed?
!Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
! Call dxsave(0,"/tmp/md462.txt!")
!open #9,"6/tmpsort"
For J = 2 To 4
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1136","1184","1168"
!
Read #1,3;CNAME$;
Mat Read #1,0,100;ARDATE$;
Mat Read #1,19,50;P9$;
Mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(Trim$(custom_customer$))
!
!J8 = 0
!If Err 0 Let J8 = Spc(8)
J8 = 0 
Try
	J9 = Chf(0) 
else
	let j8=99
end try

J9 = 55 !\ If J8 Let J9 = 18
K1$ = " "
J1 = 90 \ J2 = 0
!
! let j8=0
!
if J8 ! dx xml, setup rstr$
  ! already coming over from web
  ! <section>DXBLOCKX</eof></eor>
  !tmp$ = bsdel$,"462",fdel$,rdel$
  !call addtostr(e$,rstr$,tmp$)
End if
!if J8 !dx xml headings
!	tmp$="INV",fdel$,"LINE",fdel$
!	tmp$=tmp$,"DESCRIPTION",fdel$
!	if P9$[26,26]="Y" let tmp$=tmp$,"DESCRIPTION 2",fdel$
!	tmp$=tmp$,"CTGY",fdel$,"COMM",fdel$
!	tmp$=tmp$,"QUANTITY",fdel$,"EXT COST",fdel$
!	tmp$=tmp$,"PRICE",fdel$,"EXT PRICE",fdel$
!	call addtostr(e$,rstr$,tmp$+rdel$)
!	Contador = 0
!	! return ! dx xml
!end if


eflag=0
message$=""	
!!!! dx add xport reporting code
LET DIVFLAG=0;DATEFLAG=0
! divisions 
DIV[0] = 0 \ DIV[1] = 999
call dxget("SDIV",tmp$) 
if rtrim$(tmp$)="" 
	let div[0]=0
else
	let div[0]=tmp$
	let divflag=99
endif
call dxget("EDIV",tmp$)
if tmp$=""
	let div[1]=999
else
	let div[1]=tmp$
endif

if DIV[0]<0 or DIV[0]>999 
	let eflag=eflag+1
	let message$=message$+ "Invalid starting division, must be between 0 and 999! "
endif
!I$ = I1$
! - ! - If I$ = "" Goto L_1050  
!DIV[1] = I$
if DIV[0]>DIV[1] or DIV[1]>999
	let eflag=eflag+1
	let message$=message$+"Invalid ending division, must be between beginning division and 999! " ! \ error 10000
endif
call dxget("MNTH",tmp$)
if rtrim$(tmp$)="" 
	let invm=0
else
	let invm=tmp$
	if INVM<1 or INVM>12 
		let eflag=eflag+1
		let message$=message$+"Invalid posting month, must be between 1 and 12! "  !\ error 10000
	endif
endif
call dxget("SDATE",tmp$)
if tmp$="" 
	let invdate[0]=700101 ! yymmdd format
else
	let tmp3=tmp$\let k4$=tmp3 using "&&&&&&" ! mmddyy format
	let tmp$=k4$[5,6],k4$[1,4] !  yymmdd format
	let invdate[0]=tmp$
	let dateflag=99
	
endif
X2 = INVDATE[0] 
Gosub L_7820 \ goto ErrStartDate
JDATE[0] = X2
goto getenddate:
ErrStartDate:
let eflag=eflag+1
let message$=message$+ "Invalid starting invoice date! "!  \ error 10000

getenddate: ! 
call dxget("EDATE",tmp$)
if tmp$="" 
	let invdate[1]=591231
else
	let tmp3=tmp$\let k4$=tmp3 using "&&&&&&" ! mmddyy format
	let tmp$=k4$[5,6],k4$[1,4] !  yymmdd format
	let invdate[1]=tmp$
	let dateflag=99
	
endif
let x2=invdate[1]
Gosub L_7820 \ goto ErrEndDate
JDATE[1] = X2
If JDATE[1] < JDATE[0] 
	let eflag=eflag+1
	let message$=message$+"Invalid ending invoice date must be greater than starting date!" 
endif
Goto L_1300
!
ErrEndDate:
let eflag=eflag+1
let message$=message$+"Invalid ending invoice date!" ! \ error 10000

L_1300: Rem
if eflag<>0
	let sortflag=99
	goto outend: 
endif
LET K4$=" ",K4$! clear sortfile
l_1500: !
SEARCH #9,3,1;K4$,R[3],E\IF E GOTO L_1700:
SEARCH #9,5,1;K4$,R[3],E
GOTO L_1500
L_1700: ! STARTSORT
! Call dxsave(0,"/tmp/md462.1.txt!")
SORTFLAG=0;RECCNT=0
K1$ = " ",K1$
L_1705: Search #2,3,1;K1$,R[2],E
If E <>0 Goto L_1900

If INVM <>0
	Mat Read #2,R[2],512;OREF;
	Mat Read #4,OREF[5],8;T2;
	X$ = T2[25] Using "&&&&&&&&&"
	X = X$[8,9]
	If X <> INVM Goto L_1705
ENDIF

Mat Read #2,R[2],104;H5;
if divflag<>0
	If H5[8] < DIV[0] Goto L_1705
	If H5[8] > DIV[1] Goto L_1705
endif
Mat Read #2,r[2],508;OT19Part;
If H5[7]=19 And OT19Part Goto L_1705: ! "NO OT 19 Partials - Only finals

Mat Read #2,R[2],0;H0;
X2 = H0[8] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
if dateflag<>0
	If JWDATE < JDATE[0] Goto L_1705
	If JWDATE > JDATE[1] Goto L_1705
endif
L_1770: Rem LET'S CHECK LINE ITEMS
K2$ = " ",K2$ \ K2$[1,10] = K1$[3,12]
L_1780: Search #3,3,1;K2$,R[3],E 
if e goto L_1705
If K2$[1,10] <> K1$[3,12] Goto L_1705
Mat Read #3,R[3],8;L3;
If Not(L3) Goto L_1780
! If L3[2] > 990 Goto L_1705
Mat Read #3,R[3],256;S2;
If S2 = 3 Goto L_1780
Mat Read #3,R[3],32;L5;
Mat Read #3,R[3],168;L7;
If Not(L7[4] + L5[3] + (L7[4] * L5[1])) Goto L_1780
K4$ = " ",K4$ \ K4$[1,3] = H5[8] Using "###"
K4$[4,9] = JWDATE Using "######"
K4$[10] = K1$
Search #9,4,1;K4$,R[2],E 
! - ! - If E Gosub ERR_SEARCH
If E Let e$ = "syserrorfile 462 sortfile mode (m)=4 keyno (k)=1 r=",R[2]," e=",e," keyval (k$)=",K4$ \error 10000
LET RECCNT=RECCNT+1
IF NOT(SORTFLAG) AND RECCNT>5000 and j8=0
	!Call dxsave(0,"/tmp/md462.11.txt!")
	If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
		Call addtostr(e$,rstr$,esdel$) !end section
	Message$="Report is still processing.  "
	call dxget("Printer",tmp$)
	if rtrim$(ucase$(tmp$))="D"
			let message$=message$+"Check myreports later. "
	endif
	 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	 call addToStr(e$,rstr$,webstr$)
	 call setoutput(e$,rstr$)
	 !Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	 !	Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
	 ! try call dxclose() else rem
	End If
	LET SORTFLAG=99
endif
Goto L_1705
!
L_1900: !!-!! Print @0,22;'CL';"PRINTING....PLEASE WAIT...";
!Call dxsave(0,"/tmp/md462.2.txt!")
!if J8 !dx xml headings
!	tmp$="INV",fdel$,"LINE",fdel$,"DESCRIPTION",fdel$,"CTGY",fdel$,"COMM",fdel$
!	!!!!!!!let tmp$=tmp$,"MTD GROSS PROFIT",fdel$,"MTD G/P %",fdel$ ! was If COST_LEV[1] > 0 (always send)
!	tmp$=tmp$,"QUANTITY",fdel$,"EXT COST",fdel$,"PRICE",fdel$,"EXT PRICE",fdel$," ",fdel$
!	!!!!!!!let tmp$=tmp$,"YTD GROSS PROFIT",fdel$,"YTD G/P %",fdel$ ! was If COST_LEV[1] > 0 (always send)
!	If P9$[40,40] = "Y" let tmp$=tmp$,"VEND ITEM #",fdel$ 
!	call addtostr(e$,rstr$,tmp$+rdel$)
!	return ! dx xml
!end if
IF NOT(SORTFLAG)
	If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
		Call addtostr(e$,rstr$,esdel$) !end section
		Message$="Report is still processing.  "
		call dxget("Printer",tmp$)
		if rtrim$(ucase$(tmp$))="D"
			let message$=message$+"Check myreports later. "
		endif
		 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
		 call addToStr(e$,rstr$,webstr$)
		call setoutput(e$,rstr$)
		!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
		!Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
		! try call dxclose() else rem
	End If
	LET SORTFLAG=99
endif
if J8 !dx xml headings
	tmp$="INV",fdel$,"LINE",fdel$
	tmp$=tmp$,"DESCRIPTION",fdel$
	if P9$[26,26]="Y" let tmp$=tmp$,"DESCRIPTION 2",fdel$
	tmp$=tmp$,"CTGY",fdel$,"COMM",fdel$
	tmp$=tmp$,"QUANTITY",fdel$,"EXT COST",fdel$
	tmp$=tmp$,"PRICE",fdel$,"EXT PRICE",fdel$
	!
	call addtostr(e$,rstr$,tmp$+rdel$)
	Contador = 0
	! return ! dx xml
end if
!
K4$ = " ",K4$
D9 = 0
L_2000: Search #9,3,1;K4$,R[2],E \ If E = 2 Goto L_9100
! - ! - If E Gosub ERR_SEARCH
D9[1] = K4$[1,3]
If D9<>0
	if D9 <> D9[1] Gosub L_4200
endif
D9 = D9[1]
Gosub L_6000
K1$ = " ",K1$ \ K1$[1,10] = OREF[1] Using "##########"
If H0 = 31 Let K1$[1,10] = H0[7] Using "##########"
K2$[1,10] = K1$[1,10]
L_2040: Search #3,3,1;K1$,R[3],E
If E = 2 Goto L_2000
! - ! - If E Gosub ERR_SEARCH
If K1$[1,10] <> K2$[1,10] Goto L_2000
Gosub L_6300
If Not(L3) Goto L_2040
If S2 = 3 Goto L_2040
If Not(L7[4] + L5[3] + (L7[4] * L5[1])) Goto L_2040
If H0 <> 31 Goto L_2160
L7[4] = - (L7[4])
L5[3] = - (L5[3])
!
L_2160: Gosub L_5800
Gosub L_5000
Gosub L_2200
Goto L_2040
!
L_2200: Rem TOTALS CALC
T9[5] = T9[5] + L7[4]
T9[6] = T9[6] + (L7[4] * L5[1])
T9[8] = T9[8] + L5[3]
T8[5] = T8[5] + L7[4]
T8[6] = T8[6] + (L7[4] * Abs(L5[1]))
T8[8] = T8[8] + L5[3]
Return 
!
L_4000: Rem "======================================== totals
!
if J8 return ! dx xml
!
Gosub L_5800
Print #0;"\15\TOTALS";
Print #0; Using "-----#.##"; Tab 63;T9[5];
Print #0; Using "-------#.#####"; Tab 73;T9[6];
Print #0; Using "--------#.##"; Tab 105;T9[8]
Return 
!
L_4200: Rem !!-!! Print DIVISION TOTALS
!
if J8 return ! dx xml
!
Print #0;" " \ J1 = J1 + 1
Gosub L_5800
Print #0; Using "###";"TOTALS FOR DIVISION ";D9;
Print #0; Using "-----#.##"; Tab 63;T8[5];
Print #0; Using "-------#.#####"; Tab 73;T8[6];
Print #0; Using "--------#.##"; Tab 105;T8[8]
T8[5] = 0 \ T8[6] = 0 \ T8[8] = 0
Print #0;" " \ J1 = J1 + 1
Return 
!
L_5000: Rem !!-!! Print LINE
!
if J8 	
	  tmp1$=K1$[3,10],fdel$
	  tmp1$=tmp1$,L3[2] Using "###",fdel$
	!  If P9$[26,26] = "Y" 
	!    tmp1$=tmp1$,rtrim$(L6$[1,30]),rtrim$(L6$[31,60]),fdel$ \ J1 = J1 + 1
	!  else
	!    tmp1$=tmp1$,L6$[1,30],fdel$
	!  end if
	  tmp1$=tmp1$,rtrim$(L6$[1,30]),fdel$
	  If P9$[26,26] = "Y" let tmp1$=tmp1$,rtrim$(L6$[31,60]),fdel$
	  tmp1$=tmp1$,L3[3] Using "###",fdel$
	  tmp1$=tmp1$,L1$[17,20],fdel$
	  tmp1$=tmp1$,L7[4] Using "-----#.##",fdel$
	  tmp1$=tmp1$,L7[4] * L5[1] Using "-----#.#####",fdel$
	  tmp1$=tmp1$,OLM[3] Using "-----#.#####",fdel$
	  tmp1$=tmp1$,L5[3] Using "--------#.##",fdel$
	!  tmp1$=tmp1$," ",fdel$
	!  tmp1$=tmp1$," ",fdel$
	  !
	  call addtostr(e$,rstr$,tmp1$+rdel$)
	  return ! dx xml
end if
!
Print #0;K1$[3,10];
Print #0; Using "###"; Tab 10;L3[2];
Print #0; Tab 17;L6$[1,30];
Print #0; Using "###"; Tab 50;L3[3];
Print #0; Tab 56;L1$[17,20];
Print #0; Using "-----#.##"; Tab 63;L7[4];
Print #0; Using "-----#.#####"; Tab 75;L7[4] * L5[1];
Print #0; Using "-----#.#####"; Tab 90;OLM[3];
Print #0; Using "--------#.##"; Tab 105;L5[3];
Print #0;" "
If custom_customer$="ACME"
	IF P9$[26,26]="Y" ! "ACME CUSTOM
		PRINT #0; TAB 17;L6$[31,60];
		PRINT #0; USING "  PO#######";L4[2]
		LET J1=J1+1
	ENDIF
Else
	If P9$[26,26] = "Y" Print #0; Tab 17;L6$[31,60] \ J1 = J1 + 1
Endif
Return 
!

L_5800: Rem "============================================ headings
!
if J8 return ! dx xml
!
J1 = J1 + 1 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ !\ !!-!! Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 6
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;" - 462 - ";Msc$(3);
Print #0; Tab 51;"N O N - S T O C K   S A L E S   H I S T O R Y"
If INVM Print #0; Tab 10;"FOR THE MONTH OF: ";INVM;
X$ = INVDATE[0] Using "######"
Print #0; Tab 60;X$[3,4];"/";X$[5,6];"/";X$[1,2];" THRU ";
X$ = INVDATE[1] Using "######"
Print #0;X$[3,4];"/";X$[5,6];"/";X$[1,2]
Print #0;""
Print #0; Tab 3;"INV  LINE";
Print #0; Tab 17;"DESCRIPTION";
Print #0; Tab 49;"CTGY";
Print #0; Tab 56;"COMM";
Print #0; Tab 64;"QUANTITY";
Print #0; Tab 79;"EXT COST";
Print #0; Tab 97;"PRICE";
Print #0; Tab 108;"EXT PRICE"
Print #0;" "
Return 
!
L_6000: Rem READ INVOICE HEADER FILE
Mat Read #2,R[2],0;H0;
Mat Read #2,R[2],52;H3;
Mat Read #2,R[2],66;V0$;
Mat Read #2,R[2],78;H4;
Mat Read #2,R[2],84;H0$;
Mat Read #2,R[2],104;H5;
Mat Read #2,R[2],172;S3;
Mat Read #2,R[2],272;H1$;
Mat Read #2,R[2],278;SLSM;
Mat Read #2,R[2],318;SCOM;
Mat Read #2,R[2],348;SMER;
Mat Read #2,R[2],378;SCST;
Mat Read #2,R[2],408;H6;
Mat Read #2,R[2],446;P0$;
Mat Read #2,R[2],512;OREF;
Mat Read #4,OREF[5],0;T1;
Mat Read #4,OREF[5],8;T2;
Mat Read #4,OREF[5],164;JRNL;
Return 
!
L_6300: Rem "======================== read order line record
Mat Read #3,R[3],0;L2;
Mat Read #3,R[3],8;L3;
Mat Read #3,R[3],16;L4;
Mat Read #3,R[3],32;L5;
Mat Read #3,R[3],56;L6;
Mat Read #3,R[3],80;L6$;
Mat Read #3,R[3],140;L1$;
Mat Read #3,R[3],160;L9;
Mat Read #3,R[3],168;L7;
Mat Read #3,R[3],250;UN;
Mat Read #3,R[3],256;S2;
If Not(S2[0]) Let S2[1] = 0
Mat Read #3,R[3],260;S3;
Mat Read #3,R[3],368;MT$;
Mat Read #3,R[3],370;S3$;
Mat Read #3,R[3],404;OLM;
Mat Read #3,R[3],446;EUN;
Mat Read #3,R[3],452;UNF;
Gosub L_30000
Return 
!
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
!
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
!
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
!
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
!
L_9100: Rem END OF THIS RANGE
Gosub L_4200
Gosub L_4000
! - ! - If Err 0 Rem
! - ! - Close #0

!!!!!!!!!!!!!!!If Err 0 Gosub ERR_ESCAPE
!If J8 !!-!! Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
! 
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = L7[4] \ Gosub L_20000 \ L7[4] = AMOUNT
CNVTU[1] = UN[1];CNVTU[2] = 2
CNVTA = OLM[3] \ Gosub L_20000 \ OLM[3] = AMOUNT
CNVTU[1] = UN[2];CNVTU[2] = 2
CNVTA = L5[1] \ Gosub L_20000 \ L5[1] = AMOUNT
Return 
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120 ! - was If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ rem ! - If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
!
L_30000: Rem ===== set units for conversions (stock/nonstock version)
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
!

ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/mx462.se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$   
Call Programdump()
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             


OUTEND: Rem EXIT PROGRAM
! Call dxsave(0,"/tmp/md462.3.txt!")
! dx close
If j8 ! dx xml ! browser
	Call addtostr(e$,rstr$,esdel$) !end section
	Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If
if not(j8) and sortflag<>0
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		returnstatus=0
		if message$="" let message$="Complete "
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
	try Call dxclose() else rem
endif
ELSE
!
	include "src/callmainerrnet.inc"
end try
End ! the whole program
