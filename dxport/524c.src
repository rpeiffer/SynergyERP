! >>> Program 524c
!
! description Accounts Payable Check Print - Release Manual Checks
! 
!loadsave -w -n 100,10 -o prog/dxport/524c.dl4 src/524c.src 
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 25, 2001  15:00:19
Rem /usr/acct/r97//usr/acct/kag/work/r97/ap/la524c.src (univ2) [kag] {07022}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function OpenFile
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem LA524C A/P CKWRITING  - MANUAL CHECK RELEASE ONLY
Rem MODIFIED FOR MULTIPLE BANKS 3/91 - MTK    V4
Rem Last Update: 05/08/97 vst cct102349 removed <esc> option/new error rtn
Try
	DIM P61$[256],1%,ch_curr,keycurr$[30],3%,rec_curr,1%,currid,3%,currfact,2%,bnkcurrid,1%,ch_apcash, 3%,rec_apcash
	DIM 1%, A2CCURRID                
	DIM 3%, A2CCURRFACT   
	dim 1%,oiCURRID
	dim 3%,oiCURRFACT 
	Dim A7$[67],A8$[96],A9$[78],2%,B[1],C,3%,D,D$[6],2%,F1[2],P2$[50],1%,S,2%,V9[3]
	Dim p61$[256]
	Dim 1%,A5,S8
	Dim 1%,O4,D4,E,F7,F9,G1[2],G3,H1[2],M,M1,O1[2],C0[8]
	Dim 2%,A7,G2,G[1],H3[1],H[1],O2[6],R[15],V,X,G5,O5,PAY[1],R1,P5
	Dim 3%,H2[2],O3[9]
	Dim H$[130],I$[8],K1$[20],K8$[10],K9$[50],R1$[13],K$[10],PAY$[116]
	Dim M$[130],O$[3],O1$[12],R$[63],V$[20],V1$[20],2%
	Dim fname$[50],groupid$[1],J$[50],F$[20],G$[2],K2$[30]
	Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
	Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
	Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
	Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
	Dim bankid$[2]
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Mat Read #1,88,16;F$; \ Open #15,F$ ! a00ap
Mat Read #1,88,48;F$; \ Open #16,F$ ! acf
! let open the files here
 LET V$=" 0" \ SEARCH #15,2,1;V$,R[15],E 
 If E = 1 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '20' Not On File. "
	goto outend:
endif
 IF E GOSUB ERR_SEARCH:                                                    
 MAT  READ #15,R[15],2;R$;                                                 
 IF R$[51,51]<>" " GOTO L_860: 
 If E = 1 
	eflag=eflag+1
	message$="Update In Process Elsewhere. Try Again Later"
	goto outend:
endif
 L_860: ! LET R$[51,51]=" " \ MAT  WRITE #15,R[15],2;R$; 
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
G$[1,1] = intco Using "#"
g$[2,2]=groupid$
                                               
                    
                                              
 LET F$=R$[31,31],"/A80VM",G$[1,2] \ OPEN #2,F$                            
 LET F$=R$[53,53],"/A20OI",G$[1,2] \ OPEN #3,F$                            
 LET F$=R$[56,56],"/A20CR",G$[1,2] \ OPEN #5,F$                            
 LET F$=R$[39,39],"/A50DB",G$[1,2] \ OPEN #6,F$                            
 LET F$=R$[43,43],"/A50CR",G$[1,2] \ OPEN #7,F$                            
 MAT  READ #1,88,112;F$; \ OPEN #8,F$                                      
 LET F$=R$[40,40],"/A50DD",G$[1,2] \ OPEN #10,F$                           
V8=0
MAXL = 60 
	Mat Read #1,51,18;C0;
	Mat Read #1,61,0;P61$;
V$ = "20" \ Search #15,2,1;V$,R[15],E
If E = 1 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '20' Not On File. "
	goto outend:
endif
If E Gosub ERR_SEARCH
Mat Read #15,R[15];R1$;
If R1$[13,13] <> "1" Goto L_1500
eflag=eflag+1
message$="***CHECKS HAVE ALREADY BEEN PROCESSED. Run and Accept Check Register***"
Goto L_9050
L_1500: ! start gets                                                        
!Call dxget("PRPRT",tmp$) ! (NOT ADDED?)     ! process manual checks only
!audonly = 0 \ If tmp$ <> "" Let audonly = 1 
!if not (audonly) goto L_9050:
! get bank flag
a5=0
call dxget("BANK",tmp$)\ let  BNKFLG = tmp$
If bnkflg=0
	! see if there is only 1 bank, it so use it
	K2$=" ",K2$
	SEARCH #8,3,1;K2$,R[8],E
	IF NOT(E)
		TMP$=K2$
		SEARCH #8,3,1;K2$,R[8],E
		IF E=2 bnkflg = tmp$
		let currid=0
		let currfact=0
		if p61$[136,136]="Y"
			read #8,R[8],54;bnkcurrid;
			if bnkcurrid<>0
				ch_curr=OpenFile(9712,intCo) \ If Ch_curr = -1 Error 42
				let keycurr$=" ",keycurr$
				let keycurr$[1,4]=bnkcurrid using "####"
				search #ch_curr,2,1;keycurr$,rec_curr,e
				if not(e)
					mat read #ch_curr,rec_curr,0;currid;
					mat read #ch_curr,rec_curr,846;currfact;
					IF CURRID<>0 LET CURRPASS=1
				endif
				try close #ch_curr else rem	
			endif	
		endif
	ENDIF
endif
if bnkflg<=0 or bnkflg>99
	let eflag=eflag+1
	let message$=message$+"Invalid Bank Submitted"
	goto L_9050:
endif
IF BNKFLG<>0
	bankid$=bnkflg using "##"
	K2$ = BNKFLG Using "##"
	Search #8,2,1;K2$,R[8],E
	If E <>0
		eflag=eflag+1
		message$=Message$+"BANK NOT ON FILE!!!"
		goto L_9050:
	End If 
	Mat Read #8,R[8],50;A7;
	let currid=0
	let currfact=0
	if p61$[136,136]="Y"
		read #8,R[8],54;bnkcurrid;
		if bnkcurrid<>0
			ch_curr=OpenFile(9712,intCo) \ If Ch_curr = -1 Error 42
			let keycurr$=" ",keycurr$
			let keycurr$[1,4]=bnkcurrid using "####"
			search #ch_curr,2,1;keycurr$,rec_curr,e
			if not(e)
				mat read #ch_curr,rec_curr,0;currid;
				mat read #ch_curr,rec_curr,846;currfact;
				let currpass=1
			endif
		try close #ch_curr else rem	
		endif	
	endif
	let a5=bnkflg

endif
mat read #1,61,0;p61$;
if p61$[99,99]="Y" ! achflag
	call dxget("ACHFLAG",tmp$)
	IF rtrim$(tmp$)<>""
		Call DXSet("U_BANKID",bankid$)
		Call DXSet("U_CHECKNUM",A7 using "######")
		Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
		tmp$ = "524ach1"                                                        
		Call env(2,"NEXTBLOCK",tmp$)                                          
		Call SetOutPut(e$,rstr$,1) !1 flag puts 0 status section, puts </page>
		end
	ENDIF
ENDIF
F6 = 0 \ F5 = 0
If eflag<>0 Goto OUTEND
! setflag
LET V$=" 0" \ SEARCH #15,2,1;V$,R[15],E 
If E = 1 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '0' Not On File. "
	goto outend:
endif
IF E GOSUB ERR_SEARCH:                                                    
MAT  READ #15,R[15],2;R$;                                                 
 IF R$[51,51]=" "  
	eflag=eflag+1
	message$="Update In Process Elsewhere. Try Again Later"
	goto outend:
endif
LET R$[51,51]=" " \ MAT  WRITE #15,R[15],2;R$;
M1 = 0
K9$ = "" \ V = 0
L_2030: Search #3,3,1;K9$,R[3],E
If E = 2 Goto L_4000
If E Gosub ERR_SEARCH
Gosub L_5200
If O$[1,1] < "2" Goto L_2030
If O$[1,1] > "3" Goto L_2030
If O$[3,3] = "3"
	if a5<>0 
		IF o4=a5 Goto L_2500
	else
		goto L_2500
	endif
endIF
Goto L_2030
L_2500: Rem MANUAL CK
Gosub L_5000 ! get vendor info
O5 = P5 \ Mat Write #3,R[3],118;O5;
Gosub L_7100
M = 0 \ K1$[1,2] = O4 Using "##" \ K1$[3,8] = "999999"
K1$[9,14] = O2[6] Using "######" \ K1$[18,18] = "0"
totrec=totrec+1
L_2560: M = M + 1 \ K1$[15,17] = M Using "###"
Search #5,2,1;K1$,R[5],E
If Not(E) Goto L_2560
If E > 1 Gosub ERR_SEARCH

G1[2] = M
Gosub L_6000
Gosub L_5430
If F7 = 99 Goto OUTEND
Goto L_2030
L_4000: M$ = "" \ V1$ = " ",V1$ \ V = 0 ! direct Disbursements
L_4030: Search #6,3,1;V1$,R[6],E
M = 0
If E = 2 Goto ResetFlag
If E Gosub ERR_SEARCH
Gosub L_4600
If H1 <> 3 Goto L_4030
If H1[2] <> 3 Goto L_4030
if a5<>0
	if d4<>a5 goto L_4030
endif
M$ = H$
If F7 = 99 If M$ <> H$ Goto ResetFlag
V = H[0]
Gosub L_4700
If H1 = 3 Goto L_4500
L_4500: Rem MANUAL CK
!If S = 2 Stop 
K1$ = " ",K1$ \ K1$[1,2] = D4 Using "##"
K1$[3,8] = "999999" \ K1$[9,14] = H[1] Using "######"
let totrec=totrec+1
L_4520: K1$[15,17] = M Using "###" \ K1$[18,18] = "1"
Gosub L_7100
G[0] = H[1] \ G1[2] = M
G1[1] = 1 \ G2 = R[6] \ G3 = D4
Search #5,2,1;K1$,R[5],E
If E = 1 Goto L_4575
If E Gosub ERR_SEARCH
M = M + 1 \ Goto L_4520
L_4575: Gosub L_6000
Gosub L_4800
Goto L_4030
L_4600: Rem READ DD
Mat Read #6,R[6],0;H; \ Mat Read #6,R[6],8;H1;
Mat Read #6,R[6],14;H$; \ Mat Read #6,R[6],144;H2;
Mat Read #6,R[6],162;H3;
Mat Read #6,R[6],200;O1$; \ Mat Read #6,R[6],212;D4; \ Return 
L_4700: Rem SET UP PRINT VAR
O1 = H1 \ O2[0] = H[0] \ O4 = D4 \ O5 = H[0]
O2[2] = H3[0] \ O2[6] = H[1]
O3[4] = H2[0] \ O3[2] = H2[1]
Return 
L_4800: Rem WRITE DIRECT DISBURSE
H1[2] = 4
If H1 <> 3 Let H3[1] = D1 \ D4 = A5
Mat Write #6,R[6],0;H;
Mat Write #6,R[6],8;H1;
Mat Write #6,R[6],162;H3; \ Mat Write #6,R[6],212;D4; \ Return 
L_5000: M1 = 0 \ V$ = O2[0] Using "######"
Search #2,2,1;V$,R[2],E
If E = 1 Print 'RB';"VENDOR #";V$;"NOT ON FILE!!!"
If E Gosub ERR_SEARCH
Mat Read #2,R[2],148;M$; \ Mat Read #2,R[2],550;P5;
PAY$ = M$
K$ = P5 Using "######"
Search #2,2,1;K$,R1,E \ If Not(E) Goto L_5065
P5 = O2[0] \ Return 
L_5065: Mat Read #2,R1,148;PAY$;
Return 
L_5200: Mat Read #3,R[3],0;O$;
Mat Read #3,R[3],6;O1; \ Mat Read #3,R[3],12;O2;
Mat Read #3,R[3],40;O3; \ Mat Read #3,R[3],100;O1$;
Mat Read #3,R[3],112;O4; \ Mat Read #3,R[3],118;O5;
Mat Read #3,r[3],116;oiCURRID;
Mat Read #3,r[3],122;oiCURRFACT;
Return 
O2[6] = C
If O$[3,3] <> "3" Let O2[1] = D1 \ O4 = A5
L_5430: If O$[3,3] = "3" If Not(O2[1]) Let O2[1] = D1
Mat Write #3,R[3],12;O2
Mat Write #3,R[3],40;O3 \ Mat Write #3,R[3],112;O4;
O$[1,1] = "4"
Mat Write #3,R[3];O$ \ Return 
L_6000: Rem INSERT IN A20CR
Search #5,2,1;K1$,R[5],E \ If E = 1 Goto L_6010
If E Gosub ERR_SEARCH
If G1[0] = 9 Return
let eflag=eflag+1
Message$="DUPLICATE TRANSACTION ON CHECK# "+K1$[3,8] \ Gosub ERR_SEARCH
L_6010: E = 2 \ Search #5,1,0;K1$,R[5],E
If E Gosub ERR_SEARCH
IF P61$[136,136]="Y" 
	let A2CCURRID=0          
	let A2CCURRFACT=0
	if currid<>0 and currfact<>0
		let a2ccurrid=currid
		let a2ccurrfact=currfact
	endif
endif
Gosub L_7060
L_6030: Search #5,4,1;K1$,R[5],E
if not(e) return
If e<>0 gosub ERR_SEARCH
L_6055: Search #5,7,1;K1$,X,E
Goto L_6030
Mat Read #5,R[5],0;G; \ Mat Read #5,R[5],8;G1;
Mat Read #5,R[5],14;G2; \ Mat Read #5,R[5],18;O1$;
Mat Read #5,R[5],30;G3; \ Mat Read #5,R[5],32;G5;
Mat Read #5,r[5],56; A2CCURRID;              
Mat Read #5,r[5],58; A2CCURRFACT;
Return 

L_7060: Mat Write #5,R[5],0;G; \ Mat Write #5,R[5],8;G1;
Mat Write #5,R[5],14;G2; \ Mat Write #5,R[5],18;O1$;
Mat Write #5,R[5],30;G3; \ Mat Write #5,R[5],32;G5;
Mat Write #5,r[5],56; A2CCURRID;              
Mat Write #5,r[5],58; A2CCURRFACT;
Return

L_7100: G = O2[6] \ G[1] = O2[0]
G3 = O4 \ G5 = O5
G1[0] = O1 \ G1[1] = 0
G1[2] = M1 \ G2 = R[3] \ Return 
!Print @0,23;'CL RB';"INVALID!!!";
!Signal 3,20 \ Print @0,23;'CL'; \ Return 
return

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

ResetFlag: ! reset flag
LET V$=" 0" \ SEARCH #15,2,1;V$,R[15],E 
if e gosub err_search:                                                   
MAT  READ #15,R[15],2;R$;                                                 
IF R$[51,51]=" "  
	let r$[51,51]="1"
	Mat Write #15,r[15],2;r$;

endif
goto outend:

OUTEND: Rem END
L_9050: !
V$ = "20" \ Search #15,2,1;V$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15];R1$;
let recchk=0
let k1$=" ",k1$
search #5,3,1;k1$,r[5],e
if not(e) let recchk=99
if recchk<>0
	R1$[13,13] = "1" 
else
	r1$[13,13] = "0"
endif
Mat Write #15,R[15],0;R1$;

Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		let message$=message$+"There are no Manual Check Transactions available to process"
		message$=message$+"."
	else
		Let message$=message$+" "+str$(totrec)+" Manual Check Transaction(s) Processed"
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program

