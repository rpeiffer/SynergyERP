!Program Name: ubsprods - product stock level (similar to 218)
!
! loadsave -w -n 100,10 -o prog/dxport/ubsprods.dl4 src/ubsprods.src
!
!Last Updated:                                     
!11/21/05rce redo the display UMs 

Include "src/prvars.inc"

Declare External sub ubsProds
Declare Sub updatelog,errTrap

Dim sh. as shInfo
Dim sl1.[100] as slInfo
Dim 2%,ii,ss
Call ubsProdS(1,35,1,"files/6/dx.log","103.6083",sh.,sl1.[],ii,ss,600)
stop

External Sub ubsProdS(intCo,intSalesMan,debug,dlog$,Prod$,sh. as shInfo,sl1.[] as slInfo,ii,ss,iLimit,cost_lev[])

Try

Declare Intrinsic Function FindChannel,Trim$
Declare Intrinsic Sub FormatDate,DXSet
Declare External Function FDate$,PDate$,BaseName$,FMTPhone$,Xunit$,OpenFile
Declare External Function XAmount,WareHouse,ReplaceChar$

External Lib "ubsfunc.dl4","ubsprconv.dl4"


Include "src/ubsprod.inc"
Include "src/ubswhse.inc"
Include "src/ubspo.inc"
Include "src/ubsorder.inc"


DEF FNR(X)=SGN(X)*(INT(ABS(X)*100+.5)*.01)

Dim WHK$[20],PRK$[20],CMK$[20],VNK$[20],PLK$[50]
Dim SLK$[60],PDK$[20],PHK$[20]
Dim OHK$[20],ODK$[20]

Dim PR. As Prod
Dim CM. As CommCode
Dim WH. As WHSE
Dim PL. As SPRODLOT
Dim PH. As POHDR
Dim PD. As PODet
Dim SL. As SORDLOT
Dim OH. As ORDH
Dim OD. As ORDD

Dim 1%,debugDetail
! Variables for Channel#'s
Dim 2%,WHC,PRC,VNC,CMC,CTC,CCC,PLC,SLC,PHC,PDC,OHC,ODC
! Variables for Search Record#
Dim 3%,WHR,PRR,VNR,CMR,CTR,PLR,SLR,PHR,PDR,OHR,ODR
! Variables for Search Error
Dim 2%,WHE,PRE,VNE,CME,CTE,PLE,SLE,PHE,PDE,OHE,ODE

Dim Msg$[256],pgmName$[20]
Dim P9$[50],P60$[50],P61$[256],VEND$[30],CATD$[24],e$[100],rstr$[100]
Dim Temp$[100],Space$[100],SLS$[3],Sales$[30],CO$[2]
Dim QMASK$[20],PMASK$[20],EMASK$[20],DEC$[5]
Dim WHSE$[2],SUPER$[12],VENDITEM$[20],POSTATUS$[100,20],ORDSTATUS$[100,20]
Dim NOF$[10]

Dim 1%,baseunit,stockunit,sellunit,purchunit,costunit,priceunit,whatunit
Dim 1%,nonstock,zline
Dim 1%,ARMONTH,BOYMONTH,MTHDAYSi,MaxWhse,MaxVar,ARYear
Let MaxVar=20
Dim col$[maxvar,30]
Dim 2%,BDAYS[24],AR_DATE
Dim 2%,Q0[1],D9[5]
Dim 2%,ErrStat,X1,X2
Dim 3%,ARS[5],UnitsMTD,UnitsYTD,GPMTD,GPYTD
Dim 3%,pocost,netcost,cost,ontr,qbo
Dim 3%,qty[maxvar],onpo,prec[1]


debugDetail=0
pgmName$="ubsprods"
msg$[1,50]="-",msg$ \ Call updatelog(debug)               
msg$="start...program "+pgmName$ \ Call updatelog(debug)     

Space$=" ",Space$
ErrStat = 0
ii=0

SLS$=intSalesMan Using "###" ! Passed Salesman
CO$=Str$(intCo) ! Company
msg$="doing...company-"+CO$+" salesman-"+SLS$ \ Call updatelog(debug)

CTLC= OpenFile(-9999,intCo) \ If CTLC=-1 Error 42    !control
WHC= OpenFile(-1744,intCo)  \ If WHC=-1  Error 42    !prodwhse
PRC=OpenFile(-1792,intCo)   \ If PRC=-1  Error 42    !prod
VNC= OpenFile(-2400,intCo)  \ If VNC=-1  Error 42    !vendor
CMC= OpenFile(-2288,intCo)  \ If CMC=-1  Error 42    !commodity
CTC= OpenFile(-1984,intCo)  \ If CTC=-1  Error 42    !category
CCC= OpenFile(-1728,intCo)  \ If CCC=-1  Error 42    !ccodes
PLC= OpenFile(-2528,intCo)  \ If PLC=-1  Error 42    !prodlot
SLC= OpenFile(-2320,intCo)  \ If SLC=-1  Error 42    !sordlot
PHC= OpenFile(-2416,intCo)  \ If PHC=-1  Error 42    !pohead
PDC= OpenFile(-2432,intCo)  \ If PDC=-1  Error 42    !poline
OHC= OpenFile(-1840,intCo)  \ If OHC=-1  Error 42    !roh
ODC= OpenFile(-1888,intCo)  \ If ODC=-1  Error 42    !rolnew


! Start Prog.
Read #CTLC,19,50;P9$; 
Read #CTLC,60,50;P60$; 
Read #CTLC,61,0;P61$;
Read #CTLC,0,120;ARMONTH; 
Read #CTLC,0,108;AR_DATE;
Mat Read #CTLC,51,74;BOYMONTH;
Mat Read #CTLC,11,0;BDAYS;     
Mat Read #CTLC,115;D9;  
Mat Read #CTLC,115,40;Q0; 

let MTHDAYS=BDAYS[ARMONTH]   
If MTHDAYS<=0 LET MTHDAYS=21

If not(Q0[1]) let Q0[1]=2                                                       
Let Dec$="#",Dec$;Qmask$="---,---,--#"                                         
If Q0[0] Let Qmask$="---,---,--#.",Dec$[1,Q0[0]]         !qty mask      
If Q0[1] Let Pmask$="---,---,---,---.",Dec$[1,Q0[1]]     !price mask        
Let Emask$="-$$$,$$$,$$$,$$$.##"                         !ext. price mask  

Let NOF$="-NOF-"
sh.Product$      = NOF$    
sh.Description1$ = NOF$    
sh.Description2$ = NOF$    
sh.Vendor$       = NOF$    
sh.VendorName$   = NOF$    


Let maxwhse=D9[5]
For xx=0 to maxvar 
	Let qty[xx]=0
Next xx 

For xx=0 to 100
	Let ordStatus$="-NOF-";poStatus$[xx]="-NOF-"
Next xx
!
ordStatus$[1] ="ORD ENTERED"            
ordStatus$[2] ="ORD PRINTED"            
ordStatus$[3] ="ORD REGISTERED"         
ordStatus$[4] ="READY TO INVOICE"               
ordStatus$[5] ="INV ENTERED"  
ordStatus$[6] ="INV PRINTED"
ordStatus$[7] ="INV REGISTERED" 
ordStatus$[9] ="CM ENTERED"
ordStatus$[10]="CM PRINTED"
ordStatus$[11]="CM REGISTERED"
ordStatus$[90]="ORD IN PROCESS"
ordStatus$[91]="ORD IN EDIT"         
ordStatus$[92]="ORD IN JOURNAL"
ordStatus$[93]="CM IN JOURNAL" 
!
poStatus$[1] ="PO ENTERED"
poStatus$[2] ="PO PRINTED"
poStatus$[3] ="PO REGISTERED"
poStatus$[4] ="PO OPEN"
poStatus$[5] ="RECEIPTS IN PROC"
poStatus$[6] ="RECEIPTS REGISTERED"
poStatus$[7] ="PO CLOSED"
poStatus$[91]="PO IN PROCESS"


!P60$[26,26]="N"   !test line 

WHSE$=WareHouse(intSalesMan,intCo) Using "##"    !get warehouse
if whse$=" 0" let whse$=" 1"  ! default whse
Let WHK$=" ",WHK$;WHK$[1,12]=Trim$(Prod$);WHK$[13,14]=WHSE$
Main: !===================================prodwhse
Search #WHC,2,1;WHK$,WHR,WHE
If Trim$(WHK$[1,12])<>Trim$(Prod$) then let WHE=22 
If WHE Goto LoadMe:

If debugDetail                                                      
   msg$="doing...Search #WHC: WHK$="+WHK$+" WHR="+WHR \ Call updatelog(debug) 
   If WHE msg$="error...Search error "+WHE  \ Call updatelog(debug) 
Endif 
Read Record #WHC,WHR; WH.;
Let whichwhse=WH.W1[0] 
If whichwhse<=0 or whichwhse>maxwhse goto OutEnd:


getBOQTY: !==========================================================        
Let QBO=0;ONTR=0                                                                
Let PLK$=" ",PLK$;PLK$[1,12]=Trim$(Prod$);PLK$[13,14]=whichwhse using "##"      
nextBOQTY: ! ===========================                                     
Search #PLC,3,4;PLK$,PLR,PLE                                                    
If Trim$(PLK$[1,12])<>Trim$(Prod$) then let PLE=22                              
If Val(PLK$[13,14])<>whichwhse then let PLE=22

If debugDetail                                                                  
   msg$="doing...Search #PLC: PLK$="+PLK$+" PLR="+PLR \ Call updatelog(debug)   
   If PLE msg$="error...Search error "+PLE  \ Call updatelog(debug)             
Endif                                                                          

If PLE                                                                          
    Clear PR.                                                                  
Else                                                                            
    Read Record #PLC,PLR; PL.;                                    
    Let ONTR=ONTR+PL.PLTR                                 
    Let QBO=QBO+PL.P3[4]                 
    Goto nextBOQTY:                                                           
Endif                                                                           


!on hand                                     
Let qty[1]=WH.W3[0]                          

!level 1
Let qty[2]=WH.WHLV[0]

!shelf count
Let qty[3]=qty[1]-qty[2]

!committed
If P60$[26,26]="Y" then    !inventory levels
   Let qty[4]=WH.WHLV[1]                         
Else
   Let qty[4]=WH.W3[2] 
Endif

!available                                   
Let qty[5]=WH.W3[0]-WH.W3[2]                 
If P9$[28,28]="Y" then qty[5]=qty[5]+WH.W3[1]

!on b/o                                      
Let qty[6]=QBO                               

!on po                                       
Let qty[7]=WH.W3[1]                          

!on transfer                                 
Let qty[8]=ONTR                              


getProd: !============================================================         
PRK$=" ",PRK$;PRK$[1,12]=Trim$(Prod$) 
Search #PRC,2,1;PRK$,PRR,PRE                                                   
If Trim$(PRK$[1,12])<>Trim$(Prod$) Let PRE=22                            
!If PRE Goto LoadMe:                                                            

If debugDetail                                                                 
   msg$="doing...Search #PRC: PRK$="+PRK$+" PRR="+PRR \ Call updatelog(debug)  
   If PRE msg$="error...Search error "+PRE  \ Call updatelog(debug)            
Endif                                                                          

If PRE 
   Clear PR.
Else
   Read Record #PRC,PRR;PR.;                                                    
Endif


!set                                                                            
baseunit =PR.PFU1[0]                                                            
stockunit=PR.PFU1[8]                                                            
sellunit =PR.PFU1[9]                                                            
purchunit=PR.PFU1[10]                                                           
costunit =PR.PFU1[11]                                                           
priceunit=PR.PFU1[12]   


!qty                                                                     
For xx=0 to maxvar                                                       
    Let CNVTA=qty[xx]             !cost/price/qty                          
	Let CNVTU[0]=0                !current unit                            
    Let CNVTU[1]=sellunit        !desired unit                            
	Let CNVTU[2]=1                !mode 1=qty 2=cost/price                 
    Let qty[xx]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
Next xx                                                                  

!pocost                                                               
If P9$[32,32]="Y" and WH.W3[16] then  !whse pricing                   
   let CNVTA=WH.W3[16]        !cost/price/qty                         
Else                                                                  
   Let CNVTA=PR.B[10]         !cost/price/qty                         
Endif                                                                 
Let CNVTU[0]=0                !current unit                           
Let CNVTU[1]=purchunit        !desired unit                           
Let CNVTU[2]=2                !mode 1=qty 2=cost/price                
Let pocost=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)

!netcost                                                                        
Let CNVTA=PR.PRPARC[2]        !cost/price/qty                                   
Let CNVTU[0]=0                !current unit                                     
Let CNVTU[1]=costunit         !desired unit                                     
Let CNVTU[2]=2                !mode 1=qty 2=cost/price                          
Let netcost=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)     

!

Let OTYPE=1;PREC[0]=PRR;WHSE=0;LTBL=PR.LM[0];CNVTA=0              
If LTBL                                                                   
   Call "mxload5.dl4",OTYPE,val(whse$),WH.WHLM[0],PREC[],CNVTA,intCo,e$,rstr$
   Let WH.W3[17]=CNVTA                                                       
Endif                                                                     

Let CNVTA=0;LTBL=PR.LM[1]                                                      
If LTBL                                                                   
   Call "mxload5.dl4",OTYPE,val(whse$),WH.WHLM[0],PREC[],CNVTA,intCo,e$,rstr$
   Let PR.PF_LOAD2=CNVTA                                                       
Endif               

Let PREC[0]=PRR;WHSE=val(whse$);LTBL=WH.WHLM[0];CNVTA=0      
If LTBL 
   Call "mxload5.dl4",OTYPE,val(whse$),WH.WHLM[0],PREC[],CNVTA,intCo,e$,rstr$
   Let WH.W3[17]=CNVTA 
Endif

Let CNVTA=0;LTBL=WH.WHLM[1]                                
If LTBL                                                                   
   Call "mxload5.dl4",OTYPE,val(whse$),WH.WHLM[0],PREC[],CNVTA,intCo,e$,rstr$
   Let WH.W3[14]=CNVTA                                                       
Endif                                                                     

!cost
Let DFT_COST=P60$[29,29]                      
If DFT_COST=0 or DFT_COST>5 Let DFT_COST=1    
Let Cost=0                                      
If P9$[32,32]="Y"                             
   If DFT_COST=1 Let Cost=WH.W3[17]                   
   If DFT_COST=2 Let Cost=WH.W3[14]                   
   If DFT_COST=3 Let Cost=WH.W3[15]                   
   If DFT_COST=4 Let Cost=WH.W3[16]                   
   If DFT_COST=5 Let Cost=WH.W3[18]                   
Endif                                        
If Cost=0                                       
   If DFT_COST=1 Let Cost=PR.B[8]                     
   If DFT_COST=2 Let Cost=PR.PF_LOAD2                 
   If DFT_COST=3 Let Cost=PR.B[21]                    
   If DFT_COST=4 Let Cost=PR.B[10]                    
   If DFT_COST=5 Let Cost=PR.PR_C4[4]                    
Endif   

!cost                                                                
Let CNVTA=Cost                !cost/price/qty                           
Let CNVTU[0]=0                !current unit                             
Let CNVTU[1]=costunit         !desired unit                             
Let CNVTU[2]=2                !mode 1=qty 2=cost/price                  
Let cost=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 


!====================vendor                                                     
Temp$=" ",Temp$;Vend$=" ",Vend$                                                 
VNK$=PR.B[24] Using "######"                                                    
Temp$=VNK$                                                                      
Search #VNC,2,1;VNK$,VNR,VNE                                                    
If VNK$[1,6]<>Temp$[1,6] Let VNE=22                                             
If debugDetail                                                                  
   msg$="doing...Search #VNC: VNK$="+VNK$+" VNR="+VNR \ Call updatelog(debug)   
   If VNE msg$="error...Search error "+VNE  \ Call updatelog(debug)          
Endif                                                                           
If VNE=0 Then                                                                   
   Mat Read #VNC,VNR;Vend$;                                                     
Else                                                                            
   Vend$="-NOF-"                                                                
End If                                                                          


!set
sh.Product$      = PR.A$[140,151]            
sh.Description1$ = ReplaceChar$(PR.A$[9,38]) 
sh.Description2$ = ReplaceChar$(PR.A$[63,92])
sh.Vendor$       = PR.B[24] using "######"   
sh.VendorName$   = Vend$                     
if cost_lev[2]	! po security
	sh.PoCost$       = pocost using Emask$ + " / " + XUNIT$(purchunit,CCC)
	sh.NetCost$      = netcost using Emask$ + " / " + XUNIT$(costunit,CCC)
endif
if cost_lev[1]	! load security
	sh.Cost$         = cost using Emask$ + " / " + XUNIT$(costunit,CCC)
endif
sh.Qty1$         = qty[1] using Qmask$          
If P60$[26,26]="Y" then    !inventory levels
   sh.Qty2$         = qty[2] using Qmask$       
   sh.Qty3$         = qty[3] using Qmask$       
Else
   sh.Qty2$         = "N"
   sh.Qty3$         = "N"
Endif
sh.Qty4$         = qty[4] using Qmask$       
sh.Qty5$         = qty[5] using Qmask$       
sh.Qty6$         = qty[6] using Qmask$
sh.Qty7$         = qty[7] using Qmask$
sh.QtyUM$        = XUNIT$(sellunit,CCC)     
sh.Whse$         = whichwhse using "##"      


Let ONPO=0
Let PDK$=" ",PDK$;PDK$[1,6]=PRR using "######"  
getPoline: !=============================================================
Search #PDC,3,2;PDK$,PDR,PDE
If Val(PDK$[1,6])<>PRR then let PDE=22 
If PDE goto getSprodlot:

If debugDetail                                                               
   msg$="doing...Search #PDC: PDK$="+PDK$+" PDR="+PDR \ Call updatelog(debug)
   If PDE msg$="error...Search error "+PDE  \ Call updatelog(debug)          
Endif                                                                        

If PDE                        
   Clear PD.                  
Else                          
   Read Record #PDC,PDR; PD.; 
Endif


!check
!Call $LOGIC,1,2^0,PD.L1[3],nonstock                                  
If nonstock then       goto getPoline:    !nonstock          
If PD.L1[0]=3 then     goto getPoline:    !line closed/filled 
If PD.L1[1]<>whichwhse goto getPoline:    !check whse
If PD.L1[0]>5 then     goto getPoline:    !      
If PD.L3[3]>=PD.L3[2]  goto getPoline:    !

PHR=PD.L3[0]
If PHR                        
   Read Record #PHC,PHR; PH.; 
Else
   Clear PH.
Endif                         

!more check
If Val(PDK$[7,12])<>PH.H0[2]   goto getPoline:  !po# don't match     
If PH.H0[0]>=7 and PH.H0[0]<91 goto getPoline:  !status check                 
If not(PD.POMISC[0])           goto getPoline:  !no stock update/ignore 

LET ONPO=ONPO+(PD.L3[2]+PD.PL4[1]-(PD.L3[3]))   


!PD.L3[xx]                                                                   
For xx=2 to 4                                                                
   Let CNVTA=PD.L3[xx]           !cost/price/qty                             
   Let CNVTU[0]=0                !current unit                               
   Let CNVTU[1]=sellunit        !desired unit                               
   Let CNVTU[2]=1                !mode 1=qty 2=cost/price                    
   Let PD.L3[xx]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 
Next xx                                                                      


VNR=PH.H0[1]
If VNR Then                                                                   
	Mat Read #VNC,VNR;Vend$;                                                   
Else                                                                            
    Vend$="-NOF-"                               
End If                                                                          


For xx = 0 to maxvar          
	Let col$[xx]=" ",col$[xx] 
Next xx                       


col$[1]="PO"                             !        
col$[2]=PDK$[7,12]                       !po
col$[3]=PDK$[13,15]                      !line
col$[4]=PH.H3[3] using "######"          !vendor
col$[5]=PD.L1[1] using "##"              !whse 
col$[6]=PD.L3[2] using Qmask$            !qty ordered    
col$[7]=PD.L3[3] using Qmask$            !qty received        
col$[8]=PD.PL4[4] using Qmask$           !qty b/o
col$[9]=Pdate$(PH.H0[4])                 !due date 
col$[10]=poStatus$[PH.H0[0]]             !status
col$[11]=PHR using "######"              !reserved for PO (pohead rec#)  
col$[12]=" "                             !reserved for SO (Security)
col$[13]=" "                             !reserved for SO (cust#)

If ii<iLimit then                                                               
   sl1.[ii].col1$  = col$[1]            
   sl1.[ii].col2$  = col$[2]                        
   sl1.[ii].col3$  = col$[3]                 
   sl1.[ii].col4$  = col$[4]                             
   sl1.[ii].col5$  = col$[5]                        
   sl1.[ii].col6$  = col$[6]                                     
   sl1.[ii].col7$  = col$[7]                                                    
   sl1.[ii].col8$  = col$[8]
   sl1.[ii].col9$  = col$[9]
   sl1.[ii].col10$  = col$[10]
   sl1.[ii].col11$  = col$[11]
   sl1.[ii].col12$  = col$[12] 
   sl1.[ii].col13$  = col$[13] 
   ii=ii+1                                                                      
Endif        
Goto getPoline:


getSprodlot: !==========================================================
Let PLK$=" ",PLK$;PLK$[1,12]=Trim$(Prod$);PLK$[13,14]=whichwhse using "##"
nextSprodlot: ! ===========================
Search #PLC,3,4;PLK$,PLR,PLE
If Trim$(PLK$[1,12])<>Trim$(Prod$) then let PLE=22
If Val(PLK$[13,14])<>whichwhse then let PLE=22
If PLE then goto LoadMe:

If debugDetail                                                                
   msg$="doing...Search #PLC: PLK$="+PLK$+" PLR="+PLR \ Call updatelog(debug) 
   If PLE msg$="error...Search error "+PLE  \ Call updatelog(debug)           
Endif                                                                         

If PLE
   Clear PR.
Else
   Read Record #PLC,PLR; PL.;
Endif

For xx=0 to 4
   !PL.P3[xx]                                                                  
   If xx=2 then let xx=3
   Let CNVTA=PL.P3[xx]            !cost/price/qty                          
   Let CNVTU[0]=0                !current unit                            
   Let CNVTU[1]=sellunit        !desired unit                            
   Let CNVTU[2]=1                !mode 1=qty 2=cost/price                 
   Let PL.P3[xx]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)   
Next xx

!onpo                                                               
Let CNVTA=onpo                !cost/price/qty                       
Let CNVTU[0]=0                !current unit                         
Let CNVTU[1]=sellunit        !desired unit                         
Let CNVTU[2]=1                !mode 1=qty 2=cost/price              
Let onpo=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)

!PL.PLTR                                                                
Let CNVTA=PL.PLTR             !cost/price/qty                            
Let CNVTU[0]=0                !current unit                               
Let CNVTU[1]=sellunit        !desired unit                               
Let CNVTU[2]=1                !mode 1=qty 2=cost/price                    
Let PL.PLTR=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 


For xx = 0 to maxvar
    Let col$[xx]=" ",col$[xx]
Next xx

col$[1]="STOCK"
col$[2]=Trim$(PLK$[15,26])
col$[3]=Trim$(PLK$[37,42])
col$[4]=(PL.P3[0]-PL.P3[1]) using Qmask$             !qty onhand
col$[5]=(PL.P3[0]-PL.P3[1]-PL.P3[3]) using Qmask$    !qty allocated
col$[6]=PL.P3[4] using Qmask$                        !qty on b/o
col$[7]=ONPO using Qmask$                            !qty on po
col$[8]=" "
col$[9]=PL.PLTR using Qmask$                         !qty on trans
col$[10]=" "
col$[11]=" "                             !reserved for PO (pohead rec#)
col$[12]=" "                             !reserved for SO (Security)   
col$[13]=" "                             !reserved for SO (cust#)      

If ii<iLimit then           
   sl1.[ii].col1$  = col$[1]  
   sl1.[ii].col2$  = col$[2]  
   sl1.[ii].col3$  = col$[3]  
   sl1.[ii].col4$  = col$[4]  
   sl1.[ii].col5$  = col$[5]  
   sl1.[ii].col6$  = col$[6]  
   sl1.[ii].col7$  = col$[7]  
   sl1.[ii].col8$  = col$[8]
   sl1.[ii].col9$  = col$[9]
   sl1.[ii].col10$  = col$[10]
   sl1.[ii].col11$  = col$[11] 
   sl1.[ii].col12$  = col$[12] 
   sl1.[ii].col13$  = col$[13] 
   ii=ii+1
Endif                       


Let SLK$=" ",SLK$;SLK$[1,12]=PL.P0$[1,12]
nextSordlot: !========================================================== 
Search #SLC,3,1;SLK$,SLR,SLE                                                    
If SLK$[1,12]<>PL.P0$[1,12] then let SLE=22                     
If SLE then goto nextSprodlot:    
If SLK$[22,23]<>WHSE$ then goto nextSordlot:

If debugDetail                                                                  
   msg$="doing...Search #SLC: SLK$="+SLK$+" SLR="+SLR \ Call updatelog(debug)   
   If SLE msg$="error...Search error "+SLE  \ Call updatelog(debug)             
Endif                                                                           

If SLE                                                                          
   Clear SL.                                                                    
Else                                                                            
   Read Record #SLC,SLR; SL.;                                                   
Endif                                 

If SL.OL1[1]<>2 and SL.OL1[1]<>3 and SL.OL1[1]<>5 then goto nextSordlot:
Let OHK$=" ",OHK$
Let OHK$[1,6]=SL.OL2[2] using "######"
Let OHK$[7,12]=SL.OL2[0] using "######" 
Let Temp$=" ",Temp$;Temp$=OHK$                                                  
getRoh: !==========================================================        
Search #OHC,2,2;OHK$,OHR,OHE                                                    
If OHK$[1,12]<>Temp$[1,12] then let OHE=22                                      
If OHE then goto nextSordlot:                                                  

If debugDetail                                                                  
   msg$="doing...Search #OHC: OHK$="+OHK$+" OHR="+OHR \ Call updatelog(debug)   
Endif                                                                           

If OHE                                                                          
   Clear OH.                                                                    
Else                                                                            
   Read Record #OHC,OHR; OH.;                                                   
Endif                                                                           

If OH.H5[7]=16 and SL.OL1[2]=OH.H5[11] then goto nextSordlot: 
Let ODK$=SLK$[13,21]
Let Temp$=" ",Temp$;Temp$=SLK$[13,21]
getRol: !===========================================================
Search #ODC,2,1;ODK$,ODR,ODE                                                    
If ODK$[1,9]<>Temp$[1,9] then let ODE=22                                 
If ODE Goto getRoh:

If debugDetail                                                                  
   msg$="doing...Search #ODC: ODK$="+ODK$+" ODR="+ODR \ Call updatelog(debug)   
   If ODE msg$="error...Search error "+ODE  \ Call updatelog(debug)             
Endif                                                                           
Read Record #ODC,ODR,0;OD.;


!SL.OL3[0]
Let CNVTA=SL.OL3[0]           !cost/price/qty                           
Let CNVTU[0]=0                !current unit                             
Let CNVTU[1]=sellunit        !desired unit                             
Let CNVTU[2]=1                !mode 1=qty 2=cost/price                  
Let SL.OL3[0]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 

!SL.OL3[1]                                                                
Let CNVTA=SL.OL3[1]           !cost/price/qty                             
Let CNVTU[0]=0                !current unit                               
Let CNVTU[1]=sellunit        !desired unit                                
Let CNVTU[2]=1                !mode 1=qty 2=cost/price                    
Let SL.OL3[1]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 

!SL.OL3[3]                                                                
Let CNVTA=SL.OL3[0]           !cost/price/qty                             
Let CNVTU[0]=0                !current unit                               
Let CNVTU[1]=OD.UN[0]         !desired unit                               
Let CNVTU[2]=1                !mode 1=qty 2=cost/price                    
Let SL.OL3[3]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 


For xx = 0 to maxvar           
	Let col$[xx]=" ",col$[xx]  
Next xx                        


If SL.OL1[1]=1 then col$[1]="WO "
If SL.OL1[1]=3 then col$[1]="CM "
If SL.OL1[1]=4 then col$[1]="DM "
IF SL.OL1[1]=5 then col$[1]="AV "
If SL.OL1[1]=2 and SL.OL3[4]=0 and OH.H5[7]<>16 then col$[1]="SO "
If SL.OL1[1]=2 and SL.OL3[4]=0 and OH.H5[7]=16  then col$[1]="TR "
If SL.OL1[1]=2 and SL.OL3[4]<>0                 then col$[1]="TR "

col$[2]=Str$(SL.OL2[0])                               !ord#
col$[3]=Str$(SL.OL1[0])                               !line#
col$[4]=Str$(SL.OL2[2])                               !cust
col$[5]=Str$(SL.OL1[2])                               !whse
col$[6]=SL.OL3[0] using Qmask$                        !qty required
col$[7]=SL.OL3[0]-(SL.OL3[0]-SL.OL3[1]) using Qmask$  !qty fulfilled 
col$[8]=SL.OL3[0]-SL.OL3[1] using Qmask$              !b/o     
col$[9]=Pdate$(OH.H0[10])                             !shipdate 
col$[10]=ordStatus$[OH.H0[0]]                         !status
col$[11]=" "                             !reserved for PO (pohead rec#) 
If intSalesMan=OH.H0[11]                 !reserved for SO (Security) 
   col$[12]="Y"
Else
   col$[12]="N"
Endif
col$[13]=Str$(SL.OL2[2])                 !reserved for SO (cust#)

If ii<iLimit then                                                               
   sl1.[ii].col1$  = col$[1]  
   sl1.[ii].col2$  = col$[2]  
   sl1.[ii].col3$  = col$[3]  
   sl1.[ii].col4$  = col$[4]  
   sl1.[ii].col5$  = col$[5]  
   sl1.[ii].col6$  = col$[6]  
   sl1.[ii].col7$  = col$[7]  
   sl1.[ii].col8$  = col$[8]
   sl1.[ii].col9$  = col$[9]
   sl1.[ii].col10$  = col$[10]
   sl1.[ii].col11$  = col$[11] 
   sl1.[ii].col12$  = col$[12]
   sl1.[ii].col13$  = col$[13] 
   ii=ii+1                                                                      
Endif                                                                           

Goto nextSordlot:


LoadMe: !===============================================================
For xx = 0 to maxvar          
	Let col$[xx]=" ",col$[xx] 
Next xx                       

If ii<iLimit then                 
  sl1.[ii].col1$  = col$[1]      
  sl1.[ii].col2$  = col$[2]      
  sl1.[ii].col3$  = col$[3]      
  sl1.[ii].col4$  = col$[4]      
  sl1.[ii].col5$  = col$[5]      
  sl1.[ii].col6$  = col$[6]      
  sl1.[ii].col7$  = col$[7]      
  sl1.[ii].col8$  = col$[8]      
  sl1.[ii].col9$  = col$[9]      
  sl1.[ii].col10$  = col$[10]    
  sl1.[ii].col11$  = col$[11]    
  sl1.[ii].col12$  = col$[12]    
  sl1.[ii].col13$  = col$[13]    
  ii=ii+1                        
Endif                             


OutEnd: !===============================================================
Close #CTLC,#WHC,#PRC,#VNC,#CMC,#CTC,#CCC,#SLC,#PHC,#PDC,#OHC,#ODC
msg$="doing...end of "+pgmName$ \ Call updatelog(debug)
ss=ErrStat
Exit Sub
Else
    ss=SpC(10)
    Call errTrap(pgmName$)
End Try


Sub updatelog(debug)                                        
    If not(debug) Exit Sub                                    
	System "echo ''" + msc$(0) + " " + msg$ + "'' >> " + dlog$
End Sub       


Sub errTrap(pgmName$)
  msg$="error...",Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ",pgmName$
  Call updatelog(1)
End Sub

ss=ErrStat
End Sub
