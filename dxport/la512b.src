! >>> Program LA512b
!
! description Accounts Payable Purchase Journal - Update Monthly Files
!
! loadsave -w -n 100,10 -o prog/dxport/la512b.dl4 src/la512b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx


Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC  4, 2008  09:17:51
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/la512b.src (univ2) [mary] {34865}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub FileInfo,FindF,InpBuf,String
Option Default Dialect IRIS1
Rem LA512B - PURCHASE JOURNAL PT#4 MONTHLY PURCHASE JOURNAL
Rem LAST UPDATE: MTG 5/91 FOR MULTIPLE USERS
Declare Intrinsic Sub FindF,InpBuf,String
! Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Try
  Enter spec[],message$,IntCo,rstr$,e$ 
  dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
  dim e$[500]!,message$[600]
	dIM GROUPID$[1]
	Dim 2%,C4[4],3%,Q[2],T2[3],2%,B4[1]
	Dim 1%,PRGNUM,EFLAG,RETURNSTATUS
	DIM 3%,REC_UAC
Comp = spec[0] ! company #                     
intCo = spec[0]                                
C4[0] = spec[1] ! CURRENT/NEXT MONTH
C4[1]= spec[2] ! POSTING PERIOD                              
C4[2] = spec[3]  ! POSTING date (mmddyy)                            
C4[3] = spec[4] !  LOGICAL UNIT NUMBER FOR A10IN
C4[4] = SPEC[5] ! POSTING DATE YYMMDD
B4[1] = SPEC[6] !BATCH NUMBER /JRNL # IF NOT IN BATCH MODE
B4[0] = SPEC[2] ! POSTING PERIOD
PRGNUM=SPEC[7] ! PROGRAM NUMBER
rec_uac = spec[8]                              
returnstatus = spec[9] 
eflag=spec[10]
t2[0]=spec[11]
t2[1]=spec[12]
t2[2]=spec[13]
t2[3]=spec[14]
!If Err 0 Gosub ERR_TRAP
dim 2%,nsfmcode,3%,nsfmcost,NSFRT1[1],P61$[256],keyrol$[50],1%,ol3[3],2%,OL4[3],3%,rec_rol,PL4[23],EXTNSFRTCOST
dim 3%,CFIN[8],keyroh$[30]
dim 1%,lchan[99]
Dim KD$[34],KB$[80],2%,KA[25],KD[128,1],MKEYSIZE
Dim 1%,B5[1],C,C0[6],D2[2],E,E8,I,M[2],M6[2],O1[2],O4[1],X1,RESTART,M5,SPO
Dim 2%,D[1],M1[7],M3[2],O2[6],X2,VT0[1],PCT1[5]
Dim 2%,COMP
Dim 3%,B6[3],A2[11],D1[1],M2[5],M4,O3[11],T[3],VT1[14],PCT4[1],PCT5[9],R[50]
Dim K1$[30],K2$[30],K4$[30],K9$[30],K14$[30],M3$[12],O$[6],O1$[12],R$[63],X$[10],2%
Dim Q$[9],2%
Dim 1%,H4[3],L1[5],PL0[4],NSD1[7],APH1[2],APL1[5],X0[9],PCT3[2],APH3[4]
Dim 1%,POMISC[2],FLAGS[11],APL3
Dim 2%,H0[5],H3[4],PH[4],L2[2],B[24],NSD2[4],APH0[2],APL0[2],PORTNUM
Dim 2%,Q0[1],G9[3]
Dim 3%,H8[9],PL[5],L3[6],A3[7],NSD3[9],APH2[2],APL2[6],DIVTOT[3],PO3[12],APH4[4]
Dim 3%,APL4[2],PCT8[10]
Dim 3%,POCOST,POQTY,CURRQTY,POFREIGHT,T8[1],T6[1],T7[1],PCT2[5],APCHRG
Dim H8$[82],H1$[116],L1$[104],A1$[156],NSD$[96],APH$[12],APL$[12]
Dim K50$[10],DV1$[12],DV2$[12],F$[16],K38$[30],U5$[30]
Dim U9$[131],PMASK$[12],M1$[14],K22$[40],K21$[40],K32$[40],K31$[40]
Dim K3$[30],G8$[2],K23$[40],KEY21$[50],P9$[50]
Dim 2%,POSTDATE,POSTPER
Dim 2%,nsfmcode,3%,nsfrt1[1],1%,nsfrtflag
dim 3%,PARM[20],ORGSHIPAMT,ORGFREIGHT,ORGOTHER,OLDREC,OLDORDNUM,NEWREC,ORDREC
DIM 2%,TH0[12]
Dim 1%,TDCLVL,TMCTX[9],pchan[99],oldholdcodeflag[12],holdcodeflag[12]
Dim 2%,TMCD[9],TT1[1]
Dim 3%,TMCHRG[9,1],TT2[25],TTOT[4],th1
dim 3%,tmp3
dim fname$[50],P60$[50]
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
RESTART = 0 \ PORTNUM = rec_uac
!G9[0] = Spc(5) \ G9[1] = Int(G9[0] / 16384) \ G9[2] = Int((G9[0] - G9[1] * 16384) / 64)
!G9[3] = G9[0] - (G9[1] * 16384 + G9[2] * 64) \ G8$[1,1] = G9[2] Using "#"
!G8$[2,2] = G9[3] Using "#"
G8$[1,1]=intco using "#"
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
g8$[2,2]=groupid$
Rem MAT  READ #1,51,76;SPO;
Goto L_800 ! remover for restart
Rem ****RESTART SECTION****
RESTART = 99
Rem LET C4[0]=CURRENT =0  OR NEXT MONTH =1
Rem LET C4[1]=POSTING PERIOD (YYMM)
Rem LET C4[2]=POSTING DATE (MMDDYY)
Rem LET C4[3]=LOGICAL UNIT NUMBER FOR A10IN
Rem LET C4[4]=POSTING DATE (YYMMDD)
Rem B4[1]=BATCH NUMBER
B4 = C4[1]
Rem T2[0]=ACCOUNTS PAYABLE AMOUNT
Rem T2[1]=CREDIT MEMO AMOUNT
Rem T2[2]=SUSPENSE AMOUNT
Rem PORT=port number that had error
!X2 = Spc(5)
!COMP = Int((X2 - Int(X2 / 16384) * 16384) / 64)
F$ = COMP Using "cntrl/CNTRL#"
Open #1,F$
Mat Read #1,51,18;C0;
Mat Read #1,51,76;SPO;
Mat Read #1,19,50;P9$;
Mat Read #1,88,16;F$; \ Open #15,F$
Mat Read #1,88,48;F$; \ Open #16,F$
K2$ = " 0" \ Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif
Mat Read #15,R[15],2;R$;
F$ = R$[31,31],"/A80VM",G8$[1,2] \ Open #2,F$
F$ = R$[53,53],"/A20OI",G8$[1,2] \ Open #3,F$ \ Ropen #60,F$
F$ = R$[54,54],"/A20DI",G8$[1,2] \ Open #4,F$
F$ = R$[55,55],"/A20DD",G8$[1,2] \ Open #5,F$
F$ = R$[58,58],"/A10VL",G8$[1,2] \ Open #6,F$
Mat Read #1,88,432;F$; \ Open #10,F$
X$ = C4[1] Using "&&&&"
F$ = R$[33,33],"/AM0DO",G8$[1,2],X$[1,4] \ Open #7,F$
F$ = R$[34,34],"/AM0DD",G8$[1,2],X$[1,4] \ Open #8,F$
If P9$[17,17] <> "Y"
  R$[60,60] = C4[3] Using "#"
  F$ = R$[60,60],"/A10IN",G8$[1,2],X$[1,4] \ Open #11,F$
End If 
If C0[3]<>0
	F$ = R$[45,45],"/APBTH",G8$[1,2] \ Open #14,F$
endif
If Not(C0[4])
	F$ = R$[5,5],"/APPOH",G8$[1,2] \ Open #21,F$
	F$ = R$[6,6],"/APPOL",G8$[1,2] \ Open #22,F$
	F$ = COMP Using "2/APPOHH#" \ Open #23,F$
	F$ = COMP Using "2/APPOLH#" \ Open #24,F$
	For X1 = 31 To 37
	 Read J \ If J = -1 Goto L_530
	Read #1,88,J;F$; \ Open #X1,F$
	L_530: Next X1
	Data "2416"," 2432"," 1792"," 2768"," 1728"," 2448"," 1120"
	If SPO
	 !X2 = Spc(5)
	!COMP = Int((X2 - Int(X2 / 16384) * 16384) / 64)
		F$ = COMP Using "2/POCTFLE#" \ Open #38,F$
	End If 
endif
L_600: ! get info
K2$ = "10" \ Search #15,2,1;K2$,R[15],E \ If E Gosub ERR_SEARCH
Read #15,R[15],6;Q$; \ Q[0] = Q$
Read #15,R[15],24;Q$; \ Q[1] = Q$
Read #15,R[15],150;Q$; \ Q[2] = Q$
If (C0[6]) <>0
	F$ = R$[1,1],"/APDIV",G8$[1,2] \ Open #17,F$
	F$ = R$[2,2],"/APVDV",G8$[1,2] \ Open #18,F$
	If Not(PORTNUM) Let PORTNUM = rec_uac
	F$ = PORTNUM Using "2/APPJTEMP&&&&"
	Call FindF(F$,A9) 
	if not (a9)
		eflag=eflag+1
		message$=message$+"DIVISION TEMP FILE NOT FOUND FOR PORT "+str$(PORTNUM)
		goto err_search:
		!Print @0,23;'CL';"DIVISION TEMP FILE NOT FOUND FOR PORT ";PORTNUM; \ Gosub ERR_TRAP
	endif
	Open #50,F$
endif
L_800: ! START HERE
Mat Read #1,51,18;C0;
Mat Read #1,51,76;SPO;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
MAT READ #1,61,0;P61$;
LET NSFMCODE=0
IF P61$[132,132]="Y"
	MAT READ #1,52,104;NSFMCODE;
	if nsfmcode<0 or nsfmcode>999
		let nsfmcode=0
	endif
endif
! OPEN ADDITIONAL FILES
IF SPO<>0 ! AP/PO CONTROL NUMBER IN USE
	! ADDITIONAL CHANNELS FOR LACALCCOST
	If P60$[9,9] = "F"
		chnl=findchannel() !Gosub GETCHAN
		CH_FIFOL = CHNL
		Read #1,88,3008;FNAME$;
		Open #CH_FIFOL,FNAME$
		chnl=findchannel() !Gosub GETCHAN
		CH_FIFOT = CHNL
		Read #1,88,3024;FNAME$;
		Open #CH_FIFOT,FNAME$
	End If
	ch_roh=findchannel()
	Read #1,88,1840;FNAME$;
	open #ch_roh,fname$

	ch_rol=findchannel()
	Read #1,88,1888;FNAME$;
	open #ch_rol,fname$

	ch_rot=findchannel()
	Read #1,88,1872;FNAME$;
	Open #ch_rot,fname$
	
	ch_ros=findchannel()
	Read #1,88,1856;FNAME$;
	Open #ch_ros,fname$
	
	ch_cust=findchannel()
	read #1,88,1808;fname$;
	Open #ch_cust,fname$
	
	ch_zone=findchannel()
	read #1,88,1920;fname$;
	Open #ch_zone,fname$
	
	ch_sot=findchannel()
	FNAME$ = COMP Using "3/SORDTYPE#"
	Ropen #CH_SOT,FNAME$	
	IF P61$[132,132]="Y" and NSFMCODE<>0
		LET CH_PRODDESC=findchannel()
		read #1,88,2128;FNAME$;
		OPEN #CH_PRODDESC,FNAME$

		ch_commcode=findchannel()
		read #1,88,2288;fname$;
		Open #ch_commcode,fname$

		ch_slsm=findchannel()
		read #1,88,1824;fname$;
		Open #ch_slsm,fname$

		ch_taxcode=findchannel()
		read #1,88,2176;fname$;
		Open #ch_taxcode,fname$
		
		ch_sprodlot=findchannel()
		read #1,88,2528;fname$;
		Open #ch_sprodlot,fname$
		
		ch_sordlot=findchannel()
		read #1,88,2320;fname$;
		Open #ch_sordlot,fname$

		ch_ccode=findchannel()
		read #1,88,1728;fname$;
		Open #ch_ccode,fname$
	endif
ENDIF
K2$ = " 0" \ Search #15,2,1;K2$,R[15],E
If e<>0
	gosub err_search:
   !Print @0,23;'CL RB';"RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
End If 
Mat Read #15,R[15],2;R$;
K2$ = "10" \ Search #15,2,1;K2$,R[15],E \ If E Gosub ERR_SEARCH
Read #15,R[15],6;Q$; \ Q[0] = Q$
Read #15,R[15],24;Q$; \ Q[1] = Q$
Read #15,R[15],150;Q$; \ Q[2] = Q$
Rem! find key size of am0do file
X$ = C4[1] Using "&&&&"
F$ = R$[33,33],"/AM0DO",G8$[1,2],X$[1,4]
KB$ = F$
Call FileInfo(KD$,KA[],KB$,1,KD[])
MKEYSIZE = KD[1,0]
POSTDATE = C4[4];POSTPER = C4[1]
If Not(C0[3]) Goto L_900
K14$ = " ",K14$ \ K14$[1,4] = B4 Using "####"
K14$[5,10] = B4[1] Using "######"
Search #14,2,1;K14$,R[14],E \ If E Gosub ERR_SEARCH
Mat Read #14,R[14],0;B4;
Mat Read #14,R[14],8;B5;
Mat Read #14,R[14],12;B6
If B5 <> 4 Gosub ERR_SEARCH
let tmp3=k14$[1,4]
if not(b4[0]) let b4[0]=tmp3
if b4[0]<>tmp3 gosub err_search
let tmp3=k14$[5,10]
if not (b4[1]) let b4[1]=tmp3
if b4[1]<>tmp3 gosub err_search

L_900: ! Print "UPDATING A/P MONTHLY FILES --- PLEASE WAIT!!!"
For I = 0 To 3 \ T[I] = 0 \ Next I
K1$ = " ",K1$
L_1020: Search #60,3,1;K1$,R[3],E
If E = 2 Goto L_1500
If E Gosub ERR_SEARCH
Mat Read #60,R[3],0;O$;
Mat Read #60,R[3],40;O3;
If Not(C0[3]) Goto L_1090
If O3[9] <> B4[1] Goto L_1020
If O3[8] <> B4[0] Goto L_1020
L_1090: If O$[2,2] <> "4" Goto L_1020
If O$[1,1] <> "0" If O$[1,1] <> "9" Goto L_1020
Gosub L_2000
If C0[4] Gosub L_6100
Gosub L_6000
If C0[6] Gosub L_6400
Gosub L_2100
Gosub L_2200
Gosub L_2300
K4$ = " ",K4$ \ K4$[1,5] = R[3] Using "#####"
L_1170: Search #4,3,1;K4$,R[4],E \ If E = 2 Goto L_1300
If E Gosub ERR_SEARCH
Mat Read #4,R[4],0;D; \ If D <> R[3] Goto L_1300
Mat Read #4,R[4],32;D2; \ If D2[2] <> 3 Goto L_1170
Mat Read #4,R[4],20;D1 \ If Not(D1[1]) Goto L_1240
T[0] = T[0] + D1[1]
Gosub L_2500
L_1240: D2[2] = 4 \ Mat Write #4,R[4],32;D2;
Search #4,5,1;K4$,R[4],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #4,1,0;K4$,R[4],E \ If E Gosub ERR_SEARCH
Goto L_1170
L_1300: Rem CHANGE OPEN ITEM STATUS
If O$[1,1] <> "9" Goto L_1350
I = O$[5,5]
If O3[5] <> 0 Or O3[7] <> 0 Goto L_1310
If C4 = I Goto L_1325
L_1310: O$[1,1] = "6"
If C4 = I And C4 = 0
  O3[0] = 0
  Mat Write #3,R[3],40;O3
End If 
Mat Write #3,R[3],0;O$; \ Goto L_1390
Rem ENTER CURRENT MONTH - DELETE CURRENT MONTH
L_1325: Search #3,5,1;K1$,R[3],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #3,1,0;K1$,R[3],E \ If E Gosub ERR_SEARCH
Goto L_1390
L_1350: Rem OPEN ITEM
Search #10,2,1;K1$,R[10],E \ If E Gosub ERR_SEARCH
Write #10,R[10],24;C4[4];
O$[1,1] = "1" \ O$[2,2] = "5"
O$[5,5] = C4 Using "#"
Mat Write #3,R[3],0;O$;
L_1390: Goto L_1020
L_1500: Rem POST TOTALS
If RESTART Let T[1] = T2[0] + T2[1] \ T[0] = - (T2[0] + T2[1]) + T2[2]
R[7] = 0 \ M1 = 999999 \ M1[1] = C4[4] \ O1$ = " ",O1$
If C0[6] Goto L_1535
If Not(T[1]) Goto L_1535
D1 = Q[0] \ D1[1] = T[1]
Gosub L_2500
L_1535: If Not(T[0] + T[1]) Goto L_1565
D1 = Q[2] \ D1[1] = - (T[0] + T[1])
Gosub L_2500
let eflag=eflag+1
let message$=message$+"Suspense Posting Made in Mo. Purchase Journal"
!Print @0,21;'CL RB';"SUSPENSE POSTING HAS BEEN MADE IN MO. PURCHASE JOURNAL"
!Print @0,23;'CL RB';"PRESS <CR> TO CONTINUE: ";
!Input ""F$
L_1565: If Not(C0[6]) Goto L_8100
K50$ = " ",K50$
L_1605: Search #50,3,1;K50$,R[50],E \ If E = 2 Goto L_1695
If E Gosub ERR_SEARCH
Mat Read #50,R[50],0;DIVTOT;
Search #17,2,1;K50$,R[17],E \ If Not(E) Goto L_1640
If E > 1 Gosub ERR_SEARCH
DV1$[1,12] = Q[0] Using "#########   " \ DV2$[1,12] = Q[1] Using "#########   "
Goto L_1645
L_1640: Mat Read #17,R[17],42;DV1$; \ Mat Read #17,R[17],54;DV2$;
L_1645: If Not(DIVTOT[0]) Goto L_1655
D1[1] = DIVTOT[0] \ D1 = DV1$[2,9] \ O4[1] = K50$[1,2] \ Gosub L_2500
L_1655: If Not(DIVTOT[1]) Goto L_1665
D1[1] = DIVTOT[1] \ D1 = DV2$[2,9] \ O4[1] = K50$[1,2] \ Gosub L_2500
L_1665: Goto L_1605
L_1695: Goto L_8100
L_2000: Rem READ OPEN ITEMS
Mat Read #3,R[3],0;O$;
Mat Read #3,R[3],6;O1;
Mat Read #3,R[3],12;O2;
Mat Read #3,R[3],40;O3;
Mat Read #3,R[3],100;O1$;
Mat Read #3,R[3],112;O4
Return 
L_2100: M[0] = O1[0]
If O$[1,1] = "9" Let M[0] = 4
For I = 1 To 2
  M[I] = O1[I]
Next I
M1[0] = O2[0] \ M1[1] = C4[4]
For I = 2 To 6
  M1[I] = O2[I]
Next I
M1[7] = O2[1]
For I = 0 To 5
  M2[I] = O3[I]
Next I
M6[0] = O4[0] \ M6[1] = O4[1]
Return 
L_2200: Rem CALCULATE TOTALS
If O$[1,1] = "9" Let T[1] = T[1] + O3[0]
If O$[1,1] <> "9" Let T[1] = T[1] - O3[0]
Return 
L_2300: Rem UPDATE MONTHLY P/J
E = 2
Search #7,1,0;K2$,R[7],E
If E Gosub ERR_SEARCH
Mat Write #7,R[7];M;
Mat Write #7,R[7],6;M1;
Mat Write #7,R[7],38;M2;
Mat Write #7,R[7],74;M6;
Mat Write #7,R[7],80;O1$;
K2$ = " ",K2$
K2$[1,6] = M1 Using "######"
K2$[7,18] = O1$[1,12]
K2$[19,20] = M[0] Using "##"
If MKEYSIZE <> 26
  K2$[21,24] = R[7] Using "####"
Else 
  K2$[21,26] = R[7] Using "######"
End If 
D = 1
Search #7,4,1;K2$,R[7],E
If E Gosub ERR_SEARCH
Return 
L_2500: Rem UPDATE AM0DD
K2$ = " ",K2$
E = 2
Search #8,1,0;K2$,R[8],E
If E Gosub ERR_SEARCH
M3 = R[7] \ M3[1] = M1 \ M3[2] = M1[1]
M3$ = D1 Using "########"
M4 = D1[1] \ M5 = O4[1]
Mat Write #8,R[8];M3;
Mat Write #8,R[8],12;M3$;
Mat Write #8,R[8],20;M4;
Mat Write #8,R[8],38;O1$;
Mat Write #8,R[8],50;M5;
K2$ = " ",K2$
K2$[1,6] = M3 Using "######"
K2$[7,14] = D1 Using "########"
K2$[15,20] = R[8] Using "######"
C = 8
D = 1
Search #8,4,1;K2$,R[8],E
If E Gosub ERR_SEARCH
K2$[1,8] = D1 Using "########"
K2$[9,14] = M3[1] Using "######"
K2$[15,20] = R[8] Using "######"
D = 2
Search #8,4,2;K2$,R[8],E
If E Gosub ERR_SEARCH
Return 
L_6000: Rem UPDATE VENDOR FILE
K9$ = " ",K9$ \ K9$ = O2[0] Using "######"
Search #2,2,1;K9$,R[2],E \ If E Gosub ERR_SEARCH
Mat Read #2,R[2],292;A2
If O$[1,1] <> "9" Let A2[2] = A2[2] + O3[0]
If O$[1,1] = "9" Let A2[2] = A2[2] - O3[0]
If C4 Goto L_6050
If O$[1,1] <> "9" Let A2[3] = A2[3] + O3[0] \ A2[5] = A2[5] + O3[0] \ Goto L_6075
If O$[1,1] = "9" Let A2[3] = A2[3] - O3[0] \ A2[5] = A2[5] - O3[0] \ Goto L_6075
Stop 
L_6050: If O$[1,1] <> "9" Let A2[7] = A2[7] + O3[0] \ Goto L_6075
If O$[1,1] = "9" Let A2[7] = A2[7] - O3[0] \ Goto L_6075
Stop 
L_6075: Mat Write #2,R[2],292;A2;
Return 
L_6100: Rem UPDATE PURCHASE ORDERS
If Not(C0[4]) Return 
K21$ = " ",K21$ \ K21$[1,6] = O2[0] Using "######"
K21$[7,18] = O1$[1,12] \ K21$[19,20] = O1 Using "##"
KEY21$ = K21$
SEARCHAPPOH: Search #21,3,1;K21$,R[21],E \ If E = 2 Return 
If E Gosub ERR_SEARCH
If KEY21$[1,20] <> K21$[1,20] Return 
Mat Read #21,R[21],0;APH0; \ Mat Read #21,R[21],12;APH$;
Mat Read #21,R[21],24;APH1; \ Mat Read #21,R[21],30;APH2;
Mat Read #21,R[21],48;APH3; \ Mat Read #21,R[21],58;APH4
If O$[1,1] <> "9"
  Search #23,2,1;K21$,R[23],E \ If E > 1 Gosub ERR_SEARCH
  If E
    E = 2 \ Search #23,1,0;K21$,R[23],E \ If E Gosub ERR_SEARCH
    Gosub WRITEAPPOHH
    Search #23,4,1;K21$,R[23],E \ If E Gosub ERR_SEARCH
    K23$ = " ",K23$;K23$[1,6] = APH0[0] Using "######"
    K23$[7,12] = APH0[1] Using "######";K23$[13,24] = APH$[1,12]
    K23$[25,26] = APH1[0] Using "##"
    Search #23,4,2;K23$,R[23],E \ If E Gosub ERR_SEARCH
  Else 
    Gosub WRITEAPPOHH
  End If 
End If 
K31$ = " ",K31$ \ K31$[1,6] = APH0[2] Using "######"
K31$[7,12] = APH0[1] Using "######"
Search #31,2,2;K31$,R[31],E
If E<>0
  If Not(APH2[0]) And Not(APH2[1]) And Not(APH2[2]) Goto ENDPOCUPDATE:
  if o$[1,1]="9" goto endpocupdate:
  Gosub ERR_SEARCH
Endif
Mat Read #31,R[31],0;H0; \ Mat Read #31,R[31],24;H8$;
Mat Read #31,R[31],106;H1$; \ Mat Read #31,R[31],222;H3;
Mat Read #31,R[31],242;H4;
Mat Read #31,R[31],250;H8; \ Mat Read #31,R[31],310;PH
Mat Read #31,R[31],350;PO3;
K22$ = " ",K22$ \ K22$[1,26] = K21$[1,26]
L_6200: Search #22,3,1;K22$,R[22],E \ If E = 2 Goto L_6335
If E Gosub ERR_SEARCH
If K22$[1,26] <> K21$[1,26] Goto L_6335
Mat Read #22,R[22],0;APL0; \ Mat Read #22,R[22],12;APL$;
Mat Read #22,R[22],24;APL1; \ Mat Read #22,R[22],36;APL2
Mat Read #22,R[22],78;APL3;
Mat Read #22,R[22],92;APL4;
If O$[1,1] <> "9"
  Search #24,2,1;K22$,R[24],E \ If E > 1 Gosub ERR_SEARCH
  If E
    E = 2 \ Search #24,1,0;K22$,R[24],E \ If E Gosub ERR_SEARCH
    Gosub WRITEAPPOLH
    Search #24,4,1;K22$,R[24],E \ If E Gosub ERR_SEARCH
  Else 
    Gosub WRITEAPPOLH
  End If 
End If 
K32$ = " ",K32$ \ K32$[1,6] = APH0[1] Using "######"
K32$[7] = APL1[3] Using "###"
Search #32,2,1;K32$,R[32],E 
if e=1 and o$[1,1]="9" goto ENDPOCUPDATE: ! delete line # not there
If E Gosub ERR_SEARCH
Mat Read #32,R[32];L1; \ Mat Read #32,R[32],12;L2;
Mat Read #32,R[32],24;L3; \ Mat Read #32,R[32],24;L3;
Mat Read #32,R[32],66;L1$; \ Mat Read #32,R[32],66;L1$;
Mat Read #32,R[32],186;PL; \ Mat Read #32,R[32],222;PL0;
Mat Read #32,R[32],376;POMISC;
Mat Read #32,R[32],502;APCHRG
Mat Read #32,r[32],232;PL4;
PL[3] = PL[3] + APL2[0] \ PL[0] = PL[0] - APL2[0]
PL[4] = PL[4] + APL2[2] \ PL[2] = PL[2] - APL2[2]
PL0[0] = APL1[4]
H8[9] = H8[9] + APL2[2]
IF O$[1,1]<>"9"
	APCHRG = APCHRG + APL2[3] + APL2[4]
else
	let apchrg = APCHRG - APL2[3] - APL2[4] \ if apchrg<0 let apchrg=0
endif
Mat Write #32,R[32],186;PL \ Mat Write #32,R[32],222;PL0;
Mat Write #32,R[32],502;APCHRG;
If SPO
  K38$ = " ",K38$;K38$[1,6] = APL0[1] Using "######";K38$[7,12] = APL0[2] Using "######"
  K38$[13,16] = APL1[3] Using "####";U5$ = K38$
  Search #38,3,1;K38$,R[38],E 
  if e<>0 and o$[1,1]="9" goto ENDPOCUPDATE:
  If E Gosub ERR_SEARCH
  If K38$[1,16] <> U5$[1,16] 
	if o$[1,1]="9" goto ENDPOCUPDATE:
	Gosub ERR_SEARCH
  endif
  Mat Read #38,R[38],0;PCT1;
  Mat Read #38,R[38],24;PCT2; \ Mat Read #38,R[38],60;PCT3;
  Mat Read #38,R[38],78;PCT4;
  Mat Read #38,R[38],90;PCT5;
  Mat Read #38,R[38],210;PCT8;
  If C4[0]
    PCT4[0] = PCT4[0] + APL2[0];PCT4[1] = PCT4[1] + APL2[2]
    If Not(PCT1[5]) Let PCT1[5] = C4[4]
	if o$[1,1]<>"9"
		PCT5[6] = PCT5[6] + APL2[3]
		PCT5[7] = PCT5[7] + APL2[4]
	else
		PCT5[6] = PCT5[6] - APL2[3] \ if pct5[6]<0 let pct5[6]=0
		PCT5[7] = PCT5[7] - APL2[4]	\ if pct5[7]<0 let pct5[7]=0
	endif
  End If 
  If Not(C4) Let PCT1[5] = C4[4]
  PCT2[3] = PCT2[3] + APL2[0];PCT2[5] = PCT2[5] - APL2[0];PCT2[4] = PCT2[4] + APL2[2]
  If PCT2[5] < 0 Let PCT2[5] = 0
  PCT3[0] = APL1[4] \ If PCT2[3] >= PCT2[0] Let PCT3[0] = 1
  If PL0[0] Let PCT3[0] = PL0[0]
  If Not(C4[0])
	if o$[1,1]<>"9"
		PCT5[4] = PCT5[4] + APL2[3];PCT5[5] = PCT5[5] + APL2[4]
	else
		PCT5[4] = PCT5[4] - APL2[3];PCT5[5] = PCT5[5] - APL2[4]
		if pct5[4]<0 let pct5[4]=0
		if pct5[5]<0 let pct5[5]=0
	endif
  End If 
  PCT8[2] = PCT8[2] + APL4[0]
  PCT8[9] = PCT8[9] + APL4[2]
  PCT8[10] = PCT8[10] + APL4[1]
  Mat Write #38,R[38],0;PCT1
  Mat Write #38,R[38],24;PCT2 \ Mat Write #38,R[38],60;PCT3
  Mat Write #38,R[38],78;PCT4
  Mat Write #38,R[38],90;PCT5;
  Mat Write #38,R[38],210;PCT8;
  Gosub UNPKFLG
  If O1<>2 and p61$[132,132]="Y" and nsfmcode<>0 and flags[0]<>0 ! not a cm, flag Y, misc code<>0, a nonstock
	gosub Upd_ns_cost:
  endif
  If POMISC[0] = 0 Goto ENDPOCUPDATE
  If FLAGS[0] Goto ENDPOCUPDATE
  If O1 = 2
    If PH[1] <> 0 Goto ENDPOCUPDATE
    If H3[4] = 0 Goto ENDPOCUPDATE
  End If 
  updatecost: ! update cost here
  CH_POC = 38
  If O$[1,1] <> "9"
	clear lchan[]
	let lchan[1]=33 ! product file
	let lchan[2]=0 ! prod whse
	let lchan[3]=31 ! purchase order header
	let lchan[4]=32 ! purchase order line
	let lchan[5]=24 ! appolh
    let lchan[6]=CH_FIFOL ! fifolot
	let lchan[7]=CH_FIFOT ! fifotrans
	let lchan[8]=CH_ROH! sordfleh
	let lchan[9]=CH_ROL ! sordflel
	let lchan[10]=CH_ROT ! sordflet
	let lchan[11]=CH_ROS ! sordfles
	let lchan[12]=CH_CUST ! customer
	let lchan[13]=CH_ZONE! zone
	let lchan[14]=CH_SOT ! sordtype
    Call "lacalccost.dl4",CH_POC,R[38],L1[],O1$,O2,O1,POSTDATE,POSTPER,message$,IntCo,rstr$,e$,rec_uac,lchan[]
  Else 
    CH_APL = 22
    Unlock #22
    Call "ladelcost.dl4",CH_POC,R[38],L1[],O1$,O2,O1,POSTDATE,POSTPER,CH_APL,message$,IntCo,rstr$,e$,rec_uac
  End If 
End If 
ENDPOCUPDATE: Rem end update of poctfle record

Search #22,5,1;K22$,R[22],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #22,1,0;K22$,R[22],E \ If E Gosub ERR_SEARCH
Goto L_6200
L_6335: H8$[69,80] = O1$[1,12]
H4[3] = APH1[1]
H8[5] = O3[0]
H8[6] = H8[6] + APH2[1] \ H8[7] = H8[7] - APH2[1]
PO3[11] = PO3[11] + APH2[2] \ PO3[12] = PO3[12] - APH2[2]
H8[4] = H8[4] + APH2[0] \ H8[8] = H8[8] - APH2[0]
PH[0] = O2[2]
Mat Write #31,R[31],24;H8$ \ Mat Write #31,R[31],242;H4
Mat Write #31,R[31],250;H8
Mat Write #31,R[31],310;PH; \ Mat Write #31,R[31],350;PO3;
Search #21,5,1;K21$,R[21],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #21,1,0;K21$,R[21],E \ If E Gosub ERR_SEARCH
Goto SEARCHAPPOH
L_6400: Rem VENDOR DIVISION TOTALS
If Not(C0[6]) Goto L_6495
K9$ = " ",K9$ \ K9$[1,6] = O2[0] Using "######"
K9$[7,8] = O4[1] Using "##"
Search #18,2,1;K9$,R[18],E \ If Not(E) Goto L_6445
If E > 1 Gosub ERR_SEARCH
E = 2 \ Search #18,1,0;K9$,R[18],E \ If E Gosub ERR_SEARCH
VT0[0] = O2[0] \ VT0[1] = O4[1] \ Mat Write #18,R[18],0;VT0
For I = 0 To 14 \ VT1[I] = 0 \ Next I
Search #18,4,1;K9$,R[18],E \ If E Gosub ERR_SEARCH
Goto L_6450
L_6445: Mat Read #18,R[18],8;VT1
L_6450: If O$[1,1] <> "9" Let VT1[14] = VT1[14] + O3[0]
If O$[1,1] = "9" Let VT1[14] = VT1[14] - O3[0]
If C4 Goto L_6480
If O$[1,1] <> "9" Let VT1[0] = VT1[0] + O3[0] \ VT1[2] = VT1[2] + O3[0] \ Goto L_6490
If O$[1,1] = "9" Let VT1[0] = VT1[0] - O3[0] \ VT1[2] = VT1[2] - O3[0] \ Goto L_6490
Stop 
L_6480: If O$[1,1] <> "9" Let VT1[1] = VT1[1] + O3[0]
If O$[1,1] = "9" Let VT1[1] = VT1[1] - O3[0]
L_6490: Mat Write #18,R[18],8;VT1;
L_6495: Return 
WRITEAPPOHH: Rem write to ap/po header history file
Mat Write #23,R[23],0;APH0
Mat Write #23,R[23],12;APH$
Mat Write #23,R[23],24;APH1
Mat Write #23,R[23],30;APH2
Mat Write #23,R[23],48;APH3
Mat Write #23,R[23],58;APH4;
Return 
WRITEAPPOLH: Rem write to ap/po line history file
Mat Write #24,R[24],0;APL0
Mat Write #24,R[24],12;APL$
Mat Write #24,R[24],24;APL1
Mat Write #24,R[24],36;APL2
Mat Write #24,R[24],78;APL3
Mat Write #24,R[24],92;APL4;
Return 
UNPKFLG: Rem UNPACK L1[3] TO FLAGS[x]
X2 = L1[3] \ For K = 0 To 11
  FLAGS[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
L_8100: Rem RESET DISTRIBUTION FILE
K4$ = " ",K4$
L_8110: Search #4,3,1;K4$,R[4],E \ If E = 2 Goto L_8150
If E Gosub ERR_SEARCH
If K4$[1,1] = "0" Goto L_8130
Mat Read #4,R[4],32;D2; \ If D2[2] <> 4 Goto L_8110
L_8130: Search #4,5,1;K4$,R[4],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #4,1,0;K4$,R[4],E \ If E Gosub ERR_SEARCH
Goto L_8110
L_8150: If Not(C0[3]) Goto L_8200
Mat Read #14,R[14],8;B5 \ B5 = 6 \ Mat Write #14,R[14],8;B5;
L_8200: Rem UPDATE FLAGS
K2$ = " 0" \ Search #15,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15],2;R$;
R$[61,61] = "1"
If P9$[17,17] <> "Y"
  R$[60,60] = C4[3] Using "#"
End If 
Mat Write #15,R[15],2;R$;
Goto OUTEND

Upd_ns_cost: ! !!!!!!!!!!!!!!!!!!
if p61$[132,132]<>"Y" goto endnssrchrol:
IF O$[1,1]="9" goto endnssrchrol:
if nsfmcode=0 goto endnssrchrol:
IF PCT7[1]<>0 goto endnssrchrol: ! stock update is not no -- so it must be stock item
IF NOT(PL0[2]) Goto endnssrchrol: ! no allocate freight
if PCT5[0]=(PCT5[4] + PCT5[6]) GOTO ENDNSSRCHROL:  ! the same freight amt
IF APL2[3]=0 and apl1[4]=0 goto endnssrchrol: ! freight applied is 0 and line is not closed - no adjustment
if not(pl4[10]) goto endnssrchrol: ! no sales order
if not(pl4[11]) goto endnssrchrol: ! no sales order line number
if spo=0 return  ! No po control #
CHK_HEADER: Rem "Check if valid to work on (Delete, etc.)
let ordrec=0
For X1 = 1 To 99
	keyroh$ = X1 Using "##"
	keyroh$[3] = pl4[10] Using "######"
	Search #CH_ROH,2,1;keyroh$,ordrec,E \ If E > 1 Gosub ERR_SEARCH
	If Not(E)
		goto updordtot:
	 endif
	 if x1=7 let x1=57
	 if x1=59 let x1=89
Next X1
return ! not found
updordtot: ! found header 
let keyrol$=" ",keyrol$
let keyrol$[1,6]=pl4[10]  using "######"
let keyrol$[7,9]=pl4[11] using "###" 
nssrchrol: ! 
search #ch_rol,2,1;keyrol$,rec_rol,e
if e<>0 goto endnssrchrol:
mat read #ch_rol,rec_rol,8;ol3;
if ol3[0]=0 goto nssrchrol: ! nonstock
mat read #ch_rol,rec_rol,16;ol4; 
maT read #ch_proddesc,ol4[0],190;NSFRT1;
IF PL4[18]<>0
	LET EXTNSFRTCOST=FNR((APL2[0]*APL2[3])-(APL2[0]*PL4[18]))
ELSE
	LET EXTNSFRTCOST=FNR(APL2[0]*APL2[3])
ENDIF
if extnsfrtcost<>0
	LET NSFRT1[0]=NSFRT1[0]+EXTNSFRTCOST
	IF NSFRT1[0]<0 LET NSFRT1[0]=0
	MAT WRITE #CH_PRODDESC,OL4[0],190;NSFRT1;
	gosub totalord: ! need to total order
endif
endnssrchrol: !
Return


TotalOrd: ! total order for nonstock freight
if not(ordrec) return
S9[2] = ORDREC;S9[3] = 6;S9[4] = 374
PASSINFO[0] = 1
Mat Read #Ch_roh,ordrec,0;TH0;
REC_ROT=Th0[3]
Mat Read #ch_rot,REC_ROT,0;TT1         
Mat Read #ch_rot,REC_ROT,8;TT2         
Mat Read #ch_rot,REC_ROT,168;TMCD    
Mat Read #ch_rot,REC_ROT,208;TMCHRG  
Mat Read #ch_rot,REC_ROT,328;TTOT      
Mat Read #ch_rot,REC_ROT,358;TMCTX   
Mat Read #ch_rot,REC_ROT,378;TDLVL; 

PCHAN[0] = 1 ! control file
PCHAN[1] = 0                                              
PCHAN[2] = ch_zone  ! zone
PCHAN[3] = 33  ! product ch_prod
PCHAN[4] = ch_commcode! commodity code *
PCHAN[5] = ch_cust ! cust        
PCHAN[6] = 0 ! ch_prwh
PCHAN[7] = ch_ros !  ch_ros
PCHAN[8] = Ch_roh ! order header 
PCHAN[9] = ch_rot ! ch_rot! ch_rot
PCHAN[10] =ch_rol !  ch_rol                                                                              
PCHAN[11] = 0
PCHAN[12] = 0! custtax
PCHAN[13] = ch_slsm !slsm *
PCHAN[14] = ch_taxcode !ch_tax  *          
PCHAN[15] = ch_sprodlot! ch_prlt *
PCHAN[16] = ch_sordlot !ch_ordl *
PCHAN[17] = ch_ccodes! ch_ccodes   *
PARM[0] = 1    ! credit check inquiry - set to Y for existing order     
PARM[1] = 1   ! do credit check   - set to Y  - maybe increasing sales amount                                                      
PARM[2] = 1    ! exception     - set to Y to check gp/cost exceptions                                                      
PARM[3] = 1    ! write total                                                        
PARM[4] = 1    ! update order total in customer's file                                                       
If P60$[40,40] = "S" Let PARM[4] = 1                                     
PARM[5] = 0    ! clear manual fields = N                                                          
PARM[6] = 0    ! clear cash filed =N 
PARM[9] = 99	! delivery charge   
PARM[10] = 99! ar term misc cost charge   - bypass  
S9[4] = 374                                                             
R5 = 0! rec_cust
TH1 = ordrec! ORDER HEADER RECORD #
V1 = 0 ! REC_SLSM    
! SAVE ORIGINAL VALUES
let orgcost=fnr(Tt2[14])
let orgamt=fnr(Tt2[24])
IF P60$[40,40]="S" 
	let orgshipamt=fnr(TT2[0]) ! Shipped amount
endif
let orgfreight=fnr(TT2[5])
LET orgother=fnr(Tt2[6])
let tmp3=Tt2[21]
For ctr = 1 To 12                       
	oldholdcodeflag[ctr] = Sgn(Fra(tmp3 / 2))
	tmp3 = Int(tmp3 / 2)                  
Next ctr
Call "ORDERTOTAL",S9[],TH1,PARM[],PCHAN[],TT1[],TT2[],TMCD[],TMCHRG[],TTOT[],TMCTX[],TDCLVL,R5,V1,CFIN[]   
Mat Read #ch_rot,REC_ROT,8;TT2;
let tmp3=Tt2[21]
For ctr = 1 To 12                       
		holdcodeflag[ctr] = Sgn(Fra(tmp3 / 2))
		tmp3 = Int(tmp3 / 2)                  
Next ctr
if oldholdcodeflag[1]<>holdcodeflag[1] ! credit 
	If p60$[40,40]="S"
		if fnr(Tt2[0])<=fnr(orgshipamt)
			let holdcodeflag[1]=oldholdcodeflag[1]
		endif
	else
		if fnr(Tt2[24])<=fnr(orgamt)  ! amount is less than or equal
			let holdcodeflag[1]=oldholdcodeflag[1] 
		endif
	endif
endif
if oldholdcodeflag[2]<>holdcodeflag[2] ! gp exception
	if fnr(Tt2[24])=orgamt and Tt2[14]=fnr(orgcost)
		let holdcodeflag[2]=oldholdcodeflag[2]
	else
		if fnr(Tt2[24])=orgamt and oldholdcodeflag[2]=0 and holdcodeflag[2]<>0
			if fnr(orgamt-orgcost)<=fnr(Tt2[24]-tT2[14]) ! original gp is less than new gp
				let holdcodeflag[2]=oldholdcodeflag[2]
			endif
		endif
	endif
endif
if fnr(orgamt)=Fnr(Tt2[24]) and fnr(orgcost)=fnr(Tt2[14])
	for ctr=3 to 12
		if oldholdcodeflag[ctr]<>holdcodeflag[ctr]
			let holdcodeflag[ctr]=oldholdcodeflag[ctr]
		endif
	next ctr
endif
tmp3 = 0                                            
For ctr = 0 To 11                                   
	If holdcodeflag[ctr + 1] Let tmp3 = tmp3 + 2 ^ ctr
Next ctr                                            
Tt2[21] = tmp3
Mat Write #ch_rot,REC_ROT,8;TT2;
return





ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$=msg$
call programdump("/tmp/la512bse!","")
call programdump()
e$ = msg$ \ Error 10000                      
Return ! End                                 
If Msg$<>"" let e$=msg$ !  Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump("/tmp/la512b!","")
call programdump()
! goto err_msg ! Error 10000
Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
call programdump()
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)

OUTEND: Rem END
!Print @0,23;'CL RB';"COMPLETED!!!!"
!Signal 3,10
Try Close Else Rem
F$ = PORTNUM Using "2/APPJTEMP&&&&"
Call FindF(F$,X2) \ If Not(X2) Goto L_9030
Kill F$
L_9030: F$ = R$[55,55],"/A20DD",G8$[1,2]
Call FindF(F$,X2) \ If Not(X2) Goto L_9045
Kill F$
L_9045: Close 
PRGNUM = 512
SPEC[7]=prgnum! PROGRAM NUMBER
if eflag
	let returnstatus=0
	let spec[9]=returnstatus
endif
IF P9$[17,17]="Y"
	Call "GLAPPOST.dl4",spec[],message$,IntCo,rstr$,e$
endif
 
Else
	ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
