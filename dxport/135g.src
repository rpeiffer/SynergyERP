! >>> Program 135g
!
! description Change Product ECCOS Flag
! loadsave -w -n 100,10 -o prog/dxport/135g.dl4 src/135g.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem   MX135g   -  eccos product flag update program
Rem   born-on: rce 09/25/2000
Rem
Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP  4, 2002  15:00:21
Rem /w/papermaster/r2002//usr/acct/kag/work/r2002/mx1/mx135g.src (univ2) [kag] {53691}
Rem  Copyright (c) 2002 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub CheckDigits,InpBuf,String,programdump
! Option Default Dialect IRIS1
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenMySQLMirror
include "src/inc/sql_prod.inc" ! SQL defintions

If Err 0 Gosub ERR_TRAP
dim 1%,SC,SR,CNVTU[2],SRC,COST_LEV[3],COST_SEC,Z9[9],UN[2]
dim 2%,E1
dim 3%,UNIT,CNVTA
Dim e$[500],buttonlist$[5,50],nextlist$[5,100],Msg$[500],rstr$[2000] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.prwh.i}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1]
Rem {end dim.prwh.i}
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
DIM_VARS: Rem
Dim 1%,BWH,EWH,BICLASS,EICLASS
Dim 2%,LTIME,SALE,SSTOCK
Dim 3%,R[99],BVEND,EVEND,VEND
Dim K2$[16],K3$[14],P9$[50],P60$[50],P61$[256],BCOMM$[4],ECOMM$[4]
Dim BPROD$[12],EPROD$[12],V1$[10],W9$[4]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

OPEN_FILES: Rem          opens files here
For J = 2 To 4
  Read J1
  If J1 = -1 Goto NXTF
  Read #1,88,Abs(J1);J$;
  If J1 > 0 Open #J,J$ Else Ropen #J,J$
NXTF: Rem
Next J
Data "1792","1744","-2288"
sqlChan = OpenMySQLMirror(e$)
Mat Read #1,60,50;P60$;
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
if p61$[33,33]<>"Y" ! no eccos
	E$="NOT FLAGGED FOR ECCOS"
	goto Err_Msg
Endif
INIT_VARS: Rem sort flags
FLG = 0;returnstatus=0
CFLG = 0;message$=""
DFLG = 0
MMFLG = 0
PFLG = 0
SSFLG = 0
WFLG = 0
MAFLG = 0
LTFLG = 0
XSFLG = 0
VFLG = 0
BPROD$ = "           1";EPROD$ = "ZZZZZZZZZZZZ";BCOMM$ = "   0"
ECOMM$ = "ZZZZ"
BVEND = 1;EVEND = 999999
CH_PRWH = 3;CH_PROD = 2;BWH = 0;EWH = 99;MAVE = 0;BICLASS = 0;EICLASS = 99
MAIN: Rem
!Gosub PRINT_RANGES
!Goto FLD3 \ FLG = 1
!Goto INPUTS
PRINT_RANGES: Rem
!Print 'CS'
!Print @2,0;"MX135G";@20,0;"Mass Change Product ECCOS Flag"
!Print @2,5;"1> Enter Starting Commodity Code   :";
!Print @2,6;"2> Enter Ending Commodity Code     :";
!Print @2,8;"3> Enter Starting Inventory Class  :";
!Print @2,9;"4> Enter Ending Inventory Class    :";
!Print @2,11;"5> Enter Starting Product Code     :";
!Print @2,12;"6> Enter Ending Product Code       :";
!Print @2,14;"7> Enter Starting Vendor Code      :";
!Print @2,15;"8> Enter Ending Vendor Code        :";
!Print @2,17;"9> ECCOS Flag Y/N                  :";
!Return 
INPUTS: Rem

!If X <= 10 Let J5$ = "Enter range, <CR> for default"
!If X >= 11 Let J5$ = " Y: Send to ECCOS,  N: Don't send to ECCOS"
!FLG = 1
!On X Gosub FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8
!On X - 8 Gosub FLD9,FLD10,FLD11
!Goto INPUTS
FLD1: Rem
!J5$ = "Enter starting warehouse, <CR> for all, or  E: Exit"

Call dxget("BWH",J$)
BWH = J$
!Print @40,2;BWH;'CL';
If BWH Let WFLG = 1
!J5$ = " ",J5$
FLD2: Rem
!J5$ = "Enter ending warehouse, or <CR> for last"

call dxget("EWH",J$)
EWH = J$
!Print @40,3;EWH;'CL';
If BWH > EWH
  message$ = message$+"Invalid warehouse range  "
  returnstatus=1
End If 
!If FLG Return 
FLD3: Rem
!J5$ = "Enter starting commodity code, <CR>: All, or  -: Help"

Call dxget("BCOMM",J$)
BCOMM$ = J$+B$
!Print @50,5;V1$;'CL';
If Trim$(BCOMM$) <> "" Let CFLG = 1
!J5$ = " ",J5$
FLD4: Rem
!J5$ = "Enter ending commodity code, <CR> for last, or  -: Help"

call dxget("ECOMM",J$)
ECOMM$ = J$+B$

If BCOMM$ > ECOMM$
  message$ = message$+"Invalid commodity code range  "
  returnstatus=1
End If 
!If FLG Return 
FLD5: Rem
!J5$ = "Enter starting inventory class code, or <CR>: All"

call dxget("BICLASS",tmp$)
J1=tmp$
BICLASS = J1
!Print @39,8;BICLASS;'CL';
!J5$ = " ",J5$
FLD6: Rem
!J5$ = "Enter ending inventory class code, or <CR> for last"

call dxget("EICLASS",tmp$)
J1=tmp$
EICLASS = J1
!If J4$ = ""
!  BICLASS = 0;EICLASS = 99
!  Print @39,9;EICLASS;'CL';
!  If FLG Return Else Goto FLD7
!End If 
If BICLASS > EICLASS
  message$ = message$+"Invalid class code range  "
  returnstatus=1
End If 
!Print @40,9;EICLASS;'CL';
!If FLG Return 
FLD7: Rem
!J5$ = "Enter starting product code, <CR>: All, or  -: Help"

call dxget("BPROD",J$)
BPROD$ = UCase$(J$)+B$
If Trim$(BPROD$) <> "" Let PFLG = 1
!J5$ = " ",J5$
FLD8: Rem
!J5$ = "Enter ending product code, <CR> for last, or  -: Help"

Call dxget("EPROD",J$)
EPROD$ = UCase$(J$)+B$
!If J4$ = ""
!  EPROD$ = "ZZZZZZZZZZZZ"
!  Print @40,12;EPROD$;'CL';
!  If FLG Return Else Goto FLD9
!End If 
!Print @40,12;EPROD$;'CL';
If BPROD$ > EPROD$
  Message$ = Message$+"Invalid product code range  "
  returnstatus=1
End If 
!J5$ = " ",J5$
!If FLG Return 
FLD9: Rem
!J5$ = "Enter starting vendor code, <CR>: All, or  -: Help"

call dxget("BVEND",j$)
BVEND = J$
!Print @39,14;BVEND;'CL';
If BVEND Let VFLG = 1
!J5$ = " ",J5$
FLD10: Rem
!J5$ = "Enter ending vendor code, <CR> for last, or  -: Help"

call dxget("EVEND",J$)
EVEND = J$
!If J4$ = ""
!  EVEND = 999999
!  Print @39,15;EVEND;'CL';
!  If FLG Return Else Goto FLD11
!End If 
!Print @39,15;EVEND;'CL';
If BVEND > EVEND
  message$ = Message$+"Invalid vendor code range  "
  returnstatus=1
End If 
!If FLG Return 
FLD11: Rem
!J5$ = " Y: Send to ECCOS,  N: Don't send to ECCOS"

call dxget("EFLG",tmp$)
tmp$=UCase$(RTrim$(tmp$))
if tmp$<>"Y" and tmp$<>"N"
	message$=message$+"Please Select ECCOS Flag  "
	returnstatus=1
Endif
J1=0 \ if tmp$="Y" let j1=1
ECCOSFLAG = J1
!J5$ = " ",J5$
!If FLG Return 
Check_INPUTS: ! see if ok
If ReturnStatus<>0 ! not okay
	e$=message$ ! it uses e$
	Goto Err_Msg
Endif
UPDATE: Rem
! Print @0,23;"Records processed...";'CL';
K2$ = " ",K2$;K3$ = " ",K3$
If CFLG
  K2$[1,4] = BCOMM$;K2$[5] = BPROD$[1,11]
Else 
  K2$ = BPROD$[1,11]
End If 
SEARCHP: Rem 
If CFLG
  Search #2,3,3;K2$,REC_PROD,E \ If E > 2 Gosub ERR_SEARCH
  If E Goto NEXTSTEP
  If K2$[1,4] > ECOMM$ Goto NEXTSTEP
  If PFLG If K2$[5,16] > EPROD$ Goto SEARCHP
  Gosub READ_PROD
  K3$ = " ",K3$;K3$[1,12] = K2$[5,16]
Else 
  Search #2,3,1;K2$,REC_PROD,E \ If E > 2 Gosub ERR_SEARCH
  If E Goto NEXTSTEP
  If PFLG If K2$[1,12] > EPROD$ Goto SEARCHP
  Gosub READ_PROD
  K3$ = " ",K3$;K3$[1,12] = K2$[1,12]
End If 
If CFLAG ! commodity range
  If A$[152,155] < BCOMM$ Or A$[152,155] > ECOMM$ Goto SEARCHP
End If 
If VFLG ! if vendor range selected
  If B[24] < BVEND Or B[24] > EVEND Goto SEARCHP
End If 
If PR_C4[8] < BICLASS Or PR_C4[8] > EICLASS Goto SEARCHP
K = K + 1
! Print @18,23;K Using "######";
PFU1[14] = ECCOSFLAG
Mat Write #CH_PROD,REC_PROD,512;PFU1;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, k2$, sqlChan, ch_prod)
	if e <> 1 ! returns the number of records add/updated/deleted
		error 11000 ! search error
	end if
end if
Goto SEARCHP
READ_PRWH: Rem
Rem {begin src/inc/read.prwh.i}
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
Read #CH_PRWH,REC_PRWH,396;WHLPOOL
Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
Read #CH_PRWH,REC_PRWH,404;FCWGT
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Read #CH_PRWH,REC_PRWH,798;WHRPLN
Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
Mat Read #CH_PRWH,REC_PRWH,842;WHLM
Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
Read #CH_PRWH,REC_PRWH,894;RESTRICTED
Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
Read #CH_PRWH,REC_PRWH,922;VLIST
Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
Read #CH_PRWH,REC_PRWH,938;WHBASE
Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
Rem {end read.prwh.i}
Return 
READ_PROD: Rem
Rem {begin src/inc/read.prod.i}
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Rem {end read.prod.i}
Return 
NEXTSTEP: Rem
Unlock #2,#3
!Input "       Press <CR> to Exit"X$
OUTEND: Rem
ReturnStatus=0 ! 0= ok in blockid, is =1 elsewhere
Message$="Complete - "+Str$(K)+" Product and/or Warehouse Records Updated"
 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
 call AddToStr(e$,rstr$,WebStr$)
 call SetOutPut(e$,rstr$)
 try Call dxclose() else rem
End 
 
Rem {begin rtn.input.s}
ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
Return 
ISERRMSG: Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end rtn.input.s}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: !
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
Rem {begin rtn.error.s}
ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/135gse!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
  call AddToStr(e$,rstr$,WebStr$)
  call SetOutPut(e$,rstr$)
  
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End
Rem {end rtn.error.s}