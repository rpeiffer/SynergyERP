!"SFDASH" === description  main web sales force dashboard
!
! loadsave -w -n 100,10 -o prog/dxport/sfdash.dl4 src/sfdash.src
!
!"SFDASH" 1.0 9/6/2003
!
!All rights reserved. (C)Copyright 2003 by:
!Dynamic Concepts Inc. Aliso Viejo, California USA
!
!
!Last Updated:                                   
!zyc 09/01/04 cct182085 modified path for include
!zyc 09/03/04 cct182085 add log file
!zyc 09/24/04 cct182799 add invoice detail drill down
!zyc 09/27/04 cct182799 add ZLINE$
!zyc 09/29/04 cct183097 add price change
!zyc 09/29/04 cct183038 add order entry
!zyc 09/07/04 cct184720 add ("S_USER.Userdef2",PriceChangeFlag$)
!rce 9/14/05 new announcement logic
!rce 10/10/05 sales group array work
!jjg  3/26/06 what flag in orderguide for order entry 'ORDER'
!jjg  3/26/06 nocost flag in sfprice for order entry order guide
!             added u_nocost nocost$ flag don't show costs if set to Y
!jjg  3/26/06 pum,qum and dept drop lists set on orderguide
!jjg  3/30/06 set default fields on orderguide if what is ORDER
!jjg  7/05/06 get warehouse available on orderguide if what is ORDER
!jjg  1/04/07 trim gp on orderguide
!rce 02/22/07 R9 changes

!
! *declare common external libs & subs & functions                
External Lib "libgeneral.lib" !general routines                   
Declare External Sub suberr,mainerr,GetSession,SetOutput,AddToStr, CheckForPdf 
Declare External Function getmsg$,expandarray                     

Declare External Sub OrdSummarys,OODet,ubsCust,ETEdits,oolist,custlist,CHList
Declare External Sub SOList,InvList, BOList, ARList, COList

Declare External Sub OneCustInv,SearchInv,aract
Declare External Sub IIDet,PCDet,PCList,PCUpdate
Declare External Sub PODet
Declare External Sub ProdList
Declare External Sub LPDet,PriceDet, ShipList, SLLPDet
Declare External Sub UserCntrl
Declare External Sub ArBuck
Declare External Sub TaxFlag
Declare External Sub SalesGroup, spardet
Declare External Function Escape$, arrEscape$

Declare External Sub LPSearch
External Lib "ubslpsearch.dl4"

Declare External Function FixText$
Declare External Sub LPUpdate
Declare External Sub OOSearch
External Lib "ubsordersummarys.dl4","ubsdayedts.dl4"
External Lib "ubsoodet.dl4","ubscust.dl4","ubscustlist.dl4","ubsarlist.dl4"
External Lib "ubsinvlist.dl4", "ubssolist.dl4", "ubsshiplist.dl4"
External Lib "ubsonecustinv.dl4","ubssearchinv.dl4"
External Lib "ubsoolist.dl4","ubsbolist.dl4","ubschlist.dl4", "ubscolist.dl4"
External Lib "ubsiidet.dl4"
External Lib "ubspclist.dl4","ubspcdet.dl4","ubspcupdate.dl4"
External Lib "ubsprod.dl4","ubsprodlist.dl4","ubsprodu.dl4","ubsprods.dl4"
External Lib "ubspodet.dl4"
External Lib "ubscustsls.dl4"
External Lib "ubsslsmsls.dl4"
External Lib "ubsgetnews.dl4"
External Lib "ubslpdet.dl4","ubspricedet.dl4","ubssllpdet.dl4"
External Lib "ubssalesscan.dl4"
External Lib "ubscommlist.dl4","ubsvendlist.dl4"
External Lib "spardet.dl4"
External Lib "ubsaract.dl4"
External Lib "ubslpupdate.dl4"
External Lib "sflists.lib"
External Lib "ubsoosearch.dl4"
Declare External Sub QOList, QODet
External Lib "ubsqolist.dl4", "ubsqodet.dl4"

Declare External sub deptlist, whlist
declare external function getumhtml$
External Lib "sffiles.lib"
Declare External Function getcartdet,getprod,getwhavail,getum,getcust
External Lib "ubsfunc.dl4"
Declare External Function openfile,roundit,taxable
External Lib "ubsprconv.dl4"
Declare External Function XAmount,xunit$

!Include "src/oovars.inc"
!Include "src/cuvars.inc"
!Include "src/bovars.inc"
!Include "src/invars.inc"
!Include "src/sovars.inc"
!Include "src/etvars.inc"
!Include "src/iivars.inc"
!Include "src/prvars.inc"
!Include "src/povars.inc"
!Include "src/ubssales.inc"
!Include "src/ubssscan.inc"
!Include "src/ardetvars.inc"
!Include "src/aractvars.inc"

Include "src/oovars.inc"
Include "src/cuvars.inc"
Include "src/bovars.inc"
Include "src/invars.inc"
Include "src/lprec.inc"
Include "src/sovars.inc"
Include "src/etvars.inc"
Include "src/iivars.inc"
Include "src/prvars.inc"
Include "src/povars.inc"
Include "src/ubssales.inc"
Include "src/ubssscan.inc"
Include "src/ardetvars.inc"
Include "src/aractvars.inc"

!Include "src/cartdet.inc"
Include "src/cartdet.inc"
!Include "src/ubsprod.inc    
Include "src/ubsprod.inc" 
!Include "src/ubscust.inc"
Include "src/ubscust.inc"

Def Struct commInfo      
	Member Commcode$[4]  
	Member Commodity$[16]
End Def                  

Def Struct VendInfo      
	Member Vendcode$[6]  
	Member VendName$[30]
End Def                  

!
!
! *Declare dL4 Intrinsic Subs & Functions
Declare Intrinsic Sub ProgramDump
Declare Intrinsic Function FindChannel,trim$,dateusing$
Declare Intrinsic Sub dxsave,DXOpen,DXGet,DXSet,DXClose

Declare Sub OrderSummary,MessageSummary,sforders,sfneword,sfbkord,sfcrhold,sfquotes
Declare Sub sfordedt,sfinv,sfar,contactspopup,custsearch,sfinven,sfcostcg
Declare Sub sfstkout,sfaract,sflist
Declare Sub custslspopup, slsmslspopup
Declare Sub sfpc,sfpcupdate
Declare Sub prodsearch,popopup,prodpopup,produpopup,prods
Declare Sub sfprice
Declare Sub updatelog,errTrap
Declare Sub SalesScan
Declare Sub ardet
Declare Sub setcust
Declare Sub RefSearch
!
! *Declare External Libs & Subs & Functions
!
Declare External Function RemoveSigns
!
!
! **Main Procedure
!
!
!
! DIM variables and DATA statements used by program
!
Dim e$[300],buttonlist$[5,50],nextlist$[5,100]
maxRow=1000;demoRow=1000; listrow=1500
maxWid=150
Dim Col1$[maxRow,maxWid],Col2$[maxRow,maxWid],Col3$[maxRow,maxWid],Col4$[maxRow,maxWid],Col5$[maxRow,maxWid]
Dim Col6$[maxRow,maxWid],Col7$[maxRow,maxWid],Col8$[maxRow,maxWid],Col9$[maxRow,maxWid],Col10$[maxRow,maxWid]
Dim Col11$[maxRow,maxWid],Col12$[maxRow,maxWid],Col13$[maxRow,maxWid],Col14$[maxRow,maxWid],Col15$[maxRow,maxWid]
Dim Col16$[maxRow,maxWid],Col17$[maxRow,maxWid],Col18$[maxRow,maxWid],Col19$[maxRow,maxWid],Col20$[maxRow,maxWid]
Dim Col7a$[maxRow,maxWid],Col17a$[maxRow,maxWid]

Dim 1%,UCA5[10],status,3%
Dim COST_LEV[3],COMM_LEV,COLLSEC,3%,HIDECOST
Dim 1%, arrSales[999],orgdef3$[20]
Dim XF$[128],XF1$[128],CO$[1],SLS$[3],PriceChangeFlag$[1]
Dim Dlog$[50],Msg$[256],pgmName$[20],MergeDir$[50],OptionDir$[50],userID$[50]
Dim UCA2$[50],tmp$[50],nocost$[1],arbuck$[5,10],3%,mydate#[5]

Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[300]

Let debug=1
tmp$="HOME" \ system 28,tmp$
Let dlog$=tmp$ + "/files/6/dx.log" 
System "touch " + dlog$    

Try
 Dim action$[30],options$[30],b$[200]

 b$=" ",b$
 !
 ! Open files
 ! set LUMAP to include sffiles="" 
 !
 Chan0 = FindChannel()
 !ROpen #Chan0,"sffiles/" ! table customer
 Chan1 = FindChannel()
 !ROpen #Chan1,"sffiles/" ! table order
 Chan2 = FindChannel()
 !ROpen #Chan2,"sffiles/" ! table order detail
 Chan3 = FindChannel()
 !ROpen #Chan3,"sffiles/" ! table inventory items
 Chan4 = FindChannel()
 !ROpen #Chan4,"sffiles/" ! table contacts
 !
 msg$[1,50]="-",msg$ \ Call updatelog(debug)
 msg$="start...program SFDASH" \ Call updatelog(debug)
 msg$="doing...DXOpen" \ Call updatelog(debug)                        
 Call DXOpen()
 !Call dxsave(0,"/usr/dxport/prog/dxport/joel.txt!") \ Stop

!	tmp$="HOME" \ system 28,tmp$
 ! Call dxsave(0,"rce.txt!") !   Stop

 Call DXGet("S_VIEW.MergeDIR",mergedir$) \ mergedir$ = Lcase$(mergedir$)
 Call DXGet("S_VIEW.OptionDIR",optiondir$) \ optiondir$ = Lcase$(optiondir$) 
 Call DXGet("S_USER.USERDEF3",orgdef3$) \ orgdef3$ = Ucase$(orgdef3$)
 Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number

 Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

 msg$="doing...DXGet action-"+action$+" options-"+options$\Call updatelog(debug)
 msg$="doing...DXGet mergedir-"+mergedir$ \ Call updatelog(debug)
 msg$="doing...DXGet optiondir-"+optiondir$ \ Call updatelog(debug)
 msg$="doing...DXGet userid-"+userid$ \ Call updatelog(debug) 
 msg$="doing...DXGet salesgroup-"+orgdef3$ \ Call updatelog(debug) 
 
 Call DXGet("S_USER.AppID",co$) \ if not(co$) let co$="1"
 
 Try Call UserCntrl(userID$,UCA2$,UCA5[],status,val(co$)) else rem

 Let COST_LEV[0]=UCA5[0]
 Let COST_LEV[1]=UCA5[1]
 Let COST_LEV[2]=UCA5[2]
 Let COST_LEV[3]=UCA5[3]
 Let COMM_LEV=UCA5[4]
 Let COLLSEC=UCA5[6]      
 If UCA2$[28,28]="Y" then Let hidecost=1
 If UCA2$[28,28]="N" then Let hidecost=0

 !!! get ar aging bucket headings
  Call ArBuck(arbuck$[],val(co$))
 !
 
 if orgdef3$ = "Y" Call SalesGroup(val(SLS$),val(co$),arrSales[])
 
 Select Case options$
   Case "SFDASH" !  main sales dashboard
    If action$="INPUT"   !initial action
     msg$="doing...ordersummary" \ Call updatelog(debug)
     Call ordersummary(e$,Chan0) \ Close
     msg$="doing...messagesummary" \ Call updatelog(debug)           
     Chan0=FindChannel() \ Call messagesummary(e$,Chan0)
     msg$="doing...DXSet" \ Call updatelog(debug) 
     Call DXSet("today",DateUsing$(Tim#(0),"day, month dd, YYYY"))
    End If
    !
    If action$="SFNEWORD" or action$="SFBKORD" or action$="SFCRHOLD" or action$="SFORDEDT" or action$="SFINV" or action$="AR" or action$="SFPC" or action$="SFQUOTES"
       msg$="doing...sforders "+e$ \ Call updatelog(debug)
       Call sforders(e$,Chan0,Chan1,Chan2,Chan3,action$) !orders related
    Endif
    If action$="SFCOSTCG" or action$="SFSTKOUT" 
       msg$="doing...sfinven "+e$ \ Call updatelog(debug)
       Call sfinven(e$,Chan3,action$) !inventory related
    Endif
    !
	If action$="SFPRICE"                                  
	   msg$="doing...sfprice "+e$ \ Call updatelog(debug) 
 	   Call sfprice(e$,action$) !price lookup 
    Endif                                                 
    !
	If action$="SFPCUPDATE"                                     
	   msg$="doing...sfpcupdate "+e$ \ Call updatelog(debug)
	   Call sfpcupdate(e$,action$) !price changes        
	Endif                                                   
    !
    If action$="REFSEARCH"                                  
	   msg$="doing...refsearch "+e$ \ Call updatelog(debug) 
 	   Call RefSearch(e$,action$) ! 
    Endif
	!
	if action$="CHECKFORPDF" call CheckForPdf(e$) !move to SFDASH checks if pdf ready
    !
    ! end of SFDASH
    !
   Case "SFCUST" !customer contacts
    If action$="SEARCH" 
       msg$="doing...custsearch "+e$ \ Call updatelog(debug) 
       Call custsearch(e$,action$) !search customers
	   if Ucase$(io$)="XML" End
    Endif
    If action$="ADVSEARCH" 
       msg$="doing...custsearch "+e$ \ Call updatelog(debug) 
       Call custsearch(e$,action$) ! search customers
    Endif
    If action$="POPUP" 
       msg$="doing...contactspopup "+e$ \ Call updatelog(debug)  
       Call contactspopup(e$,Chan0,options$) !contacts display
    Endif
	If action$="CUSTSLSPOPUP"                                         
	   msg$="doing...custslspopup "+e$ \ Call updatelog(debug)
		  Call custslspopup(e$,options$)  
    Endif                                                      
	If action$="SLSMSLSPOPUP"                                         
	   msg$="doing...slsmslspopup "+e$ \ Call updatelog(debug)
		  Call slsmslspopup(e$,options$)  
    Endif                                                      
	If action$="ARACT"                                         
	   msg$="doing...aract "+e$ \ Call updatelog(debug)
		  Call sfaract(e$,options$)  
    Endif                                                      
	If action$="ARDET"                                         
	   msg$="doing...ardet "+e$ \ Call updatelog(debug)
		  Call ardet(e$,options$)  
    Endif                                                      
    If action$="SETCUST" 
       msg$="doing...contactspopup "+e$ \ Call updatelog(debug)  
		  Call setcust(e$,options$)  
    Endif
   
   Case "SFPO"    !po
    If action$="POPUP"                                     
	   msg$="doing...popopup "+e$ \ Call updatelog(debug)
	   Call popopup(e$,options$) !po display  
	Endif                                                  
   
   Case "SFPROD"  !product
	If action$="SFLIST"
	   msg$="doing...sflist "+e$ \ Call updatelog(debug) 
	   Call sflist(e$,action$)          
    Endif                                                    
	If action$="SEARCH" or action$="INPUT"
	   msg$="doing...prodsearch "+e$ \ Call updatelog(debug) 
	   Call prodsearch(e$,action$)          
    Endif                                                    
	If action$="POPUP" 
	   msg$="doing...prodpopup "+e$ \ Call updatelog(debug) 
	   Call prodpopup(e$,options$) !product display  
    Endif 
	If action$="PRODUPOPUP"   !product usage - 377           
	   msg$="doing...produpopup "+e$ \ Call updatelog(debug)
 	   Call produpopup(e$,options$)   
    Endif        
	If action$="PRODSPOPUP" or action$="PRODS"  !product stock level - 218  
	   msg$="doing...prods "+e$ \ Call updatelog(debug)
	   Call prods(e$,options$)                         
    Endif                                                   
	If action$="SALESSCAN" ! sale scan (search for items in history)
	   msg$="doing...salesscan "+e$ \ Call updatelog(debug)
	   Call SalesScan(e$,options$)                         
    Endif                                                   
   
   Case "SFORDER" !order entry
	If action$="SEARCH"                                      
	   msg$="doing...order entry - custsearch "+e$ \ Call updatelog(debug) 
	   Call custsearch(e$,action$) !search customers         
    Endif                                                    
   
   Case "SFCONT" !contacts
    If action$="SEARCH" 
       msg$="doing...contactspopup "+e$ \ Call updatelog(debug) 
       Call contactspopup(e$,Chan0,options$) !shortcut for now
    Endif

   Case "TEST" 
		! Call dxsave(0,"/x1/slspro/test.in!") !   Stop
		call dxset("xmlstring","data received*@/@#")
		call dxset("output",mergedir$ + "sfarcsv.html")

 End Select  !Options
 msg$="doing...DXClose" \ Call updatelog(debug) 
 Call DXClose()
Else
! Error routine
  If Spc(8)< 20000  !20000 up don't override E$ or output
   Call DXSet("output",trim$(mergedir$)+"msg.html")
   ! Call DXSet("output","ubsstd/msg.html")
   If Spc(8)<>10000  !10000 don't override E$, already set with subroutine error
    e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfdash"
   End If
  End If
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
  Call DXSet("S_msg",e$)
  Call DXSet("buttonlist",buttonlist$[])  !msg page buttons
  Call DXSet("nextlist",nextlist$[])      !button functions
  msg$="doing...DXClose" \ Call updatelog(debug) 
  Call DXClose()
End Try
End

Sub updatelog(debug)
  If not(debug) Exit Sub
  System "echo ''" + msc$(0) + " " + msg$ + "'' >> " + dlog$
End Sub                         

Sub errTrap()
  System "echo ''" + msc$(0) + " " + msg$ + "'' >> " + dlog$ 
End Sub

Sub ordersummary(e$,Chan0)
!--------------------------------------------------------------------
!creates a list of order summary tables and totals 
!show up to 25 in table
 Try
  Declare External Function warehouse
  Dim newordcust$[25,30],newordamt$[25,12]

  Dim holdordcust$[25,30],holdordamt$[25,12]
  Dim ordeditcust$[25,30],ordeditamt$[25,12]
  !Dim costchgprod$[25,30],costchgpercent$[25,7],costchgdate$[25,8]
  Dim stkoutprod$[355,30],stkoutdate$[355,12]
  Dim invcustNo$[maxrow,6],invcust$[maxrow,30],invamt$[maxrow,20]
  Dim whse$[4] 
 
 WHSE$=WareHouse(val(SLS$),val(co$)) Using "##" !get warehouse salesman tied to.
 Call DXSET("U_whse",whse$)

! DRM Create the Open Order 
    Dim soo. as bInfo, in.[maxRow] as inInfo, so.[maxRow] as soInfo, et.[maxRow] as etinfo
    Dim sbo. as bInfo, sch. as bInfo
    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number

    Call OrdSummarys(Val(CO$),VAL(SLS$),debug,dlog$,soo.,sbo.,sch.,ss,arrSales[])
    
    If ss Error 42

    Call DXSet("oordcnt",soo.Count$)
    Call DXSet("oototSell",soo.TResale$)
    Call DXSet("oototCost",soo.TCost$)
    Call DXSet("oototMargin",soo.TGPP$)

  ! Now Let's get the BackOrder Counts.
 
    Call DXSet("bkordcnt",sbo.Count$)
    Call DXSet("bktotSell",sbo.TResale$)
    Call DXSet("bktotCost",sbo.TCost$)
    Call DXSet("bktotMargin",sbo.TGPP$)

!  Done with Back orders at this time.

!  Now Credit Hold Orders
  
    Call DXSet("chordcnt",sch.Count$)
    Call DXSet("chtotSell",sch.TResale$)
    Call DXSet("chtotCost",sch.TCost$)
    Call DXSet("chtotMargin",sch.TGPP$)
! Done With Credit Hold

! Now its the daily order Edits
!  Call ETEdits(VAL(CO$), Val(SLS$), ET.[], ii ,ss)
!  For i=0 to ii
!    ordeditcust$[i]=ET.[i].CustName$
!    ordeditamt$[i]=ET.[i].orderNo$
!  Next i
!  Call DXSet("ordeditcust",ordeditcust$[])
!  Call DXSet("ordeditamt",ordeditamt$[])
!  Call DXSet("ordeditcnt",str$(ii))

  !Call DXSet("costchgprod",costchgprod$[])
  !Call DXSet("costchgpercent",costchgpercent$[])
  !Call DXSet("costchgdate",costchgdate$[])
  !Call DXSet("costchgcnt","3")

! Stock Outs...

!  Call SOList(Val(CO$),Val(SLS$),so.[],ii,ss,355)
! If ss Error 42
!  For i=0 to ii
!    stkoutprod$[i]=so.[i].Item$
!    stkoutdate$[i]=so.[i].SODate$
!  Next i
!  Call DXSet("stkoutprod",stkoutprod$[])
!  Call DXSet("stkoutdate",stkoutdate$[])
!  Call DXSet("stkoutcnt",Str$(ii))
! Done with Stockouts

! DRM - Get Daily invoices, (Actually, the closest date's list)
  Dim tot. as totInfo
  Call InvList(Val(CO$),Val(SLS$),debug,dlog$,tot.,in.[],ii,ss,maxRow,cost_lev[], arrSales[])
  !If ss Error 42
  Call DXSet("ii",Str$(ii))
  if ii > maxrow let ii=maxrow
  For i=0 to ii
    invcustno$[i]=in.[i].CustID$
    invcust$[i]=in.[i].CustName$
    invamt$[i]=in.[i].TInvoice$
  Next i
  Call DXSet("invcust",invcust$[])
  Call DXSet("invamt",invamt$[])
  Call DXSet("invoicecnt",Str$(ii))
!  Done with Invoices

! now do QUOTES
  Dim sqo.[maxRow] as ooInfo
  Dim sqtot. as bInfo

  Call Qolist(Val(CO$),Val(SLS$),debug,dlog$,sqo.[],sqtot.,ii,ss,maxRow,cost_lev[], arrSales[])
  !If ss Error 42
  Call DXSet("qordcnt",sqtot.count$)
  Call DXSet("qototSell",sqtot.tresale$)
  Call DXSet("qototCost",sqtot.tcost$)
  Call DXSet("qototMargin",sqtot.tgpp$)
!  Done with quotes

 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," ordersummary" 
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !ordersummary
!
!--------------------------------------------------------------------
Sub messagesummary(e$,Chan0)
!
  Declare External Sub GetNews
  !creates a list of message summary tables and totals
  !show up to 25 in table
  Try
	Dim newsnew$[25,1],newsdate$[25,10],newstext$[25,300],newsimg$[25,60]
	Dim newstitle$[25,50],NumRecs$[2]
	!
	Call GetNews(newsnew$[],newsdate$[],newstext$[],newsimg$[],newstitle$[],NumRecs$)
	!
	!
	Call DXSet("output",trim$(mergedir$) + "sfdash.html")
	Call DXSet("newsnew",newsnew$[])
	Call DXSet("newsimg",newsimg$[])
	Call DXSet("newsdate",newsdate$[])
	Call DXSet("newstext",newstext$[])
	Call DXSet("newstitle",newstitle$[])
	Call DXSet("newscnt",NumRecs$)
  Else
    If Spc(8) <> 10000 Let e$ = Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," messagesummary"
	Error 10000
	msg$ = "error..." + e$ \ Call updatelog(debug)
	Call errTrap()
  End Try
End Sub
!
!
!
!
Sub sforders(e$,Chan0,Chan1,Chan2,Chan3,action$)
!--------------------------------------------------------------------
!creates a list of orders
!
!


  Dim oo.[maxRow] as ooInfo
  Dim o1. as oInfo, bi. as bInfo, ch.[maxRow] as chInfo
  Dim ols.[maxRow] as oItem, in.[maxRow] as inInfo, bo.[maxRow] as boInfo, cua.[maxRow] as arInfo
!
!
!
!
!main section of create a list of orders
 Try
  Dim action2$[20],action3$[20],orderno$[6],li$[3]
  Dim invno$[10]
  !
  Dim custids$[maxRow,6],custnames$[maxRow,26],custattns$[maxRow,26]
  Dim custphones$[maxRow,26], custholds$[maxRow,1]
  !
  Dim ordernos$[maxRow,10],orderdates$[maxRow,10],orderpos$[maxRow,20],ordertotals$[maxRow,12]
  Dim ordernss$[maxRow,1],orderprofitpercents$[maxRow,7],orderstatuss$[maxRow,10]
  Dim orderroutes$[maxRow,5],ordershipdates$[maxRow,8]

  !current
  Dim ordcitemqtys$[maxRow,20],ordcitemums$[maxRow,4]
  Dim ordcitembos$[maxRow,20]
  Dim ordcitemshipqtys$[maxRow,20]

  !previous 
  Dim orditems$[maxRow,3],orditemqtys$[maxRow,20],orditemums$[maxRow,4]               
  Dim orditembos$[maxRow,20],orditemdues$[maxRow,8]                               
  Dim orditemseqs$[maxRow,3],orditemchanges$[maxRow,12],orditemshipqtys$[maxRow,20]   
  Dim orditemprices$[maxRow,20],orditempriceums$[maxRow,4],orditemmargins$[maxRow,10] 

  !new or changed to
  Dim edittypes$[maxRow,1],ordnitemqtys$[maxRow,20],ordnitemums$[maxRow,4]
  Dim ordnitembos$[maxRow,20],ordnitemshipqtys$[maxRow,20],ordactions$[maxRow,50]
  Dim ordnitemprices$[maxRow,20],ordnitempriceums$[maxRow,3],ordnitemmargins$[maxRow,10]
  Dim etnewunitprice$[maxRow,30],etoldunitprice$[maxRow,30],etpunit$[maxRow,10]
  !
  Dim orditemcosts$[maxRow,20],orditemlastdates$[maxRow,8],orditemlastqtys$[maxRow,12]
  Dim orditemlastums$[maxRow,4],orditemlastprices$[maxRow,20],orditemlastpriceums$[maxRow,4]
  Dim orditemlastcosts$[maxRow,20],orditemlastmargins$[maxRow,10]
  Dim itemmtds$[maxRow,20],itemmtdums$[maxRow,4],itemytds$[maxRow,20],itemytdums$[maxRow,4]
  !
  Dim invnos$[maxRow,6],invamnts$[maxRow,12],invtaxs$[maxRow,12],invfrts$[maxRow,12]
  Dim invmiscs$[maxRow,12],invtotals$[maxRow,12],invcosts$[maxRow,12],invprofits$[maxRow,12]
  Dim invprofitpercents$[maxRow,12],invcomms$[maxRow,12]
  !
  Dim itemnos$[maxRow,25],itemdescs$[maxRow,50],access$[maxRow,50]
  Dim weightX$[maxrow,10]
  !
  Dim totaldues$[maxRow,12],currents$[maxRow,12],over30s$[maxRow,12]
  Dim over60s$[maxRow,12],over90s$[maxRow,12],2%
  Dim 2%,custid, custid$[6]
  !
  If action$="SFNEWORD"     Call sfneword()     !new orders
  If action$="SFQUOTES"     Call sfquotes()     !quotes
  If action$="SFBKORD"      Call sfbkord()      !back orders
  If action$="SFCRHOLD"     Call sfcrhold()     !credit holds
  If action$="SFORDEDT"     Call sfordedt()     !daily order edits
  If action$="SFPC"         Call sfpc()         !price change
  If action$="SFINV"        Call sfinv()        !daily invoices
  If action$="AR"           Call sfar()         !ARs
  !
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sforders"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sforders

Sub sfneword()
!--------------------------------------------------------------------
!creates a list of new orders
 Try
  
  Dim LI$[200,3],Item$[500,50],Desc$[200,80],QtyOrd$[200,20],QtyOpn$[200,20]
  Dim Desc1$[200,30],Desc2$[200,30],ExtWeight$[200,30]
  Dim QtyAvail$[200,20],QtyBOrd$[200,20],BExt$[200,20]
  Dim UM$[200,10],Ext$[200,20],QtyShp$[200,20],PODate$[200,30]
  Dim UnitPrice$[200,30],UnitCost$[200,30],GPP$[200,10],SPOs$[200,300]
  Dim POHRec$[200,10],LGP$[200,20]
  Dim LineType$[200,2]
  Dim Cust$[6]

  Call DXGet("action2",action2$) \ action2$ = LCase$(action2$)
  Call DXGet("action3",action3$) \ action3$ = LCase$(action3$)
  msg$="doing...DXGet action2-"+action2$ \ Call updatelog(debug)
  msg$="doing...DXGet action3-"+action3$ \ Call updatelog(debug)

  If action2$="detail"
    Call DXGet("orderno",orderno$)
    If orderno$="all" 
    ! No All Display for DRM system
    Else
    !get the specific order detail
    
      Call DXGet("S_USER.AppID",CO$) ! Company
      Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
      Call DXGet("custid",Cust$) ! Customer Number
          Call OOdet(Val(CO$),Val(SLS$),debug,dlog$,orderno$,Cust$,o1., ols.[],ii,ss,maxRow,cost_lev[], arrSales[])
	  If ss=10000 e$="Not authorized to view this order."  
	  If ss Error 10000                             

    End If
    !
    Call DXSet("custnumber",o1.custnumber$)
    Call DXSet("custname",o1.custname$)
	Call DXSet("soldaddr1",o1.SoldAddr1$)
	Call DXSet("soldaddr2",o1.SoldAddr2$)
	Call DXSet("soldaddr3",o1.SoldAddr3$)
	Call DXSet("soldaddr4",o1.SoldAddr4$)
    Call DXSet("s2addr1",o1.S2Addr1$)
    Call DXSet("s2addr2",o1.S2Addr2$)
    Call DXSet("s2addr3",o1.S2Addr3$)
    Call DXSet("s2addr4",o1.S2Addr4$)
    Call DXSet("slsno",o1.slsno$)
    Call DXSet("slsname",o1.SLSName$)
    Call DXSet("order",o1.Order$)
    Call DXSet("enteredby",o1.EnteredBy$)
    Call DXSet("custpo",o1.CustPo$)
	Call DXSet("term",o1.Term$)
    Call DXSet("orderdate",o1.OrderDate$)
    Call DXSet("hold",o1.Hold$)
    Call DXSet("holdreasons",o1.HoldReason$)
    Call DXSet("whse",o1.WHSE$)
    Call DXSet("division",o1.Division$)
    Call DXSet("shipdate",o1.ShipDate$)
    Call DXSet("stp",o1.Stp$)
    Call DXSet("zne",o1.Zne$)
    Call DXSet("type",o1.Type$)
    Call DXSet("sp",o1.SP$)
    Call DXSet("status",o1.Status$)
    Call DXSet("tcost",o1.TCost$)
    Call DXSet("tresale",o1.TResale$)
    Call DXSet("tgpp",o1.TGPP$)
	Call DXSet("gtm",o1.gtm$)
	Call DXSet("attn",o1.Attn$)
	Call DXSet("duedate",o1.DueDate$)
	Call DXSet("invdate",o1.InvDate$)
	Call DXSet("truck",o1.truck$)
	Call DXSet("totweight",o1.totweight$)
	Call DXSet("totcube",o1.totcube$)
	Call DXSet("tax",o1.tax$)
	Call DXSet("freight",o1.freight$)
	Call DXSet("misc",o1.misc$)
	Call DXSet("discount",o1.discount$)
	Call DXSet("grandtotal",o1.grandtotal$)

    For i=0 to ii-1
      LI$[i]=ols.[i].LI$
      Item$[i]=ols.[i].Item$
      If ols.[i].Substitute$="Y" Then
         Item$[i]=Item$[i] + " * Subs."
      End If
      Desc1$[i]=ols.[i].Desc1$
	  Desc2$[i]=ols.[i].Desc2$
      QtyOrd$[i]=ols.[i].QtyOrd$
      QtyBOrd$[i]=ols.[i].QtyBOrd$
      QtyOpn$[i]=ols.[i].QtyOpn$
      QtyAvail$[i]=ols.[i].QtyAvail$
      UM$[i]=ols.[i].UoM$
      Ext$[i]=ols.[i].Extended$
      BExt$[i]=ols.[i].BOExt$
      QtyShp$[i]=ols.[i].QtyShp$
      PoDate$[i]=ols.[i].PoDate$
      UnitPrice$[i]=ols.[i].UnitPrice$+"/"+ols.[i].UPUoM$
      UnitCost$[i]=ols.[i].UnitCost$+"/"+ols.[i].UCUoM$
	  ExtWeight$[i]=ols.[i].ExtWeight$
      GPP$[i]=ols.[i].GPP$
      LGP$[i]=ols.[i].LGP$
      SPOs$[i]=ols.[i].SPO$
	  POHRec$[i]=ols.[i].POHRec$
	  LineType$[i]=ols.[i].LineType$
    Next i

    Call DXSet("li",LI$[])
    Call DXSet("item",Item$[])
    Call DXSet("desc1",Desc1$[])
	Call DXSet("desc2",Desc2$[])
    Call DXSet("qtyord",QtyOrd$[])
    Call DXSet("qtyopn",QtyOpn$[])
    Call DXSet("qtyavail",QtyAvail$[])
    Call DXSet("qtyBord",QtyBOrd$[])
    Call DXSet("um",UM$[])
    Call DXSet("BOExt",BExt$[])
    Call DXSet("ext",Ext$[])
    Call DXSet("qtyshp",QtyShp$[])
    Call DXSet("podate",PODate$[])
    Call DXSet("unitprice",UnitPrice$[])
    Call DXSet("unitcost",UnitCost$[])
	Call DXSet("extweight",ExtWeight$[])
    Call DXSet("gpp",GPP$[])
    Call DXSet("lgp",LGP$[])
    Call DXSet("spos",SPOs$[])
	Call DXSet("pohrec",pohrec$[])
	Call DXSet("linetype",LineType$[])
    !
    If action3$="popup" Then 
	   Call DXSet("output",trim$(mergedir$)+"sforddetp.html")
    Else
	   Call DXSet("output",trim$(mergedir$)+"sforddet.html")
    Endif
  Else  ! not detail

    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("custid",custid$) \ custid = custid$
    if not(custid) Call DXGet("U_FOCUS",custid$) \ custid = custid$

    Call OOList(Val(CO$),VAL(SLS$),debug,dlog$,oo.[], ii,ss, maxRow, arrsales[], custid)
	if ii > maxrow let ii=maxrow
    For i=0 to ii
       Col1$[i]=oo.[i].SalesMan$
       Col2$[i]=oo.[i].CustId$
       Col3$[i]=oo.[i].CustName$
       Col4$[i]=oo.[i].Type$
       Col5$[i]=oo.[i].OrderNo$
       Col6$[i]=oo.[i].PO$
       Col7$[i]=oo.[i].Ordered$
       Col8$[i]=oo.[i].RS$
       Col9$[i]=oo.[i].TResale$
       Col10$[i]=oo.[i].TGPP$\if nocost$="Y" let col10$[i]=" "
       Col11$[i]=oo.[i].ShipDT$
       Col12$[i]=oo.[i].Hold$
       Col13$[i]=oo.[i].HoldD$
	   Col14$[i]=oo.[i].Status$
	   Col15$[i]=oo.[i].EnteredBy$
	   Col16$[i]=oo.[i].GTM$
	   Col17$[i]=oo.[i].TypeDesc$
    Next i


    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
	Call DXSet("col14",Col14$[])
	Call DXSet("col15",Col15$[])
	Call DXSet("col16",Col16$[])
	Call DXSet("col17",Col17$[])

    Call DXSet("slsmn",SLS$)
	!
    Call DXSet("output",trim$(mergedir$)+"sfoolist.html")

  End If
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfneword"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfneword
!
Sub sfquotes()
!--------------------------------------------------------------------
!creates a list of new quotes
 Try
  
  Dim LI$[200,3],Item$[500,50],Desc$[200,80],QtyOrd$[200,20],QtyOpn$[200,20]
  Dim Desc1$[200,30],Desc2$[200,30],ExtWeight$[200,30]
  Dim QtyAvail$[200,20],QtyBOrd$[200,20],BExt$[200,20]
  Dim UM$[200,10],Ext$[200,20],QtyShp$[200,20],PODate$[200,30]
  Dim UnitPrice$[200,30],UnitCost$[200,30],GPP$[200,10],SPOs$[200,300]
  Dim POHRec$[200,10],LGP$[200,20]
  Dim LineType$[200,2]
  Dim Cust$[6]

  Call DXGet("action2",action2$) \ action2$ = LCase$(action2$)
  Call DXGet("action3",action3$) \ action3$ = LCase$(action3$)
  msg$="doing...DXGet action2-"+action2$ \ Call updatelog(debug)
  msg$="doing...DXGet action3-"+action3$ \ Call updatelog(debug)

  If action2$="quoteprint"
	call "quoteprint.dl4"
	! comes back here and ends
	Exit Sub
  End if

  If action2$="detail"
    Call DXGet("orderno",orderno$)
    If orderno$="all" 
    ! No All Display for DRM system
    Else
    !get the specific order detail
    
      Call DXGet("S_USER.AppID",CO$) ! Company
      Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
      Call DXGet("custid",Cust$) ! Customer Number
          ! Call OOdet(Val(CO$),Val(SLS$),debug,dlog$,orderno$,Cust$,o1., ols.[],ii,ss,maxRow,cost_lev[], arrSales[])
          Call QOdet(Val(CO$),Val(SLS$),debug,dlog$,orderno$,Cust$,o1., ols.[],ii,ss,maxRow,cost_lev[], arrSales[])
		  	  If ss=10000 e$="Not authorized to view this order."  
	  If ss Error 10000                             

    End If
    !
    Call DXSet("custnumber",o1.custnumber$)
    Call DXSet("custname",o1.custname$)
	Call DXSet("soldaddr1",o1.SoldAddr1$)
	Call DXSet("soldaddr2",o1.SoldAddr2$)
	Call DXSet("soldaddr3",o1.SoldAddr3$)
	Call DXSet("soldaddr4",o1.SoldAddr4$)
    Call DXSet("s2addr1",o1.S2Addr1$)
    Call DXSet("s2addr2",o1.S2Addr2$)
    Call DXSet("s2addr3",o1.S2Addr3$)
    Call DXSet("s2addr4",o1.S2Addr4$)
    Call DXSet("slsno",o1.slsno$)
    Call DXSet("slsname",o1.SLSName$)
    Call DXSet("order",o1.Order$)
    Call DXSet("enteredby",o1.EnteredBy$)
    Call DXSet("custpo",o1.CustPo$)
	Call DXSet("term",o1.Term$)
    Call DXSet("orderdate",o1.OrderDate$)
    Call DXSet("hold",o1.Hold$)
    Call DXSet("holdreasons",o1.HoldReason$)
    Call DXSet("whse",o1.WHSE$)
    Call DXSet("division",o1.Division$)
    Call DXSet("shipdate",o1.ShipDate$)
    Call DXSet("stp",o1.Stp$)
    Call DXSet("zne",o1.Zne$)
    Call DXSet("type",o1.Type$)
    Call DXSet("sp",o1.SP$)
    Call DXSet("status",o1.Status$)
    Call DXSet("tcost",o1.TCost$)
    Call DXSet("tresale",o1.TResale$)
    Call DXSet("tgpp",o1.TGPP$)
	Call DXSet("gtm",o1.gtm$)
	Call DXSet("attn",o1.Attn$)
	Call DXSet("duedate",o1.DueDate$)
	Call DXSet("invdate",o1.InvDate$)
	Call DXSet("truck",o1.truck$)
	Call DXSet("totweight",o1.totweight$)
	Call DXSet("totcube",o1.totcube$)
	Call DXSet("tax",o1.tax$)
	Call DXSet("freight",o1.freight$)
	Call DXSet("misc",o1.misc$)
	Call DXSet("discount",o1.discount$)
	Call DXSet("grandtotal",o1.grandtotal$)

    For i=0 to ii-1
      LI$[i]=ols.[i].LI$
      Item$[i]=ols.[i].Item$
      If ols.[i].Substitute$="Y" Then
         Item$[i]=Item$[i] + " * Subs."
      End If
      Desc1$[i]=ols.[i].Desc1$
	  Desc2$[i]=ols.[i].Desc2$
      QtyOrd$[i]=ols.[i].QtyOrd$
      QtyBOrd$[i]=ols.[i].QtyBOrd$
      QtyOpn$[i]=ols.[i].QtyOpn$
      QtyAvail$[i]=ols.[i].QtyAvail$
      UM$[i]=ols.[i].UoM$
      Ext$[i]=ols.[i].Extended$
      BExt$[i]=ols.[i].BOExt$
      QtyShp$[i]=ols.[i].QtyShp$
      PoDate$[i]=ols.[i].PoDate$
      UnitPrice$[i]=ols.[i].UnitPrice$+"/"+ols.[i].UPUoM$
      UnitCost$[i]=ols.[i].UnitCost$+"/"+ols.[i].UCUoM$
	  ExtWeight$[i]=ols.[i].ExtWeight$
      GPP$[i]=ols.[i].GPP$
      LGP$[i]=ols.[i].LGP$
      SPOs$[i]=ols.[i].SPO$
	  POHRec$[i]=ols.[i].POHRec$
	  LineType$[i]=ols.[i].LineType$
    Next i

    Call DXSet("li",LI$[])
    Call DXSet("item",Item$[])
    Call DXSet("desc1",Desc1$[])
	Call DXSet("desc2",Desc2$[])
    Call DXSet("qtyord",QtyOrd$[])
    Call DXSet("qtyopn",QtyOpn$[])
    Call DXSet("qtyavail",QtyAvail$[])
    Call DXSet("qtyBord",QtyBOrd$[])
    Call DXSet("um",UM$[])
    Call DXSet("BOExt",BExt$[])
    Call DXSet("ext",Ext$[])
    Call DXSet("qtyshp",QtyShp$[])
    Call DXSet("podate",PODate$[])
    Call DXSet("unitprice",UnitPrice$[])
    Call DXSet("unitcost",UnitCost$[])
	Call DXSet("extweight",ExtWeight$[])
    Call DXSet("gpp",GPP$[])
    Call DXSet("lgp",LGP$[])
    Call DXSet("spos",SPOs$[])
	Call DXSet("pohrec",pohrec$[])
	Call DXSet("linetype",LineType$[])
    !
    If action3$="popup" Then 
	   Call DXSet("output",trim$(mergedir$)+"sfqorddetp.html")
    Else
	   Call DXSet("output",trim$(mergedir$)+"sfqorddet.html")
    Endif
  Else  ! not detail

    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("custid",custid$) \ custid = custid$
    if not(custid) Call DXGet("U_FOCUS",custid$) \ custid = custid$

    ! Call QOList(Val(CO$),VAL(SLS$),debug,dlog$,oo.[], ii,ss, maxRow, arrsales[], custid)
	  Call Qolist(Val(CO$),Val(SLS$),debug,dlog$,oo.[],bi.,ii,ss,maxRow,cost_lev[], arrSales[], custid)
	if ii > maxrow let ii=maxrow
    For i=0 to ii
       Col1$[i]=oo.[i].SalesMan$
       Col2$[i]=oo.[i].CustId$
       Col3$[i]=oo.[i].CustName$
       Col4$[i]=oo.[i].Type$
       Col5$[i]=oo.[i].OrderNo$
       Col6$[i]=oo.[i].PO$
       Col7$[i]=oo.[i].Ordered$
       Col8$[i]=oo.[i].RS$
       Col9$[i]=oo.[i].TResale$
       Col10$[i]=oo.[i].TGPP$\if nocost$="Y" let col10$[i]=" "
       Col11$[i]=oo.[i].ShipDT$
       Col12$[i]=oo.[i].Hold$
       Col13$[i]=oo.[i].HoldD$
	   Col14$[i]=oo.[i].Status$
	   Col15$[i]=oo.[i].EnteredBy$
	   Col16$[i]=oo.[i].GTM$
	   Col17$[i]=oo.[i].TypeDesc$
    Next i


    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
	Call DXSet("col14",Col14$[])
	Call DXSet("col15",Col15$[])
	Call DXSet("col16",Col16$[])
	Call DXSet("col17",Col17$[])

    Call DXSet("slsmn",SLS$)
	!
    Call DXSet("output",trim$(mergedir$)+"sfqolist.html")

  End If
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfquotes"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfquotes
!

!
Sub sfbkord()
!--------------------------------------------------------------------
!creates a list of backorders
 Try
    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("custid",custid$) \ custid = custid$

    Call BOList(Val(CO$),VAL(SLS$),debug,dlog$,bo.[], ii,ss,maxRow, arrSales[], custid)
	if ii > MaxRow let ii = MaxRow
    For i=0 to ii
       Col1$[i]=bo.[i].SalesMan$
       Col2$[i]=bo.[i].CustId$
       Col3$[i]=bo.[i].CustName$
       Col4$[i]=bo.[i].OrderNo$
       Col5$[i]=bo.[i].OrderIT$
       Col6$[i]=bo.[i].Vendor$
       Col7$[i]=bo.[i].PO$
       Col8$[i]=bo.[i].Ordered$
       Col9$[i]=bo.[i].Item$
       Col10$[i]=bo.[i].Desc1$
       Col11$[i]=bo.[i].QtyOrd$
       Col12$[i]=bo.[i].OrdUM$
       Col13$[i]=bo.[i].QtyBord$
       Col14$[i]=bo.[i].ShipDT$
	   Col15$[i]=bo.[i].EnteredBy$
	   Col16$[i]=bo.[i].Desc2$
       Col17$[i]=bo.[i].QtyOrdWT$
       Col18$[i]=bo.[i].QtyBordWT$
    Next i
    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
    Call DXSet("col14",Col14$[])
	Call DXSet("col15",Col15$[])
	Call DXSet("col16",Col16$[])
	Call DXSet("col17",Col17$[])
	Call DXSet("col18",Col18$[])

    Call DXSet("slsmn",SLS$)
	!
    Call DXSet("output",trim$(mergedir$)+"sfboList.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfbkord"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfbkord
!
!
Sub sfcrhold()
!--------------------------------------------------------------------
!creates a list of credit holds
 Try
  !loop to get credit hold orders
    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("custid",custid$) \ custid = custid$
	if not(custid) Call DXGet("U_FOCUS",custid$) \ custid = custid$

    Call CHList(Val(CO$),VAL(SLS$),debug, dlog$, bi.,ch.[], ii,ss, maxRow, arrSales[], custid)
	if ii > MaxRow let ii = MaxRow
    For i=0 to ii
       Col1$[i]=ch.[i].SalesMan$
       Col2$[i]=ch.[i].CustId$
       Col3$[i]=ch.[i].CustName$
       Col4$[i]=ch.[i].OrderNo$
       Col5$[i]=ch.[i].PO$
       Col6$[i]=ch.[i].Ordered$
       Col7$[i]=ch.[i].ShipDT$
       Col8$[i]=ch.[i].TResale$
       Col9$[i]=ch.[i].TGPP$
       Col10$[i]=ch.[i].ARBal$
       Col11$[i]=ch.[i].Current$
       Col12$[i]=ch.[i].Over30$
       Col13$[i]=ch.[i].Over60$
       Col14$[i]=ch.[i].Over90$   
	   Col15$[i]=ch.[i].GTM$
	   Col16$[i]=ch.[i].HoldMsg$
	   Col17$[i]=ch.[i].PastDue$
    Next i
    Call DxSet("ArBuck",ArBuck$[])
    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
    Call DXSet("col14",Col14$[])
	Call DXSet("col15",Col15$[])
	Call DXSet("col16",Col16$[])
	Call DXSet("col17",Col17$[])

    Call DXSet("slsmn",SLS$)
    Call DXSet("ii",str$(ii))
	!
    Call DXSet("output",trim$(mergedir$)+"sfchlist.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfcrhold"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfcrhold
!
!
Sub sfordedt()
!--------------------------------------------------------------------
!creates a list of daily order edits
 Try
  !loop to get order edit items
  Dim ET.[maxRow] as etInfo 
  Call DXGet("S_USER.AppID",CO$) ! Company
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number

  Call ETEdits(VAL(CO$), Val(SLS$), debug, dlog$, ET.[], ii ,ss,maxRow, arrSales[])
  if ii > MaxRow let ii = MaxRow
  For i=0 to ii-1
    custids$[i]=et.[i].custid$
    custnames$[i]=et.[i].custname$
    ordernos$[i]=et.[i].orderno$
    orderdates$[i]=et.[i].orderdate$
    orditems$[i]=et.[i].orditem$
    access$[i]=et.[i].access$
    weightX$[i]=et.[i].weightX$
	!
	ordcitemqtys$[i]=et.[i].ordcitemqty$
	ordcitemums$[i]=et.[i].ordcitemum$  
	ordcitembos$[i]=et.[i].ordcitembo$  
	ordcitemshipqtys$[i]=et.[i].ordcitemshipqty$
    !
    orditemqtys$[i]=et.[i].orditemqty$
    orditemums$[i]=et.[i].orditemum$
    orditembos$[i]=et.[i].orditembo$
    orditemchanges$[i]=et.[i].orditemchg$
    orditemshipqtys$[i]=et.[i].orditemshipqty$
    orditemprices$[i]=et.[i].orditemprice$
    orditempriceums$[i]=et.[i].orditempriceum$
    orditemmargins$[i]=et.[i].orditemmargin$
    edittypes$[i]=et.[i].edittype$
	!
    ordnitemqtys$[i]=et.[i].ordnitemqty$
    ordnitemums$[i]=et.[i].ordnitemum$
    ordnitembos$[i]=et.[i].ordnitembo$
    ordnitemshipqtys$[i]=et.[i].ordnitemshipqty$
    ordnitemprices$[i]=et.[i].ordnitemprice$
    ordnitempriceums$[i]=et.[i].ordnitempriceum$
    ordnitemmargins$[i]=et.[i].ordnitemmargin$
    itemnos$[i]=et.[i].item$
    itemdescs$[i]=et.[i].itemdesc$
    ordactions$[i]=et.[i].ETAction$
	etnewunitprice$[i]=et.[i].etnewunitprice$
	etoldunitprice$[i]=et.[i].etoldunitprice$
	etpunit$[i]=et.[i].etpunit$
  Next i
  
  Call DXSet("custid",custids$[])
  Call DXSet("custname",custnames$[])
  Call DXSet("orderno",ordernos$[])
  Call DXSet("orderdate",orderdates$[])
  Call DXSet("access",access$[])
  Call DXSet("weightx",weightX$[])
  !
  Call DXSet("orditem",orditems$[])
  Call DXSet("ordcitemqty",ordcitemqtys$[])          
  Call DXSet("ordcitemum",ordcitemums$[])            
  Call DXSet("ordcitembo",ordcitembos$[])            
  Call DXSet("ordcitemshipqty",ordcitemshipqtys$[])  

  Call DXSet("orditemqty",orditemqtys$[])
  Call DXSet("orditemum",orditemums$[])
  Call DXSet("orditembo",orditembos$[])
  Call DXSet("orditemseq",orditemseqs$[])
  Call DXSet("orditemchange",orditemchanges$[])
  Call DXSet("orditemshipqty",orditemshipqtys$[])
  Call DXSet("orditemprice",orditemprices$[])
  Call DXSet("orditempriceum",orditempriceums$[])
  Call DXSet("orditemmargin",orditemmargins$[])
  !
  Call DXSet("edittype",edittypes$[]) !A,C,D, O order deleted
  Call DXSet("ordnitemqty",ordnitemqtys$[]) !changes,new data
  Call DXSet("ordnitemum",ordnitemums$[])
  Call DXSet("ordnitembo",ordnitembos$[])
  Call DXSet("ordnitemshipqty",ordnitemshipqtys$[])
  Call DXSet("ordnitemprice",ordnitemprices$[])
  Call DXSet("ordnitempriceum",ordnitempriceums$[])
  Call DXSet("ordnitemmargin",ordnitemmargins$[])
  Call DXSet("ordaction",ordactions$[])
  Call DXSet("etnewunitprice",etnewunitprice$[])
  Call DXSet("etoldunitprice",etoldunitprice$[])
  Call DXSet("etpunit",etpunit$[])
  Call DXSet("ii",str$(ii))
  !
  !
  Call DXSet("itemno",itemnos$[])
  Call DXSet("itemdesc",itemdescs$[])
  !
  Call DXSet("output",trim$(mergedir$)+"sfordedt.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfordedt"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfordedt
!
!
Sub sfprice(e$,action$)
 Try
	Declare External Sub CommList

  Clear Col1$,Col2$,Col3$,Col4$,Col5$     
  Clear Col6$,Col7$,Col8$,Col9$,Col10$    
  Clear Col11$,Col12$,Col13$,Col14$,Col15$
  Clear Col16$,Col17$,Col18$,Col19$,Col20$

  Dim action2$[20],action3$[20],lgic$[20],what$[20]
  
  Dim chans[20],Cust$[6],Prod$[12],shipto$[6],shipcust$[6], tmpshipto$[14]
  Dim keyCust$[6],keydept$[4]
  Dim keyWhse$[2]
  Dim keyProd$[12],keynext$[50] 
  Dim keyQty$[30]
  Dim keyQunit$[4]    
  Dim keyPunit$[4],tum$[4]
  Dim keypermfactor$[30],keypermcost$[30]    
  Dim keyfppermfactor$[30],keyfppermdate$[10]
  Dim 1%,litemode
  Dim 2%,dept,taxback,shipcode,shipcust
  dim note$[maxrow,600],qty$[maxrow,14],qum$[maxrow,4],price$[maxrow,14],pum$[maxrow,4],perm$[maxrow,8],gp$[maxrow,7] !cart detail array
  Dim dept$[maxrow,4],lpdept$[maxrow,4],cost$[maxrow,14],pumhtml$[maxrow,300],qumhtml$[maxrow,300],lwh$[maxrow,2],headwh$[2]
  dim whsavl$[maxrow,10],avl$[maxrow,10],upcharge$[maxrow,14],tax$[maxrow,1]
  dim ucost$[maxrow,30],netcost$[maxrow,30],uprice$[maxrow,30],netprice$[maxrow,30],upcost$[maxrow,14]
  dim aum$[maxrow,4]
  dim cartdet. as cartdet
  dim pr. as prod
  Dim lps.[maxrow] as lpInfo      
  Dim lpin. As lpInfo
  Dim ps. as priceInfo
  Dim eps. as extPriceInfo
  Dim cc.[maxRow] as commInfo
  Dim cust. as customer
  Dim dol$[11]
  dol$="----,---.##"
  Dim Qmask$[20],Pmask$[20],Emask$[20],dec$[5],2%,Q0[1],p9$[50],p60$[50],p61$[256]

  call dxget("U_nocost",nocost$)
  Call DXGet("action2",action2$) \ action2$ = LCase$(action2$)
  Call DXGet("action3",action3$) \ action3$ = LCase$(action3$)
  msg$="doing...DXGet action2-"+action2$ \ Call updatelog(debug)
  msg$="doing...DXGet action3-"+action3$ \ Call updatelog(debug)

  Call DXGet("S_USER.AppID",CO$) ! Company                                    
  intco=val(co$)
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
  
  If action3$ = "lite" let litemode=1 else litemode=0
  If action3$ = "noprice" let litemode=1
 !                                                         
 If action2$ = "addlppopup"                                
	 Call DXGet("keycust",keycust$)                        
	 Call DXSet("keycust",keycust$)                        
	 Call DXSet("output",trim$(mergedir$) + "sfaddlp.html")
 End If                                                    
 !                                                         
  !--------------------------------------------------------------------
  If action2$="list"
	chans[0]= OpenFile(-9999,intCo) \ If chans[0]=-1 Error 42    !cntrl
	chans[1]= OpenFile(-1376,intCo)  \ If chans[1]=-1  Error 42    !lastprice
	chans[2]= OpenFile(-1792,intCo)  \ If chans[2]=-1  Error 42    !product
	chans[3]= OpenFile(-2288,intCo)  \ If chans[3]=-1  Error 42    !commcode
	chans[4]= OpenFile(-1808,intCo)  \ If chans[4]=-1  Error 42    !cust
	chans[5]= OpenFile(-1824,intCo)  \ If chans[5]=-1  Error 42    !salesman
	chans[6]= OpenFile(-1728,intCo)  \ If chans[6]=-1  Error 42    !u/m ccodes
	chans[7]= OpenFile(-2880,intCo)  \ If chans[7]=-1  Error 42    !contracth
	chans[8]= OpenFile(-752,intCo)   \ If chans[8]=-1  Error 42    !prtypefle
	chans[9]= OpenFile(-1936,intCo) \ If chans[9]=-1 Error 42    !spcprice^
	chans[10]= OpenFile(-1744,intCo)  \ If chans[10]=-1  Error 42    !prodwhse^
	chans[11]= OpenFile(-1952,intCo)  \ If chans[11]=-1  Error 42    !brktbl^M
	chans[12]= OpenFile(-2768,intCo)  \ If chans[12]=-1  Error 42    !whinfo^M
	chans[13]= OpenFile(-1680,intCo)  \ If chans[13]=-1  Error 42    !custspec^
	chans[14]= OpenFile(-2352,intCo)  \ If chans[14]=-1  Error 42    !stagitem^
	 DEPTC = openfile(-1632,intCo) \ If DEPTC = -1 Error 42 !dept file
	!!cartdc = openfile(-10002,val(co$)) \ If cartdc = -1 Error 42 !cart detail
	fileno=-10002\call dxget("u_q",tmp$)\if tmp$<>"" let fileno=-10012 !for quotes 070426
	cartdc = openfile(fileno,val(co$)) \ If cartdc = -1 Error 42 !cart detail
	CTXC = openfile(-928,intCo) \ If CTXC = -1 Error 42    !"cust tax type file
	ctlc=chans[0]\prc=chans[2]\WHC=chans[10]\ccc=chans[6]\cuc=chans[4]
	!decimal places for cost,price
	Mat Read #CTLC,115,40;Q0;
	If Not(Q0[1]) Let Q0[1] = 2
	MAT  READ #ctlc,19,50;P9$;
	 !"read the suflag p60$          
	  MAT READ #ctlc,60,50;P60$;      
	  MAT READ #ctlc,61,0;P61$;
	Dec$ = "#",Dec$
	Qmask$ = "---,---,--#"
	If Q0[0] Let Qmask$ = "---,---,--#.",Dec$[1,Q0[0]]
	If Q0[1] Let Pmask$ = "----,---.",Dec$[1,Q0[1]]
	 Call DXGet("keycust",keycust$) !customer                                   
     Call DXGet("keyprod",keyprod$) !product code
     Call DXGet("what",what$) \ what$ = ucase$(what$) ! rep or cust version
	 Call DXGet("keynext",keynext$)
	 Call DXGet("U_shipto",shipto$)
	 Call DXGet("U_shipcust",shipcust$)

     if what$="ORDER"
		  if not(litemode) call deptlist(e$,deptc) !
		  if not(litemode) Call whlist(e$,chans[12])
		  cartdet.userid$=userid$,"        " !091016 use userid from getsession,ucased
		  call dxget("u_custid",tmp$)
		  cartdet.custid$=tmp$,"          "
		  cartdet.ltype$="0"
		  cur = getcust(e$,CUC,cartdet.custid$,cust.)
		  Call DXGet("U_HEADWH",headwh$)
     end if

	 Call DXGet("U_whse",keywhse$)
	 keyprod$ = UCase$(keyprod$)
	 Call DXGet("ogtype",tmp$)

     if tmp$="S" AND p61$[64,64]="Y" !  and shipto$ > "" ! shipto order guide
		Call DXGet("U_shipto",shipto$)
		Call DXGet("U_shipcust",shipcust$)

		! shipto order guide
		call dxget("xshipto",tmpshipto$) ! if we pass it, use it  
		if tmpshipto$                                             
		  shipto$ = fra(val(tmpshipto$)) * 1000000 using "&&&&&&" 
		end if

		Try Close #chans[1] else rem
		chans[1]= OpenFile(-9982,intCo)  \ If chans[1]=-1  Error 42    !sllstprc
		tmp$[1,6] = Val(keycust$) Using "######"               
		If shipto$ Let tmp$[7,12] = Val(shipto$) Using "&&&&&&"
		Call SLLPDet(Val(CO$),Val(SLS$),debug,dlog$,tmp$,keyprod$,lps.[],ii,ss,maxRow, arrSales[],keynext$,chans[])
		Try Close #chans[1] else rem
		chans[1]= OpenFile(-1376,intCo)  \ If chans[1]=-1  Error 42    !lastprice
		Call DXSet("U_ogtype","S")
     else
		 Call LPDet(Val(CO$),Val(SLS$),debug,dlog$,keycust$,keyprod$,lps.[],ii,ss,maxRow, arrSales[],keynext$,chans[])
		 Call DXSet("U_ogtype","")
     end if

	 if ii > MaxRow let ii = MaxRow
     If ss=10000   e$="Last price not found for customer "+keycust$+" product "+keyprod$+"!"                                    
     If ss Error 10000                                                          
     if ii<1 if what$="ORDER" let e$="No items in Order Guide"\error 10000

	 Call DXSet("ii",str$(ii-1))  ! set record count here cause ii is reused

     For i=0 to ii-1                   
		keycust$=lps.[i].custid$
		keyprod$=lps.[i].prodid$
		keywhse$=lps.[i].whse$
		prr = getprod(e$,PRC,keyprod$,PR.) 
		!let keyqty$="0"                      !"qty default to zero 
		If len(keyqty$)<=0
		if len(lps.[i].qty$)>14
			let keyqty$=lps.[i].qty$[1,14]
		else
			let keyqty$="0"
		endif
		endif
		!keyqunit$ and keypunit$ store the u/m code, now assign to the #
		!let keyqunit$=str$(PR.PFU1[9])       !"qty u/m default to selling u/m
		!let keypunit$=str$(PR.PFU1[12])      !"priceing u/m   
		keyqunit$ = lps.[i].sellum$ ! "0" -- dfa to what was bought last
	    keypunit$ = lps.[i].priceum$ !"0" -- dfa to what was bought last

		tprice=LTrim$(lps.[i].curprice$ To "/")

		if not(litemode) or not(price)
			if p60$[30,30]="Y" let keypunit$=keyqunit$ ! unitsequal flag - can't do in quick quick guide
			Call PriceDet(Val(CO$),Val(SLS$),debug,dlog$,keycust$,keyprod$,keywhse$,keyqty$,keyqunit$,keypunit$,ps.,ii,ss,maxRow, arrSales[],chans[],eps.)
		else
			ps.cprice$ = lps.[i].curprice$
			ps.price$ = lps.[i].curprice$ 
			ps.cost$ = lps.[i].curcost$   
			ps.ucost$ = lps.[i].curcost$
		end if

		Col1$[i]=lps.[i].slsid$
		Col2$[i]=lps.[i].custid$    
	    Col3$[i]=lps.[i].custname$      
	    Col4$[i]=lps.[i].prodid$    
        Col5$[i]=lps.[i].desc1$        
		Col6$[i]=lps.[i].desc2$     
	    Col7$[i]=ps.cprice$
		if eps.priceContractNo$ <> " "
			Col7a$[i]="*"
		else
			Col7a$[i]=" "
		end if
		If what$ = "ORDER" Let col7$[i] = LTrim$(ps.cprice$ To "/")
		Col8$[i]=lps.[i].price$
	    Col9$[i]=lps.[i].cost$     \If nocost$ = "Y" Let Col9$[i] = " "
	    Col10$[i]=lps.[i].gpp$    \if nocost$="Y" let col10$[i]=" "      
	    Col11$[i]=lps.[i].orderdate$[7],"/",lps.[i].orderdate$[1,5] !date to yyyy/mm/dd for sorting     
	    Col12$[i]=lps.[i].freq$       
		Col13$[i] = pr.a$[152,155] ! ps.comm$ 
	    Col14$[i]=lps.[i].qty$       
	    Col15$[i]=ps.futuredate$
	    Col16$[i]=ps.futurecost$  \ If nocost$ = "Y" Let Col16$[i] = " "      
	    Col17$[i]=ps.cost$       \ If nocost$ = "Y" Let Col17$[i] = " "
		if eps.rebateContractNo$ <> " "
			Col17a$[i] = "*"
		else
			Col17a$[i] = " "
		end if
	    Col18$[i]=lps.[i].whse$
		Col19$[i] = lps.[i].lprec$
		lpdept$[i] = lps.[i].dept
		Try                                                   
			gcost=removesigns(ps.cost$)
			gprice=removesigns(ps.price$)
			if not(gprice) let gprice=1
			tgp = (gprice - gcost) / gprice  * 100
		Else                                                  
			tgp = 0                                             
		End Try                                               
		Col20$[i] = tgp using "####.##%" ! curr gtm               

	   If what$ = "ORDER"
            if nocost$<>"Y" Let col17$[i] = ps.cost$ To "/"
            pumhtml$[i]=getumhtml$(e$,keyprod$,"P",prc,ccc)
            qumhtml$[i]=getumhtml$(e$,keyprod$,"Q",prc,ccc)
       end if
       
	   if what$="ORDER" !see entry already in cart for defaults
             cartdet.prod$=keyprod$
             cartdet.lineno=0
             cartdr=getcartdet(e$,cartdc,cartdet.)
             upcharge$[i]=" "
	     upcost$[i]=" "
	      if ps.l7<0
	       let upcharge$[i]=ltrim$(abs(ps.l7) using pmask$)
              else if ps.l7>0
	       upcharge$[i]=ltrim$(abs(ps.l7) using "###.##%")
	      end if
	      if ps.rol0<0
	       let upcost$[i]=ltrim$(abs(ps.rol0) using pmask$)
              else if ps.rol0>0
	       upcost$[i]=ltrim$(abs(ps.rol0) using "###.##%")
	      end if
	     let netprice$[i]=LTrim$(ps.cprice$ to "/")
	     let netcost$[i]=Ltrim$(ps.cost$ to "/")
	     let uprice$[i]=Ltrim$(ps.price$ to "/")
	     let ucost$[i]=ltrim$(ps.ucost$ to "/")
	     
	     
             if cartdr<0 
              qty$[i]=" "\qum$[i]=" "\price$[i]=" "\pum$[i]=" "\gp$[i]=" "\perm$[i]="checked"\note$[i]=" "\dept$[i]=" "\lwh$[i]=" "
			  price$[i]=LTrim$(ps.cprice$ To "/")
              if price$[i] = "" price$[i] = " "
			  ! default to header wh
				lwh$[i]=headwh$			  
			  !
			  umpos=pos(ps.cprice$,="/")
			  pum$[i]=rtrim$(ps.cprice$[umpos+1])
			  let pum$[i] = pum$[i] to " "   ! string may contain " *"
                          tmp$=ltrim$(lps.[i].qty$)
                          umpos=pos(tmp$,=" ")
			  qum$[i]=rtrim$(tmp$[umpos+1]) 

			  !calc gp from ps.cprice & ps.cost
				cost$[i]=ltrim$(ps.cost$ to "/")
				if cost$[i] = "" cost$[i] = " "
			  Try 
				if val(price$[i]) let gp$[i]=str$(int((val(price$[i])-val(cost$[i]))/val(price$[i])*10000)/100) 
			  else
				let gp$[i]="0"
			  end try
			  
                         !! if taxable(e$,p60$,ctxc,cust.a0[3],cust.c2[1],lps.[i].taxcode,pr.a1[7]) =0 let tax$[i]="N" else let tax$[i]="Y"
			dept=0;taxback=0 ! if p9$[44,44]="Y" need to send over dept for last price lookup
			Call DXGet("U_shipto",shipto$)
			Call DXGet("U_shipcust",shipcust$)
			Try
				if val(shipto$) let shipcode=val(shipto$)
			else
				let shipcode=0
			end try
			Try
				if val(shipcust$) let shipcust=val(shipcust$)
			else
				let shipcust=val(keycust$)
			end try
			Call Taxflag(keycust$,keyprod$,shipcust,shipcode,dept,pr.a1[7],intco,cust.c2[1],cust.a0[3],taxback)
			if taxback let tax$[i]="Y" else let tax$[i]="N" 
	     else   ! yes there is a cartdet.
              qty$[i]=cartdet.qty using qmask$
              qty$[i]=ltrim$(qty$[i])
              qum$[i]=RTrim$(cartdet.qum$)
              price$[i]=ltrim$(cartdet.uprice using pmask$)
			  if price$[i] = "" price$[i] = " "
			  netprice$[i]=ltrim$(cartdet.uprice using pmask$)
			  uprice$[i]=ltrim$(cartdet.price using pmask$)
			  netcost$[i]=ltrim$(cartdet.ucost using pmask$)
			  ucost$[i]=ltrim$(cartdet.cost using pmask$)
			  upcharge$[i]=" "
			  upcost$[i]=" "
              if cartdet.l7<0
				let upcharge$[i]=ltrim$(abs(cartdet.l7) using pmask$)
              else if cartdet.l7>0
				upcharge$[i]=ltrim$(abs(cartdet.l7) using "###.##%")
			  end if
			  if cartdet.rol0<0
			   let upcost$[i]=ltrim$(abs(cartdet.rol0) using pmask$)
				  else if cartdet.rol0>0
				  upcost$[i]=ltrim$(abs(cartdet.rol0) using "###.##%")
			  end if
			  pum$[i]=Rtrim$(cartdet.pum$)
              gp$[i]=str$(cartdet.gp)
              !cost=cartdet.price - (cartdet.price*cartdet.gp/100) !calc cost
              !cost$[i]=ltrim$(roundit(cost,q0[1],p9$[42,42]) using pmask$)
		       cost$[i]=(cartdet.ucost using pmask$)
              if nocost$<>"Y" let col17$[i]=cost$[i] !display cartdet cost
		      cost$[i]=ltrim$(cartdet.ucost using pmask$)
			  if cost$[i] = "" cost$[i] = " "
			  note$[i]=cartdet.notes$\if note$[i]="" let note$[i]=" "
              if cartdet.perm let perm$[i]="checked" else let perm$[i]=" "
              dept$[i]=cartdet.dept
			  lwh$[i]=cartdet.lwh$
	      
			Call DXGet("U_shipto",shipto$)
			Try
				if val(shipto$) let shipcode=val(shipto$)
			else
				let shipcode=0
			end try
			Call DXGet("U_shipcust",shipcust$)
			Try
				if val(shipcust$) let shipcust=val(shipcust$)
			else
				let shipcode=val(keycust$)
			end try
			Call Taxflag(keycust$,keyprod$,shipcust,shipcode,dept,pr.a1[7],intco,cust.c2[1],cust.a0[3],taxback)
			if taxback let tax$[i]="Y" else let tax$[i]="N" 
	     !! if cartdet.taxable=0 let tax$[i]="N" else let tax$[i]="Y"
             end if !cartdr
             !get avail for whs
			 prr = getprod(e$,PRC,keyprod$,PR.)                          
             if p9$[33,33]<>"N"
				 whse=keywhse$ !salesman's whse
				 CNVTA = getwhavail(e$,WHC,keyprod$,whse)
				 CNVTU[0] = 0
				 CNVTU[1] = pr.pfu1[9] !convert um code to record #
				 CNVTU[2] = 1
				 totavl = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
				 whsavl$[i] = totavl Using "---,---.##"
             else
	             whsavl$[i]=" "
             end if !p9$
		     aum$[i]=Rtrim$(xunit$(pr.pfu1[9],ccc)) !avail um, as selling um
              cnvta=pr.a[0]-pr.a[1]-pr.a[3]
              if p9$[28,28]="Y" let cnvta=cnvta-pr.a[2]
              cnvtu[0]=0\cnvtu[1]=pr.pfu1[9]\cnvtu[2]=1
              totavl=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
              avl$[i]=totavl Using "---,---.##"
            end if  ! cartdet.
	 Next i 
	 Call DXSet("keycust",lps.[0].CustId$)   
	 Call DXSet("keynext",keynext$)
	 Call DXSet("custname",lps.[0].CustName$)
	 Call DXSet("col1",Col1$[])              
	 Call DXSet("col2",Col2$[])                         
	 Call DXSet("col3",Col3$[])                
	 Call DXSet("col4",Col4$[])                   
	 Call DXSet("col5",Col5$[])               
	 Call DXSet("col6",Col6$[])                       
	 Call DXSet("col7",Col7$[])
	 Call DXSet("col7a",Col7a$[])
	 Call DXSet("col8",Col8$[])                    
	 Call DXSet("col9",Col9$[])                    
	 Call DXSet("col10",Col10$[])                    
	 Call DXSet("col11",Col11$[])                 
	 Call DXSet("col12",Col12$[])                   
	 Call DXSet("col13",Col13$[])                   
	 Call DXSet("col14",Col14$[])                   
	 Call DXSet("col15",Col15$[])                   
	 Call DXSet("col16",Col16$[])                   
	 Call DXSet("col17",Col17$[])                   
	 Call DXSet("col17a",Col17a$[])                   
	 Call DXSet("col18",Col18$[])                   
	 Call DXSet("col19",Col19$[])                   
	 Call DXSet("col20",Col20$[])
	 Call DXSet("lpdept",lpdept$[])

         if what$="ORDER"
          call dxset("qty",qty$[])
          call dxset("qum",qum$[])
          call dxset ("price",price$[])
          call dxset("upcharge",upcharge$[])
          call dxset("pum",pum$[])
          call dxset("gp",gp$[])
          call dxset("perm",perm$[])
          call dxset("pumhtml",pumhtml$[])
          call dxset("qumhtml",qumhtml$[])
          call dxset("cost",cost$[])  !col17 is cost,sometimes blanked,this cost is always there for calcs and save,hidden input field
		  call dxset("note",note$[])
          call dxset("dept",dept$[])
		  call dxset("lwh",lwh$[])
          call dxset("avl",avl$[])
          call dxset("whsavl",whsavl$[])
		  call dxset("aum",aum$[])
	  call dxset("tax",tax$[])
	  call dxset("ucost",ucost$[])
	 call dxset("netcost",netcost$[])
	call dxset("uprice",uprice$[])
	call dxset("netprice",netprice$[])
	call dxset("upcost",upcost$[])
         end if
	 !
	 If what$ = "CUST"                                               
	 	Call dxset("output",trim$(mergedir$) + "sfcustpricelist.html")
	 Else If what$ = "ORDER"                                         
		Call dxset("output",trim$(mergedir$) + "sforderguide.html")
		if litemode Call DXSet("output",trim$(mergedir$) + "sforderguidelite.html")
	 Else                                                            
	 	Call dxset("output",trim$(mergedir$) + "sfpricelist.html")    
	 End If
	!
	 If action3$ = "noprice"                                    
		Call DXSet("output",trim$(mergedir$) + "sfqprlist.html") 
	 End If                                                     

  Endif !list

  !--------------------------------------------------------------------
  If action3$="searchprice"              
	 keycust$=" "       
	 ! keywhse$="1"
	 Call DXGet("U_whse",keywhse$)
     keyprod$=" "                                               
	 keyqty$="0"
     
	 Call CommList(Val(CO$),Val(SLS$),debug,dlog$, cc.[], ii, ss, maxRow)                                                                         
	if ii > MaxRow let ii = MaxRow
    For i=0 to ii
       Col1$[i]=cc.[i].Commcode$
       Col2$[i]=cc.[i].Commodity$
	Next i
	 Call DXSet("commcode",col1$[],"L")   !commcode
	 Call DXSet("commdesc",col2$[],"L")   !commdesc

	 Call DXSet("keycust",keycust$)   !customer                   
	 Call DXSet("keywhse",keywhse$)   !whse
     Call DXSet("keyprod",keyprod$)   !product code               
	 Call DXSet("keyqty",keyqty$)     !qty
	 !                                                          
 	 Call DXSet("output",trim$(mergedir$)+"sfsearchprice.html") 
	 Clear Col1$[],Col2$[]
  Endif !searchprice                                                         

  !-------------------------------------------------------------------
  If action3$="getpricedet"                                             
     Call DXGet("keycust",keycust$)     !customer                        
	 Call DXGet("keyprod",keyprod$)     !product code                
	 keyprod$ = UCase$(keyprod$)
	 Call DXGet("keywhse",keywhse$)     !whse
	 Call DXGet("keyqty",keyqty$)       !qty - u/m base on keyqunit$
	 Call DXGet("keyqunit",keyqunit$)   !qunit - get the code - 4 characters
	 Call DXGet("keypunit",keypunit$)   !punit - get the code - 4 characters
     PRC = OpenFile(-1792,intCo)  \ If PRC=-1  Error 42    !product
	 prr = getprod(e$,PRC,keyprod$,PR.)                                     
	! If len(keyqty$)<=0  then let keyqty$="0"   !"default to zero 
	If len(keyqty$)<=0  then let keyqty$="1"   !"default to 1 ( if zero doesn't get a price)
	 If len(keyqunit$)<=0 
		!keyqunit$ store the u/m code, now assign to the #  
		let keyqunit$=str$(PR.PFU1[9])       !"qty u/m default to selling u/m 
     else	
	       keyqunit$=str$(getum(e$,CCC,keyqunit$)) !convert code to the #
     endif
	 If len(keypunit$)<=0 
		!keypunit$ store the u/m code, now assign to the #   
		let keypunit$=str$(PR.PFU1[12])      !"priceing u/m       
     else	        
	       keypunit$=str$(getum(e$,CCC,keypunit$)) !convert code to the #
     endif
     Call PriceDet(Val(CO$),Val(SLS$),debug,dlog$,keycust$,keyprod$,keywhse$,keyqty$,keyqunit$,keypunit$,ps.,ii,ss,maxRow, arrSales[])
	 If ss=10000   e$="Customer "+keycust$+" not found!" 
	 If ss=10001   e$="Invalid warehouse "+keywhse$+"!"
	 If ss=10002   e$="Product warehouse record ("+keyprod$+") not found!"
	 If ss=10003   e$="Product "+keyprod$+" not found!"
     If ss Error 10000       

     Call DXSet("custid",ps.custid$) 
     Call DXSet("custname",ps.custname$) 
	 Call DXSet("pricetype",ps.pricetype$)
	 Call DXSet("whse",ps.whse$)  
	 Call DXSet("prodid",ps.prodid$)
	 Call DXSet("desc1",ps.desc1$)   
     Call DXSet("desc2",ps.desc2$) 
	 Call DXSet("vendoritem",ps.vendoritem$)
	 Call DXSet("comm",ps.comm$)
	 Call DXSet("qtyonhand",ps.qtyonhand$)
	 Call DXSet("cprice",ps.cprice$)
	 Call DXSet("ppu",ps.ppu$)                       
	 Call DXSet("rebatecontract",ps.rebatecontract$) 
	 Call DXSet("permpricegroup",ps.permpricegroup$) 
	 If cost_lev[1]
	    Call DXSet("sprice",ps.sprice$)
	    If not(hidecost) and nocost$<>"Y" Call DXSet("gpp",ps.gpp$)
	    if nocost$<>"Y" Call DXSet("cost",ps.cost$)
	 Endif
 	 If cost_lev[3]  ! base cost security
		 if nocost$<>"Y" Call DXSet("msgdesc",ps.msgdesc$)
	 End if
     !                                                            
     Call DXSet("output",trim$(mergedir$)+"sfpricedet.html")       
  Endif  !getpricedet

  !--------------------------------------------------------------------
  If action3$="searchlp" 
	 keycust$=" "
	 keyprod$=" "
     Call DXSet("keycust",keycust$) !customer    
	 Call DXSet("keyprod",keyprod$) !product code
	 !
	 Call DXSet("output",trim$(mergedir$)+"sfsearchlp.html")
  Endif !searchlp
  
  If action3$="lookup" 
	 keycust$=" "
	 keyprod$=" "
	 !
	 Call CommList(Val(CO$),Val(SLS$),debug,dlog$, cc.[], ii, ss, maxRow) 
	if ii > MaxRow let ii = MaxRow
    For i=0 to ii
       Col1$[i]=cc.[i].Commcode$
       Col2$[i]=cc.[i].Commodity$
	Next i
	 Call DXSet("commcode",col1$[],"L")   !commcode
	 Call DXSet("commdesc",col2$[],"L")   !commdesc
	 Call DXSet("output",trim$(mergedir$)+"sfprodlookup.html")
	 Clear Col1$[],Col2$[]
  Endif !searchlp

  If action3$="getlpdet"                             
	 Call DXGet("keycust",keycust$) !customer      
	 Call DXGet("keyprod",keyprod$) !product code  
	 Call DXGet("U_whse",keywhse$)
	 Call DXGet("keydept",keydept$)
	 keyprod$ = UCase$(keyprod$)
	 lps.[0].dept=keydept$
     Call LPDet(Val(CO$),Val(SLS$),debug,dlog$,keycust$,keyprod$,lps.[],ii,ss,maxRow, arrSales[],keynext$)
     If ss=10000   e$="Last price not found for customer "+keycust$+" product "+keyprod$+"!" 

	 keycust$ = lps.[i].CustId$                                                
	 keyprod$ = lps.[i].prodid$                                                
	 scr = lps.[i].whse$                                                       
	 If scr Let keywhse$ = scr using "##" 
	 If len(keyqty$)<=0
		if len(lps.[i].qty$)>14
			let keyqty$=lps.[i].qty$[1,14]
		else
			let keyqty$="0"
		endif
	endif
	 keyqunit$ = lps.[i].sellum$ ! "0"
	 keypunit$ = lps.[i].priceum$ !"0"
	 Call PriceDet(Val(CO$),Val(SLS$),debug,dlog$,keycust$,keyprod$,keywhse$,keyqty$,keyqunit$,KEYPUNIT$,ps.,ii,ss,maxRow,arrSales[])                          
     If ss Error 10000 

	 Call DXSet("custid",lps.custid$)                    
	 Call DXSet("custname",lps.custname$)
	 Call DXSet("prodid",lps.prodid$)
	 Call DXSet("desc1",lps.desc1$)
	 Call DXSet("desc2",lps.desc2$)
	 Call DXSet("price",lps.price$) 
	 if nocost$<>"Y" Call DXSet("cost",lps.cost$)      
	 Call DXSet("qty",lps.qty$)       
	 Call DXSet("orderdate",lps.orderdate$) 
	 Call DXSet("order",lps.order$)     
	 Call DXSet("pricetype",lps.pricetype$) 
	 Call DXSet("freq",lps.freq$)      
	 Call DXSet("whse",lps.whse$)      
	 Call DXSet("permtype",lps.permtype$)  

	 tmp$ = removesigns(lps.permfactor$)          
	 Call DXSet("permfactor",tmp$)               
	 Call DXSet("permfactorum",lps.permfactorum$)
	 if nocost$<>"Y"
	 	tmp$ = removesigns(lps.permcost$)          
		Call DXSet("permcost",tmp$)               
		Call DXSet("permcostum",lps.permcostum$)
	 end if

	 Call DXSet("fppermfactor",lps.fppermfactor$)     
	 Call DXSet("fppermfactorum",lps.fppermfactorum$) 
	 Call DXSet("fppermdate",lps.fppermdate$)         
	 Call DXSet("mtd",lps.mtd$)       
	 Call DXSet("ytd",lps.ytd$)       
	 Call DXSet("lyr",lps.lyr$)       
	 Call DXSet("lprec",lps.lprec$)
	 Call DXSet("slsmn",SLS$)
	 call DXSet("unitprice",lps.unitprice$)
	 call DXSet("unitcost",lps.unitcost$)

	 !                                                         
	 Call DXSet("299custid",ps.CustId$)                
	 Call DXSet("299custname",ps.CustName$)            
	 Call DXSet("299pricetype",ps.pricetype$)          
	 Call DXSet("299whse",ps.whse$)                    
	 Call DXSet("299prodid",ps.prodid$)                
	 Call DXSet("299desc1",ps.Desc1$)                  
	 Call DXSet("299desc2",ps.desc2$)                  
	 Call DXSet("299vendoritem",ps.vendoritem$)        
	 Call DXSet("299comm",ps.comm$)                    
	 Call DXSet("299qtyonhand",ps.qtyonhand$)          
	 Call DXSet("299cprice",ps.cprice$)                
	 Call DXSet("299ppu",ps.ppu$)                      
	 Call DXSet("299rebatecontract",ps.rebatecontract$)
	 Call DXSet("299permpricegroup",ps.permpricegroup$)
	 If cost_lev[1]                                    
		Call DXSet("299sprice",ps.sprice$)              
		If Not(hidecost) Call DXSet("299gpp",ps.GPP$)   
		Call DXSet("299cost",ps.cost$)                  
		Call DXSet("299futurecost",ps.futurecost$)      
		Call DXSet("299futuredate",ps.futuredate$)      
		Call DXSet("299msgdesc",ps.msgdesc$)            
	 End If                                            
	 !                                                 
	 Call DXSet("output",trim$(mergedir$)+"sflpdet.html")
  Endif !getlpdet
  !
  !
  If action3$ = "lpupdate"                                                    
	Call DXGet("keycust",lpin.custid$)                                        
	Call DXGet("keyprod",lpin.prodid$)                                        
	Call DXGet("keypermfactor",lpin.permfactor$)                              
	Call DXGet("keypermcost",lpin.permcost$)                                  
	Call DXGet("keyfppermfactor",lpin.fppermfactor$)                          
	Call DXGet("keyfppermdate",lpin.fppermdate$)                              
	Call DXGet("lprec",lpin.lprec$)                                           
	! keyprod$ = UCase$(keyprod$)                                             
	Call LPUpdate(Val(CO$),Val(SLS$),debug,dlog$,action2$,lpin.,lps.,ii,ss,maxRow,arrSales[])
	If ss = 10000 Let e$ = "Last price not found for customer " + lpin.custid$ + " product " + lpin.prodid$ + "!"                                             
	If ss = 10001 Let e$ = "Problem adding customer " + lpin.custid$ + " product " + lpin.prodid$ + "!"                                                       
	If ss = 1001 Let e$ = "Problem deleting customer " + lpin.custid$ + " product " + lpin.prodid$ + "!"                                                      

	if action2$="DELETE" and ss<>1001                                         
		Call DXSet("Msgtitle","LastPrice Record Delete")                        
		Call DXSet("Msgbutton","close")                                  
		Call DXSet("S_Msg","Cust:"+lpin.custid$+" Item:"+lpin.prodid$+" deleted!")
		Call DXSet("output",trim$(mergedir$)+"msg.html")                        
		Exit Sub                                                                
	End if                                                                    

	keycust$ = lps.[i].CustId$                          
	keyprod$ = lps.[i].prodid$                          
	If lps.[i].whse$<>""                                
		If Val(lps.[i].whse$) Let keywhse$ = lps.[i].whse$
	End if                                              
	keyqunit$ = "0"
	keypunit$ = "0"
	keyqunit$ = lps.[i].sellum$ ! "0"
	keypunit$ = lps.[i].priceum$ !"0"
	!!If len(keyqty$)<=0  then let keyqty$="0" 
	If len(keyqty$)<=0
		if len(lps.[i].qty$)>14
			let keyqty$=lps.[i].qty$[1,14]
		else
			let keyqty$="0"
		endif
	endif
	Call PriceDet(Val(CO$),Val(SLS$),debug,dlog$,keycust$,keyprod$,keywhse$,keyqty$,keyqunit$,KEYPUNIT$,ps.,ii,ss,maxRow,arrSales[])

	If ss Error 10000                               
	Call DXSet("custid",lps.CustId$)                
	Call DXSet("custname",lps.CustName$)            
	Call DXSet("prodid",lps.prodid$)                
	Call DXSet("desc1",lps.Desc1$)                  
	Call DXSet("desc2",lps.desc2$)                  
	Call DXSet("price",lps.price$)                  
	Call DXSet("cost",lps.cost$)                    
	Call DXSet("qty",lps.Qty$)                      
	Call DXSet("orderdate",lps.OrderDate$)          
	Call DXSet("order",lps.Order$)                  
	Call DXSet("pricetype",lps.pricetype$)          
	Call DXSet("freq",lps.freq$)                    
	Call DXSet("whse",lps.whse$)                    
	Call DXSet("permtype",lps.permtype$)            
	Call DXSet("permfactor",lps.permfactor$)        
	Call DXSet("permfactorum",lps.permfactorum$)    
	Call DXSet("permcost",lps.permcost$)            
	Call DXSet("permcostum",lps.permcostum$)        
	Call DXSet("fppermfactor",lps.fppermfactor$)    
	Call DXSet("fppermfactorum",lps.fppermfactorum$)
	Call DXSet("fppermdate",lps.fppermdate$)        
	Call DXSet("mtd",lps.mtd$)                      
	Call DXSet("ytd",lps.ytd$)                        
	Call DXSet("lyr",lps.lyr$)                        
	Call DXSet("lprec",lps.lprec$)                    
	Call DXSet("slsmn",SLS$)                          
	!                                                 
	Call DXSet("299custid",ps.CustId$)                
	Call DXSet("299custname",ps.CustName$)            
	Call DXSet("299pricetype",ps.pricetype$)          
	Call DXSet("299whse",ps.whse$)                    
	Call DXSet("299prodid",ps.prodid$)                
	Call DXSet("299desc1",ps.Desc1$)                  
	Call DXSet("299desc2",ps.desc2$)                  
	Call DXSet("299vendoritem",ps.vendoritem$)        
	Call DXSet("299comm",ps.comm$)                    
	Call DXSet("299qtyonhand",ps.qtyonhand$)          
	Call DXSet("299cprice",ps.cprice$)                
	Call DXSet("299ppu",ps.ppu$)                      
	Call DXSet("299rebatecontract",ps.rebatecontract$)
	If cost_lev[1]                                 
		Call DXSet("299sprice",ps.sprice$)           
		If Not(hidecost) Call DXSet("299gpp",ps.GPP$)
		Call DXSet("299cost",ps.cost$)               
		Call DXSet("299futurecost",ps.futurecost$)   
		Call DXSet("299futuredate",ps.futuredate$)   
		Call DXSet("299msgdesc",ps.msgdesc$)         
	End If                                         
	!                                              
	if action2$="UPDATE" Call DXSet("output",trim$(mergedir$)+"sflpdet.html")
	If action2$="ADD"
		Call DXSet("message","Record has been added.  Please update pricing or delete if in error")
		Call DXSet("output",trim$(mergedir$)+"sflpdet.html")                    
	End If

  End If  ! of if lpupdate
  ! 
 Else
   If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," sfprice" 
   Error 10000                                               
   msg$="error..."+e$ \ Call updatelog(debug)                           
   Call errTrap()                                             
 End Try
End Sub !sfprice
!
!
Sub sfinv()
!--------------------------------------------------------------------
!creates a list of daily invoices
 Try
  Dim LI$[600,3],Item$[600,50],Desc$[600,80],QtyOrd$[600,20],QtyOpn$[600,20]
  Dim Desc1$[200,30],Desc2$[200,30],ExtWeight$[200,30]
  Dim QtyAvail$[600,20],QtyBOrd$[600,20],BExt$[600,20]                      
  Dim UM$[600,10],Ext$[600,20],QtyShp$[600,20],PODate$[600,30]              
  Dim UnitPrice$[600,30],UnitCost$[600,30],GPP$[600,10],SPOs$[600,300]      
  Dim LineType$[600,2], LGP$[maxrow,20]
  Dim Cust$[6],keySCust$[6],keyECust$[6] 
  Dim keySDate$[10],keyEDate$[10]
  Dim keySInv$[10],keyEInv$[10]
  !
  Dim totamount$[30],tottax$[30],totfreight$[30],totmisc$[30],tottotal$[30]
  Dim totcost$[30],totprofit$[30],totgp$[30],totcomm$[30]

  Dim i1. as iInfo
  Dim ils.[maxRow] as iItem
  Dim tot. as totInfo

  dim 3%,scr

  Call DXGet("action2",action2$) \ action2$ = LCase$(action2$)
  Call DXGet("action3",action3$) \ action3$ = LCase$(action3$)
  msg$="doing...DXGet action2-"+action2$ \ Call updatelog(debug)
  msg$="doing...DXGet action3-"+action3$ \ Call updatelog(debug)

	If action2$ = "invoiceprint" 
	  Call "invoiceprint.dl4"    
	  ! comes back here and ends 
	  Exit Sub                   
	End If                       

  If action2$="detail"
    Call DXGet("invno",invno$)
    If invno$="all" 
	  ! No All Display for DRM system
    Else
	  !get the specific order detail
  	  Call DXGet("S_USER.AppID",CO$)     ! Company
	  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
	  Call DXGet("custid",Cust$)         ! Customer Number
	  Call IIdet(Val(CO$),Val(SLS$),debug,dlog$,invno$,Cust$,i1., ils.[],ii,ss,maxRow, cost_lev[], arrSales[])
    End If

    Call DXSet("custnumber",i1.custnumber$)
	Call DXSet("custname",i1.custname$)
	Call DXSet("soldaddr1",i1.SoldAddr1$)
	Call DXSet("soldaddr2",i1.SoldAddr2$)
	Call DXSet("soldaddr3",i1.SoldAddr3$)
	Call DXSet("soldaddr4",i1.SoldAddr4$)
	Call DXSet("s2addr1",i1.S2Addr1$)
	Call DXSet("s2addr2",i1.S2Addr2$)
	Call DXSet("s2addr3",i1.S2Addr3$)
	Call DXSet("s2addr4",i1.S2Addr4$)
	Call DXSet("slsno",i1.slsno$)
	Call DXSet("slsname",i1.SLSName$)
	Call DXSet("invoice",i1.Invoice$)
	Call DXSet("enteredby",i1.EnteredBy$)
	Call DXSet("custpo",i1.CustPo$)
	Call DXSet("term",i1.Term$)
	Call DXSet("whse",i1.WHSE$)        
	Call DXSet("division",i1.Division$)
	Call DXSet("order",i1.Order$)
	Call DXSet("orderdate",i1.OrderDate$)
	Call DXSet("shipdate",i1.ShipDate$)   
	Call DXSet("stp",i1.Stp$)
	Call DXSet("zne",i1.Zne$)
	Call DXSet("type",i1.Type$)
	Call DXSet("sp",i1.SP$)
	Call DXSet("status",i1.Status$)
	Call DXSet("attn",i1.Attn$)                                                 
	Call DXSet("invdate",i1.InvDate$)                                           
	Call DXSet("truck",i1.truck$)                                               
	Call DXSet("totweight",i1.totweight$)                                       
	Call DXSet("totcube",i1.totcube$)     
	Call DXSet("tcost",i1.TCost$)
	Call DXSet("tresale",i1.TResale$)
	Call DXSet("tgpp",i1.TGPP$)
	Call DXSet("gtm",i1.gtm$)
	Call DXSet("tax",i1.tax$)               
	Call DXSet("freight",i1.freight$)       
	Call DXSet("misc",i1.misc$)             
	Call DXSet("discount",i1.discount$)
	Call DXSet("grandtotal",i1.grandtotal$) 
	Call DXSet("image",i1.image$) 
	Call DXSet("numpages",i1.numpages$) 

	For i=0 to ii-1
      LI$[i]=ils.[i].LI$
	  Item$[i]=ils.[i].Item$
	  If ils.[i].Substitute$="Y" Then
         Item$[i]=Item$[i] + " * Subs."
	  End If
	  Desc1$[i]=ils.[i].Desc1$                                                  
	  Desc2$[i]=ils.[i].Desc2$
	  QtyOrd$[i]=ils.[i].QtyOrd$
	  QtyBOrd$[i]=ils.[i].QtyBOrd$
	  UM$[i]=ils.[i].UoM$
	  Ext$[i]=ils.[i].Extended$
	  BExt$[i]=ils.[i].BOExt$
	  QtyShp$[i]=ils.[i].QtyShp$
	  UnitPrice$[i]=ils.[i].UnitPrice$+"/"+ils.[i].UPUoM$
	  UnitCost$[i]=ils.[i].UnitCost$+"/"+ils.[i].UCUoM$
	  ExtWeight$[i]=ils.[i].ExtWeight$ 
	  GPP$[i]=ils.[i].GPP$
	  LGP$[i]=ils.[i].LGP$
      LineType$[i]=ils.[i].LineType$
	Next i
	
	Call DXSet("li",LI$[])
	Call DXSet("item",Item$[])
	Call DXSet("desc1",Desc1$[])                                                
	Call DXSet("desc2",Desc2$[])    
	Call DXSet("qtyord",QtyOrd$[])
	Call DXSet("qtyBord",QtyBOrd$[])
	Call DXSet("um",UM$[])
	Call DXSet("BOExt",BExt$[])
	Call DXSet("ext",Ext$[])
	Call DXSet("qtyshp",QtyShp$[])
	Call DXSet("unitprice",UnitPrice$[])
	Call DXSet("unitcost",UnitCost$[])
	Call DXSet("extweight",ExtWeight$[])
	Call DXSet("gpp",GPP$[])
	Call DXSet("lgp",LGP$[])
	Call DXSet("linetype",LineType$[])
    !
    Call DXSet("output",trim$(mergedir$)+"sfinvdet.html")

  Else	! not detail

	Clear Col1$,Col2$,Col3$,Col4$,Col5$
	Clear Col6$,Col7$,Col8$,Col9$,Col10$
	Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company               
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number 
   
	If action3$="search"     
	   keyscust$="0";keyecust$="999999"
	   !keysdate$=tim(4);keyedate$=tim(4)
	   ! keysdate$="12/04/05";keyedate$="12/04/03"   !demo
	   keysdate$=tim(9) using "&&/" + tim(10) using "&&/" + tim(8)-1 using "&&"
	   keyedate$=tim(9) using "&&/" + tim(10) using "&&/" + tim(8) using "&&"
	   keysinv$="0";keyeinv$="9999999999"
       Call DXSet("keyscust",keyscust$)
	   Call DXSet("keyecust",keyecust$)
	   Call DXSet("keysdate",keysdate$)
	   Call DXSet("keyedate",keyedate$)
	   Call DXSet("keysinv",keysinv$)
	   Call DXSet("keyeinv",keyeinv$)
	   !
	   Call DXSet("output",trim$(mergedir$)+"sfsearchinv.html") 
    Endif                                          

	If action3$="search-get"
       Call DXGet("keysdate",keysdate$) !starting invoice date
	   Call DXGet("keyedate",keyedate$) !ending invoice date
	   Call DXGet("keyscust",keyscust$) !starting customer
	   Call DXGet("keyecust",keyecust$) !ending customer  
	   Call DXGet("keysinv",keysinv$)   !starting invoice number 
	   Call DXGet("keyeinv",keyeinv$)   !ending invoice number   
	   scr = keyscust$ \ keyscust$ = scr using "######"
	   scr = keyecust$ \ keyecust$ = scr using "######"
	   scr = keysinv$ \ keysinv$ = scr using "##########"
	   scr = keyeinv$ \ keyeinv$ = scr using "##########"

       Call SearchInv(Val(CO$),Val(SLS$),debug,dlog$,keyscust$,keyecust$,keysdate$,keyedate$,keysinv$,keyeinv$,tot.,in.[],ii,ss,maxRow, arrSales[],cost_lev[])
    Endif                                         

	If action3$="onecust"
       Call DXGet("custid",cust$) !cust
       Call OneCustInv(Val(CO$),Val(SLS$),debug,dlog$,cust$,tot.,in.[],ii,ss,maxRow,cost_lev[], arrSales[])
		Call DXSet("custid",in.[0].custid$)  ! all the same cust anyway
		Call DXSet("custname",in.[0].custname$)
	Endif

    If action3$<>"onecust" and action3$<>"search" and action3$<>"search-get"
		Call DXGet("custid",custid$) \ custid = custid$
		Call InvList(Val(CO$),Val(SLS$),debug,dlog$,tot.,in.[],ii,ss,maxRow,cost_lev[], arrSales[],custid)
    Endif
    If ss Error 42

	If action3$<>"search" 
	if ii > MaxRow let ii = MaxRow
    For i=0 to ii
       Col1$[i]=in.[i].SalesMan$
       Col2$[i]=in.[i].CustId$
       Col3$[i]=in.[i].CustName$
       Col4$[i]=in.[i].OrderNo$
       Col5$[i]=in.[i].InvoiceNo$
       Col6$[i]=in.[i].InvDate$
       Col7$[i]=in.[i].Amount$
       Col8$[i]=in.[i].Tax$
       Col9$[i]=in.[i].Freight$
       Col10$[i]=in.[i].Misc$
       Col11$[i]=in.[i].TInvoice$
       Col12$[i]=in.[i].Cost$
       Col13$[i]=in.[i].Profit$
       Col14$[i]=in.[i].TGPP$
       Col15$[i]=in.[i].Commission$
	   Col16$[i]=in.[i].EnteredBy$
	   Col17$[i]=in.[i].PMT$
	   Col18$[i]=in.[i].PMTDate$
	   Col19$[i]=in.[i].CustPO$
    Next i

    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
    Call DXSet("col14",Col14$[])
    Call DXSet("col15",Col15$[])
	Call DXSet("col16",Col16$[])
	Call DXSet("col17",Col17$[])
	Call DXSet("col18",Col18$[])
	Call DXSet("col19",Col19$[])
	!
	Call DXSet("totamount",tot.totamount$)
	Call DXSet("tottax",tot.tottax$)
	Call DXSet("totfreight",tot.totfreight$)
	Call DXSet("totmisc",tot.totmisc$)
	Call DXSet("tottotal",tot.tottotal$)
	Call DXSet("totcost",tot.totcost$)
	Call DXSet("totprofit",tot.totprofit$)
	scr = tot.totgp$ \ if not(ii) let ii=1
	scr = (scr/ii)
	tot.totgp$ = scr using "----.##%"
	Call DXSet("totgp",tot.totgp$)
	Call DXSet("totcomm",tot.totcomm$)
	Call DXSet("totpmt",tot.totpmt$)

    Call DXSet("ii",str$(ii))
    Call DXSet("slsmn",SLS$)
    Call DXSet("invdt",in.[1].RPTDate$)
	!
	if action3$="onecust"
    	Call DXSet("output",trim$(mergedir$)+"sfonecust.html")
	else
    	Call DXSet("output",trim$(mergedir$)+"sfinvlist.html")
	endif

	Endif
   Endif
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfinv"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfinv


Sub sfar()
!--------------------------------------------------------------------
!creates a list of customer ar balances
 Try
    Dim 3%,ii, Key1$[50]
	!
	Dim totTotal$[30],totCurrent$[30]
	Dim totOver30$[30],totOver60$[30],totOver90$[30]

	Dim totar. as totarInfo

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("keyNext",Key1$)
    Call DXGet("custid",custid$) \ custid = custid$

    Call ARList(Val(CO$),Val(SLS$),debug,dlog$,cua.[],totar.,ii,ss,maxRow,Key1$, arrSales[], custid)
    If ss Error 42
	if ii > maxrow let ii=maxrow
    For i=0 to ii-2
       Col1$[i]=cua.[i].SLSNo$+" "+cua.[i].SLSName$
       Col2$[i]=cua.[i].CustNumber$
       Col3$[i]=cua.[i].Phone$
       Col4$[i]=cua.[i].CustName$
       Col5$[i]=cua.[i].Contact$
       Col6$[i]=cua.[i].ARBal$
       Col7$[i]=cua.[i].Current$
       Col8$[i]=cua.[i].Over30$
       Col9$[i]=cua.[i].Over60$
       Col10$[i]=cua.[i].Over90$
       Col11$[i]=cua.[i].PastDue$
    Next i
    Call DxSet("ArBuck",ArBuck$[])
    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
	!
	Call DXSet("tottotal",totar.tottotal$)    
	Call DXSet("totcurrent",totar.totcurrent$)
	Call DXSet("totpastdue",totar.totpastdue$)
	Call DXSet("totover30",totar.totover30$)
	Call DXSet("totover60",totar.totover60$)
	Call DXSet("totover90",totar.totover90$)

    Call DXSet("slsmn",SLS$)
    Call DXSet("KeyNext",Key1$)
    !
    Call DXSet("output",trim$(mergedir$)+"sfar.html")
  
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfinv"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfar

Sub sfaract(e$,options$)
!--------------------------------------------------------------------
!creates a list of customer ar balances like 102 option A
 Try
    Dim 3%,ii, Key1$[50],cust$[6]
	Dim action2$[20],ajax$[6000]
	!
	Dim totTotal$[30],totCurrent$[30], keynext$[50], hist$[2]
	Dim totOver30$[30],totOver60$[30],totOver90$[30]

	Dim arhead. as aractheader
	Dim arlines.[maxrow] as aractlines
	Dim totar. as totarInfo

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
	
	Call DXGet("action2",action2$) \ action2$ = LCase$(action2$)

    Call DXGet("custcode",arhead.custcode$)
	Call DXGet("keynext",keynext$)
	Call DXGet("hist",hist$)
	if hist$ let hist=1 else hist=0

    Call aract(Val(CO$),Val(SLS$),debug,dlog$, arhead., arlines.[], ii,ss,maxRow,cost_lev[], arrSales[],hist, keynext$)
    If ss Error 42

    if action2$="csv"
		Try
		if ii > maxrow let ii=maxrow
		For i=0 to ii
		if ltrim$(rtrim$(arlines.[i].datepaid$)) <> "paid"
		ajax$=ajax$+arhead.custname$+"*@/@#"
        ajax$=ajax$+arlines.[i].dater$+"*@/@#"
        ajax$=ajax$+arlines.[i].refer$+"*@/@#"
        ajax$=ajax$+arlines.[i].reftype$+"*@/@#"
		ajax$=ajax$+arlines.[i].original$+"*@/@#"
		ajax$=ajax$+arlines.[i].balance$+"*@/@#"
		ajax$=ajax$+"0*@/@#"
		ajax$=ajax$+"0*@/@#"
		ajax$=ajax$+arlines.[i].balance$+"*@/@#"
		ajax$=ajax$+arlines.[i].whse$+"*@/@#"
		ajax$=ajax$+arlines.[i].whse$+"*@/@#"
		ajax$=ajax$+" *@/@#"
	     else  ! hit the paids
			i=ii+1
		 endif
	    Next i
		Else
			rem
		End try
		call dxset("xmlstring",ajax$)
		call  dxset("output",mergedir$ + "sfarcsv.html")
		Exit Sub
	endif

	Call DxSet("ArBuck",ArBuck$[])
	Call DXSet("custcode",arhead.custcode$)  ! all the same cust anyway
	Call DXSet("custname",arhead.custname$)
	Call DXSet("mtd",arhead.mtd$)
	Call DXSet("apd",arhead.apd$)
	Call DXSet("lpdate",arhead.lpdate$)
	Call DXSet("apphone",arhead.apphone$)
	Call DXSet("apcontact",arhead.apcontact$)
	Call DXSet("credit",arhead.credit$)
	Call DXSet("check",arhead.check$)
	Call DXSet("custlimit",arhead.custlimit$)
	Call DXSet("custopenorder",arhead.custopenorder$)
	Call DXSet("over90",arhead.over90$)
	Call DXSet("over60",arhead.over60$)
	Call DXSet("over30",arhead.over30$)
	Call DXSet("pastdue",arhead.pastdue$)
	Call DXSet("current",arhead.current$)
	Call DXSet("unapplied",arhead.unapplied$)
	Call DXSet("totalar",arhead.totalar$)
	Call DXSet("totalcr",arhead.totalcr$)
	Call DXSet("ii",Str$(ii))
	Call DXSet("keynext",keynext$)
	If hist Call DXSet("hist",str$(hist)) else Call DXSet("hist","")

	if ii > maxrow let ii=maxrow
    For i=0 to ii
       Col1$[i]=arlines.[i].dater$
       Col2$[i]=arlines.[i].refer$
       Col3$[i]=arlines.[i].reftype$
       Col4$[i]=arlines.[i].custpo$
       Col5$[i]=arlines.[i].order$
       Col6$[i]=arlines.[i].ot$
       Col7$[i]=arlines.[i].original$
       Col8$[i]=arlines.[i].datepaid$
       Col9$[i]=arlines.[i].balance$
       Col10$[i]=arlines.[i].age$
       Col11$[i]=arlines.[i].whse$
       Col12$[i]=arlines.[i].shipcust$
       Col13$[i]=arlines.[i].InvoiceNo$
    Next i

    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
	!
    !
    Call DXSet("output",trim$(mergedir$)+"sfaract.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfinv"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfaract
!
!
Sub setcust(e$,options$)
!--------------------------------------------------------------------
!
 Try
    Dim 3%,ii, custid$[20]
	!
    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("custid",custid$)

    Call DxSet("U_focus",custid$)
    !
    Call DXSet("Msgtitle","Customer Focus Set")                        
    Call DXSet("Msgbutton","closebut.gif")                                  
    Call DXSet("S_Msg","Cust:"+custid$+" has been set!")
    Call DXSet("output",trim$(mergedir$)+"msg.html")                        
  
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfdash"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !setcust
!
!
Sub popopup(e$,options$)                                      
!-------------------------------------------------------------------- 
!creates po popup                                                

 Try
  Dim pohrec$[10]
  !header
  Dim po$[10],status$[50],orderdate$[20],duedate$[20],confdate$[20]
  Dim term$[14],buyer$[30],shipvia$[10],type$[10],whse$[2]    
  Dim totamt$[30],totwt$[30],totcube$[30],totpc$[30]
  Dim vend$[6],vendname$[30]
  Dim soldaddr1$[50],soldaddr2$[50],soldaddr3$[50],soldaddr4$[50]
  Dim shipaddr1$[50],shipaddr2$[50],shipaddr3$[50],shipaddr4$[50]
  !detail
  Dim li$[300,10],item$[300,12],desc1$[300,80],desc2$[300,80]
  Dim qtyord$[300,20],qtyshp$[300,20],qtyrcv$[300,20],uom$[300,10]
  Dim unitcost$[300,30],cunit$[300,10],extcost$[300,30]
  Dim zline$[300,1]

  Declare External sub PODet
  Dim po1. as poinfo  
  Dim pol.[maxrow] as poitem
  Dim 2%,ii,ss      
  Dim CO$[1],SLS$[3]

  Call DXGet("S_USER.AppID",CO$)     ! Company                         
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                 
  Call DXGet("po",po$)               ! PO
  Call DXGet("pohrec",pohrec$)       ! POHead Rec # 

  Call PODet(Val(CO$),Val(SLS$),debug,dlog$,po$,pohrec$,po1.,pol.[],ii,msg$,ss,maxRow,cost_lev[])
  If ss=10000   e$="Purchase order not found." 
  If ss<>10000  e$=msg$                                                
  If ss Error 10000                                                    

  Call DXSet("po",po1.po$)                                               
  Call DXSet("status",po1.status$)
  Call DXSet("orderdate",po1.orderdate$) 
  Call DXSet("duedate",po1.duedate$)
  Call DXSet("confdate",po1.confdate$)
  Call DXSet("term",po1.term$)
  Call DXSet("buyer",po1.buyer$)
  Call DXSet("shipvia",po1.shipvia$)
  Call DXSet("type",po1.type$)
  Call DXSet("whse",po1.whse$)
  Call DXSet("totamt",po1.totamt$)
  Call DXSet("totwt",po1.totwt$)
  Call DXSet("totcube",po1.totcube$)
  Call DXSet("totpc",po1.totpc$)
  Call DXSet("vend",po1.vend$)
  Call DXSet("vendname",po1.vendname$)
  Call DXSet("soldaddr1",po1.soldaddr1$)                                        
  Call DXSet("soldaddr2",po1.soldaddr2$)                                        
  Call DXSet("soldaddr3",po1.soldaddr3$)                                        
  Call DXSet("soldaddr4",po1.soldaddr4$)                                        
  Call DXSet("shipaddr1",po1.shipaddr1$)
  Call DXSet("shipaddr2",po1.shipaddr2$)
  Call DXSet("shipaddr3",po1.shipaddr3$)
  Call DXSet("shipaddr4",po1.shipaddr4$)

  For i=0 to ii-1
	li$[i]      = pol.[i].li$                    
    item$[i]    = pol.[i].item$                                             
	desc1$[i]   = pol.[i].desc1$  
	desc2$[i]   = pol.[i].desc2$
    qtyord$[i]  = pol.[i].qtyord$     
	qtyshp$[i]  = pol.[i].qtyshp$
	qtyrcv$[i]  = pol.[i].qtyrcv$
	uom$[i]     = pol.[i].uom$     
	unitcost$[i]= pol.[i].unitcost$
	cunit$[i]   = pol.[i].cunit$
	extcost$[i] = pol.[i].extcost$
    zline$[i]   = pol.[i].zline$  
  Next i                                                                      

  Call DXSet("li",li$[])         
  Call DXSet("item",item$[])     
  Call DXSet("desc1",desc1$[])     
  Call DXSet("desc2",desc2$[])
  Call DXSet("qtyord",qtyord$[]) 
  Call DXSet("qtyshp",qtyshp$[])
  Call DXSet("qtyrcv",qtyrcv$[])
  Call DXSet("uom",uom$[])
  Call DXSet("unitcost",unitcost$[])
  Call DXSet("cunit",cunit$[])
  Call DXSet("extcost",extcost$[])
  Call DXSet("zline",zline$[])
  Call DXSet("cost_lev2",str$(cost_lev[2]))
  !
  Call DXSet("output",trim$(mergedir$)+"sfpop.html")             
 Else                                                                           
  If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," popopup"     
  Error 10000                                                                   
  msg$="error..."+e$ \ Call updatelog(debug)                                    
  Call errTrap()                                                                
 End Try                                                                        
End Sub !popopup                                                              

!
!
Sub prods(e$,options$)                                                     
 Try 
  Dim prodid$[12]                                                               
  Dim product$[12],description1$[30],description2$[30]                          
  Dim vendor$[6],vendorname$[30],pocost$[30],netcost$[30],cost$[30] 
  Dim qty1$[30],qty2$[30],qty3$[30],qty4$[30],qty5$[30]                         
  Dim qty6$[30],qty7$[30],qty8$[30],qty9$[30],qty10$[30]                        
  Dim qtyum$[4],whse$[2]   

  !detail                                                         
  Clear Col1$,Col2$,Col3$,Col4$,Col5$                              
  Clear Col6$,Col7$,Col8$,Col9$,Col10$                          
  Clear Col11$,Col12$,Col13$,Col14$,Col15$                               
  Clear Col16$,Col17$,Col18$,Col19$,Col20$    

  Declare External sub ubsProdS 
  Dim sh. as shInfo             
  Dim sl1.[maxrow] as slInfo    
  Dim 2%,ii,ss                  
  Dim CO$[1],SLS$[3]            

  Call DXGet("S_USER.AppID",CO$)     ! Company                    
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number             
  Call DXGet("prodid",prodid$)       ! Product code 

  Call ubsProdS(Val(CO$),Val(SLS$),debug,dlog$,prodid$,sh.,sl1.[],ii,ss,maxRow,cost_lev[])
    call dxget("U_nocost",nocost$)
  if nocost$="Y" let sh.cost$=""
  Call DXSet("product",sh.product$)                                             
  Call DXSet("description1",sh.description1$)                                   
  Call DXSet("description2",sh.description2$)                                   
  Call DXSet("vendor",sh.vendor$)                                               
  Call DXSet("vendorname",sh.vendorname$)                                       
  Call DXSet("pocost",sh.pocost$)
  Call DXSet("netcost",sh.netcost$)
  Call DXSet("cost",sh.cost$)
  Call DXSet("qty1",sh.qty1$)                                                   
  Call DXSet("qty2",sh.qty2$)                                                   
  Call DXSet("qty3",sh.qty3$)                                                   
  Call DXSet("qty4",sh.qty4$)                                                   
  Call DXSet("qty5",sh.qty5$)                                                   
  Call DXSet("qty6",sh.qty6$)                                                   
  Call DXSet("qty7",sh.qty7$)                                                   
  Call DXSet("qty8",sh.qty8$)                                                   
  Call DXSet("qty9",sh.qty9$)                                                   
  Call DXSet("qty10",sh.qty10$)                                                 
  Call DXSet("qtyum",sh.qtyum$)                                                 
  Call DXSet("whse",sh.whse$)
 
  For i=0 to ii-1                                                               
	 col1$[i]=sl1.[i].col1$                                                     
     col2$[i]=sl1.[i].col2$                                       
     col3$[i]=sl1.[i].col3$                                                     
     col4$[i]=sl1.[i].col4$                                                     
	 col5$[i]=sl1.[i].col5$                                                     
	 col6$[i]=sl1.[i].col6$                                                     
     col7$[i]=sl1.[i].col7$                                                     
	 col8$[i]=sl1.[i].col8$
	 col9$[i]=sl1.[i].col9$
	 col10$[i]=sl1.[i].col10$
	 col11$[i]=sl1.[i].col11$
	 col12$[i]=sl1.[i].col12$ 
	 col13$[i]=sl1.[i].col13$ 
  Next i           

  Call DXSet("col1",col1$[])                                                
  Call DXSet("col2",col2$[])                                                
  Call DXSet("col3",col3$[])                                                
  Call DXSet("col4",col4$[])                                                
  Call DXSet("col5",col5$[])                                                
  Call DXSet("col6",col6$[])                                                
  Call DXSet("col7",col7$[]) 
  Call DXSet("col8",col8$[])
  Call DXSet("col9",col9$[])
  Call DXSet("col10",col10$[])
  Call DXSet("col11",col11$[])
  Call DXSet("col12",col12$[]) 
  Call DXSet("col13",col13$[]) 

  !                                                             
  Call DXSet("output",trim$(mergedir$)+"sfprodstock.html")
 
 Else                                                                           
  If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," prods"
  Error 10000                                                   
  msg$="error..."+e$ \ Call updatelog(debug)                         
  Call errTrap()                                                  
 End Try                                                    

End Sub !prods  

!
!
Sub produpopup(e$,options$)
 Try
  Dim prodid$[12]                                                               
  Dim product$[12],description1$[30],description2$[30]          
  Dim vendor$[6],vendorname$[30]
  !detail
  Dim rowdesc$[200,30]
  Dim wh1$[200,30],wh2$[200,30],wh3$[200,30],wh4$[200,30],wh5$[200,30]
  Dim whtotal$[200,30],um$[200,4],misc$[200,50]

  Declare External sub ubsProdU 
  Dim uh. as uhInfo                                              
  Dim uls.[maxrow] as ulInfo
  Dim 2%,ii,ss                                                                  
  Dim CO$[1],SLS$[3],keycust$[6]                                                            
  
  Call DXGet("S_USER.AppID",CO$)     ! Company                                  
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                          
  Call DXGet("prodid",prodid$)       ! Product code                             
  Call DXGet("keycust",keycust$)
 
  Call ubsProdU(Val(CO$),Val(SLS$),debug,dlog$,prodid$,keycust$,uh.,uls.[],ii,ss,maxRow,cost_lev[])
  
  Call DXSet("product",uh.product$)                                             
  Call DXSet("description1",uh.description1$)                                   
  Call DXSet("description2",uh.description2$)
  Call DXSet("vendor",uh.vendor$)
  Call DXSet("vendorname",uh.vendorname$)

  For i=0 to ii-1       
    rowdesc$[i]=uls.[i].rowdesc$  
	wh1$[i]=uls.[i].wh1$
	wh2$[i]=uls.[i].wh2$
	wh3$[i]=uls.[i].wh3$
	wh4$[i]=uls.[i].wh4$
	wh5$[i]=uls.[i].wh5$
	whtotal$[i]=uls.[i].whtotal$
	um$[i]=uls.[i].um$
	misc$[i]=uls.[i].misc$
  Next i

  Call DXSet("rowdesc",rowdesc$[])
  Call DXSet("wh1",wh1$[])
  Call DXSet("wh2",wh2$[])
  Call DXSet("wh3",wh3$[])
  Call DXSet("wh4",wh4$[])
  Call DXSet("wh5",wh5$[])
  Call DXSet("whtotal",whtotal$[])
  Call DXSet("um",um$[])
  Call DXSet("misc",misc$[])
  !
  Call DXSet("output",trim$(mergedir$)+"sfprodusagep.html")

 Else
  If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," produpopup"
  Error 10000                                                           
  msg$="error..."+e$ \ Call updatelog(debug)                            
  Call errTrap()                                                        
 End Try
End Sub !produpopup
!
!
Sub prodpopup(e$,options$)
!-------------------------------------------------------------------- 
!creates product popup                      

 Try
  Dim prodid$[12]
  Dim product$[12],description1$[30],description2$[30],category$[24]
  Dim commodity$[16],vendor$[30],vendoritem$[20],leadtime$[20],super$[12]
  Dim costdesc1$[10],costdesc2$[10],costdesc3$[10]
  Dim costdesc4$[10],costdesc5$[10],costdesc6$[10]
  Dim cost1$[30],cost2$[30],cost3$[30],cost4$[30],cost5$[30],cost6$[30]
  Dim pricedesc1$[10],pricedesc2$[10],pricedesc3$[10]
  Dim pricedesc3$[10],pricedesc4$[10],pricedesc5$[10]
  Dim price1$[30],price2$[30],price3$[30],price4$[30],price5$[30],price6$[30]
  Dim baseum$[4],stockum$[4],sellum$[4],purchum$[4],costum$[4],priceum$[4]
  Dim prodsizeum$[4],packsize$[15],qtyavailable$[20]
  
  Dim prices$[10,30], pricedesc$[10,20], costs$[10,30], costdesc$[10,20],keycust$[6]

  Declare External sub ubsProd
  Dim p1. as pinfo                                                            
  Dim 2%,ii,ss                                                                  
  Dim CO$[1],SLS$[3]    

  Call DXGet("S_USER.AppID",CO$)     ! Company                      
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                          
  Call DXGet("prodid",prodid$)       ! Product code 
  call dxget("keycust",keycust$) !to pass to next page for cust specific salesscan link
  call dxset("keycust",keycust$)
  Call ubsProd(Val(CO$),Val(SLS$),debug,dlog$,prodid$,p1.,ii,ss,maxRow,cost_lev[], prices$[], pricedesc$[], costs$[], costdesc$[])

 call dxget("U_nocost",nocost$)
 if nocost$="Y" 
  let costs$[0]=""
  p1.costsmtd$=""
  p1.costsytd$=""
  p1.gpmtd$=""
  p1.gpytd$=""
 end if
  Call DXSet("product",p1.product$)                                           
  Call DXSet("description1",p1.description1$)
  Call DXSet("description2",p1.description2$)
  Call DXSet("category",p1.category$)
  Call DXSet("commodity",p1.commodity$)
  Call DXSet("vendor",p1.vendor$)
  Call DXSet("vendoritem",p1.vendoritem$)
  Call DXSet("leadtime",p1.leadtime$)
  Call DXSet("super",p1.super$)
  Call DXSet("salesmtd",p1.salesmtd$)
  Call DXSet("salesytd",p1.salesytd$)
  Call DXSet("unitsmtd",p1.unitsmtd$)
  Call DXSet("unitsytd",p1.unitsytd$)
  Call DXSet("costsmtd",p1.costsmtd$)
  Call DXSet("costsytd",p1.costsytd$)
  Call DXSet("gpmtd",p1.gpmtd$)
  Call DXSet("gpytd",p1.gpytd$)
  Call DXSet("costdesc1",p1.costdesc1$)
  Call DXSet("costdesc2",p1.costdesc2$)
  Call DXSet("costdesc3",p1.costdesc3$)
  Call DXSet("costdesc4",p1.costdesc4$)
  Call DXSet("costdesc5",p1.costdesc5$)
  Call DXSet("costdesc6",p1.costdesc6$)
  Call DXSet("cost1",p1.cost1$)
  Call DXSet("cost2",p1.cost2$)
  Call DXSet("cost3",p1.cost3$)
  Call DXSet("cost4",p1.cost4$)
  Call DXSet("cost5",p1.cost5$)
  Call DXSet("cost6",p1.cost6$)
  Call DXSet("pricedesc1",p1.pricedesc1$)
  Call DXSet("pricedesc2",p1.pricedesc2$)
  Call DXSet("pricedesc3",p1.pricedesc3$)
  Call DXSet("pricedesc4",p1.pricedesc4$)
  Call DXSet("pricedesc5",p1.pricedesc5$)
  Call DXSet("pricedesc6",p1.pricedesc6$)
  Call DXSet("price1",p1.price1$)
  Call DXSet("price2",p1.price2$)
  Call DXSet("price3",p1.price3$)
  Call DXSet("price4",p1.price4$)
  Call DXSet("price5",p1.price5$)
  Call DXSet("price6",p1.price6$)
  Call DXSet("baseum",p1.baseum$)
  Call DXSet("stockum",p1.stockum$)
  Call DXSet("sellum",p1.sellum$)
  Call DXSet("purchum",p1.purchum$)
  Call DXSet("costum",p1.costum$)
  Call DXSet("priceum",p1.priceum$)
  Call DXSet("prodsizeum",p1.prodsizeum$)
  Call DXSet("packsize",p1.packsize$)
  Call DXSet("qtyavailable$",p1.qtyavailable$)
  Call DXSet("cost_lev0$",str$(cost_lev[0]))
  Call DXSet("cost_lev1$",str$(cost_lev[1]))
  Call DXSet("cost_lev2$",str$(cost_lev[2]))
  Call DXSet("cost_lev3$",str$(cost_lev[3]))
  
  Call DXSet("prices",prices$[])
  Call DXSet("pricedesc",pricedesc$[])
  Call DXSet("costs",costs$[])
  Call DXSet("costdesc",costdesc$[])

  !
  Call DXSet("output",trim$(mergedir$)+"sfprodp.html")

 Else                                                                           
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," prodpopup" 
  Error 10000                                                                  
  msg$="error..."+e$ \ Call updatelog(debug)                                    
  Call errTrap()                                                                
 End Try                                                                        
End Sub !prodpopup

!
!
Sub custslspopup(e$,options$)
 Try
  Dim custid$[6],custname$[26],yy$[4],other$[30]
  Dim mm$[50,16],unitsale$[50,30],netsale$[50,30],costsale$[50,30]
  Dim profit$[50,30], gp$[50,10]
  dim 2%,termcode
  Declare External sub ubsCustSLS 
  Dim c1. as cinfo                                                              
  Dim sls.[50] as slsInfo                         
  Dim 2%,ii,ss                                                                  
  Dim CO$[1],SLS$[3]                                       

  Call DXGet("S_USER.AppID",CO$) ! Company                                      
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                          
  Call DXGet("custid",custid$)                                     
  Call DXGet("yy",yy$)

  Call ubsCustSLS(Val(CO$), Val(SLS$), debug, dlog$, custid$, yy$, c1., sls.[], ii, ss, maxRow, arrSales[])  

  Call DXSet("custid",c1.CustNumber$)                                           
  Call DXSet("custname",c1.CustName$)  
  Call DXSet("other",c1.other$)

  For i=0 to ii                                                              
      mm$[i]=sls.[i].mm$                                          
	  unitsale$[i]=sls.[i].unitsale$
	  netsale$[i]=sls.[i].netsale$
	  costsale$[i]=sls.[i].costsale$
	  profit$[i]=sls.[i].profit$
	  gp$[i]=sls.[i].gp$
  Next i                                            
 
  Call DXSet("mm",mm$[])
  Call DXSet("unitsale",unitsale$[]) 
  Call DXSet("netsale",netsale$[])
  Call DXSet("costsale",costsale$[])
  Call DXSet("gp",gp$[])
  !
  Call DXSet("output",trim$(mergedir$)+"sfcustslsp.html")

 Else
   If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," custslspopup"
   Error 10000                                                   
   msg$="error..."+e$ \ Call updatelog(debug)                 
   Call errTrap()                                                   
 End Try                                                                        
End Sub !custslspopup         

!
!
Sub slsmslspopup(e$,options$)
 Try
  Dim slsmname$[30],yy$[4],other$[30]
  Dim mm$[50,16],unitsale$[50,30],netsale$[50,30],costsale$[50,30]
  Dim profit$[50,30], gp$[50,10]
  ! last year
  Dim LYmm$[50,16],LYunitsale$[50,30],LYnetsale$[50,30]
  Dim LYcostsale$[50,30],LYprofit$[50,30],LYgp$[50,10]

  Declare External sub ubsSlsmSLS 
  Dim s1. as SLSM
  Dim sls.[50] as slsInfo                         
  Dim 2%,ii,ss                                                                  
  Dim CO$[1],SLS$[3]                                       

  Call DXGet("S_USER.AppID",CO$) ! Company                                      
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                          
  Call DXGet("yy",yy$)

  ! this year
  yy$ = "0"
  Call ubsSlsmSLS(Val(CO$), Val(SLS$), debug, dlog$, yy$, other$, c1., sls.[], ii, ss, maxRow, arrSales[])

  Call DXSet("slsmid",SLS$)                                           
  Call DXSet("slsmname",c1.SLSName$)  
  Call DXSet("other",other$)

  For i=0 to ii                                                              
      mm$[i]=sls.[i].mm$                                          
	  unitsale$[i]=sls.[i].unitsale$
	  netsale$[i]=sls.[i].netsale$
	  costsale$[i]=sls.[i].costsale$
	  profit$[i]=sls.[i].profit$
	  gp$[i]=sls.[i].gp$
  Next i                                            
  
  Call DXSet("mm",mm$[])
  Call DXSet("unitsale",unitsale$[]) 
  Call DXSet("netsale",netsale$[])
  Call DXSet("costsale",costsale$[])
  Call DXSet("profit",profit$[])
  Call DXSet("gp",gp$[])
  
  
  ! last year
  yy$ = "-1"
  clear c1, sls
  Call ubsSlsmSLS(Val(CO$), Val(SLS$), debug, dlog$, yy$, other$, c1., sls.[], ii, ss, maxRow, arrSales[])

  For i=0 to ii                                                              
      LYmm$[i]=sls.[i].mm$                                          
	  LYunitsale$[i]=sls.[i].unitsale$
	  LYnetsale$[i]=sls.[i].netsale$
	  LYcostsale$[i]=sls.[i].costsale$
	  LYprofit$[i]=sls.[i].profit$
	  LYgp$[i]=sls.[i].gp$
  Next i                                            
  Call DXSet("LYmm",mm$[])
  Call DXSet("LYunitsale",LYunitsale$[]) 
  Call DXSet("LYnetsale",LYnetsale$[])
  Call DXSet("LYcostsale",LYcostsale$[])
  Call DXSet("LYprofit",LYprofit$[])
  Call DXSet("LYgp",LYgp$[])
  !
  Call DXSet("output",trim$(mergedir$)+"sfslsmslsp.html")

 Else
   If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," slsmslsm"
   Error 10000                                                   
   msg$="error..."+e$ \ Call updatelog(debug)                 
   Call errTrap()                                                   
 End Try                                                                        
End Sub !slsmslspopup         

!
!
Sub contactspopup(e$,Chan0,options$)
!--------------------------------------------------------------------
!creates a list of contacts for custid for popup

 Try
  Dim 1%,DDAY,agebuck[5],intcompany,xtlc,ch_arterm
  Dim 2%,termcode
  Dim custid$[6],custname$[26],custattn$[26],custphone$[26]
  Dim custfax$[26],custlimit$[12],custdayspast$[6],custdollarspast$[12]
  Dim custaddr1$[26],custaddr2$[26]
  Dim routeday$[6,3],route$[6,2],routestop$[6,3]
  Dim ARPast$[5,15]
  Dim contnames$[50,26],contphones$[50,30],contpager$[50,30],contcell$[50,30]
  Dim contfax1$[50,26],contfax2$[50,26],contemails$[50,60]
  Dim conttitles$[50,26]
  Dim contcomment1$[50,40],contcomment2$[50,40],contcomment3$[50,40],P61$[256],p9$[50]

  Declare External sub ubsCust
  Dim c1. as cinfo
  Dim c2.[50] as cCont
  Dim 2%,ii,ss
  Dim CO$[1],SLS$[3]

  Call DXGet("S_USER.AppID",CO$) ! Company
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
  !
  If options$="SFCUST"
   Call DXGet("custid",custid$)
   Call ubsCust(Val(CO$),Val(SLS$),debug,dlog$,custid$,c1.,c2.[],ii,ss,10, arrSales[],termcode)
   If ss=10000   e$="Not authorized to view this information!" 
   If ss Error 10000                                                    
  End If
  If options$="SFCONT"
   Call DXGet("custid",custid$)
   Call ubsCust(Val(CO$),Val(SLS$),debug,dlog$,custid$,c1.,c2.[],ii,ss,maxRow, arrSales[],termcode)
  End If
  
  routeday$[0]="Sun"\routeday$[1]="Mon"
  routeday$[2]="Tue"\routeday$[3]="Wed"
  routeday$[4]="Thu"\routeday$[5]="Fri"
  routeday$[6]="Sat"

  ARPAst$[0]="Current" \ ARPast$[1]="Past Due"
  ARPast$[2]="30 Days" \ ARPast$[3]="60 Days"
  ARPast$[4]="90 Days" \ ARPast$[5]="Total"
  !!! set up ar past with the a/r buck -- showing total last
  for ss= 0 to 4
	  let arpast$[ss]=arbuck$[ss+1]
  next ss
  let arpast$[5]=arbuck$[0]
  if termcode
	let intCompany=Val(Co$)
	 xtlc=OpenFile(-9999, intCompany)
	 Mat Read #xtlc,61,0;p61$;
	Mat Read #xtlc,19,50;p9$;
	 if p61$[67,67]="Y" and p9$[50,50]<>"M"
		LET ArPast$[0]="Current" 
		!!! send to open the the arterms file
		ch_arterm=OpenFile(-9981, intCompany)
		READ #CH_ARTERM,(TERMCODE),30;DDAY;  
		IF DDAY=0 LET DDAY=1                 
		IF DDAY>0                            
			LET AGEBUCK[0]=DDAY                
			LET AGEBUCK[1]=DDAY*2              
			LET AGEBUCK[2]=DDAY*3              
			lET AGEBUCK[3]=DDAY*4
			fOR ss=0 TO 3                                
				if agebuck[ss]>99
					LET ArPast$[ss+1]=AGEBUCK[ss] USING "### Days"
				else
					if agebuck[ss]>9
						LET ArPast$[ss+1]=AGEBUCK[ss] USING "## Days"
					else
						LET ArPast$[ss+1]=AGEBUCK[ss] USING "# Days"
					endif
				endif
			NEXT ss                                              
			 IF P9$[25,25]="Y" AND AGEBUCK[0]=0  ! aging by days and aging by dye date                 
			 LET ArPast$[1]="Past Due" 
		     ENDIF
		 ENDIF
		close #ch_arterm
	ENDIF
	close #xtlc
ENDIF
  For ss=0 to 6
     route$[ss]=c1.Route$[ss]
     routestop$[ss]=c1.stp$[ss]
  Next ss

  For ss=0 to ii-1
     contnames$[ss]=c2.[ss].FName$+" "+c2.[ss].LName$
     contphones$[ss]=c2.[ss].Phone$
	 contpager$[ss]=c2.[ss].Pager$
	 contcell$[ss]=c2.[ss].Cell$
     contfax1$[ss]=c2.[ss].Fax1$
	 contfax2$[ss]=c2.[ss].Fax2$
     contemails$[ss]=c2.[ss].EMail$
     conttitles$[ss]=c2.[ss].Title$
	 contcomment1$[ss]=c2.[ss].comment1$
	 contcomment2$[ss]=c2.[ss].comment2$
	 contcomment3$[ss]=c2.[ss].comment3$
  Next ss
  Call DXSet("contcnt",Str$(ii))
  Call DXSet("custid",c1.CustNumber$)
  Call DXSet("custname",c1.CustName$)
  Call DXSet("contact",c1.Contact$)
  Call DXSet("phone",c1.Phone$)
  Call DXSet("fax",c1.Fax$)
  Call DXSet("creditlimit",c1.CreditLimit$)
  Call DXSet("avgdays2pay",c1.AvgDays2Pay$)
  Call DXSet("ARBal",c1.ARBal$)
  Call DXSet("addr1",c1.addr1$)
  Call DXSet("addr2",c1.addr2$)
  Call DXSet("addr3",c1.addr3$)
 ! Call DxSet("ArBuck",ArBuck$[])
  Call DxSet("ArBuck",ArPast$[])
  Call DXSet("ARPast",ARPast$[])
  Call DXSet("LastPaid",c1.LastPaidDT$)
  Call DXSet("ARS",c1.ARS$[])
  Call DXSet("SLS",c1.SLSNo$+" "+c1.SLSName$)
  Call DXSet("LastOrder",c1.LastOrderDT$)
  Call DXSet("slsmtd",c1.NetSalesMTD$)
  Call DXSet("slsytd",c1.NetSalesYTD$)
  Call DXSet("unitsmtd",c1.UnitsMTD$)
  Call DXSet("unitsytd",c1.UnitsYTD$)
  Call DXSet("gpmtd",c1.GPMTD$) 
  Call DXSet("gpytd",c1.GPYTD$) 

  Call DXSet("routeday",routeday$[])
  Call DXSet("route",route$[])
  Call DXSet("routestop",routestop$[])
  Call DXSet("contname",contnames$[])
  Call DXSet("contphone",contphones$[])
  Call DXSet("contpager",contpager$[])
  Call DXSet("contcell",contcell$[])
  Call DXSet("contfax1",contfax1$[])
  Call DXSet("contfax2",contfax2$[])
  Call DXSet("contemail",contemails$[])
  Call DXSet("conttitle",conttitles$[])
  Call DXSet("contcomment1",contcomment1$[])
  Call DXSet("contcomment2",contcomment2$[])
  Call DXSet("contcomment3",contcomment3$[])
  !
  If options$="SFCUST" Call DXSet("output",trim$(mergedir$)+"sfcustp.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," contactspopup"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !contactspopup
!
!--------------------------------------------------------------------
!
Sub ardet(e$,options$)
 Try
  Dim custid$[6],custname$[26],refnum$[10],reftype$[4]

  Declare External sub spardet
  Dim ar. as arhInfo
  Dim ardet.[maxrow] as ardetInfo
  Dim 2%,ii,ss
  Dim 3%,refnum,custcode
  Dim CO$[1],SLS$[3],custid$[6],refnum$[10]
  Dim refinv$[10],reford$[10],refpo$[20],refchk$[12]
  
  Clear Col1$,Col2$,Col3$,Col4$,Col5$
  Clear Col6$,Col7$,Col8$,Col9$,Col10$
  Clear Col11$

  Call DXGet("S_USER.AppID",CO$) ! Company                                      
  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                          
  Call DXGet("custid",custid$) \ custcode = custid$
  
  Call DXGet("refnum",refnum$) \ refnum = refnum$
  Call DXGet("reftype",reftype$)
  ! Call DXGet("refinv",refinv$)
  ! Call DXGet("reford",reford$)
  ! Call DXGet("refpo",refpo$)
  ! Call DXGet("refchk",refchk$)

  Call spardet(Val(CO$), Val(SLS$), debug, dlog$, ar., ardet.[], custcode, refnum, reftype$, ii ,ss, iLimit, arrSales[])

  Call DXSet("salescode",sls$)  
  Call DXSet("salesname",ar.salesman$)  
  Call DXSet("custid",ar.CustID$)                                           
  Call DXSet("custname",ar.CustName$)  
  Call DXSet("terms",ar.terms$)  
  Call DXSet("tax",ar.tax$)  
  Call DXSet("po",ar.po$)  
  Call DXSet("refnum",ar.ref$)  
  Call DXSet("type",ar.type$)  
  Call DXSet("transdate",ar.transdate$)  
  Call DXSet("duedate",ar.duedate$)  
  Call DXSet("description",ar.description$)  
  Call DXSet("otype",ar.otype$)  
  Call DXSet("otypedesc",ar.otypedesc$)  
  Call DXSet("whse",ar.whse$)  
  Call DXSet("div",ar.div$)  
  Call DXSet("origamt",ar.origamt$)  
  Call DXSet("balance",ar.balance$)
  Call DXSet("histcust",ar.histcust$)
  Call DXSet("histref",ar.histref$)

  ! Call DXSet("refinv",refinv$)
  ! Call DXSet("reford",reford$)
  ! Call DXSet("refpo",refpo$)
  ! Call DXSet("refchk",refchk$)
 
  For i=0 to ii
	 col1$[i]=ardet.[i].Applycust$
     col2$[i]=ardet.[i].Applycustname$
     col3$[i]=ardet.[i].Applysource$
     col4$[i]=ardet.[i].Applydate$
	 col5$[i]=ardet.[i].Applyref$
	 col6$[i]=ardet.[i].Applytype$
     col7$[i]=ardet.[i].Applytypedate$
	 col8$[i]=ardet.[i].Applytransamt$
	 col9$[i]=ardet.[i].Applyamt$
	 col10$[i]=ardet.[i].Applyhcust$
	 col11$[i]=ardet.[i].Applyhref$
   Next i           

  Call DXSet("col1",col1$[])                                                
  Call DXSet("col2",col2$[])                                                
  Call DXSet("col3",col3$[])                                                
  Call DXSet("col4",col4$[])                                                
  Call DXSet("col5",col5$[])                                                
  Call DXSet("col6",col6$[])                                                
  Call DXSet("col7",col7$[]) 
  Call DXSet("col8",col8$[])
  Call DXSet("col9",col9$[])
  Call DXSet("col10",col10$[])
  Call DXSet("col11",col11$[])

  !
  Call DXSet("output",trim$(mergedir$)+"sfardetail.html")

 Else
   If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ardet"
   Error 10000                                                   
   msg$="error..."+e$ \ Call updatelog(debug)                 
   Call errTrap()                                                   
 End Try                                                                        
End Sub !ardet
!
!-------------------------------------------------------------------------
!
Sub sfpcupdate(e$,action$)
 Try
	
	Dim KEYCUST$[6],KEYORDER$[6],KEYITEM$[12],KEYLI$[3]
	Dim KEYOLDPRICE$[30],KEYNEWPRICE$[30],KEYPUNIT$[4]

    Clear Col1$,Col2$,Col3$,Col4$,Col5$                                         
	Clear Col6$,Col7$,Col8$,Col9$,Col10$                                        
	Clear Col11$,Col12$,Col13$,Col14$,Col15$                                    
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

	Call DXGet("S_USER.AppID",CO$) ! Company                                    
	Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                        
	Call DXGet("keycust",KEYCUST$)                                             
	Call DXGet("keyorder",KEYORDER$)  
	Call DXGet("keyitem",KEYITEM$)                               
	Call DXGet("keyli",KEYLI$)                               
	Call DXGet("keyoldprice",KEYOLDPRICE$)
	Call DXGet("keynewprice",KEYNEWPRICE$)
	Call DXGet("keypunit",KEYPUNIT$)

    Call PCUpdate(Val(CO$),Val(SLS$),debug,dlog$,KEYCUST$,KEYORDER$,KEYITEM$,KEYLI$,KEYOLDPRICE$,KEYNEWPRICE$,KEYPUNIT$,msg$,ss,cost_lev[], arrSales[])
	If ss=10000   e$="Price change update incomplete, please try again."
	If ss<>10000  e$=msg$ 
	If ss Error 10000
	!
    Call DXSet("output",trim$(mergedir$)+"doconfirm.html")

 Else
   If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfpcupdate" 
   Error 10000                                                              
   msg$="error..."+e$ \ Call updatelog(debug)                         
   Call errTrap()
 End Try
End Sub !sfpcupdate

!
!
Sub prodsearch(e$,action$)
 Try
   Declare External Sub ProdList, Commlist, LPsearch
   Dim STRSEARCH$[30],lgic$[20],what$[20],action2$[20],action3$[20],io$[10],tmpArray$[2000,maxRow]
   Dim p.[maxRow] as pInfo, Key1$[50], cust$[6]                                   
   Dim cc.[maxRow] as commInfo

   Clear Col1$,Col2$,Col3$,Col4$,Col5$                                         
   Clear Col6$,Col7$,Col8$,Col9$,Col10$                                        
   Clear Col11$,Col12$,Col13$,Col14$,Col15$                                    
   Clear Col16$,Col17$,Col18$,Col19$,Col20$                                    

   Call DXGet("S_USER.AppID",CO$) ! Company                                    
   Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                        
   Call DXGet("keyvar",strSearch$) \ strSearch$ = UCase$(strSearch$) 
   Call DXGet("keyNext",key1$) \ key1$ = UCase$(key1$)   
   Call DXGet("logic",lgic$) \ lgic$ = UCase$(lgic$) 
   Call DXGet("what",what$) \ what$ = UCase$(what$) 
   Call DXGet("action2",action2$)
   Call DXGet("action3",action3$)
   Call DXGet("io",io$)
   Call DXGet("U_CUSTID",cust$)

	 Call CommList(Val(CO$),Val(SLS$),debug,dlog$, cc.[], ii, ss, maxRow)                                                                         
		if ii > MaxRow let ii = MaxRow
    	For i=0 to ii
       		Col1$[i]=cc.[i].Commcode$
       		Col2$[i]=cc.[i].Commodity$
		Next i
	 	Call DXSet("commcode",col1$[],"L")   !commcode
	 	Call DXSet("commdesc",col2$[],"L")   !commdesc
	 	
		Clear Col1$[]
		clear Col2$[]

   If action2$="LOOKUP" then 
	   Call DXSet("output",trim$(mergedir$)+"sfprodlookup.html")
	   if action3$="keyeprod" Call DXSet("output",trim$(mergedir$)+"sfprod2lookup.html")
	   if lgic$ = "" Exit Sub
   Endif
	
	If not(cust$) let lgic$=""  ! no cust no last price search

	If not(lgic$)
		Call ProdList(Val(CO$),VAL(SLS$),debug,dlog$,StrSearch$,what$,p.[], ii, ss, demoRow, Key1$)
	else  ! search lastprice file
		Call LPSearch(Val(CO$),VAL(SLS$),debug,dlog$,cust$,StrSearch$,what$,p.[], ii, ss, demoRow, Key1$)
		Call DXSet("logic","checked")
	End if

   If UCase$(io$)<>"XML" 
		let fdel$="";rdel$=""
   else
	tmpArray$[0]="<section>ProductList"+fdel$+rdel$+"Rep"+fdel$+"Product"+fdel$+"Description1"+fdel$+"Description2"+fdel$+"Commodity"+fdel$+"Category"+fdel$+"Vendor"+fdel$+"QtyAvail"+fdel$
   endif

   For i=0 to ii-1                                                               
	  Col1$[i]=RTrim$(p.[i].slsno$+" "+p.[i].slsname$+fdel$) 
	  Col2$[i]=RTrim$(p.[i].product$+fdel$)                                            
	  Col3$[i]=RTrim$(p.[i].description1$+fdel$)                               
      Col4$[i]=RTrim$(p.[i].description2$+fdel$)+" "         
	  Col5$[i]=RTrim$(p.[i].commodity$+fdel$)              
	  Col6$[i]=RTrim$(p.[i].category$+fdel$)           
	  Col7$[i]=RTrim$(p.[i].vendor$+fdel$)
      Col8$[i]=RTrim$(p.[i].qtyavailable$+fdel$)
	  tmpArray$[i+1]=col1$[i],col2$[i],col3$[i],col4$[i],col5$[i],col6$[i],col7$[i],col8$[i]
   Next i                                                                      
	
	Call AddToStr(e$,rstr$,tmpArray$[])

 If UCase$(io$)<>"XML"
   Call DXSet("col1",Col1$[])                                                  
   Call DXSet("col2",Col2$[])                                                  
   Call DXSet("col3",Col3$[])                                                  
   Call DXSet("col4",Col4$[])                                                  
   Call DXSet("col5",Col5$[])                                                  
   Call DXSet("col6",Col6$[])                                                  
   Call DXSet("col5",Col5$[])                                                  
   Call DXSet("col6",Col6$[])                                                  
   Call DXSet("col7",Col7$[])                                                  
   Call DXSet("col8",Col8$[])                                                  
   Call DXSet("slsmn",SLS$)                                                    
   Call DXSet("KeyNext",Key1$)                                                 
   Call DXSet("keyVar",StrSearch$)                                             
   !Call DXSet("logic",lgic$)                                                   
   Call DXSet("what",what$)                                                    
   Call DXSet("ii",Str$(ii))
   !
   Call DXSet("output",trim$(mergedir$)+"sfprodlist.html")       
  Else
    Call SetOutput(e$,rstr$+"</section>")
  End if

  If action2$="LOOKUP" then 
	   Call DXSet("output",trim$(mergedir$)+"sfprodlookup.html")
	   if action3$="keyeprod" Call DXSet("output",trim$(mergedir$)+"sfprod2lookup.html")
  Endif
 Else
   If Spc(8)<>10000 e$ = Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," prodsearch"
   Error 10000                                                          
   msg$="error..."+e$ \ Call updatelog(debug)                 
   Call errTrap()                                                
 End Try 
End Sub !prodsearch
!
!
!------------------------------------------------------------------------------
Sub SalesScan(e$,action$)
 Try
   Declare External Sub SalesList
   Declare External Sub CommList

   Dim STRSEARCH$[30],lgic$[20],what$[20],action2$[20],keyprod$[12],keycust$[6]
   Dim key1$[50]
   Dim 2%,keycust
   Dim 3%

   Dim pp.[maxRow] as SScanInfo
   Dim s. As SScanVars
   Dim cc.[maxRow] as commInfo

   Clear Col1$,Col2$,Col3$,Col4$,Col5$                                         
   Clear Col6$,Col7$,Col8$,Col9$,Col10$                                        
   Clear Col11$,Col12$,Col13$,Col14$,Col15$                                    
   Clear Col16$,Col17$,Col18$,Col19$,Col20$                                    

   Call DXGet("S_USER.AppID",CO$) ! Company                                    
   Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number                        
   Call DXGet("strSearch",strSearch$) \ strSearch$ = UCase$(strSearch$) 
   Call DXGet("keyNext",key1$) \ key1$ = UCase$(key1$)   
   Call DXGet("keyProd",keyprod$) \ keyprod$ = UCase$(keyprod$)   
   Call DXGet("logic",lgic$) \ lgic$ = UCase$(lgic$) 
   Call DXGet("keycust",keycust$)
   Call DXSet("keycust",keycust$)
   Call DXGet("keycommcode",s.commcode$) \ s.commcode$ = UCase$(s.commcode$)
   keycust = keycust$ \ keycust$ = keycust using "######"
   Call DXGet("action2",action2$) \ action2$ = UCase$(action2$)

   If action2$="OPEN" then 
	 ! Call CommList(Val(CO$),Val(SLS$),debug,dlog$, cc.[], ii, ss, maxRow)                                                                         
		! if ii > MaxRow let ii = MaxRow
    	! For i=0 to ii
       		!!  Col1$[i]=cc.[i].Commcode$
       		! Col2$[i]=cc.[i].Commodity$
		! Next i
	 	! Call DXSet("commcode",col1$[])   !commcode
	 	! Call DXSet("commdesc",col2$[])   !commdesc
	 ! 	
		! Clear Col1$[]
		! clear Col2$[]

	   Call DXSet("output",trim$(mergedir$)+"sfsalesscan1.html")
	   Exit Sub
   Endif

   ! pass vars to sub
   s.cust$ = keycust$
   s.product$ = keyprod$
   s.strSearch$ = strSearch$
   
    Call SalesList(Val(CO$),VAL(SLS$),debug,dlog$,s.,pp.[],ii,ss,300,Key1$,cost_lev[], arrSales[])

   For i=0 to ii                                                               
	  Col1$[i]  =pp.[i].slsno$+" "+pp.[i].slsname$ 
	  Col2$[i]  =pp.[i].Cust$
	  Col3$[i]  =pp.[i].Custname$
	  Col4$[i]  =pp.[i].product$                                            
	  Col5$[i]  =pp.[i].description1$                               
      Col6$[i]  =pp.[i].description2$         
	  Col7$[i]  =pp.[i].commodity$              
	  Col8$[i]  =pp.[i].type$
	  Col9$[i]  =pp.[i].refnum$
      Col10$[i] =pp.[i].orddate$
      Col11$[i] =pp.[i].qty$+" / "+pp.[i].qunit$
      Col12$[i] =pp.[i].price$+" / "+pp.[i].punit$
      Col13$[i] =pp.[i].cost$+" / "+pp.[i].cunit$
      Col14$[i] =pp.[i].commcode$
	Next i 
   Call DXSet("col1",Col1$[]) 
   Call DXSet("col2",Col2$[]) 
   Call DXSet("col3",Col3$[]) 
   Call DXSet("col4",Col4$[]) 
   Call DXSet("col5",Col5$[])
   Call DXSet("col6",Col6$[])
   Call DXSet("col5",Col5$[])
   Call DXSet("col6",Col6$[])
   Call DXSet("col7",Col7$[])
   Call DXSet("col8",Col8$[])
   Call DXSet("col9",Col9$[])
   Call DXSet("col10",Col10$[])
   Call DXSet("col11",Col11$[])
   Call DXSet("col12",Col12$[])
   Call DXSet("col13",Col13$[])
   Call DXSet("col14",Col14$[])

   Call DXSet("slsmn",SLS$)
   ! Call DXSet("KeyNext",Key1$)
   Call DXSet("keyprod",keyprod$)
   Call DXSet("numrecs",str$(ii))
   Call DXSet("strSearch",StrSearch$)
   Call DXSet("keycommcode",s.commcode$)
   !
   Call DXSet("output",trim$(mergedir$)+"sfsalesscan2.html")       
 Else
   If Spc(8)<>10000 e$ = Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," salesscan"
   Error 10000                                                          
   msg$="error..."+e$ \ Call updatelog(debug)                 
   Call errTrap()                                                
 End Try 
End Sub !SalesScan
!
!
Sub custsearch(e$,action$)
!--------------------------------------------------------------------

 Try
  ! DRM Create Filtered Customer
    Declare External Sub CustList
    Dim STRSEARCH$[30],lgic$[20],what$[20],action2$[20],custid$[6],io$[10],tmpArray$[1500,maxRow]
	dim 2%,cust
	dim 3% 

    Dim cu.[maxRow] as cInfo, Key1$[50]

    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("keyvar",STRSEARCH$)
    Call DXGet("keyNext",Key1$)
    Call DXGet("logic",lgic$)
    Call DXGet("what",what$) \ what$ = ucase$(what$)
    Call DXGet("action2",action2$)
    Call DXGet("custid",custid$) \ cust=custid$
	Call DXGet("io",io$) \ io$=UCase$(io$)
    
	If options$="SFCUST" and action2$="LOOKUP" then 
	   Call DXSet("output",trim$(mergedir$)+"sfcustlookup.html")
	   if lgic$ = "" Exit Sub
	Endif
	if UCase$(io$)="XML" let sls$="999"  ! for csr & .net

    If what$="7"
		Call ShipList(Val(CO$),VAL(SLS$),debug,dlog$,StrSearch$,lgic$,what$,cu.[], ii, ss, demoRow, Key1$, cust, arrSales[])
    Else
		Call CustList(Val(CO$),VAL(SLS$),debug,dlog$,StrSearch$,lgic$,what$,cu.[], ii, ss, demoRow, Key1$, cust, arrSales[])
    Endif

   If UCase$(io$)<>"XML" 
		let fdel$="";rdel$=""
   else
	tmpArray$[0]="<section>CustList"+fdel$+rdel$+"Rep"+fdel$+"Customer ID"+fdel$+"Billto ID"+fdel$+"Cust Name"+fdel$+"Contact"+fdel$+"Address 1"+fdel$+"Address 2"+fdel$+"City"+fdel$+ "ST"+fdel$+"Zip"+fdel$+"Phone"+fdel$+"AR Bal"+fdel$+"NetSales MTD"+fdel$+"Net Sales YTD"+fdel$
   endif

	ii=ii-1 \ if ii < 1 let ii=0
    if ii > maxrow let ii=maxrow 

    For i=0 to ii
       Col1$[i]=cu.[i].SLSNo$+" "+cu.[i].SLSName$+fdel$
       Col2$[i]=cu.[i].CustNumber$+fdel$
       Col3$[i]=RTrim$(Escape$(cu.[i].CustName$)+fdel$)
       Col4$[i]=cu.[i].Contact$+fdel$
       Col5$[i]=cu.[i].City$+fdel$
       Col6$[i]=cu.[i].State$+fdel$
       Col7$[i]=cu.[i].Zip$+fdel$
       Col8$[i]=cu.[i].Phone$+fdel$
       Col9$[i]=cu.[i].ARBal$+fdel$
       Col10$[i]=cu.[i].NetSalesMTD$+fdel$
       Col11$[i]=cu.[i].NetSalesYTD$+fdel$
	   Col12$[i]=cu.[i].Start$
	   Col13$[i]=cu.[i].Billto$+fdel$
       Col14$[i]=cu.[i].addr1$+fdel$
       Col15$[i]=cu.[i].addr2$+fdel$
       Col16$[i]=cu.[i].other$+fdel$
	   If UCase$(io$)="XML" tmpArray$[i+1]=col1$[i],col2$[i],col13$[i],col3$[i],col4$[i],col14$[i],col15$[i],col5$[i],col6$[i],col7$[i],col8$[i],col9$[i],col10$[i],col11$[i]
    Next i                                                                 
	
	If UCase$(io$)="XML" Call AddToStr(e$,rstr$,tmpArray$[])

   If UCase$(io$)<>"XML"
    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("col11",Col11$[])
    Call DXSet("col12",Col12$[])
    Call DXSet("col13",Col13$[])
    Call DXSet("col14",Col14$[])
    Call DXSet("col15",Col15$[])
    Call DXSet("col16",Col16$[])

    Call DXSet("slsmn",SLS$)
    Call DXSet("KeyNext",Key1$)
    Call DXSet("keyVar",StrSearch$)
    Call DXSet("logic",lgic$)
    Call DXSet("what",what$)
    if cust Call DXSet("custid",str$(cust))
    ! 
    If options$="SFCUST"  then 
	   Call DXSet("output",trim$(mergedir$)+"sfcustlist.html")
    Endif
	If options$="SFORDER" then 
	   Call DXSet("output",trim$(mergedir$)+"sforder.html") 
    Endif
    If options$="SFCUST" and action2$="LOOKUP" then 
	   Call DXSet("output",trim$(mergedir$)+"sfcustlookup.html")
    Endif
    If options$="SFCUST" and what$="7" then 
	   Call DXSet("output",trim$(mergedir$)+"sfshiplist.html")
    Endif
    If options$="SFCUST" and SLS$="999" then 
	   Call DXSet("output",trim$(mergedir$)+"sfcsrlist.html")
    Endif
   Else  ! of if notxml
    rstr$=rstr$+"</section>"
	Call SetOutput(e$,rstr$)
   End if
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," custsearch"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !custsearch
!
!
Sub sfinven(e$,Chan3,action$)
!--------------------------------------------------------------------
!creates a list of inventory items
!
  
  
  Dim bi. as bInfo, so.[maxRow] as soInfo, co.[maxRow] as coInfo
!
!
!main section of create a list of orders
 Try
   Dim itemnos$[50,25],itemdescs$[50,50],itemcats$[50,30] 
   Dim itemvendors$[50,20],itemoldcosts$[50,12],itemums$[50,3]
   Dim itemcosts$[50,12],itemchangepercents$[50,7],itemeffdates$[50,8]
   Dim itemonords$[50,12],itemduedates$[50,8]
   !
   If action$="SFCOSTCG" Call sfcostcg() !cost changes
   If action$="SFSTKOUT" Call sfstkout() !stock outs
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfinven"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sf
!

!
Sub sfcostcg()
!--------------------------------------------------------------------
!creates a list of cost changes
 Try
	Declare External Sub Commlist
	! Declare External Sub Vendlist
  !
    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 
  
	Dim cc.[maxRow] as commInfo
	Dim vc.[maxRow] as VendInfo
	Dim Action3$[20],commcode$[4],vendcode$[6],keyprod$[12],keyeprod$[12]
	Dim 3%

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("action3",action3$)

    If action3$="lookup" 
	  !
	  Call CommList(Val(CO$),Val(SLS$),debug,dlog$, cc.[], ii, ss, maxRow)
	  if ii > MaxRow let ii = MaxRow
      For i=0 to ii
        Col1$[i]=cc.[i].Commcode$
        Col2$[i]=cc.[i].Commodity$
	  Next i
	  ! ii=0;ss=0
	  ! Call VendList(Val(CO$),Val(SLS$),debug,dlog$, vc.[], ii, ss, maxRow)
	  ! if ii > MaxRow let ii = MaxRow
      ! For i=0 to ii
        ! Col3$[i]=vc.[i].vendcode$
        ! Col4$[i]=vc.[i].vendname$
	  ! Next i
	  Call DXSet("commcode",col1$[],"L")   !commcode
	  Call DXSet("commdesc",col2$[],"L")   !commdesc
	  ! Call DXSet("vendcode",col3$[],"L")
	  ! Call DXSet("vendname",col4$[],"L")
	  Call DXSet("keyprod","ALL")
	  Call DXSet("keyeprod","ALL")
	  Call DXSet("output",trim$(mergedir$)+"sfcolookup.html")
	  Clear Col1$[],Col2$[]
	  Exit Sub
    End if !searchlp

    Call DXGet("commcode",co.[0].commodity$)
	Call DXGet("keyprod",keyprod$)                                              
	Call DXGet("keyeprod",keyeprod$)                                            
								
	Call COList(Val(CO$),VAL(SLS$),debug,dlog$,co.[], ii, ss, maxRow,keyprod$,keyeprod$,cost_lev[])                                                                    

    If ss Error ii
    For i=0 to ii
       Col1$[i]=co.[i].WHSE$
       Col2$[i]=co.[i].Commodity$
       Col3$[i]=co.[i].Vendor$
       Col4$[i]=co.[i].Item$
       Col5$[i]=co.[i].Desc$
       Col6$[i]=co.[i].OldCost$
       Col7$[i]=co.[i].UOM$
       Col8$[i]=co.[i].NewCost$
       Col9$[i]=co.[i].Change$
       Col10$[i]=co.[i].EffDate$
    Next i
    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])
    Call DXSet("col8",Col8$[])
    Call DXSet("col9",Col9$[])
    Call DXSet("col10",Col10$[])
    Call DXSet("ii",str$(ii))
    
    Call DXSet("slsmn",SLS$)
	!
    Call DXSet("output",trim$(mergedir$)+"sfcolist.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfcostcg"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfcostcg
!
!
Sub sfpc()
!--------------------------------------------------------------------           
!creates a list of cost changes                                                 
 Try
  Dim key1$[50]
  Dim LI$[200,3],Item$[500,50],Desc$[200,80],QtyOrd$[200,20],QtyOpn$[200,20]
  Dim QtyAvail$[200,20],QtyBOrd$[200,20],BExt$[200,20]
  Dim UM$[200,10],Ext$[200,20],QtyShp$[200,20],PODate$[200,30]
  Dim UnitPrice$[200,30],UnitCost$[200,30],GPP$[200,10],SPOs$[200,300]
  Dim Punit$[200,10],ExtWeight$[200,30],LGP$[200,20]
  Dim Zline$[200,1]
  Dim Cust$[6]
  Dim EffDate$[200,20],Change$[200,15],PendCost$[200,30],prCunit$[200,10] 
  Dim LastQty$[200,20],LastOrdDate$[200,20],LastGPP$[200,10]                    
  Dim LastPrice$[200,30],LastCost$[200,30]
  Dim LastPunit$[200,10],LastCunit$[200,10],LastSunit$[200,10]

  Call DXGet("action2",action2$)
  If action2$="detail"
  	Call DXGet("orderno",orderno$)
	Call DXGet("li",li$)
	!Call DXGet("keynext",key1$)

	If orderno$="all" 
  	  ! No All Display for DRM system
	Else
	  !get the specific order detail
	  Call DXGet("S_USER.AppID",CO$) ! Company
	  Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
	  Call DXGet("custid",Cust$) ! Customer Number
	  Call PCDet(Val(CO$),Val(SLS$),debug,dlog$,li$,orderno$,Cust$,o1., ols.[],ii,ss,maxRow,cost_lev[], arrSales[])
	End If

	Call DXSet("custnumber",o1.custnumber$)
	Call DXSet("custname",o1.custname$)
	Call DXSet("soldaddr1",o1.SoldAddr1$)
	Call DXSet("soldaddr2",o1.SoldAddr2$)
	Call DXSet("soldaddr3",o1.SoldAddr3$)
	Call DXSet("soldaddr4",o1.SoldAddr4$)
	Call DXSet("s2addr1",o1.S2Addr1$)
	Call DXSet("s2addr2",o1.S2Addr2$)
	Call DXSet("s2addr3",o1.S2Addr3$)
	Call DXSet("s2addr4",o1.S2Addr4$)
	Call DXSet("slsno",o1.slsno$)
	Call DXSet("slsname",o1.SLSName$)
	Call DXSet("order",o1.Order$)
	Call DXSet("enteredby",o1.EnteredBy$)
	Call DXSet("custpo",o1.CustPo$)
	Call DXSet("term",o1.Term$)
	Call DXSet("orderdate",o1.OrderDate$)
	Call DXSet("hold",o1.Hold$)
	Call DXSet("holdreasons",o1.HoldReason$)
	Call DXSet("whse",o1.WHSE$)
	Call DXSet("division",o1.Division$)
	Call DXSet("shipdate",o1.ShipDate$)
	Call DXSet("stp",o1.Stp$)
	Call DXSet("zne",o1.Zne$)
	Call DXSet("type",o1.Type$)
	Call DXSet("sp",o1.SP$)
	Call DXSet("status",o1.Status$)
	Call DXSet("tcost",o1.TCost$)
	Call DXSet("tresale",o1.TResale$)
	Call DXSet("tgpp",o1.TGPP$)
	Call DXSet("gtm",o1.gtm$)
	Call DXSet("attn",o1.Attn$)       
	Call DXSet("duedate",o1.DueDate$)
	Call DXSet("truck",o1.truck$)     
	Call DXSet("tax",o1.tax$)              
	Call DXSet("freight",o1.freight$)      
	Call DXSet("misc",o1.misc$)            
	Call DXSet("discount",o1.discount$)
	Call DXSet("grandtotal",o1.grandtotal$)

    For i=0 to ii-1
	  LI$[i]=ols.[i].LI$
	  Item$[i]=ols.[i].Item$
	  If ols.[i].Substitute$="Y" Then
	     Item$[i]=Item$[i] + " * Subs."
	  End If
	  Desc$[i]=ols.[i].Desc$
	  QtyOrd$[i]=ols.[i].QtyOrd$
	  QtyShp$[i]=ols.[i].QtyShp$ 
	  QtyBOrd$[i]=ols.[i].QtyBOrd$
	  UM$[i]=ols.[i].UoM$ 
	  Punit$[i]=ols.[i].Punit$
	  Ext$[i]=ols.[i].Extended$
	  EffDate$[i]=ols.[i].EffDate$
	  Change$[i]=ols.[i].Change$
	  If ols.[i].PendCost$="N/A" Then
		 PendCost$[i]=ols.[i].PendCost$
      Else
		 PendCost$[i]=ols.[i].PendCost$+"/"+ols.[i].prCunit$
      Endif
	  LastQty$[i]=ols.[i].LastQty$+"/"+ols.[i].LastSunit$
	  LastOrdDate$[i]=ols.[i].LastOrdDate$
	  LastGPP$[i]=ols.[i].LastGPP$
	  LastPrice$[i]=ols.[i].LastPrice$+"/"+ols.[i].Punit$
	  LastCost$[i]=ols.[i].LastCost$+"/"+ols.[i].Cunit$
	  ExtWeight$[i]=ols.[i].ExtWeight$   
	  GPP$[i]=ols.[i].GPP$ 
	  LGP$[i]=ols.[i].LGP$ 
	  UnitPrice$[i]=ols.[i].UnitPrice$+"/"+ols.[i].Punit$
	  UnitCost$[i]=ols.[i].UnitCost$+"/"+ols.[i].Cunit$
	Next i

	Call DXSet("li",LI$[])
	Call DXSet("item",Item$[])
	Call DXSet("desc",Desc$[])
	Call DXSet("qtyord",QtyOrd$[])
	Call DXSet("qtyshp",QtyShp$[])
	Call DXSet("qtyBord",QtyBOrd$[])
	Call DXSet("um",UM$[])
	Call DXSet("punit",Punit$[])
	Call DXSet("ext",Ext$[])
    Call DXSet("effdate",EffDate$[])
	Call DXSet("change",Change$[])
	Call DXSet("pendcost",PendCost$[])
	Call DXSet("lastqty",LastQty$[])
	Call DXSet("lastorddate",LastOrdDate$[])
	Call DXSet("lastgpp",LastGPP$[])
	Call DXSet("lastprice",LastPrice$[])
	Call DXSet("lastcost",LastCost$[])
	Call DXSet("extweight",ExtWeight$[]) 
	Call DXSet("gpp",GPP$[])
	Call DXSet("lgp",LGP$[])
	Call DXSet("unitprice",UnitPrice$[])
	Call DXSet("unitcost",UnitCost$[])
    !
	Call DXSet("output",trim$(mergedir$)+"sfpcdet.html")
  Else

	Clear Col1$,Col2$,Col3$,Col4$,Col5$                                         
	Clear Col6$,Col7$,Col8$,Col9$,Col10$                                        
	Clear Col11$,Col12$,Col13$,Col14$,Col15$                                  
	Clear Col16$,Col17$,Col18$,Col19$,Col20$
    
	Call DXGet("S_USER.AppID",CO$) ! Company                                    
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number     
    Call DXGet("S_USER.Userdef2",PriceChangeFlag$) ! allowpricechange Y or N 

	Call PCList(Val(CO$),VAL(SLS$),debug,dlog$,oo.[], ii,ss, maxRow, arrSales[])
	For i=0 to ii
	   Col1$[i]=oo.[i].SalesMan$
	   Col2$[i]=oo.[i].CustId$
	   Col3$[i]=oo.[i].CustName$
	   Col4$[i]=oo.[i].Type$
	   Col5$[i]=oo.[i].OrderNo$
	   Col6$[i]=oo.[i].PO$
	   Col7$[i]=oo.[i].Ordered$
	   Col8$[i]=oo.[i].RS$
	   Col9$[i]=oo.[i].TResale$
	   Col10$[i]=oo.[i].TGPP$
	   Col11$[i]=oo.[i].ShipDT$
	   Col12$[i]=oo.[i].Hold$
	   Col13$[i]=oo.[i].HoldD$
	   Col14$[i]=oo.[i].Status$
	   Col15$[i]=oo.[i].Li$
	   Col16$[i]=oo.[i].Product$
	   Col17$[i]=oo.[i].EnteredBy$
	   Col18$[i]=PriceChangeFlag$
	   Col19$[i]=oo.[i].GTM$
    Next i

	Call DXSet("col1",Col1$[])
	Call DXSet("col2",Col2$[])
	Call DXSet("col3",Col3$[])
	Call DXSet("col4",Col4$[])
	Call DXSet("col5",Col5$[])
	Call DXSet("col6",Col6$[])
	Call DXSet("col7",Col7$[])
	Call DXSet("col8",Col8$[])
	Call DXSet("col9",Col9$[])
	Call DXSet("col10",Col10$[])
	Call DXSet("col11",Col11$[])
	Call DXSet("col12",Col12$[])
	Call DXSet("col13",Col13$[])
	Call DXSet("col14",Col14$[])
    Call DXSet("col15",Col15$[])
	Call DXSet("col16",Col16$[])
	Call DXSet("col17",Col17$[])
	Call DXSet("col18",Col18$[])
    Call DXSet("col19",Col19$[])

	Call DXSet("slsmn",SLS$)
	!
	Call DXSet("output",trim$(mergedir$)+"sfpclist.html")
  End If
 Else
    If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfneword"
    Error 10000
    msg$="error..."+e$ \ Call updatelog(debug)
	Call errTrap()
 End Try
End Sub !sfpc
!
!
Sub sfstkout()
!--------------------------------------------------------------------
!creates a list of  stockouts
 Try
    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
	Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number

    Call SOList(Val(CO$),VAL(SLS$),debug,dlog$,so.[], ii, ss, maxRow)
    
	For i=0 to ii
       Col1$[i]=so.[i].Commodity$
       Col2$[i]=FixText$(so.[i].Vendor$)
       Col3$[i]=so.[i].Item$
       Col4$[i]=FixText$(so.[i].Desc1$)
       Col5$[i]=so.[i].PO$
       Col6$[i]=so.[i].Qty$
       Col7$[i]=so.[i].PODate$
	   Col8$[i]=FixText$(so.[i].desc2$)
       Col9$[i]=so.[i].whse$ 
	   Col10$[i]=so.[i].por$
	   Col11$[i]=so.[i].Avail$
    Next i
	!
    Call DXSet("col1",Col1$[])
    Call DXSet("col2",Col2$[])
    Call DXSet("col3",Col3$[])
    Call DXSet("col4",Col4$[])
    Call DXSet("col5",Col5$[])
    Call DXSet("col6",Col6$[])
    Call DXSet("col7",Col7$[])   
	Call DXSet("col8",Col8$[])
	Call DXSet("col9",Col9$[])
	Call DXSet("col10",Col10$[])
	Call DXSet("col11",Col11$[])
     
    Call DXSet("slsmn",SLS$)
	!
    Call DXSet("output",trim$(mergedir$)+"sfsolist.html")
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," sfstkout"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sfstkout

Sub sflist(e$,action$)
!--------------------------------------------------------------------
!creates a list of  
 Try
	Declare External Sub CommList
	Dim list1$[listrow,20],list2$[listrow,30]
	Dim field$[255],action2$[20]
	Dim cc.[2000] as commInfo

    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("field",field$)
    Call DXGet("action2",action2$)
	
	If UCase$(action2$) = "COMMODITY"
		Call CommList(Val(CO$),Val(SLS$),debug,dlog$, cc.[], ii, ss, ListRow)
		if ii > ListRow let ii = ListRow
    	For i=0 to ii
      		list1$[i]=cc.[i].Commcode$
      		list2$[i]=cc.[i].Commodity$
		Next i
    	Call DXSet("header1","Commodity Code")
    	Call DXSet("header2","Commodity Desc")
    	Call DXSet("col1",list1$[])
    	Call DXSet("col2",list2$[])
    	Call DXSet("slsmn",SLS$)
    	Call DXSet("field",field$)
    	Call DXSet("numrecs",str$(ii))
		!
    	Call DXSet("output",trim$(mergedir$)+"sflist.html")
	End If
 Else  ! from Try
  If Spc(8)<>10000 e$=Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," sfstkout"
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !sflist
!
!
!
!
Sub RefSearch(e$,options$)
!--------------------------------------------------------------------
!refnum search
! 4/19/07
!
 Try

	Declare External sub OOSearch   !  , INVSearch

	Dim oo.[maxrow] as ooInfo
	Dim ardet.[maxrow] as ardetInfo
	Dim tot. as totInfo

	Dim 2%,ii,ss
	Dim 3%,refnum,custcode
	Dim CO$[1],SLS$[3],custid$[6],refnum$[10],action2$[50]
	Dim refinv$[10],reford$[10],refpo$[20],refchk$[12]
	Dim custid$[6],custname$[26],refnum$[10],reftype$[4]
	Dim custpo$[20]

    Clear Col1$,Col2$,Col3$,Col4$,Col5$
    Clear Col6$,Col7$,Col8$,Col9$,Col10$
    Clear Col11$,Col12$,Col13$,Col14$,Col15$
    Clear Col16$,Col17$,Col18$,Col19$,Col20$ 

    call DXGet("custid",custid$) \ custid=custid$ 
    call dxget("action2",action2$) \ action2$ = lcase$(action2$)
	if action2$ = "start"
		if custid call dxset("custid",custid$)                    
		call dxset("output",trim$(mergedir$) + "sfrefsearch.html")
		exit sub                                                  
	end if                                                      


    Call DXGet("S_USER.AppID",CO$) ! Company
    Call DXGet("S_USER.Userdef1",SLS$) ! Salesman Number
    Call DXGet("custid",custid$) \ custid = custid$
    Call DXGet("refnum",refnum$) \ refnum = refnum$
    Call DXGet("custpo",custpo$)
    Call DXGet("reftype",reftype$)
  ! Call DXGet("refinv",refinv$)
  ! Call DXGet("reford",reford$)
  ! Call DXGet("refpo",refpo$)
  ! Call DXGet("refchk",refchk$)


!   Call OOSearch(1,999,1,"files/6/dx.log",oo.[],ii,ss,100,arrsales[],refnum$,custid)

    Call OOSearch(Val(CO$),VAL(SLS$),debug,dlog$,oo.[], ii,ss,maxRow, arrSales[],refnum, custpo$, custid)
	if ii > MaxRow let ii = MaxRow
    For i=0 to ii
       Col1$[i]=oo.[i].SalesMan$
       Col2$[i]=oo.[i].CustId$
       Col3$[i]=oo.[i].CustName$
       Col4$[i]=oo.[i].Type$
       Col5$[i]=oo.[i].OrderNo$
       Col6$[i]=oo.[i].PO$
       Col7$[i]=oo.[i].Ordered$
       Col8$[i]=oo.[i].RS$
       Col9$[i]=oo.[i].TResale$
       Col10$[i]=oo.[i].TGPP$\if nocost$="Y" let col10$[i]=" "
       Col11$[i]=oo.[i].ShipDT$
       Col12$[i]=oo.[i].Hold$
       Col13$[i]=oo.[i].HoldD$
       Col14$[i]=oo.[i].Status$
       Col15$[i]=oo.[i].EnteredBy$
       Col16$[i]=oo.[i].GTM$
       Col17$[i]=oo.[i].TypeDesc$
    Next i
	
	Call DXSet("ocol1",Col1$[])
	Call DXSet("ocol2",Col2$[])
	Call DXSet("ocol3",Col3$[])
	Call DXSet("ocol4",Col4$[])
	Call DXSet("ocol5",Col5$[])
	Call DXSet("ocol6",Col6$[])
	Call DXSet("ocol7",Col7$[])
	Call DXSet("ocol8",Col8$[])
	Call DXSet("ocol9",Col9$[])
	Call DXSet("ocol10",Col10$[])
	Call DXSet("ocol11",Col11$[])
	Call DXSet("ocol12",Col12$[])
	Call DXSet("ocol13",Col13$[])
	Call DXSet("ocol14",Col14$[])
	Call DXSet("ocol15",Col15$[])
	Call DXSet("ocol16",Col16$[])
	Call DXSet("ocol17",Col17$[])
	Call DXSet("ocol18",Col18$[])
    Call DXSet("slsmn",SLS$)
	!
	! now search invoices
	!
	if custid
		Dim in.[MaxRow] as inInfo
		Dim keySCust$[6],keyECust$[6] 
		Dim keySInv$[10],keyEInv$[10]
		Dim keySDate$[10],keyEDate$[10]

		!
		! keyscust$="0";keyecust$="999999"
		! keysdate$=tim(4);keyedate$=tim(4)
		! keysdate$="12/04/05";keyedate$="12/04/03"   !demo
		keysdate$=tim(9) using "&&/" + tim(10) using "&&/" + tim(8)-1 using "20&&"
		keyedate$=tim(9) using "&&/" + tim(10) using "&&/" + tim(8) using "20&&"
		! keysinv$="0";keyeinv$="9999999999"
	
	    ! Call DXGet("keysdate",keysdate$) !starting invoice date
		! Call DXGet("keyedate",keyedate$) !ending invoice date
		! Call DXGet("keyscust",keyscust$) !starting customer
		! Call DXGet("keyecust",keyecust$) !ending customer  
		! Call DXGet("keysinv",keysinv$)   !starting invoice number 
		! Call DXGet("keyeinv",keyeinv$)   !ending invoice number   
		keyscust$ = custid using "######"
		keyecust$ = custid using "######"
		keysinv$ = refnum using "##########"
		keyeinv$ = refnum using "##########"
	
	    Call SearchInv(Val(CO$),Val(SLS$),debug,dlog$,keyscust$,keyecust$,keysdate$,keyedate$,keysinv$,keyeinv$,tot.,in.[],ii,ss,maxRow, arrSales[],cost_lev[], refnum, custpo$)

		if ii > MaxRow let ii = MaxRow
	    For i=0 to ii
	       Col1$[i]=in.[i].SalesMan$
		   Col2$[i]=in.[i].CustId$
	       Col3$[i]=in.[i].CustName$
	       Col4$[i]=in.[i].OrderNo$
	       Col5$[i]=in.[i].InvoiceNo$
	       Col6$[i]=in.[i].InvDate$
	       Col7$[i]=in.[i].Amount$
	       Col8$[i]=in.[i].Tax$
	       Col9$[i]=in.[i].Freight$
	       Col10$[i]=in.[i].Misc$
	       Col11$[i]=in.[i].TInvoice$
		   Col12$[i]=in.[i].Cost$
	       Col13$[i]=in.[i].Profit$
	       Col14$[i]=in.[i].TGPP$
	       Col15$[i]=in.[i].Commission$
		   Col16$[i]=in.[i].EnteredBy$
		   Col17$[i]=in.[i].PMT$
		   Col18$[i]=in.[i].PMTDate$
		   Col19$[i]=in.[i].CustPO$
	    Next i
	
	    Call DXSet("icol1",Col1$[])
	    Call DXSet("icol2",Col2$[])
	    Call DXSet("icol3",Col3$[])
		Call DXSet("icol4",Col4$[])
	    Call DXSet("icol5",Col5$[])
	    Call DXSet("icol6",Col6$[])
	    Call DXSet("icol7",Col7$[])
	    Call DXSet("icol8",Col8$[])
	    Call DXSet("icol9",Col9$[])
	    Call DXSet("icol10",Col10$[])
	    Call DXSet("icol11",Col11$[])
	    Call DXSet("icol12",Col12$[])
	    Call DXSet("icol13",Col13$[])
	    Call DXSet("icol14",Col14$[])
	    Call DXSet("icol15",Col15$[])
		Call DXSet("icol16",Col16$[])
		Call DXSet("icol17",Col17$[])
		Call DXSet("icol18",Col18$[])
		Call DXSet("icol19",Col19$[])
		!
		! done searching invoices
	End if !  if custid
	!
    Call DXSet("output",trim$(mergedir$)+"sfrefList.html")
 Else
	If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," refsearch"
	Error 10000
	msg$="error..."+e$ \ Call updatelog(debug)
	Call errTrap()
 End Try
End Sub !refsearch
!
!
!
!Internal subs for main
!
!
Sub x()
 Try
 Else
  If Spc(8)<>10000 e$ = Spc(8) , " " , Msc$(2) , " at " , Str$(Spc(10))," "
  Error 10000
  msg$="error..."+e$ \ Call updatelog(debug)
  Call errTrap()
 End Try
End Sub !
!
!
External Function RemoveSigns(x$)                                
        Dim 4%,Result,tmp$[30],result$[30]                      
        !                                                       
        kpos=0 \ Search x$,"$",kpos                             
        if kpos let tmp$ = x$[kpos+1] else tmp$=x$              
        !                                                       
        result$ = tmp$ to "/"
        result=result$
        !                                                       
End Function Result
!