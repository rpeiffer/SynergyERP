! >>> Program po373ws
!
! description Purchase Order Receipts Journal  - Cost Verification
! loadsave -w -n 100,10 -o prog/dxport/po373ws.dl4 src/po373ws.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 25, 2003  11:41:08
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/po/po373ws.src (univ2) [jcs] {33452}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem PO373WS- COST VERIFICATION WORKSHEET
Rem AUTHOR: COTTINGHAM SPECS   SEP  3, 1993
Rem LAST UPDATE:
Try
Enter S7,WHSE,NARROW,DISPCOST,intco
dim 1%,PFU1[20],CNVTU[2]!,S7,WHSE,NARROW,DISPCOST
Dim  3%,PFU2[6],CNVTA,A[33]
!If Err 0 Gosub ERR_TRAP
Dim L1$[120],V$[264],P$[156],P2$[30]
Dim 1%,L1[5],PL0[4],H4[3],LM[1],WHLM[1],PO1[9],DESUNIT
Dim 2%,L2[2],H0[5],H3[3],B[24],C4[10]
Dim 3%,L3[6],PL[5],H8[9],M1[17],A1[7],W3[24],PL4[19],UWORK[20]
Dim 3%,DISP_COST,DISP_QTY,DISP_EXT,FREEORD,FREERCD
Dim F1$[20],F2$[30],A$[10],PUNIT$[4],LPUNIT$[4]
Dim NSD$[96],1%,NSD1[7],3%,NSD3[9],PREC[1],2%,NSD2[4]
Dim J$[40],J1$[30],J2$[20],J3$[40],J4$[40],J8$[8]
Dim 1%,F,X1,2%,X2,3%,J,X3,T9[20]
Dim K1$[50],K2$[20],K3$[20],X$[10],T9$[26],P9$[50],P60$[50]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
! If Err 0 Rem
!Try Close #9 Else Rem
! If Err 0 Gosub ERR_TRAP
!Gosub L_6700  --- sort file already open on channel #9
Mat Read #1,0,100;J8$;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Read #1,3;J1$;
!If Err 0 Let J8 = Spc(8)
J8 = 0 !\ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
!If Err 0 Gosub ERR_TRAP
!If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 60 \ If J8 Let J9 = 20
!Print @0,21;"SORTING, PLEASE WAIT . . . ";'CE' \ Signal 3,0
! clear sort file
let k1$=" ",k1$
do
	Search #9,3,1;K1$,L1,E 
	if e exit do
	search #9,5,1;k1$,l1,E\IF e gosub err_search
loop
Gosub L_1500
K1$ = " ",K1$
J1 = 90 \ J2 = 0
Goto L_1900
L_1500: Rem THRU HEADER
K2$ = " ",K2$;K2$[1,2] = S7 Using "##"
L_1520: Search #8,3,1;K2$,R8,E \ If E > 2 Gosub ERR_SEARCH
If E = 2 Goto L_1900
X2 = K2$[1,2] \ If X2 <> S7 Goto L_1900
Gosub L_6100
If WHSE If WHSE <> H4[1] Goto L_1520
Gosub L_3000
K3$ = " ",K3$;K3$[1,6] = H0[2] Using "######"
L_1570: Search #12,3,1;K3$,R12,E \ If E > 2 Gosub ERR_SEARCH
If E = 2 Goto L_1520
X2 = K3$[1,6] \ If X2 <> H0[2] Goto L_1520
Gosub L_6200
Call Logic(1,2 ^ 1,L1[3],X0) \ If X0 Goto L_1600
If Not(L3[4]) Goto L_1570
L_1600: Rem SET UP KEY
K1$ = " ",K1$
K1$[1,4] = PO1[6] Using "####"
K1$[5,10] = H3[3] Using "######"
K1$[11] = K3$
R0 = R8;E = 0
Search #9,4,1;K1$,R0,E \ If E Gosub ERR_SEARCH
Goto L_1570
L_1900: !  Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE' \ Signal 3,0
!If J8 Print 'CS';
!If Err 0 Gosub ERR_ESCAPE
BUYER = 0;PO = 0
K1$ = " ",K1$;J1 = 90
L_2000: Search #9,3,1;K1$,R1,E
If E Goto L_9100
X2 = K1$[11,16] \ If PO If X2 <> PO Gosub L_4000
X2 = K1$[1,4] \ If X2 <> BUYER Let J1 = 90
BUYER = K1$[1,4];PO = K1$[11,16]
R8 = R1 \ Gosub L_6100
Gosub L_3000
K2$ = " ",K2$;K2$ = K1$[11]
Search #12,2,1;K2$,R12,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_2000
Gosub L_6200
Call Logic(1,2 ^ 2,L1[3],ZLINE) \ If ZLINE Goto L_2190
Gosub L_2800
Gosub L_3400
If L1[5] = -2
  UWORK[8] = (PL4[0] + L2[1] + PL4[8])
Else 
  DISP_QTY = (L3[4] - PL4[16]);DISP_COST = (PL4[0] + L2[1] + PL4[8])
  Gosub CALC_DISP_EXT
  UWORK[8] = DISP_EXT
End If 
If L1[5] = -1 Or L1[5] = -3 Let UWORK[8] = UWORK[8] * PL4[12] / A[6]
UWORK[8] = FNR(UWORK[8])
UWORK[3] = FNR(UWORK[3] + UWORK[7])
X0 = L1[4] \ Gosub L_3600
LPUNIT$ = " " \ LPUNIT$ = PUNIT$
Gosub L_5800
Gosub L_5000
Gosub L_2200
! Signal 2,J0,A,B \ If J0 <> -1 Gosub L_9615
L_2190: Goto L_2000
L_2200: Rem TOTALS CALC
T9[5] = T9[5] + UWORK[1]
T9[6] = T9[6] + UWORK[2]
T9[12] = T9[12] + UWORK[8]
Return 
L_2800: Rem GET PRODUCT
Call Logic(1,2 ^ 0,L1[3],X0)
If Not(X0)
  Gosub L_6000
  For X2 = 0 To 24 \ W3[X2] = 0 \ Next X2
  WHLM[0] = 0;WHLM[1] = 0
  J4$ = P$[140,151] \ J4$[13] = H4[1] Using "##"
  Search #10,2,1;J4$,R10,E \ If E > 1 Gosub ERR_SEARCH
  If E = 1 Goto L_2840
  Gosub L_6300
  Gosub L_12400
L_2840: Else 
  Gosub L_6500
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  P$ = " ",P$;P2$ = " ",P2$;B[8] = 0;B[21] = 0;C4[4] = 0;B[10] = 0
  A[5] = NSD3[7] \ A[6] = NSD3[6] \ B[23] = NSD3[2]
  PFU1[8] = NSD1[5] \ PFU1[10] = NSD1[4] \ PFU1[11] = NSD1[3]
  P$[9,38] = NSD$[13,42] \ P$[63,92] = NSD$[43,72]
  P$[140,151] = NSD$[1,12] \ P$[93,112] = NSD$[73,92]
End If 
Return 
L_3000: Rem VENDOR/BUYER
Mat Read #5,H0[1],0;V$;
K3$ = " ",K3$;K3$ = H3[3] Using "######"
Search #4,2,1;K3$,R4,E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_3070
Mat Read #4,R4,206;M1;
Return 
L_3070: Rem VEND NOT FOUND?
M1[15] = 0
Return 
L_3400: Rem CONV REC=>DSPL
CNVTA = L2[0];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 2
Gosub L_3540 \ UWORK[3] = AMOUNT
If DISPCOST = 1 Let DESUNIT = L1[4]
If DISPCOST = 2 Let DESUNIT = L1[5]
If L1[5] = -2 And DISPCOST = 1
  CNVTA = PL4[0] / (L3[4] - PL4[16])
Else 
  CNVTA = PL4[0]
End If 
CNVTU[0] = 0;CNVTU[1] = DESUNIT;CNVTU[2] = 2
Gosub L_3540 \ UWORK[10] = AMOUNT
If (L1[5] = -1 Or L1[5] = -3) And DISPCOST = 1 ! adjust if weight changed
  UWORK[10] = FNR(UWORK[10] * PL4[12] / A[6])
End If 
FREERCD = 0
If PL4[16]
  CNVTA = PL4[16];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
  Gosub L_3540
  FREERCD = AMOUNT
End If 
FREEORD = 0
If (PL4[1] - PL4[17]) > 0
  CNVTA = (PL4[1] - PL4[17]);CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
  Gosub L_3540
  FREEORD = AMOUNT
End If 
CNVTA = ((L3[2] + PL4[1]) - L3[3]);CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
Gosub L_3540 \ UWORK[1] = AMOUNT
If L1[5] = -2 And DISPCOST = 2
  CNVTA = L2[1] / (L3[4] - PL4[16])
Else 
  CNVTA = L2[1]
End If 
CNVTU[0] = 0;CNVTU[1] = DESUNIT;CNVTU[2] = 2
Gosub L_3540 \ UWORK[7] = AMOUNT
CNVTA = L3[4];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
Gosub L_3540 \ UWORK[2] = AMOUNT
If L1[5] = -2 And DISPCOST = 2
  CNVTA = B[8] * (L3[4] - PL4[16])
Else 
  CNVTA = B[8]
End If 
CNVTU[0] = 0;CNVTU[1] = DESUNIT;CNVTU[2] = 2
Gosub L_3540 \ UWORK[6] = AMOUNT
If L1[5] = -2 And DISPCOST = 2
  CNVTA = L2[0] * (L3[4] - PL4[16])
Else 
  CNVTA = L2[0]
End If 
CNVTU[0] = 0;CNVTU[1] = DESUNIT;CNVTU[2] = 2
Gosub L_3540 \ UWORK[4] = AMOUNT
If L1[5] = -2 And DISPCOST = 2
  CNVTA = C4[4] * (L3[4] - PL4[16])
Else 
  CNVTA = C4[4]
End If 
CNVTU[0] = 0;CNVTU[1] = DESUNIT;CNVTU[2] = 2
Gosub L_3540 \ UWORK[5] = AMOUNT
Return 
L_3540: Rem CALL CONV
Gosub L_20000
Return 
CALC_DISP_EXT: Rem convert qty and cost to cost um, then calc ext cost
CNVTA = DISP_QTY;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 1 \ Gosub L_20000
DISP_QTY = AMOUNT
CNVTA = DISP_COST;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
DISP_COST = AMOUNT
DISP_EXT = FNR(DISP_QTY * DISP_COST)
Return 
L_3600: Rem GET UNITS
PUNIT$ = "????"
If X0 = -1 Let PUNIT$ = "CWT " \ Goto L_3630
If X0 = -2 Let PUNIT$ = "LOT " \ Goto L_3630
If X0 = -3 Let PUNIT$ = "LB  " \ Goto L_3630
If X0 > 0 Read #13,X0,10;PUNIT$;
L_3630: Return 
L_4000: Rem TOTAL PRINT
Gosub L_5800
Print #0;"\15\** TOTALS **\15\";
If NARROW Goto L_4025
Print #0; Using "#######.##"; Tab 63;T9[5];
Print #0; Using "#######.##"; Tab 73;T9[6];
Print #0; Using "########.##"; Tab 120;T9[12];
Goto L_4060
L_4025: Print #0; Using "#######.##"; Tab 0;T9[5]; Tab 10;T9[6];
Print #0; Using "######.##"; Tab 70;T9[12];
L_4060: For K = 0 To 20
  T9[K] = 0
Next K
J1 = 90
Return 
L_5000: Rem PRINT LINE
If NARROW Goto L_5100
Print #0; Using "###"; Tab 0;L1[2];
Print #0; Tab 4;L1$[81,92];
Print #0; Tab 17;L1$[1,30];
Print #0; Tab 48;P2$[13,27];
Print #0; Using "------#.##"; Tab 63;UWORK[1];
Print #0; Using "#######.##"; Tab 73;UWORK[2];
Print #0; Tab 83;"/";LPUNIT$[1,4];
Print #0; Using "#####.##"; Tab 88;UWORK[10];
Print #0; Using "#####.##"; Tab 96;UWORK[4];
Print #0; Using "#####.##"; Tab 104;UWORK[5];
Print #0; Using "#####.##"; Tab 112;UWORK[6];
Print #0; Using "########.##"; Tab 120;UWORK[8];
If FREERCD <> 0 Or FREEORD <> 0
  Print #0;""
  Print #0; Using "------#.##"; Tab 48;"         FREE"; Tab 63;FREEORD;
  Print #0; Using "#######.##"; Tab 73;FREERCD;
  J1 = J1 + 1
End If 
Goto L_5780
L_5100: Print #0; Using "###"; Tab 0;L1[2];
Print #0; Tab 5;L1$[81,92];
Print #0; Tab 19;L1$[1,30];
Print #0; Tab 51;P2$[13,27]
Print #0; Using "------#.##"; Tab 0;UWORK[1];
Print #0; Using "#######.##"; Tab 10;UWORK[2];
Print #0; Tab 20;"/";LPUNIT$[1,4];
Print #0; Tab 26;"U/M:";
X0 = DESUNIT \ Gosub L_3600
Print #0;PUNIT$[1,4];
Print #0; Using "#####.##"; Tab 34;UWORK[10]; Tab 43;UWORK[4]; Tab 52;UWORK[5]; Tab 61;UWORK[6];
Print #0; Using "######.##"; Tab 70;UWORK[8];
If FREERCD <> 0 Or FREEORD <> 0
  Print #0;""
  Print #0; Using "------#.##";FREEORD;
  Print #0; Using "#######.##"; Tab 10;FREERCD;
  Print #0;"  FREE";
  J1 = J1 + 1
End If 
L_5780: Print #0;"\15\";
Return 
L_5800: Rem HEADINGS ROUTINE
J1 = J1 + 1 \ If NARROW Let J1 = J1 + 1
If J1 < J9 Return 
! If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 8
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 1;J8$; Tab (44 - Len(J1$) / 2);J1$; Tab 70;"PAGE";J2
Print #0;" - 373WS - ";
Print #0; Tab 30;"COST VERIFICATION WORKSHEET"
Print #0; Using "######";H3[3];" ";V$[1,20];
Print #0; Tab 35;"BUYER: ";BUYER
Print #0; Using "######"; Tab 1;"P.O. NUMBER: ";H0[2];
X2 = H3[0] \ Gosub L_7700
X$ = J8$
Print #0; Tab 30;"RECEIVED: ";X$;
If NARROW
  If DISPCOST = 1 Print #0;"  USING PO QTY U/M FOR COST"
  If DISPCOST = 2 Print #0;"  USING COST U/M FOR COST"
Else 
  If DISPCOST = 1 Print #0; Tab 89;"   USING PO QTY U/M FOR COST"
  If DISPCOST = 2 Print #0; Tab 89;"   USING COST U/M FOR COST"
End If 
Print #0;"\15\";
If NARROW Goto L_6800
Gosub L_5940
Print #0; Tab 1;"LN";
Print #0; Tab 4;"ITEM CODE";
Print #0; Tab 17;"ITEM DESCRIPTION";
Print #0; Tab 48;"PACK SIZE";
Print #0; Tab 68;"ORD'D";
Print #0; Tab 78;"REC'D";
Print #0; Tab 84;"U/M";
Print #0; Tab 89;"   NET ";
Print #0; Tab 100;"LAST";
Print #0; Tab 108;"BASE";
Print #0; Tab 116;"LOAD";
Print #0; Tab 124;"PO COST";
Print #0;" "
Goto L_5980
L_5940: Rem HEAD 1
Return 
L_5980: Print #0;"\15\";
If J2 = 1 If Not(J8) Let J1 = J1 + 2
Return 
L_6000: Rem READ PRODUCT FILE
Mat Read #3,L3[1];P$;
Mat Read #3,L3[1],156;B;
Mat Read #3,L3[1],256;A;
Mat Read #3,L3[1],512;PFU1;
Mat Read #3,L3[1],554;PFU2;
Mat Read #3,L3[1],620;LM; \ PREC[0] = L3[1]
Mat Read #3,L3[1],894;C4;
Mat Read #3,L3[1],944;P2$;
Return 
L_6100: Rem READ HEADER
Mat Read #8,R8,0;H0;
Mat Read #8,R8,222;H3;
Mat Read #8,R8,242;H4;
Mat Read #8,R8,250;H8;
Mat Read #8,R8,330;PO1;
Return 
L_6200: Rem READ LINE ITEM
Mat Read #12,R12;L1
Mat Read #12,R12,12;L2
Mat Read #12,R12,24;L3;
Mat Read #12,R12,66;L1$;
Mat Read #12,R12,232;PL4;
Return 
L_6300: Rem READ WHPR FILE
Mat Read #10,R10,78;W3;
Mat Read #10,R10,842;WHLM;
If P9$[32,32] = "Y" Gosub L_69000
If P9$[32,32] = "Y" If W3[17] Let B[8] = W3[17]
If P9$[32,32] = "Y" If W3[15] Let B[21] = W3[15]
If P9$[32,32] = "Y" If W3[18] Let C4[4] = W3[18]
If P9$[32,32] = "Y" If W3[16] Let B[10] = W3[16]
Return 
L_6500: Rem READ NSTKDESC
Mat Read #14,L3[1];NSD$
Mat Read #14,L3[1],96;NSD1
Mat Read #14,L3[1],112;NSD2
Mat Read #14,L3[1],132;NSD3
Return 
!L_6700: Rem OPEN SORT FILE ON #9
! A$ = Spc(6) \ A$ = A$[2,Len(A$) - 1]
!Read #1,88,912;F1$;
!If F1$ = "" Goto OUTEND
!L_6720: If F1$[Len(F1$)] = " " Let F1$ = F1$[1,Len(F1$) - 1] \ Goto L_6720
!P2 = 0 \ Let F2$ = F1$ To "*" : P2 \ If Not(P2) Goto OUTEND
!Print @0,21;"OPENING SORT FILE, PLEASE WAIT . . . ";'CE'
!KSIZE = F1$[P2 + 1] \ If Not(KSIZE) Let KSIZE = 10
!If KSIZE < 20 Let KSIZE = 20
!F1$[P2] = A$
!Call FindF(F1$,H1)
!If H1 Kill F1$
!F2$ = "[1:256] ",F1$
!Build #9,F2$
!Search #9,0,1;K1$,KSIZE,E \ If E Gosub ERR_SEARCH
!L1 = 1000 \ Search #9,0,0;K1$,L1,E \ If E Gosub ERR_SEARCH
!Return 
L_6800: Rem NARROW HEADING
Print #0; Tab 1;"LN"; Tab 4;"ITEM CODE";
Print #0; Tab 19;"ITEM DESCRIPTION"; Tab 51;"PACK SIZE"
Print #0; Tab 2;"ORD. QTY"; Tab 12;"REC. QTY";
Print #0; Tab 27;"COSTS: ";
Print #0; Tab 39;"NET"; Tab 47;"LAST";
Print #0; Tab 56;"BASE"; Tab 65;"LOAD"; Tab 71;"EXT. P/O"
Print #0;"\15\";
If J2 = 1 If Not(J8) Let J1 = J1 + 2
Return 
L_7700: Rem  *X2 TO X$ V1.0
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 

L_9100: Rem END
Gosub L_4000
!If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND

L_12400: Rem CALC LOADS FROM LOAD MARKUP
If P9$[32,32] = "Y" And H4[1] <> 0
  If WHLM[0]
    WH = H4[1];LTBL = WHLM[0];CNVTA = 0
    Gosub L_12610 \ W3[17] = CNVTA;B[8] = W3[17]
  End If 
  If WHLM[1]
    WH = H4[1];LTBL = WHLM[1];CNVTA = 0
    Gosub L_12610 \ W3[14] = CNVTA;PF_LOAD2 = W3[14]
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    Gosub L_12610 \ B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    Gosub L_12610 \ PF_LOAD2 = CNVTA
  End If 
End If 
Return 
L_12610: Rem CALL
OTYPE = 1
! Call "MXLOAD5",OTYPE,WH,LTBL,PREC[],CNVTA
Call "MXLOAD5.dl4",OTYPE,WH,LTBL,PREC[],CNVTA,intCO,e$,rstr$
Return 

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto l_20120: ! If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 

ERR_SEARCH: Rem                                 
ENUM = E;ELINE = Spc(16);CTERR = 0              
If E = 5 Let CTERR = Err(8)                     
msg$ = "RETURN STATUS",(E + (CTERR * .001))     
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "  
e$ = msg$ \ Error 10000                         
Return ! En      

OUTEND: Rem "================================= exit                       
                                                        
!End                                                                      
!Stop                                                                     
!! OUTEND HERE !!!                                                        
Rem {begin rtn.error.s}                                                   
Else                                                                      
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK      
  !                                                                       
  !Include src/callmainerrnet.inc                                         
  !include "src/callmainerrnet.inc"                                       
  ! main error routine                                                    
  If Spc(8) <> 10000                                                      
    Dim msc4$[100] \ msc4$ = Msc$(4)                                      
    If Pos(msc4$, = "/",-1) Let msc4$ = msc4$[Pos(msc4$, = "/",-1) + 1]   
    Call env(2,"PROGNAME",msc4$)                                          
    Call programdump()                                                    
    Call suberr(e$,Spc(8),Spc(10),Msc$(2))                                
  End If                                                                  
  Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[],rstr$)                 
  If rstr$ = ""                                                           
    Call dxget(1,"focus",e$) !dxblockgui coding                           
    If e$ <> "" Chain "dxblockgui.dl4"    
    Chain "MX000.dl4"                                
  End If                                             
End Try                                              
End ! the whole program                              