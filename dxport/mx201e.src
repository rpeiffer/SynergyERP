! MX201E - ORDER DELETE
!
! loadsave -w -n 100,10 -o prog/dxport/mx201e.dl4 src/mx201e.src
!
! MX201E     ORDER DELETE
!  AUTHOR: G.DOSCHER   4/30/80
!  LAST UPDATE: G.DOSCHER  5/27/80
!  LAST UPDATE: roman 07/22/1991.  clean up
! LAST UPDATE: B. Swet 3/10/92 update delete tracking file gosub 4500
!       		04/02/1997 - DATE COMPARES JULIAN
!               10/26/99 zyc cct128233 does not chain back to 223
! 01/03/00 tc cct130855 if 251 finds pending advance orders, and you pick
!   to use one and delete it, 201e going back to wrong place
! 03/24/00 sms cct#133760 log to 916 all deleted items from 206
! 06/06/01 zyc cct#147558 record lock problem
! 10/01/02 zyc cct159638 problem with sprodlot and sprodwhse if ordered qty < 0
!           08/29/03 -zyc cct170971 add etaction = 9  "ORDER DELETED"   
! 11/26/03 tc undo cct159638
! 08/18/05 swu cct#193976 salespro, add directory 4 for 2/edittrack#
! 08/18/05 swu cct#193976 add etaction = 9
! 06/11/08 jliu cct#217031 when delete the order line,delete the roltag file,too
include "src/copyright.inc" ! dx
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,Logic,String,Time,VerifyDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,programdump,env
Declare Intrinsic Function findchannel
!Option Default Dialect IRIS1
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,getsession
Declare External Function OpenFile,PDate$,FormatDate2$,OpenMySQLMirror
External Lib "libgeneral.lib" !general routines                   
Declare External Sub suberr,mainerr,getsession,setoutput,addtostr
External Lib "serpkitl.dl4"
Declare External Sub DELOKIT
External Lib "librasl.lib"
Declare External Sub allocordlot,chkwhrasl
include "src/inc/filecpidet.inc" ! CPI detail trailer
include "src/inc/sql_prod.inc"
! include "src/inc/filecpidet.inc" ! CPI detail trailer
! s9[1] = customer record #
! s9[2] = sales order #
Enter CH[],STAT[],rec_uac,dl1$,e$,rstr$,returnstatus,message$
!	STAT[0] = company #/intco
!       STAT[1] = customer record # (S9[1])
!       STAT[2] = order record #    (S9[2])
!       STAT[3] = program delete type #  (S9[3]) (206=order, 224-invoice, 245 = cm)
!	STAT[4] = program #
!	dl1$= delete reason 20 characters 
!	
! 
If err 0 gosub err_trap
dim 2%,s9[9]
dim proda$[156],keyron1$[50],keyron2$[50],keychk$[50],sn1$[54]
dim 1%,sn1,snn1[2],2%,sn0[1],3%,rec_ron
DIM p61$[256],KEYORL1$[50],KEYORL2$[50],SOR$[32],1%,SOR1[1],3%,SOR2[3],R[50]
Dim A$[64],A1$[64],A2$[30],C1$[5],I$[60],I1$[60],M$[18],L2$[20],K1$[30]
Dim F$[20],S0$[36],X$[10],K5$[50],K6$[50],FLG$[4],W$[60],F1$[16],k$[50]
Dim 1%,C3[2],L3[3],H3[1],S1[3],H4[2],WHSE,DL1,U1,HWHSE,LWHSE,OWHS,CTWT
Dim 1%,ETLINE,ETSTAT,ETUNIT,ETNONSTOCK,CHNLFREE,SCR1,CH_ET,LOCKPORT,ETPRINT
Dim 1%,UN[2],LINENUM,tcb
Dim 1%,ETPUNIT[1],Chan[20]
Dim 2%,B1,C1,X,DL[12],OWHT1[1],Rasl[5]
Dim 2%,L6[5],SHIPDATE,3%,L8,L9,H1,H2,L1,V1,V3
Dim 2%,C2[12],H0[12],L2[1],L4[3],N0,X2
Dim 2%,ETORDER,ETDATE,ETTIME,ETPORT,ETACTION,ETCUST,ADELLN,UCA2
Dim 2%,H6[8],ETORIGCUST
Dim 3%,ETOQTY[2],ETNQTY[2],E,LBSORD,WHLBS[1],OLS3[17],OLM[6]
Dim 3%,L5[3],A[33],P3[4],S3[3],T2[25],C8,L7[12],W3[24],C9,TOT[4]
Dim 3%,S2[20],OL2$[16],DLT,PLV[1],WHLV[1],TOT_SELL,TL2[1]
Dim 2%,H5[16],JSDATE,JWDATE,DT3[1]
Dim 2%,ETSLS
Dim 3%,ETUNITPRICE[1],ETLOADCOST[1],ETWGT[1],TT,COID
Dim BLANK$[90],J$[60],custom_customer$[30],BREAK$[50]
Dim H0$[20],DL$[20],DL1$[20],P60$[50],SCRATCH$[80]
Dim ETPROD$[12],ETUSER$[10],ET$[80],USERACCESS$[10]
Dim LPONUM$[30],LJOBNUM$[30],PSNUM$[30],MSG1$[30],MSG2$[30]
Dim 3%,DL3,OREF[5],ETINVOICE
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[100]

dim cpid. as cpidet

! open files
intco=stat[0] ! set the company #

if not (ch[0]) ! control file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=ch[0]
endif

If not (ch[1]) ! customer file #5
	ch_cust=OpenFile(1808,intCo) \ If Ch_cust = -1 Error 42 ! customer file
else
	let ch_cust=ch[1]
endif
if not (ch[2]) ! product file #3
	ch_prod=OpenFile(1792,intCo) \ If Ch_prod = -1 Error 42 ! product file
else
	let ch_prod=ch[2]
endif
if not (ch[3]) ! order header #8
	 Ch_Roh = openfile(1840,intCo) \ If Ch_Roh = -1 Error 42     !order  header file
else
	let ch_roh=ch[3]
endif
if not (ch[4]) ! order lines #11
	ch_rol=OpenFile(1888,intCo) \ If Ch_rol = -1 Error 42 ! order line
else
	let ch_rol=ch[4]
endif
if not (ch[5]) ! order ship file #9
	Ch_Ros = openfile(1856,intCo) \ If Ch_Ros = -1 Error 42     !"order shipto file
else
	let ch_ros=ch[5]
endif
if not(ch[6]) ! order message file
	Ch_Rom = openfile(1968,intCo) \ If Ch_Rom = -1 Error 42     !"order message file
else
	let ch_rom=ch[6]
endif
if not (ch[7]) ! order nonstock
	ch_nstk=OpenFile(2128,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
else
	let ch_nstk=ch[7]
endif
If not (ch[8]) ! order total
	 Ch_Rot = openfile(1872,intCo) \ If Ch_Rot = -1 Error 42     !"order total file
else      
	let ch_rot=ch[8]
endif
if not (ch[9]) ! order cash screen 
	ch_roc = OpenFile(2224,IntCo) \ if ch_roc = -1 Error 42   ! order cash file
else
	let ch_roc=ch[9]
endif
if not (ch[10]) ! order acknowledgement
		ch_ack = OpenFile(1264,IntCo) \ if ch_ack= -1 Error 42   ! order acknow file
else
	let ch_ack=ch[10]
endif	

if not(ch[12]) ! prod whse
	ch_prwh = OpenFile(1248,IntCo) \ if ch_prwh= -1 Error 42   !product warehouse
else
	let ch_prwh=ch[12]
endif	
if not(ch[13]) ! trace delete
	ch_trdel = OpenFile(1248,IntCo) \ if ch_trdel= -1 Error 42   ! trace delete file
else
	let ch_trdel=ch[13]
endif	
If not(ch[14]) ! edit tracj
		ch_et = OpenFile(9996,IntCo) \ if ch_et= -1 Error 42   ! edit track file
else
	let ch_et=ch[14]
endif
If not(ch[15]) ! sordlot #17  *** make sure file is open and not (ropen)
	Ch_sordlot = OpenFile(2320,intco) \ If Ch_sordlot = -1 Error 42 ! sord
else
	let ch_sordlot=ch[15]
endif
If not(ch[16]) ! sprodlot #16  *** make sure file is open and not (ropen)
	 Ch_sprodlot = OpenFile(2528,intco) \ If Ch_sprodlot = -1 Error 42
else
	let ch_sprodlot=ch[16]
endif
ch_par = openfile(9924,intco) ! will be -1 if not found
sqlChan = OpenMySQLMirror(e$)
Mat Read #ctlc,3,188;SHIPDATE;
Mat Read #ctlc,60,50;P60$;
Mat Read #1,61,0;p61$;
ch_cpid = -1
if p61$[111,111] = "Y" ! CPI
	ch_cpid=OpenFile(9928,IntCo)
end if
mat read #ctlc,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
tptc=0 \ if custom_customer$="HTBERRY" let tptc=1
if P61$[140,140]="Y" let tptc=1 ! custom_customer$="PIEDMONT"
X2 = SHIPDATE \ Gosub L_7820 \ X2 = 0
If X2 Let JSDATE = X2 Else Gosub L_7650
C1 = STAT[1] ! CUSTOMER RECORD # ! s
H1 = STAT[2] ! ORDER HEADER RECORD # 
Gosub L_7000
Gosub L_7050
H2 = H0[2]
N0 = H0[7]
Let TaxCD=H4[0] ! tax code #
M$ = "#",M$
let chan=ch_rom ! order message
gosub l_4000:
let chan=ch_nstk ! nonstock lines
gosub l_4000:
let chan=ch_roc ! sales order cash line
gosub L_4000: 
let chan=ch_ack ! order acknowledgements
gosub L_4150:
If STAT[3] = 206 Or STAT[3] = 225 or stat[4]=241 or stat[4]=245 ! 206 = ORDER DELETE , 225 = INVOICE DELETE
  Gosub GET_USRCTL
End If 
If Int(STAT[3] / 10) > 20 Gosub L_4300
If Int(STAT[3] / 10) = 20 Gosub L_4300
! Add taxcode look up to see if CCH calcs tax
CHNL=findchannel()
Read #ctlc,88,2176;f$[1,16];
Let TCB=0
If err 0 rem ! prevent ANY ERROR
ROpen #CHNL,F$
Read #CHNL,TaxCD,412;TCB; ! H4[0] is CHANGED in program
Close #CHNL
If err 0 gosub err_trap:
if tptc=0 let tcb=0 ! not setup-not used
if p61$[104,104]="Y"
	CH_ORDL=findchannel()                                       
	LET F$="3/SORDROLL"+STR$(INTCO)
	TRY
		OPEN #CH_ORDRL,F$  
	ELSE
		LET CH_ORDRL=0
	END TRY
endif
!if N0=420282
!	CALL PROGRAMDUMP("tmp/invdel!","")
!endif
A1$ = " ",A1$;CTR = 0;BLANK$ = " ",BLANK$
A1$[1,6] = N0 Using M$[1,6]
L_1030: Search #CH_ROL,3,1;A1$,V1,E \ If E > 2 let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
If E Goto L_1100
L1 = V1
X2 = A1$[1,6] \ If X2 <> N0 Goto L_1100
F7 = 0;CTR = CTR + 1
Gosub L_7100
WHSE = LWHSE \ If H5[7] = 7 Let WHSE = H5[11]
Gosub L_2000
If H5[7] = 8 Or H5[7] = 16 Let WHSE = H5[11] \ Gosub L_2000
If F7 Goto L_8000
If STAT[3] = 206 If P60$[44,44] = "Y" Let ETACTION = 3 \ Gosub ETRACK_COMPLETE
If STAT[3] = 225 If P60$[44,44] = "Y" Let ETACTION = 9 \ Gosub ETRACK_COMPLETE
if stat[4] = 241 or stat[4]=245 OR STAT[3]=245
	If P60$[44,44] = "Y" Let ETACTION = 26 \ Gosub ETRACK_COMPLETE
endif
Gosub L_1500
Gosub DEL_ROLTAG
if ch_par > 0 gosub del_parcnt:
Goto L_1030
L_1100: Gosub L_1130
If CTR = 0 !no lines
  Gosub ETRACK_INIT
  ETPROD$ = "DELETED"
  ETOQTY[0] = 0;ETOQTY[1] = 0;ETOQTY[2] = 0
  If STAT[3] = 206 If P60$[44,44] = "Y" Let ETACTION = 3 \ Gosub ETRACK_COMPLETE
  If STAT[4] = 201 If P60$[44,44] = "Y" Let ETACTION = 3 \ let ETPROD$=" DELETED -201" \ Gosub ETRACK_COMPLETE
  If STAT[4] = 221 If P60$[44,44] = "Y" Let ETACTION = 3 \ let ETPROD$=" DELETED221CS" \ Gosub ETRACK_COMPLETE
  If STAT[4] = 223 If P60$[44,44] = "Y" Let ETACTION = 3 \ let ETPROD$=" DELETED223CS" \ Gosub ETRACK_COMPLETE
  If STAT[4] = 231 If P60$[44,44] = "Y" Let ETACTION = 3 \ let ETPROD$=" DELETED -231" \ Gosub ETRACK_COMPLETE
  If STAT[4] = 251 If P60$[44,44] = "Y" Let ETACTION = 3 \ let ETPROD$=" DELETED -251" \ Gosub ETRACK_COMPLETE
  If STAT[3] = 225 If P60$[44,44] = "Y" Let ETACTION = 9 \ Gosub ETRACK_COMPLETE
  if stat[4] = 241 or stat[4] = 245 or STAT[3]=245
		If P60$[44,44] = "Y" Let ETACTION = 26 \ Gosub ETRACK_COMPLETE
  endif
End If 
If CTR <> 0 !lines
  if stat[4] = 201 or stat[4] = 221 or STAT[4]=223 or stat[4] = 231 or stat[4] = 251 or stat[4] = 241 or stat[4] = 245 or STAT[3]=245
    LET L3[2] = 0
    Gosub ETRACK_INIT
    ETACTION = 3 
    ETPROD$ = "DELETED -201"
    If STAT[4] = 221  let ETPROD$=" DELETED221CS"  !221-CASH SCREEN
    If STAT[4] = 223  let ETPROD$=" DELETED223CS"  !223-CASH SCREEN
    If STAT[4] = 231  let ETPROD$=" DELETED -231" 
    If STAT[4] = 251  let ETPROD$=" DELETED -251" 
    if stat[4] = 241  let ETPROD$=" DELETED -241" \ Let ETACTION = 26 
    if stat[4] = 245 or STAT[3]=245 let ETPROD$=" DELETED -245" \ Let ETACTION = 26 
    ETOQTY[0] = 0;ETOQTY[1] = 0;ETOQTY[2] = 0
    ETLINE = 0
    If P60$[44,44] = "Y" Gosub ETRACK_COMPLETE

  endif
End If 
if tcb=1 ! it's a cch tax 
  Call "cch.abandon.out.dl4",N0,X$,IntCo,rstr$ ! tell them to abandon trans
Endif
if STAT[4]>218 and tcb=2 ! it's avalara - cancel inv/cdt (only ones saved to a file!)
	call "ava.canceltaxout.dl4",N0,H1,x$,IntCo,rstr$
endif
Goto L_8000
L_1130: Rem "========================================= delete header/ship/totals
Gosub L_5200
TOT_SELL = T2[0]
A$ = " ",A$
A$[1,2] = H0 Using M$[1,2]
A$[3,8] = N0 Using M$[1,6]
A$[9] = ""
Search #ch_roh,2,1;A$,V1,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Search #ch_roh,5,1;A$,V1,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
X2 = Int(STAT[3] / 10)
H0 = 20
If X2 = 23 or x2=22 or x2=25 Let H0 = 21 ! all invoices
If X2 = 24 Let H0 = 22
A$[1,2] = H0 Using "##"
V1 = H1
Search #ch_roh,4,1;A$,V1,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Write #ch_roh,H1;H0
A1$ = " ",A1$ \ A1$ = H0[4] Using "######"
A1$[7] = A$[3] \ V1 = H1
If Len(A1$) > 12 Let A1$[13] = ""
Search #ch_roh,2,2;A1$,V1,E
If E Goto L_1340
Search #ch_roh,5,2;A1$,V1,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
L_1340: A1$ = " ",A1$ \ A1$ = H0[11] Using "###"
A1$[4] = A$[3] \ V1 = H1
Search #ch_roh,2,3;A1$,V1,E \ If E > 1 let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
If E Goto L_1380
Search #ch_roh,5,3;A1$,V1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
L_1380: Rem DELETE TOTAL & SHIP TO
Gosub L_7050
H4[1] = DL1;H5[1] = U1
H4 = STAT[3]
Write #ch_roh,H1,56;TOT_SELL
Mat Write #ch_roh,H1,78;H4
Mat Write #ch_roh,H1,84;DL1$
Mat Write #ch_roh,H1,104;H5
E = 3 \ Search #ch_ros,1,0;A$,H0[2],E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
E = 3 \ Search #ch_rot,1,0;A$,H0[3],E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Unlock #ch_ros
unlock #ch_rot
Return 

DEL_ROLTAG: Rem=========================delete order line tag
Ch_roltag= OpenFile(9950,intco) 
If Ch_roltag<0 Return ! not found
A$ = " ",A$
A$[1,6] = N0 Using M$[1,6]
A$[7,9] = L3[2] Using M$[1,3]
Search #ch_roltag,2,1;A$,R89,E
If Not(E)
  TL2[0] = 0 \ TL2[1] = 0
  LINENUM = 0
  LPONUM$ = " ",LPONUM$
  LJOBNUM$ = " ",LJOBNUM$
  PSNUM$ = " ",PSNUM$
  MSG1$ = " ",MSG1$
  MSG2$ = " ",MSG2$
  Mat Write #ch_roltag,R89,0;TL2;
  Write #ch_roltag,R89,12;LINENUM;
  Write #ch_roltag,R89,14;LPONUM$;
  Write #ch_roltag,R89,44;LJOBNUM$;
  Write #ch_roltag,R89,74;PSNUM$;
  Write #ch_roltag,R89,104;MSG1$;
  Write #ch_roltag,R89,134;MSG2$;
  Search #ch_roltag,5,1;A$,R89,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
   E = 3\ Search #ch_roltag,1,0;A$,R89,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
End If 
Close #ch_roltag
Return 

DEL_PARCNT: Rem=========================delete parcnt line
	A$ = " ",A$
	A$[1,6] = N0 Using M$[1,6]
	A$[7,10] = L3[2] Using M$[1,4]
	Search #ch_par,2,1;A$,parRec,E
	if not(e)
		Search #ch_par,5,1;A$,parRec,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
		E = 3\ Search #ch_par,1,0;a$,parRec,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
	end if
return

L_1500: Rem "====================================== delete lines
L1 = V1
B1 = L3[2]
A$ = " ",A$
A$[1,6] = N0 Using M$[1,6]
A$[7,9] = L3[2] Using M$[1,3]
If H5[7] = 21 Or H5[7] = 22 If L3[2] = 0 Let A$[7,9] = "   ";A$[10] = A1$[10] \ Goto L_1580
Gosub L_1830
L_1580: Search #CH_ROL,5,1;A$,V1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
If L3[0] Goto L_1780
A$ = " ",A$
A$[1,6] = L4 Using M$[1,6]
A$[7,12] = N0 Using M$[1,6]
A$[13,15] = B1 Using M$[1,3]
A$[17] = ""
If H5[7] = 21 Or H5[7] = 22 If L3[2] = 0 Let A$[13,15] = "   ";A$[16] = A1$[10]
Search #CH_ROL,2,2;A$,V1,E 
IF NOT(E) ! \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
	Search #CH_ROL,5,2;A$,V1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
ENDIF
If H5[7] = 15 Let L7[4] = L7[2] \ If H0[5] Let L7[4] = 0;OLS3[4] = 0
If L2 = 12 Or L7[2] < 0 Goto L_1780
If L3 Goto L_1780
If L3[1] = 0 Goto L_1780
Mat Read #ch_prod,L4,256;A
Read #ch_prod,L4,664;LBSORD
Mat Read #ch_prod,L4,990;PLV
If H5[7] <> 15
  A[3] = A[3] - L7[4]
  If CTWT = -3 Let LBSORD = LBSORD - (OLS3[4] * Sgn(L7[4]))
Else 
  A[3] = A[3] - (L7[2] - L7[0] - L7[3])
  If CTWT = -3 Let LBSORD = LBSORD - (OLS3[4] * Sgn(L7[4]))
End If 
If A[3] < 0 Let A[3] = 0
if LBSORD<0 let LBSORD=0
WHSE = LWHSE \ If H5[7] = 7 Let WHSE = H5[11]
if p61$[111,111] = "Y" and olm[2]
	GOSUB UNALLOCATE_CPI
END IF
Gosub L_10000
If JSDATE >= JWDATE
  If H5[7] <> 15 Let PLV[0] = PLV[0] - ((L7[4])) Else Let PLV[0] = PLV[0] - ((L7[2] - L7[0] - L7[3]))
End If 
If JSDATE < JWDATE
  If H5[7] <> 15 Let PLV[1] = PLV[1] - ((L7[4])) Else Let PLV[1] = PLV[1] - ((L7[2] - L7[0] - L7[3]))
End If 
IF PLV[0]<0 LET PLV[0]=0
IF PLV[1]<0 LET PLV[1]=0
Mat Write #ch_prod,L4,256;A
Write #ch_prod,L4,664;LBSORD
Mat Write #ch_prod,L4,990;PLV;
if sqlChan >= 0 ! MySQL enabled and channel opened
	Mat Read #ch_prod,L4,0;prodA$;
	e = prod_UpdateSQLFromDL4(e$, intCo, prodA$[140,151], sqlChan, ch_prod)
	if e <> 1 ! returns the number of records add/updated/deleted
		error 11000
	end if
end if

L_1780: Gosub L_2400
if p61$[104,104]="Y" GOSUB DELIROLL:
If L2$[14,16] = "KIT" Gosub L_7200
If CTWT = -3 ! "final catchwgt delete
	!CALL "WGTACCUMORD",J1,H0[7],L3[2],COID,X1
	ch_wt=OpenFile(10100,intCo) 
	if ch_wt<0 goto endwt:
		LET K$=" ",K$                            
		LET K$[1,6]=H0[7] USING "######"                        
		LET K$[7,9]=L3[2] USING "###"                            
                Do 
			SEARCH #CH_WT,3,1;K$,REC,E 
			IF E=2 exit do                                   
	                If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH          
  			LET X2=K$[1,6] \ IF X2<>H0[7] exit do            
  			LET X2=K$[7,9] \ IF X2<>L3[2] exit do                         
			SEARCH #CH_WT,5,1;K$,REC[1],E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
			LET E=3;REC[1]=REC                                        
			SEARCH #CH_WT,1,0;K$,REC[1],E \  If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
		loop
		close #ch_wt
	endwt: ! end of weight
endif
! delete rol line
E = 3 \ Search #CH_ROL,1,0;A$,V1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Unlock #ch_rol
Return

L_1830: Rem "========================== flag line deleted order ship hist
Mat Read #ctlc,60,6;FLG$;
If FLG$[1,1] = "N" Return 
ch_tmp=OpenFile(2496,intCo) !  4/ORDSHIPHST1 
If Ch_tmp < 0 RETURN ! file not found
Read #ctlc,3,172;D8;
K6$ = " ",K6$ \ K6$[1,6] = H0[4] Using "######"
K6$[7,12] = H0[7] Using "######"
If H5[6] Let K6$[7,12] = H5[6] Using "######"
K6$[13,15] = L3[2] Using "###" \ K6$[16,21] = "000000"
Search #ch_tmp,3,1;K6$,R6,E
If E  goto endordshphst: ! Return 
X2 = K6$[7,12]
If H5[6] If X2 <> H5[6] goto endordshphst: !Return 
If Not(H5[6]) If X2 <> H0[7] goto endordshphst: ! Return 
X2 = K6$[13,15]
If X2 <> L3[2] goto endordshphst: !Return 
X2 = K6$[16,21]
If X2 goto endordshphst: !Return 
Mat Read #ch_tmp,R6,30;S2;
S2[10] = 99 \ S2[11] = D8
Mat Write #ch_tmp,R6,30;S2;
endordshphst: ! 
close #ch_tmp
Return 

L_2000: Rem DELETE SORDLOT & UNALLOCATE SPRODLOT
If (STAT[3] = 206 Or STAT[3] = 225 or stat[4] = 241 or stat[4]=245) If P60$[44,44] = "Y" Gosub ETRACK_INIT
If F7 Return 
! If L3 Return ! in case - try delete
!If Not(L3[1]) Return ! still try delete (sordlot recs w/no line fix?)
A$ = " ",A$
A$ = N0 Using "######" \ A$[7] = L3[2] Using "###"
!A$[10] = WHSE Using "##" \ A2$ = A$
A2$ = A$ ! w/o whse!
Search #ch_sordlot,2,3;A$,L8,E
If Not(E) Goto L_2100
L_2090: Search #ch_sordlot,3,3;A$,L8,E
If E = 2 Return 
L_2100: If A$[1,9]<>a2$[1,9] return !  A$[1,11] <> A2$[1,11] Return 
If A$[30,32] = "KIT" Goto L_2090
A2$ = A$
Mat Read #ch_sordlot,L8;S0$;
Mat Read #ch_sordlot,L8,36;S1;
Mat Read #ch_sordlot,L8,60;S3;
Mat Read #ch_sordlot,L8,96;OL2$;
I1$ = " ",I1$ \ I1$ = A$[10,11] ! WHSE Using "##"
I1$[3,8] = A$[12,17]
I1$[9,32] = S0$[1,24]
Search #ch_sprodlot,2,3;I1$,L9,E
If E Goto L_2300
Mat Read #ch_sprodlot,L9,82;P3;
If L7[2] < 0 Goto L_2210
If H0 > 12 Goto L_2190
If H0 > 8 Or L7[2] < 0 Goto L_2210
L_2190: P3[3] = P3[3] - S3[1]
P3[4] = P3[4] - S3[3]
If P3[4] < 0 Let P3[4] = 0
If P3[3] < 0 Let P3[3] = 0
Mat Write #ch_sprodlot,L9,82;P3;
IF S3[1] AND  OL2$[11,16]<>"NONE  " AND OL2$[11,16]<>"STOCK " AND H5[7]<>4 AND H5[7]<>15
  Call ChkWhRasl(e$,intco,Ctlc,0,S1[2],RASL[])
  if rasl and L3[1]=1 and L3[0]=0 and (H6[2]<9 OR H6[2]>11) !  not credit memos! rasl & update stk
	  !GOSUB MoveProduct: ! let's use the call
	  CALL "MoveToUnallocLoc.dl4",S0$[1,12],S1[2],Ol2$[11,16],S0$[13,24],S3[1],IntCo
  Endif
ENDIF
L_2210: Rem IF P3=P3[1] IF NOT P3[3] GOTO L_2230: !NEVER DELETE EXCEPT IN PURGE
Goto L_2300 ! bypass sprodlot delete - goto delete sordlot
Search #ch_sprodlot,5,3;I1$,V3,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
I$ = " ",I$ \ I$ = I1$[9,20],I1$[1,8],I1$[21,42]
Search #ch_sprodlot,5,2;I$,V3,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
I$ = " ",I$ \ I$ = I1$[21,42],I1$[1,8],I1$[9,20]
Search #ch_sprodlot,5,1;I$,V3,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
I$ = " ",I$ \ I$ = I1$[9,20],I1$[1,2],I1$[21,42],I1$[3,8]
Search #ch_sprodlot,5,4;I$,V3,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
E = 3 \ V3 = L9
Search #ch_sprodlot,1,0;I$,V3,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Unlock #ch_sprodlot
L_2300: Rem DELETE SORDLOT
Unlock #ch_sordlot
I1$ = " ",I1$;I1$[1,12] = S0$[13,24];I1$[13,22] = A$[30,39]
I1$[23,39] = A$[1,17] \ I1$[40,51] = S0$[1,12]
Search #ch_sordlot,5,3;A$,V3,E
If E 
	let E$="Search Error "+Str$(E)+" @ line ",SPC(10),"in mx201e"
	Goto SLSE ! Error 10000 ! Gosub ERR_SEARCH
Endif
Search #ch_sordlot,5,2;I1$,V3,E
If E
	let E$="Search Error "+Str$(E)+" @ line ",SPC(10),"in mx201e"
	Goto SLSE !Error 10000 ! Gosub ERR_SEARCH
Endif
A$ = " ",A$ \ A$[1,12] = I1$[40,51] \ A$[13,29] = I1$[23,39]
A$[30,51] = I1$[1,22]
Search #ch_sordlot,5,1;A$,V3,E
If E
	let E$="Search Error "+Str$(E)+" @ line ",SPC(10),"in mx201e"
	Goto SLSE !Error 10000 ! Gosub ERR_SEARCH
Endif
E = 3 \ V3 = L8
Search #ch_sordlot,1,0;A$,V3,E
If E
	let E$="Search Error "+Str$(E)+" @ line ",SPC(10),"in mx201e"
	Goto SLSE !Error 10000 ! Gosub ERR_SEARCH
Endif
A$ = A2$
Goto L_2090

SLSE: ! record search error on sordlot
system "echo ''" + msc$(0)+" "+ e$ + "'' >> files/1/erp.errlog"
Dim msc4$[100] \ msc4$ = Msc$(4)
If Pos(msc4$, = "/",-1) Let msc4$ = msc4$[Pos(msc4$, = "/",-1) + 1]
Call env(2,"PROGNAME",msc4$)
Call programdump()
Error 10000
End

L_2400: Rem DEL SER NO'S
If L3 Return  ! nonstock item
Mat Read #ch_prod,L4,0;prodA$;
if proda$[8,8]<>"Y" return ! not a serial # product
S9 = L1;L7[4] = 0
ch_ron=OpenFile(2944,intCo) \ If Ch_ron < 0 return ! no serial #
ch_prser=OpenFile(416,intCo) 
Write #CH_ROL,S9,192;L7[4];
!Swap 1,"SNOEENT"
LET keyron1$=" ",keyron1$;keyron1$[1,6]=L2[1] USING "######"     
LET keyron1$[7,9]=L3[2] USING "###"                              
LET keychk$=keyron1$                                             
do                                                               
        SEARCH #ch_ron,3,1;keyron1$,rec_ron,E                    
        if e>0 exit do                                           
        IF keyron1$[1,9]<>keychk$[1,9] exit do                   
        MAT  READ #ch_ron,rec_ron,0;SN1$;                        
        if sn1$[1,12]=proda$[140,151]                            
                MAT  READ #ch_ron,rec_ron,54;SN0;                
                MAT  READ #ch_ron,rec_ron,62;SN1;                
                SEARCH #ch_ron,5,1;keyron1$,rec_ron,E 
		If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
                LET KEYRON2$=" ",KEYRON2$                        
                let KEYRON2$=SN1$[25,54]                         
                let KEYRON2$[31]=L4[0] USING "######"            
                SEARCH #ch_ron,5,2;KEYRON2$,rec_ron,E
		If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH                  
                LET E=3 \ SEARCH #ch_ron,1,0;keyron1$,rec_ron,E
		If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
                if ch_prser>0
                    if sn1>0 and sn0[1]>0                              
                                READ #ch_prser,sn0[1],294;SNN1[2]
                                READ #ch_prser,sn0[1],294;SNN1[2]      
                                IF SNN1[2]=3 LET SNN1[2]=0             
                                IF L2=12 !! deleting c/m               
                                        IF SNN1[2]=5 LET SNN1[2]=1     
                                ENDIF                                  
                                WRITE #ch_prser,sn0[1],294;SNN1[2];    
                        endif                                          
                endif                                                  
        endif                                                          
loop                                                                                                                                    
Endserno: ! end delete serial #
close #ch_ron ! close ser # file
if ch_prser>0 close #ch_prser
Return 

L_4000: Rem "====================== del non stocks / messages / cash too

A$ = " ",A$
IF chan=ch_roc ! SORDCASH KEY = ORDER ONLY(NOTHING ELSE)
	A$[1,6]=(N0-1) USING M$[1,6] ! START 1 LESS AS IT'S MODE 3
ELSE
	A$[1,6] = N0 Using M$[1,6]
ENDIF
A$[7] = ""
L_4030: Search #chan,3,1;A$,V1,E \ If E > 2 let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
X2 = A$[1,6]
If Not(E) If X2 = N0 Goto L_4060
Return 
L_4060:  ! ok
if chan=ch_nstk
	Read #chan,V1,8;X;
	If X = -1 Goto L_4120
endif
Search #chan,5,1;A$,V1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
E = 3 \ Search #chan,1,0;A$,V1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Unlock #chan
L_4120: Goto L_4030

L_4150: Rem DELETE ACKNOWLEDGEMENTS
If P60$[23,23] <> "Y" Return 
A$ = " ",A$
A$[1,8] = H0[7] Using " ###### "
Search #chan,5,1;A$,V1,E
If E > 1 let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
A$[1,8] = H0[7] Using "*###### "
Search #chan,5,1;A$,V1,E
If E > 1 let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Return 


L_4300: Rem ADDED BY SPICERS - WHO & WHY   CCT# 70102
DL1 = rec_uac ! this is the user record #  -- was port #
u1=rec_uac
If U1 < 1
	Let DL$ = "SUPER USER SIGNON   " 
else
	ch_usrctl=OpenFile(-9988,intCo) \ If Ch_usrctl = -1 Error 42
	Mat Read #ch_usrctl,U1,280;DL$;
	Close #ch_usrctl
endif
L_4400: Rem GET REASON WHY THEY'RE DELETING
! need to bring dl1$ === delete reason ===

L_4490: If Len(DL1$) < 20 Let DL1$ = DL1$ + "                    "
If Int(STAT[3] / 10) = 20 Return 
Read #ch_rot,H0[3],8;DLT;
K1$ = " ",K1$
K1$[1,2] = " 6"
If Int(STAT[3] / 10) = 24 Let K1$[1,2] = "10"
K1$[3] = OREF[1] Using "##########"
If Int(STAT[3] / 10) = 24 Let K1$[3] = H0[7] Using "##########"
DL[0] = K1$[1,2] \ DL[1] = H0[4]
DL3 = OREF[1] \ DL[3] = H0[7]
DL[4] = H0[8] \ DL[5] = H0[9]
DL[6] = H0[11] \ DL[7] = OWHT1[1]
If H5[7] <> 7 Let DL[8] = HWHSE Else Let DL[8] = H5[11]
DL[9] = H5[8]
DL[10] = H0[12] \ DL[11] = H5[0]
DL[12] = 0
Search #ch_trdel,2,1;K1$,R1,E \ If Not(E) Goto L_4690
E = 2 \ Search #ch_trdel,1,0;K1$,R1,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Mat Write #ch_trdel,R1;DL;
Write #ch_trdel,R1,52;DLT;
Write #ch_trdel,R1,58;DL1;
Mat Write #ch_trdel,R1,60;DL$;
Mat Write #ch_trdel,R1,80;DL1$;
Mat Write #ch_trdel,R1,100;DL3;
Search #ch_trdel,4,1;K1$,R1,E
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
L_4690: Return 

L_5200: Rem "=================== billto & cust open order amt
Mat Read #ch_rot,H0[3],8;T2;
Mat Read #ch_rot,H0[3],328;TOT;
If Int(STAT[3] / 10) <> 24 And STAT[3] <> 14 ! "cust open order update
  K5$ = H0[4] Using "######"
  Search #ch_cust,2,1;K5$,R5,E
  If E Goto L_5340
  Read #ch_cust,R5,412;C9
  If H5[7] = 4 And H0[5] <> 0
    C9 = C9 - T2[0]
  Else 
    If H5[7] = 15 And H0[5] <> 0
    Else 
      If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
        C9 = C9 - ((T2[0] - T2[1]) + T2[24] - TOT[4])
      Else 
        C9 = C9 - T2[0]
      End If 
    End If 
  End If 
  IF C9<0 LET C9=0
  Write #ch_cust,R5,412;C9;
  If H0[1] <> H0[4]
L_5340: K5$ = H0[1] Using "######"
    Search #ch_cust,2,1;K5$,R5,E \ If E Return 
    Read #ch_cust,R5,412;C9
    If H5[7] = 4 And H0[5] <> 0
      C9 = C9 - T2[0]
    Else 
      If H5[7] = 15 And H0[5] <> 0
      Else 
        If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
          C9 = C9 - ((T2[0] - T2[1]) + T2[24] - TOT[4])
        Else 
          C9 = C9 - T2[0]
        End If 
      End If 
    End If
    IF C9<0 LET C9=0
    Write #ch_cust,R5,412;C9;
  End If 
End If 
Return 


L_7000: Rem "========================== read customer rec
Mat Read #ch_cust,C1,30;C1$;
Mat Read #ch_cust,C1,142;C2;
Mat Read #ch_cust,C1,194;C3;
Return 

L_7050: Rem "============================== read header rec
Mat Read #ch_roh,H1;H0
Mat Read #ch_roh,H1,52;H3
Mat Read #ch_roh,H1,78;H4
Mat Read #ch_roh,H1,104;H5
Mat Read #ch_roh,H1,408;H6
Mat Read #ch_roh,H1,490;OWHT1
Mat Read #ch_roh,H1,512;OREF
X2 = H0[10] \ If H0[10] <> 999999 Gosub L_7820 \ X2 = 0
JWDATE = X2;HWHSE = H4[2]
Return 

L_7100: Rem "============================== read line record
F7 = 0
Mat Read #CH_ROL,L1;L2;
Mat Read #CH_ROL,L1,8;L3;
Mat Read #CH_ROL,L1,16;L4;
Mat Read #CH_ROL,L1,32;L5;
Mat Read #CH_ROL,L1,140;L2$;
Mat Read #CH_ROL,L1,56;L6;
Mat Read #CH_ROL,L1,168;L7;
Mat Read #CH_ROL,L1,250;UN;
Mat Read #CH_ROL,L1,404;OLM;
Read #CH_ROL,L1,550;OWHS;
Mat Read #CH_ROL,L1,260;OLS3;
Mat Read #CH_ROL,L1,514;CTWT;
If OWHS <= 0 Or OWHS > 99 Or Fra(OWHS) Let OWHS = 0
If L4[3] <= 0 Or L4[3] > 99 Let L4[3] = H4[2]
LWHSE = L4[3] \ If OWHS Let LWHSE = OWHS
! if L7[11] let F7=9 ! bo rel in process (NO DELETE ALLOWED!)
! had to rem as other line related files deleted prior to line delete
Return 

L_7200: Rem TO KITS
Write #ch_roh,H1; \ Write #CH_ROL,L1;
S9[8] = 0;S9[9] = L3[2];s9[7]=h0[7]
ch_rok=OpenFile(1312,intCo) 
if ch_rok<1 return ! file not found -- no kits then
chan[1]=ch_roh;chan[2]=ch_ros;chan[3]=ch_rot
chan[4]=ch_prod;chan[5]=ch_prwh;chan[6]=ch_sordlot
chan[7]=Ch_sprodlot;chan[8]=ch_rok
chan[9]=sqlChan;chan[11]=0;chan[12]=0 ! kit sn's
! kit info here !
! Swap 1,"MX201K" ******** need call for kits 
call DELOKIT(e$,IntCo,S9[],Chan[])
Read #ch_roh,H1,104;H5 \ Read #CH_ROL,L1;L2
Return 

L_7650: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
SHIPDATE = X$
Call DateToJulian(1,X$,X$,E) \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
X2 = X$[1,5]
JSDATE = X2
Return 

X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 

DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 

Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 

X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem CHAIN OUT
!If Not(F7) Print @0,23;'CE';"Deletion successful!";
!If F7 Print @0,23;'CE RB';"ORDER NOT DELETED -- B/O RELEASE IN PROCESS!";
GOTO OUTEND:

If STAT[3] = 206 Or STAT[3] = 225 or stat[4] = 241 or stat[4] = 245 Close #CH_ET
If S9[7] = 251 Chain "mx251"
If S9[4] = 223 Chain "mx223"
If S9[4] = 254 Chain "mx254"
If STAT[3] = 14 Chain "MX286"
If STAT[3] = 201 Chain "MX201"
If STAT[3] = 208 Chain "MX208"
If STAT[3] = 206 Chain "MX206"
If STAT[3] = 215 Chain "MX251"
If STAT[3] = 225 Chain "MX225"
If STAT[3] = 231 Chain "MX231"
If STAT[3] = 235 Chain "MX235"
If STAT[3] = 241 Chain "MX241"
If STAT[3] = 245 Chain "MX245"
If STAT[3] = 251 Chain "MX251"
If STAT[3] = 252 Chain "MX252"

OUTEND: Rem "outta here
if not (ch[0]) and ctlc>1 close #ctcl ! control file
If not (ch[1]) and ch_cust <>0 close #ch_cust ! customer file #5
if not (ch[2]) and ch_prod<>0 close #ch_prod ! product file #3
if not (ch[3]) and ch_roh<>0 close #ch_roh! order header #8
if not (ch[4]) and ch_rol<>0 close #ch_rol! order lines #11
if not (ch[5]) and ch_ros<>0 close #ch_ros! order ship file #9
if not (ch[6]) and ch_rom<>0 close #ch_rom ! order message file
if not (ch[7]) and ch_nstk<>0 close #ch_nstk ! order nonstock
If not (ch[8]) and ch_rot<>0 close #ch_rot! order total
if not (ch[9]) and ch_roc<>0 close #ch_roc ! order cash screen 
if not (ch[10]) and ch_ack<>0 close #ch_ack! order acknowledgement
! ch[11] - not used
if not (ch[12]) and ch_prwh<>0 close #ch_prwh
if not (ch[13]) and ch_trdel<>0 close #ch_trdel! trace delete
If not (ch[14]) and ch_et<>0 close #ch_et ! edit tracj
If not (ch[15]) and ch_sordlot<>0 close #ch_sordlot
If not (ch[16]) and ch_sprodlot<>0 close #ch_sprodlot
if ch_par <> -1 close #ch_par
if ch_cpid <> -1 close #ch_cpid
if sqlChan <> -1 close #sqlChan
END

UNALLOCATE_CPI: !
	if h5[7] = 2 or h5[7] = 8 and h5[7] = 16 return
	if not(l3[1]) return ! no stock flag
	tmp$ = " ",tmp$
	tmp$[1,6] = olm[2] using "C#####"
	tmp$[7,18] = l2$[1,12]
	search #ch_cpid,2,1;tmp$,recCPI,e
	if e return
	read record #ch_cpid,recCPI,0;CPID.
	if cpid.ResStock
		cpid.QuantityAllocated=cpid.QuantityAllocated-l7[4]
		write record #ch_cpid,recCPI,0;CPID.;
	end if
RETURN

L_10000: Rem "============================= prodwhse
W$ = " ",W$
W$[1,12] = L2$[1,12]
W$[13,14] = WHSE Using "##"
Search #ch_prwh,2,1;W$,W9,E
If NOT(E)
	Mat Read #ch_prwh,W9,78;W3
	Mat Read #ch_prwh,W9,780;WHLV
	Mat Read #ch_prwh,W9,980;WHLBS
	If H5[7] <> 15
		W3[2] = W3[2] - L7[4]
		If CTWT = -3 Let WHLBS[1] = WHLBS[1] - (OLS3[4] * Sgn(L7[4]))
	Else 
		W3[2] = W3[2] - (L7[2] - L7[0] - L7[3])
		If CTWT = -3 Let WHLBS[1] = WHLBS[1] - (OLS3[4] * Sgn(L7[4]))
	End If 
	If JSDATE >= JWDATE
		If H5[7] <> 15 
			Let WHLV[0] = WHLV[0] - (L7[4])
		Else
			Let WHLV[0] = WHLV[0] - (L7[2] - L7[0] - L7[3])
		ENDIF
	End If 
	If JSDATE < JWDATE
		If H5[7] <> 15
			Let WHLV[1] = WHLV[1] - (L7[4])
		Else
			Let WHLV[1] = WHLV[1] - (L7[2] - L7[0] - L7[3])
		End If 
	Endif
	IF W3[2]<0 LET W3[2]=0
	IF WHLBS[1]<0 LET WHLBS[1]=0
	IF WHLV[0]<0 LET WHLV[0]=0
	IF WHLV[1]<0 LET WHLV[1]=0
	Mat Write #ch_prwh,W9,78;W3;
	Mat Write #ch_prwh,W9,780;WHLV;
	Mat Write #ch_prwh,W9,980;WHLBS;
endif
Return 

GET_USRCTL: Rem ---------------------------------------------------
If P60$[44,44] <> "Y" Let ADELLN = 1 \ Return 
if rec_uac<1
	Let ADELLN = 1;USERACCESS$ = "SUPERUSER " 
Else
	Let ADELLN = 0
	ch_usrctl=OpenFile(-9988,intCo) \ If Ch_usrctl = -1 Error 42
	Read #CH_USRCTL,rec_uac,200;UCA2;
	Call Logic(1,64,UCA2,ADELLN)
	Mat Read #CH_USRCTL,rec_uac,260;USERACCESS$;
	close #ch_usrctl
End If 
Return 


ETRACK_INIT: Rem ---------------------------------------------------
ETPRINT = 0
ETORDER = H0[7]
ETLINE = L3[2]
ETSTAT = H6[2]
ETPROD$ = L2$[1,12]
ETOQTY[0] = L7[2]
ETOQTY[1] = L7[4]
ETOQTY[2] = L7[3]
ETDATE = Tim(6)
ETTIME = Tim(11) * 10000 + Tim(12) * 100 + Tim(13)
ETPORT = rec_uac
ETUSER$ = USERACCESS$
If L3[0]
  ETUNIT = EUN[0];ETNONSTOCK = 1
Else 
  ETUNIT = UN[0];ETNONSTOCK = 0
End If 
ETINVOICE = OREF[1]
Mat Read #ch_rot,H0[3],8;T2;
ETORIGTOT = T2[0]
ETCUST = H0[4]
ETSLS = H0[11]
ETUNITPRICE[0] = 0
ETUNITPRICE[1] = 0
ETPUNIT = 0
ETPUNIT[1] = 0
ETLOADCOST[0] = 0
ETLOADCOST[1] = 0
ETWGT[0] = 0
ETWGT[1] = 0
Return

ETRACK_COMPLETE: Rem ----------------------------------------------
ETNQTY[0] = L7[2]
ETNQTY[1] = L7[4]
ETNQTY[2] = L7[3]
ET$ = " ",ET$
ET$ = ETORDER Using "######"
ET$[7] = ETLINE Using "######"
ET$[13] = ETDATE Using "########"
ET$[21] = ETTIME Using "######"
SEARCH #CH_ET,2,1;ET$,REC_ET,E
IF NOT(E) RETURN
E = 2 \ Search #CH_ET,1,0;ET$,REC_ET,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Search #CH_ET,4,1;ET$,REC_ET,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
SCRATCH$ = " ",SCRATCH$
SCRATCH$[1,10] = ETUSER$ + BLANK$
SCRATCH$[11,36] = ET$
Search #CH_ET,4,2;SCRATCH$,REC_ET,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
ET$ = ETDATE Using "########"
ET$[9] = ETTIME Using "######"
ET$[15] = ETORDER Using "######"
ET$[21] = ETLINE Using "######"
Search #CH_ET,4,3;ET$,REC_ET,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
SCRATCH$ = " ",SCRATCH$
SCRATCH$[1,3] = ETSLS Using "###"
SCRATCH$[4,29] = ET$
SCRATCH$[30,30] = " "
Search #CH_ET,4,4;SCRATCH$,REC_ET,E \ If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
Rem WAIT 1 SECOND IF AN A,B,C LINE SO TIEBREAKER WILL WORK- WMB 9/2003
If ETLINE = 0 And (A1$[10,10] = "A" Or A1$[10,10] = "B" Or A1$[10,10] = "C") 
	FOR CTR=0 TO 10\LET E=E\NEXT CTR
ENDIF
Rem {begin src/inc/write.edittrack.i}
Mat Write #CH_ET,REC_ET,0;ETORDER
Mat Write #CH_ET,REC_ET,4;ETLINE
Mat Write #CH_ET,REC_ET,6;ETSTAT
Mat Write #CH_ET,REC_ET,8;ETPROD$
Mat Write #CH_ET,REC_ET,20;ETOQTY
Mat Write #CH_ET,REC_ET,38;ETNQTY
Mat Write #CH_ET,REC_ET,56;ETDATE
Mat Write #CH_ET,REC_ET,60;ETTIME
Mat Write #CH_ET,REC_ET,64;ETPORT
Mat Write #CH_ET,REC_ET,68;ETUSER$
Mat Write #CH_ET,REC_ET,78;ETACTION
Mat Write #CH_ET,REC_ET,82;ETUNIT
Mat Write #CH_ET,REC_ET,84;ETNONSTOCK
Mat Write #CH_ET,REC_ET,90;ETORIGTOT
Mat Write #CH_ET,REC_ET,96;ETCUST
Mat Write #CH_ET,REC_ET,100;ETPRINT
Mat Write #CH_ET,REC_ET,102;ETINVOICE
Mat Write #CH_ET,REC_ET,108;ETSLS
Mat Write #CH_ET,REC_ET,112;ETUNITPRICE
Mat Write #CH_ET,REC_ET,124;ETPUNIT
Mat Write #CH_ET,REC_ET,128;ETLOADCOST
Mat Write #CH_ET,REC_ET,140;ETWGT;
Rem {end write.edittrack.i}
Mat Write #CH_ET,REC_ET,108;ETSLS;
Mat Write #CH_ET,REC_ET,112;ETUNITPRICE;
Mat Write #CH_ET,REC_ET,124;ETPUNIT;
Return 

DELIROLL: REM delete roll inventory
if p61$[104,104]<>"Y" return
If not (ch_ordrl) return
LET KEYORL1$=" ",KEYORL1$;KEYORL1$[1,6]=H0[7] USING "######";KEYORL1$[7,9]=L3[2] USING "###"
LET BREAK$=KEYORL1$
SRCHORDRL: SEARCH #CH_ORDRL,3,1;KEYORL1$,R[41],E \ IF E=2 RETURN 
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
IF KEYORL1$[1,9]<>BREAK$[1,9] RETURN 
MAT  READ #CH_ORDRL,R[41],0;SOR$;
MAT  READ #CH_ORDRL,R[41],62;SOR1;
MAT  READ #CH_ORDRL,R[41],86;SOR2
LET KEYORL2$=" ",KEYORL2$
LET KEYORL2$[1,20]=SOR$[13,32]
LET KEYORL2$[21,26]=SOR2[3] USING "######"
LET KEYORL2$[27,32]=SOR2[1] USING "######"
LET KEYORL2$[33,35]=SOR1[1] USING "###"
SEARCH #CH_ORDRL,5,2;KEYORL2$,R[41],E 
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
SEARCH #CH_ORDRL,5,1;KEYORL1$,R[41],E 
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
LET E=3 \ SEARCH #CH_ORDRL,1,0;KEYORL1$,R[41],E 
If E let E$="Search Error "+Str$(E) \ Error 10000 ! Gosub ERR_SEARCH
GOTO SRCHORDRL:

Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
end
Rem {end rtn.error.s}
