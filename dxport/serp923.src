! --- serp923.dl4
! Sales Order Type maintenance program
!
! 1.0 10/28/2009 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp923.dl4 src/serp923.src
!
! From the original code:
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB 21, 2008  12:35:19
Rem /w2/papermaster/r2005//usr/acct/jliu/work/r2005/mx1/mx133.src (univ2) [jliu] {15170}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
!
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"
!
Declare Intrinsic Sub InpBuf,String,checknumber
Declare Intrinsic Sub FindF
Declare Intrinsic function findchannel
! Option Default Dialect IRIS1
!
! *declare additional external libs & subs & functions
External Lib "ubsfunc.dl4"
Declare External Function openfile
External Lib "libdroplist.lib"
Declare External sub OrdTypeDropList

!Declare External Function openfile,pdate$,jdate$,Formatdate2$
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[3200],tmp2$[500],b$[200]
b$=" ",b$
dim message$[150],webstr$[2000]
!
! call dxopen()
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
! If Err 0 Gosub ERR_TRAP
DIM 1%,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],Y,R1,K1
DIM 2%,W,X,X1,K,C9,E,ST[1],S1[8],R[23]
DIM 3%,J1,X2,G1,B[17],o1
DIM J$[50],J0$[15],J1$[50],J2$[20],J4$[50],J5$[70],J7$[40],P60$[50]
DIM J9$[50],U5$[50],F$[16],X$[20],K1$[25],D$[30],G$[36]
dim k$[30]
dim ordtypelist$[100,100]
dim 1%,ot1,ot2[14]       
dim ot1$[30],otdesc$[20]
DIM KEYORDT$[10],3%,rec_ordt
DIM 2%
Dim P9$[50],P60$[50],P61$[256],filename$[50]
dim 3%,tmp3,R2
Dim custom_customer$[30]
dim List$[5000,1000]
! open files, read system flags, etc.


mat read #1,61,0;p61$;
mat read #1,115,60;custom_customer$;

Custom_customer$=UCase$(Trim$(custom_customer$))
let action1$=Ucase$(Rtrim$(action1$))

if action1$ = "SYSFLAGS"
	let returnstatus=1
	let message$="OK"
	clear list$[]
	list$[0]=bsdel$+"ConditionFlags"+fdel$
	list$[1]="SysAllowWhgChg"+fdel$
	let tmp$="N"
	if p61$[110,110]="Y"
		let tmp$="Y" ! Check avail Option	
		let filename$="3/SORDTYPE"+STR$(intco)
		Call FindF(FILENAME$,FOUND)
		if not(found)
			let tmp$="N"
		endif
	endif
	let webstr$=webstr$,tmp$,fdel$
	!if tmp$="N"
	!	let returnstatus=0
	!	let message$="Option Is Not Available "
	!endif
	list$[2]=webstr$
	list$[3]=esdel$
	call AddToStr(e$,rstr$,List$[])
	goto outend:
endif

if action1$ = "DROPLIST" ! list of order types
	let returnstatus=1
	let message$="OK"
	call OrdTypeDropList(e$,OrdTypeList$[],bsdel$,esdel$,fdel$,100,ctlc)
	call AddToStr(e$,rstr$,OrdTypeList$[])
	Clear List$[]
	List$[0]=bsdel$,"ORDPRINTSTAT",fdel$
	List$[1]="ID",fdel$,"NAME",fdel$
    List$[2]="0",fdel$,"Use System Defaults",fdel$
	List$[3]="2",fdel$,"Order Printed",fdel$
	List$[4]="3",fdel$,"Order Registered",fdel$
	LIST$[5]="4",fdel$,"Ready to Invoice",fdel$
	List$[6]=esdel$
	call AddToStr(e$,rstr$,List$[])
	Clear List$[]
	List$[0]=bsdel$,"ORDBOSTAT",fdel$
	List$[1]="ID",fdel$,"NAME",fdel$
    List$[2]="1",fdel$,"Order Entered",fdel$
	List$[3]="2",fdel$,"Order Printed",fdel$
	List$[4]="3",fdel$,"Order Registered",fdel$
	LIST$[5]="4",fdel$,"Ready to Invoice",fdel$
	List$[6]=esdel$
	call AddToStr(e$,rstr$,List$[])
	goto outend:
end if

!
if action1$ = "GETDATA"
	returnstatus=1
	Message$="OK"
	gosub LoadData 
	goto OutEnd:
endif
!
if action1$ = "SUBMITDATA"
	returnstatus=1
	Message$="OK"
	gosub LoadDataAndSave
	if returnstatus<>0
		Message$="Record updated."
	endif
	goto OutEnd:
endif

!if action1$ = "DELETE"
!	gosub DeleteData
!	Message$="Record deleted."
!	goto OutEnd:
!endif

message$="Invalid action"
returnstatus=0
goto OutErr
! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************


!----------------------------------------------------------------------------
! load selected sales order type data (new or existing) into rstr
!----------------------------------------------------------------------------
LoadData: !
	! build table of conditional item flags indicating display of field (or not)
	clear list$[]
	List$[0]=bsdel$+"OrdTypeData"+fdel$
	webstr$="ID"+fdel$+"Description"+fdel$
	webstr$=webstr$+"AllowWhseChg"+fdel$
	webstr$=webstr$+"AllowWhseChgFlag"+fdel$
	webstr$=webstr$+"OrdPrtStat"+fdel$
	webstr$=webstr$+"AutoPOMillItem"+fdel$
	webstr$=webstr$+"AllowABOWHTFlag"+fdel$
	webstr$=webstr$+"AutoBOWHTrans"+fdel$
	webstr$=webstr$+"AllowBOPOLinkFlag"+fdel$
	webstr$=webstr$+"AllowBOPOLink"+fdel$
	webstr$=webstr$+"BackOrdStatFlag"+fdel$
	webstr$=webstr$+"BackOrdStat"+fdel$
	webstr$=webstr$+"AllowLoadCstChg"+fdel$
	webstr$=webstr$+"UpdLoadCstBO"+fdel$
	webstr$=webstr$+"UpdLoadCstInv"+fdel$
	webstr$=webstr$+"UpdLoadCstPay"+fdel$
	list$[1]=webstr$
	let row=2
	call dxget("ID", tmp$)
	let r2=tmp$
	if r2<1 or r2>38
		let returnstatus=0
		let message$="Invalid Order Type Id "
	endif
	if r2>0 and r2<39 LET DSP=(R2-1)*20      
	READ #CTLC,62,DSP;OTDESC$;
	if rtrim$(otdesc$)=""
		let returnstatus=0
		let message$="Invalid Order Type Selected"
	endif
	! read data from control file
	!if p61$[110,110]<>"Y"
	!	let returnstatus=0
	!	let message$="Option Not Available"
	!endif	
	let filename$="3/SORDTYPE"+STR$(intco)
	Call FindF(FILENAME$,FOUND)
	if not(found)
		Let returnstatus=0
		let message$="Option Not Available"
	endif
	ch_ordt=findchannel()
	ROPEN #CH_ORDT,FILENAME$
	let keyordt$=" ",keyordt$
	let keyordt$=r2 using "##"
	search #ch_ordt,2,1;keyordt$,rec_ordt,e
	if e>1 
		let returnstatus=0
		let message$="Error in Order Type File. SE "+str$(e)
	else
		if not (e)
			gosub readotcode:
			let OT1$=" ",OT1$
			LET OT1$[1,20]=OTDESC$[1,20]
		else
			clear ot1
			clear ot2
			let OT1$=" ",OT1$
			LET OT1$[1,20]=OTDESC$[1,20]
			let ot1=r2
		endif
		if ot2[11]<1 or ot2[11]>4
			let ot2[11]=1
			if p9$[45,45]="Y" let ot2[11]=2
			if r2=36 let ot2[11]=4
		endif
	endif
	
	! find in file
	if returnstatus<>0
		webstr$=str$(r2)+fdel$ ! id 
		webstr$=webstr$+rtrim$(ot1$)+fdel$ ! description
		let tmp$="N"
		if ot2[0]=1 let tmp$="Y"
		webstr$=webstr$+TMP$+fdel$ ! allow warehouse change
		let validtype=1
		if p61$[110,110]<>"Y"
			let validtype=0 ! flag not on no warehouse change allowed
		else
			! following order types are not allow to have the warehouse change
			if r2=16 let validtype=0 ! warehouse transfer
			if r2=7  let validtype=0 ! consignment stocking
			if r2=8  let validtype=0 ! consignment
		endif
		let tmp$="N"
		if not(validtype) let tmp$="N"
		if validtype<>0 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ ! add allow warehouse change flag
		if ot2[7]<2 or ot2[7]>4 let ot2[7]=0 ! flag to use system default
		webstr$=webstr$+str$(ot2[7])+fdel$ ! order print status
		tmp$="N" \ if ot2[8]=1 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ ! auto PO mill item
		tmp$="N";validtype=0
		if p61$[120,120]="Y" or p61$[120,120]="E"
			if r2=1 or r2=5 or r2=6 or r2=9 or r2=10 let validtype=1
			if r2>=12 and r2<=14 let validtype=1
			if r2>=17 and r2<=35 let validtype=1
			if r2=16 or r2=19 OR R2=20 let validtype=0 ! NEVER!
		endif
		if validtype=1 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ ! allow BO warehouse transfer
		tmp$="N" \ if ot2[9]=1 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ ! BO warehouse transfer
		tmp$="N";validtype=0
		if p61$[121,121]="Y"
			if r2=1 or r2=5 or r2=6 or r2=9 or r2=10 or r2=16 let validtype=1
			if r2>=12 and r2<=14 let validtype=1
			if r2>=17 and r2<=35 let validtype=1
			if R2=20 let validtype=0 ! NEVER!
		endif
		if validtype=1 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ ! allow BO PO Link
		tmp$="N" \ if ot2[10]=1 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ ! BO PO Link
		let tmp$="Y"
		if r2=36 let tmp$="N" ! evap order no change always 4
		let webstr$=webstr$+tmp$+fdel$ ! bo status flag
		let webstr$=webstr$+str$(ot2[11])+fdel$ ! backorder status

		Tmp$="Y" ! "AllowLoadCostChg"+fdel$
		validtype=1
		IF r2=2 or r2=8 or r2=16 or r2=36 ! not valid on directs, consign stk, transfer and evap
			let tmp$="N" 
			let validtype=0
		endif
		webstr$=webstr$+tmp$,fdel$ ! not valid  or OT1=2 or OT1=8 OR OT1=16 if r2
		! update load cost on backorders task #42630
		if ot2[12]<>1 let ot2[12]=0
		if validtype=0 let ot2[12]=0
		let tmp$="N"
		if ot2[12]<>0 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$
		! update load cost on invoices task#47560
		if ot2[13]<>1 let ot2[13]=0
		if validtype=0 let ot2[13]=0
		let tmp$="N"
		if ot2[13]<>0 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ 
		! update load cost on payables task#47246
		if ot2[14]<>1 let ot2[14]=0
		if validtype=0 let ot2[14]=0
		let tmp$="N"
		if ot2[14]<>0 let tmp$="Y"
		webstr$=webstr$+tmp$+fdel$ 
		list$[row]=webstr$
		let row=row+1
	endif
	list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
	clear list$[]
return
!--------------------------------------------------------


!----------------------------------------------------------------------------
! load data from web and save bank code data
!----------------------------------------------------------------------------
LoadDataAndSave: !
	call dxget("ID", tmp$)
	let r2=tmp$
	if r2<1 or r2>38
		let returnstatus=0
		let message$="Invalid Order Type Id "
		goto endsavedata:
	endif
	LET DSP=(R2-1)*20      
	READ #CTLC,62,DSP;OTDESC$;
	if rtrim$(otdesc$)=""
		let returnstatus=0
		let message$="Invalid Order Type Selected"
		goto endsavedata:
	endif
	! read data from control file
	!if p61$[110,110]<>"Y"
	!	let returnstatus=0
	!	let message$="Option Not Available"
	!	goto endsavedata:
	!endif	
	let filename$="3/SORDTYPE"+STR$(intco)
	Call FindF(FILENAME$,FOUND)
	if not(found)
		Let returnstatus=0
		let message$="Option Not Available"
		goto endsavedata:
	endif
	ch_ordt=findchannel()
	OPEN #CH_ORDT,FILENAME$
	let keyordt$=" ",keyordt$
	let keyordt$=r2 using "##"
	search #ch_ordt,2,1;keyordt$,rec_ordt,e
	if e>1 
		let returnstatus=0
		let message$="Error in Order Type File. SE "+str$(e)
		goto endsavedata:
	else
		if not (e)
			gosub readotcode:
			let OT1$=" ",OT1$
			LET OT1$[1,20]=OTDESC$[1,20]
		else
			let ot1=r2
			clear ot2
			let OT1$=" ",OT1$
			LET OT1$[1,20]=OTDESC$[1,20]
			let e=2\search #ch_ordt,1,0;keyordt$,rec_ordt,e
			if e<>0
				let returnstatus=0
				let message$="Error adding Order Type File. SE "+str$(e)
				goto endsavedata:
			endif
			gosub WriteOtCode: !
			let keyordt$=" ",keyordt$
			let keyordt$=ot1 using "##"
			search #ch_ordt,4,1;keyordt$,rec_ordt,e
			if e<>0
				let returnstatus=0
				let message$="Error adding key into Order Type File. SE "+str$(e)
				goto endsavedata:
			endif

		endif
	endif
	if p61$[110,110]="Y"
		call DxGet("ALLOWWHSECHG", tmp$) 
		IF ucase$(rtrim$(tmp$))="Y"
			let ot2[0]=1
		else
			let ot2[0]=0
		endif
	else
		let ot2[0]=0
	endif
	call DXGET("OrdPrtStat",tmp$)
	let tmp3=tmp$
	if rtrim$(tmp$)<>"0"
		if tmp3<2 or tmp3>4
			let returnstatus=0
			let message$="Invalid Order Print Status "
			goto endsavedata:
		endif
	endif
	let ot2[7]=tmp3
	call dxget("AutoPOMillItem",tmp$)
	IF ucase$(rtrim$(tmp$))="Y"
		let ot2[8]=1
	else
		let ot2[8]=0
	endif
	if p61$[120,120]="Y" or p61$[120,120]="E"
		call dxget("AutoBOWHTrans",tmp$)
		IF ucase$(rtrim$(tmp$))="Y"
			let ot2[9]=1
		else
			let ot2[9]=0
		endif
	Else
		ot2[9]=0
	endif
	if p61$[121,121]="Y"
		call dxget("AllowBOPOLink",tmp$)
		IF ucase$(rtrim$(tmp$))="Y"
			let ot2[10]=1
		else
			let ot2[10]=0
		endif
	Else
		ot2[10]=0
	endif
	call DXGET("BackOrdStat",tmp$)
	let tmp3=tmp$
	if ot1=36 let tmp3=4 ! evap order set to ready to invoice
	if tmp3<1 or tmp3>4
		let returnstatus=0
		let message$="Invalid BackOrder Status "
		goto endsavedata:
	endif
	let ot2[11]=tmp3
	IF r2=2 or r2=8 or r2=16 or r2=36 ! not valid on directs, consign stk, transfer and evap
		let ot2[12]=0
		let ot2[13]=0
		let ot2[14]=0
	else
		call dxget("UpdLoadCstBO",tmp$)
		IF ucase$(rtrim$(tmp$))="Y"
			let ot2[12]=1
		else
			let ot2[12]=0
		endif
		call dxget ("UpdLoadCstInv",tmp$)
		IF ucase$(rtrim$(tmp$))="Y"
			let ot2[13]=1
		else
			let ot2[13]=0
		endif
		call dxget ("UpdLoadCstPay",tmp$)
		IF ucase$(rtrim$(tmp$))="Y"
			let ot2[14]=1
		else
			let ot2[14]=0
		endif
   endif
	gosub WriteOTCode
	endsavedata:
Return

!----------------------------------------------------------------------------
! delete selected bank code data
!----------------------------------------------------------------------------
!DeleteData: !
!	LET message$="Delete Option Not Available"
!	returnstatus=0
!Return

!----------------------------------------------------------------------------
! initialize a new bank code record
!----------------------------------------------------------------------------
InitOTCode: !
	LET ot1$=" ",ot1$
	let ot1=r2
	for ctr=0 to 9\ let ot2[ctr]=0\ next ctr
	mat write #ch_ordt,rec_ordt,0;ot1;
	mat write #ch_ordt,rec_ordt,2;ot1$;
	mat write #ch_ordt,rec_ordt,32;ot2;
Return

!----------------------------------------------------------------------------
! read sales order type data
!----------------------------------------------------------------------------
ReadOtCode: !
mat read #ch_ordt,rec_ordt,0;ot1;
mat read #ch_ordt,rec_ordt,2;ot1$;
mat read #ch_ordt,rec_ordt,32;ot2;
Return

!----------------------------------------------------------------------------
! write sales order type data
!----------------------------------------------------------------------------
WriteOtCode: !
mat write #ch_ordt,rec_ordt,0;ot1;
mat write #ch_ordt,rec_ordt,2;ot1$;
mat write #ch_ordt,rec_ordt,32;ot2;
Return




OUTEND: Rem EXIT ROUTINE
! ReturnStatus=1
OutErr: ! bypass status=1
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end