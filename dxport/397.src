! >>> Program 397
!
! description  Purchasing Purchase report
!
! loadsave -w -n 100,10 -o prog/dxport/397.dl4 src/397.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT  5, 2004  12:04:55
Rem /w/papermaster/r2002//usr/acct/jcs/work/devl/po/po397.src (univ2) [jcs] {32623}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem PO397 PURCHASING REPORT
Rem AUTHOR DAVE DEVITO 07/18/91
Rem LAST UPDATE  roman 02/09/1993. check do-not-reorder flag cct #48631
!-------------  notes for CUSTOM H T Berry  -----------------------
! 07/10/95 rce cct 79363 display last 6 sales (customer,date,qty)
!						 L_6900 RTN, made changes for 10 digit inv#
! 05/22/01 jliu cct146783  add the tie and hi
! ------------------------------------------------------------------------------
! ------------ upgrade to rev10 for Jersey Paper task#26797/27157 --------
! 12/11/01 jliu cct152191 - print the whole number in qty fields
! 02/19/02 jliu cct152680 - remove the type code & replace it with first 2 lines
!                            of product notes and print the vendor part#
! 08/06/03  zyc cct170179 - problem with product notes
! 08/14/06  txc cct297190 - print alues under the labels
! 02/03/10  rjs cct238285 - print the 'DO NOT REORDER' flag setting print under
!                            where MIN/MAX prints. If a stocking product - print
!                            "DNR=STOCKED". If occasional print "DNR=OCCASIONAL"
!                            (sort prods to print stocking then occasional)
! 3/21/11 jliu task#2245 - add the default save option
! ------------------------- End - Jersey Paper ------------------
!
External Lib "ubsfunc.dl4"
Declare External Sub UTMonths
!
External Lib "libprod.lib"
Declare External Sub ProdGroup
!
External Lib "libcpi.lib"
Declare External Sub cpionhold
!
Declare Intrinsic Sub CheckDigits,DateToJulian,FindF,InpBuf,String,StringSearch

OPTION GOSUB NESTING 12  ! Default is 8
! - Option Default Dialect IRIS1
Com 1%,PFU1[20],CNVTU[2],UN[2],MONTH_[4]
Com MTH$[108]
Com 2%,C4[10]
Com 3%,PFU2[6],CNVTA,UWORK[10],BASEX,FIELD,RR[99]
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNS(H) = Int(Abs(H) * 100 + .99) * .01 * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 100000 + .5) * .00001)
Def FNW(X) = Sgn(X) * (Int(Abs(X) + .5))
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim SelVendor$[200],SelWhse$[100]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim 1%,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],M2[2],L3[3],S2[1],VNA[4],W1[2],W0[3]
Dim 1%,WH8[47],UN[2],BOYMONTH,ARMONTH,ARMONTH_ROLLING,IVSELECT,EUN[2]
Dim 1%,TRL1[10],TR1[13],DL1[6],h4[2],OWHT[1]
dim 1%,PL1[1]
Dim 2%,B[24],PFCO[3],C1[12],AO[3],SPC1[5],A2[6],PDL7[2],W2[9],DL2[4],PC_DATE
Dim 2%,X1[9],Q0[1],AUNIT,HA3[2],S1[2],DT3[1],JDATE[5],BDAYS[24]
Dim 2%,FIXPO,WH7[3],VENDSEL[1],PLC[2],X2[9]
Dim 2%,W7[13],L2[1],L6[5],L4[3],L9[1],H0[12],CUST$[30],CURDATE$[8],H5[16]
dim 2%,st_cons,TR_W7[12]
Dim 3%,A[33],A1[7],C5[5],C6[9],J1,M1[17],W3[24],W5[12],WH9[25],DM[24]
Dim 3%,L5[3],L7[12],S3[17],COST,V9[5],PLP3[4],AMOUNT,PACKQTY,PRODWT,PRODCUBE
Dim 3%,Z5[12],ADJW5[12],ADJZ5[12],W6[12],Z6[12],ADJW6[12],ADJZ6[12],C1$[32]
Dim 3%,NSUNITS,NSCOST,ALTCOST,REC,A3[6],OLM[6],UNF[6],rec_puda
dim 3%,A4[99],WHAMU_W3[9],TR_W3[24],U3
Dim 1%,cpiflag,2%,Custno,Custname$[30],CProd$[12]
Dim K16$[60],3%,TRL3[21],R[20],DL3[3],INVNO
Dim A3$[21],A2$[30],A$[156],P$[12],J$[50],J0$[15],J1$[50],J2$[20],P9$[50],KEY_$[10]
Dim M1$[200],M2$[72],A1$[32],VNA$[264],W1$[32],L$[60],L1$[20],S3$[33],PHN$[30]
Dim J5$[70],J7$[90],J9$[50],K1$[60],K2$[50],K3$[50],K4$[50],Z1$[50],K5$[50]
Dim TITLE$[40],TIME$[24],V2$[50],K19$[60],SUNIT$[4],TITLE2$[40],STAR$[132],TYPE$[30]
Dim LINE1$[130],LINE2$[130],T$[20],CNAME$[30],F1$[16],K9$[60],X$[20],X2$[12]
Dim KTR$[50],A5$[60],EXCTYPE$[16],K17$[50],M3$[60],U6$[20],F2$[30],FAX$[30]
Dim UNIT$[10],COST$[4],K16$[60],K12$[50],K13$[50],CALC$[60],P61$[256]
Dim S1$[30],K6$[50],CUNIT$[4],PUNIT$[4],K0$[50],SORT$[10],U5$[30],BUILD_$[100]
Dim STPROD$[12],LSTPROD$[12],SPACES$[30],LODATE$[6],BUYER$[3],SRTNUM$[2]
DIM TR5$[50],WHAMU$[14],AST$[1]
DIM 3%,whlv[2]
Dim 3%,WHMISC[6],PALQTY,PARM[5],WHMISC2[7],FUTUREQTY
DIM K8$[50],C$[142]
Dim puda$[650]
DIM prodm1$[30],prodnote1$[30],prodnote2$[30],K23$[50],p1$[6],RETVAL$[256]
dim z2$[50]
DIM PLOC$[18],plkey$[50]

!
Dim commaString$[300],XX$[40],F$[60],FILE$[60]
!
Dim tmp$[600],tmp1$[300],tmp2$[300],custom_customer$[30]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
!
DXSetup:
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Mat Read #1,3,0;CNAME$;
Mat Read #1,3,172;PC_DATE;
X2 = PC_DATE \ Gosub YMD2JUL \ X2 = 0
If X2 Let JDATE[0] = X2 Else Let JDATE[0] = Tim(6)
! - Window On 
CALC$ = "EOQ       INV CLASS SEASONAL  START UP  ARBITRARY MIN / MAX "
TIME$ = Msc$(3)
V9[2] = 20;STAR$ = "*",STAR$
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
Read #1,51,74;BOYMONTH;
XFNPPR = 0 \ If P9$[20,20] = "F" Let XFNPPR = 1
Read #1,3,164;CURDATE$;
Read #1,0,120;ARMONTH;
MAT  READ #1,11,0;BDAYS; 
LET BDAYS=BDAYS[ARMONTH] 
IF BDAYS<=0 LET BDAYS=21 
Read #1,3,184;FIXPO;
READ #1,60,16;ST_CONS;
MTH = CURDATE$[1,2]
If BOYMONTH <= ARMONTH Let ARMONTH_ROLLING = ARMONTH - BOYMONTH + 1 Else Let ARMONTH_ROLLING = 13 - (BOYMONTH - ARMONTH)
STPROD$ = " ",STPROD$ \ LSTPROD$ = "~",LSTPROD$ \ SPACES$ = " ",SPACES$ \ NONSTK = 99
!
MONTH_[1] = 1;MONTH_[2] = 0 \ rem ! - Call "UTMONTHS",MONTH_[],MTH$
Call UTMonths(e$,MONTH_[],MTH$,BOYMONTH) ! set up month headers
!
EXCTYPE$ = "Y TWS RCSLLBX FZ"
! - Window On 
For X = 2 To 24
  Read J1 \ If J1 = -1 Goto L_855
  Read #1,88,J1;F1$;
  Ropen #X,F1$
L_855: 
Next X
Data "2400","1792","1120","1568","2128","1888","1744","-1","1728","2528","1840","1808"
Data "-1","848","1360","864","1184","1136","2768","-1","-1","1696","208"

! NOTE: POSSIBLE FILE #21 BELOW!!!
!
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0)
! - If Err 0 Gosub ERR_ESCAPE
If J8 If J8 <> 49 Goto ERR_TRAP
if err 0 gosub ERR_TRAP
V9[4] = 54 \ If J8 Let V9[4] = 18
!
! - Gosub BLDSORTFLE
!
! dx add xport reporting code
!call dxsave(0,"tmp/397in.txt!")
! Call DxGet("u_custom_customer", custom_customer$)
mat read #1,115,60;custom_customer$;
custom_customer$ = rtrim$(custom_customer$)
! if rtrim$(custom_customer$)="HATHAWAY"
	let f1$="2/SPRODUDA"+STR$(intCO)
	open #21,f1$
! endif
! need product group open - call not closing channels causing error
F1$="2/PRODGRP"+Str$(intCO)
open #22,f1$
parm[5]=22

! NEED PRODUCT GROUP FILE OPEN
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"397",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
If J8 Let e$ = "This report is not available in XML format!" \ error 10000
!
!  dx add xport reporting code
call dxget("begbuyer",tmp$) \ SBUYER=tmp$ ! beg buyer
call dxget("endbuyer",tmp$) \ if rtrim$(tmp$)="" let EBUYER=999 else EBUYER=tmp$ ! end buyer
call dxget("begvendor",tmp$) \ SVENDOR=tmp$ ! beg vendor
call dxget("endvendor",tmp$) \ if rtrim$(tmp$)="" let EVENDOR=999999 else EVENDOR=tmp$ ! end vendor
call dxget("selvendor",tmp$) \ SelVendor$=rtrim$(tmp$) ! selected vendors
call dxget("sortby",tmp$) \ SORT$=rtrim$(tmp$) ! sort by (list) B=buyer  V=vendor
call dxget("begwhse",tmp$) \ if rtrim$(tmp$)="" let SWHSE=1 else SWHSE=tmp$ ! beg warehouse
call dxget("endwhse",tmp$) \ if rtrim$(tmp$)="" let EWHSE=99 else EWHSE=tmp$ ! end warehouse
call dxget("selwhse",tmp$) \ SelWhse$=rtrim$(tmp$) ! selected warehouses
call dxget("allprod",tmp$) \ ALLPROD=tmp$ ! print all products or line point
call dxget("begprod",STPROD$) \ STPROD$=rtrim$(STPROD$),Blank$ ! beg prod
call dxget("endprod",LSTPROD$) \ LSTPROD$=rtrim$(LSTPROD$),EndParam$! end prod
call dxget("incnonstk",tmp$) \ if rtrim$(tmp$)="" let NONSTK=0 else NONSTK=99 ! include non-stock items
call dxget("sortchar",SRTNUM$) ! # of chars to sort on or C=category
call dxget("um",tmp$) \ UnitType = tmp$
!Call dxget("u_custom_customer",custom_customer$)
call dxget("RWHXFR",tmp$) \ if rtrim$(tmp$)<>"Y" let rec_trans=0 else rec_trans=1
call dxget("WHAMU",tmp$) \ if rtrim$(tmp$)<>"Y" let Print_amu=0 else print_amu=1
!
! buyer
if SBUYER<0 or SBUYER>999 let e$="Invalid starting buyer, must be between 0 and 999!" \ error 10000
if EBUYER<SBUYER or EBUYER>999 let e$="Invalid ending buyer, must be between starting buyer and 999!" \ error 10000
!
! vendor
if SelVendor$="" ! beg / end vendor
  if SVENDOR<0 or SVENDOR>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
  if EVENDOR<SVENDOR or EVENDOR>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
  IVSELECT=0
else ! selected vendors
  !!gosub L_10000 ! get selected vendors
  SVENDOR=0 \ EVENDOR=999999
  IVSELECT=1
  !!-!Exclude
  gosub L_10000 !!Building File
  commaString$=SelVendor$
  parseChannel=14
  verifChannel=2
  keyLength=6
  alphanumeric=0
  errorFlag=0
  IVSELECT=1
  gosub parseCommaString
  if errorFlag=1 Let e$ = "Vendor ",tmp$," not Found" \ error 10000
  if errorFlag=2 Let e$ = "Error building vendors list" \ error 10000
  if errorFlag=3 Let IVSELECT=0
endif
!
! warehouse
if SelWhse$="" ! beg / end warehouse
  if SWHSE<0 or SWHSE>99 let e$="Invalid starting warehouse, must be between 0 and 99!" \ error 10000
  if EWHSE<SWHSE or EWHSE>99 let e$="Invalid ending warehouse, must be between starting warehouse and 99!" \ error 10000
else
  SWHSE = -1 \ EWHSE = -1
  gosub SelWarehouse
endif
!
! product
if LSTPROD$<STPROD$ let e$="Invalid ending product, must be >= starting product" \ error 10000
!
! number of characters to sort on
SRTNUM=SRTNUM$
if SRTNUM$<>"C"
  if SRTNUM=0 let SRTNUM=12
  if SRTNUM<1 or SRTNUM>12 let e$="Invalid number of characters to sort on, must be between 1 and 12!" \ error 10000
else
  SRTNUM=-99
endif
!
! u/m type
U6$ = " ",U6$
If UnitType  = 1 Let U6$ = "STOCKING"
If UnitType  = 2 Let U6$ = "SELLING"
If UnitType  = 3 Let U6$ = "PURCHASING"
If UnitType  = 4 Let U6$ = "COSTING"
If UnitType  = 5 Let U6$ = "PRICING"
If UnitType  = 6 Let U6$ = "PRODUCTION"
UnitType = UnitType + 7
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  
End If 
!
! - EMFLAG = 0;IVSELECT = 0
! - SBUYER = 0;EBUYER = 999;SVENDOR = 0;EVENDOR = 999999
! - SORT$ = "V";WHSE = 1;SRTNUM = 12;SRTNUM$ = "12";ALLPROD = 2;NONSTK = 0
! - UNIT = 10
! - EMB = 0;STPROD$ = " ",STPROD$;LSTPROD$ = "z",LSTPROD$
! - SWHSE = WHSE;EWHSE = WHSE
! - !
! - L_900: Rem "=================================== get ranges
! - TITLE$ = " ",TITLE$;TITLE$ = "PURCHASING REPORT"
! - ! - Gosub L_8000 ! screen display
! - If IVSELECT Close #14 \ Kill BUILD_$
! - EMFLAG = 0;IVSELECT = 0
! - Goto L_1500
! - RPTTYPE: Rem "
! - Print @39,1;'CL'; \ Gosub L_8200 \ Call String(1,Z1$)
! - If Z1$ = "" Let Z1$ = "N"
! - Print @39,1;'CL';Z1$[1,1]
! - K2$ = Z1$
! - If K2$ = "Y" Goto L_3000
! - If EMFLAG And K2$ = "N" Goto L_900
! - Return 
! - L_970: Print @47,3;'CL'; \ Gosub L_8200 \ K2$ = Z1$
! - X = K2$ \ SBUYER = X \ K2$ = X Using "###"
! - Print @47,4;'CL'; \ Gosub L_8200 \ K3$ = Z1$
! - X = K3$ \ EBUYER = X \ K3$ = X Using "###"
! - If X = 0 Let K3$ = "999" \ EBUYER = 999
! - Print @47,4;'CL';K3$[1,3];
! - If K3$ < K2$ Gosub L_1280 \ Goto L_970
! - Return 
! - VENDRANGE: Rem "
! - Print @64,6;'CL'; \ Gosub L_8200 \ K2$ = Z1$
! - If K2$ = "I" Gosub L_10000 \ Return 
! - X = K2$ \ SVENDOR = X \ K2$ = X Using "######"
! - Print @63,7;'CL'; \ Gosub L_8200 \ K3$ = Z1$
! - X = K3$ \ EVENDOR = X \ K3$ = X Using "######"
! - If X = 0 Let K3$ = "999999" \ EVENDOR = 999999
! - Print @63,7;'CL';K3$[1,6];
! - If K3$ < K2$ Gosub L_1280 \ Goto VENDRANGE
! - Return 
! - L_1100: Print @38,9;'CL'; \ Gosub L_8200 \ Call String(1,Z1$)
! - K3$ = Z1$
! - SORT$ = K3$
! - If SORT$[1,1] <> "B" And SORT$[1,1] <> "V" Goto L_1100
! - Return 
! - WHSESELECT: Rem "
! - L_1130: Print @41,11;'CL'; \ Input Len 16384 + 2;""Z1$
! - K9$ = " ",K9$
! - K9$[1,1] = "W"
! - CLRSORTLOOP: Rem "
! - Search #9,3,1;K9$,R0,E \ If E = 2 Goto CLRSDONE
! - If E Gosub ERR_SEARCH
! - Search #9,5,1;K9$,R0,E \ If E Gosub ERR_SEARCH
! - Goto CLRSORTLOOP
! - CLRSDONE: Rem "
! - If Z1$ = "I" ! "individual
! -   CT = 0
! - WHENTLOOP: Rem "loop til done
! -   Print Using "ENTER WHSE ### ";@8,12;CT + 1;" TO PRINT, <CR> WHEN DONE,   E: TO EXIT:  ";'CL';
! -   Input Len 16390;""Z1$
! -   If Z1$ = "" Print @0,12;'CL'; \ Goto WHENTDONE
! -   If Z1$ = "E" Goto L_9100
! -   WHSE = Z1$ \ If WHSE < 1 Or WHSE > 99 Goto WHENTLOOP
! -   K9$ = " ",K9$;K9$[1,1] = "W"
! -   K9$[2] = WHSE Using "###"
! -   Search #9,4,1;K9$,R0,E \ If E > 1 Gosub ERR_SEARCH
! -   If E = 1
! -     Print @0,22;'RB CE';"ALREADY ENTERED!"; \ Signal 3,20
! -     Print @0,22;'CE';
! -     Goto WHENTLOOP
! -   End If 
! -   CT = CT + 1
! -   Goto WHENTLOOP
! - WHENTDONE: Rem "
! -   SWHSE = -1;EWHSE = -1
! - Else 
! -   K3$ = Z1$ \ If K3$ = "E" Goto L_9100
! -   SWHSE = K3$
! -   If SWHSE < 1 Or SWHSE > 99 Goto L_1130
! - EDT_EWHSE: Rem "
! -   Print @45,11;'CL';"ENDING WHSE# "; \ Input ""Z1$
! -   EWHSE = Z1$ \ If EWHSE < 1 Or EWHSE > 99 Goto EDT_EWHSE
! -   If SWHSE > EWHSE
! -     Print @0,22;'RB CE';"INVALID WHSE RANGE!" \ Signal 3,20
! -     Print @0,22;'CE';
! -     Goto WHSESELECT
! -   End If 
! -   TITLE$ = " ",TITLE$;TITLE$ = "PURCHASING REPORT"
! -   TITLE$ = TITLE$ + " FOR WAREHOUSE " + Str$(SWHSE)
! -   TITLE$ = TITLE$ + "-" + Str$(EWHSE)
! - End If 
! - Return 
! - L_1170: Print @60,13;'CL'; \ Gosub L_8200
! - ALLPROD = Z1$ \ If Not(ALLPROD) Goto L_1170
! - If ALLPROD > 2 Goto L_1170
! - Return 
! - PRODRANGE: Rem "
! - Gosub L_8230
! - Return 
! - PNONSTK: Rem "
! - Print @32,16;'CL';
! - Gosub L_8200
! - Call String(1,Z1$)
! - If Z1$ = "" Let Z1$ = "N"
! - Print @32,16;'CL';Z1$[1,3];
! - If Z1$ <> "YES" And Z1$ <> "N" Goto PNONSTK
! - If Z1$[1,3] = "YES" Let NONSTK = 99 Else Let NONSTK = 0
! - Return 
! - L_1210: Rem "Sort
! - Print @67,17;'CL';
! - Print @67,17;" ";
! - Input ""Z1$ \ Call String(1,Z1$)
! - SRTNUM = Z1$ \ SRTNUM$ = Z1$
! - If Z1$ = "C" Let Z1$ = "G"
! - If Z1$ <> "G" If SRTNUM < 1 Or SRTNUM > 12 Goto L_1210
! - If Z1$ = "G" Let SRTNUM = -99
! - Return 
! - L_1280: Print @0,22;"ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! ";'RB CE';
! - Signal 3,50 \ Print @0,22;'CL' \ Return 
! - L_1300: Gosub L_6630
! - Print @28,18;'CL';
! - U6$ = " ",U6$
! - If UNIT - 7 = 1 Let U6$ = "STOCKING"
! - If UNIT - 7 = 2 Let U6$ = "SELLING"
! - If UNIT - 7 = 3 Let U6$ = "PURCHASING"
! - If UNIT - 7 = 4 Let U6$ = "COSTING"
! - If UNIT - 7 = 5 Let U6$ = "PRICING"
! - If UNIT - 7 = 6 Let U6$ = "PRODUCTION"
! - Print @28,18;U6$;
! - Return 
! - !
! - L_1500: Rem "FINAL QUESTION
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Print @0,22;'CE';"ENTER  #:field to edit  R: reselect all  P: print  E: exit ";
! - Input Len 16384 + 2;""Z1$ \ Call String(1,Z1$)
! - If Z1$ = "E" Goto OUTEND
! - If Z1$ = "R" Goto EDT_ALL
! - If Z1$ = "P" Goto STARTREPORT
! - FLD = Z1$ \ If FLD < 1 Or FLD > 10 Goto L_1500
! - If EMFLAG And FLD > 7 Goto L_1500
! - Gosub EDT_FLDS
! - Goto L_1500
! - EDT_ALL: Rem "change 'em all
! - For FLD = 2 To 10
! -   Gosub EDT_FLDS
! - Next FLD
! - Goto L_1500
! - EDT_FLDS: Rem "
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - If Not(EMFLAG)
! -   On FLD Gosub RPTTYPE,L_970,VENDRANGE,L_1100,L_1130,L_1170
! -   On FLD - 6 Gosub PRODRANGE,PNONSTK,L_1210,L_1300
! - Else 
! -   On FLD Gosub RPTTYPE,SINGLEVEND,L_3050,L_1130,L_1210,L_1300
! - End If 
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
!
STARTREPORT: Rem "
! - Window Off 
! - If UNIT = 0 Let UNIT = 3
! - If Not(EMFLAG) Let EMB = 0
Gosub L_8300
Gosub L_8650
! - EM1 = (1 - (EMB / 100))
! - If Not(EMFLAG) Let EM1 = 0
! - Print @0,22;'CL';"PRINTING  PLEASE WAIT . .  .   ."
SRTFLAG = 0;NUMREC = 0
OLDTYPE = -99 \ HWHSE = -1
V9[1] = 99
PFLAG = 0
BUYER$ = "ZZZ"
K19$ = " ",K19$ \ W2[3] = -1
!
L_2000: 
Search #9,3,1;K19$,R9,E 
If E = 2 Goto OUTEND
if custom_customer$="JPAPER"
	LET TYPE=K19$[51,51]
else
	LET TYPE=K19$[50,50] ! "was 47,47
endif
If K19$[1,1] = "W" Goto L_2000
NUMREC = NUMREC + 1
! - If Not(J8) And Not(Fra(NUMREC / 200)) Print @35,22;'CL';NUMREC;K19$[1,11]
If BUYER$ = "ZZZ" Let BUYER$ = K19$[1,3]
if custom_customer$="JPAPER"
	Let Whse=K19$[25,26] ! "current whse (nonstk & B/O)
ELSE
	Let Whse=K19$[24,25] ! "current whse (nonstk & B/O)
endif
VEND = K19$[4,9]
If W2[3] <> VEND Gosub L_2600
If K19$[10,10] = "~" Let W2[3] = VEND
If K19$[10,10] <> "~" Gosub L_6500 \ Gosub L_6360 \ Gosub L_31000
GOSUB calc_days_supply: ! days supply 
If P9$[32,32] = "Y"
  PENDCOST = W7[7];PENDDATE = W7[13]
  If W3[16] Let COST = W3[16] Else Let COST = B[10]
Else 
  COST = B[10]
  PENDCOST = PLC[0];PENDDATE = PLC[1]
End If 
If K19$[10,10] = "~" Let PDL7[2] = R9 \ Gosub L_6180 \ If L3[0] Let COST = L5[1] Else Goto L_2000
If K19$[10,10] <> "~" Gosub L_2500
Gosub L_2700
If K19$[10,10] <> "~"
  T9 = REQTY
Else 
  T9 = L7[2] - L7[0] \ REQTY_ORG = T9 \ REQTY_B = T9 \ REQTY_ORG_B = T9
End If 
Gosub L_7000
If SORT$ = "B"
  If BUYER$ <> K19$[1,3] Let V9[1] = 99;BUYER$ = K19$[1,3]
End If 
If W0[0] = 2 And (QTYBO <= 0 And W3[2] <= 0 and FUTUREQTY<=0) Goto L_2000
cpiflag=0
if p61$[111,111]="Y" and type<>2 ! do products only?
	let cprod$=A$[140,151]
	call cpionhold(e$,intco,cpiflag,CProd$,CustNo,CustName$)
Endif
Gosub L_2200
Gosub L_5800
Gosub L_5500
If TYPE <> 2 Gosub L_5000 Else Gosub L_5200
let futureqty=0
let free_qty=0
let transin_qty=0;req_qty=0
Goto L_2000
!
L_2200: Rem TOTALS
If EMB Let T9 = REQTY_ORG_B Else Let T9 = REQTY_B
If EMB Let T91 = REQTY_ORG Else Let T91 = REQTY
If TYPE <> 2
  TOTD = TOTD + FNR(T9 * UCOST)
Else 
  If L7[7] Let TOTD = TOTD + FNR(T9 * L7[7]) Else Let TOTD = TOTD + FNR(T9 * L5[1])
End If 
If TYPE <> 2 Let TOTUN = TOTUN + T91 Else Let TOTUN = TOTUN + L7[2] - L7[0]
If Not(A1[3]) Let A1[3] = 1
TOTCB = TOTCB + ((T9 * B[23]) / A1[3])
If Not(A[5]) Let A[5] = 1
TOTWT = TOTWT + ((T9 * A[6]) / A[5])
If TYPE <> 2 Goto L_2290
NSD = NSD + T9 * L5[1]
NSUN = NSUN + T9
NSCB = NSCB + (T9 * B[23])
NSWT = NSWT + (T9 * A[6])
L_2290: Rem EM BUY
If Not(EMB) Goto L_2390
T9 = REQTY_B;T91 = REQTY
If TYPE <> 2
  ETOTD = ETOTD + FNR(T9 * UCOST)
Else 
  If L7[7] Let ETOTD = ETOTD + FNR(T9 * L7[7]) Else Let ETOTD = ETOTD + FNR(T9 * L5[1])
End If 
If TYPE <> 2 Let ETOTUN = ETOTUN + T91 Else Let ETOTUN = ETOTUN + L7[2] - L7[0]
ETOTCB = ETOTCB + (T9 * (B[23] / A1[3]))
ETOTWT = ETOTWT + (T9 * (A[6] / A[5]))
If TYPE = 2 Let EM1 = EM2
L_2390: Return 
!
L_2500: Rem FIND QTY B/O
QTYBO = 0
K16$ = " ",K16$
K16$[1,12] = W1$[1,12]
K16$[13,14] = WHSE Using "##"
L_2530: Search #11,3,4;K16$,R16,E 
If E Return 
If K16$[1,12] <> W1$[1,12] Return 
X2 = K16$[13,14]
If X2 <> WHSE Return 
Mat Read #11,R16,82;PLP3;
MAT  READ #11,R16,114;P1$;
QTYBO = QTYBO + PLP3[4]
Goto L_2530
!
L_2600: Rem NEW VENDOR
TOTD = 0 \ TOTUN = 0
TOTCB = 0 \ TOTWT = 0
ETOTD = 0 \ ETOTUN = 0
ETOTCB = 0 \ ETOTWT = 0
OLDTYPE = TYPE
NSD = 0 \ NSUN = 0
NSCB = 0 \ NSWT = 0
V9[1] = 999
Return 
!
L_2700: Rem CALC REORDER QTY
EX_CODE = 0
REQTY = W3[11]
If TYPE = 2 Let REQTY = L7[2] - L7[0] \ Goto L_2750
On W7[12] Gosub L_12000,L_12220,L_12260,L_12570,L_12570,L_12350
L_2750: If REQTY < 0 Let REQTY = 0
If TYPE = 2 Gosub L_12410 \ Return 
If REQTY = 0
  If (W3[0] - W3[2] - QTYBO + W3[1] + TRANSIN_QTY) < 0 Let REQTY = Abs(W3[0] - W3[2] - QTYBO + W3[1] + TRANSIN_QTY)
End If 
Gosub L_12410
If EMB Let REQTY_ORG = REQTY;REQTY = REQTY + (REQTY * (EMB / 100))
If EMB Gosub L_12410
GOSUB L_13000
Return 
!
REQTY = 0
If Not(W3[13]) Let W3[13] = .35
If W3[9] > 0 If W3[13] If COST Let REQTY = FNR(Sqr((24 * FIXPO * W3[9]) / (W3[13] * COST)))
If REQTY > (W3[9] * 12) Let REQTY = (W3[9] * 12)
If REQTY < (W3[9] * .25) Let REQTY = (W3[9] * .25)
If REQTY < 0 Let REQTY = 0
If REQTY + W3[1] + W3[0] < W3[2] + QTYBO Let REQTY = W3[2] + QTYBO
Return 
!
L_2900: Rem LOOK FOR DEALS
DOLLOR = 0;PERCENT = 0;FREE_QTY = 0
CNVTA = REQTY;CNVTU[0] = PFU1[UnitType];CNVTU[1] = 0;CNVTU[2] = 1
Gosub L_20000
K17$ = " ",K17$
K17$[1,6] = W2[3] Using "######"
K17$[7,18] = W1$[1,12]
K17$[19,27] = 999999999 - (AMOUNT + 1) Using "#########"
L_2916: Search #17,3,1;K17$,R17,E
If E Goto L_2960
X2 = K17$[1,6] \ If X2 <> W2[3] Goto L_2960
If K17$[7,18] <> W1$[1,12] Goto L_2960
Mat Read #17,R17,0;DL2;
Mat Read #17,R17,20;DL1;
Mat Read #17,R17,34;DL3;
X2 = DL2[1] \ Gosub YMD2JUL \ X2 = 0
JDATE[1] = X2
X2 = DL2[4] \ Gosub YMD2JUL \ X2 = 0
JDATE[2] = X2
If JDATE[0] < JDATE[1] Or (DL2[4] And JDATE[0] > JDATE[2]) Goto L_2916
If DL1[1] = 1 Let PERCENT = DL3[0]
If DL1[1] = 2
  CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
  Gosub L_20000
  DOLLOR = AMOUNT
End If 
If DL1[1] = 3
  !CNVTA = DL3[2];CNVTU[0] = 0;CNVTU[1] = PFU1[UnitType];CNVTU[2] = 1
  LET CNVTA=DL3[2];CNVTU[0]=0;CNVTU[1]=dl1[4];CNVTU[2]=1
  Gosub L_20000
  WITH_QTY = AMOUNT
  !CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[UnitType];CNVTU[2] = 1
  LET CNVTA=reqty;CNVTU[0]=pfu1[unitType];CNVTU[1]=dl1[4];CNVTU[2]=1
  Gosub L_20000
  !If WITH_QTY Let FREE_QTY = Int(REQTY / WITH_QTY) * AMOUNT
  LET FREE_QTY=INT(amount/WITH_QTY)*dl3[0]  ! in base
  cnvta=free_qty;cnvtu[0]=0;cnvtu[1]=pfu1[unittype];cnvtu[2]=1
  gosub l_20000:
  free_qty=amount  !  converted to purch u/m
  End If 
L_2960: Return 
!
! - L_3000: Rem INPUT FOR EM BUYS
! - EMFLAG = 999;ALLPROD = 2
! - Gosub L_8100
! - Goto L_1500
! - SINGLEVEND: Rem "
! - Print @25,6;'CL'; \ Gosub L_8200 \ K2$ = Z1$
! - SVENDOR = K2$ \ EVENDOR = K2$
! - SBUYER = 0 \ EBUYER = 999
! - Return 
! - L_3050: Rem Emergency buy %
! - Print @28,8;'CL'; \ Gosub L_8200 \ K2$ = Z1$
! - EMB = 0
! - EMB = K2$
! - If EMB <= 0 Goto L_3050
! - Return 
!
L_4000: Rem TOTALS
If ALLPROD = 1 Goto L_4140
Print #0; Tab 13;"CUMULATIVE:";
Print #0; Using "CUBES= ###########"; Tab 34;TOTCB;
Print #0; Using "UNITS= ###########"; Tab 55;TOTUN;
Print #0; Using "AMOUNT= $##,###,###.##"; Tab 76;TOTD;
Print #0; Using "WEIGHT= ###########"; Tab 105;TOTWT;
Print #0;"\15\";
V9[1] = V9[1] + 1
If Not(EMFLAG) Goto L_4140
Print #0; Tab 3;"EMERGENCY CUMULATIVE: ";
Print #0; Using "CUBES= ###########"; Tab 34;ETOTCB;
Print #0; Using "UNITS= ###########"; Tab 55;ETOTUN;
Print #0; Using "AMOUNT= $##,###,###.##"; Tab 76;ETOTD;
Print #0; Using "WEIGHT= ###########"; Tab 105;ETOTWT;
Print #0;"\15\";
V9[1] = V9[1] + 1
L_4140: Return 
!
L_4500: Rem "==================================== previous 12 month sales
X2 = ARMONTH_ROLLING
For X1 = 1 To 13
  Print #0; Tab (7 + (X1 - 1) * 10);MTH$[X2 * 3 - 2,X2 * 3];
  X2 = X2 - 1 \ If X2 < 1 Let X2 = 12
Next X1
V9[1] = V9[1] + 1
Print #0;""
X2 = 0
For X1 = ARMONTH_ROLLING To 1 Step -1
  If Not(ADJW5[X1]) Let X2 = W5[X1] Else Let X2 = ADJW5[X1]
  if custom_customer$="JPAPER"
		PRINT #0; USING "---------#";FNR(X2);
	else
		PRINT #0; USING "------#.##";FNR(X2);
	endif
Next X1
For X1 = 12 To ARMONTH_ROLLING Step -1
  If Not(ADJW6[X1]) Let X2 = W6[X1] Else Let X2 = ADJW6[X1]
  if custom_customer$="JPAPER"
		PRINT #0; USING "---------#";FNR(X2);
	else
		PRINT #0; USING "------#.##";FNR(X2);
	endif
Next X1
Print #0;"" \ V9[1] = V9[1] + 1
Return 
!
L_5000: Rem PRINT LINE TYPE 1 AND 3 AND TYPE 0
if custom_customer$="JPAPER"
	GOSUB READ_PRODNOTES:
ENDIF
!Print #0; Tab 0;W1$[1,12]; Tab 13;A$[9,38];
PRINT #0; TAB 0;asT$;W1$[1,12]; TAB 14;A$[9,37];
Print #0; Using "LDTM= ###.##"; Tab 43;FNR(W2[0]);
if custom_customer$="JPAPER"
	PRINT #0; USING "LP=  ##########"; TAB 57;W3[5];
else
	PRINT #0; USING "LP=  #######.##"; TAB 57;W3[5];
endif
Print #0; Using "QA=  ---------#"; Tab 74;W3[0] - W3[2];
Print #0; Using "OQ= -#########"; Tab 91;REQTY;
Print #0; Tab 106;SUNIT$;
Print #0; Tab 111;W1$[1,12]; Tab 124;"MAT C ";A$[156,156]
IF XFNPPR IF SRTNUM=-99 PRINT #0; TAB 0;C1$[1,12];
IF NOT(XFNPPR) IF SRTNUM=-99 PRINT #0; TAB 0;"CTGY";B[11];
Print #0; Tab 13;A$[63,92];
Print #0; Using "CLASS= #####"; Tab 43;W7[6];
if custom_customer$="JPAPER"
	PRINT #0; USING "OP=  -#########"; TAB 57;W3[6];
else
	PRINT #0; USING "OP=  -######.##"; TAB 57;W3[6];
endif
Print #0; Using "SO=  ##########"; Tab 74;W3[2];
Print #0; Tab 91;"SRCE: ";
If W7[12] > 0 And W7[12] < 7 Print #0;CALC$[W7[12] * 10 - 9,W7[12] * 10];
If EX_CODE Print #0;" ";EXCTYPE$[(EX_CODE * 2 - 1),(EX_CODE * 2)] Else Print #0;" "

if custom_customer$="JPAPER"
	!Print #0; Tab 0;"WHSE ";K19$[24,25];
	!"print vendor item code
	!cct#152680                                  
	IF W1$[13,18]<>"      "                      
		PRINT #0; TAB 1;W1$[13,23];        
	ELSE                                         
		PRINT #0; TAB 1;A$[93,103];         
	ENDIF                                        
	!PRINT #0; USING "TYPE ##  "; TAB 13;TYPE;TYPE$;
else
	Print #0; Tab 0;"WHSE ";K19$[24,25];
endif
if custom_customer$="MORRISETTE"
	PRINT #0; USING "LEVEL 1=  ##########"; TAB 69;WHLV[0]
	PRINT #0; USING "LEVEL 2=  ##########"; TAB 69;WHLV[1]
	LET V9[1]=V9[1]+2 ! was +1
Endif
if custom_customer$<>"JPAPER"
	PRINT #0; USING "TYPE ##  "; TAB 13;TYPE;TYPE$;
endif
Print #0; Using "WGHT=  #####"; Tab 43;PRODWT;
Print #0; Using "SS=  ##########"; Tab 57;FNU(W3[7]);
Print #0; Using "B/O= ##########"; Tab 74;QTYBO;
Print #0; Using "PACK= ##########"; Tab 91;PACKQTY;
Print #0; Tab 110;"____________________"
if custom_customer$="JPAPER"
	!"print product notes line1 and bin location
	gosub get_prodloc:
	print #0; tab 1;"BIN: ";PLOC$[13,18];  
	print #0; tab 13;prodnote1$[1,30];
else
	IF W1$[13,18]<>"      "
		PRINT #0; TAB 13;"VEN # ";W1$[13,32];
	ELSE 
		PRINT #0; TAB 13;"VEN # ";A$[93,112];
	ENDIF 
endif
Print #0; Using "CUBE= ####.#"; Tab 43;PRODCUBE;
if custom_customer$="JPAPER"
	prINT #0; USING "AMU= -#########"; TAB 57;W3[9];
else
	PRINT #0; USING "AMU= -######.##"; TAB 57;W3[9];
endif
Print #0; Using "PO=  ##########"; Tab 74;W3[1];
Print #0; Tab 91;A2$[13,27];
If NET_COST = COST Print #0; Using "$######.##/"; Tab 110;COST;COST$
If NET_COST <> COST Print #0; Using "$######.##/"; Tab 110;NET_COST;COST$;" NET"
If WHMISC[4] = 0 And WHMISC[5] = 0 Goto L_5136
PALQTY = 0 \ PALQTY = WHMISC[4]
If WHMISC[5] Let PALQTY = PALQTY * WHMISC[5]
if custom_customer$<>"JPAPER"
	Print #0; Using "#######"; Tab 13;"PALLET= ";PALQTY;
	X$ = "CWT" \ If PFU1[8] > 0 Read #10,PFU1[8],10;X$[1,4];
	Print #0;" ";X$[1,4];
	PRINT #0;WHMISC[4];"X";WHMISC[5];
Endif
L_5136: !
if custom_customer$="JPAPER"
	print #0; tab 13;prodnote2$[1,30];
	PRINT #0; USING "MIN=########"; TAB 43;W3[3];
	PRINT #0; USING "MAX=  #########"; TAB 57;W3[4];
else
Print #0; Using "MIN=#####.##"; Tab 43;W3[3];
Print #0; Using "MAX=  ######.##"; Tab 57;W3[4];
Endif
Print #0; Using "TR=  #######.##"; Tab 74;TRANSIN_QTY;
!If FREE_QTY Print #0; Using "FREE #####.##"; Tab 91;FREE_QTY Else Print #0;" "
if custom_customer$="WENELSON"
  print #0;tab 91;puda$[351,390] ! uda with - purch notes
else
  PRINT #0; USING "DA= ----#"; TAB 91;daysupply;
  IF FREE_QTY PRINT #0; USING " FREE ########"; TAB 101;FREE_QTY ELSE  PRINT #0;" "
Endif
if custom_customer$="JPAPER"
	if w0[0]=0 print #0; tab 43;"DNR=STOCK";
	if w0[0]=1 print #0; tab 43;"DNR=YES";
	if w0[0]=2 print #0; tab 43;"DNR=OCCASIONAL";
Endif
Print #0; Using "--------.##";Tab 57;"RQ= ";req_qty;
Print #0; Using "FUT= #######.##"; Tab 74;FUTUREQTY ! 
if p61$[111,111]="Y"
	if cpiflag
		Print #0; Tab 13;"CPI HOLD: Customer ";
		Print #0; using "######";Custno;" ";Custname$;
	Endif
Endif
If PENDDATE Let X2 = PENDDATE \ Gosub L_7700 \ Print #0; Tab 76;"EFFECTIVE ";X$;
If PENDCOST Print #0; Using "PENDING COST  $######.##/"; Tab 96;PENDCOST;COST$;
!If PENDDATE Or PENDCOST or custom_customer$="JPAPER"
	Print #0;" " \ V9[1] = V9[1] + 1
!Endif ! always as always RQ= & FUT=
IF PRINT_AMU GOSUB L_15000: ! " print amu for each warehouse
if rtrim$(custom_customer$)="HATHAWAY"
	print #0;tab 13;puda$[201,250] ! uda field #5 - purch notes
	let v9[1]=v9[1]+1
endif
Print #0; Tab 2;"CURRENT"; Tab 121;"LAST YEAR"

V9[1] = V9[1] + 7
Gosub L_4500
Gosub L_4000
Gosub L_6090
if custom_customer$="HTBERRY"
	GOSUB L_6900 ! "last six sales print`
Endif
If COUNT Print #0;"" \ V9[1] = V9[1] + 1
GOSUB L_14000
STAR$ = "-",STAR$ \ Print #0; Tab 0;STAR$[1,130]
V9[1] = V9[1] + 1
Return 

GET_PRODLOC: REM "=======================read product location recor
Let PLKEY$=" ",PLKEY$ \ LET PLOC$=" ",PLOC$                     
LET PLKEY$[1,12]=A$[140,151]                                      
PRODLOC_LOOP: REM                                                   
LET PLOC$=" ",PLOC$                                                 
SEARCH #24,3,1;PLKEY$,r24,E                                     
IF E>2 RETURN! GOSUB ERR_SEARCH:                                            
IF NOT (E) AND PLKEY$[1,12]=A$[140,151]                             
	LET WHSENO=PLKEY$[13,14]                                          
	IF WHSENO<>whse GOTO PRODLOC_LOOP:                                 
	MAT  READ #24,r24,0;PLOC$;                                        
	MAT  READ #24,r24,18;PL1;  
	IF NOT (PL1[1]) GOTO PRODLOC_LOOP:
ENDIF                                                               
RETURN                                                              

!
L_5200: Rem PRINT NON STOCK LINE
Gosub L_5400
Print #0; Using "##"; Tab 2;L4[3]; Tab 7;L1$[1,12]; Tab 18;L$[1,30];
Print #0; Tab 50;S3$[1,20];
Print #0; Using "####### "; Tab 72;NSUNITS;SUNIT$;
Print #0; Using "###### ";H0[4];CUST$[1,18];
X2 = H0[9] \ Gosub L_7700
Print #0; Tab 110;X$;
Print #0; Using "#####.## "; Tab 119;NSCOST;COST$
if custom_customer$="JPAPER"
	Print #0; Tab 0;"WHSE ";K19$[25,26];
else
	Print #0; Tab 0;"WHSE ";K19$[24,25];
endif
Print #0; Tab 18;L$[31,60];
X2 = H0[10] \ Gosub L_7700
Print #0; Tab 50;"SHIP DATE: ";X$;
X2 = H5[1] \ Gosub L_7700
Print #0; Tab 75;"DUE DATE: ";X$
V9[1] = V9[1] + 2
Gosub L_4000
Return 
!
L_5400: Rem CONVERT L7,L5 FOR N/S (added 4-21-95)
Mat Read #10,UN[0],10;SUNIT$;
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = L7[2] - L7[0] \ Gosub L_20000
NSUNITS = AMOUNT
Mat Read #10,UN[2],10;COST$;
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2
If L7[7] Let CNVTA = L7[7] Else Let CNVTA = L5[1]
Gosub L_20000
NSCOST = AMOUNT
Return 
!
L_5500: Rem LINE HEADING FOR STOCK PROD
If TYPE = 0 Let TYPE$ = "ABOVE LINE POINT"
If TYPE = 1 Let TYPE$ = "BELOW ORDER POINT"
If W7[12] = 6 If TYPE = 1 Let TYPE$ = "BELOW OR AT MIN"
If W7[12] = 6 If TYPE = 0 Let TYPE$ = "ABOVE MIN"
If TYPE = 2 Let TYPE$ = "NONSTOCK ITEM"
If TYPE = 3 Let TYPE$ = "BELOW LINE POINT"
If TYPE = 4 Let TYPE$ = "FROZEN"
If TYPE <> 2 Goto L_5790
If TYPE = 2 Goto L_5690
Print #0; Tab 2;"ITEM CODE ";W1$[1,12]; Tab 25;"ITEM DESCRIPTION ";A$[9,38];" "; Tab 75;"VENDOR ITEM CODE ";A$[93,112]
Print #0; Tab 41;A$[63,92]
Print #0; Using "PERIOD AVERAGE: ## MO "; Tab 2;W2[2];" QTY SHOWN IN ";U5$;"OF ";SUNIT$;
Print #0; Using "UNIT COST ######.## / ";COST;COST$
V9[1] = V9[1] + 3
If TYPE <> 1 And TYPE <> 3 Goto L_5635
Print #0; Tab 10;"QTY"; Tab 20;"QTY"; Tab 31;"QTY"; Tab 42;"QTY"; Tab 53;"QTY"; Tab 62;"AVG MO ";
Print #0; Tab 82;"LINE"; Tab 90;"ORDER"; Tab 97;"SAFETY"; Tab 108;"ORDER"; Tab 116;"R  LD  CL"
Print #0; Tab 2;"WH"; Tab 8;"ON HAND"; Tab 19;"ON  PO"; Tab 30;"ON ORD";
Print #0; Tab 41;"AVAIL"; Tab 52;"BACKORD"; Tab 63;"DEMAND";
Print #0; Tab 82;"POINT"; Tab 90;"POINT"; Tab 97;"STOCK";
Print #0; Tab 109;"QTY"; Tab 116;"S  TM  ST"
V9[1] = V9[1] + 2
L_5635: If TYPE <> 4 Goto L_5690
Print #0; Tab 7;"QTY"; Tab 15;"QTY"; Tab 23;"QTY"; Tab 31;"QTY"; Tab 39;"QTY"; Tab 46;"AVG MO";
Print #0; Tab 82;"LINE"; Tab 90;"ORDER"; Tab 97;"DATE "
Print #0; Tab 2;"WH"; Tab 5;"ON HAND"; Tab 14;"ON  PO"; Tab 23;"ON ORD";
Print #0; Tab 30;"AVAIL"; Tab 37;"BACKORD"; Tab 46;"DEMAND FL MO";
Print #0; Tab 82;"POINT"; Tab 90;"POINT"; Tab 97;"DATE "; Tab 106;"REASON FOR FREEZE "
V9[1] = V9[1] + 2
L_5690:
If TYPE <> 2 Goto L_5790
Print #0; Tab 74;"QTY"; Tab 110;"CUST ORD"
Print #0; Tab 2;"WH"; Tab 7;"ITEM #"; Tab 18;"ITEM DESCRIPTION"; Tab 50;"VENDOR ITEM #";
Print #0; Tab 72;"ORDERED      CUST #   CUSTOMER NAME"; Tab 112;"DATE"; Tab 122;"UNIT COST"
V9[1] = V9[1] + 2
L_5790: Return 
!
L_5800: Rem "==================================== headings
If TYPE = 0 Let TYPE$ = "ABOVE LINE POINT"
If W7[12] = 6 If TYPE = 0 Let TYPE$ = "ABOVE MIN"
If TYPE = 1 Let TYPE$ = "BELOW ORDER POINT" \ If W7[12] = 6 If TYPE = 1 Let TYPE$ = "BELOW OR AT MIN"
If TYPE = 2 Let TYPE$ = "NONSTOCK ITEM"
If TYPE = 3 Let TYPE$ = "BELOW LINE POINT"
If TYPE = 4 Let TYPE$ = "FROZEN "
If EMFLAG Let TITLE2$ = EMB Using "EMERGENCY BUY OF ####.## % "
If V9[1] < V9[4] Return 
!If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J8) Print #0;"\14\";
V9[0] = V9[0] + 1
If Not(J8) Print #0;" "
Print #0;TIME$; Tab (64 - Len(TITLE$) / 2);TITLE$; Tab 120;"PAGE";V9[0]
If K19$[10,10] = "~" If HA3[1] Print #0; Tab 0;"BUYER";HA3[1]; \ Goto L_5860
Gosub L_6000 \ If SORT$ = "B" Print #0; Tab 0;"BUYER";W1[2];
L_5860: 
Print #0; Tab (64 - Len(CNAME$) / 2);CNAME$
If ALLPROD = 1 Print #0; Tab 55;"ALL PRODUCTS"
If ALLPROD = 2 Print #0; Tab 49;"PRODUCTS UNDER LINE POINT"
If EMFLAG Print #0; Tab (64 - Len(TITLE2$) / 2);TITLE2$
Print #0;
Gosub L_6330
Print #0; Tab 0;"VENDOR"; Tab 43;"PICK UP __________"; Tab 92;"P.O. NO. __________"
Print #0; Using "######"; Tab 0;W2[3]; Tab 11;VNA$[1,30]; Tab 43;"VNDR # __________"
If M2$[43,72] = SPACES$[1,30] Let M2$[43,72] = A5$[31,60]
If M3$[31,60] = SPACES$[1,30] Let M3$[31,60] = A5$[1,30]
if custom_customer$="MORRISETTE"
	LET M2$[43,72]=A5$[31,60] \ LET M3$[31,60]=A5$[1,30]	! "fax# & phone#
Endif
Print #0; Tab 11;VNA$[31,60]; Tab 88;"PHONE ";M3$[31,60]
Print #0; Tab 11;VNA$[91,105];", ";VNA$[106,107];"  ";VNA$[108,116];
Print #0; Tab 43;"______________________________"; Tab 90;"FAX ";M2$[43,72]
if custom_customer$="EDMAR" If M1$[131,134] > "    " Print #0; Tab 60;"VEND UDA2:";M1$[131,150];
Print #0;""
Print #0; Using "REVIEW CYCLE= ###.## DAYS"; Tab 11;REVC * 30;
Print #0; Using "VENDOR MINIMUM $###,###.## "; Tab 40;M1[0];
Print #0; Using "WEIGHT ####### "; Tab 74;M1[1];
Print #0; Using "UNITS  ####### "; Tab 91;M1[3];
Print #0; Using "CUBES ####### "; Tab 113;M1[2]
STAR$ = "*",STAR$ \ Print #0; Tab 0;STAR$[1,130]
Print #0;" "
V9[1] = 12 \ If EMFLAG Let V9[1] = 13
PFLAG = 99
Return 
!
L_6000: Rem
REVC = 0
For X = 0 To 17 \ M1[X] = 0 \ Next X
K9$ = W2[3] Using "######"
Search #4,2,1;K9$,R4,E
If E Goto L_6072
Mat Read #4,R4;M1$;
Mat Read #4,R4,200;M2;
Mat Read #4,R4,206;M1;
Mat Read #4,R4,314;M2$;
Mat Read #4,R4,398;M3$;
If P61$[63,63] = "Y" ! "Vendor Whse
  X = 2
  Call "POVWMIN.dl4",W2[3],WHSE,M1[],X$,X,e$,rstr$,intCO
  X = 1
  FAX$ = M2$[43,72]
  Call "POVWMIN.dl4",W2[3],WHSE,M1[],FAX$,X,e$,rstr$,intCO
  If FAX$[1,1] <> "" And FAX$[1,5] <> "     " Let M2$[43,72] = FAX$
  X = 0;PHN$ = M3$[31,60]
  Call "POVWHSE.dl4",W2[3],WHSE,X2[],X2[],U5$,PHN$,U5$,X,e$,rstr$,intCO
  If PHN$[1,1] <> "" And PHN$[1,5] <> "     " Let M3$[31,60] = PHN$[1,30]
End If 
If SRTFLAG Goto L_6080
L_6072: 
If M1[1] Let WTFLG = 1 Else Let WTFLG = 0
If M1[3] Let UNFLG = 1 Else Let UNFLG = 0
If M1[2] Let CBFLG = 1 Else Let CBFLG = 0
For X = 8 To 11
  If REVC < M1[X] Let REVC = M1[X]
Next X
L_6080: Return
!
L_6090: Rem altvend
COUNT = 0
If P61$[51,51] = "N" Return 
K5$ = " ",K5$
K5$[1,12] = A$[140,151]
L_6120: Search #5,3,1;K5$,R6,E 
If E Return 
If K5$[1,12] <> A$[140,151] Return 
Mat Read #5,R6,0;A1$; 
Mat Read #5,R6,32;A2;
If A2[6] Let AUNIT = A2[6] Else Let AUNIT = PFU1[11]
CNVTU[0] = 0;CNVTU[1] = AUNIT;CNVTU[2] = 2;CNVTA = A2[2] \ Gosub L_20000 \ ALTCOST = AMOUNT
V2$[1,6] = A2[0] Using "######" \ Gosub L_6334
If A2[1] Let LODATE$ = A2[1] Using "&&&&&&" Else Let LODATE$ = " ",LODATE$
V9[1] = V9[1] + 1 \ If V9[1] >= V9[4] Gosub L_5800
Print #0; Using "######## "; Tab 0;A2[0];"[";VNA$[1,28];"]  ";ALTCOST Using "$$$,$$$,$$#.##/";COST$;
Print #0;"  ";LODATE$[3,4];"/";LODATE$[5,6];"/";LODATE$[1,2]

Goto L_6120
Return 
!
L_6180: Rem BEGIN SCAN OF NON STOCK SALES ORDERS
Mat Read #7,PDL7[2];L2
Mat Read #7,PDL7[2],8;L3
Mat Read #7,PDL7[2],16;L4
Mat Read #7,PDL7[2],32;L5
Mat Read #7,PDL7[2],56;L6
Mat Read #7,PDL7[2],80;L$
Mat Read #7,PDL7[2],140;L1$
Mat Read #7,PDL7[2],160;L9
Mat Read #7,PDL7[2],168;L7
Mat Read #7,PDL7[2],260;S3
Mat Read #7,PDL7[2],250;UN
Mat Read #7,PDL7[2],256;S2
Mat Read #7,PDL7[2],370;S3$
Mat Read #7,PDL7[2],404;OLM
Mat Read #7,PDL7[2],446;EUN
Mat Read #7,PDL7[2],452;UNF;
W0[0] = 0;WHMISC[4] = 0;WHMISC[5] = 0
If S2[0] = 3 Return 
If Not(L3[0]) Return 
KEY_$ = " ",KEY_$
KEY_$[1,6] = L2[1] Using "######"
KEY_$[7,9] = L3[2] Using "###"
Search #6,2,1;KEY_$,REC,E
If E Goto L_6315
Mat Read #6,REC,0;S1;
If S1[0] = L2[1] Mat Read #6,REC,120;HA3;
L_6315: 
Gosub L_7200
Gosub L_7350
Gosub L_30000
Return 
!
L_6330: Rem VENDOR
V2$ = W2[3] Using "######"
VNA$ = " ",VNA$;A3[1] = 0
L_6334: Search #2,2,1;V2$,V2,E 
If E
  VNA$ = " *** VENDOR NOT ON FILE *** "
  A5$ = " ",A5$;M2$ = " ",M2$
  Return 
End If 
Mat Read #2,V2;VNA$
Mat Read #2,V2,498;A3;
Mat Read #2,V2,576;A5$;
Return 
!
L_6360: Rem READ PRODUCT
K4$ = " ",K4$
K4$[1,12] = W1$[1,12]
PRDNF = 0
if custom_customer$="HTBERRY" LET PROD_REC=0	! "cct79363 custom for htberry
Search #3,2,1;K4$,R4,E 
If E Let PRDNF = 99 \ Return 
Mat Read #3,R4,0;A$;
Mat Read #3,R4,156;B;
Mat Read #3,R4,256;A;
Mat Read #3,R4,460;A1;
Mat Read #3,R4,512;PFU1;
Mat Read #3,R4,554;PFU2;
MAT  READ #3,R4,678;U3;
Mat Read #3,R4,894;C4;
Mat Read #3,R4,944;A2$;
Mat Read #3,R4,974;PFCO;
Mat Read #3,R4,856;C1$;
Mat Read #3,R4,1002;PLC;
!! GET UDA
! if rtrim$(custom_customer$)="HATHAWAY"
	let puda$=" ",puda$
	search #21,2,1;k4$,rec_puda,e
	if not(e)
		mat read #21,rec_puda,12;puda$;
	endif
! endif
PROD_REC = R4
asT$=" "
if custom_customer$="MORRISETTE" if u3 let asT$="*"
If Not(W2[3]) Let W2[3] = B[24]
If Not(W3[18]) Let W3[18] = C4[4]
If Not(SRTFLAG) Gosub L_7500
Return 

read_prodnotes:   !"cct152680
let prodnote1$=" ",prodnote1$
let prodnote2$=" ",prodnote2$
let K23$=" ",K23$;ctr=0
LET K23$[1,12]=A$[140,151]
Next_Prodnotes: SEARCH #23,3,1;K23$,R23,E    
IF E GOTO end_prodnotes:                       
IF K23$[1,12]<>A$[140,151] GOTO end_prodnotes:  
if prodnote2$[1,2]<>"  " if prodnote2$[1,1]<>"" goto end_prodnotes:
MAT  READ #23,R23,12;prodM1$; 
ctr=ctr+1
if ctr=1 and (prodnote1$[1,2]="  " or prodnote1$[1,1]="") let prodnote1$=prodm1$
if ctr=2 and (prodnote2$[1,2]="  " or prodnote2$[1,1]="") let prodnote2$=prodm1$
Goto Next_Prodnotes:
end_prodnotes: !
return
!
L_6500: Rem READ WAREHOUSE
Mat Read #8,R9,0;W1$;
Mat Read #8,R9,32;W1;
Mat Read #8,R9,38;W2;
Mat Read #8,R9,78;W3;
Mat Read #8,R9,228;Z5;
Mat Read #8,R9,306;Z6;
Mat Read #8,R9,420;W0;
Mat Read #8,R9,428;WH7;
Mat Read #8,R9,444;WH8;
Mat Read #8,R9,540;ADJZ5;
Mat Read #8,R9,618;ADJZ6;
Mat Read #8,R9,696;W7;
MAT  READ #8,R9,780;WHLV;
Mat Read #8,R9,800;WHMISC;
Mat Read #8,R9,846;WHMISC2;
Gosub L_11000
Gosub L_11100
Return 
!
! - L_6630: Rem SELECT UNIT
! - Window Open @5,14; Size 70,8; Using " SELECT DEFAULT UNIT "
! - Print Tab 5;'CL';
! - Print Tab 5;" 1: STOCKING  "; Tab 45;" 4: COSTING"
! - Print Tab 5;'CL';
! - Print Tab 5;" 2: SELLING  "; Tab 45;" 5: PRICING"
! - Print Tab 5;'CL';
! - Print Tab 5;" 3: PURCHASING "; Tab 45;" 6: PRODUCTION        "
! - L_6700: Rem PRINT
! - Print Tab 10;"Enter unit to show on report ";
! - Input ""UNIT$
! - UNIT = UNIT$
! - If UNIT < 1 Goto L_6700
! - If UNIT > 6 Goto L_6700
! - U5$ = " ",U5$
! - If UNIT = 1 Let U5$ = "IN STOCKING UNITS "
! - If UNIT = 2 Let U5$ = "IN SELLING UNITS "
! - If UNIT = 3 Let U5$ = "IN PURCHASING UNITS "
! - If UNIT = 4 Let U5$ = "IN COSTING UNITS "
! - If UNIT = 5 Let U5$ = "IN PRICING UNITS "
! - If UNIT = 6 Let U5$ = "IN PRODUCTION UNITS "
! - UNIT = UNIT + 7
! - Window Close 
! - If EMFLAG Gosub L_8100 Else Gosub L_8000
! - Return 
!
L_6870: Rem UNIT CONVERSION RETURNS AMOUNT
Gosub L_20000
Return 
! custom routine for HTBERRY
L_6900: ! last six sales print
LET X=0 \ LET Y=0 \ LET X6=0
IF V9[1]+3>V9[4] LET V9[1]=V9[4]+10 \ GOTO L_6910:
PRINT #0;" " \ PRINT #0; TAB 55;"LAST SIX SALES ";
LET X$="HUNDRED WTCWT " \ IF PFU1[8]>0 READ #10,PFU1[8];X$;
print #0;using "#### "; tab 102;whmisc[4];x$[11,14];"/";"TIER";
print #0;using " ## ";whmisc[5];"TIERS/SKID" 
PRINT #0;" "
LET V9[1]=V9[1]+3
L_6910: !
LET K5$=" ",K5$
LET K5$=PROD_REC USING "######9999999999"
L_6916: SEARCH #18,6,2;K5$,R18,E
LET X2=K5$[1,6]
IF E RETURN 
IF PROD_REC<>X2 RETURN 
MAT  READ #18,R18;L2;
MAT  READ #18,R18,16;L4;
MAT  READ #18,R18,168;L7; \ MAT  READ #18,R18,250;UN;
MAT  READ #18,R18,518;INVNO;
LET CNVTU[0]=0;CNVTU[1]=UN[0];CNVTU[2]=1;CNVTA=L7[4] \ GOSUB L_20000: \ LET L7[4]=AMOUNT
IF L2[0]<>11 GOTO L_6916:
LET Y=Y+1
IF Y>6 RETURN 
LET K8$=" ",K8$
LET K8$=INVNO USING "30##########"  ! "was l2[1]-inv# now 10 digits
SEARCH #19,2,1;K8$,R19,E
IF E GOTO L_6916:
!
MAT  READ #19,R19,0;H0;
MAT  READ #19,R19,78;H4;
LET K6$=H0[4] USING "######"
SEARCH #13,2,1;K6$,R6,E
IF E ! GOSUB Err_Search:
	c$=" ",c$;C$[31]="CUSTOMER NOT FOUND"
Else
MAT  READ #13,R6;C$;
Endif
LET X2=H0[9] \ GOSUB L_7700:
LET V9[1]=V9[1]+1
IF V9[1]>V9[4] GOSUB L_5800: \ LET J9=999
IF J9>0 PRINT #0;" " \ PRINT #0; TAB 35;" LAST SIX SALES FOR ";A$[140,151] \ PRINT #0;
IF J9>0 LET V9[1]=V9[1]+3 \ LET J9=0
LET L3[2]=VAL(K5$[13,15])
PRINT #0; USING "CUST ###### ";H0[4]; TAB 25;C$[31,60];
PRINT #0; USING "INV ###### ";H0[6];
PRINT #0; USING "LINE ###";L3[2];
! PRINT #0; USING "###"; TAB 75;"WH ";H4[2];
PRINT #0; TAB 76;X$;
PRINT #0; USING "###"; TAB 88;"WH ";H4[2];
PRINT #0; USING "QTY SHIPPED ######## "; TAB 97;L7[4]
GOTO L_6916:

!
L_7000: Rem UNIT CONVERT
If TYPE = 2 Let PFU1[11] = UN[0] \ PFU1[UnitType] = UN[0] \ Goto L_7068
CNVTU[0] = 0
CNVTU[1] = PFU1[UnitType]
CNVTU[2] = 1
if qtybo<>0
	CNVTA = QTYBO
	Gosub L_6870
	QTYBO = AMOUNT
endif
if TRANSIN_QTY<>0
	CNVTA = TRANSIN_QTY \ Gosub L_6870 \ TRANSIN_QTY = AMOUNT
endif
if req_qty<>0
	CNVTA = req_qty \ Gosub L_6870 \ req_qty = AMOUNT
Endif
IF FUTUREQTY<>0 ! Convert unit of measure
	cnvta=FUTUREQTY
	gosub L_6870
	FUTUREQTY=amount  !  converted to purch u/m
ENDIF
For U = 0 To 9
  IF U=9 LET CNVTU[2]=5
  if w3[u]<>0
	CNVTA = W3[U]
	Gosub L_6870
	W3[U] = AMOUNT
  endif
Next U
FOR U=O TO 1
	if WHLV[U]<>0
		LET CNVTA=WHLV[U] \ LET CNVTU[0]=0 \ LET CNVTU[1]=PFU1[UNITtype] \ LET CNVTU[2]=1
		GOSUB L_6870: \ LET WHLV[U]=AMOUNT
	endif
NEXT U
If EMB<>0
	if REQTY_ORG<>0
		Let CNVTA = REQTY_ORG \ REQTY_ORG_B = CNVTA \ Gosub L_6870 \ REQTY_ORG = AMOUNT
	endif
endif
CNVTA = REQTY;REQTY_B = CNVTA
Gosub L_6870
REQTY = AMOUNT
Gosub L_2900
CNVTU[0] = 0 \ CNVTU[1] = PFU1[UnitType] \ CNVTU[2] = 1
For U = 0 To 12
  CNVTA = W5[U] \ Gosub L_6870 \ W5[U] = AMOUNT
  CNVTA = ADJW5[U] \ Gosub L_6870 \ ADJW5[U] = AMOUNT
  CNVTA = W6[U] \ Gosub L_6870 \ W6[U] = AMOUNT
  CNVTA = ADJW6[U] \ Gosub L_6870 \ ADJW6[U] = AMOUNT
Next U
CNVTU[1] = PFU1[11]
CNVTU[2] = 2
CNVTA = COST
UCOST = FNP(CNVTA)
Gosub L_6870
COST = AMOUNT
NET_COST = COST - (COST * (PERCENT / 100)) - DOLLOR
If PENDCOST <>0 
	CNVTA = PENDCOST \ Gosub L_6870
	PENDCOST = AMOUNT
endif
L_7068: 
If PFU1[11] = -1 Let COST$ = "CWT " \ Goto L_7072
If PFU1[11] = -3 Let COST$ = "LB  " \ Goto L_7072
If PFU1[11] Mat Read #10,PFU1[11],10;COST$; Else Let COST$ = "ERR"
L_7072: If PFU1[UnitType] = -1 Let SUNIT$ = "CWT " \ Goto L_7076
If PFU1[UnitType] = -3 Let SUNIT$ = "LB  " \ Goto L_7076
If PFU1[UnitType] Mat Read #10,PFU1[UnitType],10;SUNIT$; Else Let SUNIT$ = "ERR"
L_7076: 
CNVTU[0] = PFU1[11]
CNVTU[1] = 0
CNVTU[2] = 2
CNVTA = NET_COST
Gosub L_6870
UCOST = AMOUNT
Return 
!
L_7200: Rem FIND ORDER HEADER
For X = 0 To 12 \ H0[X] = 0 \ Next X
K12$ = " ",K12$
For ST = 1 To 7
  K12$[1,2] = ST Using "##"
  K12$[3,8] = L2[1] Using "######"
  Search #12,2,1;K12$,R12,E 
  If E Goto L_7290
  Mat Read #12,R12,0;H0;
  Mat Read #12,R12,104;H5;
L_7290: Next ST
Return 
!
L_7350: Rem FIND CUSTOMER
K13$ = " ",K13$
K13$ = H0[4] Using "######"
Search #13,2,1;K13$,R13,E 
If E Let CUST$ = "*** NOT ON FILE ***" \ Goto L_7410
Mat Read #13,R13,30;CUST$;
L_7410: Return 
!
L_7500: Rem FIND # BASE UNITS
For CT = 0 To 7
  If PFU1[10] = PFU1[CT] Goto L_7550
Next CT
PACKQTY = 0 \ Goto L_7570
L_7550: 
If CT > 0 Let PACKQTY = PFU2[CT - 1]
If CT = 0 Let PACKQTY = 1
L_7570: 
If Not(A[5]) Let A[5] = 1
PRODWT = (A[6] * PACKQTY) / A[5]
If Not(A1[3]) Let A1[3] = 1
PRODCUBE = (B[23] * PACKQTY) / A1[3]
Return 
!
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
! - L_8000: Rem "========================================== screen
! - Print 'CS'
! - Print @0,0;"-PO397-";@33,0;"PURCHASING REPORT"
! - Print @0,1;"  1> IS THIS AN EMERGENCY BUY (Y/<CR>) N";
! - Print @0,3;"  2> ENTER STARTING BUYER  CODE, <CR>: first  ";SBUYER
! - Print @0,4;"     ENTER   ENDING BUYER  CODE, <CR>: last   ";EBUYER
! - Print @0,6;"  3> ENTER STARTING VEND#, <CR>: first,  I: individual vendors ";SVENDOR;
! - Print @0,7;"     ENTER   ENDING VEND#, <CR>: last  ";@62,7;EVENDOR
! - Print @0,9;"  4> SORT ON  B: BUYER OR  V: VENDOR  ";SORT$;
! - Print @0,11;"  5> ENTER STARTING WHSE #  I: Individual ";WHSE
! - Print @0,13;"  6> PRINT  1: ALL PRODUCTS  OR  2: PRODS UNDER LINE POINT ";ALLPROD
! - Print @0,14;"  7> ENTER STARTING PRODUCT  <CR>: first   ";STPROD$
! - Print @0,15;"     ENTER   ENDING PRODUCT, <CR>: last    ";LSTPROD$
! - Print @0,16;"  8> INCLUDE NONSTOCKS (YES/N)  ";"N"
! - Print @0,17;"  9> ENTER THE # OF CHARACTERS TO SORT ON (1 - 12) ";
! - If FNPPR
! -   Print "OR  G: Grade ";
! - Else 
! -   Print "OR  C: Category ";
! - End If 
! - Print @67,17;'CL';
! - Print @67,17;SRTNUM$
! - Print @0,18;" 10> UNIT OF MEASURE TO USE  ";"PURCHASING"
! - Return
!
! - L_8100: Rem SCREEN FOR EMERGENCY BUYS
! - Print 'CS'
! - Print @0,0;"-PO397-";@33,0;"PURCHASING REPORT"
! - Print @0,1;"  1> IS THIS AN EMERGENCY BUY (Y/<CR>)  ";" Y";
! - Print @0,6;"  2> ENTER VENDOR  CODE   ";SVENDOR
! - Print @0,8;"  3> ENTER EMERGENCY BUY % ";EMB
! - Print @0,11;"  4> ENTER STARTING WHSE#  I: Individual ";WHSE
! - Print @0,17;"  5> ENTER THE # OF CHARACTERS TO SORT ON (1 - 12) ";
! - If FNPPR
! -   Print "OR  G: Grade ";
! - Else 
! -   Print "OR  C: Category ";
! - End If 
! - Print @67,17;'CL';
! - Print @67,17;SRTNUM$
! - Print @0,18;"  6> UNIT OF MEASURE TO USE   ";"PURCHASING"
! - Return 
!
! - L_8200: Rem "=========================================== data input routine
! - Input ""Z1$
! - Return 
! - L_8230: Rem PRODUCT RANGE INPUT
! - Print @41,14;'CL';
! - Input ""STPROD$
! - If STPROD$ = "" Let STPROD$ = " ",STPROD$
! - Print @41,15;'CL';
! - Input ""LSTPROD$
! - If LSTPROD$ = "" Let LSTPROD$ = "z",LSTPROD$
! - Print @41,15;'CL';LSTPROD$
! - If Len(STPROD$) < 12 Let STPROD$[Len(STPROD$) + 1,12] = SPACES$[Len(STPROD$) + 1,12]
! - If Len(LSTPROD$) < 12 Let LSTPROD$[Len(LSTPROD$) + 1,12] = SPACES$[Len(LSTPROD$) + 1,12]
! - Return 
!
L_8300: Rem "============================================== SORT
K9$ = " ",K9$
L_8320: 
Search #9,3,1;K9$,R9,E 
If E Goto L_8370
If K9$[1,1] = "W" Goto L_8320
Search #9,5,1;K9$,R9,E
If E Let e$ = "syserrorfile 397 sortfile mode (m)=5 keyno (k)=1 r=",R9," e=",e," keyval (k$)=",K9$ \ error 10000
Goto L_8320
!
L_8370: 
! - Print @0,22;'CL';"SORTING PLEASE WAIT . .  .   ."
SRTFLAG = 99;NUMREC = 0
K2$ = " ",K2$
K2$[1,12] = STPROD$[1,12]
K2$[13,14] = "  "
L_8390:
Search #8,3,1;K2$,R9,E 
If E return
CT = 0
NUMREC = NUMREC + 1
! - If Not(Fra(NUMREC / 200)) Print @35,22;'CL';NUMREC;K2$
If K2$[1,12] > LSTPROD$[1,12] return
Mat Read #8,R9,420;W0;
X1 = K2$[13,14]
If SWHSE > 0 ! "did a range
  If X1 < SWHSE Goto L_8390
  If X1 > EWHSE Let K2$[13,14] = "99" \ Goto L_8390
  WHSE = X1
Else ! "check if on file
  K19$ = " ",K19$
  K19$[1,1] = "W"
  K19$[2] = X1 Using "###"
  Search #9,2,1;K19$,R0,E 
  If E = 1 Goto L_8390
End If 
If W0[0] = 1 Goto L_8390 ! DO NOT REORDER
!IF W0[0] =2 ! order to order
!	Mat Read #8,R9,78;W3;
!	IF NOT(W3[2]) GOTO L_8390 ! if nothing on order bypass
!endif
Gosub L_6500
!------------------------------------------
PARM[0] =-1 ! send as a whse PO 0-(po type+1 )
PARM[1] = WHMISC2[0]
PARM[5]=22 ! PRODGROUP CHANNEL
! CALL "MXPRODGRP5",PARM[]
Call ProdGroup(e$,intco,Parm[])
if custom_customer$<>"SWP" ! !disable-task#9932 11/2011-wmb
	IF PARM[2] = 0 OR PARM[3] = 0 GOTO L_8390:
endif
!! IF PARM[2] = 0 OR PARM[3] = 0 GOTO L_8390: 
!------------------------------------------
If W1$[1,12] = "Z ZZZZZZZZZZ" Goto L_8390
Gosub L_2500
TYPE = 0
T9 = (W3[0] - W3[2] - QTYBO) + W3[1]
If T9 < W3[6] Let TYPE = 1
If Not(TYPE) If T9 < W3[5] Let TYPE = 3
If W7[12] = 6 If T9 <= W3[3] Let TYPE = 1
If W7[12] = 6 If T9 > W3[3] Or (W3[3] = 0 And T9 = 0) Let TYPE = 0
If W1[1] Let TYPE = 4
If ALLPROD = 2 If Not(TYPE) Goto L_8390
Gosub L_6360
If B[24] If Not(W2[3]) Let W2[3] = B[24]
If Not(W2[3]) Let W1[2] = 0
If W2[3] Gosub L_6000
If PRDNF Goto L_8390
If SBUYER > W1[2] Or EBUYER < W1[2] Goto L_8390
!If IVSELECT Let VENDSEL[1] = W2[3] \ Gosub L_10300 \ Goto L_8390
If IVSELECT Search #14,2,1;W2[3] using "######",R[11],E \ If E Goto L_8390
If Not(IVSELECT) And (SVENDOR > W2[3] Or EVENDOR < W2[3]) Goto L_8390
L_8560: !
K9$ = " ",K9$
K9$[1,3] = W1[2] Using "###"
If SORT$ = "V" Let K9$[1,3] = "   "
K9$[4,9] = W2[3] Using "######"
If SRTNUM <> -99 Let K9$[10,10] = A$[156,156]

if custom_customer$ = "HATHAWAY" let K9$[10,10]=" " ! no material code in sort
if custom_customer$="JPAPER"
	let k9$[11,11]=W0[0] using "#"
	IF SRTNUM<>-99 LET K9$[12,(11+SRTNUM)]=W1$[1,SRTNUM]
	IF FNPPR IF SRTNUM=(-99) LET K9$[12,23]=C1$[1,12]
	IF NOT (FNPPR) IF SRTNUM=(-99)
		LET K9$[11,12]=B[11] USING "##";K9$[13,24]=W1$[1,12]
	ENDIF 
	Let K9$[25,26]=W1[0] Using "##"
	IF NOT (FNPPR) GOTO L_8605: ! "no basis wgt, size
	LET K9$[27,34]=A[4] USING "#####.##" ! "was 23,30
	LET K9$[35,42]=C4[0] USING "#####.##" ! "was 31,38
	LET K9$[43,50]=C4[1] USING "#####.##" ! "was 39,46
	goto L_8605:
endif
If SRTNUM <> -99 Let K9$[11,(10 + SRTNUM)] = W1$[1,SRTNUM]
IF XFNPPR IF SRTNUM=(-99) LET K9$[11,22]=C1$[1,12]
! - If Not(FNPPR(IF_)) Let SRTNUM = (-99)
! K9$[10,11] = B[11] Using "##"
! K9$[12,23] = W1$[1,12]
! - End If 
IF NOT(XFNPPR) IF SRTNUM=(-99)
	LET K9$[10,11]=B[11] USING "##";K9$[12,23]=W1$[1,12]
ENDIF
K9$[24,25] = W1[0] Using "##"
IF NOT(XFNPPR) GOTO L_8605:
K9$[26,33] = A[4] Using "#####.##"
K9$[34,41] = C4[0] Using "#####.##"
K9$[42,49] = C4[1] Using "#####.##"
L_8605: !
if custom_customer$="JPAPER"
	LET K9$[51,51]=TYPE USING "#" ! "was 47,47
	LET K9$[52,54]=CT USING "###" ! "was 48,50
ELSE
	LET K9$[50,50]=TYPE USING "#" ! "was 47,47
	LET K9$[51,53]=CT USING "###" ! "was 48,50
endif
R91 = R9
!
Search #9,4,1;K9$,R91,E
If E = 1
  CT = CT + 1
  If CT > 999 Goto L_8630
  Goto L_8560
End If 
L_8630: 
Goto L_8390 ! next record
!
L_8650: Rem SORT NON STOCK ITEMS NOT ORDERED
If Not(NONSTK) Return 
K6$ = " ",K6$
L_8670:  ! read thru sproddesc file
Search #6,3,1;K6$,R6,E 	 !
If E Return 
NUMREC = NUMREC + 1
! - If Not(Fra(NUMREC / 200)) Print @35,22;'CL';NUMREC;K2$
Mat Read #6,R6,0;PDL7;
If PDL7[2] <= 0 Goto L_8670  ! sales order line record > 0
Mat Read #7,PDL7[2],0;L2;
If PDL7[0] <> L2[1] Goto L_8670	   ! verify order # are same
Gosub L_6180	 ! read sales order line
If L2[0] = 12 Goto L_8670   ! type 12 is credit memo by pass
If Not(L3[0]) Goto L_8670   ! 0 = product record bypass - nonstock only
If S2[0] = 3 Goto L_8670    ! line type - note
If L4[2] Goto L_8670	    ! has purchase order # bypass
if  H5[7]=2 goto l_8670	    ! bypass if direct
NUMREC = NUMREC + 1
!If Not(Fra(NUMREC / 200)) Print @35,22;'CL';NUMREC;K6$
If SWHSE > 0 ! "range
  If L4[3] < SWHSE Goto L_8670	   ! 
  If L4[3] > EWHSE Goto L_8670
Else 
  K19$ = " ",K19$;K19$[1,1] = "W"
  K19$[2] = L4[3] Using "###"
  Search #9,2,1;K19$,R0,E 
  If E = 1 Goto L_8670
End If 
If SBUYER > HA3[1] Or EBUYER < HA3[1] Goto L_8670
!If IVSELECT Let VENDSEL[1] = S3[14] \ Gosub L_10300 \ Goto L_8670
!
If IVSELECT Search #14,2,1;S3[14] using "######",R[11],E \ If E Goto L_8670
!
If Not(IVSELECT) And (SVENDOR > S3[14] Or EVENDOR < S3[14]) Goto L_8670
R9 = PDL7[2]
K9$=" ",K9$
K9$[1,3] = HA3[1] Using "###"
If SORT$ = "V" Let K9$[1,3] = "   "
K9$[4,9] = S3[14] Using "######"
TYPE = 2
K9$[10,10] = "~"
K9$[11,22] = L1$[1,12]
K9$[24,25] = L4[3] Using "##"
K9$[50,50] = TYPE Using "#"
Search #9,4,1;K9$,R9,E 
Goto L_8670
Return 
!
! Get selected warehouses
SelWarehouse:
!!-!K9$[1,1] = "W"
CLRSORTLOOP: Rem "
Search #9,3,1;K9$,R0,E 
If E=0
  Search #9,5,1;K9$,R0,E 
!  If E Let e$ = "syserrorfile 397 sortfile mode (m)=5 keyno (k)=1 r=",R0," e=",e," keyval (k$)=",K9$ \ error 10000
  Goto CLRSORTLOOP
endif
X1=1 \ EOF=0
!
GetNextWarehouse:
if EOF return ! end of warehouses
call StringSearch(SelWhse$,X1,",",X2)
if X2=-1 let X2=len(SelWhse$)+1 \ EOF=1
WHSE=SelWhse$[X1,X2-1] \ X1=X2+1
K9$ = "W",WHSE Using "###"
Search #9,4,1;K9$,R0,E 
If E goto GetNextWarehouse 
goto GetNextWarehouse
return
!
L_10000: Rem INDIVIDUAL VENDOR SELECTS
F$ = Spc(6) Using "6/SORTWORK&&&&!"
FILE$ = "[1:1] ",F$
L_15470: 
E = 0 \ If Err 0 Let E = Spc(8)
Build #14,FILE$
If E = 40 Close #14 \ Goto L_15470
If Err 0 Gosub ERR_TRAP
RR[99] = 50 \ Search #14,0,1;F$,RR[99],E \ If E let e$="Can't build ",FILE$,"!" \ error 10000
RR[99] = 1 \ Search #14,0,0;F$,RR[99],E \ If E let e$="Can't build ",FILE$,"!" \ error 10000
RR[99] = 0 \ Search #14,1,0;F$,RR[99],E \ If E let e$="Can't build ",FILE$,"!" \ error 10000
return
!
!!-!IVSELECT = 1
!!-!CT = 0
!!-!! - Print @0,7;'CL';
!!-!BUILD_$ = " ",BUILD_$ \ BUILD_$ = "[1:2] 6/TEMPWRK"
!!-!BUILD_$ = BUILD_$,userid$
!!-!try Close #14 else rem
!!-!try Kill BUILD_$ else rem
!!-!Build #14,BUILD_$
!!-!
!!-!R[99] = 50 \ Search #98,0,1;F$,R[99],E !!\ If E Gosub ERR_SEARCH
!!-!R[99] = 1 \ Search #98,0,0;F$,R[99],E !!\ If E Gosub ERR_SEARCH
!!-!R[99] = 0 \ Search #98,1,0;F$,R[99],E !!\ If E Gosub ERR_SEARCH
!
!BUILD_$ = " ",BUILD_$ \BUILD_$ = "6/TEMPWRK"
!BUILD_$ = BUILD_$,userid$
!
! - Print 'CL';
! - Print Using "ENTER VENDOR ### ";@8,7;CT + 1;"TO PRINT, <CR> WHEN DONE,   E: TO EXIT:  ";'CL';
! - Input Len 16390;""Z1$
! - If Z1$ = "" Print @0,7;'CL'; \ Return 
! - If Z1$ = "E" Goto L_9100
! - F = 0 \ If Err 0 Let F = Spc(8)
! - Call CheckDigits(Z1$)
! - If Err 0 Gosub ERR_ESCAPE
! - If F Print 'RB'; \ Goto L_10060
!
!!-!stop !!6
!!-!X1=1 \ EOF=0
!!-!GetNextVendor:
!!-!call StringSearch(SelVendor$,X1,",",X2)
!!-!if X2=-1 let X2=len(SelVendor$)+1 \ EOF=1
!!-!VENDSEL[0]=SelVendor$[X1,X2-1] \ X1=X2+1
!!-!if VENDSEL[0]<0 or VENDSEL[0]>9999 let e$="Invalid vendor '",Z1$,"' entered!" \ error 10000
!!-!V2$ = VENDSEL[0] Using "######"
!!-!Search #2,2,1;V2$,V2,E 
!!-!If E let e$="Invalid vendor '",V2$,"' entered!" \ error 10000
!!-!For CT1 = 0 To Chf(14) - 1
!!-!  Read #14,CT1,0;VENDSEL[1];
!!-!  If VENDSEL[0] = VENDSEL[1] Goto GetNextVendor
!!-!Next CT1
!!-!Write #14,CT,0;VENDSEL[0];
!!-!CT = CT + 1
!!-!if EOF=0 Goto GetNextVendor
! - return 
!
L_10300: Rem CHECK FOR VALID VENDOR
For CT = 0 To Chf(14) - 1
  Read #14,CT,0;VENDSEL[0];
  If VENDSEL[0] = VENDSEL[1] Return 1
Next CT
Return 
!
L_11000: Rem "========================== adjust this year buckets for fiscal year
X7 = BOYMONTH
For I = 0 To 12
  If I Let W5[I] = Z5[X7] Else Let W5[0] = Z5[0]
  If I Let ADJW5[I] = ADJZ5[X7] Else Let ADJW5[0] = ADJZ5[0]
  If I If X7 = ARMONTH Let I = 13
  If I Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
Return 
!
L_11100: Rem "========================== adjust last year buckets for fiscal year
X7 = BOYMONTH;X8 = 0
For I = 0 To 12
  If Not(I) Let W6[0] = Z6[0] \ ADJW6[0] = ADJZ6[0] \ Goto L_11170
  If Not(X8) Let W6[I] = Z6[X7] Else Let W6[I] = Z5[X7]
  If Not(X8) Let ADJW6[I] = ADJZ6[X7] Else Let ADJW6[I] = ADJZ5[X7]
L_11170: If I If X7 = ARMONTH Let X8 = 1
  If I Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
Return 
!
L_12000: 
REQTY = 0
If W3[9] > 0 If (W3[13] * COST) <> 0 Let REQTY = FNR(Sqr((24 * FIXPO * W3[9]) / (W3[13] * COST))) \ W3[10] = REQTY
If REQTY > (W3[9] * 12) Let REQTY = W3[9] * 12;EX_CODE = 1
If REQTY < (W3[9] * .25) Let REQTY = W3[9] * .25;EX_CODE = 2
If REQTY < (W2[1] * W3[9])
  REQTY = (W2[1] * W3[9]) \ EX_CODE = 4
End If 
If (C4[9]) <> 0 And (REQTY > (C4[9] * W3[9]))
  REQTY = (C4[9] * W3[9]) \ EX_CODE = 5
End If 
If W7[6] > 0 And W7[6] <= 3
  If ((W3[0] - W3[2] - QTYBO) + (W3[1] + TRANSIN_QTY)) < W3[6]
    REQTY = REQTY + W3[6] - ((W3[0] - W3[2] - QTYBO) + (W3[1] + TRANSIN_QTY))
    If (W3[5] - W3[6]) > 0 Let REQTY = REQTY + ((W3[5] - W3[6]) / 2)
    EX_CODE = 7
  End If 
End If 
Gosub L_12410
Return 
!
L_12220: Rem "========================== order qty using INV CLASS (#2)
If W7[6] = 13 Let REQTY = 0 \ Goto L_12250
REQTY = W3[9] * W7[6]
L_12250: Return 
!
L_12260: Rem "========================== order qty using SEASONAL (#3)
Goto L_12000
X7 = ARMONTH + 1;X2 = 1;REQTY = 0;EX_CODE = 3
L_12290: If X7 > 12 Let X7 = 1
If X2 > 3 Goto L_12340
If ADJZ5[X7] Let REQTY = REQTY + ADJZ5[X7] Else Let REQTY = REQTY + Z5[X7]
X7 = X7 + 1;X2 = X2 + 1
Goto L_12290
L_12340: REQTY = REQTY + (REQTY * WH7[1] / 100)
Return 
!
L_12350: Rem "========================== order qty using MIN/MAX (#6)
If W3[3] < (W3[0] + W3[1] - W3[2] - QTYBO) + TRANSIN_QTY Let REQTY = 0 \ Goto L_12390
REQTY = W3[4] - ((W3[0] + W3[1] - W3[2] - QTYBO) + TRANSIN_QTY)
L_12390: If REQTY < 0 Let REQTY = 0
L_12400: Return 
!
L_12410: Rem ROUND UP TO QTY IN Vendor Order/PURCHASING UM
For UNT = 1 To 7
  If PFU1[20] And PFU1[UNT] = PFU1[20] Goto L_12460
Next UNT
L_12420: Rem "Only to Purchasing
For UNT = 1 To 7
  If PFU1[UNT] = PFU1[10] Goto L_12460
Next UNT
FACTOR = 1 \ Goto L_12480
L_12460: If PFU1[UNT] <= 0 Let FACTOR = 1 \ Goto L_12480
FACTOR = PFU2[UNT - 1] \ If FACTOR <= 0 Let FACTOR = 1
L_12480: If Fra(REQTY / FACTOR) ! " >=.5 ALWAYS ROUND UP A Fraction
  REQTY = Int(1 + (REQTY / FACTOR)) * FACTOR
End If 
Return 
!
L_12570: Rem NO CALC
Return 
L_12600: ! ORDER ONLY IF A SALES ORDER IS ON THE SYSTEM. W0[0]=2
LET REQTY=(W3[2]+QTYBO)-(W3[0]+W3[1])
IF REQTY<0 LET REQTY=0
RETURN 

L_13000: ! BEGIN SCAN
IF NOT(REC_TRANS) RETURN 
LET BASE_REQTY=REQTY
FOR X2=0 TO 99 \ LET A4[X2]=0 \ NEXT X2
LET WH_TR=0
!
READ #20,WHSE-1,128;CUR_REGION;
LET TR5$=" ",TR5$;TR5$[1,12]=W1$[1,12]
L_13060: SEARCH #8,3,1;TR5$,TR5,E
IF E GOTO L_13360:
IF TR5$[1,12]<>W1$[1,12] GOTO L_13360:
LET X2=TR5$[13,14] \ IF X2=WHSE GOTO L_13060:
MAT  READ #8,TR5,78;TR_W3;
MAT  READ #8,TR5,696;TR_W7;
READ #20,X2-1,128;REGION;
IF REGION IF CUR_REGION IF CUR_REGION<>REGION GOTO L_13060:
IF X2>=ST_CONS GOTO L_13360:
LET SURPLUS=0
IF TR_W7[12]=6
	LET SURPLUS=(TR_W3[0]-TR_W3[2])-TR_W3[4]
ELSE 
	LET SURPLUS=(TR_W3[0]-TR_W3[2])-(TR_W3[5]+TR_W3[11])
ENDIF 
IF SURPLUS<0 LET SURPLUS=0
IF NOT(SURPLUS) GOTO L_13060:
LET CNVTU[0]=0
LET CNVTU[1]=PFU1[10]
LET CNVTU[2]=1
LET CNVTA=SURPLUS \ GOSUB L_20000:
LET DSP_A4=AMOUNT
IF NOT(FRA(DSP_A4)) GOTO L_13310:
IF FRA(DSP_A4) LET DSP_A4=DSP_A4-FRA(DSP_A4)
LET CNVTU[0]=PFU1[10];CNVTU[1]=0;CNVTA=DSP_A4 \ GOSUB L_20000: \ LET SURPLUS=AMOUNT
L_13310: IF SURPLUS>BASE_REQTY LET SURPLUS=BASE_REQTY
LET BASE_REQTY=BASE_REQTY-SURPLUS
LET A4[X2]=SURPLUS \ LET WH_TR=99
IF NOT(BASE_REQTY) GOTO L_13360:
GOTO L_13060:
L_13360: LET REQTY=BASE_REQTY
RETURN 

L_14000: ! PRINT REC TRANSFER AMOUNTS BASED ON SURPLUSE QTY
IF NOT(REC_TRANS) RETURN 
IF NOT(WH_TR) RETURN 
LET XFER_F9=0
LET TOT_RQTY=REQTY
FOR CT=1 TO 99
	IF A4[CT]=0 GOTO L_14200:
	LET CNVTU[0]=0
	LET CNVTU[1]=PFU1[UNITtype]
	LET CNVTU[2]=1
	LET CNVTA=A4[CT] \ GOSUB L_20000:
	LET DSP_A4=AMOUNT
	PRINT #0;"*****> RECOMMENDED TRANSFER FROM "; \ LET XFER_F9=99
	PRINT #0; USING "WAREHOUSE  ### "; TAB 28;CT;
	PRINT #0; USING "-------#.##"; TAB 52;DSP_A4
	LET TOT_RQTY=TOT_RQTY+DSP_A4
	LET V9[1]=V9[1]+1
L_14200: NEXT CT
PRINT #0; TAB 24;"TOTAL REORDER QTY =  ";
PRINT #0; USING "-------#.##"; TAB 52;TOT_RQTY
LET V9[1]=V9[1]+1
RETURN 

L_15000: ! print amu for each warehouse
LET CTAMU=0;X=13
LET WHAMU$=" ",WHAMU$;WHAMU$[1,12]=W1$[1,12]
L_15020: SEARCH #8,3,1;WHAMU$,RWHAMU,E
IF E GOTO L_15100:
IF WHAMU$[1,12]<>W1$[1,12] GOTO L_15100:
X0 = whamu$[13,14] ! let's print amu's on what's selected
If SWHSE > 0 ! "did a range
  If X0 < SWHSE Goto L_15020
  If X0 > EWHSE Let whamu$[13,14] = "99" \ Goto L_15020
  ! WHSE = X1
Else ! "check if on file
  K19$ = " ",K19$
  K19$[1,1] = "W"
  K19$[2] = X0 Using "###"
  Search #9,2,1;K19$,R0,E 
  If E = 1 Goto L_15020
End If 
MAT  READ #8,RWHAMU,78;WHAMU_W3;
IF WHAMU_W3[9]=0 GOTO L_15060:
LET CNVTU[0]=0;CNVTU[1]=PFU1[UNITtype];CNVTU[2]=5;CNVTA=WHAMU_W3[9]
GOSUB L_6870: \ LET WHAMU_W3[9]=AMOUNT
L_15060: IF CTAMU>=5 PRINT #0;"" \ LET V9[1]=V9[1]+1;X=13;CTAMU=0
IF V9[1]>=V9[4] GOSUB L_5800:
LET CTAMU=CTAMU+1
PRINT #0; TAB X;"WHSE ";WHAMU$[13,14];" AMU=";
PRINT #0; USING "-----#.##  ";WHAMU_W3[9];
GOTO L_15020:
L_15100: IF CTAMU PRINT #0;"" \ LET V9[1]=V9[1]+1
RETURN 
!
! - BLDSORTFLE: Rem "build expanded sort File
! - If Err 0 Rem
! - Close #9
! - If Err 0 Gosub ERR_ESCAPE
! - Read #1,88,912;F1$;
! - If F1$ = "" Let F1$ = "6/SORTWORK*"
! - L_1020: If F1$[Len(F1$)] = " " Let F1$ = F1$[1,Len(F1$) - 1] \ Goto L_1020
! - P2 = 0 \ Let F2$ = F1$ To "*" : P2
! - If Not(P2) Let F1$ = "6/SORTWORK*";P2 = 11
! - Print @0,21;"PREPARING SORT FILE, PLEASE WAIT . . . ";'CE';
! - KSIZE = F1$[P2 + 1]
! - KSIZE = 27
! - F1$[P2] = Str$(Spc(6))
! - Call FindF(F1$,H1)
! - If H1 Kill F1$
! - F2$ = "[1:256] ",F1$
! - Build #9,F2$
! - Search #9,0,1;K1$,KSIZE,E \ If E Gosub ERR_SEARCH
! - L1 = 1000 \ Search #9,0,0;K1$,L1,E \ If E Gosub ERR_SEARCH
! - Return 
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: 
! - goto L_20120 ! - was If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
! - If CNVTU[2] = 3 Goto L_20160
! - L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ rem ! - Gosub ERR_SEARCH
! - If X1 <> Spc(6) Goto L_20080
! - If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
! - Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Gosub L_25000
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ rem  ! - Gosub ERR_SEARCH
L_20160: Return 
!
L_25000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 3%
BUNIT = 0
If CNVTU[2] <> 5 Goto L_25180
BUNIT = 1
CNVTU[2] = 1
Goto L_25190
L_25180: BUNIT = 0
L_25190: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_25250,L_25350,L_25350,L_25640
e$="Error converting units!" \ error 10000
L_25250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_25330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_25330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_25330
  Next X1[2]
  FLAG = 1 \ Goto L_25650
L_25330: Next X1[1]
FLAG = 0 \ Goto L_25650
L_25350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_25530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_25460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_25450
  Next CUNIT
  FLAG = 0 \ Goto L_25650
L_25450: If CUNIT = 0 Goto L_25530
L_25460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_25510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 ! " Catch Weight Item
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_25530: Next X1[1]
If CNVTU[2] <> 1 Goto L_25580
If BUNIT Goto L_25580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_25580: If CNVTU[2] <> 2 Goto L_25630
If Not(CNVTU[1]) Goto L_25630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_25630: FLAG = 0 \ Goto L_25650
L_25640: Rem
L_25650: Rem RETURN FROM MODES 0-2
Return 
!
L_30000: Rem ===== set n/s units for conversions
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1];PFU1[13] = UN[0]
PFU1[16] = EUN[0];PFU1[17] = EUN[0];PFU1[18] = UN[0]
PFU1[19] = UN[0]
PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
!
L_31000: Rem ADD UP TRANSFER QTY AND FUTURE AMOUNTS
TRANSIN_QTY = 0
FUTUREQTY=0
KTR$ = " ",KTR$;KTR$[1,6] = PROD_REC Using "######"
L_31030: Search #7,3,2;KTR$,LINE_REC,E
If E Goto L_31360
X2 = KTR$[1,6]
If PROD_REC <> X2 Goto L_31360
Mat Read #7,LINE_REC;L2;
Mat Read #7,LINE_REC,32;L5;
Mat Read #7,LINE_REC,56;L6;
Mat Read #7,LINE_REC,80;L$;
Mat Read #7,LINE_REC,140;L1$;
Mat Read #7,LINE_REC,160;L9;
Mat Read #7,LINE_REC,168;L7;
Mat Read #7,LINE_REC,260;S3;
Mat Read #7,LINE_REC,250;UN;
Mat Read #7,LINE_REC,256;S2;
Mat Read #7,LINE_REC,370;S3$;
Mat Read #7,LINE_REC,404;OLM;
Mat Read #7,LINE_REC,446;EUN;
Mat Read #7,LINE_REC,452;UNF;
MAT READ #7,LINE_REC,16;L4;
For X = 0 To 12
  H0[X] = 0;H5[X] = 0
Next X
For ST = 1 To 7
  K12$[1,2] = ST Using "##"
  K12$[3,8] = L2[1] Using "######"
  Search #12,2,1;K12$,R12,E 
  If E Goto L_31310
  Mat Read #12,R12,0;H0;
  Mat Read #12,R12,104;H5;
  mat read #12,R12,486;OWHT;
  IF L4[3]<1 OR L4[3]>99
	MAT READ #12,R12,78;H4;
	LET L4[3]=H4[2]
  ENDIF
  Goto L_31320
L_31310: 
Next ST
Goto L_31030

L_31320: ! ADD AMOUNTS FOR TRANSFER AND FOR FUTURE
if h5[7]=16
	if owht[0]=0 ! whse from? if not same?
		if whse=H5[11] let req_qty=req_qty+(L7[2] - L7[0]) ! to
		if whse=L4[3] let req_qty=req_qty-(L7[2]-L7[0]) ! from
	Endif
	if owht[0]=1 and whse=h5[11] ! only approved and for to
		TRANSIN_QTY = TRANSIN_QTY + (L7[2] - L7[0])
	Endif

Endif
If L4[3] <> WHSE Goto L_31030
IF H5[7]=5 ! FUTURE ORDER
	LET FUTUREQTY=FUTUREQTY+(L7[2]-L7[0])
	GOTO L_31030
endif

Goto L_31030
L_31360: Rem GET MORE TRANSFER INFO
!COMP = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
COMP = intCO
K16$ = " ",K16$ \ K16$[1,12] = W1$[1,12]
L_31380: 
Search #16,3,2;K16$,R[16],E
If E = 2 Goto L_31510
If K16$[1,12] <> W1$[1,12] Goto L_31510
Mat Read #16,R[16],0;TRL1;
If TRL1[0] = 2 Goto L_31380
If TRL1[7] <> 0 Goto L_31380
Mat Read #16,R[16],22;TRL3;
Mat Read #15,TRL3[1],0;TR1;
If COMP <> TR1[4] Goto L_31380
If W1 <> TR1[5] Goto L_31380
If TR1[1] <> 2 Goto L_31380
TRANSIN_QTY = TRANSIN_QTY + (TRL3[3])
Goto L_31380
L_31510: Return 

calc_days_supply: ! days supply 
LET DEMNDDAY=W3[9]/BDAYS[0]  
IF DEMNDDAY<0 LET DEMNDDAY=0 
LET QTYTMP=W3[0]-W3[2]-QTYBO+W3[1]+TRANSIN_QTY
  LET DAYSUPPLY=0
  !! IF MODE=5 ! "calc days supply on hand over line/min point
    IF DEMNDDAY ! "only if they got demand
      IF W7[12]<>6 ! Use LinePoint
        LET DAYSUPPLY=INT(((QTYTMP-W3[5])/DEMNDDAY)+.99)
        IF W3[5]=0 AND W3[6]=0 LET DAYSUPPLY=9999
      ENDIF 
      IF W7[12]=6 ! "Use Min/Max
        LET DAYSUPPLY=INT(((QTYTMP-W3[3])/DEMNDDAY)+.99)
        IF W3[3]=0 AND W3[4]=0 LET DAYSUPPLY=9999
      ENDIF 
    ELSE 
      LET DAYSUPPLY=9999
    ENDIF 
  !! ENDIF 
  IF DAYSUPPLY<0 LET DAYSUPPLY=0
  IF DAYSUPPLY=9999 AND INZERO LET DAYSUPPLY=998
  IF DAYSUPPLY>999 AND DAYSUPPLY<>9999 LET DAYSUPPLY=999
  RETURN

!
parseCommaString:
!!-!print commaString$ 
!!-!  XX$=""
!!-!  Search #verifChannel,3,1;XX$,R12,E
!!-!  stop!!ver
If commaString$ 
  tmp$=commaString$
 nextItem:
  X2 = 0 \ Let X$ = tmp$ To "," : X2
  XX$=trim$(X$)
  X$=" ",X$
  aa=len(XX$)
  if aa>0
    if alphanumeric
	  X$[1,aa]=XX$
	else
      X$[keyLength-aa+1,keyLength]=XX$
	endif
  endif
  XX$=" ",XX$
  XX$=X$[1,keyLength]
  !
  Search #verifChannel,2,1;XX$,R12,E
  if E errorFlag=1 \ tmp$=XX$ \ Return
  Search #parseChannel,4,1;XX$,R12,E 
  !
  if E errorFlag=2 \ Return
  if Len(tmp$)<x2 Return
  if X2 let tmp$=tmp$[X2+1] \ goto nextItem
else
  errorFlag=3 \ Return
endif
Return
!
OUTEND: Rem OUT
!If IVSELECT Close #14 \ Kill BUILD_$
If IVSELECT Close #14 \ Kill F$
! dx close
!If j8 ! no dx xml
!  Call addtostr(e$,rstr$,esdel$) !end section
!  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
!End If 
!

End 
!
! - Chain "MX000C"
!
! - L_9100: Goto OUTEND
! 
Rem {begin srcdevl/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
! - JUL2DATE: Rem REM DATE JULIAN X2 TO X$
! - DT3[0] = X2;FLAG = 1;X$ = " "
! - If X2 <= 0 Let X$ = " ",X$ \ Return 
! - Call "JULIANUTIL",DT3[],X$,FLAG
! - Return 
!
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
!
! - JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
! - DT3[0] = X2;DT3[1] = X2;FLAG = 0
! - If X2 <= 0 Return 
! - Call "JULIANUTIL",DT3[],X$,FLAG
! - Return 
!
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
!
Rem {end rtn.date.i}
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
