! >>> Program 372a
!
! description Purchase Order Receipts Verification   - Worksheets
!
! loadsave -w -n 100,10 -o prog/dxport/372a.dl4 src/372a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 29, 2008  13:08:27
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/xrev9/po372a.src (univ2) [jcs] {00488}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$

Rem PO372A  PURCHASE ORDER RECEIVING WORKSHEETS
Rem AUTHOR: G.DOSCHER   MAY 24, 1985
Rem LAST UPDATE:  REK 3/24/92  WAREHOUSE CHOOSE/STATUS UPDATE
Try
Com 1%,PFU1[20],CNVTU[9]
Com 3%,PFU2[6],CNVTA[4],A[33]
!If Err 0 Gosub ERR_ESCAPE
Dim 1%,F,L1[5],X0,H4[3],NSD1[7],S7,WHSE,FLAGS[11],2%,D9[5]
Dim 1%,WPF[1024],PLOC
Dim 2%,B[24],C1[6],H0[5],H3[4],L2[2],NSD2[4],X2
Dim 3%,C9[9],J,L3[6],NSD3[9],Q1[9],R0[1],W3[24],X3[9],R9
dim 3%,totpo,ponum
Dim A$[156],A1$[30],A2$[30],H$[82],L1$[92],J$[40],CNAME$[30],J4$[40]
Dim K1$[50],K2$[20],K3$[20],NSD$[96],P9$[50],U5$[30],PFA2$[30]
Dim M1$[4],U8$[131],U9$[131],V$[30],X$[20],2%
Dim SN1$[54],SNK$[50],V9$[60],TIME$[22],Z$[50],USR$[40]
Dim 3%,AMOUNT,COST,XCOST,TCOST,XQTY,TQTY,UIDREC[1]
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
! call dxopen() ! needed?

! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

COID=IntCo ! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
V9$ = "\15\",V9$
! Goto L_825
For K1 = 2 To 14
  Read J \ If J = -1 Goto L_820
  Read #1,88,Abs(J);J$;
  If J < 0 Ropen #K1,J$ Else Open #K1,J$
L_820: Next K1
L_825: Data "-208","-1792","-1120","-2400","-1808","-2976","2416","-1","-1744","-2464","-2432"
Data "-1728","-2448","-1120"
Mat Read #1,19,50;P9$;
Mat Read #1,115,0;D9;
Mat Read #1,3,0;CNAME$;
J1 = 99 \ U8$ = "-",U8$ \ U9$ = "=",U9$
U8$[25,44] = " EXISTING LOCATIONS "
s7=5 ! Gosub L_8100
!Gosub L_8000
Call DXGet("WHSE",tmp$)
LET whse=tmp$
if not(whse) and rtrim$(tmp$)<>"0"
	eflg=eflg+1
	Message$=Message$+"Invalid Warehouse Number Entered"
	goto L_9010:
endif
if whse<0 or whse>99
	eflg=eflg+1
	Message$=Message$+"Invalid Warehouse Number Entered"
	goto L_9010:
endif
Gosub L_8200
! Print @0,21;"PRINTING, PLEASE WAIT . . . ";'CE'; \ Signal 3,0
S1 = S7
A1$ = S1 Using "##"
L_1020: Search #8,3,1;A1$,R8,E \ If E > 2 Gosub ERR_SEARCH
If E Goto OUTEND
X0 = A1$[1,2] \ If X0 <> S1 Goto OUTEND
Mat Read #8,R8;H0;
Mat Read #8,R8,24;H$;
Mat Read #8,R8,222;H3;
Mat Read #8,R8,242;H4;
Mat Read #5,H0[1];V$;
Mat Read #5,H0[1],264;C1;
If H0 <> S1 
	eflg=eflg+1
	let ponum=a1$[3]
	Message$=Message$+"Bypass PO# "+str$(ponum)+" Status Error. "
	j1=j1+3
	print #0;""
	print #0;"***** Bypass Purchase Order ";str$(ponum);" Status Error. ******"
	Print #0;""
	goto L_1020:
	! Print "STATUS ERROR-- FILE DOESN'T MATCH INDEX!" \ Gosub ERR_SEARCH
endif
If WHSE And H4[1] <> WHSE Goto L_1020
F1 = 0
Goto L_2000
L_2000: Rem LINE LOOP
A2$ = H0[2] Using "######"
L_2020: Search #12,3,1;A2$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_2300
X2 = A2$[1,6]
If X2 <> H0[2] Goto L_2300
Gosub L_6200
If FLAGS[2] Goto L_2020 ! message line
If R8 <> L3[0]
	eflg=eflg+1
	let ponum=a1$[3]
	Message$=Message$+"Bypass Purchase Order "+str$(h0[2])+"Header Record Pointer Error On Line Number "+a2$[7]+"."
	j1=j1+3
	print #0;""
	print #0;"***** Bypass Purchase Order ";str$(h0[2]);" Header Pointer Error on Line Number ";a2$[7];". ******"
	Print #0;""
	goto L_1020:
	!Print "HEADER RECORD POINTER ERROR" \ Gosub ERR_SEARCH
endif
If Not(L3[4]) Goto L_2200
Call Logic(1,2 ^ 0,L1[3],X0)
If X0 Goto L_2020
Gosub L_2800
Gosub L_4000
Gosub L_5000
L_2200: Rem END THIS LINE
Goto L_2020
L_2300: Rem PRINT TOTAL RECV $
If J1 = 99 If TXCOST = 0 Goto L_2330
Gosub L_5800
Print #0; Using "TOTAL ###,###,###.##"; Tab 110;TXCOST
TXCOST = 0
J1 = J1 + 1
totpo=totpo+1
L_2330: Goto L_1020
L_2800: Rem GET PRODUCT
Call Logic(1,2 ^ 0,L1[3],X0)
If Not(X0)
  Gosub L_6000
  J4$ = A$[140,151] \ J4$[13] = H4[1] Using "##"
  Search #10,2,1;J4$,R10,E \ If E Gosub ERR_SEARCH
  Gosub L_6300
Else 
  Gosub L_6500
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  A[5] = NSD3[7] \ A[6] = NSD3[6] \ B[23] = NSD3[2]
  PFU1[8] = NSD1[5] \ PFU1[10] = NSD1[4] \ PFU1[11] = NSD1[3]
  A$[9,38] = NSD$[13,42] \ A$[63,92] = NSD$[43,72]
  A$[140,151] = NSD$[1,12] \ A$[93,112] = NSD$[73,92]
End If 
Return 
L_4000: Rem CONV REC=>DSPL
CNVTA = L2[0] \ CNVTU[0] = 0 \ CNVTU[1] = L1[5] \ CNVTU[2] = 2
Gosub L_4200 \ Q1[0] = AMOUNT
CNVTA = L3[2] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ Q1[1] = AMOUNT
CNVTA = L3[3] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ Q1[2] = AMOUNT
CNVTA = L3[4] \ CNVTU[0] = 0 \ CNVTU[1] = L1[4] \ CNVTU[2] = 1
Gosub L_4200 \ Q1[3] = AMOUNT
CNVTA = L3[4] \ CNVTU[0] = 0 \ CNVTU[1] = PFU1[8] \ CNVTU[2] = 1
Gosub L_4200 \ Q1[4] = AMOUNT
CNVTA = L2[0] \ CNVTU[0] = 0 \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2
Gosub L_4200 \ Q1[5] = AMOUNT
Return 
L_4200: Rem CALL CONV
Gosub L_20000
Return 
L_4300: Rem GET UNITS
If X0 = -1 Let M1$ = "CWT " \ Goto L_4330
If X0 = -2 Let M1$ = "LOT " \ Goto L_4330
If X0 = -3 Let M1$ = "LB  " \ Goto L_4330
Read #13,X0,10;M1$;
L_4330: Return 
Call Logic(1,2 ^ 0,L1[3],X0) \ If X0 Return 
SNO = 0 \ If A$[8,8] <> "Y" Return 
If L3[4] = 0 Return 
SNK$ = " ",SNK$;SNK$[1,6] = H0[2] Using "######";SNK$[7,9] = L1[2] Using "###"
L_4420: Search #7,3,1;SNK$,R7,E \ If Not(SNO) If E Return 
If E Goto L_4480
X2 = SNK$[1,6];LN = SNK$[7,9]
If X2 <> H0[2] Or LN <> L1[2] Goto L_4480
Mat Read #7,R7,0;SN1$;
If Not(SNO) Print #0;"  SERIAL NUMBERS ENTERED" \ J1 = J1 + 1
Gosub L_5800
SNO = SNO + 1
Print #0;SN1$[25,54];
Print #0;"  ";
If Not(Fra(SNO / 4)) Print #0;"" \ J1 = J1 + 1
Goto L_4420
L_4480: If Not(SNO) Print #0;" *** NO SERIAL NUMBERS ENTERED ***";
Print #0;"\15\" \ J1 = J1 + 2
Return 
L_5000: Rem PRINT LINE
Print #0;"\14\";
TIME$ = "" \ Call Time(TIME$)
Print #0;V9$[1,6];
Print #0; Tab 5;"PO372A RECEIVING WORKSHEET"; Tab 55;TIME$;
Print #0;V9$[1,1];
Print #0; Using "PO  ######  ###### "; Tab 5;H0[2]; Tab 45;"VENDOR"; Tab 55;C1[1];V$
If L1$[61,62] = "  " Or L1$[61,61] = "" Let Z$ = A$[93,112] Else Let Z$ = L1$[61,80]
Print #0; Tab 55;Z$
X0 = PFU1[8] \ Gosub L_4300
Print #0; Tab 5;"ITEM # ";L1$[81,92]
Print #0; Using "#######.## "; Tab 45;"QUANTITY";Q1[4];M1$
Print #0; Tab 11;L1$[1,30]
Print #0; Tab 11;L1$[31,60]; Tab 55;PFA2$[13,27]
Print #0;V9$[1,1]
Print #0;U8$[1,79]
J9 = 16
K2$ = " ",K2$
K2$[1,12] = L1$[81,92]
K2$[13,14] = L1[1] Using "##"
CT = 1
L_5150: Search #2,3,1;K2$,R2,E
If E Goto L_5250
If K2$[1,12] <> L1$[81,92] Goto L_5250
W9 = K2$[13,14] \ If W9 <> L1[1] Goto L_5250
Read #2,R2,20;PLOC;
Print #0; Tab CT * 9;K2$[15,20];
If PLOC Print #0;"-P "; Else Print #0;"   ";
CT = CT + 1
If CT > 7 Print #0;" " \ CT = 1 \ J9 = J9 + 1
Goto L_5150
L_5250: Print #0;V9$[1,1]
Print #0; Tab 15;"NEW LOCATIONS "; Tab 55;"NEW LOCATIONS"
If J9 <= 50
  Print #0;V9$[J9,50];"CHECKED BY ___________ "
Else 
  Print #0;"CHECKED BY ___________ "
End If 
Print #0;
Return 
If J1 > 45 Let J1 = 99 \ Goto L_5800
Print #0;U9$
L_5512: Print #0;"  PO #"; Tab 12;"DATE"; Tab 34;"VENDOR"; Tab 70;"VENDOR REF#";
Print #0; Tab 88;"TYPE"
X2 = H0[3] \ Gosub L_7700
Print #0; Using "######";H0[2]; Tab 10;X$;
Print #0; Using "######:  "; Tab 30;C1[1];V$; Tab 70;H$[1,14]; Tab 87;
If H4[0] = 0 Print #0;"WAREHOUSE #";H4[1];
If H4[0] = 4 Print #0;"IMPT WHSE #";H4[1];
If H4[0] = 1 Print #0;" DIRECT";
If H4[0] = 5 Print #0;"IMPT DIRECT";
If F1 Print #0; Tab 105;"(CONTINUED)";
Print #0;"\15\";U8$
Print #0; Tab 51;"------ PURCHASE UNITS ----------";
Print #0; Tab 85;"---------- STOCK UNITS --------"
Print #0;"LN#  PRODUCT CODE";
Print #0; Tab 20;"DESCRIPTION / SIZE"; Tab 54;"QUANTITY";
Print #0; Tab 70;"UNIT COST"; Tab 85;"QUANTITY";
Print #0; Tab 100;"UNIT COST"; Tab 118;"EXT COST"
Print #0;U9$
F1 = 99 \ J1 = J1 + 7 \ Return 
L_5800: Rem HEADINGS ROUTINE
If J1 < 60 Return 
If J2 Print #0;"\14\";
J2 = J2 + 1 \ J1 = 4
Print #0;"\15\";
Print #0; Tab 5;Msc$(3); Tab (65 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2;"\15\"
Print #0; Tab 42;"PURCHASE ORDER RECEIPTS TO STOCK VERIFICATION\15\"
Goto L_5512
L_6000: Rem READ PRODUCT FILE
Mat Read #3,L3[1];A$;
Mat Read #3,L3[1],156;B;
Mat Read #3,L3[1],256;A;
Mat Read #3,L3[1],512;PFU1;
Mat Read #3,L3[1],554;PFU2;
Mat Read #3,L3[1],944;PFA2$;
Return 
L_6200: Rem READ LINE ITEM
Mat Read #12,R9;L1;
Mat Read #12,R9,12;L2;
Mat Read #12,R9,24;L3;
Mat Read #12,R9,66;L1$;
Gosub L_8300
Return 
L_6300: Rem READ WHPR FILE
Mat Read #10,R10,78;W3
Return 
L_6500: Rem READ NSTKDESC
Mat Read #14,L3[1];NSD$
Mat Read #14,L3[1],96;NSD1
Mat Read #14,L3[1],112;NSD2
Mat Read #14,L3[1],132;NSD3
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_8000: Rem CHECK WAREHOUSE
!L_8010: WHSE = 0 \ If D9[5] = 1 Goto L_8090
!Print @0,21;"Enter warehouse to use (1-";
!Print Using "##";D9[5];"), <CR> for all or   E: to exit ";'CE';
!Input Len 16386;""X$ \ If X$ = "E" Goto L_9010
!HSE = X$
!If (Not(WHSE) And X$ <> "") Or WHSE < 0 Or WHSE > D9[5] Print 'RB'; \ Goto L_8010
L_8090: Return 
L_8100: Rem CHECK CONTROL FLAG
L_8110: S7 = 5 \ Goto L_8170
!Print @0,20;"IS THIS A REPRINT (Y/N  E: Exit)? ";'CE';
!Input Len 16385;""X$ \ If X$ = "Y" Let S7 = 6
!If X$ = "E" Goto L_9010
!If X$ <> "N" And X$ <> "Y" Print 'RB'; \ Goto L_8110
L_8170: Return 
L_8200: Rem CHECK/SET WHSE PROC FLAGS
! If Err 0 Rem
Try Close #90 Else Rem
! If Err 0 Gosub ERR_ESCAPE
Read #1,88,2768;X$[1,16]; \ Open #90,X$
! Print @0,23;'CL';"CHECKING WHSE FLAGS, PLEASE WAIT"; \ Signal 3,0
If WHSE Let WHREC = WHSE - 1 Else Let WHREC = 99
L_8225: Mat Read #90,WHREC,900;WPF;
! Call "getuidrec",UIDREC[1]
UIDRec[1] = GetUIDRec(e$,IntCo,Userid$)
If WPF[373] <> 0 Let UIDREC = WPF[373] \ Goto L_8280
WPF[372] = UIDREC[1]
If WHSE If WHREC = 99 Let WPF[372] = 0 - WHSE
Mat Write #90,WHREC,900;WPF;
If WHSE If WHREC <> 99 Let WHREC = 99 \ Goto L_8225
If WHSE If WHREC = 99 Goto L_8277
For WHREC = 0 To 98
  Mat Read #90,WHREC,900;WPF;
  If WPF[373] <> 0 Let UIDREC = WPF[373] \ Goto L_8280
L_8275: Next WHREC
L_8277: Close #90
Return 
L_8280: Rem IF WPF[CPRT]=371 ! status 91 controls entry
USR$ = " ",USR$
If UIDREC > 0
	!Call "getuidinfo",UIDREC,USR$
	 USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
endif
eflg=eflg+1
message$=message$+"Journal In Process By User "+rtrim$(usr$[21])
message$=message$+" - Please Try Later. "
! Print @0,23;'RB CL';"JOURNAL IN PROCESS USER ";USR$[21];
! Print " -- PLEASE TRY LATER."; ! \ Signal 3,30
Goto L_9010

L_8300: Rem UNPACK L1[3] TO FLAGS[x]
X2 = L1[3] \ For K = 0 To 11
  FLAGS[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
X2 = 0 \ For K = 0 To 11
  If FLAGS[K] Let X2 = X2 + 2 ^ K
Next K \ L1[3] = X2 \ Return 
L_8500: Rem UP STATUS
Return 
!Print @0,20;'RB CE';"Has this journal printed correctly (Y/N)? ";'CE';
!Input Len 16385;""X$ \ If X$ = "N" Return 
!If X$ <> "Y" Print 'RB'; \ Goto L_8500
!Print @0,22;"Updating... please wait...";'CE';
!A1$ = " ",A1$ \ A1$ = S1 Using "##"
!L_8560: Search #8,3,1;A1$,R8,E \ If E > 2 Gosub ERR_SEARCH
!If E Goto L_8680
!X0 = A1$[1,2] \ If X0 <> S1 Goto L_8680
!Mat Read #8,R8;H0
!Mat Read #8,R8,242;H4
!If WHSE If WHSE <> H4[1] Goto L_8560
!U5$ = " ",U5$ \ U5$ = A1$ \ U5$[1,2] = S1 + 1 Using "##"
!Search #8,4,1;U5$,R8,E \ If E Gosub ERR_SEARCH
!U5$[1,2] = S1 Using "##"
!Search #8,5,1;U5$,R8,E \ If E Gosub ERR_SEARCH
!H0[0] = S1 + 1 \ Write #8,R8;H0;
!Goto L_8560
L_8680: Return 
WPFRESET: Rem reset wpf flags
!If Err 0 Rem
Try Close #90 Else Rem
! If Err 0 Gosub ERR_ESCAPE
Read #1,88,2768;X$[1,16]; \ Open #90,X$
If WHSE Let WHREC = WHSE - 1 Else Let WHREC = 99
WP8225: Mat Read #90,WHREC,900;WPF;
WPF[372] = 0
If WHSE If WHREC = 99 Let WPF[372] = 0
Mat Write #90,WHREC,900;WPF;
If WHSE If WHREC <> 99 Let WHREC = 99 \ Goto WP8225
If WHSE If WHREC = 99 Goto WP8277
WP8277: Rem finito
Try Close #90 Else Rem
Return 

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!!If X1 <> Spc(6) Goto L_20080
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem EXIT PROGRAM
Gosub WPFRESET
L_9010: !Print 'CS' 
Close 
! Chain "MX000"
! Stop 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
returnstatus=0
If Eflg>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(totpo)
	returnstatus=1
	let message$=message$+"There are no purchase orders available to list"
	if whse<>0
		let message$=message$+" for warehouse "+str$(whse)
	endif
	message$=message$+"."
else
	Let message$=message$+" "+str$(totpo)+" Purchase Order(s) Listed"
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program