! ubsvendapdet.src
!
! supporting library of vendor routines for browser
!
! 1.0 09/17/07
!
! loadsave -w -n 100,10 -o prog/dxport/ubsvendapdet.dl4 src/ubsvendapdet.src
!
include "src/copyright.inc"
!
! sub & functions for list library
!
!  S  GetVendAPdet		get list of ApDetail


include "src/inc/filea80vm.inc" ! "vendor file
include "src/inc/fileapdeth.inc" ! a/p file - current


!
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetDelimiters

External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Sub UserCntrl




Declare Intrinsic Sub Env,FormatDate,JuliantoDate,DatetoJulian

! --------------------------------------------------------------------------------------
External Sub Getvendapdet(e$,vers,List$[],maxcnt,intCo,ReturnStatus,Message$)
  ! Creates a list of the vendor's A/p Detail
  !
  ! e$         : error message
  ! vers		: version - 0=Current A/p Only,
  ! List$[]    : VEndor Data list
  ! maxcnt		: max # of lines for list$[]
  ! intCo      : company id #
  ! ReturnStatus : .net status
  ! Message$	: .net message
try
!
   dim 1%,tmp1,Dir,apc,apType,F,ARH,CTLChan,vendChan
	dim 2%,tmp2,tmpcnt,Age[7],apDate,DT3[5],X2
	dim 2%,Y,IDate,vendid
    dim 3%,tmp3,apRec,apBal,vendRec
	dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[500]
    dim tmp$[200],tmp1$[200],WebStr$[500],Message$[200]
	dim vendKey$[64],Mode$[2],blank$[100],P61$[256],apKey$[64]
	dim P9$[50],P60$[50],P1$[60],Mask$[12],X$[10],vend$[64]
!
	dim Aph. as apdeth
	
	dim vend. as a80vm
!
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	Call DXGet("vendid",vend$) \ vendid=vend$
	vend$=vendid using "######"
	vend$ = vend$+"            "
	vend$[7]="" ! "cut after 6 chars
  ! Open any files for this program
    CTLChan=OpenFile(-9999,intCo) \ If CTLChan = -1 Error 42
	vendChan=OpenFile(-2400,intCo) \ If vendChan = -1 Error 42
	read #CTLChan,0,108;apDate; ! system ap Date
	mat read #CTLChan,19,50;p9$; ! system flags
	mat read #CTLChan,60,50;p60$; ! system flags
	mat read #CTLChan,61,0;P61$; ! system flags

    apc=OpenFile(-432,intCo) \ if apc= -1 Error 42 ! not found = Accounts Pay Detail 
	
    P1$= "INVC/MM/C" ! 
    
	! as the type above is going to be used for Ref detail lookup - USE SAME TYPES!
	Mask$="-------#.##"
	tmpcnt=maxcnt
	clear List$[]
	ReturnStatus = 1
	Message$="OK"
!
 
	vend$[7]="" ! make sure its only 6
	mode$="=" ! "exact match or next
	Dir=1 ! "of vendor code / Ref
	vendKey$=vend$
	vendRec=filegeta80vm(e$,vendChan,mode$,dir,vendKey$,vend.)
	if vendRec<=0
	  Clear vend.
	  ReturnStatus = 0
	  Message$="vendor Not Found"
	endif
	!! heading !!! 
	!List$[0]=bsdel$,"AP DETAIL HEADER",fdel$
	!WebStr$="ID",fdel$,"Name",fdel$,"Contact",fdel$,"Phone"
	!List$[1]=WebStr$
	!WebStr$=vend$,fdel$,RTrim$(vend.Name$),fdel$ ! ID & Name
	!webstr$=webstr$+vend.contact$,fdel$
	!webstr$=webstr$+vend.telephonenumber$,fdel$
	!List$[2]=WebStr$
	!List$[3]=esdel$ ! could be 3 sections (1=header,2=current ap)
	
	!
	!row=4 ! starting row for data
	row=0
	if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	vendKey$=vend$
	if vendRec>0
	  if vers<=1 ! vers=0 curr only, 1=both curr & hist! , 2=hist only
	  	List$[row]=bsdel$,"AP Detail",fdel$
		row=row+1
		WebStr$="Ref No",fdel$
		WebStr$=WebStr$,"Document",fdel$
		WebStr$=WebStr$,"PO No",fdel$
		WebStr$=WebStr$,"Date",fdel$,"Due Date",fdel$,"Disc Date",fdel$
		Webstr$=WebStr$,"Invoice Amt",fdel$  
		WebStr$=WebStr$,"Discount",fdel$,"Payment",fdel$
		Webstr$=WebStr$,"Balance",fdel$	
		Webstr$=WebStr$,"Check No",fdel$
		Webstr$=WebStr$,"Chk Date",fdel$	
		List$[row]=WebStr$
		row=row+1
	  apKey$=vend$[1,6]+"999999" ! "   " (for mode$ >= )
	  Mode$="<=" ! "match or PREV
	  Dir=2 ! "start w/ vend/ref (may switch to dir=2 - vend/date order)
	  Do
	   apRec=filegetapdeth(e$,apc,Mode$,dir,apKey$,aph.)
       if apRec<0 or apKey$[1,len(vendKey$)]<>vendKey$ exit do
    
		Mode$="<" ! "get prev/next
		Dir=2! "dir 1/2
	if aph.transactiontype>=1 and aph.transactiontype<=3
	    WebStr$=aph.invoicecode$,fdel$ ! 
	    tmp$=""
	    if aph.transactiontype>=1 and aph.transactiontype<=3 
		let tmp$=P1$[(aph.transactiontype-1)*3+1,(aph.transactiontype-1)*3+3]
	    endif
	    let webstr$=webstr$+tmp$,fdel$
	    let tmp$=aph.ponumber using "######"
	    let webstr$=webstr$+tmp$,fdel$
		if aph.Transactiondate<>0 ! it's yymmdd
		  tmp$=JDate$(aph.transactionDate) ! 
		else
		  tmp$="        "
		endif
		WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! invoice date
	        if aph.Duedate<>0 ! it's yymmdd
		  tmp$=PDate$(aph.DueDate) ! 
		else
		  tmp$="        "
		endif
		WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! due date
		 if aph.Discountdate<>0 ! it's yymmdd
		  tmp$=PDate$(aph.DiscountDate) ! 
		else
		  tmp$="        "
		endif
		WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! discount date
		
		
	   
	   tmp3=aph.originalamount
	   WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ ! Original amount
	   If not (aph.amountpaid)
		tmp3=aph.discountavail
		WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ !Discount avail	
		tmp3=aph.amountpaid
		WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ ! amount paid		
		tmp3=aph.originalamount-aph.discountavail-aph.amountpaid
		WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ ! balance
		if aph.transactiontype<>3 ! not a manual check
			let tmp$="      " ! check #
			WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! check number
			let tmp$="        "
			WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! check date
		else
			if aph.checknumber<>0
				let tmp$=aph.checknumber using "######"
			else
				let tmp$="      " ! check #
			endif
			WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! check number
			if aph.checkdate<>0 ! it's yymmdd
				tmp$=PDate$(aph.checkDate) ! 
			else
				tmp$="        "
			endif
			WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! check date
		endif
	   else
		tmp3=aph.discounttaken
		WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ !Discount taken	
		tmp3=aph.amountpaid-aph.discounttaken
		WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ ! amount paid		
		tmp3=aph.originalamount-aph.amountpaid
		WebStr$=WebStr$,RTrim$(tmp3 using Mask$),fdel$ ! balance
		if aph.checknumber
			let tmp$=aph.checknumber using "######"
		else
			let tmp$="      " ! check #
		endif
		WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! check number
		if aph.checkdate<>0 ! it's yymmdd
		  tmp$=PDate$(aph.checkDate) ! 
		else
		  tmp$="        "
		endif
		WebStr$=WebStr$,RTrim$(tmp$),fdel$ ! check date
	   endif

	    
		List$[row]=WebStr$
		row=row+1
		if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	    Endif
	   Loop
	  end if  ! of vers
	  If Vers=1 ! need end of section if both sent
		 List$[row]=esdel$ ! end of current ap section
		 row=row+1
		 if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	  Endif
    ! possibilty of current only or both
	
	endif ! valid vend rec
	If apc>0 Close #apC

	!
	List$[row]=esdel$ ! end of section
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! Getvendap


! --------------------------------------------------------------------------------------