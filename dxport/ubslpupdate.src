!Program Name: ubslpupdate
!
! loadsave -w -n 100,10 -o prog/dxport/ubslpupdate.dl4 src/ubslpupdate.src
! rce R9 changes
!
Declare External Sub LPUpdate
Declare Sub updatelog,errTrap, delete_lp, PM_delete_lp, lpupdatelog
Declare Sub update_lp, convert_to_base, convert_to_disp, add_lp, GetPriceDetail
Declare Sub PM_update_lp
Declare Function PM_add_lp
!
Include "src/invars.inc"
Include "src/lprec.inc"

Dim lps. As lpInfo
Dim lpin. As lpInfo
Dim ps. As priceInfo
Dim 2%,ii,ss,action2$[50]
Dim 1%,arrsales[999]

action2$="DELETE"
lpin.CustId$=" 21209"             
lpin.prodid$="SP8001"      
lpin.permfactor$="39.50"
lpin.permcost$ = ""
lpin.fppermfactor$="36.00"
lpin.fppermdate$ = "080317"
lpin.lprec$  = "36424"  ! ONLY FOR DELETE             

Call LPUpdate(1,35,1,"files/6/dx.log",action2$,lpin.,lps.,ii,ss,600,arrSales[])
Stop 
! External Sub LPUpdate(intCo,intSalesMan,debug,dlog$,cust$,prod$,permfactor$,permcost$,fppermfactor$,fppermdate$,lps. As lpInfo,ii,ss,iLimit,arrSales[])
External Sub LPUpdate(intCo,intSalesMan,debug,dlog$,action2$,lpin. As lpInfo,lps. As lpInfo,ii,ss,iLimit,arrSales[])
  Try 
    Declare Intrinsic Function FindChannel,Trim$
    Declare Intrinsic Sub JulianToDate,DateToJulian, FindF
    Declare External Function FDate$,Pdate$,BaseName$,FMTPhone$,XUNIT$,OpenFile
    Declare External Function XAMOUNT,WareHouse,ReplaceChar$,formatdate2$
    External Lib "ubsfunc.dl4","ubsprconv.dl4"
	!
	Declare External Sub PriceDet
	External Lib "ubspricedet.dl4"
    !
	
	Include "src/ubsorder.inc"

	Include "src/ubsprod.inc"

	Include "src/ubscustomer.inc"

    Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
    Dim LPK$[50],PRK$[20],CMK$[12],CUK$[12],SMK$[20],SavLPK$[50]
    Dim P9$[50],P60$[50],P61$[256]
    Dim PR. As Prod
    Dim CM. As CommCode
    Dim CU. As Customer
    Dim LP. As Lastprice
	dim ps. As priceinfo

    Dim 1%,debugDetail
    !
    Dim 2%,LPC,PRC,CMC,CUC,SMC,CTLC,CCC
    !
    Dim 2%,LPR,PRR,CMR,CUR,SMR,SavLPR
    !
    Dim 2%,LPE,PRE,CME,CUE,SME
    Dim SALES$[35],Temp$[100],DT1$[10],DT2$[10]
    Dim SLS$[3],CO$[2]
    Dim Qmask$[20],Pmask$[20],Emask$[20],dec$[5]
    Dim msg$[256],pgmName$[20],fname$[50]
    Dim PriceTypeDesc$[50,50]
    Dim 1%,factor,trackperm,fakerec
    Dim 2%,JToday, uomrec
    Dim 2%,t2,LastInvDate,X1,X2
    Dim 2%,Q0[1], LPPPCUST, prvod[2]
    Dim 2%,jsdate,jedate,jinvdate
    Dim 3%,GP,gpp,sprice, prvoq[3]
    Dim 3%, PERM[1], LPFPPERM[1], temp, PERMLOG[35], PASSINFO[20], TMP_PERM[1]
    Dim work$[255], lpdlog$[255], PPLOG$[60]

	Dim cust$[6],prod$[12],permfactor$[30],permcost$[30]
	Dim fppermfactor$[30],fppermdate$[30],b4key$[8]
	Dim tempkey$[50],whse$[2],qty$[10],qunit$[4],punit$[4]

	action2$ = UCase$(action2$)
	cust$ = lpin.custid$
	prod$ = Ucase$(lpin.prodid$)+"            " ! fill to char 12
	permfactor$ = lpin.permfactor$
	permcost$ = lpin.permcost$
	fppermfactor$ = lpin.fppermfactor$
	fppermdate$ = lpin.fppermdate$

    debug = 1
    debugDetail = 1
    lpdlog$ = "../../files/salespro/lpupdate" + Tim(8) Using "&&" + Tim(9) Using "&&" + Tim(10) Using "&&" + ".log"
    pgmName$ = "ubslpupdate"
    msg$[1,50] = "-",msg$ \ Call lpupdatelog(debug)
    msg$ = "start...program " + pgmName$ \ Call updatelog(debug)
    ii = 0
    SLS$ = intSalesMan Using "###"
    CO$ = Str$(intCo)
    msg$="doing...company-"+CO$+" salesman-" + SLS$ \ Call lpupdatelog(debug)
    If debugDetail
      msg$ = "doing...cust-" + cust$ \ Call lpupdatelog(debug)
      msg$ = "doing...prod-" + prod$ \ Call lpupdatelog(debug)
    End If 
    CTLC = OpenFile(-9999,intCo) \ If CTLC = -1 Error 42
    LPC = OpenFile(1376,intCo) \ If LPC = -1 Error 42
    PRC = OpenFile(-1792,intCo) \ If PRC = -1 Error 42
    CMC = OpenFile(-2288,intCo) \ If CMC = -1 Error 42
    CUC = OpenFile(-1808,intCo) \ If CUC = -1 Error 42
    SMC = OpenFile(-1824,intCo) \ If SMC = -1 Error 42
    CCC = OpenFile(-1728,intCo) \ If CCC = -1 Error 42
    Let fname$="2/permpricelog"+Str$(intCo)
    call findF (fname$,trackperm)
	Search #LPC,1,5;tempkey$,LPDIR5,E
	If Not(E) Let LPDIR5 = 1
	If E Let LPDIR5 = 0
        Mat Read #CTLC,19,50;P9$;
    Mat Read #CTLC,60,50;P60$;
    Mat Read #CTLC,115,40;Q0;
    If Not(Q0[1]) Let Q0[1] = 2
    Dec$ = "#",Dec$;Qmask$ = "---,---,--#"
    If Q0[0] Let Qmask$ = "---,---,--#.",Dec$[1,Q0[0]]
    If Q0[1] Let Pmask$ = "---,---,---,---.",Dec$[1,Q0[1]]
    Let Emask$="----,---,---,---.##"                         !ext. price mask
    PriceTypeDesc$[1] = "MATRIX PRICE"
    PriceTypeDesc$[2] = "CUSTOMER/SINGLE PRODUCT CONTRACT"
    PriceTypeDesc$[3] = "SINGLE PRODUCT PROMOTION"
    PriceTypeDesc$[4] = "CUSTOMER/COMMODITY CONTRACT"
    PriceTypeDesc$[5] = "TEN BRACKET PRICE"
    PriceTypeDesc$[6] = "CUSTOMER/ALL PRODUCT CONTRACT"
    PriceTypeDesc$[7] = "COMMODITY PROMOTION"
    PriceTypeDesc$[8] = "ALL PRODUCT PROMOTION"
    PriceTypeDesc$[9] = "QUANTITY BREAK DISCOUNT"
    PriceTypeDesc$[10] = "MANUAL PERCENT DISCOUNT"
    PriceTypeDesc$[11] = "SIZE (U/M) PROMOTION"
    PriceTypeDesc$[12] = "CUSTOMER/SIZE (U/M) CONTRACT"
    PriceTypeDesc$[13] = "FIXED PRICE CONTRACT"
    PriceTypeDesc$[14] = "MANUAL GTM % PRICE"
    !
    PriceTypeDesc$[33] = "MANUAL PRICE BRACKET 9"
    PriceTypeDesc$[34] = "MANUAL PRICE BRACKET 8"
    PriceTypeDesc$[35] = "MANUAL PRICE BRACKET 7"
    PriceTypeDesc$[36] = "MANUAL PRICE BRACKET 6"
    PriceTypeDesc$[37] = "MANUAL PRICE BRACKET 5"
    PriceTypeDesc$[38] = "MANUAL PRICE BRACKET 4"
    PriceTypeDesc$[39] = "MANUAL PRICE BRACKET 3"
    PriceTypeDesc$[40] = "MANUAL PRICE BRACKET 2"
    PriceTypeDesc$[41] = "MANUAL PRICE BRACKET 1"
    PriceTypeDesc$[42] = "MANUAL PRICE BRACKET 0"
    PriceTypeDesc$[43] = "MANUAL PRICE ENTRY"
    PriceTypeDesc$[44] = "MANUAL LIST PRICE 6"
    PriceTypeDesc$[45] = "MANUAL LIST PRICE 5"
    PriceTypeDesc$[46] = "MANUAL LIST PRICE 4"
    PriceTypeDesc$[47] = "MANUAL LIST PRICE 3"
    PriceTypeDesc$[48] = "MANUAL LIST PRICE 2"
    PriceTypeDesc$[49] = "MANUAL LIST PRICE 1"
    ss = 10000
    If Len(cust$) < 1 Goto OutEnd
    If Len(prod$) < 1 Goto OutEnd
!------------------------------------------------------------------------!
	Try lprec = Val(lpin.lprec$) else lprec=0
    LPK$ = " ",LPK$
    LPK$[1,6] = Val(cust$) Using "######"
    LPK$[7,10] = DEPT Using "####"
    LPK$[11,30] = prod$
Main: !
    Search #LPC,3,1;LPK$,LPR,LPE
    If Len(cust$) > 1 And Trim$(LPK$[1,6]) <> Trim$(cust$) Let LPE = 22
    If Len(prod$) > 1 And Trim$(LPK$[11,30]) <> Trim$(prod$) Let LPE = 22
	if action2$ = "DELETE" and LPR <> lprec LPE=22
	if action2$ = "ADD" and LPE 
		If PM_add_lp() = 1 ss=10001 \ goto Outend  ! failed
	Endif
    If LPE Goto OutEnd
    If debugDetail
      msg$="doing...Main: LPK$="+LPK$+" LPR="+LPR \ Call updatelog(debug)
      If LPE Let msg$ = "error...Search error " + Str$(LPE) + " " + LPK$ \ Call updatelog(debug)
    End If 
    Read Record #LPC,LPR;LP.;
    !
    ss = 10000
    CUK$ = LP.LPC1[0] Using "######"
    Temp$ = " ",Temp$;Temp$ = CUK$
    Search #CUC,2,1;CUK$,CUR,CUE
    If CUK$[1,6] <> Temp$ Let CUE = 22
    If CUE = 0
      Read Record #CUC,CUR;CU.;
    Else 
      Clear CU.
      CU.A1$[31,60] = "-NOF-"
    End If 
    If intSalesMan = 999 Goto SLSPassed
    If arrSales
      For counter = 0 To 999
        If arrSales[counter] = CU.C1[2] Goto SLSPassed
        If Not(arrSales[counter]) Let counter = 999
      Next counter
    End If 
    If intSalesMan = CU.C1[2] Goto SLSPassed
	ss=1002
    Goto OutEnd
SLSPassed: !
    !
    SMK$ = CU.C1[2] Using "### "
    Temp$ = SMK$
    Search #SMC,2,1;SMK$,SMR,SME
    If SMK$[1,4] <> Temp$ Let SME = 22
    If SME = 0
      Mat Read #SMC,SMR;SALES$[1,30];
    Else 
      SALES$ = "-NF-"
    End If 
getProd: !
    PRK$ = " ",PRK$;PRK$[1,12] = Trim$(LP.LP$)
    Search #PRC,2,1;PRK$,PRR,PRE
    If Trim$(PRK$[1,12]) <> Trim$(LP.LP$) Let PRE = 22
    !
    If PRE Goto Main
    If debugDetail
      msg$="doing...Search #PRC: PRK$="+PRK$+" PRR="+PRR\Call updatelog(debug)
      If PRE Let msg$ = "error...Search error " + Str$(PRE) + " " + PRK$ \ Call updatelog(debug)
    End If 
    If PRE
      Clear PR.
	  ss=1003
    Else 
      Read Record #PRC,PRR;PR.;
    End If 
    !
	!------------------------------------------------------------------
	!
	If action2$ = "ADD"  
		Call convert_to_disp()  ! convert values to send back to web
		goto Outend
	End If
    !
	!------------------------------------------------------------------
	!
	If action2$ = "DELETE" 
		!
		If CU.LPPPCUST=CU.C1[1]
			! this is master group cust so we must delete all associated custs
			LPPPCUST = CU.LPPPCUST
			Call PM_delete_lp()
			goto Outend
		End If
		!  not a master group so only delete this one lastprice record
		Call delete_lp(LPK$)
		goto Outend
		!
	End If
	!
	!------------------------------------------------------------------
	!
	If action2$ = "UPDATE"
		!
		Call convert_to_base()  ! convert values sent from web 
		!
		If CU.LPPPCUST=0
			!  only update this one lastprice record
			Call update_lp()
			Call convert_to_disp() ! needs to happen after record is updated
    		ss = 0
			goto Outend
		End If
		!
		If CU.LPPPCUST=CU.C1[1]
			! update master as I need the updated info for conversion to display
			Call update_lp()
			Call convert_to_disp()
			! this is master group cust so we must update all associated custs
			! LPPPCUST=CU.C1[1]
			! Call PM_update_lp()
    		ss = 0
			goto Outend
		End If

		If CU.LPPPCUST and CU.LPPPCUST<>CU.C1[1]
			! this cust has a master so update both lprecs
			Call update_lp()  ! child cust
			Call convert_to_disp()
			!
			! build LPK$ and read it
			LPK$[1,6] = CU.LPPPCUST using "######"
			temp$ = LPK$
			!
   			Search #LPC,2,1;temp$,LPR,LPE
   			If Val(temp$[1,6]) <> CU.LPPPCUST Let LPE = 22
   			If Trim$(temp$[10,29]) <> Trim$(prod$) Let LPE = 22
   			If LPE=0
   				Read Record #LPC,LPR;LP.;
				Call update_lp() ! this does delete
    			ss = 0
			End If
			goto Outend
		End If
		!
	End If  ! of If action2$ = "UPDATE" 
	!
	!------------------------------------------------------------------
	!
	!
OutEnd: !
    Close #CTLC,#LPC,#PRC,#CMC,#CUC,#SMC,#CCC
    msg$ = "done " + pgmName$ \ Call lpupdatelog(debug)
    msg$ = "doing...end of " + pgmName$ \ Call updatelog(debug)
    Exit Sub 

!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Subroutines & Functions
!
!------------------------------------------------------------------
  Sub PM_update_lp()
	Try
		! loop through all customers looking at perm price value
    	CUK$ = " ",CUK$
		Do
    		Search #CUC,3,1;CUK$,CUR,CUE
    		If CUE = 0
      			Read Record #CUC,CUR;CU.;
				if CU.LPPPCUST = LPPPCUST
					! build LPK$ and delete it
					temp$ = LPK$; temp$[1,6] = CUK$
					!
    				Search #LPC,2,1;temp$,LPR,LPE
    				If temp$[1,6] <> CUK$ Let LPE = 22
    				If Trim$(temp$[11,30]) <> Trim$(prod$) Let LPE = 22
    				If LPE=0
    					Read Record #LPC,LPR;LP.;
						Call update_lp()
					End If
				End If
    		End If 
		Loop Until CUE
	Else
		ss=1001
	End Try
  End Sub
!-------------------------------------------------------------------
  Sub update_lp()
	!
	! Write original values to log file
	msg$="cust: " + lpk$[1,6] \ Call lpupdatelog(debug)
	!
	msg$="OrigLP   rec:"+Str$(LPR)+" permfactor:"+Str$(LP.PERM[0])
	msg$ = msg$ +" permcost:"+Str$(LP.PERM[1])
	Call lpupdatelog(debug)
	!
	fakerec=0! check ig a bogus one was set up first
	if not(lp.lpeun[2]) let fakerec=1
	if trackperm if not (fakerec)! Set up to pass info to perm price log file
	   PASSINFO[0]=LPC  !last price channel #
	   PASSINFO[1]=LPR  !last price record #
	   PASSINFO[2]=1    !this is a before snapshot
	   call "logpermprice",intco, pplog$, permlog[], passinfo[],dlog$
	end if
	!
	msg$="         rec:"+Str$(LPR)+" fppermfactor:"+Str$(LP.LPFPPERM[0])
	msg$=msg$ + " permdate:"+Str$(LP.LPFPPERM[1])
	Call lpupdatelog(debug)
	!
   	! set structure vars
	LP.LPEUN[2] = -7       ! manual entry
	! always update the cost if the we are updating - same as Paper Master
	Call GetPriceDetail(val(lpk$[1,6]))
	Try
		temp$ = ps.cost$ to "/"  
		temp = temp$
    	! set permcost to base
    	CNVTA = ABS(PERM[1]-temp)
		IF CNVTA>.009 THEN PERM[1]=TEMP  !! Think this should just go away, 
		! but leaving, just in case this routine someday gets used to adjust perm cost
    	!CNVTU[0] = PR.PFU1[11]
    	!CNVTU[1] = 0
    	!CNVTU[2] = 2
    	!TMP_PERM[1]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	ELSE
		TMP_PERM[1] = PERM[1]
	End Try
	PERM[1] = TMP_PERM[1]
	if perm[0] LP.PERM[0] = PERM[0]
	if perm[1] LP.PERM[1] = PERM[1]
	LP.LPFPPERM[0] = LPFPPERM[0]
	LP.LPFPPERM[1] = LPFPPERM[1]
	!
   	Write Record #LPC,LPR;LP.;
	!
	! Write new values to log file
	msg$ = "UpdateLP rec:" + Str$(LPR) + " permfactor:" + Str$(LP.PERM[0])
	msg$ = msg$ + " permcost:" + Str$(LP.PERM[1])
	Call lpupdatelog(debug)
	!
	if trackperm ! Set up to pass info to perm price log file
	   PASSINFO[0]=LPC  !last price channel #
	   PASSINFO[1]=LPR  !last price record #
	   PASSINFO[2]=2    !this is an after snapshot
	   PASSINFO[3]=6    !manual edit from salespro
	   PASSINFO[4]=intsalesman !who changed it
	   if fakerec
		PASSINFO[2]=0    !this is actually a new rec
		PASSINFO[3]=14    !manual add from salespro
	   end if
	         call "logpermprice",intco, pplog$, permlog[], passinfo[],dlog$
	 end if
	!
	msg$ = "         rec:" + Str$(LPR) + " fppermfactor:" + fppermfactor$
	msg$ = msg$ + " permdate:" + fppermdate$
	Call lpupdatelog(debug)
	!
  End Sub

  Sub convert_to_base()
	!
	! convert anything sent from web to base
	!
    ! set permfactor to base
    CNVTA = permfactor$
    CNVTU[0] = LP.LPC3[3]
    CNVTU[1] = 0
    CNVTU[2] = 2
    PERM[0] = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
    !
    ! set permcost to base
    CNVTA = permcost$
    CNVTU[0] = LP.LPC3[4]
    CNVTU[1] = 0
    CNVTU[2] = 2
    PERM[1] = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
    !
    ! set fppermfactor to base
    CNVTA = fppermfactor$
    CNVTU[0] = LP.LPC3[3]
    CNVTU[1] = 0
    CNVTU[2] = 2
    LPFPPERM[0] = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
    !
    work$ = formatdate2$(fppermdate$) ! returns YYYYMMDD
    LPFPPERM[1] = work$[3,8] ! just the YYMMDD portion
	!
  End Sub

  Sub convert_to_disp()
    !
	! now we're converting everything back up to display UM to send back
    !
	!----------------------------------------------------
    CNVTA = LP.LPR[3]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[2]
    CNVTU[2] = 1
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.mtd$ = temp Using Qmask$ + "/" + XUNIT$(LP.LPC3[2],CCC)
	!----------------------------------------------------
    !
    CNVTA = LP.LPR[4]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[2]
    CNVTU[2] = 1
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.ytd$ = temp Using Qmask$ + " " + XUNIT$(LP.LPC3[2],CCC)
	!----------------------------------------------------
    !
    CNVTA = LP.LPUNF[6]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[2]
    CNVTU[2] = 1
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.lyr$ = temp Using Qmask$ + " " + XUNIT$(LP.LPC3[2],CCC)
	!----------------------------------------------------
    !
    CNVTA = LP.LPC2[0]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[2]
    CNVTU[2] = 1
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.qty$ = temp Using Qmask$ + " " + XUNIT$(LP.LPC3[2],CCC)
	!----------------------------------------------------
    !
    CNVTA = LP.LPC2[1]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[3]
    CNVTU[2] = 2
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.price$ = temp Using Emask$ + "/" + XUNIT$(LP.LPC3[3],CCC)
	!----------------------------------------------------
    !
    CNVTA = LP.LPC2[2]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[4]
    CNVTU[2] = 2
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.cost$ = temp Using Emask$ + "/" + XUNIT$(LP.LPC3[4],CCC)
	!----------------------------------------------------
    !
	CNVTA = PERM[0]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[3]
    CNVTU[2] = 2
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.permfactor$ = Trim$(temp Using Pmask$)
	!----------------------------------------------------
    !
    CNVTA = PERM[1]
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[4]
    CNVTU[2] = 2
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	lps.permcost$ = Trim$(temp Using Pmask$)
	!----------------------------------------------------
    !
    CNVTA = LPFPPERM[0] ! pend perm price
    CNVTU[0] = 0
    CNVTU[1] = LP.LPC3[3]
    CNVTU[2] = 2
    temp = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
	If temp
		lps.fppermfactor$ = Trim$(temp Using Pmask$)
		lps.fppermfactorum$ = XUNIT$(LP.LPC3[3],CCC)
	Else 
		lps.fppermfactor$ = " "
		lps.fppermfactorum$ = " "
	End If 
	If LPFPPERM[1]
		lps.fppermdate$ = Pdate$(LPFPPERM[1])
	Else 
		lps.fppermdate$ = " "
	End If 
	!----------------------------------------------------
	! and the rest
	!
	lps.slsid$ = CU.C1[2] Using "####"
	lps.slsname$ = SALES$
	lps.custid$ = LP.LPC1[0] Using "######"
	lps.custname$ = CU.A1$[31,60]
	lps.prodid$ = LP.LP$
	lps.desc1$ = PR.A$[9,38]
	lps.desc2$ = PR.A$[63,92]
	lps.gpp$ = gpp Using "----#.##%"
	lps.orderdate$ = Pdate$(LP.LPC1[2])
	lps.order$ = LP.LPC1[1] Using "######"
	If LP.LPC3[0] > 0 lps.pricetype$ = PriceTypeDesc$[LP.LPC3[0]]
	If LP.LPC3[0] < 0 lps.pricetype$ = PriceTypeDesc$[(50 - Abs(LP.LPC3[0]))]
	If LP.LPR[1]
		lps.pricetype$ = lps.pricetype$ + " # " + Str$(LP.LPR[1])
	End If 
	lps.freq$ = LP.LPR1[2] Using "######"
	lps.whse$ = LP.LPWH Using "##"
	lps.permtype$ = LP.LPEUN[2] Using "######"
	lps.permfactorum$ = XUNIT$(LP.LPC3[3],CCC)
	lps.permcostum$ = XUNIT$(LP.LPC3[4],CCC)
	lps.lprec$ = LPR using "##########"
  End Sub
!-------------------------------------------------------------------------
  Sub PM_delete_lp()
	Try
		! loop through all customers looking at perm price value
    	CUK$ = " ",CUK$
		Do
    		Search #CUC,3,1;CUK$,CUR,CUE
    		If CUE = 0
      			Read Record #CUC,CUR;CU.;
				if CU.LPPPCUST = LPPPCUST
					! build LPK$ and delete it
					temp$ = LPK$; temp$[1,6] = CUK$
					!
    				Search #LPC,2,1;temp$,LPR,LPE
    				If temp$[1,6] <> CUK$ Let LPE = 22
    				If Trim$(temp$[11,30]) <> Trim$(prod$) Let LPE = 22
    				If LPE=0
    					Read Record #LPC,LPR;LP.;
						Call delete_lp(temp$) ! this does delete
					End If
				End If
    		End If 
		Loop Until CUE
	Else
		ss=1001
	End Try
  End Sub
  
  Sub delete_lp(LPK$)  ! delete a lastprice record
	Try
		! write info to log
      	msg$="Deleting   rec:"+Str$(LPR)+" cust:"+LPK$[1,6]
		msg$=msg$+" prod:"+lpin.prodid$
		Call lpupdatelog(debug)
		if trackperm! Set up to pass info to perm price log file
		   PASSINFO[0]=LPC  !last price channel #
		   PASSINFO[1]=LPR  !last price record #
		   PASSINFO[2]=3    !flag as a deleted record
		   PASSINFO[3]=15   !manual delete from salespro
		   PASSINFO[4]=intsalesman !who delete it
		   call "logpermprice",intco, pplog$, permlog[], passinfo[],dlog$
		 end if
		!
		tempkey$=" ",tempkey$                                               
		tempkey$[1,40]=LPK$[1,40]                                           
		SEARCH #LPC,5,1;tempkey$,R1,E \ IF E OR R1<>LPR error 1001
		tempkey$[1,10]=LPK$[1,10];tempkey$[11,14]=LPK$[37,40]
		tempkey$[15,40]=LPK$[11,36]
		SEARCH #LPC,5,2;tempkey$,R1,E \ IF E OR R1<>LPR error 1001
		tempkey$[1,10]=LPK$[1,10];tempkey$[11,16]=999999-LP.LPR1[2] USING "######"
		tempkey$[17,46]=LPK$[11,40]
		SEARCH #LPC,5,3;tempkey$,R1,E \ IF E OR R1<>LPR error 1001
		tempkey$=" ",tempkey$;tempkey$[1,10]=LPK$[31,40]
		tempkey$[11,30]=LPK$[11,30];tempkey$[31,40]=LPK$[1,10]
		SEARCH #LPC,5,4;tempkey$,R1,E \ IF E OR R1<>LPR error 1001
		if lpdir5
		tempkey$=" ",tempkey$;tempkey$[1,20]=LPK$[11,30]
		tempkey$[21,30]=LPK$[1,10];tempkey$[31,40]=LPK$[31,40]
		SEARCH #LPC,5,5;tempkey$,R1,E \ IF E OR R1<>LPR error 1001
		Endif
	        Clear LP.
    	        Write Record #LPC,LPR;LP.;
		LET E=3 \ SEARCH #LPC,1,0;tempkey$,R1,E \ IF E error 1001
		!Clear LP.
    	!Write Record #LPC,LPR;LP.;
		! error 1001
	else
		ss=1001
	End Try
  End Sub
!----------------------------------------------------------------------
  Function PM_add_lp()
	Try
		! check product
		!
    	PRK$ = " ",PRK$;PRK$[1,12] = prod$
    	Search #PRC,2,1;PRK$,PRR,PRE
    	If Trim$(PRK$[1,12]) <> Trim$(prod$) Let PRE = 22
    	!
    	If PRE
      		Clear PR.
			Exit Function 1
    	Else 
      		Read Record #PRC,PRR;PR.;
    	End If 
    	!
		! check customer
		!
    	CUK$ = Val(cust$) Using "######"
    	Temp$ = " ",Temp$;Temp$ = CUK$
    	Search #CUC,2,1;CUK$,CUR,CUE
    	If CUK$[1,6] <> Temp$ Let CUE = 22
    	If CUE = 0
      		Read Record #CUC,CUR;CU.;
    	Else 
			Exit Function 1
    	End If 
		!
		!
		If CU.LPPPCUST=0 or CU.LPPPCUST=CU.C1[1]
			!  only add this one lastprice record
			Call add_lp(CU.C1[1])
			LPE=0 ! reset
    		ss = 0
		End If
		!
		!
		If CU.LPPPCUST and CU.LPPPCUST<>CU.C1[1]
			! this cust has a master so update both lprecs
			!
			Call add_lp(CU.C1[1])  ! child cust
			SavLPK$ = LPK$
			SavLPR = LPR
			!
			! build LPK$ and read it
			LPK$[1,6] = CU.LPPPCUST using "######"
			temp$ = LPK$
			!
   			Search #LPC,2,1;temp$,LPR,LPE
   			If Val(temp$[1,6]) <> CU.LPPPCUST Let LPE = 22
   			If Trim$(temp$[11,30]) <> Trim$(prod$) Let LPE = 22
   			If LPE>0 Call add_lp(CU.LPPPCUST) ! add master
			!
			! set vars back to orig cust for display
			LPK$ = SavLPK$
			LPR = SavLPR
			LPE=0  ! reset to success
		End If
		!
	Else
		ss=1001
	End Try
  End Function 0
!----------------------------------------------------------------------

  Sub add_lp(cust)
	Try
		Call GetPriceDetail(cust)
		Try
			temp$ = ps.cprice$ to "/"  
			temp = temp$
    		! set permprice to base
    		CNVTA = temp
    		CNVTU[0] = PR.PFU1[12]
    		CNVTU[1] = 0
    		CNVTU[2] = 2
    		PERM[0]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
		Else
			PERM[0]=0
		End Try
		!
		Try
			temp$ = ps.cost$ to "/"  
			temp = temp$
    		! set permcost to base
    		CNVTA = temp
    		CNVTU[0] = PR.PFU1[11]
    		CNVTU[1] = 0
    		CNVTU[2] = 2
    		PERM[1]=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
		Else
			PERM[1]=0
		End Try
		!
		! set default values
		!
		LP.LPC1[0]=cust
		LP.LP$ = PRK$
		temp$ = " ",temp$
		temp$ = Tim(8) using "&&", Tim(9) using "&&", Tim(10) using "&&"
		LP.LPC1[2]=temp$  ! today's date
		LP.LPC3[2]=PR.PFU1[9];LP.LPC3[3]=PR.PFU1[12];LP.LPC3[4]=PR.PFU1[11]
		LP.LPEUN[1]=PR.PFU1[10]
		LP.LPUNF[0]=1;LP.LPUNF[1]=1;LP.LPUNF[2]=1;LP.LPUNF[3]=1!dflt to base
		For counter = 0 to 3
		   if counter <3 let UOMREC=LP.LPC3[COUNTER+2] 
		   IF COUNTER=3 LET UOMREC=LP.LPEUN[1]!purchase unit diff spot
		   for uomloop=1 TO 7
		      IF uomrec = PR.PFU1[UOMLOOP]
			LET LP.LPUNF[COUNTER]=PR.PFU2[UOMLOOP-1]
		      END IF
		   NEXT UOMLOOP
		next counter
		IF P60$[30,30]="Y" LET LP.LPC3[3]=PR.PFU1[9]
		LP.LPC4[2]=PR.B[11];LP.LPMT$[1,1]=PR.A$[156,156];LP.LPC4[1]=PR.B[24]
		! IF P9$[32,32]="Y" AND W2[3] LET LP.LPC4[1]=W2[3]  ! whse vendor
		LP.LP2$[1,20]=PR.A$[93,112] ! venditemcode
		LP.LP2$[21,50]=PR.A$[9,38]  ! line desc1
		LP.LP2$[51,80]=PR.A$[63,92]  ! line desc2
		LP.LP2$[81,84]=PR.A$[152,155] ! commoditycode
		LP.LPC5[3]=-2
		LP.LPCURR[0]=0;LP.LPCURR[1]=0;LP.LPCPT=0;LP.LPCSDT=0
		If perm[0] LP.PERM[0]=PERM[0]
		If perm[1] LP.PERM[1]=PERM[1]
		!
		! for new "ADD" only where there is no update done of permanent price type
		! zero out price and cost for write, but restore for display on the screen
		! in the event the user wants to *update* with current price and cost
		!
		tmp_perm[0] = lp.perm[0] \ lp.perm[0] = 0
		tmp_perm[1] = lp.perm[1] \ lp.perm[1] = 0 
		LET E=2 \ SEARCH #LPC,1,0;tempkey$,LPR,E \IF E error 1001
    		Write Record #LPC,LPR;LP.;
		lp.perm[0] = tmp_perm[0]
		lp.perm[1] = tmp_perm[1]
		clear prvod[]
		clear prvoq[]
		b4key$=" ",b4key$
		mat write #lpc,lpr,424;prvod;
		mat write #lpc,lpt,436;prvoq;
		mat write #lpc,lpt,460;b4key$;
		tempkey$=" ",tempkey$                                               
		LPK$=LP.LPC1[0] USING "######"                                  
		LPK$[7,10]=LP.LPC3[1] USING "####"                             
		LPK$[11,22]=LP.LP$[1,12]                                    
		LPK$[23,30]="        "
		LPK$[31,36]=LP.LPC4[1] USING "######"  
		LPK$[37,40]=LP.LP2$[81,84]
		tempkey$[1,40]=LPK$
		SEARCH #LPC,4,1;tempkey$,LPR,E \ IF E error 1001
		tempkey$[1,10]=LPK$[1,10];tempkey$[11,14]=LPK$[37,40]
		tempkey$[15,40]=LPK$[11,36]
		SEARCH #LPC,4,2;tempkey$,LPR,E \ IF E error 1001
		tempkey$[1,10]=LPK$[1,10];tempkey$[11,16]=999999-LP.LPR1[2] USING "######"
		tempkey$[17,46]=LPK$[11,40]
		SEARCH #LPC,4,3;tempkey$,LPR,E \ IF E error 1001
		tempkey$=" ",tempkey$;tempkey$[1,10]=LPK$[31,40]
		tempkey$[11,30]=LPK$[11,30];tempkey$[31,40]=LPK$[1,10]
		SEARCH #LPC,4,4;tempkey$,LPR,E \ IF E error 1001
		if lpdir5
		tempkey$[1,20]=LPK$[11,30]
		tempkey$[21,30]=LPK$[1,10];tempkey$[31,40]=LPK$[31,40]
		SEARCH #LPC,4,5;tempkey$,LPR,E \ IF E error 1001
		endif

		!
      	msg$="Adding   rec:"+Str$(LPR)+" cust:"+LPK$[1,6]
		msg$=msg$+" prod:"+lpin.prodid$
		Call lpupdatelog(debug)
		!
		
	else
		ss=10001
	End Try
  End Sub
  
  !----------------------------------------------------------------------
	Sub GetPriceDetail(cust)
		! pass in customer and get ps. (price detail structure) set
		Try
			temp$ = cust using "######"
			whse$ = ""
			qty$=""
			qunit$=""
			punit$=str$(PR.PFU1[12])
			Call PriceDet(intCo,intSalesman,debug,dlog$,temp$,prod$,whse$,qty$,qunit$,PUNIT$,ps.,ii,ss,iLimit,arrSales[])
			! pricedet closes file so we must re-open
			CTLC = OpenFile(-9999,intCo) \ If CTLC = -1 Error 42
		Else
			Clear ps.
		End Try
	End Sub
  
  Sub lpupdatelog(debug)
    System "echo ''" + Msc$(0) + " " + msg$ + "'' >> " + lpdlog$
  End Sub 

  Sub updatelog(debug)
    If Not(debug) Exit Sub 
    System "echo ''" + Msc$(0) + " " + msg$ + "'' >> " + dlog$
  End Sub 

  Sub errTrap(pgmName$)
    msg$ = "error...",Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ",pgmName$
    Call updatelog(1)
  End Sub 

  Else   ! failure of initial Try
    Temp$ = ""
    Call errTrap(pgmName$)
  End Try 
End Sub  ! end of main sub
!  ss = 0
  !!
!End Sub 
