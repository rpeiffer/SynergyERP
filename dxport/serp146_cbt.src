!
! loadsave -w -n 100,10 -o prog/dxport/serp146_cbt.dl4 src/serp146_cbt.src
!
! New commission chargeback table maintenance.  Instead of just being 1
! entry in control files, allow for multiple tables which can be assigned
! to the customer level

Declare Intrinsic Sub InpBuf,String
Option Default Dialect IRIS1
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
!
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"
!
! *declare additional dl4 intrinsic subs & functionsDeclare Intrinsic Sub InpBuf,String
!
! *declare additional external libs & subs & functions
External Lib "ubsfunc.dl4"
Declare External Function openfile

dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[500],tmp2$[1000],b$[200]
b$=" ",b$
dim message$[150],webstr$[200]

include "src/inc/filecommcbt.inc"


!
! call dxopen()
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)


dim cbt. as commcbt

Dim k_cbt$[100],mode$[1]
dim 1%,newRec,cbdays[4]
dim 2%,tableNumber,cbpct[4]
dim 3%,r_cbt
dim 3%

ch_cbt = openfile(9601) \ if ch_cbt<0 error 42


if action2$ <> "GETLIST"
	call DxGet("TableNumber", tmp$)
	if tmp$ = ""
		e$ = "You must enter a commission chargeback table # (0-999999)."
		error 10000
	end if
	if tmp$ = "0"
		tableNumber = 0
	else
		tableNumber = tmp$
		if tableNumber < 1 or tableNumber > 999999
			e$ = "You must enter a valid commission chargeback table # (0-999999)."
			error 10000
		end if
	end if
	
	if tableNumber = 0 and Action2$ = "DELETE"
		e$ = "You cannot delete the default commission chargeback table (0)."
		error 10000
	end if
	
	k_cbt$ = tableNumber using "######"
	r_cbt = filegetcommcbt(e$,ch_cbt,"=",1,k_cbt$,cbt.)
	if r_cbt<0
		clear cbt.
		cbt.TableNumber = tableNumber
		newRec = 1
	end if
end if

ReturnStatus = 1 ! default good status
Message$=""
!
! main subroutine dispatcher
!
select case action2$
	case "GETLIST"
		! status section
		gosub BuildDroplist
	case "GETDATA"
		! status section
		gosub LoadData
	case "SUBMITDATA"
		! status section
		Message$="Record updated."
		gosub UnloadDataAndSave
	case "DELETE"
		! status section
		Message$="Record deleted."
		gosub DeleteData
	case else
		e$ = "Unknown action2: "+action2$ \ error 10000
endselect
! message should be set and returnstatus is the result
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
goto OutEnd:

! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************

!----------------------------------------------------------------------------
! build initial drop list of existing records
!----------------------------------------------------------------------------
BuildDroplist: !
	! Add section header and column defs
	tmp$=bsdel$+"Droplist"+fdel$+rdel$
	tmp$=tmp$+"ID"+fdel$+"Desc"+fdel$+rdel$
	call addToStr(e$,rstr$,tmp$)
	k_cbt$ = " ",k_cbt$
	do
		r_cbt = filegetcommcbt(e$,ch_cbt,">",1,k_cbt$,cbt.)
		if r_cbt<=0 exit do
		tmp$=str$(cbt.TableNumber)+fdel$+str$(cbt.TableNumber)
		tmp$=tmp$+" - "+cbt.Description$+fdel$+rdel$
		call addToStr(e$, rstr$, tmp$)
	loop
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! GETDATA call
!----------------------------------------------------------------------------
LoadData: !
	tmp$=bsdel$+"TableData"+fdel$+rdel$
	tmp$=tmp$+"TableNumber"+fdel$+"Description"+fdel$
	tmp$=tmp$+"ChargeBackType"+fdel$+"ChargeBackDays1"+fdel$
	tmp$=tmp$+"ChargeBackDays2"+fdel$+"ChargeBackDays3"+fdel$
	tmp$=tmp$+"ChargeBackDays4"+fdel$+"ChargeBackDays5"+fdel$
	tmp$=tmp$+"ChargeBackPercent1"+fdel$+"ChargeBackPercent2"+fdel$
	tmp$=tmp$+"ChargeBackPercent3"+fdel$+"ChargeBackPercent4"+fdel$
	tmp$=tmp$+"ChargeBackPercent5"+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$)
	tmp$=str$(cbt.TableNumber)+fdel$+cbt.Description$+fdel$
	tmp$=tmp$+str$(cbt.ChargeBackType)+fdel$+str$(cbt.ChargeBackDays1)+fdel$
	tmp$=tmp$+str$(cbt.ChargeBackDays2)+fdel$+str$(cbt.ChargeBackDays3)+fdel$
	tmp$=tmp$+str$(cbt.ChargeBackDays4)+fdel$+str$(cbt.ChargeBackDays5)+fdel$
	tmp$=tmp$+str$(cbt.ChargeBackPercent1)+fdel$+str$(cbt.ChargeBackPercent2)+fdel$
	tmp$=tmp$+str$(cbt.ChargeBackPercent3)+fdel$+str$(cbt.ChargeBackPercent4)+fdel$
	tmp$=tmp$+str$(cbt.ChargeBackPercent5)+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$+esdel$)
Return

!----------------------------------------------------------------------------
! SUBMITDATA call
!----------------------------------------------------------------------------
UnloadDataAndSave: !
	mode$ = "c" \ if newRec mode$ = "a"

	call DxGet("Description", tmp$) \ cbt.Description$ = tmp$,b$
	if rtrim$(cbt.Description$) = ""
		ReturnStatus = 0
		message$ = "You must enter a description"
		return
	end if
	call DxGet("ChargeBackType",tmp$) \ cbt.ChargeBackType = tmp$
	if cbt.ChargeBackType < 1 or cbt.ChargeBackType > 2
		ReturnStatus = 0
		message$ = "Invalid chargeback type"
		return
	end if
	for i = 0 to 4
		call DxGet("ChargeBackDays"+str$(i+1), tmp$)
		cbdays[i] = tmp$
		if cbdays[i]<0 or cbdays[i]>999 or fra(cbdays[i])
			ReturnStatus = 0
			message$ = "Days are 0-999 only"
			return
		Endif
		if i>0
			if cbdays[i] and cbdays[i-1]>cbdays[i] ! prev > curr
				ReturnStatus = 0
				message$ = "Number of days must be greater every level"
				return
			Endif
		Endif
		call DxGet("ChargeBackPercent"+str$(i+1), tmp$)
		cbpct[i] = tmp$
		if cbdays[i]=0 let cbpct[i]=0  ! no change
		if cbpct[i]<0 or cbpct[i]>100
			returnstatus=0
			message$="Invalid percent"
			return
		Endif
	next i
	! a final check of if is less days backwards
	x2=0
	For i=4 to 1 step -1
		if cbdays[i] ! is nonzero
			if x2=0 let x2=cbdays[i] ! curr level days
			if x2<cbdays[i-1] ! 4 to 3, 3-2, 2-1, 1-0
				returnstatus=0
				message$="Number of days must increase every level"
				return
			Endif
			if cbdays[i-1] let x2=cbdays[i-1] ! set to next level
		Endif ! of has days
	Next i
	cbt.ChargeBackDays1 = cbdays[0]
	cbt.ChargeBackDays2 = cbdays[1]
	cbt.ChargeBackDays3 = cbdays[2]
	cbt.ChargeBackDays4 = cbdays[3]
	cbt.ChargeBackDays5 = cbdays[4]
	cbt.ChargeBackPercent1 = cbpct[0]
	cbt.ChargeBackPercent2 = cbpct[1]
	cbt.ChargeBackPercent3 = cbpct[2]
	cbt.ChargeBackPercent4 = cbpct[3]
	cbt.ChargeBackPercent5 = cbpct[4]
	r_cbt = fileupdatecommcbt(e$,ch_cbt,mode$,r_cbt,cbt.)
	if r_cbt<0
		returnstatus=0
		message$="Error occurred adding / updating record"
		return
	end if
Return

!----------------------------------------------------------------------------
! DELETE call
!----------------------------------------------------------------------------
DeleteData: !
	if newRec Return ! new rec - nothing to actually delete
	r_cbt = fileupdatecommcbt(e$,ch_cbt,"d",r_cbt,cbt.)
	if r_cbt<0
		returnstatus=0
		message$="Error occurred deleting record"
		return
	end if
Return


OUTEND: Rem EXIT ROUTINE
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end
