! >>> Program 305
!
! description CASH RECEIPTS ACCEPT
!
! loadsave -w -n 100,10 -o prog/dxport/305.dl4 src/305.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dxRem BEDIT Version: 2.2 OBJECT CODE     Created: NOV 30, 2006  09:41:40
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/mx/mx305.src (univ2) [mary] {25529}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,VerifyDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
! start 
Try
Com P60$[50],1%,BANK,ALLBANK,2%,intco
! If Err 0 Gosub ERR_TRAP
Dim 1%,A,A8,A0[10],D5,E,F,G1,G7,H5[2],I,J,L9,M,N,S[2],Y,X[12],PD1[7],GL1[17]
Dim 1%,CLFLAG,FLAG,S2,ARMONTH
Dim 2%,DT3[1],TOTBANKREC,A1[2],dep1[7]
Dim 3%,A3[3],B[25],B0[1],C,C4[6],C0[4],D7,D9,G2[1],G6[1],H,H1[3],H4[11]
Dim 3%,DISCOUNT,FREIGHT,ARREF[1]
Dim 3%,H2,M1[9],M5[2],M9[9],T[6],T1[5],T9[9],T8[2],X2,A4,C10[5],ARL2[3],deptot
Dim 3%,ARREC,R5,ARL3[1],PAYREF,rec_rod
Dim 2%,A2[5],A9,B6,C1,C3[1],C5,D[8],D4,D0,F8,G[4],G5[3],I2,I3,L
Dim 2%,PAYTYPE,ARDATE,PAYREC,UNREC,ENTRY,UNAP,JLPDATE,JPDATE,PAYCUST
Dim 2%,P1,S1[14],R[23],V1,X1,Z,COMP,V4[8],ACCT,CLIENT,H0[1],M6,ARL1[10]
Dim B$[25],C$[70],C1$[24],F$[16],G$[40],K20$[50],K21$[50],V$[30]
Dim K5$[50],K6$[50],keyrod$[50]
Dim K1$[20],K2$[30],K3$[30],K4$[20],K13$[30],P8$[7],P9$[50],X$[20],P61$[256]
Dim 2%,POSTPER,CURRDATE,DEPFLAG

dim 3%,ar_rec,2%,ar2[5],1%,G3[1]
!
! sales commission variables
dim k17$[16],smat$[2]
dim 1%,sc_s4[1],SplitFlag
dim 2%,sc_s1[3],sc_s3[1]
dim 3%,sc_s2[1],sc_s6[1],sc_s7[2],ocs1[3]
! audit variables
dim k18$[30],key2$[32],source$[10],cas$[60]
dim 1%,as1[3],as4[1]
dim 2%,as2[1]
dim 3%,as3[5],aorigcomm,new_comm,merchadj
!
! invoice history variables
dim kINVH$[12]
dim 2%,slsm[9],SplitPercent
dim 3%,smer[4],totalMer

Dim 3%,currvar
Dim 1%,DETFLAG,USER
Dim 2%,GLD[7],GLD$[12],GLD1$[30],GLD2$[2],4%,GLD1,REC_GLD,1%,GLD2[1]
Dim 3%,GLDTRN[1],GLAMT,GLD0$[10]
Dim GLDKEY1$[50],GLDKEY2$[50],CUSTNAME$[40],Accpt$[1]
Dim H$[50],DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],blank$[50]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]

DEF FNR(X)=SGN(X)*(INT(ABS(X)*100+.5)*.01)

! call dxopen() ! needed?

! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

USER = GetUIDRec(e$, intCo, userid$)
COID=IntCo ! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
Close #1 ! getsession open cntrl# as READONLY
F$="cntrl/cntrl"+Str$(COID)
Open #1,f$
For I = 1 To 12
  Read J
  X[I] = J
Next I
Data "0","31","59","90","120","151","181","212","243","273","304","334"
Mat Read #1,60,50;P60$; \ Mat Read #1,61,0;P61$;
Mat Read #1,0,108;ARDATE;
MAT READ #1,3,172;CURRDATE;
X$ = ARDATE Using "&&&&&&" \ POSTPER = X$[1,4]
!Ropen #77,"cntrl/PRTDFLT" \ Ropen #78,"cntrl/USERPORT"
!Mat Read #78,Spc(6),10;A4; \ If Not(A4) Let A4 = Spc(6)
!Mat Read #77,A4,0;PD1;
!Close #77 \ Close #78
let blank$=" ",blank$
COMP = intco 
eflg=0
F$ = COMP Using "CNTRL#"
For X = 2 To 21
  Read J
  If J = -1 Goto L_850
  if J < 0
	  Mat Read #1,88,abs(J);F$;
	  ropen #x,f$
  else
	Mat Read #1,88,J;F$;
	Open #X,F$
  end if
L_850: Next X
Data "1536","-1","1808","1504","-1","-1","-1","-1","1456","1440","-1","-1","-1","-1","1488","2240","-1","-1","-1","-1136"
if P61$[92,92] = "Y" OR P61$[93,93] = "Y" ! commission adjustments are possible
	open #18,"4/COMMAUDIT"+str$(intco)
end if
if p61$[94,94]="Y"
	let f$="3/SORDDEP"+STR$(INTCO)
	OPEN #19,F$
endif
! Print 'CS';"-mx305-"; Tab 20;"CASH RECEIPTS ACCEPT";
Mat Read #1,19,50;P9$;
returnstatus=0
Call DXGet("M_ACCPT",tmp$)
!F$=UCase$(Trim$(tmp$))
!if F$="1" let f$="Y"
!let f$="Y" ! default to yes
!If F$ <> "Y" 
	!Let Message$="OK - NO UPDATE"
	!Call SetOutput(e$,rstr$,1,message$) ! send an ok w/0 message
	!Goto L_9010
!Endif
IF tmp$<>"" let Accpt$="Y"
If P9$[49,49] = "Y" 
	Read #1,20,20;S;
	If s<>0 
		Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Electronic Cash Receipts In Process. Try Accept Later."
		!Print @0,22;'CL';"LOCKBOX INFORMATION IS IN PROCESS ";
		!Print " - CANNOT ACCEPT";
		!Print @0,23;'CL';"PRESS <CR> TO RETURN TO THE MENU ";
		!Input ""F$
		! Goto L_9010
	endif
endif
Rem IF P9$[17,17]<>"Y" GOTO L_970:
Mat Read #1,52,60;P8$; \ Mat Read #1,52,0;S1; \ Mat Read #1,51,0;GL1;
Mat Read #1,0,120;ARMONTH;
If ARMONTH = S1[8]
	Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Cash Receipts (320/306) has been accepted For the Month. "
	!Print 'CR CL RB';"CASH RECEIPTS HAS BEEN ACCEPTED(320/306) FOR THE MONTH"
	!Print 'CL';"PRESS <CR> TO RETURN TO THE MENU";
	!Input ""F$
	! Goto L_9010
End If 
If ARMONTH = S1[5] And P9$[17,17] = "Y"
	Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Account Receivable (405) has been accepted For the Month. "
	!Print 'CR CL RB';"ACCOUNTS RECEIVABLE HAS BEEN ACCEPTED(405) FOR THE MONTH"
	!Print 'CL';"PRESS <CR> TO RETURN TO THE MENU";
	! Input ""F$
	!Goto L_9010
End If 
If P9$[17,17] ="Y" 
	F$ = COMP Using "4/GLCRDETL#"
	Open #55,F$
	F$ = COMP Using "3/SCRMOH#" \ Open #6,F$
	F$ = COMP Using "3/SCRMOL#" \ Open #7,F$
	F$ = COMP Using "6/GLCRTEMP#" \ Open #12,F$
	F$ = COMP Using "3/SCRMOA#" \ Open #13,F$
	Mat Read #1,88,464;F$; \ Open #8,F$
	Mat Read #1,88,48;F$; \ Open #14,F$
	If GL1[3]<>0 ! gl by warehouse or division
		If P8$[7,7] = "W"  let clflag=99 ! by warehouse
		if P8$[7,7] = "D"  let clflag=99 ! by division 
		CLFLAG = 99
	endif
endif
If P61$[3,3] = "Y"
  F$ = COMP Using "2/SARDETL#" \ Open #20,F$
End If 
!Print 'CS';"-mx305-"; Tab 20;"CASH RECEIPTS ACCEPT";

Read #1,0,108;D0;
TOTBANKREC = Chf(10) - 1
if p60$[6,6]<>"Y"
	Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Multiple Banks Option Not Available "
	goto L_9010:
endif
If P60$[6,6] = "Y" ! multiple banks
  Read #1,20,8;S;
  If S Goto L_1240
L_1030: ! BANK = PD1[7] \ If Not(BANK) Let BANK = 1
  !Print @0,23;'CL';"Enter Bank # to process, 0: All Banks, E: End ";
  !Print @1,5;'CL';"BANK NUMBER ";BANK
  !Input @14,5;""F$
  !Call String(1,F$)
 !!!! **** assign bank # in F$ !!!!
 Call DXGet("M_BANK",tmp$)
 let f$=tmp$
 if Accpt$="Y" let f$="0"
  If Len(F$) > 2
    Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Invalid Bank Number "+ F$
    !goto outend: ! !Print @0,23;'CL RB';"Invalid";
    !Signal 3,10 \ Goto L_1030
  End If 
  !If F$ = "E" Goto OUTEND
  !If F$ = "" Let F$ = BANK Using "##"
  !Print @14,5;'CL'; \ Print F$
  If F$ = "0"
    !Print @17,5;"All Banks";
    ALLBANK = 99
    BANK = 0
    BANKTOPROC = 0
    For REC = 1 To TOTBANKREC
      Read #10,REC,36;S;
      If S = 4
        BANKTOPROC = 99
        Goto ENDBNKPRCCHK
      End If 
    Next REC
ENDBNKPRCCHK: Rem end checking if in process
    If Not(BANKTOPROC)
	Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- No Banks to Process"
      !Print @0,23;'CL RB';"No Banks To Process ";
      !Signal 3,30
      Goto L_9010:
    Else 
      Goto L_1600
    End If 
  Else 
    BANK = F$
    If BANK <= 0 Or BANK >= 100
      Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Invalid Bank "+ str$(bank) 
      !Signal 3,20
      !Goto L_1030
      goto l_9010: ! goto outend:
    End If 
    Read #10,BANK,36;S;
    If S = 4 Goto L_1600
L_1120: Goto L_1230
  End If 
Else 
  Read #1,20,8;S;
  If S = 4 Goto L_1600
End If 
L_1230: Rem CAN'T RUN
L_1240: Eflg=Eflg+1!  Print @0,22;'CL RB';
If S = 0 let Message$=Message$+STR$(EFLG)+"- Journal Must Be Run. " !  Print "JOURNAL MUST BE RUN";
If S = 1 let Message$=Message$+STR$(EFLG)+"- Entry In Process. " !  Print "ENTRY IN PROGRESS";
If S = 2 let Message$=Message$+STR$(EFLG)+"- Verification List In Process. " ! Print "VERF.LIST IN PROGRESS";
If S = 3 let Message$=Message$+STR$(EFLG)+"- Journal In Process. " ! Print "JOURNAL IN PROGRESS";
If S = 5 let Message$=Message$+STR$(EFLG)+"- Accept in Process. " ! Print "ACCEPT IN PROGRESS";
!let message$=message$+ " Cannot Accept " ! Print " - CANNOT ACCEPT";
!Print @0,23;'CL';"PRESS <CR> TO RETURN TO THE MENU ";
!Input Len (16384 + 1);""F$
! goto outend:
L_1600: Rem CHECK FOR DEFAULT IN GLARCNTRL
If P9$[17,17] <> "M" Goto L_1610
!Print @0,22;'CL RB';"*WARNING*: GENERAL LEDGER IS NOT ACTIVATED!!!!!";
!Print @0,23;'CL';"Do you wish to continue? "; \ Input Len (16384 + 3);""F$
!Call String(1,F$)
!If F$ <> "YES" Goto OUTEND
L_1610: If P9$[17,17] <> "Y" Goto L_1700
K4$ = " ",K4$ \ K4$[1,6] = "DFAULT"
Search #8,2,1;K4$,R[8],E \ If Not(E) Goto L_1700
eflg=eflg+1
Message$=Message$+STR$(EFLG)+"- G/L - A/R Interface Default Record Is Not Set-Up "
!goto outend:

!!Goto L_1120
L_1700: ! Print @0,5;'CE';"DO YOU WANT TO ACCEPT CASH RECEIPTS?  (Y/N) ";
!Input Len (16384 + 1);""X$
!Call String(1,X$)
!let X$="Y" 
!If X$ = "N" Goto OUTEND
!If X$ <> "Y" Goto L_1700
If P9$[17,17] = "Y" ! Goto L_1010
	K3$ = " ",K3$ \ Search #12,2,1;K3$,R[12],E 
	!LET EFLG=0 ! ****REM OUT ****
	!LET MESSAGE$="" ! **** REM OUT ****
	!GOTo L_1940: ! 305A ! **** REM OUT ****
	if not(e) ! key is already there 
		Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Cash Receipts - General Ledger Interface in Process. Try Again Later "
		goto L_9010:
	endif
	If E>1 Gosub ERR_SEARCH
	!Print @0,22;'CL RB';"G/L INTERFACE IN PROCESS!!! TRY LATER..."; \ Signal 3,30
	if eflg<>0 goto L_9010: ! error occured donot set space record !Goto L_9010
	! set space record in 
	K3$ = " ",K3$
	E = 2 \ Search #12,1,0;K3$,R[12],E \ If E Gosub ERR_SEARCH
	Search #12,4,1;K3$,R[12],E \ If E Gosub ERR_SEARCH
endif
if eflg<>0 goto L_9010: ! error has occured

If Not(BANK)
  Read #1,20,8;S
  S = 5 \ Write #1,20,8;S;
  Read #1,20,34;I2;
Else 
  Read #10,BANK,36;S
  S = 5 \ Write #10,BANK,36;S;
  Read #10,BANK,40;I2;
End If 
! Print @0,23;'CL';"PROCESSING.... PLEASE WAIT....";
If P9$[17,17] <> "Y" Goto L_1900
K3$ = " ",K3$
L_1820: Search #12,3,1;K3$,V1,E
If E = 2 Goto L_1900
If E Gosub ERR_SEARCH
Search #12,5,1;K3$,V1,E
If E Gosub ERR_SEARCH
E = 3 \ Search #12,1,0;K3$,V1,E
If E Gosub ERR_SEARCH
Goto L_1820
L_1900: Rem start bank process
If ALLBANK
  For BANK = 1 To TOTBANKREC
    Read #10,BANK,36;S
    If S = 4
      S = 5
      Write #10,BANK,36;S;
      Read #10,BANK,40;I2;
      Gosub L_2000
      Gosub L_8000
      If P9$[17,17] = "Y"
        Gosub L_4000
      End If 
    End If 
  Next BANK
  If P9$[17,17] = "Y" Gosub L_7300
  BANK = 0
  Goto L_1940
End If 
Gosub L_2000
Gosub L_8000
If P9$[17,17] ="Y" 
	Gosub L_4000
	Gosub L_7300
endif
L_1940: Chain "305a.dl4" ! MX305A" !!!! --- mtg ----

L_2000: Rem * * * * STARTS HERE * * * * *
B$ = " ",B$ \ B$ = I2 Using " 1#####"
If BANK Let B$[1,2] = BANK Using "##"
L_2010: Search #2,3,1;B$,L,E \ If E > 2 Gosub ERR_SEARCH
If E Return 
A8 = B$[1,2]
If Not(BANK)
  If A8 <> A9 If A9 Gosub L_8000
Else 
  If A8 > BANK Return 
End If 
A9 = B$[1,2]
I3 = B$[3,7]
If I3 <= I2 Goto L_2010
Mat Read #2,L;S;
Mat Read #2,L,6;D;
Mat Read #2,L,44;T;
E = 0
If D[4] > 0 Let X2 = D[4] \ Gosub L_7820
ROCKO = 0
If E > 0 Gosub L_3300 \ Mat Write #2,L,6;D;
If Not(D[1]) Goto L_2100
If Not(D[7]) And T[4] <> 0
  Read #4,D[1],190;C1
  C1 = C1 + T[4]
  Write #4,D[1],190;C1;
End If 
If Not(T[1]) Goto L_2100
IF S[0]=6 GOTO L_2100 ! journal entry
Mat Read #4,D[1],200;C3;
Gosub L_2600 \ If JLPDATE > JPDATE Goto L_2096
Mat Read #4,D[1],210;C4 \ C4[6] = T[1]
If S[0] <> 5 Let C3[1] = D[4]
Mat Write #4,D[1],200;C3 \ Mat Write #4,D[1],210;C4;
L_2096: Mat Read #4,D[1],624;C10 \ C10[2] = C10[2] + T[1] \ Mat Write #4,D[1],624;C10;
L_2100: Rem GOSUB L_5000: !! NO DELETE TILL EOM
If X1 = D[8] Goto L_2135
let depflag=0
X1 = D[8]
B6 = 0
B6 = D[6]
If Not(S) Goto L_2010
F = 0
L_2135: If F > 0 Goto L_2150
T1 = T1 + T[1]
L_2150: If C1$ <> "" Goto L_2165
If T = 0 Goto L_2165
C1$ = T
L_2165: On S Goto L_2175,L_2210,L_2240,L_2250,L_2275,L_2290,paydeposit,app_dep,del_dep
Goto L_2325
L_2175: Rem TYPE 1 APPLIED
Gosub L_2700
If Not(T[3]) If Not(T[2]) Goto L_2320
If S[2] > 5 Goto L_2260
Gosub L_2800
T1[3] = T1[3] + T[3]
Goto L_2320
L_2210: Rem TYPE 2 UNAPPLIED
Gosub L_2700
T1[3] = T1[3] + T[3]
Goto L_2320
L_2240: T1[3] = T1[3] + T[3]
Goto L_2320
L_2250: Rem TYPE 4 JE DR
L_2260: T[3] = T[2]
T1[3] = T1[3] - T[2]
Goto L_2320
L_2275: Rem TYPE 5 NF
T[3] = T[2]
T1[3] = T1[3] - T[2]
L_2290: Rem TYPE 6 G/L
If F Goto L_2305
Gosub L_3100
M9 = M9 - T[2] + T[3]
Goto L_2320
!!! TYPE 7
paydeposit: ! type 7 - but deposit on account
If F Goto L_2305
deptot = deptot - T[2] + T[3]
if p61$[94,94]<>"Y" goto L_2320
let keyrod$=" ",keyrod$
let keyrod$[1,6]=d[0] using "######" ! customer code
let keyrod$[7,12]=d[5] using "######" ! order #
let keyrod$[13,14]=d[6] using "##" ! deposit number
search #19,2,1;keyrod$,rec_rod,e
if not (e)
	mat read #19,rec_rod,0;DEP1;
	LET DEP1[6]=POSTPER
	mat write #19,rec_rod,0;DEP1;
endif
Goto L_2320

app_dep: ! type 8 -applied to invoice
If F Goto L_2305
deptot = deptot - T[2] + T[3]
Goto L_2320

del_dep: ! type 9 -delete deposit
If F Goto L_2305
deptot = deptot - T[2] + T[3]
Goto L_2320

L_2305: T1[4] = T1[4] + T[2]
T1[5] = T1[5] + T[3]
T8[B6] = T8[B6] + T[2]
L_2320: F = 1
L_2325: If S <> 6 Gosub L_3500
if s>6 goto skipcommission: ! bypass commissions 
! commission adjustments
!
if not(T[4]) goto SkipCommission ! no discounts taken - skip
! terms discount and we don't do adjustments for this? skip
if not(d[7]) and P61$[93,93] <> "Y" goto SkipCommission:
if d[7]
	! other discount - if we don't do adjustments - skip
	if p61$[92,92] <> "Y" goto SkipCommission:
	! see if this type of "other" discount is supposed to
	! create a commission adjustments, if not, skip it
	Mat Read #16,d[7],36;G3;
	if not(g3[0]) goto SkipCommission:
end if
ar_rec = d[2] \ if not(ar_rec) ar_rec = d[3]
artype = 0
if ar_rec ! make sure this is an invoice or credit transaction
	mat read #5,ar_rec,0;ar2;
	mat read #5,ar_rec,316;arref;
	let artype=int(fra(ar2[3])*100)
end if
if artype <> 1 and artype <> 6 goto SkipCommission:
gosub DoCommission: ! everything checks out - do it
SkipCommission: ! no commission adjustments
If P61$[3,3] = "Y" Gosub L_5000
Goto L_2010
L_2600: Rem LAST PAY DATE CHECK
X2 = D[4] \ Gosub L_7820 \ X2 = 0
JPDATE = X2
X2 = C3[1] \ Gosub L_7820 \ X2 = 0
JLPDATE = X2
Return 
L_2700: T1[1] = T1[1] + T[4]
If D[7] < 0 Let D[7] = 0
If D[7] > (Chf(16) - 1) Let D[7] = 0
If D[7] > 0 Let T9[1] = T9[1] + T[4] Else Let T9[0] = T9[0] + T[4]
If T[4] Gosub L_3200
T1[2] = T1[2] + T[6]
Return 
L_2800: Rem CALCULATE LAST PAYDATE & AMOUNT
If Not(D[2]) Goto L_2980
C1 = 0 \ P1 = 0
Mat Read #5,D[2],24;A3;
If (A3 - A3[1] - A3[2]) Goto L_2980
Mat Read #5,D[2];A2;
Mat Read #5,D[2],190;A1;
Mat Read #5,D[2],316;ARREF;
If Int(Fra(A2[3]) * 100) > 5 Goto L_2980
If A2[4] = 0 Goto L_2980
X2 = A2[4]
Gosub L_7900
If FLAG = 0 Gosub L_3340 \ Mat Write #5,D[2];A2;
Read #4,D[1],182;C1;
Read #4,D[1],186;P1
X2 = A2[4] \ Gosub L_7840
X$ = DT3[0] Using "&&&&&&"
Gosub L_3000
D7 = C
If D[4] = 0 Goto L_2960
X$ = D[4] Using "######"
Gosub L_3000
D9 = C - D7
C1 = ((P1 * C1) + D9) / (P1 + 1)
P1 = P1 + 1
Write #4,D[1],182;C1
Write #4,D[1],186;P1
L_2960: Write #4,D[1];;
L_2980: Return 
L_3000: Rem ...DAY OF CENTURY ROUTINE
X2 = X$;X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
If Not(E)
  C = X$[1,5]
Else 
  !Print 'RB CL CR';"ERROR IN DATE CONVERSION. CUSTOMER #";D[0]
  !Print "TRANSACTION/INVOICE #";T[0];" PLEASE NOTE INFORMATION,"
  !Print "AND INFORM UNIVERSAL TO CORRECT AVERAGE AGE COMPUTATIONS"
  !Print "PRESS <CR> TO CONTINUE ";
  C = 0
  !Input ""C$
End If 
Return 
L_3100: Rem OTHER RECEIVABELS
R[11] = D[5]
Mat Read #11,R[11],30;H2
H2 = H2 - T[2] + T[3]
Mat Write #11,R[11],30;H2;
Return 
L_3200: Rem OTHER DISCOUNTS
R[9] = D[7]
Mat Read #16,R[9],30;H2
H2 = H2 + T[4]
Mat Write #16,R[9],30;H2;
Return 
L_3300: Rem BAD DATE - WE NEED A GOOD DATE-WMB
X$ = D[4] Using "&&&&&&"
Gosub L_3400
!Print "THE DATE IS THE PAYMENT DATE"
Gosub L_3460
D[4] = C
Return 
L_3340: Rem - BAD DATE IS FROM A/R & JULIAN
X2 = A2[4]
Gosub L_7840
X$ = DT3[0] Using "&&&&&&"
Gosub L_3400
!Print "THE DATE IS THE INVOICE DATE & THE INVOICE # IS:";ARREF[0]
!Print "NOTE:THE DATE MAY LOOK CORRECT BECAUSE IT IS A BEST GUESS"
Gosub L_3460
K5$ = " ",K5$
K5$[1,6] = A2[2] Using "######"
K5$[7,12] = X2 Using "######"
K5$[13,22] = ARREF[0] Using "##########"
K5$[23,23] = Int(Fra(A2[3]) * 100) Using "#"
Search #5,4,2;K5$,D[2],E
If E  gosub err_search: ! Print 'RB CR';"ERROR IN A/R DATE CONVERSION. RECORD#";D[2];"NOTE INFORMATION & CALL UNIVERSAL" \ Input "PRESS <CR> TO CONTINUE"C$ \ Goto L_3399
K5$[7,12] = A2[4] Using "######"
K5$[24] = ""
Search #5,2,2;K5$,R5,E
Search #5,5,2;K5$,R5,E
If E  gosub err_search: ! Print 'RB CR';"ERROR IN A/R DATE CONVERSION. RECORD#";D[2];"NOTE INFORMATION & CALL UNIVERSAL" \ Input "PRESS <CR> TO CONTINUE"C$
K6$ = " ",K6$;K6$[1,6] = A1[1] Using "######"
K6$[7] = K5$[1,24]
K6$[30] = ""
Search #5,2,3;K6$,R5,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Search #5,5,3;K6$,R5,E \ If E Gosub ERR_SEARCH
End If 
K6$[13,18] = X2 Using "######"
Search #5,4,3;K6$,D[2],E \ If E Gosub ERR_SEARCH
K6$ = " ",K6$;K6$[1,6] = A1[1] Using "######"
K6$[7,22] = K5$[7,22]
K6$[23] = K5$[1,6];K6$[29] = K5$[23]
K6$[30] = ""
Search #5,2,5;K6$,R5,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Search #5,5,5;K6$,R5,E \ If E Gosub ERR_SEARCH
End If 
K6$[7,12] = X2 Using "######"
Search #5,4,5;K6$,D[2],E \ If E Gosub ERR_SEARCH
A2[4] = X2
L_3399: Return 
L_3400: Rem BAD DATE ROUTINES- MESSAGES & DATE CK
Mat Read #2,L,86;C$;
!Print 'RB CR CL';"A BAD DATE WAS ENCOUNTERED DURING THE C/R ACCEPT. THE"
!Print 'CL';"FOLLOWING DATE WAS FOUND(DISPLAYED IN MM/DD/YY FORMAT):";
!Print X$[3,4];"/";X$[5,6];"/";X$[1,2]
!Print "CUSTOMER # ";D[0];" NAME: ";C$[1,30]
!Print "TRANSACTION/INVOICE # ";T[0]
Return 
L_3460: ! Print "PLEASE ENTER THE CORRECT DATE (IN YYMMDD FORMAT): ";
! Input ""X$
! ****** default to system date *****
x$=CURRDATE USING "&&&&&&" ! YYMMDD FORMAT
X2 = X$
C = X2
E = 0
Gosub L_7820
ROCKO = 0
If E = 1 gosub err_search: ! Print 'RB';"INVALID DATE!" \ Signal 3,10 \ Goto L_3460
Return 
L_3500: Rem UPDATE ENTRY #
If Not(D[2]) Goto L_3550
Mat Read #5,D[2],154;V4
V4[8] = D[8]
Mat Write #5,D[2],154;V4;
L_3550: If Not(D[3]) Goto L_3590
Mat Read #5,D[3],154;V4
V4[8] = D[8]
Mat Write #5,D[3],154;V4;
L_3590: Return 
L_4000: Rem MONTHLY C/R UPDATE
B$ = I2 Using " 1#####" \ X1 = 0
If BANK Let B$[1,2] = BANK Using "##"
L_4015: E = 0 \ Search #2,3,1;B$,L,E \ If E = 2 Return 
If E Gosub ERR_SEARCH
I3 = B$[3,7]
If Not(BANK) Goto L_4040
A8 = B$[1,2] \ If A8 > BANK Return 
L_4040: If I3 <= I2 Goto L_4015
Mat Read #2,L,0;S; \ If Not(S) Goto L_4015
ACCT = B$[1,2]
If CLFLAG
  Mat Read #10,ACCT,188;CLIENT; \ If Not(CLIENT) Let CLIENT = S1[0]
Else 
  CLIENT = S1[0]
End If 
Mat Read #2,L,6;D; \ Mat Read #2,L,42;S2; \ Mat Read #2,L,44;T;
Mat Read #2,L,86;C$; \ Mat Read #2,L,156;C5;
mat read #2,L,180;CURRVAR;
B0[0] = 0 \ B0[1] = 0
B0[0] = S2
If Not(D[1]) Goto L_4110
If B0[0] Goto L_4110
Mat Read #4,D[1],544;C0;
B0[0] = C0[4]
L_4110: G5[1] = S[1] \ If Not(G5[1]) Let G5[1] = 1
If X1 If X1 = D[8] Goto L_4200
CUSTNAME$ = C$[1,40]
If S >5 and s<10 ! journal entry and deposits
 PAYTYPE = S[2]
  If Not(D[0]) ! je and no customer code
    CUSTNAME$[1,30] = C$[41,70]
    CUSTNAME$[31,40] = C$[31,40]
  else
	if s>6 and s<10 ! deposits
		if rtrim$(c$[31,40])="" and d[5]<>0
			let c$[31,33]="SO#"
			let c$[34,40]=str$(d[5])+blank$
		endif
		paytype=s*(-1)
		CUSTNAME$[31,40]=C$[31,40]
	endif
  End If 
 
Else 
  PAYTYPE = S[2]
  If D[2] Let PAYREC = D[2] Else Let PAYREC = D[3]
  If PAYREC ! a/r to rec
    Mat Read #5,PAYREC,0;A2;
    Mat Read #5,PAYREC,316;ARREF;
    If T[0] = ARREF
      PAYTYPE = Int(Fra(A2[3]) * 100)
    End If 
  End If 
End If 
F8 = 0 \ G$ = " ",G$
For I = 0 To 4
  G[I] = 0
  If I < 2 Let G2[I] = 0
Next I
L_4145: E = 2 \ Search #6,1,0;K1$,V1,E \ If E Gosub ERR_SEARCH
If Not(V1) Goto L_4145
K1$ = " ",K1$ \ K1$[1,4] = CLIENT Using "####"
K1$[5,6] = B$[1,2] \ K1$[7,11] = D[8] Using "#####"
Search #6,4,1;K1$,V1,E \ If E Gosub ERR_SEARCH
G[0] = D[8] \ G[1] = D[4] \ G[2] = D[0] \ G[3] = B$[1,2]
G1 = S[2] \ G$[1,40] = CUSTNAME$ \ G2[1] = T[0] \ G[4] = CLIENT
Mat Write #6,V1,0;G \ Mat Write #6,V1,20;G1
Mat Write #6,V1,22;G$ \ Mat Write #6,V1,62;G2
X1 = D[8] \ R[6] = V1
R[6] = V1
L_4200: Rem START ACCOUNT UPDATE HERE
G5 = D[8]
On S Goto L_4230,L_4300,L_4400,L_4450,L_4500,L_4600,gldeposit,glapp_dep,gldel_dep
L_4230: Rem APPLIED INVOICE/PAYMENT
If Not(T[2] + T[3]) Goto L_4265
If Not(D[2]) Goto L_4265
Mat Read #5,D[2],124;A0;
B0[0] = A0[5]
B0[1] = A0[6]
L_4265: If (T[2] + T[3]) Gosub L_6000
If T[1] Gosub L_6100
If T[4] Gosub L_6200
If T[6] Gosub L_6300
IF P61$[136,136]="Y" and currvar<>0 gosub L_6400
Goto L_4015
L_4300: Rem UNAPPLIED
If T[1] Let E = 5 \ Gosub ERR_SEARCH
Gosub L_6000
Goto L_4015
L_4400: Rem WRITE OFF #3
F8 = D[6]
If T[1] Let E = 5 \ Gosub ERR_SEARCH
Gosub L_6000
If (T[4] + T[6]) Let E = 5 \ Gosub ERR_SEARCH
Goto L_4015
L_4450: Rem #4--HOW DID THIS HAPPEN
E = 5 \ Gosub ERR_SEARCH
L_4500: Rem RETURN CHECKS #5
If T[1] Gosub L_6100
Gosub L_6000
If (T[4] + T[6]) Let E = 5 \ Gosub ERR_SEARCH
Goto L_4015
L_4600: Rem J/E #6 & WRITE OFFS
If F8 Goto L_4800
If D[6] Goto L_4800
If Not(T[1]) Let E = 5 \ Gosub ERR_SEARCH
Gosub L_6100
If Not(D[5]) Let E = 5 \ Gosub ERR_SEARCH
R[11] = D[5]
Mat Read #11,R[11],24;H;
DETFLAG = 99
GLAMT = T[2] - T[3]
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + T[2] - T[3]
Gosub L_7250
Goto L_4015

gldeposit: ! type 7 - deposit
If Not(T[1]) Let E = 5 \ Gosub ERR_SEARCH ! no bank amount 
Gosub L_6100 ! bank gl account
gosub L_6900 ! look in glar cntrol
h=h4[7] !  gl account # for deposit
DETFLAG = 99
GLAMT = T[2] - T[3]
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + T[2] - T[3]
Gosub L_7250
Goto L_4015

glapp_dep: ! type 8 - applied deposit 
gosub L_6900 ! look in glar cntrol
h=h4[7] !  gl account # for deposit
PAYTYPE=9
DETFLAG = 99
GLAMT = T[2] - T[3]
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + T[2] - T[3]
Gosub L_7250
Goto L_4015

gldel_dep: ! type 9 - applied deposit 
gosub L_6900 ! look in glar cntrol
h=h4[7] !  gl account # for deposit
PAYTYPE=9
DETFLAG = 99
GLAMT = T[2] - T[3]
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + T[2] - T[3]
Gosub L_7250
Goto L_4015


L_4800: Rem WRITE OFF
Gosub L_6900
H = H4[9]
GLAMT = T[2] - T[3]
DETFLAG = 0
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + T[2] - T[3]
Gosub L_7250
Goto L_4015
L_5000: Rem SECTION FOR ARDETL
Mat Read #2,L;S; \ Mat Read #2,L,6;D; \ Mat Read #2,L,44;T;
IF S=8
	let depflag=99
	return
endif
UNCHK = 0
If ENTRY = D[8] And PAYREC <> 0 And S = 2 And S[2] = 4 And D[3] <> 0
  D[2] = D[3];D[3] = 0
  Goto L_5011
End If 
If S <> 1 Return 
L_5011: If ENTRY <> D[8]
  DISCOUNT = 0;FREIGHT = 0;PAYREC = 0;UNAP = 0;PAYREF = 0;PAYTYPE = 0;PAYCUST = 0
  ENTRY = D[8]
  If Not(T[1]) Gosub L_5600
End If 
If PAYREC And D[3] = 0 Let D[3] = PAYREC
If UNAP Goto L_5400
If D[3]
  Mat Read #5,D[3],0;A2;
  Mat Read #5,D[3],190;A1;
  Mat Read #5,D[3],316;ARREF;
  PAYREF = ARREF[0];PAYTYPE = Int(Fra(A2[3]) * 100);PAYREC = D[3];PAYCUST = A2[2]
End If 
If D[2]
  Mat Read #5,D[2],0;A2;
  Mat Read #5,D[2],190;A1;
  Mat Read #5,D[2],316;ARREF;
End If 
For X = 0 To 10 \ ARL1[X] = 0 \ Next X
For X = 0 To 3 \ ARL2[X] = 0 \ Next X
ARL1[0] = D[0];ARL1[5] = 305;ARL1[6] = ARDATE
ARL1[7] = D[4];ARL1[9] = D[8]
If (T[2] + T[3]) And D[2] <> 0 !AR AMT
  ARL1[0] = A2[2]
  ARL3[0] = ARREF[0];ARL1[2] = Int(Fra(A2[3]) * 100)
  ARL3[1] = PAYREF;ARL1[4] = PAYTYPE;ARL2[0] = (T[2] - T[3] - DISCOUNT)
  ARL2[2] = PAYCUST
  DISCOUNT = 0
  If S = 2 And S[2] = 4 Goto L_5175
  If PAYREF <> ARREF[0] Or PAYTYPE <> Int(Fra(A2[3]) * 100) Or PAYCUST <> A2[2]
    Gosub L_5900
L_5175: ARL3[0] = PAYREF;ARL1[2] = PAYTYPE;ARL3[1] = ARREF[0]
    ARL1[0] = PAYCUST
    ARL1[4] = Int(Fra(A2[3]) * 100);ARL2[0] = - (T[2] - T[3])
    ARL2[2] = A2[2]
    Gosub L_5900
  End If 
End If 
If T[4] !DISCOUNT
  If PAYREF <> ARREF[0] Or PAYTYPE <> Int(Fra(A2[3]) * 100) Or PAYCUST <> A2[2]
    ARL3[0] = ARREF[0];ARL1[2] = Int(Fra(A2[3]) * 100);ARL3[1] = PAYREF
    ARL1[0] = A2[2];ARL2[2] = PAYCUST
    ARL1[4] = PAYTYPE;ARL2[0] = 0;ARL2[1] = - T[4];ARL1[8] = D[7]
    DISCOUNT = DISCOUNT - T[4]
    Gosub L_5900
  End If 
  If PAYREF
    ARL3[0] = PAYREF;ARL1[2] = PAYTYPE;ARL3[1] = ARREF[0];ARL1[4] = Int(Fra(A2[3]) * 100)
    ARL2[0] = 0;ARL2[1] = - T[4];ARL1[8] = D[7]
    ARL1[0] = PAYCUST;ARL2[2] = A2[2]
    Gosub L_5900
  End If 
End If 
If T[6] !FREIGHT
  If PAYREF <> ARREF[0] Or PAYTYPE <> Int(Fra(A2[3]) * 100) Or PAYCUST <> A2[2]
    ARL3[0] = ARREF[0];ARL1[2] = Int(Fra(A2[3]) * 100);ARL3[1] = PAYREF
    ARL1[4] = PAYTYPE;ARL2[0] = 0;ARL2[1] = - T[6];ARL1[8] = -1
    ARL1[0] = A2[2];ARL2[2] = PAYCUST
    FREIGHT = FREIGHT - T[6]
    Gosub L_5900
  End If 
  If PAYREF
    ARL1[0] = PAYCUST;ARL2[2] = A2[2]
    ARL3[0] = PAYREF;ARL1[2] = PAYTYPE;ARL3[1] = ARREF[0]
    ARL1[4] = Int(Fra(A2[3]) * 100)
    ARL2[0] = 0;ARL2[1] = - T[6];ARL1[8] = -2
    Gosub L_5900
  End If 
End If 
Return 
L_5400: Rem unapplied section
If Not(T[2] + T[3]) Goto L_5590
For X = 0 To 10 \ ARL1[X] = 0 \ Next X
V$ = " ",V$;V$[1,7] = B$[1,7];UNREC = L
if s=8
	let v$[8,10]="  3" ! type 3
	search #2,2,1;v$,r[2],e
	if e<>0 return
	let L=R[2]
	LET UNREC=L
	Mat Read #2,L;S; \ Mat Read #2,L,6;D; \ Mat Read #2,L,44;T;
	ARL1[0] = D[0];ARL3[0] = T[0];ARL1[2] = S[2]
	ARL1[5] = 305;ARL1[6] = ARDATE;ARL1[7] = D[4];ARL1[9] = D[8]
	GOTO l_5590
endif
ARL1[0] = D[0];ARL3[0] = T[0];ARL1[2] = S[2]
ARL1[5] = 305;ARL1[6] = ARDATE;ARL1[7] = D[4];ARL1[9] = D[8]
L_5430: Search #2,3,1;V$,R[2],E \ If E = 2 Goto L_5590
If E Gosub ERR_SEARCH
If V$[1,7] <> B$[1,7] Goto L_5590
If UNREC = R[2] Goto L_5430
if depflag<>0
	let tmp=v$[8,10]
	if tmp<3 goto l_5430:
endif
Mat Read #2,R[2],0;S; \ Mat Read #2,R[2],6;D;
Mat Read #2,R[2],44;T;
ARL3[1] = T[0];ARL1[4] = S[2];ARL1[8] = 0;ARL1[10] = 0
If (T[2] + T[3])
  For X = 0 To 3 \ ARL2[X] = 0 \ Next X
  ARL2[0] = - (T[2] - T[3])
  Gosub L_5900
End If 
If T[4]
  For X = 0 To 3 \ ARL2[X] = 0 \ Next X
  ARL2[1] = - T[4]
  ARL1[8] = D[7]
  Gosub L_5900
End If 
If T[6]
  For X = 0 To 3 \ ARL2[X] = 0 \ Next X
  ARL2[1] = - T[6]
  ARL1[8] = -1
  Gosub L_5900
End If 
Goto L_5430
L_5590: Return 
L_5600: Rem check if using multiple credit for unapplied
UNAP = 0;UNREC = L;UNCHK = 0
If T[2] = 0 And T[3] = 0 And T[4] = 0 And T[6] = 0 Let UNAP = 99 \ Goto L_5690
V$ = " ",V$;V$[1,7] = B$[1,7]
R[2] = L \ Goto L_5640
L_5620: Search #2,3,1;V$,R[2],E \ If E = 2 Goto L_5690
If E Gosub ERR_SEARCH
If R[2] = L Goto L_5620
If V$[1,7] <> B$[1,7] Goto L_5690
L_5640: Mat Read #2,R[2],0;S; \ Mat Read #2,R[2],44;T;
If T[2] And (S[2] > 5) Goto L_5650
Goto L_5620
L_5650: Mat Read #2,R[2],6;D; \ If Not(D[2]) Let UNAP = 99 \ Goto L_5690
UNCHK = 99;PAYREC = D[2]
Mat Read #5,PAYREC,0;A2;
Mat Read #5,PAYREC,190;A1;
Mat Read #5,PAYREC,316;ARREF;
PAYREF = ARREF[0];PAYTYPE = Int(Fra(A2[3]) * 100);PAYCUST = A2[2]
L_5690: Mat Read #2,L,0;S; \ Mat Read #2,L,6;D; \ Mat Read #2,L,44;T;
Return 
L_5900: Rem ADD RECORD/KEY TO ARDETL
If ARL3[0] = 0 And ARL1[2] = 0 Return 
If ARL2[0] = 0 And ARL2[1] = 0 Return 
K20$ = " ",K20$;K20$[1,6] = ARL1[0] Using "######"
K20$[7,16] = ARL3[0] Using "##########";K20$[17,17] = ARL1[2] Using "#"
K20$[19,28] = ARL3[1] Using "##########";K20$[29,29] = ARL1[4] Using "#"
K21$ = K20$;K21$[31,36] = "999999";ARL1[10] = 0
Search #20,6,1;K21$,ARREC,E \ If E = 2 Goto L_5950
If E Gosub ERR_SEARCH
If K21$[1,29] <> K20$[1,29] Goto L_5950
ARL1[10] = K21$[31,36];ARL1[10] = ARL1[10] + 1
L_5950: K20$[31,36] = ARL1[10] Using "######"
E = 2 \ Search #20,1,0;K20$,ARREC,E \ If E Gosub ERR_SEARCH
Mat Write #20,ARREC,0;ARL1; \ Mat Write #20,ARREC,44;ARL2;
Mat Write #20,ARREC,68;ARL3;
Search #20,4,1;K20$,ARREC,E \ If E Gosub ERR_SEARCH
Return 
Return 
L_6000: Rem A/R ACTIVITY
Gosub L_6900
H = H4[0]
GLAMT = T[2] - T[3]
DETFLAG = 0
Gosub L_7000
G7 = 1 \ G6[0] = H4[0]
Gosub L_7100
G6[1] = G6[1] + T[2] - T[3]
Gosub L_7250
Return 
L_6100: Rem BANK AMOUNT
If Not(T[1]) Return 
Mat Read #6,R[6],62;G2;
G2[0] = G2[0] + T[1]
Mat Write #6,R[6],62;G2;
R[10] = B$[1,2]
Read #10,R[10],30;H;
If Not(H) Let H = H4[8]
If Not(H) Gosub L_6900 \ H = H4[8]
GLAMT = T[1]
DETFLAG = 0
Gosub L_7000
G7 = 0
G6[0] = H
Gosub L_7100
G6[1] = G6[1] + T[1]
Gosub L_7250
Return 
L_6200: Rem DISCOUNT AMOUNT
If Not(T[4]) Return 
If D[7] = 0 Let H = H4[1] \ If D[7] = 0 Goto L_6225
R[9] = D[7] \ Mat Read #16,R[9],24;H;
Goto L_6235
L_6225: Gosub L_6900
H = H4[1]
L_6235: GLAMT = T[4]
DETFLAG = 0
Gosub L_7000
G6[0] = H
G7 = 4
If Not(D[7]) Let G7 = 2
Gosub L_7100
G6[1] = G6[1] + T[4]
Gosub L_7250
Return 
L_6300: Rem FREIGHT
If Not(T[6]) Return 
Gosub L_6900
H = H4[5]
GLAMT = T[6]
DETFLAG = 0
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + T[6]
Gosub L_7250
Return 
L_6400: Rem Currency Variance
if p61$[136,136]<>"Y" RETURN
If Not(CurrVar) Return 
Gosub L_6900
H = H4[11]
GLAMT =CurrVar
DETFLAG = 0
Gosub L_7000
G6[0] = H
G7 = 4
Gosub L_7100
G6[1] = G6[1] + CurrVar
Gosub L_7250
Return 



L_6900: Rem GLARCNTRL
If P8$[2,2] = "N" Goto L_6940
K4$ = " ",K4$ \ K4$[1,2] = S[1] Using "##"
If P8$[1,1] = "Y" Let K4$[3,4] = B0[0] Using "##"
K4$[5,6] = B0[1] Using "##"
Search #8,2,1;K4$,R[8],E \ If E = 1 Goto L_6940
If E Gosub ERR_SEARCH
Mat Read #8,R[8],0;H5; \ Mat Read #8,R[8],8;H4;
Return 
L_6940: If P8$[1,1] = "N" Goto L_6965
K4$ = " ",K4$ \ K4$[1,2] = S[1] Using "##"
K4$[3,4] = B0[0] Using "##"
Search #8,2,1;K4$,R[8],E \ If E = 1 Goto L_6965
If E Gosub ERR_SEARCH
Mat Read #8,R[8],0;H5; \ Mat Read #8,R[8],8;H4;
Return 
L_6965: K4$ = " ",K4$ \ K4$[1,2] = S[1] Using "##"
Search #8,2,1;K4$,R[8],E \ If E = 1 Goto L_6985
If E Gosub ERR_SEARCH
Mat Read #8,R[8],0;H5; \ Mat Read #8,R[8],8;H4;
Return 
L_6985: K4$ = "DFAULT" \ Search #8,2,1;K4$,R[8],E \ If E Gosub ERR_SEARCH
Mat Read #8,R[8],0;H5; \ Mat Read #8,R[8],8;H4;
Return 
L_7000: Rem GLCRFLE UPDATE
GLACCT = H
K3$ = " ",K3$ \ K3$[1,4] = CLIENT Using "####" \ K3$[5,6] = ACCT Using "##"
K3$[7,14] = H Using "########" \ K3$[15,20] = C5 Using "######"
If DETFLAG
  K3$[21,26] = L Using "######"
End If 
E = 0 \ Search #12,2,1;K3$,R[12],E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  E = 2 \ Search #12,1,0;K3$,R[12],E \ If E Gosub ERR_SEARCH
  H1 = H \ H1[1] = 0 \ H1[2] = 0 \ H1[3] = C5
  H0[0] = CLIENT \ H0[1] = ACCT
  If DETFLAG Let H1[2] = L
  Mat Write #12,R[12],0;H1; \ Mat Write #12,R[12],30;H0;
  Search #12,4,1;K3$,R[12],E \ If E Gosub ERR_SEARCH
End If 
Mat Read #12,R[12],0;H1
H1[1] = H1[1] + GLAMT
Mat Write #12,R[12],0;H1;
Gosub UPGLDET
Return 
L_7100: Rem ALLOCATE CRMOL RECORD
If G7 = 0 Let G5[2] = 0 \ G5[3] = 0
G5[2] = H5[1] \ G5[3] = H5[2]
K2$ = " ",K2$
K2$[1,6] = G5 Using "######"
If Not(G5[1]) Let G5[1] = 1
K2$[7,8] = G5[1] Using "##"
K2$[9,10] = G5[2] Using "##"
K2$[11,12] = G5[3] Using "##"
K2$[13,13] = G7 Using "#"
K2$[14,21] = G6[0] Using "########"
Search #7,2,1;K2$,V1,E \ If E = 1 Goto L_7170
If Not(E) Goto L_7205
If E Gosub ERR_SEARCH
L_7170: G6[1] = 0
L_7175: E = 2 \ Search #7,1,0;K2$,V1,E \ If E Gosub ERR_SEARCH
If Not(V1) Goto L_7175
Search #7,4,1;K2$,V1,E
If E Gosub ERR_SEARCH
R[7] = V1
Return 
L_7205: R[7] = V1
Mat Read #7,R[7],0;G5;
Mat Read #7,R[7],16;G7;
Mat Read #7,R[7],18;G6;
Return 
L_7250: Rem WRITE CRMOL
G5[2] = H5[1] \ G5[3] = H5[2]
Mat Write #7,R[7],0;G5;
Mat Write #7,R[7],16;G7;
Mat Write #7,R[7],18;G6;
Return 
L_7300: Rem UPDATE CRMOA FILE
K2$ = " ",K2$
L_7310: E = 0 \ Search #12,3,1;K2$,R[12],E \ If E = 2 Return 
If E Gosub ERR_SEARCH
Mat Read #12,R[12],0;H1; \ Mat Read #12,R[12],30;H0;
If Not(H1[1]) Goto L_7310
K13$ = " ",K13$ \ K13$[1,4] = H0[0] Using "####"
K13$[5,12] = H1 Using "########"
E = 0 \ Search #13,2,1;K13$,R[13],E \ If Not(E) Goto L_7375
If E > 1 Gosub ERR_SEARCH
L_7350: E = 2 \ Search #13,1,0;K13$,R[13],E \ If E Gosub ERR_SEARCH
If Not(R[13]) Goto L_7350
E = 0 \ Search #13,4,1;K13$,R[13],E \ If E Gosub ERR_SEARCH
M5[0] = H1 \ M5[1] = 0 \ M5[2] = 0 \ M6 = H0
Goto L_7380
L_7375: Mat Read #13,R[13],0;M5 \ Mat Read #13,R[13],18;M6;
L_7380: M5[1] = M5[1] + H1[1]
Mat Write #13,R[13],0;M5 \ Mat Write #13,R[13],18;M6;
Goto L_7310
UPGLDET: Rem up gl detail file
For X9 = 0 To 7 \ GLD[X9] = 0 \ Next X9
GLD$ = " ",GLD$;GLD1$ = " ",GLD1$;GLD2$ = " ",GLD2$
GLD0$ = " ",GLD0$
GLD1 = 0;GLD2[0] = 0;GLD2[1] = 0
GLD[0] = CLIENT
GLD[1] = POSTPER
GLD[2] = G[2]
GLD[3] = G[0]
GLD[4] = G[1]
GLD[5] = ARDATE
GLD[6] = C5
GLD[7] = G[3]
GLD$[1,9] = GLACCT Using "#########"
GLD1$[1,30] = G$[1,30]
GLD2[0] = 305
GLD2[1] = PAYTYPE
GLDTRN[0] = G2[1]
GLDTRN[1] = G2[0]
GLD0$[1,10] = G$[31,40]
GLDKEY1$ = " ",GLDKEY1$
GLDKEY1$[1,4] = GLD[1] Using "&&&&"
GLDKEY1$[5,16] = GLD$[1,12]
GLDKEY1$[17,22] = GLD[6] Using "######"
GLDKEY1$[23,24] = GLD[7] Using "##"
GLDKEY1$[25,30] = GLD[3] Using "######"
GLDKEY1$[31,36] = GLD[2] Using "######"
Search #55,2,1;GLDKEY1$,REC_GLD,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  E = 2 \ Search #55,1,0;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  Mat Write #55,REC_GLD,0;GLD;
  Mat Write #55,REC_GLD,40;GLD$;
  Mat Write #55,REC_GLD,52;GLD1$;
  Mat Write #55,REC_GLD,82;GLD2$;
  Mat Write #55,REC_GLD,84;GLD1;
  Mat Write #55,REC_GLD,92;GLD2;
  Mat Write #55,REC_GLD,96;GLDTRN;
  Mat Write #55,REC_GLD,114;GLD0$;
  Search #55,4,1;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  GLDKEY2$ = " ",GLDKEY2$
  GLDKEY2$[1,6] = GLD[2] Using "######"
  GLDKEY2$[7,8] = GLD[7] Using "##"
  GLDKEY2$[9,14] = GLD[3] Using "######"
  GLDKEY2$[15,26] = GLD$[1,12]
  GLDKEY2$[27,30] = GLD[1] Using "&&&&"
  GLDKEY2$[31,36] = GLD[6] Using "######"
  Search #55,4,2;GLDKEY2$,REC_GLD,E \ If E Gosub ERR_SEARCH
End If 
Mat Read #55,REC_GLD,84;GLD1
GLD1 = GLD1 + GLAMT
Mat Write #55,REC_GLD,84;GLD1;
Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
L_7840: Rem CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_7900: Rem CHECK IF VALID JULIAN DATE, RETURNS IN FLAG- 0=N, 1=Y
DT3[0] = X2 \ FLAG = 2
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
L_8000: If Not(A9) Goto L_8500
Mat Read #10,A9,48;B;
B[0] = B[0] + T1
B[1] = B[1] + T9[0] \ B[2] = B[2] + T9[1]
B[10]=B[10]+deptot
B[11] = B[11] + T1[2]
B[12] = B[12] + T1[3]
B[13] = B[13] + T1[5]
B[14] = B[14] + T8[0]
B[15] = B[15] + T8[1]
B[16] = B[16] + T8[2]
B[17] = B[17] + M9
Mat Write #10,A9,48;B;
Mat Read #1,110,6;M1;
M1[0] = M1[0] + T1[3] \ M1[4] = M1[4] + T1[3]
M1[8] = M1[8] + T8[1] + T8[2] \ M1[9] = M1[9] + T8[1] + T8[2]
M1[3] = M1[3] + T1[0] \ M1[7] = M1[7] + T1[0]
M1[1] = M1[1] + (T9[0] + T9[1]) \ M1[5] = M1[5] + (T9[0] + T9[1])
M1[1] = M1[1] + T1[2] \ M1[5] = M1[5] + T1[2]
M1[2] = M1[2] + T1[5] + T8[0] \ M1[6] = M1[6] + T1[5] + T8[0]
M1[2] = M1[2] + M9+deptot
M1[6] = M1[6] + M9+deptot
Mat Write #1,110,6;M1;
L_8500: Rem CLEAR
M9 = 0
deptot=0
For X = 0 To 9
  T9[X] = 0
  If X < 6 Let T1[X] = 0
  If X < 3 Let T8[X] = 0
Next X
Return 

DoCommission: !
	! we have a request for an adjustment to commissions - all
	! appropriate checks have been completed.  See if there is
	! an existing commission record out there.
	!
	! As we may be doing commission splits we need to make sure
	! we hit ALL the commission records for ALL the reps
	! SO - first find the record in history
	!
	kINVH$ = " ",kINVH$
	kINVH$[1,2] = "30" \ if artype = 6 kINVH$[1,2] = "31"
	kINVH$[3,12] = arref using "##########"
	search #21,2,1;kINVH$,r[21],e \ if e>2 gosub err_search:
	if e ! NO HISTORY FOUND
		clear slsm[]
		clear smer[]
		slsm[0] = ar2[0]
	else
		mat read #21,r[21],278;slsm;
		! next 1 needed for category splits
		mat read #21,r[21],348;smer;
	end if
	totalMer = 0
	for i = 0 to 4
		totalMer = totalMer + smer[i]
	next i
	for srep = 0 to 4
		if not(slsm[srep]) goto skip_rep:
		k17$ = " ",k17$
		k17$[1,3] = slsm[srep] using "###"
		k17$[4,13] = arref using "##########"
		k17$[14,14] = artype using "#"
		search #17,2,1;k17$,r[17],e \ if e>2 gosub err_search:
		if e
			! no existing commission record - see if a manual
			! record exists
			k17$[14,14] = artype + 1 using "#"
			search #17,2,1;k17$,r[17],e \ if e>2 gosub err_search:
		end if
		if e goto skip_rep:
		mat read #17,r[17];sc_s1
		mat read #17,r[17],16;sc_s2
		mat read #17,r[17],28;sc_s3
		mat read #17,r[17],36;sc_s4
		mat read #17,r[17],40;sc_s6
		mat read #17,r[17],52;smat$
		mat read #17,r[17],54;sc_s7
		mat read #17,r[17],112;ocs1
		mat read #17,r[17],136;SplitFlag
		! the discount adjusts the MERCHANDISE dollars (effecting
		! overall gross profit) which is then re-multiplied by the
		! commission percent to calculate the new amount
		! IN ADDITION, if splits are in play, we need to figure
		! out exactly how much of this amount should ding this
		! rep
		SplitPercent = 1 ! defualt to this dude gets the whole thing
		if SplitFlag = 1 or SplitFlag = 3 ! commission or GP$ split
			SplitPercent = sc_s7[2] / 100
		else
			if SplitFlag = -1 ! product category split
				! how much of the total merchandise
				! did this rep have?
				if totalMer <> 0
					SplitPercent = smer[srep] / totalMer
				end if
			end if
		end if
		merchadj = t[4] * SplitPercent * -1
		if artype = 6 ! credit - undo the takeback
			merchadj = merchadj * -1 !
		end if
		!
		! OK - split percent is the split rate for commission
		! as well EXCEPT if it is category split.  For category
		! splits, the rep gets 100% of the recorded rate as the
		! merchandise and cost dollars have already been split
		! up
		if SplitFlag = -1 let SplitPercent = 1
		! new commission is the adjusted merchandise total - the
		! cost * the commission rate
		new_comm = fnr(((sc_s2[0] + merchadj) - sc_s6[0]) * (sc_s1[2]/100) * SplitPercent)
		gosub CreateCommissionAudit:
		sc_s2[1] = new_comm
		sc_s2[0] = sc_s2[0] + merchadj
		mat write #17,r[17];sc_s1
		mat write #17,r[17],16;sc_s2
		mat write #17,r[17],28;sc_s3
		mat write #17,r[17],36;sc_s4
		mat write #17,r[17],40;sc_s6
		mat write #17,r[17],52;smat$
		mat write #17,r[17],54;sc_s7
		mat write #17,r[17],112;ocs1;
		skip_rep: ! next salesrep
	next srep
return

CreateCommissionAudit: !
	let k18$=" ",k18$
	let k18$[1,13]=K17$[1,13]
	let k18$[26,26]=k17$[14,14]
	chk_auditrecord: !
	LET k18$[14,15]=TIM(8) USING "&&"   !"year
	LET k18$[16,17]=TIM(9) USING "&&"   !"month
	LET k18$[18,19]=TIM(10) USING "&&"  !"date
	LET k18$[20,21]=TIM(11) USING "&&"  !"hour
	LET k18$[22,23]=TIM(12) USING "&&"  !"minute
	LET k18$[24,25]=TIM(13) USING "&&"  !"second
	SEARCH #18,2,1;k18$,r[18],E
	IF NOT(E)
		SIGNAL 3,20
		goto chk_auditrecord:
	ENDIF
	!"Insert New Audit key
	LET E=2
	SEARCH #18,1,0;k18$,r[18],E
	IF E GOSUB ERR_SEARCH:
	SEARCH #18,4,1;k18$,r[18],E
	IF E GOSUB ERR_SEARCH:
	let key2$=" ",key2$
	let key2$[1,6]=sc_s3[1] using "######"
	let key2$[7,29]=k18$[4,26]
	let key2$[30,32]=k18$[1,3]
	SEARCH #18,4,2;key2$,r[18],E \ IF E GOSUB ERR_SEARCH:
	LET AS1[0]=sc_S1[0];AS1[1]=k18$[26,26];AS1[2]=0;AS1[3]=SPC(6)
	LET AS2[0]=sc_S3[1]
	LET AS2[1]=USER
	LET AS3[0]=sc_s2[1];AS3[1]=new_comm
	LET AS3[2]=sc_S7[1]
	let AS3[3]=sc_s1[1]    !"order#
	LET AS3[4]=k18$[14,19]  !"yymmdd
	LET AS3[5]=k18$[20,25]  !"hhmmss
	let aorigcomm=ocs1[0]
	let as4[0] = 3
	if D[7] as4[0] =4
	let as4[1] = D[7]
	as5[0] = sc_s1[2]
	as5[1] = sc_s1[2]
	as5[2] = sc_s2[0]
	as5[3] = sc_s2[0] + merchadj
	as5[4] = sc_s6[0]
	as5[5] = sc_s6[0]
	let source$="305"
	if as4[1]
		cas$ = "C/R disc "+str$(as4[1])+": "
	else
		cas$ = "Terms disc: "
	end if
	cas$ = cas$+"COMM PREV: "+str$(as3[0])+"  "
	cas$=cas$+"NEW: "+str$(as3[1])
	MAT  WRITE #18,r[18];AS1
	MAT  WRITE #18,r[18],8;AS2
	MAT  WRITE #18,r[18],16;AS3
	MAT  WRITE #18,r[18],52;source$
	MAT  WRITE #18,r[18],62;CAS$
	write #18,r[18],122;aorigcomm
	mat write #18,r[18],128;as4
	mat write #18,r[18],132;as5;
return

ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/mx305se!","")                        
Call addtostr(e$,rstr$,esdel$) !end section 
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                                                        



OUTEND: Rem EXIT ROUTINE
If P9$[17,17] <> "Y" Goto L_9010
K3$ = " ",K3$ \ Search #12,5,1;K3$,R[12],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #12,1,0;K3$,R[12],E \ If E Gosub ERR_SEARCH
L_9010: ! end it all ! ! Print 'CS'
!Close 
!Chain "MX000"
!Stop 
Call addtostr(e$,rstr$,esdel$) !end section 
returnstatus=0
If Eflg>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
	
	!If Eflg>0 let tmp$="THERE ARE "+Str$(EFLG)+" ISSUES "
	!tmp$=tmp$+Message$
	!Message$=tmp$

Endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
!Close 
!Chain "MX000"
!Stop 
!End 
Else
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
Rem {end rtn.error.s}