! >>> Program 104
!
! description Customer Labels
!
! loadsave -w -n 100,10 -o prog/dxport/104.dl4 src/104.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG 30, 2002  13:02:39
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx1/mx104.src (univ2) [kag] {33103}
Rem  Copyright (c) 2002 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE! ****
Rem
Rem MX104
Rem CUSTOMER LABEL PRINT W/CONTACT
Rem Last Updated: zyc 11/29/99 cct129373 be5@2420 changed c3$[30] to c3$[22]
!
External Lib "libinputs.lib"
Declare External Sub SelectStates,SelectCategories

External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
!
Declare Intrinsic Sub InpBuf,SortInString,String
! - Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim tmp$[800],tmp1$[500]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim SelStates$[200],SelCat$[300]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
dim webstr$[1000],message$[200]
!
Dim 1%,C2[2],E,F,UP
Dim 2%,C1[12],C5[1],D3[3],G7,G8,P,REC2,A0[3]
Dim 3%,C4,CFIN[8]
Dim 4%,SC1
Dim KEY_$[30],KEY1$[30],A$[142],A0$[30],A1$[142],A3$[30],A4$[30],A5$[10]
Dim B1$[142],B2$[142],B3$[142],B4$[142],B5$[142],F$[35]
Dim P9$[15],C2$[30],C3$[22],SPACES$[200],WORK$[200],WORK1$[200],CITY$[20]
Dim SORTMODE$[1],FZIP$[5],LZIP$[5],ZIP$[5],FLMODE$[1],SIC$[6]
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Dim VALSTATE$[120],1%,VALCATS[999],2%
! - Window On 
! - Gosub LABELTYPESCREEN
! - If LABELTYPE = 2 Chain "MX104T"
! - If J4$ = " " Goto OUTEND
Read #1,88,1808;F$;
Ropen #2,F$
Read #1,88,2112;F$;
Ropen #3,F$
FALSE = 0;TRUE = Not(FALSE);NUMSTATES = 0
FCUST = 0;LCUST = 999999
FZIP$ = " ",FZIP$;LZIP$ = "zzzzz",LZIP$
FSALES = 0;LSALES = 9999
SORTMODE$ = "C";SORTED = FALSE
FDIV = 0;LDIV = 99;FLMODE$ = "C"
FSIC = 0;LSIC = 999999
CONTACT = FALSE;NUMLABELS = 1
SPACES$ = " ",SPACES$
!
J8 = 0;LINECOUNT = 0
If Err 0 Let J8 = Spc(8)
N = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 Let LINETOTAL = 18
! no browser option was done for this
UP = 2;WIDTH = 36
!
! dx add xport reporting code
DXSetup:
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"104",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("begcust",tmp$) \ FCUST=tmp$ ! starting customer
call dxget("endcust",tmp$) \ if Rtrim$(tmp$)="" let LCUST=999999 else LCUST=tmp$ ! ending customer
call dxget("begzip",FZIP$) \ FZIP$=FZIP$,Blank$ ! starting zip code
call dxget("endzip",LZIP$) \ LZIP$=LZIP$,EndParam$ ! ending zip code
call dxget("begslsm",tmp$) \ FSALES=tmp$ ! starting salesman
call dxget("endslsm",tmp$) \ if rtrim$(tmp$)="" let LSALES=999 else LSALES=tmp$ ! ending salesman
call dxget("begdiv",tmp$) \ FDIV=tmp$ ! starting division
call dxget("enddiv",tmp$) \ if rtrim$(tmp$)="" let LDIV=99 else LDIV=tmp$ ! ending division
call dxget("begsic",tmp$) \ FSIC=tmp$ ! starting sic code
call dxget("endsic",tmp$) \ if rtrim$(tmp$)="" let LSIC=999999 else LSIC=tmp$ ! ending sic code
call dxget("selstate",SelStates$) ! select states
call dxget("selcat",SelCat$) ! select categories
call dxget("labels",tmp$) \ if rtrim$(tmp$)="" let UP=2 else UP=tmp$ ! # of labels across
call dxget("sort",SORTMODE$) ! sort by  C=cust #  N=name  Z=zip code  S=sic code
call dxget("nolabels",tmp$) \ if rtrim$(tmp$)="" let NUMLABELS=1 else NUMLABELS=tmp$ ! # of labels per customer
call dxget("contact",tmp$) \ if rtrim$(tmp$)="" let CONTACT=0 else CONTACT=1 ! print contact
call dxget("custcode",tmp$) \ if rtrim$(tmp$)="" let CUSTCODE=0 else CUSTCODE=1 ! print customer #
call dxget("printfrom",FLMODE$) ! print customer # or ship cust # (C/S) 
!  dx end
!
! starting & ending customer
if FCUST<0 or FCUST>999999 let e$="Invalid starting customer, must be between 0 and 999999!" \ error 10000
if LCUST<FCUST or LCUST>999999 let e$="Invalid ending customer, must be between starting customer and 999999!" \ error 10000
!
! starting & ending zip code
if LZIP$<FZIP$ let e$="Invalid ending zip code, must be >= starting zip code!" \ error 10000
!
! starting & ending salesman
if FSALES<0 or FSALES>999999 let e$="Invalid starting salesman, must be between 0 and 999!" \ error 10000
if LSALES<FSALES or LSALES>999999 let e$="Invalid ending salesman, must be between starting salesman and 999!" \ error 10000
!
! starting & ending division
if FDIV<0 or FDIV>999999 let e$="Invalid starting division, must be between 0 and 99!" \ error 10000
if LDIV<FDIV or LDIV>999999 let e$="Invalid ending division, must be between starting division and 99!" \ error 10000
!
! starting & ending sic code
if FSIC<0 or FSIC>999999 let e$="Invalid starting sic code, must be between 0 and 999999!" \ error 10000
if LSIC<FSIC or LSIC>999999 let e$="Invalid ending sic code, must be between starting sic code and 999999!" \ error 10000
!
!
! select states
if rtrim$(SelStates$) ! individual zones selected
  call SelectStates(e$,SelStates$,VALSTATE$,NUMSTATES,50)
  if e$ error 10000 ! invalid state
  Call SortInString(X1,NUMSTATES,2,VALSTATE$,J$)
else ! starting & ending zone
  VALSTATE$=""
  NUMSTATES=0
endif
!
! select categories
if rtrim$(SelCat$)
  call SelectCategories(e$,SelCat$,VALCATS[])
  if e$ error 10000 ! invalid category
else
  Mat VALCATS = Zer
endif
!
! # of labels accross
if UP<1 or UP>4 let e$="Invalid number of labels across, must be between 1 and 4!" \ error 10000
!
! # of labels per customer
if NUMLABELS<1 or NUMLABELS>99 let e$="Invalid number of labels per customer, must be between 1 and 99!" \ error 10000
!
!stop
! - Gosub PRINTSCREEN
! - FLD_1: J0$ = "3000 615 4";J5$ = "Enter starting customer code"
! - J1 = FCUST \ Gosub ISINPUT \ FCUST = J1
! - FLD_2: J0$ = "3000 637 4";J5$ = "Enter ending customer code"
! - J1 = LCUST \ Gosub ISINPUT \ LCUST = J1
! - FLD_3: J0$ = "2 00 516 5";J5$ = "Enter starting zip code"
! - J1$ = FZIP$ \ Gosub ISINPUT \ FZIP$ = J$
! - FLD_4: J0$ = "2 00 538 5";J5$ = "Enter ending zip code"
! - J1$ = LZIP$ \ Gosub ISINPUT \ LZIP$ = J$
! - FLD_5: J0$ = "3000 417 6";J5$ = "Enter starting salesman number"
! - J1 = FSALES \ Gosub ISINPUT \ FSALES = J1
! - FLD_6: J0$ = "3000 439 6";J5$ = "Enter ending salesman number"
! - J1 = LSALES \ Gosub ISINPUT \ LSALES = J1
! - FLD_7: J0$ = "3000 219 7";J5$ = "Enter starting divison number"
! - J1 = FDIV \ Gosub ISINPUT \ FDIV = J1
! - FLD_7A: J0$ = "3000 241 7";J5$ = "Enter ending division number"
! - J1 = LDIV \ Gosub ISINPUT \ LDIV = J1
! - FLD_SIC: J0$ = "3000 615 8";J5$ = "Enter starting sic code"
! - J1 = FSIC \ Gosub ISINPUT \ FSIC = J1
! - FLD_SICA: J0$ = "3000 637 8";J5$ = "Enter ending sic code"
! - J1 = LSIC \ Gosub ISINPUT \ LSIC = J1
! - FLD_8: J0$ = "2 00 3 7 9";J5$ = "Enter state to add, -state to remove, <CR> to continue";J1$ = "  "
! - Gosub ISINPUT
! - If J4$ <> ""
! -   Call String(1,J4$)
! -   Call String(1,J$)
! -   If J$[1,1] = "-"
! -     J$ = J$[2]
! -     Gosub LOCSTATE
! -     If P1
! -       If P1 > 1
! -         VALSTATE$ = VALSTATE$[1,P1 * 2 - 2],VALSTATE$[P1 * 2 + 1],""
! -       Else 
! -         VALSTATE$ = VALSTATE$[3]
! -       End If 
! -       NUMSTATES = NUMSTATES - 1
! -     End If 
! -   Else 
! -     If NUMSTATES >= 50 Or Len(J4$) <> 2
! -       Print 'RB';
! -       Goto FLD_8
! -     End If 
! -     Gosub LOCSTATE
! -     If Not(P1)
! -       VALSTATE$ = VALSTATE$,J4$
! -       NUMSTATES = NUMSTATES + 1;X1 = 0
! -       Call SortInString(X1,NUMSTATES,2,VALSTATE$,J$)
! -     End If 
! -   End If 
! -   Gosub SHOSTATES
! -   Goto FLD_8
! - End If 
! - FLD_9: J0$ = "4000 3 711";J5$ = "Enter category to add, -category to remove, <CR> to continue";J1 = 0
! - Gosub ISINPUT
! - Print @7,11;"   ";
! - If J4$ <> ""
! -   If J1 > 0
! -     If J1 <= 999 Let VALCATS[J1] = TRUE
! -   Else 
! -     If Abs(J1) <= 999 Let VALCATS[Abs(J1)] = FALSE
! -   End If 
! -   Gosub SHOCATS
! -   Goto FLD_9
! - End If 
! - FLD_9A: J0$ = "3000 21715";J5$ = "Enter number of labels across 4 maximum";J1 = UP
! - Gosub ISINPUT \ UP = J1 \ If UP > 4 Goto FLD_9A
! - FLD_10: J0$ = "2 00 1 917";J5$ = " C: customer code   N: customer name   Z: zip code   S: sic code"
! - J1$ = SORTMODE$ \ Gosub ISINPUT
! - Call String(1,J$)
! - If J$ <> "C" And J$ <> "N" And J$ <> "Z" And J$ <> "S"
! -   Print 'RB';
! -   Goto FLD_10
! - End If 
! - SORTMODE$ = J$
! - Gosub SHOMODE
! - FLD_11: J0$ = "3000 23517";J5$ = "Enter number of labels/customer";J1 = NUMLABELS
! - Gosub ISINPUT \ NUMLABELS = J1
! - FLD_12: J0$ = "6000 15517";J5$ = "Print contact on label?  (Y/N)";J1 = CONTACT
! - Gosub ISINPUT \ CONTACT = J1
! - FLD_12A: J0$ = "6000 11818";J5$ = "Print customer # on label?  (Y/N)";J1 = CUSTCODE
! - Gosub ISINPUT \ CUSTCODE = J1
! - FLD_13: J0$ = "2 00 11320";J5$ = "  C: customer master  S: shiplist master"
! - J1$ = FLMODE$ \ Gosub ISINPUT
! - Call String(1,J$)
! - If J$ <> "C" And J$ <> "S"
! -   Print 'RB';
! -   Goto FLD_13
! - End If 
! - FLMODE$ = J$
! - Gosub SHOFLMODE
! - INLOOP: Input @0,23;'CL'; Len 4;"  P: print   A: alignment aid   C: change parameters   E: end  "J$
! - Call String(1,J$)
! - If J$ = "E" Goto OUTEND
! - If J$ = "P" Goto PRINTGO
! - If J$ = "A" Gosub ALIGN \ Goto INLOOP
! - If J$ = "C" Gosub PRINTSCREEN \ Goto FLD_1
! - Print 'RB'; \ Goto INLOOP
!
PRINTGO: Rem set-up sorting
C0 = 2;DIR = 1;ZIPDISP = 348
If FLMODE$ = "S" Let C0 = 3;ZIPDISP = 105
If SORTMODE$ = "N" Let DIR = 2
If SORTMODE$ = "Z" And Not(SORTED)
  ! - Print @0,23;"Sorting file, please wait . . . ";'CL';
  KEY_$ = ""
SORTLOOP: 
  Search #C0,3,1;KEY_$,REC2,E 
  If Not(E)
    Mat Read #C0,REC2,ZIPDISP;C2$;
    WORK$ = C2$[1,5],KEY_$
    Search #9,4,1;WORK$,REC2,E 
    If E Let e$ = "syserrorfile 104 sortfile mode (m)=4 keyno (k)=1 r=",REC2," e=",e," keyval (k$)=",WORK$ \ error 10000
    Goto SORTLOOP
  End If 
  SORTED = TRUE
End If 
If SORTMODE$ = "S" And Not(SORTED)
  ! - Print @0,23;"Sorting file, please wait . . . ";'CL';
  KEY_$ = ""
SORTLOOPS: 
  Search #C0,3,1;KEY_$,REC2,E 
  If Not(E)
    Mat Read #C0,REC2,486;A0;
    SIC$[1,6] = A0[0] Using "######"
    WORK$ = SIC$[1,6],KEY_$
    Search #9,4,1;WORK$,REC2,E 
    If E Let e$ = "syserrorfile 104 sortfile mode (m)=4 keyno (k)=1 r=",REC2," e=",e," keyval (k$)=",WORK$ \ error 10000
    Goto SORTLOOPS
  End If 
  SORTED = TRUE
End If 



OUTCOL = 0;KEY_$ = ""
Gosub CLEARBUFF
! - Print @0,23;"Printing labels, please wait . . . ";'CL';
! - If J8 Print 'CS'
If SORTED Let C0 = 9;DIR = 1
LOOP_: 
Search #C0,3,DIR;KEY_$,REC2,E
If Not(E)
  Gosub READCUST
  If FOUND ! just in case we are working with shiplist
    If G7 < FSALES Or G7 > LSALES Goto SKIP
    ZIP$ = C2$[1,5]
    If ZIP$ < FZIP$ Or ZIP$ > LZIP$ Goto SKIP
    If C1[1] < FCUST Or C1[1] > LCUST Goto SKIP
    If CFIN[4] < FDIV Or CFIN[4] > LDIV Goto SKIP
    If A0[0] < FSIC Or A0[0] > LSIC Goto SKIP
    If NUMSTATES
      J$ = A1$[136,137]
      Gosub LOCSTATE
      If Not(P1) Goto SKIP
    End If 
    If NUMCATS If Not(VALCATS[C1[9]]) Goto SKIP
    Gosub PRINTLABEL
  End If 
SKIP: Goto LOOP_
End If 
Gosub DMPBUFF
! - Print 'CS'
Goto OUTEND
!
PRINTLABEL: Rem PRINT LABELS
If UP = 4 Let WIDTH = 31
For COUNT = 1 To NUMLABELS
  If OUTCOL >= UP Gosub DMPBUFF
  OUTCOL = OUTCOL + 1;C3 = ((OUTCOL - 1) * WIDTH + 2)
  ! If CONTACT Let B1$[C3,C3 + Len(A1$[1,20])] = A1$[1,20]
  IF Contact
		LET B1$[C3,C3+LEN(A1$[1,20])]=A1$[1,20]
  Else						                    ! " cct97806 -custom for awm
		LET B1$[C3,C3+5]="SLSM "
		LET WORK1$=" ",WORK1$
		LET WORK1$=C1[2] USING "###"
		LET B1$[C3+6,C3+6+LEN(WORK1$)]=WORK1$
  ENDIF
  If CUSTCODE
    WORK1$ = " ",WORK1$
    WORK1$ = C1[1] Using "######"
    If FLMODE$ = "S"
      WORK$ = " ",WORK$
      WORK$ = Str$(Fra(SC1))
      WK = WORK$[2]
      WORK$ = Str$(WK)
      WORK1$ = Int(SC1) Using "######"
      WORK1$[7] = ".",WORK$
    End If 
    B1$[C3 + 21,C3 + 21 + Len(WORK1$)] = WORK1$
  End If 
  B2$[C3,C3 + Len(A1$[31,60])] = A1$[31,60]
  B3$[C3,C3 + Len(A1$[61,90])] = A1$[61,90]
  A3$ = " ",A3$;A4$ = " ",A4$
  A3$ = A1$[91,120];CITY$ = A1$[121,135]
!CITYTRIM: If CITY$[Len(CITY$)] = " " Let CITY$[Len(CITY$)] = "" \ Goto CITYTRIM
CITY$=rtrim$(CITY$)
  A4$ = CITY$,", ",A1$[136,137],"  ",C2$[1,10]
  If A3$[1,30] = SPACES$[1,30]
    A3$ = A4$;A4$ = SPACES$
  End If 
  B4$[C3,C3 + Len(A3$)] = A3$;B5$[C3,C3 + Len(A4$)] = A4$
Next COUNT
Return 
!
READCUST: Rem READ CUSTOMER RECORD
FOUND = TRUE
If FLMODE$ = "S"
  Mat Read #3,REC2,0;A$;
  Read #3,REC2,142;SC1;
  CUST = Int(SC1)
  KEY1$ = CUST Using "######"
  Search #2,2,1;KEY1$,REC2,E
  If E Let FOUND = FALSE
End If 
If FOUND
  Mat Read #2,REC2,0;A1$;
  Mat Read #2,REC2,142;C1;
  Mat Read #2,REC2,150;G7;
  Mat Read #2,REC2,348;C2$;
  Mat Read #2,REC2,388;C3$;
  Mat Read #2,REC2,486;A0;
  Mat Read #2,REC2,544;CFIN;
End If 
If FLMODE$ = "S"
  A1$ = " ",A1$
  A1$[1,20] = A$[118,137]
  A1$[31,137] = A$[1,107]
  C2$[1,10] = A$[108,142]
End If 
Return 
!
DMPBUFF: Rem DUMP BUFFER
If OUTCOL
  If LINECOUNT >= LINETOTAL And J8
! -     Input "\15\PRESS <CR> TO CONTINUE"J$
! -     Print 'CS'
    LINECOUNT = 0
  End If 
  C3 = ((OUTCOL - 1) * WIDTH + 2) + 32
  Print #0;""
  Print #0;B1$[1,C3]
  Print #0;B2$[1,C3]
  Print #0;B3$[1,C3]
  Print #0;B4$[1,C3]
  Print #0;B5$[1,C3]
  If J8 Let LINECOUNT = LINECOUNT + 6
  OUTCOL = 0
  Gosub CLEARBUFF
End If 
Return 
!
CLEARBUFF: Rem CLEAR BUFFER
B1$ = " ",B1$
B2$ = " ",B2$
B3$ = " ",B3$
B4$ = " ",B4$
B5$ = " ",B5$
Return 
!
! - LABELTYPESCREEN: Rem choose which label type to print
! - Print 'CS';@20,1;"LABEL PRINT"
! - Print @15,6;" 1> Customer Label Print"
! - Print @15,9;" 2> Free Form Label Print"
! - Print @10,15;"Enter Option Desired or  <CR>: End : "
! - FLD_TYPE: J0$ = "3 00 14715";J1 = 1
! - Gosub ISINPUT \ LABELTYPE = J1
! - If J4$ <> " " If J1 > 2 Goto FLD_TYPE
! - Return 
! - PRINTSCREEN: Rem print fields
! - Print 'CS';@27,1;"CUSTOMER LABEL PRINT"
! - Print @19,3;"From";@33,3;"To";@0,4;"Customer code:";@5,5;"Zip code:";
! - Print @1,6;"Salesman No.:";@1,7;"Division No.:";
! - Print @5,8;"SIC code:";
! - Print @0,9;"States:";@1,11;"Catgy:";@0,15;"# Labels across:";
! - Print @0,17;"Sort by:";@26,17;"# Labels:";
! - Print @40,17;"Print contact?";@0,18;"Print customer #?";
! - Print @0,20;"Print from:";
! - Print Using "######";@15,4;FCUST;@37,4;LCUST;@15,5;FZIP$;@38,5;LZIP$;
! - Print Using "####";@17,6;FSALES;@39,6;LSALES;
! - Print Using "##";@19,7;FDIV;@41,7;LDIV;
! - Print Using "######";@15,8;FSIC;@37,8;LSIC;
! - Gosub SHOSTATES
! - Gosub SHOCATS
! - Gosub SHOMODE
! - Print Using "##";@17,15;UP;
! - Print Using "##";@35,17;NUMLABELS;
! - Print @55,17; \ If CONTACT Print "Y"; Else Print "N";
! - Print @18,18; \ If CUSTCODE Print "Y"; Else Print "N";
! - Gosub SHOFLMODE
! - Return 
! - SHOSTATES: Rem print all selected states
! - If Not(NUMSTATES)
! -   Print @15,9;"All states";'CL';
! - Else 
! -   For CODE = 0 To 49
! -     Y1 = Int(CODE / 20);X1 = CODE - Y1 * 20
! -     Print @X1 * 3 + 15,Y1 + 9;
! -     If CODE + 1 <= NUMSTATES
! -       Print VALSTATE$[CODE * 2 + 1,CODE * 2 + 2];" ";
! -     Else 
! -       Print "   ";
! -     End If 
! -   Next CODE
! - End If 
! - Return 
! - SHOCATS: Rem print all selected cats
! - ENTRY = 0
! - For CODE = 1 To 999
! -   If VALCATS[CODE]
! -     Y1 = Int(ENTRY / 20);X1 = ENTRY - Y1 * 20
! -     Print Using "### ";@X1 * 4 + 15,Y1 + 11;CODE;
! -     ENTRY = ENTRY + 1
! -   End If 
! - Next CODE
! - Print 'CL CR CL';
! - NUMCATS = ENTRY
! - If Not(NUMCATS) Print @15,11;"All categories";'CL';
! - Return 
! - SHOMODE: Print @9,17;
! - If SORTMODE$ = "C" Print "Customer code"; Tab 23;
! - If SORTMODE$ = "N" Print "Customer name"; Tab 23;
! - If SORTMODE$ = "Z" Print "Zip code"; Tab 23;
! - If SORTMODE$ = "S" Print "Zip code"; Tab 23;
! - Return 
! - SHOFLMODE: Print @13,20;
! - If FLMODE$ = "C" Print "Customer master";
! - If FLMODE$ = "S" Print "Shiplist master";
! - Return 
!
LOCSTATE: P1 = 0
For X1 = 1 To NUMSTATES
  If J$[1,2] = VALSTATE$[X1 * 2 - 1,X1 * 2]
    P1 = X1;X1 = 99
  End If 
Next X1
Return 
!
OUTEND: Rem EXIT ROUTINE
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in

End If 
if not(j8)
	!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	let message$="complete"
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
endif
try Call dxclose() else rem!

End 
!
! - Print 'CS'
! - Close 
! - Chain "MX000"
!
! - ALIGN: A1$ = "X",A1$;C2$ = "X",C2$
! - Gosub CLEARBUFF
! - Print @0,23;"Printing alignment aid, please wait . . . ";'CL';
! - For X1 = 1 To UP
! -   Gosub PRINTLABEL
! - Next X1
! - Gosub DMPBUFF
! - Return 
Rem {begin rtn.input.s}
! - ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 >= 3 If J0 <= 4
! -   If J0 = 3 Let J2$ = "#",J2$
! -   If J0 = 4 Let J2$ = "-",J2$
! -   J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - End If 
! - J1$[J3 + 1] = ""
! - If J0 < 3 Goto ISENTER
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 <> 6
! -   If J0 = 5
! -     J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
! -     J1$ = J9$[4,7],J9$[2,3],"  "
! -   Else 
! -     J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! -     If Len(J5$) > Msc(33) - 3 Let J5$[Msc(33) - 3] = ""
! -   End If 
! - End If 
! - ISENTER: Rem
! - If J5 < Msc(34) - 1
! -   Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - End If 
! - Print @J4 + J3,J5;'EU';@J4 - 1,J5;'BU';
! - Print @J4,J5;J1$[1,J3]; Tab (J4 + J3);'EU'; \ If J0 = 5 Print "  ";
! - Print @J4 - 1,J5;'BU';@J4,J5; \ Input Len J3 + 16384;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) > J3
! -   J7$ = "TOO LONG !" \ Gosub ISERRMSG \ Goto ISENTER
! - End If 
! - J9$ = J4$
! - If Not(Len(J9$))
! -   If J0$[3,4] = "00"
! -     J9$ = J1$
! -   Else 
! -     J7$ = "FIELD MUST BE ENTERED !" \ Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - End If 
! - For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] < " " Or J9$[J8,J8] > "~"
! -     J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!"
! -     Gosub ISERRMSG \ Goto ISENTER
! -   End If 
! - Next J8
! - On J0 Goto ISTYPE1,ISTYPE1,ISTYPE3,ISTYPE3,ISTYPE3,ISTYPE6 \ Stop 
! - ISTYPE1: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto ISOUT
! - ISTYPE3: Rem
! - J9 = 0
! - X1 = 0
! - For J8 = 1 To Len(J9$)
! -   If J0 = 4 And Not(X1)
! -     If J9$[J8,J8] = "-" Or J9$[J8,J8] = "+"
! -       X1 = 1
! -       Goto ISNCONT1
! -     End If 
! -   End If 
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto ISNCONT2
! -   If J9$[J8,J8] = " " Goto ISNCONT1
! -   If Len(J0$) > 10
! -     J7$ = "" \ Let J7$ = J0$[10] To J9$[J8,J8] : J7 \ If J7 Goto ISNCONT1
! -   End If 
! -   If J9$[J8,J8] <> "." Goto ISNUMERR1
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto ISDECERR
! -   If J9 Goto ISNUMERR1
! -   J9 = 1
! - ISNCONT2: Rem
! -   X1 = 1
! -   If J9 Let J9 = J9 + 1
! - ISNCONT1: Rem
! - Next J8
! - If J0 = 5 Goto ISTYPE5
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto ISDECERR
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto ISOUT
! - ISNUMERR1: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - ISDECERR: Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE5: If Len(J0$) > 10 If J9$ = J0$[11,11] Goto ISOUT
! - If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto ISDTERR
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto ISDTOUT
! - If J9[1] = 0 Goto ISDTERR
! - On J9 Goto ISMO31,ISMOFEB,ISMO31,ISMO30,ISMO31,ISMO30
! - On J9 - 6 Goto ISMO31,ISMO31,ISMO30,ISMO31,ISMO30,ISMO31
! - Goto ISDTERR
! - ISMO30: If J9[1] > 30 Goto ISDTERR
! - ISMO31: If J9[1] > 31 Goto ISDTERR
! - Goto ISDTOUT
! - ISMOFEB: If J9[1] > 29 Goto ISDTERR
! - If Fra(J9[2] / 4) ! *** 2000 is leap year! OR NOT FRA(J9[2]/100)
! -   If J9[1] > 28 Goto ISDTERR
! - End If 
! - ISDTOUT: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub ISDUNPACK
! - J$ = X$ \ J3 = 8 \ Goto ISOUT
! - ISDTERR: J7$ = "INVALID DATE !" \ Gosub ISERRMSG \ Goto ISENTER
! - ISTYPE6: Call String(1,J9$)
! - If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto ISOUT
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto ISOUT
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !"
! - Gosub ISERRMSG \ Goto ISENTER
! - ISOUT: J$[J3 + 1] = "" \ Print @J4,J5;J$; \ Return 
! - ISERRMSG: X1 = Len(J7$)
! - Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
! - Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
! - Print 'K1'; \ Window Close \ Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end rtn.input.s}
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
