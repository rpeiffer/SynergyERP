! >>> Program 466
!
! description Due to Buy Report
!
! loadsave -w -n 100,10 -o prog/dxport/466.dl4 src/466.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX466 - DUE TO BUY REPORT
Rem
Rem AUTHOR: per task 18828 & ML IQ
Rem BEDIT Version: 2.4 OBJECT CODE     Created: SEP 11, 2013  05:54:11
Rem /x/w2/pm/r2005//x/usracct/jcs/work/custom/xrev9/mx466.src (synergyux.synergy.n) [jcs] {47802}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub SubErr,CreateNetStatus,GetDelimiters
!
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,PDate$,getuidrec,JDate$
!
Declare Intrinsic Sub DateToJulian,InpBuf,String,Time
! Option Default Dialect IRIS1

If Err 0 Gosub ERR_TRAP
Dim J$[20],K1$[90],K2$[90],K8$[30],K9$[90],J1$[30],J8$[8],T9$[26]
Dim P9$[50],P60$[50],LP$[12],ENTDBY$[10]
Dim MTH$[110],A$[20],J4$[30],X$[10],SUM$[4],PUM$[4],PS$[2],CS$[2]
Dim A1$[142],A2$[30],A0$[68],P$[156],LP2$[84]
Dim QMASK$[20],INTM$[10],EQU$[130],ULN$[131]
Dim P61$[256],SL_S1$[30]
Dim 1%,LPC3[4],PFU1[20],LPEUN[2],LPWH
Dim 1%,ARMONTH,CNVTU[2],X1[9],AGEBUCK[3]
Dim 2%,COID,ODATE,SLSP,LPSL
Dim 2%,LPC1[4],C1[12],C3[1],B[24],LPR1[3],PRVOD[2]
Dim 2%,DT3[1],JDATE[9],X2[9]
Dim 3%,R[99],RECS[10],TTLPRICE,TTLCOST,TTLPRFT,PRICE,PRFT
Dim 3%,LPC2[2],C4[6],C9,LPC4[3],A[33],A1[7]
Dim 3%,PFU2[6],LPR[4],LPUNF[6],CNVTA,AMOUNT
Dim 3%,FLEPRT[15,1],SPECS[50],FRQ[9]
Dim msg$[100],Custom_customer$[30]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[2000],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
!Try 
!call dxopen() ! may not need this! NEEDS FOR DXTEST RUN!!
!Else
	Rem
!End try
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=IntCo 
Def FNH(X) = Sgn(X) * (Int(Abs(X) * 10 + .5) / 10)
Def FNT(X) = Sgn(X) * (Int(Abs(X) * 100) / 100) ! "truncate
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100) ! "normal
Def FNV(X) = Sgn(X) * (Int(Abs(X) * 100 + .9) / 100) ! "round up
Def FNI(X) = Sgn(X) * (Int(Abs(X) + .5))
STRTFROMGO: Rem
!Print 'CS';
!Print @0,0;"-MX466-";@30,0;"DUE TO BUY REPORT"
!WHTFLES: Rem "what files to open
!Print @0,2;"SELECT: 1: Customers  2: Ship tos  0: exit   ";
Call dxget("LPFLE",J$)
!If J$ = "0" Goto OUTEND
If J$ <> "1" And J$ <> "2" ! Goto WHTFLES
	let tmp$="NO FILE SELECTED!"
	goto outerr
Endif
If J$ = "1" Let CLP = 1
If J$ = "2" Let CLP = 0
For J = 2 To 14
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$[1,16];
  Ropen #J,J$
L_830: Next J
Data "1792","1808","1824","-1","2880","1936","-1","-1","2112","1744","2288","1728","1952"
If CLP ! "open Cust Files
  Read #1,88,1376;J$[1,16];
  Ropen #5,J$ ! "Cust
Else ! "Open ship files
  J$ = "3/SLLSTPRC" + Str$(COID)
  Ropen #5,J$ ! "Shiplist
End If 
Mat Read #1,0,100;J8$;
Read #1,0,120;ARMONTH;
Mat Read #1,3,0;J1$;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat read #1,115,60;custom_customer$;
custom_customer$=UCASE$(TRIM$(custom_customer$))
call dxsave(0,"tmp/466in.txt!")
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J1 = Chf(0)
If Err 0 Gosub ERR_TRAP
J9 = 62 ! \ If J8 Let J9 = 22
QMASK$ = "-------#.##" ! MAX 9MILL
INTM$ = "----#"
CJDATE = Tim(6) ! CURR DATE - JULIAN
L_900: Rem DAYS
!Print 'CS';@0,0;"MX466";@30,0;"DUE TO BUY ";
!If CLP Print "CUSTOMER "; Else Print "SHIPLIST ";
!Print @0,2;'CE';" 1> MIN DAYS DUE REORDER ";@40,2;"E: exit"
L_930: ! Print @30,2; ! aka min days
!Input ""J$ \ If J$ = "E" Goto OUTEND
Call dxget("MINDAYS",tmp$) \ J$=tmp$
X2 = J$ \ If X2 >= 0 And X2 <= 9999 And Not(Fra(X2)) Goto L_950
tmp$="INVALID MINIMUM DAYS!" \ goto outerr
L_950: MINDAYS = X2 !
!Print @0,3;" 2> MAX DAYS DUE/PAST DUE ";@40,3;"E: exit"
EDT_MAX: !Print @30,3; ! aka max days
!Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("MAXDAYS",tmp$)
j$=UCase$(Trim$(tmp$)) \ if j$="" or j$[1,4]="NULL" let j$="999"
X2 = J$ \ If X2 >= 0 And X2 <= 9999 And Not(Fra(X2)) Goto DEDT_MAX
tmp$="INVALID MAXIMUM DAYS!" \ goto outerr
DEDT_MAX: MAXDAYS = X2
EDT_FTO: Rem want 1st timers
!Print @0,4;" 3> FIRST TIME ORDERS ";
!Input ""J$ \ If J$ <> "Y" And J$ <> "N" Goto EDT_FTO
J$="N"
call dxget("NEWORDS",tmp$) \ if ucase$(RTRIM$(tmp$))="Y" let J$="Y"
FTO = 0 \ If J$ = "Y" Let FTO = 1
L_1020: !Print @0,6;'CE';"ENTER STARTING SALESPERSON, <CR>:ALL,  OR E:EXIT  ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("SSLSM",J$)
! If J$ = "" Let SLM[1] = 0;SLM[2] = 9999 \ Goto L_1080
SLM[1] = J$
!Print @0,7;"  ENTER ENDING SALESPERSON, <CR>:LAST, OR E:EXIT  ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("ESLSM",J$) \ J$=RTrim$(UCase$(J$))
If J$ = "" or j$[1,4]="NULL" Let J$ = "9999"
SLM[2] = J$
L_1080: If SLM[1] <= SLM[2] Goto L_1100
tmp$="INVALID SALESPERSON RANGE ENTERED!" \ goto outerr
!Goto L_1020
L_1100: Rem CUSTOMER
!Print @0,8;'CE';"ENTER STARTING CUST #, <CR>:ALL,  OR E:EXIT  ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("SCUST",J$)
! If J$ = "" Let CUST[1] = 0;CUST[2] = 999999 \ Goto L_1180
CUST[1] = J$
!Print @0,9;"  ENTER ENDING CUST #, <CR>:LAST, OR E:EXIT  ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("ECUST",J$) \ let j$=RTrim$(UCase$(J$))
If J$ = "" or j$[1,4]="NULL" Let J$ = "999999" ! as test sends word "null"?
CUST[2] = J$
L_1180: If CUST[1] <= CUST[2] Goto L_1190 ! cct157646 was: goto edt_entby:
tmp$="INVALID CUSTOMER RANGE ENTERED!" \ goto outerr
! Goto L_1100
L_1190: Rem
L_1350: Rem THIS SPACE AVAILABLE
L_1500: Rem DONE
!Print @0,22;'CE';"ENTER  R:reselect, P:print, E:exit   ";
!Input ""J$ \ If J$ = "E" Goto OUTEND
!If J$ = "R" Goto L_900
Let j$="P" ! if we're here - it's ok so start
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
if J8 ! dx xml, setup rstr$
 !<section>
 tmp$=bsdel$,"466",fdel$,rdel$
 call addtostr(e$,rstr$,tmp$)
 ! headings
 tmp$="SLSID",fdel$,"SLSNAME",fdel$,"CUSTID",fdel$,"CUSTNAME",FDEL$
 tmp$=tmp$,"LAST QTY",fdel$,"PRODID",fdel$,"PRODDESC1",fdel$,"PRODDESC2",fdel$
 tmp$=tmp$,"LAST DATE",FDEL$,"ORDER",FDEL$,"CURRDAYS",FDEL$,"CYCLE",FDEL$
 TMP$=TMP$,"MISSED",FDEL$,"DUE IN",FDEL$,"DOLLARS",FDEL$,"CONTRACT",FDEL$
 call addtostr(e$,rstr$,tmp$+rdel$)
End if
!If J$ <> "P" Goto L_1500
!Print @0,22;'CE';"CLEARING SORT FILE, PLEASE WAIT . ." \ Signal 3,0
K1$ = " ",K1$
L_1620: Search #9,3,1;K1$,R9,E \ If E = 2 Goto L_1650
If E Gosub ERR_SEARCH
Search #9,5,1;K1$,R9,E \ If E Gosub ERR_SEARCH
Goto L_1620
L_1650: Rem THRU ORDER HEADER
! Print @0,22;'CE';"SORTING FILE, PLEASE WAIT . ." \ Signal 3,0
K1$ = " ",K1$;K1$[1,6] = CUST[1] Using "######"
L_1660: Search #5,3,1;K1$,R1,E \ If E = 2 Goto L_1900
If E Gosub ERR_SEARCH
X2 = K1$[1,6] \ If X2 > CUST[2] Goto L_1900
R[5] = R1 \ Gosub L_6000 ! READ LASTPRICE (SAME BOTH)
Gosub LPDTCHK ! CHK / CALC
If FDCHK = 1 Goto L_1660 ! FAIL DATE CHECK
SLSP = 0
If Not(CLP) ! shiplist - has dflt slsm?
  K2$ = " ",K2$;K2$ = K1$[1,6]
  K2$[7] = ".";K2$[8] = LPSL Using "&&&&&&"
  Search #10,2,1;K2$,R[10],E
  If Not(E)
    Mat Read #10,R[10],390;SLSP;
  End If 
End If 
If CLP Or SLSP = 0 ! NO SHIPLIST SLSM OR ITS CUST LASTPR
  K2$ = " ",K2$;K2$ = K1$[1,6]
  Search #3,2,1;K2$,R[3],E \ If E Goto L_1660
  Mat Read #3,R[3],142;C1;
  SLSP = C1[2]
End If 
If SLSP <= 0 Or SLSP < SLM[1] Or SLSP > SLM[2] Goto L_1660
DDAYS = 0 - X2[1] ! rev sign >=0:pastdue, <0:due in (wants due in first!)
If JDATE[2] = 0 Let DDAYS = 9999 ! last - as no due yet
If DDAYS > 9999 Let DDAYS = 9999 ! avoid starring out
If DDAYS < -9999 Let DDAYS = 0 - 9999 ! avoid starring out
K9$ = " ",K9$ ! sort is ssssccccccdddddllllllllllllllllllllll
K9$[1,4] = SLSP Using "####"
K9$[5,10] = K1$[1,6] ! customer
K9$[11,15] = DDAYS Using "-####" ! days since last order
K9$[16] = K1$[7] ! whole last price key (cust/dept/product/etc) or cust/ship/prod/etc
E = 0;R9 = R1
Search #9,4,1;K9$,R9,E \ If E Gosub ERR_SEARCH
Goto L_1660
L_1900: Rem START PRINT
K9$ = " ",K9$
K1$ = " ",K1$
! Print @0,22;'CE';"PRINTING, PLEASE WAIT . ." \ Signal 3,0
!If Err 0 Gosub ERR_TRAP
!If J2 Print #0;"\14\"; ! "SECOND RUN THRU?
J1 = 90;J2 = 0;PRTCUST = 0
EQU$ = "=",EQU$;ULN$ = "-",ULN$
L_2000: Search #9,3,1;K9$,R1,E \ If E = 2 Goto L_9100
If E Gosub ERR_SEARCH
If K1$[1,4] = "    " Let K1$ = K9$
If K1$[1,10] <> K9$[1,10] Gosub L_4500 ! "SLSM/CUSTOMER CHANGE?
K1$ = K9$
R[5] = R1 \ Gosub L_6000 ! READ LASTPRICE (SAME BOTH)
Gosub L_3000 ! "get customer info
Gosub L_3200 ! "salesman
Gosub L_5800
If Not(PRTCUST) Gosub L_5500 ! "print custline
If Not(LPC4[3])
  K2$ = " ",K2$;K2$ = LP$
  Search #2,2,1;K2$,R[2],E
  If Not(E)
    Gosub L_6200
  Else 
    Gosub L_2500
  End If 
Else 
  Gosub L_2500 ! set conv for nonstk
End If 
Gosub L_3400 ! "convert / total
JSTPRNT: Rem "Print Line
J1 = J1 + 1 \ Gosub L_5800
Gosub L_5000
Goto L_2000
L_2500: Rem ===== set units for conversions (nonstock version)
A[6] = LPR1[0];A[5] = LPUNF[5] \ If Not(A[5]) Let A[5] = 1;LPUNF[5] = 1
PFU1[0] = LPEUN[0];PFU1[1] = LPC3[2] ! "base and selling units
PFU1[2] = LPC3[3];PFU1[3] = LPC3[4] ! "pricing and costing
PFU1[4] = LPEUN[1] ! "purchasing
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = LPC3[2];PFU1[9] = LPC3[2];PFU1[10] = LPEUN[1] ! "stock,sell,purch dflt
PFU1[11] = LPC3[4];PFU1[12] = LPC3[3] ! "cost,price dflt
If Not(LPC4[3]) Goto L_30060 ! "leave as is (NONSTOCK)
PFU1[13] = LPC3[2];PFU1[16] = LPEUN[0];PFU1[17] = LPEUN[0] ! "prod,up,bkn dflt
PFU1[18] = LPC3[2];PFU1[19] = LPC3[2] ! "pack,size default
L_30060: PFU2[0] = LPUNF[0];PFU2[1] = LPUNF[1] ! "selling and pricing factor
PFU2[2] = LPUNF[2];PFU2[3] = LPUNF[3] ! "costing and purchasing
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
Return 
L_3000: Rem GET CUSTOMER
K2$ = " ",K2$;K2$ = LPC1[0] Using "######"
Search #3,2,1;K2$,R[3],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Return 
Mat Read #3,R[3],0;A1$;
Mat Read #3,R[3],142;C1;
Return 
L_3200: Rem SALESMAN NAME
K2$ = " ",K2$;K2$[1,3] = K1$[2,4]
Search #4,2,1;K2$,R[4],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_3270
Mat Read #4,R[4],0;SL_S1$;
Return 
L_3270: Rem SLSM INVALID
SL_S1$ = " ",SL_S1$
SL_S1$ = "SALESPERSON NOT ON FILE!"
Return 
L_3400: Rem CONVERSION OF UNITS
CNVTU[0] = 0;CNVTU[1] = LPC3[2];CNVTU[2] = 1
CNVTA = LPC2[0] \ Gosub L_20000
LPQTY = AMOUNT
SUM$ = "ERR"
If LPC3[2] = -3 Let SUM$ = "LB  "
If LPC3[2] = -2 Let SUM$ = "LOT "
If LPC3[2] = -1 Let SUM$ = "CWT "
If LPC3[2] > 0 Read #13,LPC3[2],10;SUM$;
LPDTCHK: Rem start here is date check only (sorting)
clear FRQ[]
FDCHK = 0 ! FAILS DATE CHECK
X2 = LPC1[2] \ Gosub L_7820 \ X2 = 0
JDATE[1] = X2
X2 = LPR[2] \ Gosub L_7820 \ X2 = 0
JDATE[2] = X2
X2 = PRVOD[0] \ Gosub L_7820 \ X2 = 0
JDATE[3] = X2
X2 = PRVOD[1] \ Gosub L_7820 \ X2 = 0
JDATE[4] = X2
X2 = PRVOD[2] \ Gosub L_7820 \ X2 = 0
Jdate[5]=x2
FRQ[1] = CJDATE - JDATE[1] ! curr-last
FRQ[0] = JDATE[1] - JDATE[2] ! last-prev
If JDATE[2] Let FRQ[2] = FRQ[0]
X1[8] = 1;X2[1] = 0
If JDATE[3] Or JDATE[4] Or JDATE[5] ! has even more dates
  If JDATE[5] And JDATE[4]
    FRQ[5] = JDATE[4] - JDATE[5] ! 3 - 4
    X1[8] = X1[8] + 1
  End If 
  If JDATE[4] And JDATE[3]
    FRQ[4] = JDATE[3] - JDATE[4] ! 2 - 3
    X1[8] = X1[8] + 1
  End If 
  If JDATE[3] And JDATE[2]
    FRQ[3] = JDATE[2] - JDATE[3] ! 1 - 2
    X1[8] = X1[8] + 1
  End If 
  FRQ[6] = FRQ[2] + FRQ[3] + FRQ[4] + FRQ[5]
  FRQ[0] = Int(FRQ[6] / X1[8]) ! average of any dates found
End If 
If JDATE[2] <= 0 And Not(FTO) Let FDCHK = 1
If JDATE[2] ! has prev date
  X2[1] = (FRQ[1] - FRQ[0]) ! curr-lp
  X2[2] = Abs(X2[1]) ! IF <=0 IT IS DUE - CHECK ENTRY
  If X2[1] <= 0 And (X2[2] < MINDAYS Or X2[2] > MAXDAYS) Let FDCHK = 1
  If X2[1] > 0 And X2[1] > MAXDAYS Let FDCHK = 1 ! PAST DUE - NO MIN
End If 
if JDate[1]<=0 let FRQ[1]=0 ! no last price date - avoid *** (as frq[1]=curr jul date!)
LVAL = LPC2[0] * LPC2[1]
Return 
L_4500: Rem customer or slsm change
IF J8 RETURN ! NOT FOR XML
If K1$[1,4] = K9$[1,4] ! it customer - just add a couple blank lines
  Print #0;"\15\"
  PRTCUST = 0
  Return 
End If 
Print #0;"" ! BLANK LINE
Print #0; Tab 70;"END OF SALESPERSON ";K1$[1,4]
PRTCUST = 0
J1 = 99
Return 
L_5000: Rem LINE ITEM DETAIL
IF NOT(J8) ! PRINTER
	Print #0; Using QMASK$;LPQTY;" ";SUM$;
	Print #0; Tab 17;LP$; Tab 29;LP2$[21,50]; ! " ";LP2$[51,62];
	print #0; Using "######"; Tab 73;LPC1[1];
	X2 = LPC1[2] \ Gosub L_7700
	Print #0; Tab 80;X$[1,8];
	If LPC1[2] Print #0; Using INTM$; Tab 89;FRQ[1];
	If JDATE[2] ! determines if new or existing
	  Print #0; Using INTM$; Tab 94;FRQ[0]; ! cycle
	  If X2[1] >= 0 Print #0; Using INTM$; Tab 99;X2[1]; ! past due
	  If X2[1] < 0 Print #0; Using INTM$; Tab 104;Abs(X2[1]); ! due in
	Else 
	  Print #0; Tab 96;"NEW ORDER";
	End If 
	Print #0; Using QMASK$; Tab 110;LVAL;
	If LPR[1] Print #0; Using "######"; Tab 124;LPR[1];
	Print #0;""
ELSE ! XML
	TMP$=k9$[2,4],fdel$,RTrim$(SL_S1$),fdel$
	tmp$=tmp$,Str$(LPC1[0]),fdel$,RTrim$(A1$[31,60]),fdel$
	tmp$=tmp$,LTrim$(LPQty using QMask$)," ",sum$,fdel$
	tmp$=tmp$,RTrim$(LP$),fdel$,RTrim$(lp2$[21,50]),fdel$
	tmp$=tmp$,RTrim$(LP2$[51,80]),fdel$
	x$=" ",x$
	x2=lpc1[2] \ if x2 let x$=pdate$(x2)
	tmp$=tmp$,x$,fdel$
	tmp$=tmp$,Str$(LPC1[1]),fdel$
	if lpc1[2] let tmp$=tmp$,Str$(FRQ[1]),fdel$ else let tmp$=tmp$," ",fdel$
	if jdate[2] ! prev order date - else is NEW
		tmp$=tmp$,Str$(FRq[0]),fdel$
		if x2[1]>=0 let tmp$=tmp$,Str$(X2[1]),fdel$ else let tmp$=tmp$," ",fdel$
		if x2[1]<0 let tmp$=tmp$,Str$(ABS(X2[1])),fdel$ else let tmp$=tmp$," ",fdel$
	Else
		tmp$=tmp$," ",fdel$," ",fdel$
	endif
	tmp$=tmp$,LTrim$(LVAL using QMask$),fdel$
	if LPR[1] let tmp$=tmp$,STr$(LPR[1]),fdel$ else let tmp$=tmp$," ",fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
Endif
Return 
L_5500: Rem ORDER HEADER INFO
if j8 return ! not on xml
If J1 + 3 > J9 Gosub L_5800
PRTCUST = 1
Print #0; Using "######"; Tab 12;LPC1[0];
Print #0; Tab 26;A1$[31,60]
J1 = J1 + 1
Return 
L_5800: Rem PRINT HEADER
if j8 return ! not on xml
If J1 < J9 Return ! "lines incremented in rouutines
! If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 9
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;J8$; Tab (64 - Len(J1$) / 2);J1$; Tab 120;"PAGE";J2
T9$ = "" \ Call Time(T9$)
Print #0;" - 466 - ";T9$;
Print #0; Tab 45;"D U E  T O  B U Y  ";
If CLP Print #0;"C U S T O M E R  "; Else Print #0;"S H I P  T O  ";
Print #0;"\15\"
Print #0;"SALESPERSON ";K1$[2,4];"  ";SL_S1$;
Print #0; Tab 75;MINDAYS;"MIN DUE  ";MAXDAYS;"MAX DAYS";
Print #0;"\15\"
Print #0;"LAST QTY"; Tab 14;"PRODUCT"; Tab 26;"DESCRIPTION";
Print #0; Tab 74;"ORDER";
Print #0; Tab 80;"LAST DTE"; Tab 89;"DAYS"; Tab 94;"CYCLE";
Print #0; Tab 100;"PAST"; Tab 106;"DUE"; Tab 114;"$VALUE";
Print #0; Tab 122;"CONTRACT"
Print #0;EQU$
Print #0;""
Return 
L_6000: Rem READ LASTPRICE
Mat Read #5,R[5],0;LP$;
Mat Read #5,R[5],12;LPSL;
Mat Read #5,R[5],16;LPC1;
Mat Read #5,R[5],28;LPC2;
Mat Read #5,R[5],46;LPC3;
Mat Read #5,R[5],56;LP2$;
Mat Read #5,R[5],140;LPC4;
Mat Read #5,R[5],168;LPR;
Mat Read #5,R[5],198;LPR1;
Mat Read #5,R[5],214;LPEUN;
Mat Read #5,R[5],220;LPUNF;
Mat Read #5,R[5],274;LPWH;
Mat Read #5,R[5],424;PRVOD;
Return 
L_6200: Rem READ PRODUCT
Mat Read #2,R[2],0;P$;
Mat Read #2,R[2],156;B;
Mat Read #2,R[2],256;A;
Mat Read #2,R[2],460;A1;
Mat Read #2,R[2],512;PFU1;
Mat Read #2,R[2],554;PFU2;
Return 
L_6500: Rem SET PRICE ORIG AND COST ORIG
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)!cct157646-pcs
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
OUTERR: ! bad input
! Call SetOutput(e$,rstr$,1,tmp$) ! send ok and message
	ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
  Message$=tmp$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
OUTEND: Rem EXIT
Close
End
L_9100: Rem DONE
if j8 !dx xml
 call addtostr(e$,rstr$,esdel$) !end section
 !!!!!!print rstr$
  call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
Else
	If K1$[1,4] <> "    " ! print last "end of" if something printed
	  Print #0;"" ! BLANK LINE
	  Print #0; Tab 70;"END OF SALESPERSON ";K1$[1,4]
	End If 
end if
goto outend
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20030 ! "um window
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20055 ! "going to same units
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20055 ! "lot
If CNVTU[2] = 0 Goto L_20030 !!THIS TESTS IF VALID CONVERSION
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20055 ! "none there
L_20030: Gosub L_20060
If CNVTU[2] = 3 Goto L_20055 ! "um window
If CNVTU[2] = 0 Goto L_20055 !!TEST IF VALID CONVERSION
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
L_20055: Return 
L_20060: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT (INTERNAL VERSION)
CONVFLAG = 0
If CNVTU[2] <> 5 Goto L_20115
CONVFLAG = 1 ! "do not round flag
CNVTU[2] = 1 ! "switch back to quantity
Goto L_20120
L_20115: CONVFLAG = 0
L_20120: SR = 8
SC = 12
On CNVTU[2] + 1 Goto L_20145,L_20195,L_20195,L_20340
E = 0 \ Gosub ERR_SEARCH
L_20145: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20185
  If CNVTU[X1[1]] = -1 Goto L_20185
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20185
  Next X1[2]
  FLAG = 1 \ Goto L_20435 ! INVALID CONVERSION
L_20185: Next X1[1]
FLAG = 0 \ Goto L_20435 ! OKAY
L_20195: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20285 ! ALREADY BASE UNITS
  If CNVTU[X1[1]] = -1 Goto L_20250
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20245
  Next CUNIT
  FLAG = 0 \ Goto L_20435 ! INVALID UNIT
L_20245: If CUNIT = 0 Goto L_20285 ! ALREADY BASE
L_20250: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] <> -1 Goto L_20275 ! NOT CWT
  If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
  If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Goto L_20285
L_20275: If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
  If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
L_20285: Next X1[1]
If CNVTU[2] <> 1 Or CONVFLAG Goto L_20310 ! "not doing qty's
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT) ! "round qty if not going to base units
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNI(AMOUNT) ! "be sure base is not a fraction
L_20310: If CNVTU[2] <> 2 Goto L_20335 ! "not doing costs/prices
If Not(CNVTU[1]) Goto L_20335 ! "going to base
If P9$[42,42] = "N" Let AMOUNT = FNR(AMOUNT) ! "normal round
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT) ! "truncate
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT) ! "round up
L_20335: FLAG = 0 \ Goto L_20435
L_20340: Rem DISPLAY VALID UNITS
Window Open @SC,SR; Size 32,11; Using " VALID UNITS "
X1[1] = 1
For X1 = 0 To 7
  RECS[X1[1]] = 0 \ If Not(PFU1[X1]) Goto L_20385
  Read #26,PFU1[X1];A$;
  Print Using "#. ";X1[1];A$[11,14];" ";A$[1,10];
  If X1 Print Using "##########";PFU2[X1 - 1] Else Print ;'BR BD';"     BASE ";'ER ED'
  RECS[X1[1]] = PFU1[X1] \ X1[1] = X1[1] + 1
L_20385: Next X1
L_20390: Print Using "#";@0,9;"SELECT 1-";X1[1] - 1;" : ";'CL';
Input (-2,ILEN);""J4$ \ If J4$ = "" Goto L_20420
X1 = J4$ \ If X1 > 0 If X1 < X1[1] Goto L_20410
Print 'RB'; \ Goto L_20390
L_20410: Read #26,RECS[X1];A$;
J4$ = A$[11],"\15\"
L_20420: Window Close 
Call InpBuf(J4$)
FLAG = 0 \ Goto L_20435
L_20435: Return 
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
Call programdump("tmp/466se!","") 
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
  Message$=msg$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
include "src/callmainerrnet.inc"
End 
Rem {end rtn.error.s}
