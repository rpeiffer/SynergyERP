! >>> Program 438
!
! description  buyer analysis
!
! loadsave -w -n 100,10 -o prog/dxport/438.dl4 src/438.src
!
! 1.0 03/14/2008 
!
include "src/copyright.inc" ! dx
! task#14011/cct 224745 -print vend subtot by buyer and prod det by buyer/vendor. 
! task#14011/cct 228192- add date option
! custom_customer$ 
! Acme - task #14013/cct#226212-Prompt Exclude products if UDA10 field is equal to 'YES' 

 Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR  4, 2005  10:02:34
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/mx/mx438.src (univ2) [mary] {53540}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX438 Buyer Analysis Report
! task #

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,JulianToDate,String,Time,VerifyDate
External Lib "ubsfunc.dl4"
Declare External Function OpenMySQLBrowserOutput,GetMySQLReportHeader
Declare External Sub AddMySQLReportColumnHeadings
Declare External Function AddMySQLReportData
Declare External Sub FinishMySQLReport

If Err 0 Gosub ERR_TRAP

!Option Default Dialect IRIS1
Com 1%,PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10]
!!!-!! If Err 0 Gosub ERR_ESCAPE
Dim 1%,MySQL_ch,reportAborted
Dim 3%,MySQLQueueID
Dim U5$[20],UM$[30]
Dim 3%,UnitType,CUNIT,UNIT$[10],X
Dim PTRNM$[50]
Dim COST$[1]
Dim PMASK$[12],Z2$[2],RETVAL$[512]
Dim P9$[50],P60$[50]
Dim 1%,PD1[2],URECFLAG,ARMONTH,ARYEAR,YEAR_,MONTH_,DAY,EOYMO,BOYMO
Dim 1%,VDAY[6]
Dim 2%,YY,MM,DD,WN[6],SWKDATE,EWKDATE
Dim 2%,D3[1],JDATE,WHSE[1],BUYER[1],ARDATE,COID,JDAY,DAYDATE,BUYCODE
Dim 2%,JEDATE
Dim 2%,CLOZ1[1],CLOZ2[1],CLOZCODE$[2]
Dim 2%,Q0[1],DATE,D9[5],PORTNUM,JDAY,HOLIDAY[19]
Dim 3%,V9[4],A4,N0
Dim 3%,SLSUNIT,SLSAMT,LOADPROF,LSTUNIT,LSTAMT,LSTGLPROF
Dim 3%,PRICE,UNITGL,EXTGL,PERIOD,PER[1],CURPER
Dim J8$[8],DATE$[8],CNAME$[30],tmpdate$[8]
Dim 3%,J
Dim T9$[26]
Dim 3%,REC_PROD,REC_INVH,REC_INVL,REC_BTMP,REC_PRWH,PRCT
Dim KEYINVK$[50],KEYPROD$[50],KEYPRWH$[50],BUYERNAME$[30]
Dim KEYBTMP$[50],CMD$[80],TMPFNAME$[20],KEYINVL$[50]
dim puda$[650],k10$[50],vendkey$[50],vendname$[30]
dim Custom_customer$[30]

Rem buyer temp file
Dim 3%,BY1[3],BY2[3],BY3[3],BY4[3],BY5[3],BY6[3]
Dim 4%,TY1[3],TY2[3],TY3[3],TY4[4],TY5[3],TY6[3]
dim 4%,sy1[3],sy2[3],sy3[3],sy4[4],sy5[3],sy6[3]      
dim 4%,vy1[3],vy2[3],vy3[3],vy4[4],vy5[3],vy6[3] 
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70],General$[60]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Dim K1$[3],K2$[3],K3$[2],K4$[2]
Rem {end dim.rtn.input}
Rem order header (invh)
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8]
Dim 2%,HFAX[1],HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL,OREF[5]
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Rem order file - line item (invl)
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,INVNO,QPB,ROL0
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Rem product file
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1]
Rem Product warehouse
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Def FNZ(H) = Int(Abs(H) + .5) * Sgn(H)
!X2 = Spc(5)
!COID = Int((X2 - Int(X2 / 16384) * 16384) / 64)
!!!! dx add xport reporting code
Dim tmp1$[300],tmp2$[300],tmp$[2000]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!!
let coid=intCO
J$ = COID Using "cntrl#"
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,115;D9;
READ #1,0,108;ARDATE;
mat read #1,115,60;custom_customer$; 
let custom_customer$=rtrim$(custom_customer$)
!!-!! !!-!! Print 'CS CE'; Tab 0;"-MX438-"; Tab 20;"BUYER ANALYSIS REPORT";
for j=2 to 8
	try close #j else rem
next j
! bypass channel 9 sort file
for j=10 to 89
	try close #j else rem
next j
Rem open files
For J = 2 To 8
  Read J1
  If J1=-1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1136","1184","1792","1744","-1","-1","2400"
CH_INVH = 2
CH_INVL = 3
CH_PROD = 4
CH_PRWH = 5
CH_INVK = 6
CH_BUY = 7
ch_vend=8
ch_produda=10
CH_BTMP = 89  ! was 99 
J$ = "2/BUYERS" \ Ropen #CH_BUY,J$
J$ = "4/SORDFLEHHKEY" + Str$(COID) \ Ropen #CH_INVK,J$
j$= "2/SPRODUDA"+STR$(COID)\ropen  #ch_produda,j$
!
Rem build buyer temp file
! - PORTNUM = Spc(6)
! - TMPFNAME$ = "6/BUYTEMP" + Str$(PORTNUM)
! - CMD$ = "[1:94] ",TMPFNAME$,"!"
! - Build #CH_BTMP,CMD$
! - REC_BTMP = 3 \ Search #CH_BTMP,0,1;KEYBTMP$,REC_BTMP,E 
! - If E Let e$ = "syserrorfile error building ",TMPFNAME$,"!" \ error 10000
! - REC_BTMP = 1 \ Search #CH_BTMP,0,0;KEYBTMP$,REC_BTMP,E 
! - If E Let e$ = "syserrorfile error building ",TMPFNAME$,"!" \ error 10000
! - Close #CH_BTMP
! - Open #CH_BTMP,TMPFNAME$
Mat Read #1,0,100;DATE$;
Read #1,3;CNAME$;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0) \ If Err 0 GoSub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
V9[4] = 60 \ If J8 Let V9[4] = 22
V9[1] = 90 \ J2 = 0

If J8 ! dx xml, setup rstr$
  !<section>
    MySQL_ch = OpenMySQLBrowserOutput(e$)
   if MySQL_ch <> -1
	MySQLQueueID = GetMySQLReportHeader(e$,MySQL_ch,"438")
	if MySQLQueueID = 0
		e$ = "Could not get MySQL report header!"
		error 10000
	end if
  else
	tmp$ = bsdel$,"438",fdel$,rdel$
	Call addtostr(e$,rstr$,tmp$)
  end if
End If 
!
TMPFNAME$ = "6/BUYTEMP" + rtrim$(UserID$)
CMD$ = "[1:94] ",TMPFNAME$,"!"
Build #CH_BTMP,CMD$
REC_BTMP = 14 \ Search #CH_BTMP,0,1;KEYBTMP$,REC_BTMP,E 
If E Let e$ = "syserrorfile error building ",TMPFNAME$,"!" \ error 10000
REC_BTMP = 1 \ Search #CH_BTMP,0,0;KEYBTMP$,REC_BTMP,E 
If E Let e$ = "syserrorfile error building ",TMPFNAME$,"!" \ error 10000
Close #CH_BTMP
Open #CH_BTMP,TMPFNAME$
!
!
! - !  dx add xport reporting code
! date
Call dxget("WKDATE",tmp$) ! MMDDYY
if rtrim$(tmp$)=""
	let daydate=ardate ! default to ardate
else
	let tmp3=tmp$
	let tmp$=tmp3 using "&&&&&&"
	let j$=tmp$[5,6],tmp$[1,4] ! yymmdd format
	let daydate=j$
endif
let x2=daydate
gosub L_7840: ! convert to julian
if flag<>0
	e$ = "Invalid Date Entered" \ error 10000
endif
if x2<=0
	e$ = "Invalid Date Entered" \ error 10000
endif
JDAYDATE=X2 
let j$=daydate using "&&&&&&"
let year_=j$[1,2] ! year
GOSUB CALC_DATES:                                     
LET SIDATE=SWKDATE
LET EIDATE=EWKDATE 
           
!
Call dxget("I1",K1$) \ BUYER[0]=K1$ ! Buyer Code Starting
Call dxget("I2",K2$) \ If K2$ = "" BUYER[1]=999 else BUYER[1]=K2$	!Buyer Code Ending
Call dxget("I3",UNIT$) \ UnitType=UNIT$ ! Unit Type
Call dxget("I4",K3$) \ WHSE[0]=K3$ ! Warehouse Starting
Call dxget("I5",K4$) \ If K4$ = "" let WHSE[1]=D9[5] else WHSE[1]=K4$ ! Warehouse Ending
!
Call dxget("DNRFLAG",tmp$)
let dnrflag=0\if rtrim$(tmp$)<>"" let dnrflag=99

Call dxget("MMFLAG",tmp$)
let mmflag=0\if rtrim$(tmp$)<>"" let mmflag=99

Call dxget("VENDFLAG",tmp$) !print vendor subtotal for each buyer  
let Vendflag=0\if rtrim$(tmp$)<>"" let vendflag=99

Call dxget("PRODFLAG",tmp$) ! print prod detail by buyer/vendor 
let prodflag=0\if rtrim$(tmp$)<>"" let Prodflag=99

let udaflag=0
if custom_customer$="ACME"
	Call dxget("UDAFLAG",tmp$) ! REM"Exclude products if UDA10 field is equal to 'YES'
	let udaflag=0\if rtrim$(tmp$)<>"" let udaflag=99
endif

! starting & ending Buyer Code
if BUYER[0]<0 or BUYER[0]>999 let e$="Invalid starting Buyer Code, must be between 0 and 999!" \ error 10000 
if BUYER[1]<BUYER[0] or BUYER[1]>999 let e$="Invalid ending Buyer Code, must be between starting buyer code and 999!" \ error 10000 
K1$=BUYER[0] using "###"
K2$=BUYER[1] using "###"
!
! Unit Code
UM$ = " ",UM$
If UnitType = 1 Let U5$ = "IN STOCKING UNITS   "
If UnitType = 2 Let U5$ = "IN SELLING UNITS    "
If UnitType = 3 Let U5$ = "IN PURCHASING UNITS "
If UnitType = 4 Let U5$ = "IN COSTING UNITS    "
If UnitType = 5 Let U5$ = "IN PRICING UNITS    "
If UnitType = 6 Let U5$ = "IN PRODUCTION UNITS "
!
! starting & ending sort by
if WHSE[0]<0 or WHSE[0]>D9[5] let e$="Invalid starting warehouse, must be between 0 and ",D9[5],"!" \ error 10000 
if WHSE[1]<WHSE[0] or WHSE[1]>D9[5] let e$="Invalid ending warehouse, must be between starting warehouse and ",D9[5],"!" \ error 10000 
!
If J8 = 0 or MySQLQueueID !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
!
if J8
  tmp$ ="BUYER ",fdel$
  tmp$ =tmp$,"BUYER NAME",fdel$
  tmp$ =tmp$,"VENDOR",fdel$
  tmp$ =tmp$,"VENDOR NAME",fdel$
  tmp$ =tmp$,"ITEM CODE",fdel$
  tmp$ =tmp$,"PERIOD",fdel$
  tmp$ =tmp$,"SALES UNITS",fdel$
  tmp$ =tmp$,"SALES $",fdel$
  tmp$ =tmp$,"LOAD PROFIT",fdel$
  tmp$ =tmp$,"GP %",fdel$
  tmp$ =tmp$,"UNITS LOST",fdel$
  tmp$ =tmp$,"LOST SALES $",fdel$
  tmp$ =tmp$,"G/L PROFIT",fdel$
  tmp$ =tmp$,"LOST GP %",fdel$
  tmp$ =tmp$,"LOST% UNITS",fdel$
  tmp$ =tmp$,"LOST% SALES",fdel$
  !
   if MySQLQueueID
	call AddMySQLReportColumnHeadings(e$,MySQL_ch,MySQLQueueID,fdel$,tmp$)
  else
	call addtostr(e$,rstr$,tmp$+rdel$)
  end if
  return
end if

L_1900: Rem sort & create buyer info
!!-!! Print @0,22;'CE';"Sorting, please wait...";
KEYBTMP$ = " ",KEYBTMP$
CLRBTMP: Rem clr buyer temp file
Search #CH_BTMP,3,1;KEYBTMP$,REC_BTMP,E \ If E = 2 Goto STARTSORT
!!-!! !!-!! If E Gosub ERR_SEARCH
Search #CH_BTMP,5,1;KEYBTMP$,REC_BTMP,E !!-!! \ !!-!! If E Gosub ERR_SEARCH
If E Let e$ = "syserrorfile 438 sortfile mode (m)=5 keyno (k)=1 r=",REC_BTMP," e=",e," keyval (k$)=",KEYBTMP$ \error 10000
! E = 3 \ Search #CH_BTMP,1,0;KEYBTMP$,REC_BTMP,E  If E Gosub ERR_SEARCH
Goto CLRBTMP
!
STARTSORT: Rem sort thru invoice key file
gosub calc_dates:
PCTR = 0
!KEYINVK$ = " ",KEYINVK$;KEYINVK$[1,6] = PER[0] Using "######"
let keyinvk$=" ",keyinvk$;keyinvk$[1,4]=per[0] using "####"
keyinvk$[5,6]=boymo using "&&"
SRCHINVK: Rem search the invoice header indext
Search #CH_INVK,3,1;KEYINVK$,REC_INVH,E 
If E = 2 Goto STARTPRNT
!PERIOD = KEYINVK$[1,6] \ If PERIOD > PER[1] Goto STARTPRNT
let period=keyinvk$[1,6]\if period>eper goto startprnt:
Gosub READ_INVH
PCTR = PCTR + 1
!!-!! If Not(Fra(PCTR / 500)) Print Using "#######";@25,22;PCTR;" Records Processed";
If H4[2] < WHSE[0] Or H4[2] > WHSE[1] Goto SRCHINVK
if custom_customer$="ACME"
	if h5[6]<>0 goto srchinvk: ! skip this if it contains an original order in h5[6]
endif
KEYINVL$ = " ",KEYINVL$;KEYINVL$[1,10] = OREF[1] Using "##########"
SRCHINVL: Rem search thru line
Search #CH_INVL,3,1;KEYINVL$,REC_INVL,E 
If E = 2 Goto SRCHINVK
N0 = KEYINVL$[1,10] \ If N0 <> OREF[1] Goto SRCHINVK
Gosub READ_INVL
If L3[0] Goto SRCHINVL
If S2[0] = 3 Goto SRCHINVL
KEYPRWH$ = " ",KEYPRWH$
KEYPRWH$[1,12] = L1$[1,12]
KEYPRWH$[13,14] = H4[2] Using "##"
Search #CH_PRWH,2,1;KEYPRWH$,REC_PRWH,E \ If E = 1 Goto SRCHINVL
!!-!! If E Gosub ERR_SEARCH
Gosub READ_PRWH
If W1[2] < BUYER[0] Or W1[2] > BUYER[1] Goto SRCHINVL
if dnrflag<>0 and w0[0]<>0 goto srchinvl: ! exlcude the do not re-order products 
if mmflag<>0
	if w3[3]=0 and w3[4]=0 goto srchinvl: !exclude min/max values is zero 
endif
BUYCODE = W1[2]
let vendcode=w2[3]
KEYPROD$ = " ",KEYPROD$;KEYPROD$[1,12] = L1$[1,12]
Search #CH_PROD,2,1;KEYPROD$,REC_PROD,E \ If E = 1 Goto SRCHINVL
!!-!! If E Gosub ERR_SEARCH
Gosub READ_PROD
if custom_customer$="ACME"
	If udaflag<>0
		gosub get_produda:
		if puda$[451,453]="YES" goto srchinvl:  !"cct#224719
	endif
endif
SLSUNIT = 0;SLSAMT = 0;LOADPROF = 0;LSTUNIT = 0;LSTAMT = 0;LSTGLPROF = 0
If H0 = 31 And H3[1] = 3 ! credit memo price change
  SLSUNIT = 0
Else 
  If L7[4] ! shipped qty base
	CNTVU[0] = 0;CNVTU[1] = PFU1[UnitType];CNVTU[2] = 1
	CNVTA = L7[4]
	Gosub L_20000
	SLSUNIT = AMOUNT
  End If 
End If 
SLSAMT = L5[3]
LOADPROF = L5[3] - S3[12]
If Not(H5[6]) Or H0[0] = 31 ! already invoice once - credit memo
  If L7[2] > L7[4] ! qty order > qty shipped
	CNVTU[0] = 0;CNVTU[1] = PFU1[UnitType];CNVTU[2] = 1
	CNVTA = (L7[2] - L7[4])
	Gosub L_20000
	LSTUNIT = AMOUNT
	PRICE = 0
	If L7[4]
	  PRICE = L5[3] / L7[4]
	Else 
	  PRICE = L5[2]
	End If 
	LSTAMT = FNR((L7[2] - L7[4]) * PRICE)
	UNITGL = 0
	If L7[4]
	  UNITGL = L7[10] / L7[4]
	Else 
	  If L7[7]
		UNITGL = L7[7]
	  Else 
		UNITGL = B[21]
	  End If 
	End If 
	If H5[7] = 16 Let UNITGL = 0
	EXTGL = FNR((L7[2] - L7[4]) * UNITGL)
	LSTGLPROF = LSTAMT - EXTGL
  End If 
End If 
If H0 = 31 ! credit memo reverse signs
  SLSUNIT = - SLSUNIT
  SLSAMT = - SLSAMT
  LOADPROF = - LOADPROF
  LSTUNIT = - LSTUNIT
  LSTAMT = - LSTAMT
  LSTGLPROF = - LSTGLPROF
End If 
! new
let rangeflag=1
LET X2=H0[8] \ GOSUB L_7820: \ LET X2=0    
LET JWDATE=X2                              
rangeflag=1
if rangeflag<>0 and daydate=h0[8] ! today's date  day=invoice date
	let type=0 ! day
	gosub updatebtmp:
endif
if rangeflag<>0
	if h0[8]>=swkdate and h0[8]<=ewkdate
		let type=1 ! week
		gosub updatebtmp:
	endif
endif
if period=curper
	let type=2 ! month
	gosub updatebtmp:
else
   if (period>=bper and period<=eper)
	let type=2  !month
	gosub updatebtmp:
   endif
endif
if (int(period/100)>=per[0] and int(period/100)<=per[1])   
	let type=3 ! year
	gosub updatebtmp:
endif
goto srchinvl:

!
STARTPRNT: Rem start !!-!! Print here
PCTR = 0;KEYBTMP$ = " ",KEYBTMP$
let vendcode=0
let holdbuy=-1
let holdvend=-1
For CTR = 0 To 3
  TY1[CTR] = 0;TY2[CTR] = 0;TY3[CTR] = 0;TY4[CTR] = 0;TY5[CTR] = 0;TY6[CTR] = 0
	let sy1[ctr]=0;sy2[ctr]=0;sy3[ctr]=0;sy4[ctr]=0;sy5[ctr]=0;sy6[ctr]=0 
	let vy1[ctr]=0;vy2[ctr]=0;vy3[ctr]=0;vy4[ctr]=0;vy5[ctr]=0;vy6[ctr]=0 
Next CTR
!!-!! If Not(J8) !!-!! Print @0,22;"Printing, please wait...";
!!-!! If J8 !!-!! Print 'CS';
!!-!! If Err 0 Gosub ERR_ESCAPE
L_2000: 
	Search #CH_BTMP,3,1;KEYBTMP$,REC_BTMP,E \ If E = 2 Goto L_9100
	If E Goto L_9100
	if reportAborted goto OUTEND:
	let buycode=keybtmp$[1,4]
	if prodflag<>0 or vendflag<>0
		let buyername$=" ",buyername$              
		mat read #ch_buy,buycode,0;buyername$;     
		let vendcode=keybtmp$[5,10]    
		let vendname$=" ",vendname$                   
		LEt vendkey$=" ",vendkey$                     
		let vendkey$=vendcode USING "######"          
		search #ch_vend,2,1;vendkey$,vend_rec,e       
		if not (e)                                     
			mat read #ch_vend,vend_rec,0;vendname$;    
		else                                          
			let vendname$="VEND NAME NOT FOUND"        
		endif                                         
		if holdbuy<>-1 and holdbuy<>buycode      
			gosub prnt_buy_subtotal: 
			let v9[1]=v9[1]+1                                                         
			gosub L_5800:                                                          
			if not(j8) PRINT #0; USING "BUYER: ### "; TAB 10;BUYCODE;BUYERNAME$[1,30]       
			let holdbuy=buycode               
		endif                                
		if prodflag                             
			if holdvend<>-1 and holdvend<>vendcode     
				gosub prnt_vend_subtotal:           
			let v9[1]=v9[1]+1                                               
				gosub L_5800:                                                  
				if not(j8) PRINT #0; USING "BUYER: ### "; TAB 10;BUYCODE;BUYERNAME$[1,30];        
				if not(j8) PRINT #0; USING "VENDOR: ###### ";VENDCODE;VENDNAME$[1,30]             
				let holdvend=vendcode               
			endif  
		endif
	endif
	BUYERNAME$ = " ",BUYERNAME$
	Mat Read #CH_BUY,BUYCODE,0;BUYERNAME$;
	mat read #ch_btmp,rec_btmp,0;by1;     
	mat read #ch_btmp,rec_btmp,24;by2;    
	mat read #ch_btmp,rec_btmp,48;by3;    
	mat read #ch_btmp,rec_btmp,72;by4;    
	mat read #ch_btmp,rec_btmp,96;by5;    
	mat read #ch_btmp,rec_btmp,120;by6; 
	LNS = 5
	Gosub L_5800 ! header routine
	Gosub L_5000 ! line print
	Gosub L_2200 ! calc totals
	If Not(J8)
		PCTR = PCTR + 1
		!!-!! If Not(Fra(PCTR / 500)) !!-!! Print Using "#######";@25,22;PCTR;" Records Printed";
	End If 
Goto L_2000
!
L_2200: Rem calc totals
For CTR = 0 To 3
  TY1[CTR] = TY1[CTR] + BY1[CTR]
  TY2[CTR] = TY2[CTR] + BY2[CTR]
  TY3[CTR] = TY3[CTR] + BY3[CTR]
  TY4[CTR] = TY4[CTR] + BY4[CTR]
  TY5[CTR] = TY5[CTR] + BY5[CTR]
  TY6[CTR] = TY6[CTR] + BY6[CTR]
  let sy1[ctr]=sy1[ctr]+by1[ctr]   !"buyer subtotal 
	let sy2[ctr]=sy2[ctr]+by2[ctr] 
	let sy3[ctr]=sy3[ctr]+by3[ctr] 
	let sy4[ctr]=sy4[ctr]+by4[ctr] 
	let sy5[ctr]=sy5[ctr]+by5[ctr] 
	let sy6[ctr]=sy6[ctr]+by6[ctr] 
	let vy1[ctr]=vy1[ctr]+by1[ctr]  !"vendor subtotal
	let vy2[ctr]=vy2[ctr]+by2[ctr] 
	let vy3[ctr]=vy3[ctr]+by3[ctr] 
	let vy4[ctr]=vy4[ctr]+by4[ctr] 
	let vy5[ctr]=vy5[ctr]+by5[ctr] 
	let vy6[ctr]=vy6[ctr]+by6[ctr] 
Next CTR
Return 

prnt_buy_subtotal: !
if not (vendflag) and not (prodflag)  return
for ctr=0 to 3                                                                  
	let by1[ctr]=sy1[ctr];by2[ctr]=sy2[ctr]
	let by3[ctr]=sy3[ctr];by4[ctr]=sy4[ctr] 
	let by5[ctr]=sy5[ctr];by6[ctr]=sy6[ctr]                                     
next ctr                                                                        
let lns=5    
let totflag=1
gosub l_5800:                                                                   
if not(j8) gosub l_5000:  
for ctr=0 to 3                                                            
	let sy1[ctr]=0;sy2[ctr]=0;sy3[ctr]=0;sy4[ctr]=0;sy5[ctr]=0;sy6[ctr]=0 
next ctr     
let totflag=0
return

prnt_vend_subtotal:    !"
if not (vendflag) and not (prodflag)  return
for ctr=0 to 3                                                              
	let by1[ctr]=vy1[ctr];by2[ctr]=vy2[ctr]
	let by3[ctr]=vy3[ctr];by4[ctr]=vy4[ctr]
	let by5[ctr]=vy5[ctr];by6[ctr]=vy6[ctr]    
next ctr
let lns=5
let totvflag=1
gosub l_5800:   
if not(j8) gosub l_5000:   
for ctr=0 to 3                                                            
	let vy1[ctr]=0;vy2[ctr]=0;vy3[ctr]=0;vy4[ctr]=0;vy5[ctr]=0;vy6[ctr]=0 
next ctr     
let totvflag=0
return
!
L_4000: Rem TOTAL PRINT
If J8 return
If BUYER[0] <> BUYER[1] ! printing for 1 buyer do not need grand totals
  BUYCODE = 9999
  BUYERNAME$ = "**** GRAND TOTALS **** "
  For CTR = 0 To 3
    BY1[CTR] = TY1[CTR];BY2[CTR] = TY2[CTR];BY3[CTR] = TY3[CTR];BY4[CTR] = TY4[CTR]
    BY5[CTR] = TY5[CTR];BY6[CTR] = TY6[CTR]
  Next CTR
  LNS = 5
  Gosub L_5800
  if not(j8) Gosub L_5000
End If 
Print #0; Tab 24;"** EXCLUDES NON-INVENTORY ITEMS **"
Return

L_5000: ! PRINT LINE
	if j8
		! if browser output, L_5000 (line print) will only get called
		! if it's a true detail line
		for ctr=0 to 3
			tmp$ = str$(buycode)+fdel$+rtrim$(buyername$)+fdel$
			tmp$ = tmp$+str$(vendcode)+fdel$+rtrim$(vendname$)+fdel$
			tmp$ = tmp$+rtrim$(KEYBTMP$[11,22])+fdel$
			select case ctr
				case 0
					tmp$ = tmp$+"Day"+fdel$
				case 1
					tmp$ = tmp$+"Week"+fdel$
				case 2
					tmp$ = tmp$+"Month"+fdel$
				case 3
					tmp$ = tmp$+"Year"+fdel$
			end select
			tmp$ = tmp$+fnz(by1[ctr]) USING "--------#"+fdel$ ! sales units
			tmp$ = tmp$+by2[ctr] USING "--------#.##"+fdel$ ! sales $
			tmp$ = tmp$+by3[ctr] USING "--------#.##"+fdel$ ! load profit $
			if by2[ctr]
				let prct=fnr((by3[ctr]/by2[ctr])*100) ! profit/sales$ gp %
			else
				let prct=0
			endif
			tmp$ = tmp$+prct using "---#.##"+fdel$ ! gp %
			tmp$ = tmp$+fnz(by4[ctr]) using "--------#"+fdel$ ! unit lost 
			tmp$ = tmp$+by5[ctr] using "--------#.##"+fdel$ ! lost sales $
			tmp$ = tmp$+by6[ctr] using "--------#.##"+fdel$ ! g/l lost sales profit
			if by5[ctr]
				let prct=fnr((by6[ctr]/by5[ctr])*100) ! lost gp/lost sales$ %
			else
				let prct=0
			endif
			tmp$ = tmp$+prct using "----.##"+fdel$
			if fnz(by4[ctr])+fnz(by1[ctr])
				let prct=fnr( ( fnz(by4[ctr]) / (fnz(by4[ctr])+fnz(by1[ctr])) )*100)
				! lost lost units units+unit sales %   task5344
			else
				let prct=0
			endif
			IF PRCT>abs(9999.99)
				tmp$ = tmp$+prct using "-------#"+fdel$
			else
				tmp$ = tmp$+prct using "-----.##"+fdel$
			endif
			if (by5[ctr]+by2[ctr])
				let prct=fnr((by5[ctr]/(by5[ctr]+by2[ctr]))*100) 
				! lost lost sales $ /sls$+lost$   %     task5344
			else
				let prct=0
			endif
			IF PRCT>abs(9999.99) 
				tmp$ = tmp$+prct using "-------#"+fdel$
			else
				tmp$ = tmp$+prct using "-----.##"+fdel$
			endif
			if MySQLQueueID
				if not(AddMySQLReportData(e$,MySQL_ch,MySQLQueueID,fdel$,tmp$))
					! possible user abort - report deleted exit now
					reportAborted = 1
				end if
			else
				call addtostr(e$,rstr$,tmp$+rdel$)
			end if
		next ctr
		return
	end if
	if not (vendflag) and not (prodflag)
		if buycode<>9999
			print #0;using "###";tab 0; buycode;
		endif
		print #0;tab 4;buyername$[1,23];
	endif
	if buycode = 9999
		if vendflag<>0 or prodflag<>0    !"grand total
			print #0;tab 4;buyername$[1,23]; 
		endif
	endif
	if buycode <> 9999 if vendflag<>0 or prodflag<>0
		if prodflag<>0
			if not (totvflag) and not (totflag)
				if holdbuy<0 
					print #0;using "BUYER: ### ";tab 10;buycode;buyername$[1,30];
					print #0;using "VENDOR: ###### ";vendcode;vendname$[1,30]
					let holdbuy=buycode \ let holdvend=vendcode
				endif
				print #0;tab 4;KEYBTMP$[11,22];tab 28;
			endif
			if totvflag<>0                            
				print #0;tab 0;"  *VENDOR ";       
				print #0;using "######";holdvend;  
				print #0;" SUBTOTAL*";tab 28;        
			endif 
			if totflag                           
				print #0;tab 0;"***BUYER ";       
				print #0;using "######";holdbuy;  
				print #0;" SUBTOTAL***";tab 28;   
			endif                                
		else
			if totflag
				print #0;tab 0;"***BUYER ";
				print #0;using "######";holdbuy;
				print #0;" SUBTOTAL***";tab 28; 
			else
				if holdbuy<0     
					print #0;using "BUYER: ### ";tab 10;buycode;buyername$[1,30]   
					let holdbuy=buycode
				endif
				print #0;using "######";tab 0;vendcode;" ";vendname$[1,20];          
			endif
		endif
	endif

	for ctr=0 to 3
		if ctr=1
			print #0; tab 10;"Week";
		else
			if ctr=2
				print #0;tab 10;"Month";
			else
				if ctr=3
					print #0;tab 10;"Year";
				endif
			endif
		endif
		PRINT #0; USING "--------#"; TAB 28;fnz(by1[ctr]); ! sales units
		print #0; using "--------#.##"; tab 38;by2[ctr]; ! sales $
		print #0; using "--------#.##"; tab 51;by3[ctr]; ! load profit $
		if by2[ctr]
			let prct=fnr((by3[ctr]/by2[ctr])*100) ! profit/sales$ gp %
		else
			let prct=0
		endif
		print #0;using "---#.##";tab 64;prct; ! gp %
		print #0; using "--------#"; tab 72;fnz(by4[ctr]); ! unit lost 
		print #0; using "--------#.##"; tab 82;by5[ctr]; ! lost sales $
		print #0; using "--------#.##"; tab 95;by6[ctr]; ! g/l lost sales profit
		if by5[ctr]
			let prct=fnr((by6[ctr]/by5[ctr])*100) ! lost gp/lost sales$ %
		else
			let prct=0
		endif
		print #0; using "----.##";tab 108;prct;
		if fnz(by4[ctr])+fnz(by1[ctr])
			let prct=fnr( ( fnz(by4[ctr]) / (fnz(by4[ctr])+fnz(by1[ctr])) )*100)
			! lost lost units units+unit sales %   task5344
		else
			let prct=0
		endif
		IF PRCT>abs(9999.99)
			print #0; using "-------#";tab 115;prct;
		else
			print #0; using "-----.##";tab 115;prct;
		endif
		if (by5[ctr]+by2[ctr])
			let prct=fnr((by5[ctr]/(by5[ctr]+by2[ctr]))*100) 
			! lost lost sales $ /sls$+lost$   %     task5344
		else
			let prct=0
		endif
		IF PRCT>abs(9999.99) 
			print #0; using "-------#";tab 123;prct;
		else
			print #0; using "-----.##";tab 123;prct;
		endif
		print #0;""
	next ctr
	print #0;""
RETURN 
!
L_5800: Rem HEADINGS ROUTINE
if J8 return
V9[1] = V9[1] + LNS \ If V9[1] < V9[4] Return 
! - If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$  !!-!! \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ V9[1] = 7 + LNS
If Not(J8) Print #0;"\12\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;DATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;"-mx438- ";T9$;
Print #0; Tab 38;"B U Y E R   A N A L Y S I S  R E P O R T"
X2 = DAYDATE \ Gosub L_7700
Print #0;"FOR THE DAY OF ";X$[1,8];
If WHSE[0] = WHSE[1]
  Print #0; Using "FOR WAREHOUSE ## "; Tab 45;WHSE;" ";U5$;
Else 
  Print #0; Using "##"; Tab 45;"WAREHOUSE ";WHSE[0];" THRU ";WHSE[1];" ";U5$;
End If 
PRINT #0;" FROM ";
LET X2=SIDATE        
IF X2<>0               
  GOSUB ISDUNPACK:   
  PRINT #0;X$; 
endif
print #0;" TO ";
LET X2=EIDATE   
IF X2<>0           
   GOSUB ISDUNPACK:    
   PRINT #0;X$;           
endif
if prodflag<>0 or vendflag<>0 
   if prodflag<>0
	  print #0;" PRINT PRODUCT DETAIL BY BUYER/VENDOR";
   else
	  print #0;" PRINT VENDOR SUBTOTAL FOR EACH BUYER";
   endif
ENDIF
Rem Print #0;Tab 100;"*excludes non-inventory items";
Print #0;""
Print #0;""
!Print #0; Tab 4;"BUYER";
if not (vendflag) and not (prodflag)
   print #0;tab 4;"BUYER";
endif
if prodflag<>0 or vendflag<>0
   if prodflag
      print #0;tab 4;"ITEM CODE";
   else
	  print #0;tab 4;"VENDOR";
   endif
endif
Print #0; Tab 28;"    SALES";
Print #0; Tab 38;"       SALES";
Print #0; Tab 51;"        LOAD";
Print #0; Tab 64;"     GP";
Print #0; Tab 72;"    UNITS";
Print #0; Tab 82;"        LOST";
Print #0; Tab 95;"         G/L";
Print #0; Tab 108;"   LOST";
Print #0; Tab 116;"  LOST%";
Print #0; Tab 124;"  LOST%";
Print #0;""
Rem! heading line 2
Print #0; Tab 28;"    UNITS";
Print #0; Tab 38;"           $";
Print #0; Tab 51;"      PROFIT";
Print #0; Tab 64;"      %";
Print #0; Tab 72;"     LOST";
Print #0; Tab 82;"     SALES $";
Print #0; Tab 95;"      PROFIT";
Print #0; Tab 108;"   GP %";
Print #0; Tab 116;"  UNITS";
Print #0; Tab 124;"  SALES";
Print #0;""
Return 
!
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
!
L_7770: Rem DATE JULIAN X2 TO X$
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
L_7840: Rem CONVERT JULIAN TO YYMMDD
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
L_7860: Rem CONVERT YYMM TO YYYYMM
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&";X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6] \ Return 
!
READ_INVH: Rem read invoice history file
Mat Read #CH_INVH,REC_INVH,0;H0
Mat Read #CH_INVH,REC_INVH,52;H3
Mat Read #CH_INVH,REC_INVH,56;TOT_SELL
Mat Read #CH_INVH,REC_INVH,64;LOCKPORT
Mat Read #CH_INVH,REC_INVH,66;V0$
Mat Read #CH_INVH,REC_INVH,78;H4
Mat Read #CH_INVH,REC_INVH,84;H0$
Mat Read #CH_INVH,REC_INVH,104;H5
Mat Read #CH_INVH,REC_INVH,172;ST3
Mat Read #CH_INVH,REC_INVH,272;H1$
Mat Read #CH_INVH,REC_INVH,278;SLSM
Mat Read #CH_INVH,REC_INVH,318;SCOM
Mat Read #CH_INVH,REC_INVH,348;SMER
Mat Read #CH_INVH,REC_INVH,378;SCST
Mat Read #CH_INVH,REC_INVH,408;H6
Mat Read #CH_INVH,REC_INVH,444;HMAT$
Mat Read #CH_INVH,REC_INVH,446;P0$
Mat Read #CH_INVH,REC_INVH,466;HFAX
Mat Read #CH_INVH,REC_INVH,474;HSTI
Mat Read #CH_INVH,REC_INVH,482;H2
Mat Read #CH_INVH,REC_INVH,486;OWHT
Mat Read #CH_INVH,REC_INVH,490;OWHT1
Mat Read #CH_INVH,REC_INVH,498;TOTGL
Mat Read #CH_INVH,REC_INVH,504;PICKBY
Mat Read #CH_INVH,REC_INVH,512;OREF
Return 
!
READ_INVL: Rem read invoice history line file
Mat Read #CH_INVL,REC_INVL,0;L2
Mat Read #CH_INVL,REC_INVL,8;L3
Mat Read #CH_INVL,REC_INVL,16;L4
Mat Read #CH_INVL,REC_INVL,32;L5
Mat Read #CH_INVL,REC_INVL,56;L6
Mat Read #CH_INVL,REC_INVL,80;L6$
Mat Read #CH_INVL,REC_INVL,140;L1$
Mat Read #CH_INVL,REC_INVL,160;L9
Mat Read #CH_INVL,REC_INVL,168;L7
Mat Read #CH_INVL,REC_INVL,246;PL
Mat Read #CH_INVL,REC_INVL,250;UN
Mat Read #CH_INVL,REC_INVL,256;S2
Mat Read #CH_INVL,REC_INVL,260;S3
Mat Read #CH_INVL,REC_INVL,368;MT$
Mat Read #CH_INVL,REC_INVL,370;S3$
Mat Read #CH_INVL,REC_INVL,404;OLM
Mat Read #CH_INVL,REC_INVL,446;EUN
Mat Read #CH_INVL,REC_INVL,452;UNF
Mat Read #CH_INVL,REC_INVL,494;LCO
Mat Read #CH_INVL,REC_INVL,502;CST
Mat Read #CH_INVL,REC_INVL,508;LTAX1
Mat Read #CH_INVL,REC_INVL,514;CTWT
Mat Read #CH_INVL,REC_INVL,518;INVNO
Mat Read #CH_INVL,REC_INVL,538;LTAX2
Mat Read #CH_INVL,REC_INVL,542;QPB
Read #CH_INVL,REC_INVL,548;LPRINTED
Read #CH_INVL,REC_INVL,550;OWHS
Read #CH_INVL,REC_INVL,552;LP_DATE
Read #CH_INVL,REC_INVL,556;LP_TIME
Read #CH_INVL,REC_INVL,564;ROL0
Return 
!
get_produda: ! cct#224719
let puda$=" ",puda$
let K10$=" ",k10$;k10$[1,12]=l1$[1,12]           
search #ch_produda,2,1;k10$,r10,e
if not (e)
   mat read #ch_produda,r10,12;puda$;
endif
return

READ_PROD: Rem read product file
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Return 
!
READ_PRWH: Rem read product whse file
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
Read #CH_PRWH,REC_PRWH,396;WHLPOOL
Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
Read #CH_PRWH,REC_PRWH,404;FCWGT
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Read #CH_PRWH,REC_PRWH,798;WHRPLN
Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
Mat Read #CH_PRWH,REC_PRWH,842;WHLM
Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
Read #CH_PRWH,REC_PRWH,894;RESTRICTED
Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
Read #CH_PRWH,REC_PRWH,922;VLIST
Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
Read #CH_PRWH,REC_PRWH,938;WHBASE
Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
Return 
!
UPDATEBTMP: Rem update buyer temp file
KEYBTMP$ = " ",KEYBTMP$;KEYBTMP$[1,4] = BUYCODE Using "###"
if prodflag<>0 or vendflag<>0                 
	if prodflag<>0
		let keybtmp$[5,10]=vendcode using "######"   
		let keybtmp$[11,22]=L1$[1,12]
	else 
		 let keybtmp$[5,10]=vendcode using "######"  
	endif
endif
Search #CH_BTMP,2,1;KEYBTMP$,REC_BTMP,E !!-!! \ If Err 0 
If E = 1
  For CTR = 0 To 3
    BY1[CTR] = 0;BY2[CTR] = 0;BY3[CTR] = 0;BY4[CTR] = 0;BY5[CTR] = 0;BY6[CTR] = 0
  Next CTR
  E = 2 \ Search #CH_BTMP,1,0;KEYBTMP$,REC_BTMP,E !!-!! \ If E 
  Mat Write #CH_BTMP,REC_BTMP,0;BY1
  Mat Write #CH_BTMP,REC_BTMP,24;BY2
  Mat Write #CH_BTMP,REC_BTMP,48;BY3
  Mat Write #CH_BTMP,REC_BTMP,72;BY4
  Mat Write #CH_BTMP,REC_BTMP,96;BY5
  Mat Write #CH_BTMP,REC_BTMP,120;BY6;
  Search #CH_BTMP,4,1;KEYBTMP$,REC_BTMP,E !!-!!\ If E 
  If E Let e$ = "syserrorfile 438 sortfile mode (m)=4 keyno (k)=1 r=",REC_BTMP," e=",e," keyval (k$)=",KEYBTMP$ \error 10000
End If 
Mat Read #CH_BTMP,REC_BTMP,0;BY1;
Mat Read #CH_BTMP,REC_BTMP,24;BY2;
Mat Read #CH_BTMP,REC_BTMP,48;BY3;
Mat Read #CH_BTMP,REC_BTMP,72;BY4;
Mat Read #CH_BTMP,REC_BTMP,96;BY5;
Mat Read #CH_BTMP,REC_BTMP,120;BY6
BY1[TYPE] = BY1[TYPE] + SLSUNIT
BY2[TYPE] = BY2[TYPE] + SLSAMT
BY3[TYPE] = BY3[TYPE] + LOADPROF
BY4[TYPE] = BY4[TYPE] + LSTUNIT
BY5[TYPE] = BY5[TYPE] + LSTAMT
BY6[TYPE] = BY6[TYPE] + LSTGLPROF
Mat Write #CH_BTMP,REC_BTMP,0;BY1
Mat Write #CH_BTMP,REC_BTMP,24;BY2
Mat Write #CH_BTMP,REC_BTMP,48;BY3
Mat Write #CH_BTMP,REC_BTMP,72;BY4
Mat Write #CH_BTMP,REC_BTMP,96;BY5
Mat Write #CH_BTMP,REC_BTMP,120;BY6;
Return 
!
L_9100: Rem END OF THIS RANGE
if vendflag<>0 or prodflag<>0   
 if prodflag<>0             
	GOSUB PRNT_VEND_SUBTOTAL:    
	GOSUB PRNT_BUY_SUBTOTAL:
 else
	GOSUB PRNT_BUY_SUBTOTAL:      
 endif
endif
Gosub L_4000
! - If J8 !!-!! Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
If Not(J8) Print #0;"\14\";
Goto OUTEND 
!
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 2%,Q0[1]
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
!!-!! Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 !  " <>-1 GOTO L_20510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 !  " ITS Catch Weight!
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 

calc_dates: rem figure weekly, monthly, yearly based on user entry
! determine last working day
x2=daydate    
gosub l_7820:               
x=x  !! just a line holder  
LET JDAY=x2
! MAT  READ #1,179,0;HOLIDAY;
! MAT  READ #1,175,0;VDAY;
! MAT  READ #1,175,28;CLOZ1;
! MAT  READ #1,175,36;CLOZ2;
! MAT  READ #1,175,84;CLOZCODE$;
! GETLASTDAY: REM get last working day
! ! LET JDAY=JDAY-1
! LET DOW=JDAY%7
! IF NOT(VDAY[DOW]) GOTO GETLASTDAY:
! FOR CTR=0 TO 19
! 	IF HOLIDAY[CTR]=JDAY GOTO GETLASTDAY:
! NEXT CTR
! determine close day
! IF CLOZCODE$[1,1]="C" ! company wide close
! 	IF CLOZ1[0]<>0 AND CLOZ1[1]<>0
! 		IF JDAY>=CLOZ1[0] AND JDAY<=CLOZ1[1] GOTO GETLASTDAY:
! 	ENDIF 
! ENDIF 
! IF CLOZCODE$[2,2]="C" ! company wide close
! 	IF CLOZ2[0]<>0 AND CLOZ2[1]<>0
! 		IF JDAY>=CLOZ2[0] AND JDAY<=CLOZ2[1] GOTO GETLASTDAY:
! 	ENDIF 
! ENDIF 
LET X2=JDAY \ GOSUB L_7840:
LET DAYDATE=X$
!! get week
X$ = JDAY Using "&&&&&&"
Call JulianToDate(1,X$,X$,E)
MM = X$[1,2];DD = X$[4,5];YY = X$[7,8]
Call "weeknum",MM,DD,YY,WN[]
LET JEDATE=WN[4]+(7-WN[3])
LET X2=(WN[4]-(WN[3]-1)) \ GOSUB L_7840:
LET SWKDATE=X$
LET X2=JEDATE \ GOSUB L_7840:
LET EWKDATE=X$
sidate=swkdate
eidate=ewkdate

LET X$=sidate USING "&&&&&&"
LET EOYPER=X$[1,4]
LET ARPER=X$[1,4]
LET X2=ARPER \ GOSUB L_7860: \ LET CURPER=X2
LET X$=daydate USING "&&&&&&"
LET ARMO=X$[3,4]
LET ARYEAR=X$[1,2]
x$[1,2]=aryear using "&&"
x$[3,4]=armo using "&&"
x2=x$[1,4]
gosub l_7860: \ bper=x2 \ eper=x2
MAT  READ #1,51,74;BOYMO;
LET year_=ARYEAR
IF BOYMO>ARMO
	LET year_=year_-1 \ IF year_<0 LET year_=100-year_
ENDIF 
LET X$[1,2]=year_ USING "&&"
LET X$[3,4]=BOYMO USING "&&"
LET SOYPER=X$[1,4]
LET X2=SOYPER \ GOSUB L_7860: \ LET PER[0]=int(X2/100)
LET X2=EOYPER \ GOSUB L_7860: \ LET PER[1]=int(X2/100)
return
!
Rem {begin rtn.input.s}
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end rtn.input.s}
Rem {begin rtn.error.s}
OUTEND: Rem EXIT ROUTINE
! dx close
If J8 ! dx xml
  if MySQLQueueID
	 if not(reportAborted) call FinishMySQLReport(e$,MySQL_ch,MySQLQueueID)
  else
	Call addtostr(e$,rstr$,esdel$) !end section
	Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
  end if
End If 
!
try call dxclose() else rem
End 
!
ERR_TRAP: 
include "src/callmainerrnet.inc"
End 
