! >>> Program mxspace.dl4
!
! description converted call from unibasic MXSPACE
!
! loadsave -w -n 10,10 -o prog/dxport/mxspace.dl4 src/mxspace.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 30, 2004  14:12:50
Rem /w/papermaster/r2002/
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem *- MXSPACE - calculate space for a product / bin
Rem *- RGP - 11/07/00 - create program  CCT 137969
Rem *- MODIFICATION LOG
!
Declare Intrinsic Sub InpBuf,String
!
Enter PCODE$,WH,LOC$,FCHAN[],CAP[],e$,rstr$
!
if err 0 gosub ERR_TRAP
!
dim buttonlist$[5,50],nextlist$[5,100] ! dxport
!
Dim FILENAME$[40],WHLOC_KEY$[8],PRODWH_KEY$[14],PROD_KEY$[12]
Dim SPRODLOT_KEY$[42],SAVE_KEY$[42],PRODLOC_KEY$[20]
Dim P9$[50],P60$[50],P61$[256],custom_customer$[30]
Dim 1%,E,WLA[7]
Dim 2%,PROG_CH[4],TMP_CH,I,MHBIN[3],WHLOC_REC,PRODWH_REC,PROD_REC
Dim 2%,SPRODLOT_REC,PRODLOC_REC
Dim 2%,STK[2],PALLET[2],H,W,D
Dim 3%,WHMISC[6],SPROD_TOTAL,SPROD_TOTAL_AVAIL,P3[4],PL2[2]
Dim 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],AMOUNT
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
!
Rem {end dim.getchan.i}
! - Window On 
!
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
mat read #1,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
!	custom_customer$="ADMIRAL" ! test
MHFLAG = 1
If P61$[32,32] = "N" Or FCHAN[5] = -1 Let MHFLAG = 0
Gosub OPEN_FILES
For I = 0 To 11
  CAP[I] = 0
Next I
Gosub READ_PROD
If PROD_REC = -1 Goto OUTEND
Gosub READ_PRODWH
If PRODWH_REC = -1 Goto OUTEND
Gosub READ_WHLOC
If MHFLAG
  If WHLOC_REC = -1 Goto OUTEND
Else 
  If WHLOC_REC = -1 Let WLA[6] = 0
End If 
CAP[11] = WLA[6]
Gosub TOTAL_SPRODLOT
Gosub CALC_USED
Gosub READ_PRODLOC
If PRODLOC_REC = -1 Goto OUTEND
If MHFLAG ! "only set up for Matl handling?
  Mat Read #1,7,0;PALLET;
End If 
Gosub VERIFY_DATA \ If E Goto OUTEND
Gosub CALC_CAPACITY
If CAP[11]
  Gosub OTHER_PRODUCTS
  If E Goto OUTEND
End If 
Gosub CALC_AVAIL
!
OUTEND: Rem
Gosub CLOSE_FILES
End 
!
OPEN_FILES: Rem
For I = 0 To 4
  Read TMP_CH
  If FCHAN[I] = 99
    CHNL = 99
    Gosub GETCHAN
    PROG_CH[I] = CHNL
    Read #1,88,Abs(TMP_CH);FILENAME$;
    If TMP_CH > 0 Open #PROG_CH[I],FILENAME$
    If TMP_CH < 0 Ropen #PROG_CH[I],FILENAME$
  Else 
    PROG_CH[I] = FCHAN[I]
  End If 
Next I
Data "-1744","-2736","-2528","-1792","-208"
Return 
!
READ_WHLOC: Rem
WHLOC_REC = -1
WHLOC_KEY$ = WH Using "##",LOC$
Search #PROG_CH[1],2,1;WHLOC_KEY$,WHLOC_REC,E 
If E Return 
Mat Read #PROG_CH[1],WHLOC_REC,76;WLA;
Mat Read #PROG_CH[1],WHLOC_REC,92;MHBIN;
Return 
!
READ_PRODLOC: Rem
PRODLOC_REC = -1
PRODLOC_KEY$ = PCODE$,WH Using "##",LOC$
Search #PROG_CH[4],2,1;PRODLOC_KEY$,PRODLOC_REC,E
If E Return 
Mat Read #PROG_CH[4],PRODLOC_REC,22;PL2;
If Not(CAP[11]) And Not(PL2[2]) Let PRODLOC_REC = -1
If CAP[11] And Not(PL2[0]) ! " 0=no limit?
  If PL2[2] Let CAP[11] = 0
End If 
Return 
!
READ_PRODWH: Rem
PRODWH_REC = -1
PRODWH_KEY$ = PCODE$,WH Using "##"
Search #PROG_CH[0],2,1;PRODWH_KEY$,PRODWH_REC,E
If E Return 
Mat Read #PROG_CH[0],PRODWH_REC,800;WHMISC;
Return 
!
READ_PROD: Rem
PROD_REC = -1
PROD_KEY$ = PCODE$
Search #PROG_CH[3],2,1;PROD_KEY$,PROD_REC,E
If E Return 
Mat Read #PROG_CH[3],PROD_REC,256;A;
Mat Read #PROG_CH[3],PROD_REC,512;PFU1;
Mat Read #PROG_CH[3],PROD_REC,554;PFU2;
Mat Read #PROG_CH[3],PROD_REC,1030;STK;
Return 
!
VERIFY_DATA: Rem
E = 1
If Not(CAP[11])
  If PL2[2] Let E = 0
  Return 
End If 
If WHMISC[4] = 0 Or WHMISC[5] = 0 Return 
If CAP[11] And Not(MHFLAG) ! "not using MH Fields!!
  If Not(PL2[0]) Let PL2[0] = 999
  If PL2[0] Let E = 0
  Return 
End If 
For I = 0 To 2
  If PALLET[I] = 0 Return 
  If I = 0 And STK[I] = 0 Return 
  If MHBIN[I + 1] = 0 Return 
Next I
E = 0
Return 
!
TOTAL_SPRODLOT: Rem
SPROD_TOTAL = 0
SPROD_TOTAL_AVAIL = 0
SPRODLOT_KEY$ = WH Using "##",LOC$,PCODE$
SAVE_KEY$ = SPRODLOT_KEY$
SPROD_TOTAL_LOOP: Rem
Search #PROG_CH[2],3,3;SPRODLOT_KEY$,SPRODLOT_REC,E
If E Goto END_SPROD_TOTAL_LOOP
If SPRODLOT_KEY$[1,20] <> SAVE_KEY$[1,20] Goto END_SPROD_TOTAL_LOOP
Mat Read #PROG_CH[2],SPRODLOT_REC,82;P3;
SPROD_TOTAL = SPROD_TOTAL + (P3[0] - P3[1])
SPROD_TOTAL_AVAIL = SPROD_TOTAL_AVAIL + (P3[0] - P3[1] - P3[3])
Goto SPROD_TOTAL_LOOP
END_SPROD_TOTAL_LOOP: Rem
AMOUNT = SPROD_TOTAL
Gosub CNVT_TO_STOCKING ! as it says! (also full units only)
SPROD_TOTAL = AMOUNT
AMOUNT = SPROD_TOTAL_AVAIL
Gosub CNVT_TO_STOCKING ! as it says! (also full units only)
SPROD_TOTAL_AVAIL = AMOUNT
Return 
!
CALC_USED: Rem
CAP[1] = WHMISC[4] * WHMISC[5]
If CAP[1] <> 0
  If CAP[11] !* location palletized
    CAP[2] = Int(SPROD_TOTAL / CAP[1])
    CAP[3] = SPROD_TOTAL Mod CAP[1]
    CAP[7] = Int(SPROD_TOTAL_AVAIL / CAP[1])
    CAP[8] = SPROD_TOTAL_AVAIL Mod CAP[1]
  Else !* non-palletized location
    CAP[3] = SPROD_TOTAL
    CAP[8] = SPROD_TOTAL_AVAIL
  End If 
  else ! item has no pallet def 
  CAP[3] = SPROD_TOTAL
  CAP[8] = SPROD_TOTAL_AVAIL
End If 
Return 
!
OTHER_PRODUCTS: Rem
E = 0
SPRODLOT_KEY$ = WH Using "##",LOC$
SAVE_KEY$ = SPRODLOT_KEY$
SPROD_CHECK_LOOP: Rem
Search #PROG_CH[2],3,3;SPRODLOT_KEY$,SPRODLOT_REC,E
If E Let E = 0 \ Return 
If SPRODLOT_KEY$[1,8] <> SAVE_KEY$[1,8] Return 
If SPRODLOT_KEY$[9,20] <> PCODE$
  Mat Read #PROG_CH[2],SPRODLOT_REC,82;P3;
  If P3[0] - P3[1] > 0 Let E = 1 \ CAP[6] = 1 \ Return 
End If 
Goto SPROD_CHECK_LOOP
Return 
!
CNVT_TO_STOCKING: Rem
CNVTU[0] = 0
CNVTU[1] = PFU1[8]
CNVTU[2] = 1
CNVTA = AMOUNT
Gosub CONVERT
if custom_customer$<>"ADMIRAL" ! This is STANDARD for everyone but Admiral
	If Fra(AMOUNT) Let AMOUNT = Int(AMOUNT) + 1
endif
if custom_customer$="ADMIRAL" if LOC$[1,6]<>"STORE " ! ADMIRAL - No Full Stk UM on STORE LOC
	If Fra(AMOUNT) Let AMOUNT = Int(AMOUNT) + 1
endif
Return 
!
CALC_CAPACITY: Rem
If Not(CAP[11]) Let CAP[0] = PL2[2] \ Return 
If Not(MHFLAG) Let CAP[0] = PL2[0] \ Return 
W = Int(MHBIN[2] / PALLET[1])
D = Int(MHBIN[3] / PALLET[2])
H = Int(MHBIN[1] / (PALLET[0] + (STK[0] * WHMISC[5])))
CAP[0] = H * W * D
Return 
!
CALC_AVAIL: Rem
If CAP[11] !* if bin is palletized
  CAP[4] = CAP[0] - CAP[2]
  If CAP[3] <> 0 Let CAP[4] = CAP[4] - 1
  If CAP[4] < 0 Let CAP[4] = 0
  If ((CAP[0] * CAP[1]) - SPROD_TOTAL) > 0 Let CAP[5] = ((CAP[0] * CAP[1]) - SPROD_TOTAL) Mod CAP[1]
AVAIL_CALC: Rem* AVAILABLE for sale based calculations
  CAP[9] = CAP[0] - CAP[7]
  If CAP[8] <> 0 Let CAP[9] = CAP[9] - 1
  If CAP[9] < 0 Let CAP[9] = 0
  If ((CAP[0] * CAP[1]) - SPROD_TOTAL_AVAIL) > 0 Let CAP[10] = ((CAP[0] * CAP[1]) - SPROD_TOTAL_AVAIL) Mod CAP[1]
Else !* non-palletized bin location
  CAP[5] = CAP[0] - SPROD_TOTAL \ If CAP[5] < 0 Let CAP[5] = 0
  CAP[10] = CAP[0] - SPROD_TOTAL_AVAIL \ If CAP[10] < 0 Let CAP[10] = 0
End If 
Return 
!
CLOSE_FILES: Rem
For I = 0 To 4
  If FCHAN[I] = 99
    Close #PROG_CH[I]
  End If 
Next I
Return 
!
Rem {begin src/inc/rtn.getchan.s}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
For SCR = CHNL To 1 Step -1
  CHNL = SCR
  Gosub CHNLFREE
  If CHNLFREE
    SCR = 1
  Else 
    CHNL = 0
  End If 
Next SCR
Return 
!
CHNLFREE: Rem check to see if a channel is being used
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
CHNLSCR = Chf(CHNL)
If Err 0 Gosub ERR_TRAP
If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
END_CHNLFREE: Rem
Return 
!
Rem {end rtn.getchan.s}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: 
! - If Spc(4) > 1280 Goto CVTSTARTB
! - Swap 1,"MXPRCONV"
! - If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
! - CVTTRY: Rem "this is a remark
! - Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
! - If X1 <> Spc(6) Goto CVTTRY
! - If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
! - Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: 
Return 
!
Rem {end rtn.convert.s}
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callsuberr.inc"
End 
