Rem flagreset - callable program to decide if "in process" flags can be reset

!
! loadsave -w -n 100,10 -o prog/dxport/flagreset src/flagreset.src
!

! ERPScheduler Enabled

include "src/copyright.inc" ! dx

External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,CreateNetStatus

External Lib "ubsfunc.dl4"
Declare Intrinsic Sub DateToJulian,InpBuf,JulianToDate,String
Declare Intrinsic Sub dxget,programdump,Time
Declare Intrinsic Sub FindF
Declare Intrinsic Function findchannel
Declare External Function openfile

enter process$,result
! process to check and result of reset

TRY 

dim msg$[80],e$[80],buttonlist$[5,50],nextlist$[5,100],flagfile$[20]
dim Message$[600],WebStr$[600],rstr$[2000]
dim x$[10],today$[10],jefdate$[10],dump$[5,50],linein$[1000],k$[50],fle$[16]
dim efile$[10],n$[50],prog$[5,20],u5$[10],mth$[11,5],TMP$[50],moddate$[50]
dim now$[1,24],ck_stat$[2],dow$[6,4],tmp1$[1000],space$[100],ck_stat_error$[2]
dim 1%,TMP1,ch_errlog,ch_dump,ck[5],S0,whse,WPF[1024]
DIM 2%,TMP2,S1,S2[4],CTERR,h0[12],H6[8],PO_h0[5]
dim 3%,TMP3,now[1]

space$=" ",space$
jtoday=tim(6)
x$=jtoday using "######"
call juliantodate(1,x$,today$,e)
for i=0 to 11 \	read mth$[i]  \ next i
data " JAN "," FEB "," MAR "," APR "," MAY "," JUN "," JUL "," AUG "," SEP "," OCT "," NOV "," DEC "
for i=0 to 6 \ read dow$[i] \ next i
data "SUN ","MON ","TUE ","WED ","THU ","FRI ","SAT "
call time(now$[0])
now$[0]=now$[0,15,22]

tmp$ = GetParameter$("S_USER.AppID") !company #             
Try Let Intco = Val(tmp$) Else Let Intco = 1 !company #

process$=ucase$(rtrim$(process$))
SELECT CASE PROCESS$
CASE "SERP204.DL4"
	PROG$[0]="SERP204.DL4"
	dump$[0]="tmp/or204ase"
	p0_offset=204
	flagfile$="cntrl/orip"+str$(Intco)
	ck_stat$=""
	ck_stat_error$="SO"
case "205.DL4"
	PROG$[0]="205.DL4"
	dump$[0]="tmp/oa205se"
	p0_offset=205
	flagfile$="cntrl/oaip"+str$(intco)
	ck_stat$=""
	ck_stat_error$="SO"
case "226.DL4"
	PROG$[0]="226A.DL4"
	prog$[1]="226AGL.DL4"
	dump$[0]="tmp/ij226ase"
	p0_offset=226
	flagfile$="cntrl/irip"+Str$(intco)
	ck_stat$="92"
	ck_stat_error$="SO"
case "227.DL4"
	PROG$[0]="227.DL4"
	prog$[1]="227A.DL4"
	prog$[2]="227B.DL4"
	prog$[3]="227C.DL4"
	prog$[4]="227LP.DL4"
	dump$[0]="tmp/ia227se"
	dump$[1]="tmp/ia227ase"
	dump$[2]="tmp/ia227bse"
	dump$[3]="tmp/ia227cse"
	dump$[4]="tmp/ia227lpse"
	p0_offset=247
	flagfile$="cntrl/iaip"+Str$(intco)
	ck_stat$=""
	ck_stat_error$="SO"
case "246.DL4"
	PROG$[0]="246A.DL4"
	prog$[1]="246AGL.DL4"
	dump$[0]="tmp/cj246ase"
	p0_offset=246
	flagfile$=""
	ck_stat$="93"
	ck_stat_error$="SO"
case "247.DL4"
	PROG$[0]="247.DL4"
	prog$[1]="247A.DL4"
	prog$[2]="247B.DL4"
	prog$[3]="247C.DL4"
	prog$[4]=""
	dump$[0]="tmp/ca247se"
	dump$[1]="tmp/ca247ase"
	dump$[2]="tmp/ca247bse"
	dump$[3]="tmp/ca247cse"
	dump$[4]=""
	p0_offset=247
	flagfile$="cntrl/caip"+Str$(intco)
	ck_stat$=""
	ck_stat_error$="SO"
case "264.DL4"
	PROG$[0]="264.DL4"
	dump$[0]="tmp/264se"
	p0_offset=0
	flagfile$="cntrl/crip"+Str$(intco)
	ck_stat$=""
	ck_stat_error$="SO"
case "373.DL4"
	PROG$[0]="373.DL4"
	prog$[1]="PO373WS.DL4"
	dump$[0]=""
	p0_offset=373
	flagfile$=""
	ck_stat$=""
	ck_stat_error$="PO"
	whse=result  ! passed in
case "374.DL4"
	PROG$[0]="374.DL4"
	prog$[1]="PO374A.DL4"
	prog$[2]="PO374C.DL4"
	dump$[0]="tmp/374se"
	p0_offset=374
	flagfile$=""
	ck_stat$=""
	ck_stat_error$="PO"
	whse=result  ! passed in
case "384.DL4"
	PROG$[0]="384.DL4"
	dump$[0]=""
	p0_offset=384
	flagfile$=""
	ck_stat$=""
	ck_stat_error$="PO"
	whse=result  ! passed in
case "385.DL4"
	PROG$[0]="385.DL4"
	dump$[0]=""
	p0_offset=385
	flagfile$=""
	ck_stat$=""
	ck_stat_error$="PO"
	whse=result  ! passed in
CASE ELSE
	GOTO OUTEND:
END SELECT

result=0

EFile$ ="1/errorlog"
Call FindF(eFile$,tmp)
if not(tmp) goto outend
CH_errlog = findchannel() ! get free channel
open #ch_errlog,efile$
LET REC_COUNT=CHF(ch_errlog)-1         
if not(rec_count) goto out_loop
errlog_flag=0
for i=rec_count to 1 step -1
	READ #ch_errlog,i;N$,S1,S2,S2[1],S2[2],S2[3],S2[4],CTERR; 
	n$=ucase$(rtrim$(n$))
	SEARCH N$,".DL4",ck[0] ! see if dl4 error so can adj date if needed
	SEARCH N$,".LIB",ck[1] ! see if dl4 error so can adj date if needed
	GOSUB L_7800  !! convert date and time
	IF s1>2000 or ck[0] or ck[1]  ! port check
		! serp
		tmp1=today$[7,8]
		if int(x2/10000)=tmp1-8
			x2=x2+8*10000
		endif
	else
		! papermaster
	endif
	x$=x2 using "######"
	call datetojulian(1,x$,jefdate$,e)
	jefdate=jefdate$
	if (jtoday-jefdate)<=5
		for J=0 to 5
		if len(prog$[J])<>0 and n$=prog$[J]  !! program in errorfile
			!! error too current error to trust to program to reset
			goto outend:
		endif
		next J
	else
		I=0  !! get out of look
	endif
next i
out_loop: ! done with errorlog

!! overkill maybe, but check for dl4 dump file
for di=0 to 5
 if len(dump$[di])<>0
	e=0 \ call findf(dump$[di],e)
	if e  !! file found, check date
		CH_dump = findchannel() ! get free channel
		OPEN #ch_dump,"$$/bin/ls "+dump$[di]+"  2>/dev/null" 
		READ #ch_dump;LINEIN$                                         
		CLOSE #ch_dump      
		count=0
		if len(linein$)>=len(dump$[di])
			if linein$[1,len(linein$)-1]=dump$[di]  !! for dump file
				ropen #ch_dump,dump$[di]
dump_loop:		READ #ch_dump;LINEIN$
				count=count+1
				linein$=ucase$(linein$)
				search linein$,PROG$[di],e
				if e=0
					if count<3	goto dump_loop
				else
					tmp1$=" ",tmp1$
					for i=0 to 6
						if linein$[1,4]=dow$[i] then tmp1$=" "+linein$[5] !! strip of day of week string
					next i
					e=0
					i=0
mth_chk:			search tmp1$,mth$[i],mth 
					if mth=0 
						i=i+1
						if i<=11 goto mth_chk
						goto outend:  !! no month match
					endif
					x$=" ",x$
					x$[3,4]=i+1 using "&&"   ! month
					if mth=1
						tmp1=tmp1$[6,7] \ x$[5]=tmp1 using "&&"	!day
						tmp1=tmp1$[20,21] \ x$[1,2]=tmp1 using "&&"	!year
					else
						tmp1=tmp1$[2,3] \ x$[5]=tmp1 using "&&"	!day
						tmp1=tmp1$[11,12] \ x$[1,2]=tmp1 using "&&"	!year
					endif
					call datetojulian(1,x$,jefdate$,e)
					tmp3=jefdate$
					if jtoday-tmp3<=5 goto outend  !! error too current
				endif
				close #ch_dump
				ch_dump = 0
			endif
		endif
	endif
 endif
next di

!! check date/time of flagfile
if flagfile$
	e=0 \ call findf(flagfile$,e)
	if e
		CH_dump = findchannel() ! get free channel
		ropen #ch_dump,flagfile$
		moddate$=chf#(300+ch_dump)
		e=0
		for i=0 to 11
			if mth$[i][2,4]=moddate$[1,3] then e=i+1
		next i
		close #ch_dump
		ch_dump=0
		if e
			x2=e*100
			tmp1=moddate$[5,6]  !!  day of month
			x2=x2+tmp1
			tmp1=moddate$[11,12]  !! year
			x2=x2+(tmp1*10000)
			x$=x2 using "######"
			call datetojulian(1,x$,jefdate$,e)
			tmp3=jefdate$
			if jtoday=tmp3  !! file from today
				now$[1]=moddate$[15,22]
				for i=0 to 1
					tmp1=now$[i,1,2] \ tmp2=now$[i,4,5] 
					now[i]=(tmp1*60)+tmp2
				next i
				if now[0]-now[1]<5 goto outend  !! may still be running
			endif
		endif
	endif
endif

tmp$ = IntCo Using "files/cntrl/cntrl#" 
ctlc=findchannel() ! get free channel
open #ctlc,tmp$
!mat read #ctlc,88,1840;fle$;
!ch_roh=findchannel() ! get free channel
!ropen #ch_roh,fle$
!ctlc = openfile(9999,Intco) \ If ctlc = -1 Gosub ERR_TRAP !control
!ch_roh = openfile(-1840,Intco) \ If ch_roh = -1 gosub Err_trap !"order header
ck[4]=0 \ ck[5]=0
select case ck_stat_error$
	case "SO"
		gosub check_SO_status_errors:
	case "PO"
		gosub check_PO_status_errors:
	case else
end select
if not(ck[4])  !! no status errors
	SELECT CASE PROCESS$
	case "226.DL4"
		! need to check glartemp to make very sure process was not running
		!if not(ck[5])  ! no orders at status 92 in invoice journal
		ck[3]=0
		offset=64
		gosub check_gltemp
		if not(ck[3])   !! no non-blank keys in gltmp file
			!! orders and gltmp ok to do simple reset
			gosub order_status_reset
			if not(e) or e=2 !! order reset was ok
				gosub reset_gltemp
				gosub reset
			endif
		endif
		!endif
	CASE "227.DL4"
		offset=64
		GOSUB RESET_GLTEMP:
		gosub reset
		S0=0 \ Write #ctlc,20,8;S0;
	case "246.DL4"
		! need to check glCMtemp
		!if not(ck[5])  ! no orders at status 93 in invoice journal
		ck[3]=0
		offset=80
		gosub check_gltemp
		if not(ck[3])   !! no non-blank keys in gltmp file
			!! orders and gltmp ok to do simple reset
			gosub order_status_reset
			if not(e) or e=2 !! order reset was ok
				gosub reset_gltemp
				gosub reset
			endif
		endif
		!endif
	CASE "247.DL4"
		offset=80
		GOSUB RESET_GLTEMP:
		gosub reset
		S0=0 \ Write #ctlc,20,8;S0;
	CASE "264.DL4"
		result=1
	case "373.DL4","374.DL4","384.DL4","385.DL4"
		gosub try_reset_whinfo:
	case else
	end select
endif

OUTEND: Rem
IF CH_ERRLOG THEN CLOSE #CH_errlog
if ctlc then close #ctlc
!if ch_roh then close #ch_roh
if ch_dump then close #ch_dump
End 

check_SO_status_errors:  !! will just look for errors, won't try to fix here
mat read #ctlc,88,1840;fle$;
ch_roh=findchannel() ! get free channel
ropen #ch_roh,fle$
k$=" ",k$
roh_loop: search #ch_roh,3,1;k$,rec_roh,e \ if e>2 gosub err_search:
if not(e) 
	if K$[1,2]<"90" or k$[1,2]=ck_stat$[1,2]
		if k$[1,2]=ck_stat$[1,2] ck[5]=1
		mat read #ch_roh,rec_roh,0;h0;
		tmp$=" ",tmp$
		tmp$[1,2]=h0[0] using "##"
		tmp$[3,8]=h0[7] using "######"
		if tmp$[1,8]<>k$[1,8]
			ck[4]=1
			return
		endif
	endif
	goto roh_loop:
endif
close #ch_roh
return

check_po_status_errors:  !! will just look for errors, won't try to fix here
mat read #ctlc,88,2416;fle$;
ch_poh=findchannel() ! get free channel
ropen #ch_POH,fle$
k$=" ",k$
POH_loop: search #ch_POH,3,1;k$,rec_POH,e \ if e>2 gosub err_search:
if not(e) 
	if K$[1,2]<"90" or k$[1,2]=ck_stat$[1,2]
		if k$[1,2]=ck_stat$[1,2] ck[5]=1
		mat read #ch_POH,rec_POH,0;PO_h0;
		tmp$=" ",tmp$
		tmp$[1,2]=PO_h0[0] using "##"
		tmp$[3,8]=PO_h0[2] using "######"
		if tmp$[1,8]<>k$[1,8]
			ck[4]=1
			return
		endif
	endif
	goto POH_loop:
endif
close #ch_POH
return

order_status_reset:  !! reset journal order to previous status
mat read #ctlc,88,1840;fle$;
ch_roh=findchannel() ! get free channel
open #ch_roh,fle$
k$=" ",k$
k$=ck_stat$[1,2]
roh_loop2: search #ch_roh,3,1;k$,rec_roh,e \ if e>2 gosub err_search:
if not(e) 
	if k$[1,2]=ck_stat$[1,2]
		mat read #ch_roh,rec_roh,0;h0
		MAT read #ch_roh,rec_roh,408;h6
		tmp$=" ",tmp$
		tmp$[1,2]=h6[2] using "##"
		tmp$[3,8]=h0[7] using "######"
		search #ch_roh,4,1;tmp$,rec_roh,e
		if not(e)
			h0[0]=h6[2] \ h6[2]=0
			mat write #ch_roh,rec_roh,0;h0
			mat write #ch_roh,rec_roh,408;h6;
			search #ch_roh,5,1;k$,rec_roh,e
			if not(e) goto roh_loop2:
		endif
	endif
endif
close #ch_roh
return


check_gltemp: !! see if any entried other than space key exist in gl temp file
mat read #ctlc,88,offset;fle$;
ch_glt=findchannel() ! get free channel
ropen #ch_GLT,fle$
k$=""
glt_loop: search #ch_glt,3,1;k$,rec_glt,e
if not(e) and not(ck[3])
	if K$[1,16]<>space$[1,16] then ck[3]=1
    goto glt_loop:
endif
close #ch_glt
return

reset_gltemp: !! remove records from gl temp file
mat read #ctlc,88,offset;fle$;
ch_glt=findchannel() ! get free channel
open #ch_GLT,fle$
k$=""
gltr_loop: search #ch_glt,3,1;k$,rec_glt,e
if not(e) 
	e=3
	search #ch_glt,1,0;k$,rec_glt,e
	search #ch_glt,5,1;k$,rec_glt,e
    goto gltr_loop:
endif
close #ch_glt
return


reset: !! reset the flag, no current errors
dim 1%,P0[1023]
dim 3%

try 
	dump$=chf(801)
else 
	tmp$=""
end try
if tmp$ then ch_cntrl=1

tmp$ = flagfile$
e=0 \ call findf(tmp$,e)
if e !! found file
	kill tmp$
endif
Mat Read #ctlc,120,0;P0
if P0[p0_offset]<>0
	P0[p0_offset] = 0   
	Mat Write #ctlc,120,0;P0;
endif
result=1
return

try_reset_whinfo: !! reset whse in whinfo, check of can reset rec 99
mat read #ctlc,88,2768;fle$;
ch_whse=findchannel() ! get free channel
open #ch_WHSE,fle$
MAT READ #CH_WHSE,whse-1,900;wpf
wpf[p0_offset]=0
mat write #CH_WHSE,whse-1,900;wpf;
wh99_ok=1
for i=0 to 98
	MAT READ #CH_WHSE,i,900;wpf;
	if wpf[p0_offset]<>0 then wh99_ok=0  !! someone may be processing other whse
next i
if wh99_ok 
	mat read #ch_whse,99,900;wpf
	wpf[p0_offset]=0
	MAT write #CH_WHSE,99,900;wpf;
endif
close #ch_whse
result=1
return

L_7800: REM RTN.TIMEST   TIME STAMP ROUTINE       
LET X3=(S2[3]*36000+S2[4])/600  
LET X2[1]=INT(X3/60) \ LET X2[2]=(X3-X2[1]*60)*600                  
LET X2[3]=INT(X2[1]/8928) \ LET X2[1]=X2[1]-X2[3]*8928              
LET X2[4]=INT(X2[1]/744) \ LET X2[1]=X2[1]-X2[4]*744                
LET X2[5]=INT(X2[1]/24) \ LET X2[1]=X2[1]-X2[5]*24                  
LET X2[5]=X2[5]+1 \ LET X2[4]=X2[4]+1 \ LET X2[3]=X2[3]+SPC(18)-1900 
IF X2[3]>=100 LET X2[3]=X2[3]-100                                   
LET X2[6]=INT(X2[2]/600) \ LET X2=X2[3]*10^4+X2[4]*10^2+X2[5]       
LET U5$=X2[6]+100 USING "  ### AM" \ IF X2[1]>11 LET U5$[7,7]="P"   
LET U5$[3,3]=":" \ IF X2[1]>12 LET X2[1]=X2[1]-12                   
LET U5$[1,2]=X2[1] USING "##"                                       
return

ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/ia227bse!","")
Call programdump() 
IF STATCHAN
	PRINT #STATCHAN;E$
	PRINT #STATCHAN;"Invoice accept has ended in an error"
Endif
Error 11000 ! goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
IF STATCHAN
	PRINT #STATCHAN;MESSAGE$
	PRINT #STATCHAN;"Invoice accept has ended in an error"
Else
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
Endif


ELSE    !! OVERALL TRY ELSE END TRY EROR TRAPPING

!! default dump file from with this call is not a unique name. want to force it to be

If Spc(8) <> 10000
	dim efn$[1000]
	efn$="dump/"+(tim(8) using "&&")+(tim(9) using "&&")+(tim(10) using "&&")	!! date
	efn$=efn$+(tim(11) using "&&")+(tim(12) using "&&")+(tim(13) using "&&")	!! time
	efn$=efn$+(spc(6) using "&&&&&&")											!! port
	efn$=efn$+"flagreset.txt"
	dim msc4$[100] \ msc4$=msc$(4) 
	if Pos(msc4$, = "/",-1) let msc4$=msc4$[pos(msc4$,="/",-1)+1]
	call env(2,"PROGNAME",msc4$)
	call programdump(EFN$)
endif

ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"

END TRY

END