! >>> Program 114fiber
!
! description 114fiber - Customer Price Sheet
!
! loadsave -w -n 100,10 -o prog/dxport/114fiber.dl4 src/114fiber.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx

Rem BEDIT Version: 2.5 OBJECT CODE     Created: DEC 12, 2013  16:37:50
Rem /x/w2/pm/r2005//x/usracct/mary/work/custom/xrev9/mx114fiber.src (synergyux.synergy.n) [mgd] {64949}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!
! 12/07/15 vst task51710 - Change to print as text file
! 01/12/16 vst task51710 - wasn't pulling in correct information based on the
!					last ordered date entered.  
!		 - the code had the wrong variable name in the following stmt:
!           Call dxget("OLDACTDATE",tmp$) ! date format MMDDYY 
!				*** the variable should be "ODATE" -- fixed.
!

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libprice.lib"
Declare External Sub SysPriceCalc
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
!
!!Option Default Dialect IRIS1
Try 
Rem BEDIT Version: 1.9 OBJECT CODE     Created: AUG  5, 1998  10:10:19
Rem /usr/acct/xindist/src/mx114fiber.s (univ2) [nate] {01277}
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 2%,C4[8]
Com 1%,3%,PFU2[6],CNVTA,A[33],UWORK[10],FIELD,BASE
! If Err 0 Gosub ERR_TRAP
Dim PCODE$[12],QTY,UM$[4],CUSTNUM$[6],CUSTNAME$[30]
Dim SPACES$[120],VER$[6],WORK$[100],DEPT$[24]
Dim UNIT$[4],PUNIT$[4],CUNIT$[4],SUNIT$[4],WHPROD$[12],W1$[32]
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim K3$[20],P1$[156]
DIM drawline1$[55],drawline2$[57],drawline3$[57]
dim 1%,prcsrc
Dim 1%,WHPARC[5],2%,J9[9],X2,W7[14],WHBLD[2],3%,WHLV[2],WHMISC[6],4%,J1
Dim 2%,B[24],3%,W3[24],PREC[1]
DIM 2%,ARDATE
VER$ = "V1.0"
Dim LP$[12],LP2$[84],LPMT$[2]
Dim 1%,LPC3[4],AI,LPEUN[2],LPWH,PD1[9],3%,X3
Dim 2%,LPDF,LPC1[2],LPR1[3],LPC5[3],LPPCDATE
Dim 3%,LPC2[2],LPC4[3],LPR[4],LPUNF[6],PERM[1],LPLPERM
Dim 3%,FLEPTR[15,1],SPECS[30],2%,DT,JODATE,JWDATE
Dim MSGDESC$[150],J8$[8],CNAME$[30],P9$[50],P60$[50],PMASK$[12]
Dim 2%,D9[20],Q0[1],DFWH,WHSE,LPDEPT
Dim KEY1_LASTPR$[45]
Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142],PHONE$[13]
Dim 2%,A0[3],CFC1[12],REC,C3[1]
Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8
Dim 3%,CUSTC4[6],C1[5],CFIN[8],U1,C9,C5[5],C6[9]
Dim KEY1_CUST$[10]
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1],WHLM[1]
Dim 2%,A2,A3[2],B[24],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 1%,P4[100],P0[100],2%,P2[100]
Def FNS(X) = Sgn(X) * (Int(Abs(X) * 1000 + .5) * .0001)
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
Dim KEY1_PROD$[20]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[2500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
!!! check this
Dim b$[200]!
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!
j8 = 0
If Err 0 Let j8 = Spc(8)
try
	J9 = Chf(0) 
else
	let j8=99
end try
If Err 0 Gosub ERR_TRAP
J9 = 55 \ If j8 Let J9 = 18

COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1
CH_CNTRL = 1
CH_CUST = 2
CH_LASTPR = 3
CH_DEPT = 4
CH_PROD = 5
CH_CCODES = 6
CH_PRWH = 7
CH_COMMD = 8
CH_SPCPRC = 10
CH_CNTRTH = 11
CH_BRKTBL = 12
SPACES$ = " ",SPACES$
ODATE = 700101;SCUST = 1;ECUST = 999999;SLSM = 0;SDEPT = 0;EDEPT = 999
Read #CH_CNTRL,88,1808;WORK$; \ Ropen #CH_CUST,WORK$
Read #CH_CNTRL,88,1376;WORK$; \ Ropen #CH_LASTPR,WORK$
Read #CH_CNTRL,88,1632;WORK$; \ Ropen #CH_DEPT,WORK$
Read #CH_CNTRL,88,1792;WORK$; \ Ropen #CH_PROD,WORK$
Read #CH_CNTRL,88,1728;WORK$; \ Ropen #CH_CCODES,WORK$
Read #CH_CNTRL,88,1744;WORK$; \ Ropen #CH_PRWH,WORK$
Read #CH_CNTRL,88,2288;WORK$; \ Ropen #CH_COMMD,WORK$
Read #CH_CNTRL,88,1936;WORK$; \ Ropen #CH_SPCPRC,WORK$
Read #CH_CNTRL,88,2880;WORK$; \ Ropen #CH_CNTRTH,WORK$
Read #CH_CNTRL,88,1952;WORK$; \ Ropen #CH_BRKTBL,WORK$
Mat Read #1,0,100;J8$;
Mat Read #1,115,0;D9;
Read #1,3;CNAME$;
Read #1,0,108;DT;
Read #1,0,108;ardate;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
j9=50


!! ======== 'boxes' code ======== !!
let drawline1$=" ",drawline1$
let drawline1$="_",drawline1$

let drawline2$=" ",drawline2$
for X = 0 to 8
    LET Y=0
	LET Y=(X*7)+1
	let drawline2$[y,y] = "|"
next X

let drawline3$=" ",drawline3$
for X = 0 to 7
	LET Y=0
	LET Y=(X*7)+1
	LET Z=(Y+1)
	let drawline3$[y,y] = "|"
	let drawline3$[Z,(Z+5)] = "______"	
next X
let drawline3$[57,57]="|"

!! ======== end of 'boxes' code ===== !!

call dxget ("SLSP",tmp$)
if rtrim$(tmp$)="" let tmp$="0"
let slsm=tmp$
if slsm<0 or slsm>999
	Let e$ = "Invalid starting customer code, must be between 0 and 999999!" \ Error 10000
endif
!!! Customer Range !!!!
Call dxget("SCUST",tmp$) 
if rtrim$(tmp$)="" let tmp$="1"
let scust=tmp$
If scust < 0 Or scust > 999999 Let e$ = "Invalid starting customer code, must be between 0 and 999999!" \ Error 10000

Call dxget("ECUST",tmp$)
let ecust=tmp$
If rtrim$(tmp$) = "" Let ecust = 999999 
If ecust < 0 Or ecust > 999999 Let e$ = "Invalid ending customer code, must be between 0 and 999999!" \ Error 10000
If ecust < scust Let e$ = "Invalid ending customer code must be greated than starting customer" \ Error 10000

! department range 
Call dxget("SDEPT",tmp$) \ let sdept=tmp$
if rtrim$(tmp$)="" let sdept=0
If sdept < 0 Or sdept > 999 Let e$ = "Invalid starting department, must be between 0 and 999!" \ Error 10000
Call dxget("EDEPT",tmp$) \ let edept=tmp$
if edept<0 or edept >999 e$ = "Invalid ending department, must be between 0 and 999!" \ Error 10000

! oldest activity date
Call dxget("ODATE",tmp$) ! date format MMDDYY !"task51710 -- was "OLDACTDATE" -which is wrong
if rtrim$(tmp$)="" let tmp$="010170" ! default in mmddyy
let odate=tmp$
tmp1$ = odate Using "&&&&&&" \ odate = tmp1$[5,6],tmp1$[1,2],tmp1$[3,4]
X2 = odate \ Gosub YMD2JUL \ If errflag Let e$ = "Invalid Oldest Activity Date!" \ Error 10000
Jodate = X2

! EFFECTIVE DATE
Call dxget("EFECTDATE",tmp$) ! date format MMDDYY
if rtrim$(tmp$)=""
	Let JA1 = ARDATE ! in yymmdd format
Else
	Let JA1 = tmp$
	tmp$ = JA1 Using "&&&&&&"
	JA1 = tmp$[5,6],tmp$[1,2],tmp$[3,4] ! YYMMDD format
endif
X2 = JA1 \ Gosub YMD2JUL \ If errflag Let e$ = "Invalid effective date!" \ Error 10000
DT = JA1 \ JA1 = X2 \ X2 = DT
Gosub ISDUNPACK

! Price
Call dxget("PRFLAG",tmp$) \ PRFLAG = tmp$ !1 ,2(Y/N/W), 3  1=System price, 2=last price margin, 3=no price
if rtrim$(tmp$)="" let prflag=0 ! default to no prices
If PRFLAG = 3 Let PRFLAG = 0
If P60$[33,33] = "Y" And PRFLAG = 2 Let e$ = "Invalid can't show last price margin!" \ Error 10000

! bracket
Call dxget("BRACKET",tmp$) \ If rtrim$(tmp$) = "" Let BRACKET = -9 Else Let BRACKET = tmp$
If PRFLAG Let BRACKET = 0
If BRACKET <> -9
  If BRACKET < 0 Or BRACKET > 999 Let e$ = "Invalid bracket, must be between 0 and 999" \ Error 10000
End If 
Call dxget("WHSE",tmp$) \ WHSE = tmp$
if rtrim$(tmp$)="" let whse=0
If P9$[32,32] <> "Y" Let WHSE = 0
If WHSE < 0 Or WHSE > D9[5] Let e$ = "Invalid warehouse, must be between 0 and ",D9[5],"!" \ Error 10000

!
 
!Print @0,23;"Printing, please wait . . . ";'CL';
If SCUST <= 0 Let KEY1_CUST$ = "" Else Let KEY1_CUST$ = SCUST - 1 Using "######"
CUSTLOOP: Search #CH_CUST,3,1;KEY1_CUST$,REC_CUST,E \ If E > 2 Gosub ERR_SEARCH
If Not(E) If Val(KEY1_CUST$) > ECUST Let E = 2
If Not(E)
  Mat Read #CH_CUST,REC_CUST,0;A1$
  Mat Read #CH_CUST,REC_CUST,142;CFC1
  Mat Read #CH_CUST,REC_CUST,194;C2
  Mat Read #CH_CUST,REC_CUST,200;C3
  Mat Read #CH_CUST,REC_CUST,208;C0
  Mat Read #CH_CUST,REC_CUST,210;CUSTC4
  Mat Read #CH_CUST,REC_CUST,252;C5
  Mat Read #CH_CUST,REC_CUST,288;C6
  Mat Read #CH_CUST,REC_CUST,348;A2$
  Mat Read #CH_CUST,REC_CUST,378;C7
  Mat Read #CH_CUST,REC_CUST,388;A3$
  Mat Read #CH_CUST,REC_CUST,410;C8
  Mat Read #CH_CUST,REC_CUST,412;C9
  Mat Read #CH_CUST,REC_CUST,418;SUB_
  Mat Read #CH_CUST,REC_CUST,420;U1
  Mat Read #CH_CUST,REC_CUST,426;U2$
  Mat Read #CH_CUST,REC_CUST,486;A0
  Mat Read #CH_CUST,REC_CUST,502;S0
  Mat Read #CH_CUST,REC_CUST,544;CFIN
  Mat Read #CH_CUST,REC_CUST,598;SZN
  Mat Read #CH_CUST,REC_CUST,600;BT$
  Mat Read #CH_CUST,REC_CUST,620;REC
  Mat Read #CH_CUST,REC_CUST,624;C1
  Unlock #CH_CUST
  CUSTPAGE = 0;DEPT = -1;LINECOUNT = 99
  If SLSM And SLSM <> CFC1[2] Goto CUSTLOOP
  PHONE$ = " ",PHONE$
  PHONE$[1,1] = "("
  PHONE$[2,4] = A1$[21,23]
  PHONE$[5,5] = ")"
  PHONE$[6,8] = A1$[24,26]
  PHONE$[9,9] = "-"
  PHONE$[10,13] = A1$[27,30]
  WORK$ = A1$[31,60] \ Gosub RTRIM_
  CUSTNUM$ = CFC1[1] Using "&&&&&#";CUSTNAME$ = WORK$
  KEY1_LASTPR$ = CFC1[1] Using "######"
LPLOOP: Search #CH_LASTPR,3,1;KEY1_LASTPR$,REC_LASTPR,E
  If E > 2 Gosub ERR_SEARCH
  If Not(E) If Val(KEY1_LASTPR$[1,6]) <> CFC1[1] Let E = 2
  If Not(E)
    Mat Read #CH_LASTPR,REC_LASTPR,0;LP$
    Read #CH_LASTPR,REC_LASTPR,12;LPDF
    Mat Read #CH_LASTPR,REC_LASTPR,16;LPC1
    Mat Read #CH_LASTPR,REC_LASTPR,28;LPC2
    Mat Read #CH_LASTPR,REC_LASTPR,46;LPC3
    Mat Read #CH_LASTPR,REC_LASTPR,56;LP2$
    Mat Read #CH_LASTPR,REC_LASTPR,140;LPC4
    Mat Read #CH_LASTPR,REC_LASTPR,164;LPMT$
    Read #CH_LASTPR,REC_LASTPR,166;AI
    Mat Read #CH_LASTPR,REC_LASTPR,168;LPR
    Mat Read #CH_LASTPR,REC_LASTPR,198;LPR1
    Mat Read #CH_LASTPR,REC_LASTPR,214;LPEUN
    Mat Read #CH_LASTPR,REC_LASTPR,220;LPUNF
    Mat Read #CH_LASTPR,REC_LASTPR,262;PERM
    Read #CH_LASTPR,REC_LASTPR,274;LPWH
    Mat Read #CH_LASTPR,REC_LASTPR,276;LPC5
    Read #CH_LASTPR,REC_LASTPR,292;LPPCDATE
    Read #CH_LASTPR,REC_LASTPR,296;LPLPERM
    Read #CH_LASTPR,REC_LASTPR,320;LPDEPT
    Unlock #CH_LASTPR
    If LPC4[3] Goto LPLOOP
    X2 = LPC1[2] \ Gosub YMD2JUL 
	IF ERRFLAG<>0
		X2 = 0
	ELSE
		JWDATE = X2
	endif
    If JWDATE < JODATE Goto LPLOOP
    KEY1_PROD$ = LP$[1,12],SPACES$;KEY1_PROD$[13] = ""
    X2 = LPC1[2] \ Gosub L_7700
    If LPC3 = 1 Let J3$ = "MATRX"
    If LPC3 = 2 Let J3$ = "CONT"
    If LPC3 = 3 Let J3$ = "PRMO"
    If LPC3 = 4 Let J3$ = "COMD"
    X3 = 0
    X9 = 0
    SGPRICE = 0
    Rem IF LPC4[3] GOSUB NON_STOCK:
    Rem IF LPC4[3] GOSUB PRINTLINE:
GET_PROD: Search #CH_PROD,2,1;KEY1_PROD$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
    If E
      Goto LPLOOP
    End If 
    Mat Read #CH_PROD,REC_PROD,0;A$
    Mat Read #CH_PROD,REC_PROD,156;B
    Mat Read #CH_PROD,REC_PROD,256;A
    Mat Read #CH_PROD,REC_PROD,460;A1
    Mat Read #CH_PROD,REC_PROD,508;A2
    Mat Read #CH_PROD,REC_PROD,512;PFU1
    Mat Read #CH_PROD,REC_PROD,554;PFU2
    Mat Read #CH_PROD,REC_PROD,596;PRPARC
    Mat Read #CH_PROD,REC_PROD,620;LM \ PREC[0] = REC_PROD
    Mat Read #CH_PROD,REC_PROD,624;PR_PO
    Read #CH_PROD,REC_PROD,630;LLC
    Mat Read #CH_PROD,REC_PROD,632;PSN$
    Mat Read #CH_PROD,REC_PROD,652;PSN
    Mat Read #CH_PROD,REC_PROD,660;U2
    Mat Read #CH_PROD,REC_PROD,670;U4
    Read #CH_PROD,REC_PROD,678;U3
    Mat Read #CH_PROD,REC_PROD,684;U3$
    Mat Read #CH_PROD,REC_PROD,744;HZ$
    Mat Read #CH_PROD,REC_PROD,834;A3
    Mat Read #CH_PROD,REC_PROD,846;PFTB
    Read #CH_PROD,REC_PROD,854;UPCT
    Mat Read #CH_PROD,REC_PROD,856;C1$
    Mat Read #CH_PROD,REC_PROD,894;C4
    Read #CH_PROD,REC_PROD,938;PF_LOAD2
    Mat Read #CH_PROD,REC_PROD,944;PR_A2$
    Mat Read #CH_PROD,REC_PROD,974;PFCO
    Mat Read #CH_PROD,REC_PROD,990;PLV
    Mat Read #CH_PROD,REC_PROD,1002;PLC
    Mat Read #CH_PROD,REC_PROD,1018;PFN
    If WHSE Gosub GET_WHSE
    Gosub CALC_LOAD
    COST = B[8] \ If LPC2[2] = 0 Let LPC2[2] = B[8]
    WORK$ = A$[140,151]
    Gosub RTRIM_
    PCODE$ = WORK$
    Read #CH_CCODES,PFU1[18],10;WORK$[1,4];
    WORK$[5] = ""
    Gosub RTRIM_
    If WORK$
      UM$ = "    ";UM$[5 - Len(WORK$)] = WORK$
    Else 
      UM$ = " "
    End If 
    QTY = 1
    For K1 = 1 To 7
      If PFU1[K1] = PFU1[18]
        QTY = PFU2[K1 - 1];K1 = 10
      End If 
    Next K1
    Gosub GET_PRICE
    Rem GOSUB PRINTLINE:
    Goto LPLOOP
  End If 
  Goto CUSTLOOP
End If 
Goto OutEnd: ! done

PRINTLINE: Rem Print a detail line
TOTREC=TOTREC+1
If X3 If PRFLAG <> 2 Let SGPRICE = 0
Gosub L_10000
If LINECOUNT > 56
  If PAGE Print #0;"\14\";
  let linecount=1
  PAGE = PAGE + 1;CUSTPAGE = CUSTPAGE + 1
  Print #0;TAB 2;"CUST# ";CUSTNUM$;
  Print #0;TAB 16;CUSTNAME$;
  Print #0;TAB 55;" ORDER FORM";
  Print #0;TAB 122;"Page ";Str$(CUSTPAGE);
  Print #0; ""
  let linecount=linecount+1
  Print #0;TAB 16;A1$[61,90];
  Print #0;TAB 100;"Zone Code ";
  Print #0;A2$[29,30];
  PRINT #0; ""
  let linecount=linecount+1
  If A1$[91,120] <> SPACES$[1,30]   ! "addr2 
    Print #0;TAB 16;A1$[91,120]
    LINECOUNT = LINECOUNT + 1
  End If  
  WORK$ = A1$[121,135]
  Gosub RTRIM_
  Print #0;tab 16;WORK$;", ";A1$[136,137];" ";A2$[1,10];
  Print #0; Tab 60;"CONTACT NAME: ";A1$[1,20];
  Print #0;tab 100;"PHONE # ";PHONE$[1,13];
  Print #0;""
  let linecount=linecount+1
  Print #0;""
  linecount=linecount+1

  Print #0;Tab 1;"PRODUCT CODE"; Tab 65;"PACK";
  print #0;""
  let linecount=linecount+1
  
  Print #0;tab 1;"VENDOR ITEM#"; Tab 22;"DESCRIPTION";
  If Not(PRFLAG) Print #0; Tab 55;" U/M   ";
  If PRFLAG Print #0; Tab 55;"PRICE"; Tab 66;" U/M ";
  FOR X = 0 to 7
      Print #0;tab (75+(x*7));"ORDER";
  NEXT X
  Print #0;""
  let linecount=linecount+1
End If 
If LPDEPT <> DEPT
  DEPT = LPDEPT
  If DEPT
    Read #CH_DEPT,DEPT;DEPT$;
  Else 
    DEPT$ = "No Department"
  End If 
  
  Print #0;""
  Print #0;tab 1;DEPT$;
  PRINT #0;""
  LINECOUNT = LINECOUNT + 3
End If 
Print #0; tab 75;drawline1$
let linecount=linecount+1
Print #0;tab 1;Str$(DEPT) + "-" + PCODE$; ! "dept#-product code
Print #0;Tab 16;A$[9,38];
Print #0; Using "######"; Tab 63;QTY;"  ";
print #0; tab 74;drawline2$;
Print #0;""
let linecount=linecount+1

Print #0;tab 1;A$[93,104];			! "vendor item #
Print #0;tab 16;A$[63,92];			! "prod desc2
If Not(PRFLAG) Goto continue_on:
If PRFLAG = 2
  If SGPRICE Print #0; Using PMASK$; Tab 49;SGPRICE;"/";PUNIT$; Tab 65;UM$; \ Goto L_5051
End If 
If Not(X3) And Not(SGPRICE) Print #0; Tab 49;"  CALL   "; Tab 65;UM$; \ Goto L_5051
Print #0; Using PMASK$; Tab 49;X3;"/";PUNIT$; Tab 63;UM$;

L_5051: !
If SGPRICE If PRFLAG <> 2 Print #0;"*";
continue_on: !
print #0; tab 74;drawline2$;
Print #0;""
linecount=linecount+1
Print #0; tab 74;drawline3$;
print #0; ""
LINECOUNT = LINECOUNT + 1
print #0; ""
linecount=linecount+1     ! "blank in between items. 
Return 


RTRIM_: If WORK$[Len(WORK$)] = " "
  WORK$[Len(WORK$)] = ""
  Goto RTRIM_
End If 
Return 


GET_PRICE: Rem "use Call Price" to get price/cost
For X = 0 To 30 \ SPECS[X] = 0 \ Next X
FLEPTR[1,0] = CH_PROD;FLEPTR[1,1] = REC_PROD
FLEPTR[2,0] = CH_PRWH;FLEPTR[2,1] = WHBLD[2]
FLEPTR[3,0] = CH_COMMD;FLEPTR[3,1] = R[CH_COMMD]
FLEPTR[4,0] = CH_LASTPR;FLEPTR[4,1] = REC_LASTPR
FLEPTR[5,0] = CH_SPCPRC;FLEPTR[5,1] = 0
FLEPTR[6,0] = CH_CNTRTH;FLEPTR[6,1] = 0
FLEPTR[7,0] = CH_CCODES;FLEPTR[7,1] = 0
FLEPTR[8,0] = CH_BRKTBL;FLEPTR[8,1] = 0
SPECS[0] = 0;SPECS[1] = AMQTY;SPECS[2] = WEIGHT;SPECS[3] = CFC1[1]
SPECS[4] = WHSE;SPECS[5] = DT;SPECS[6] = LPDEPT;SPECS[7] = CFC1[7]
SPECS[8] = 1;SPECS[9] = DFT_COST;SPECS[10] = 0;SPECS[11] = 0
SPECS[12] = 0;SPECS[13] = LPC3[2];SPECS[14] = LPC3[3];SPECS[15] = LPC3[3]
SPECS[16] = 0;SPECS[17] = COST;SPECS[18] = 0;SPECS[19] = 0
SPECS[20] = X3
!Call "PRICE",FLEPTR[],SPECS[],MSGDESC$
Call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,0,"",rstr$)
If SPECS[0] <> 0 Let SPECS[23] = X3;SPECS[17] = COST
LPC3[3] = SPECS[14];LPC3[4] = SPECS[15];COST = SPECS[17]
BASE = SPECS[20];X3 = SPECS[23];PCTYPE = SPECS[25];CONTRACT = SPECS[27]
L9[0] = PCTYPE
let prcsrc=l9[0]
if prcsrc>82 and prcsrc<118
	let prcsrc=prcsrc-100
endif
If prcsrc >= 2 And prcsrc <= 4 Let SPCL = 1
If prcsrc >= 6 And prcsrc <= 8 Let SPCL = 1
If prcsrc >= 11 And prcsrc <= 13 Let SPCL = 1
If C4[2] = 2 And Not(CONTRACT) And Not(SPCL)
  If BRACKET > 0
    SPECS[11] = BRACKET;SPECS[0] = 3;SPECS[20] = BASE
	Call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,0,"",rstr$)
    !Call "PRICE",FLEPTR[],SPECS[],MSGDESC$
    If SPECS[0] <> 0 Let SPECS[17] = COST;SPECS[23] = X3
    COST = SPECS[17];X3 = SPECS[23];BASE = SPECS[20]
  Else 
    X3 = 0
  End If 
End If 
If PRFLAG = 2 If C4[2] <> 2 Gosub L_12100 \ If SGPRICE Goto L_2171
L_2170: Rem
L_2171: Gosub PRINTLINE
LPEUN[2] = 0;PERM[0] = 0;PERM[1] = 0;BRKLVL = 0
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
Rem {begin src/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
If X2 <= 0 Let X$ = " ",X$ \ Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
let errflag=0
If X2 <= 0 
	let errflag=99
	Return 
endif
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E)
IF E<>0
	LET ERRFLAG=99
	Return 
ENDIF
X2 = X$[1,5]
Return
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
If X2 <= 0 Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
Rem {end rtn.date.i}
GET_WHSE: Rem GET WHSE
WHPROD$[1,12] = A$[140,151]
WHBLD[0] = 7;WHBLD[1] = WHSE;WHBLD[2] = 0
!Call "GETWHSE",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E
Call "GETWHSE.dl4",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E,e$,rstr$
If P9$[32,32] = "Y" Gosub L_69000
If WHBLD[2] > 0 Mat Read #7,WHBLD[2],842;WHLM;
B[8] = W3[17];B[10] = W3[16];B[22] = WHPARC[0];B[21] = W3[15]
C4[3] = WHPARC[1];C4[4] = W3[18];PF_LOAD2 = W3[14]
For CT = 20 To 25
  A[CT] = W3[CT - 1]
Next CT
Return 
NON_STOCK: Rem   SET VARIABLES FOR NON STOCKS
A$[63,92] = LP2$[51,80]
A$[9,38] = LP2$[21,50]
B[24] = C4[1]
PFU1[18] = 0;PACK = 0
B[8] = LPC2[2];COST = LPC2[2]
TYUNIT = LPC2[0];LYUNIT = 0
PFU1[0] = LPEUN[0];PFU1[1] = LPC3[2];PFU1[2] = LPC3[3];PFU1[3] = LPC3[4]
PFU1[9] = LPC3[2]
PFU1[11] = LPC3[4]
PFU1[12] = LPC3[3]
X3 = C2[1]
Mat Read #CH_LASTPR,REC_LASTPR,220;PFU2;
Mat A = Zer
LPC4[2] = 0
Return 
GET_COMMD: Rem COMMOD
K3$ = " ",K3$ \ K3$ = A$[152,155]
Search #8,2,1;K3$,R[CH_COMMD],E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_4550
Goto L_4580
L_4550: Rem ERR
!Print @0,23;'RB CL';"COMMODITY NOT FOUND ";K3$
!Signal 3,20 \ Print @0,23;'CE';
L_4580: Return 
L_12100: Rem GET SUGGESTED PRICE
SGPRICE = 0
If PRFLAG = 1 And P9$[13,13] <> "N" And P60$[33,33] <> "Y" And LPC3[0] = -7 And Not(X9) Goto L_12130
If PRFLAG = 2 And P60$[33,33] <> "Y" Goto L_12130
Goto L_12160
L_12130: If Not(LPC2[1]) Or Not(LPC2[2]) Goto L_12160
SGPRICE = COST
SGPRICE = SGPRICE + (SGPRICE * ((LPC2[1] - LPC2[2]) / LPC2[2]))
L_12160: Return 
CALC_LOAD: Rem CALC LOADS FROM LOAD MARKUP
If P9$[32,32] = "Y" And WHSE <> 0
  If WHLM[0]
    WH = WHSE;LTBL = WHLM[0];CNVTA = 0
    Gosub L_12610 \ W3[17] = CNVTA;B[8] = W3[17]
  End If 
  If WHLM[1]
    WH = WHSE;LTBL = WHLM[1];CNVTA = 0
    Gosub L_12610 \ W3[14] = CNVTA;PF_LOAD2 = W3[14]
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    Gosub L_12610 \ B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    Gosub L_12610 \ PF_LOAD2 = CNVTA
  End If 
End If 
Return 
L_12610: Rem CALL
OTYPE = 1
!Call "MXLOAD5",OTYPE,WH,LTBL,PREC[],CNVTA
Call "MXLOAD5.dl4",OTYPE,WH,LTBL,PREC[],CNVTA,intCO,e$,rstr$
Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
If L3 Let AMOUNT = CNVTA \ Goto L_20160
L_20050: !If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
!Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
L_10000: Rem CONVERT   **************************************************
CNVTU[0] = 0
CNVTU[1] = LPC3[3]
CNVTU[2] = 2
X3 = X3 - L6[1]
If L6[0] Let X3 = X3 - (X3 * (L6[0] / 100))
If Not(X3) If SGPRICE Let X3 = SGPRICE
CNVTA = X3
Gosub L_20000
X3 = FNP(AMOUNT)
If PRFLAG = 2 And SGPRICE !
  CNVTA = SGPRICE
  Gosub L_20000
  SGPRICE = FNP(AMOUNT)
End If 
CNVTU[0] = 0
CNVTU[1] = LPC3[2]
CNVTU[2] = 1
CNVTA = LPC2[0]
Gosub L_20000
LPC2[0] = AMOUNT
If LPC3[3] > 0 Mat Read #6,LPC3[3],10;PUNIT$;
If LPC3[2] > 0 Mat Read #6,LPC3[2],10;SUNIT$;
If LPC3[4] > 0 Mat Read #6,LPC3[4],10;CUNIT$;
If LPC3[3] = -1 Let PUNIT$ = "CWT "
If LPC3[3] = -2 Let PUNIT$ = "LOT "
If LPC3[4] = -1 Let CUNIT$ = "CWT "
If LPC3[4] = -2 Let CUNIT$ = "LOT "
CNVTU[0] = 0
CNVTU[1] = LPC3[4]
CNVTU[2] = 2
CNVTA = LPC2[2]
Gosub L_20000
LPC2[2] = FNP(AMOUNT)
CNVTU[0] = 0
CNVTU[1] = LPC3[3]
CNVTU[2] = 2
CNVTA = LPC2[1]
Gosub L_20000
LPC2[1] = FNP(AMOUNT)
Return 

ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
If not(J8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions to print"
			message$=message$+"."
		else
			Let message$=message$+" Transaction(s) Printed"
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
