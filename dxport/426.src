! >>> Program 426
!
! description Product Stock Sales Report - Input
!
! loadsave -w -n 100,10 -o prog/dxport/426.dl4 src/426.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 31, 2001  09:39:16
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx/mx426.src (univ2) [kag] {55348}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX426          Stock Sales Report  (selector)
Rem Author:        Roman  (01/01/1993)
Rem                UNIVERSAL BUSINESS SYSTEMS
!
Declare Intrinsic Sub InpBuf,String
! - Option Default Dialect IRIS1
! - Com 1%,ARMONTH,DDF
! - Com 2%,N1[10],N2[5],N3[3],N4[39]
! - Com N1$[50]
!
If Err 0 Gosub ERR_TRAP
! - If Err 0 Gosub ERR_ESCAPE
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim IncType$[50],ExcType$[50],Period$[1]
Dim Blank$[50] \ Blank$ = " ",Blank$
Dim z$[50] \ z$ = "z",z$
!
Dim N1$[50]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],X,X1,MODE,ARMTH,ARMONTH,DDF
Dim 2%,X2,D9[5],COID,E,I,F,N1[10],N2[5],N3[3],N4[39]
Dim 3%
Dim 4%,J1
Dim Z1$[50],F$[16],X$[40],J$[75],X$[40]
Dim J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
F$ = COID Using "CNTRL#"
For I = 2 To 10
  Read F \ If F = -1 Goto L_835
  If Not(Fra(F)) Read #1,88,Abs(F);F$; Else Read #1,88,F * 10000;F$;
  If F >= 0 If Not(Fra(F)) Open #I,F$
  If F < 0 Eopen #I,F$
  If Fra(F) Ropen #I,F$
L_835: Next I
Data ".1648",".1792",".1728",".1744",".2432",".1984",".2272","-1",".2288"
Mat Read #1,115,0;D9;
Mat Read #1,0,120;ARMTH;
DDF = 1
If Err 0 Let J8 = Spc(8)
J8 = 0;V9[4] = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
!
!!!! dx add xport reporting code
Dim tmp$[500],tmp1$[300],tmp2$[50]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"426",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!!!  dx add xport reporting code
!
! material code
Call dxget("begmat",tmp$) \ N1$[1,2] = tmp$,Blank$ ! starting
Call dxget("endmat",tmp$) \ If tmp$ = "" Let N1$[3,4] = z$ Else Let N1$[3,4] = tmp$,Blank$ ! ending
Call dxget("subtotmat",tmp$) \ If tmp$ = "" Let N2[0] = 0 Else Let N2[0] = 1 ! sub total
Call dxget("pbmat",tmp$) \ PBMat = tmp$ ! page break
Call dxget("summarymat",tmp$) \ If tmp$ = "" Let N3[0] = 0 Else Let N3[0] = 1 ! sub total summary
!
! category
Call dxget("begcat",tmp$) \ N1[0] = tmp$ ! starting
Call dxget("endcat",tmp$) \ If tmp$ = "" Let N1[1] = 99 Else Let N1[1] = tmp$ ! ending
Call dxget("subtotcat",tmp$) \ If tmp$ = "" Let N2[1] = 0 Else Let N2[1] = 1 ! sub total
Call dxget("pbcat",tmp$) \ PBCat = tmp$ ! page break
Call dxget("summarycat",tmp$) \ If tmp$ = "" Let N3[1] = 0 Else Let N3[1] = 1 ! sub total summary
!
! commodity
Call dxget("begcom",tmp$) \ N1$[5,8] = tmp$,Blank$ ! starting
Call dxget("endcom",tmp$) \ If tmp$ = "" Let N1$[9,12] = z$ Else Let N1$[9,12] = tmp$,Blank$ ! ending
Call dxget("subtotcom",tmp$) \ If tmp$ = "" Let N2[2] = 0 Else Let N2[2] = 1 ! sub total
Call dxget("pbcom",tmp$) \ PBCom = tmp$ ! page break
Call dxget("summarycom",tmp$) \ If tmp$ = "" Let N3[2] = 0 Else Let N3[2] = 1 ! sub total summary
!
! product
Call dxget("begprod",tmp$) \ N1$[13,24] = tmp$,Blank$ ! starting
Call dxget("endprod",tmp$) \ If tmp$ = "" Let N1$[25,36] = z$ Else Let N1$[25,36] = tmp$,Blank$ ! ending
Call dxget("subtotprod",tmp$) \ If tmp$ = "" Let N2[3] = 0 Else Let N2[3] = 1 ! sub total
Call dxget("brandlevel",tmp$) \ BrandLevel = tmp$ ! # of characters for brand level break
Call dxget("summaryprod",tmp$) \ If tmp$ = "" Let N3[3] = 0 Else Let N3[3] = 1 ! sub total summary
!
Call dxget("proddet",tmp$) \ If tmp$ = "" Let proddet = 0 Else Let proddet = 1 ! product detail by brand level
Call dxget("whse",tmp$) \ N1[2] = tmp$ ! warehouse
Call dxget("qtyhand",tmp$) \ N1[3] = tmp$ ! pick units, quantity on hand
Call dxget("qtysales",tmp$) \ N1[4] = tmp$ ! pick units, quantity sales
Call dxget("wgt",tmp$) \ N1$[37,37] = tmp$ ! show weight, T=tons P=pounds N=none
Call dxget("inctype",IncType$) ! include order types
Call dxget("exctype",ExcType$) ! exclude order types
Call dxget("scale",tmp$) \ N1[0] = tmp$ ! scaling factor
Call dxget("armonth",tmp$) \ ARMONTH = tmp$ ! a/r month
Call dxget("period",Period$) ! period, 1=this year 2=last year
!!!  dx end
!
! check material code params
If N1$[1,2] < Blank$[1,2] Or N1$[1,2] > z$[1,2] Let e$ = "Invalid starting material code, must be between blank and 'zz'!" \ Error 10000
If N1$[3,4] < N1$[1,2] Or N1$[3,4] > "zz" Let e$ = "Invalid ending material code, must be between starting material code and 'zz'!" \ Error 10000
If N2[0] If PBMat Let N2[0] = N2[0] + PRMat / 10 ! page break
!
! check catagory params
If N1[0] < 0 Or N1[0] > 99 Let e$ = "Invalid starting catagory, must be between 0 and 99!" \ Error 10000
If N1[1] < N1[0] Or N1[1] > 99 Let e$ = "Invalid ending catagory, must be between starting catagory and 99!" \ Error 10000
If N2[1] If PBCat Let N2[1] = N2[1] + PRCat / 10 ! page break
!
! check commodity params
If N1$[5,8] < Blank$[5,8] Or N1$[5,8] > z$[5,8] Let e$ = "Invalid starting commodity code, must be between blank and '",z$[5,8],"'!" \ Error 10000
If N1$[9,12] < N1$[5,8] Or N1$[9,12] > z$[9,12] Let e$ = "Invalid ending commodity code, must be between starting commodity code and '",z$[9,12],"'!" \ Error 10000
If N2[2] If PBCom Let N2[2] = N2[2] + PRCom / 10 ! page break
!
! check product params
If N1$[13,24] < Blank$[13,24] Or N1$[13,24] > z$[13,24] Let e$ = "Invalid starting product, must be between blank and '",z$[13,24],"'!" \ Error 10000
If N1$[25,36] < N1$[13,24] Or N1$[25,36] > z$[25,36] Let e$ = "Invalid ending product, must be between starting product and '",z$[25,36],"'!" \ Error 10000
If N2[3] If BrandLevel
  If BrandLevel < 1 Or BrandLevel > 12 Let e$ = "Invalid number for brand level break, must be between 1 and 12!" \ Error 10000
  N2[3] = N2[3] + BrandLevel / 100 ! # of chars for brand level break
Else 
  N2[3] = 0 \ BrandLevel = 0
End If 
!
! Print product detail within brand levels
If N2[3] = 0 Or Fra(N2[3]) = .12
  If N2[3] Let N2[3] = - N2[3]
End If 
!
! warehouse
If D9[5] = 1 Let N1[2] = 0
If N1[2] < 0 Or N1[2] > D9[5] Let e$ = "Invalid warehouse, must be between 0 and ",D9[5]," !" \ Error 10000
!
! order types included
If IncType$
  MODE = 1 \ Z1$ = IncType$ \ Gosub L_2500 ! verify order types
  If X = 0 Let e$ = "Invalid included order type entered" \ Error 10000
  ExcType$ = "" ! can only have one, included or excluded
End If 
!
! order types excluded
If ExcType$
  MODE = 2 \ Z1$ = ExcType$ \ Gosub L_2500 ! verify order types
  If X = 0 Let e$ = "Invalid excluded order type entered" \ Error 10000
End If 
!
! scaling factor
If N4[0] = 0 Let N4[0] = 1
If N4[0] < 1 Or N4[0] > 1000 Or (Fra(N4[0] / 100) And N4[0] <> 1) Let e$ = "Invalid scaling factor, must be between 1 and 1000!" \ Error 10000
!
! a/r month
If ARMONTH = 0 Let ARMONTH = ARMTH
If ARMONTH < 1 Or ARMONTH > 12 Let e$ = "Invalid a/r month, must be between 1 and 12!" \ Error 10000
!
If Period$ = "L" Let ARMONTH = - ARMONTH ! last year
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
!
Chain "426a.dl4" ! print detail
Chain Write CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,ARMONTH,N1,N2,N3,N4,N1$,J8
!
! - L_1000: Rem "=================================== get ranges
! - Gosub L_6000
! - L_1015: J5$ = "<CR> FOR FIRST";J0$ = "2 00022803";J1$ = "   "
! - Gosub L_7000 \ N1$[1,2] = J$
! - J5$ = "<CR> FOR LAST";J0$ = "2 00024103";J1$ = "zzz"
! - Gosub L_7000 \ N1$[3,4] = J$
! - If N1$[3,4] < N1$[1,2] Gosub L_1850 \ Goto L_1015
! - J5$ = "PRINT SUB-TOTALS AT THIS LEVEL";J0$ = "6 00014903";J1 = 0
! - Gosub L_7000
! - N2[0] = J1
! - If Not(J1) Goto L_1080
! - J5$ = "PAGE BREAK AT THIS LEVEL";J0$ = "6 00016103";J1 = 0
! - Gosub L_7000
! - L_1080: N2[0] = N2[0] + J1 / 10
! - J5$ = "PRINT SUB-TOTALS SUMMARY REPORT FOR THIS LEVEL";J0$ = "6 00017303";J1 = 1
! - Gosub L_7000
! - N3[0] = J1
! - 
! - L_1110: J5$ = "<CR> FOR FIRST";J0$ = "3 00022804";J1 = 0
! - Gosub L_7000 \ N1[0] = J1
! - J5$ = "<CR> FOR LAST";J0$ = "3 00024104";J1 = 99
! - Gosub L_7000 \ N1[1] = J1
! - If N1[1] < N1[0] Gosub L_1850 \ Goto L_1110
! - J5$ = "PRINT SUB-TOTALS AT THIS LEVEL";J0$ = "6 00014904";J1 = 0
! - Gosub L_7000
! - N2[1] = J1
! - If Not(J1) Goto L_1175
! - J5$ = "PAGE BREAK AT THIS LEVEL";J0$ = "6 00016104";J1 = 0
! - Gosub L_7000
! - L_1175: N2[1] = N2[1] + J1 / 10
! - J5$ = "PRINT SUB-TOTALS SUMMARY REPORT FOR THIS LEVEL";J0$ = "6 00017304";J1 = 1
! - Gosub L_7000
! - N3[1] = J1
! - 
! - L_1205: J5$ = "<CR> FOR FIRST";J0$ = "2 00042605";J1$ = "    "
! - Gosub L_7000 \ N1$[5,8] = J$
! - J5$ = "<CR> FOR LAST";J0$ = "2 00043905";J1$ = "zzzz"
! - Gosub L_7000 \ N1$[9,12] = J$
! - If N1$[9,12] < N1$[5,8] Gosub L_1850 \ Goto L_1205
! - J5$ = "PRINT SUB-TOTALS AT THIS LEVEL";J0$ = "6 00014905";J1 = 0
! - Gosub L_7000
! - N2[2] = J1
! - If Not(J1) Goto L_1270
! - J5$ = "PAGE BREAK AT THIS LEVEL";J0$ = "6 00016105";J1 = 0
! - Gosub L_7000
! - L_1270: N2[2] = N2[2] + J1 / 10
! - J5$ = "PRINT SUB-TOTALS SUMMARY REPORT FOR THIS LEVEL";J0$ = "6 00017305";J1 = 1
! - Gosub L_7000
! - N3[2] = J1
! - 
! - L_1300: J5$ = "<CR> FOR FIRST";J0$ = "2 00121806";J1$ = "            "
! - Gosub L_7000 \ N1$[13,24] = J$
! - J5$ = "<CR> FOR LAST";J0$ = "2 00123106";J1$ = "zzzzzzzzzzzz"
! - Gosub L_7000 \ N1$[25,36] = J$
! - If N1$[25,36] < N1$[13,24] Gosub L_1850 \ Goto L_1300
! - J5$ = "PRINT SUB-TOTALS AT THIS LEVEL";J0$ = "6 00014906";J1 = 0
! - Gosub L_7000
! - N2[3] = J1
! - If Not(J1) Goto L_1370
! - L_1355: J5$ = "ENTER # OF DIGITS FOR BRAND LEVEL BREAK";J0$ = "3 00025306";J1 = 0
! - Gosub L_7000
! - If J1 < 1 Or J1 > 12 Goto L_1355
! - L_1370: N2[3] = N2[3] + J1 / 100
! - J5$ = "PRINT SUB-TOTALS SUMMARY REPORT FOR THIS LEVEL";J0$ = "6 00017306";J1 = 1
! - Gosub L_7000
! - N3[3] = J1
! - 
! - If Not(N2[3]) Or Fra(N2[3]) = .12 Goto L_1425
! - J5$ = " ",J5$;J0$ = "6 00014309";J1 = 0
! - Gosub L_7000
! - If Not(J1) Let N2[3] = - N2[3]
! - L_1425: If D9[5] = 1 Let N1[2] = 0 \ Goto L_1450
! - 
! - L_1430: J5$ = "ENTER WAREHOUSE OR  0: FOR ALL";J0$ = "3 00023410";J1 = 0
! - Gosub L_7000 \ N1[2] = J1
! - If J1 > D9[5] Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1430
! - 
! - L_1450: J5$ = " 1: STOCKING  2: SELLING  3: PURCHASING  4: COSTING  5: PRICING";J0$ = "3 00014211";J1 = 1
! - Gosub L_7000 \ N1[3] = J1
! - If J1 < 1 Or J1 > 5 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1450
! - 
! - L_1470: J5$ = " 1: STOCKING  2: SELLING  3: PURCHASING  4: COSTING  5: PRICING";J0$ = "3 00014212";J1 = 1
! - Gosub L_7000 \ N1[4] = J1
! - If J1 < 1 Or J1 > 5 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1470
! - 
! - L_1490: J5$ = "PRINT PRODUCT WEIGHT INFORMATION";J0$ = "2 00014913";J1$ = "N"
! - Gosub L_7000 \ N1$[37,37] = J$
! - If J$ <> "T" If J$ <> "P" If J$ <> "N" Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1490
! - N2[4] = J1
! - 
! - L_1515: J5$ = "EXAMPLE:  1,2,4,8";J0$ = "2 00205014";J1$ = " ",J1$
! - Gosub L_7000 \ Z1$ = J$
! - If Z1$[1,2] = "  " Goto L_1540
! - MODE = 1 \ Gosub L_2500 \ Goto L_1515
! - Goto L_1565
! - 
! - L_1540: Rem
! - L_1545: J5$ = "EXAMPLE:  3,6,10";J0$ = "2 00205015";J1$ = " ",J1$
! - Gosub L_7000 \ Z1$ = J$
! - If Z1$[1,2] = "  " Goto L_1565
! - MODE = 2 \ Gosub L_2500 \ Goto L_1545
! - 
! - L_1565: Rem
! - L_1570: J5$ = "ENTER SCALING FACTOR OR <CR> FOR DEFAULT OF 1";J0$ = "3 00043816";J1 = 1
! - Gosub L_7000
! - If J1 < 1 Or J1 > 1000 Or (Fra(J1 / 100) And J1 <> 1) Goto L_1570
! - N4[0] = J1
! - 
! - L_1595: J5$ = "PRESS <CR> TO KEEP DEFAULT";J0$ = "3 00022817";J1 = ARMONTH
! - Gosub L_7000
! - If J1 < 1 Or J1 > 12 Goto L_1595
! - ARMONTH = J1
! - 
! - L_1615: J5$ = "";J0$ = "1 00016717";J1$ = "T"
! - Gosub L_7000
! - If J$ <> "T" And J$ <> "L" Goto L_1615
! - If J$ = "L" Let ARMONTH = - ARMONTH
! - Goto L_1900
! - 
! - L_1850: Rem "bad range entered
! - J7$ = "ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! "
! - Gosub L_7600 \ Return 
! - L_1900: Rem "================== all picked
! - Print @10,22;'CE';
! - Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ = "R" Goto L_1000
! - If Z1$ <> "P" Goto L_1900
!
! - Chain "MX426A"
!
L_2500: Rem "========================================== unscramble order types
X = 1
For I = 1 To 39 \ N4[I] = 0 \ Next I
L_2520: X2 = 0 \ Let X$ = Z1$ To "," : X2
X1 = X$ \ If X1 < 1 Or X1 > 38 Let X = 0 \ Goto L_2700
If MODE = 1 Let N4[X1] = 1;N4[39] = 1
If MODE = 2 Let N4[X1] = .1;N4[39] = .1
If X2 Let Z1$ = Z1$[X2 + 1] \ Goto L_2520
L_2700: Return ! - was return X
!
! - L_6000: Rem "========================================== screen
! - Print 'CS'
! - Print @0,0;"MX426";@28,0;"STOCK SALES REPORT";@55,0;Msc$(3)
! - Print @69,1;"SUB-TOTALS"
! - Print @20,2;"-STARTING-";@35,2;"-ENDING-";@45,2;"SUB-TOTALS";@57,2;"PAGE BREAK";@70,2;"SUMMARY"
! - Print @1,3;"MATERIAL CODES"
! - Print @1,4;"CATEGORIES";
! - Print @1,5;"COMMODITIES"
! - Print @1,6;"PRODUCTS"
! - Print @1,9;"Print product detail within brand levels?"
! - Print @1,10;"Enter Warehouse or   0:  for all:"
! - Print @1,11;"Pick units for Qty-on-hand and PO-qty's:"
! - Print @1,12;"Pick units for Sales Qty's:"
! - Print @1,13;"Show Weight?  T: tons,  P: pounds, or  N: none:"
! - Print @1,14;"Enter Order Types to include or <CR> for all:"
! - Print @1,15;"Enter Order Types to exclude or <CR> for none:"
! - Print @1,16;"Enter Scaling Factor for Quantities:"
! - Print @1,17;"Enter AR Month for Report:"
! - Print @33,17;"  ";'ER BR';" T:";'ER';" this year or ";'ER BR';" L:";'ER';" last year: "
! - Return 
! - L_7000: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 <> 3 If J0 <> 4 Goto L_7070
! - If J0 = 3 Let J2$ = "#",J2$
! - If J0 = 4 Let J2$ = "-",J2$
! - J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - L_7070: J1$[J3 + 1] = ""
! - If J0 < 3 Goto L_7105
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 = 6 Goto L_7105
! - If J0 <> 5 Goto L_7100
! - J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6
! - J1$ = J9$[4,7],J9$[2,3],"  " \ Goto L_7105
! - L_7100: J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! - If Len(J5$) > Msc(33) - 2 Let J5$[Msc(33) - 2] = ""
! - L_7105: If J5 < Msc(34) - 1 Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - Print @J4,J5;'BU';J1$[1,J3]; Tab (J4 + J3);'EU';" "; \ If J0 = 5 Print "  ";
! - Print @J4,J5;'BU'; \ Input Len 16384 + J3;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) <= J3 Goto L_7130
! - J7$ = "TOO LONG !" \ Gosub L_7600 \ Goto L_7105
! - L_7130: J9$ = J4$ \ If Len(J9$) Goto L_7145
! - If J0$[3,4] = "00" Let J9$ = J1$ \ Goto L_7145
! - J7$ = "FIELD MUST BE ENTERED !" \ Gosub L_7600 \ Goto L_7105
! - L_7145: For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] >= " " If J9$[J8,J8] <= "~" Next J8 \ Goto L_7160
! - J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!" \ Gosub L_7600 \ Goto L_7105
! - L_7160: On J0 Goto L_7165,L_7165,L_7185,L_7185,L_7265,L_7330 \ Stop 
! - L_7165: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto L_7345
! - L_7185: J9 = 0;J9[1] = 0 \ For J8 = 1 To Len(J9$)
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "-" Goto L_7235
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "+" Goto L_7235
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto L_7230
! -   If J9$[J8,J8] = " " Goto L_7235
! -   If J8 <> 1 Or Len(J0$) < 11 Goto L_7210
! -   J7$ = "" \ Let J7$ = J0$[10] To J9$[J8,J8] : J7 \ If J7 Goto L_7235
! - L_7210: If J9$[J8,J8] <> "." Goto L_7250
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto L_7260
! -   If J9 Goto L_7250
! -   J9 = 1
! - L_7230: If J9 Let J9 = J9 + 1
! -   If Not(J9) Let J9[1] = J9[1] + 1
! - L_7235: Next J8
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto L_7260
! - L_7242: If J6 If J9[1] > (J3 - J6 - 1) Let J7$ = "TOO MANY INTEGERS FOR FIELD !" \ Goto L_7260
! - If J0 = 4 If J6 If J9[1] > (J3 - J6 - 2) Let J9[1] = 99 \ Goto L_7242
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto L_7345
! - L_7250: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - L_7260: Gosub L_7600 \ Goto L_7105
! - L_7265: If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto L_7325
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto L_7315
! - If J9[1] < 1 Goto L_7325
! - On J9 Goto L_7290,L_7300,L_7290,L_7285,L_7290,L_7285
! - On J9 - 6 Goto L_7290,L_7290,L_7285,L_7290,L_7285,L_7290
! - Goto L_7325
! - L_7285: If J9[1] > 30 Goto L_7325
! - L_7290: If J9[1] > 31 Goto L_7325
! - Goto L_7315
! - L_7300: If J9[1] > 29 Goto L_7325
! - If Not(Fra(J9[2] / 4)) Goto L_7315
! - If J9[1] > 28 Goto L_7325
! - L_7315: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub L_7700
! - J$ = X$ \ J3 = 8 \ Goto L_7345
! - L_7325: J7$ = "INVALID DATE !" \ Gosub L_7600 \ Goto L_7105
! - L_7330: If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto L_7345
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto L_7345
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !" \ Gosub L_7600 \ Goto L_7105
! - L_7345: J$[J3 + 1] = "" \ Print @J4,J5;J$;" "; \ Return 
! - L_7600: If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
! - Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
! - Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
! - Print @0,Msc(34) - 1;'CL'; \ Return 
! - L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
! - X$ = " ",X$ \ X$[10] = ""
! - X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
! - X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
! - X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
! - X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
! - If Not(X2) Let X$ = "        "
! - Return 
! - X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
! - X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
! - Return 
! - OUTEND: Rem EXIT PROGRAM
! - Print 'CS'
! - Close 
! - Chain "MX000"
! - Stop 
! - Stop 
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
