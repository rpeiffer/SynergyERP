! movetounallocloc
!
! loadsave -w -n 100,10 -o prog/dxport/movetounallocloc.dl4 src/movetounallocloc.src
!
Rem **********************************************************
Rem *-
Rem *- Universal Business Systems
! *- Move stock to unallocate location
! *-
! *- MODIFICATION LOG
! *- ----------------
! *- RGP - 08/26/02 - create program  CCT 159966
! *-
! *- PARAMETER          TYPE    DESCRIPTION
! *- ---------          ----    -----------
! *- PROD$		input	product code
! *- WH			input	warehouse #
! *- LOC$		input	location
! *- LOT$		input	lot (should always be default with RASL)
! *- QTY                input   quantity of product to move
! *-
! *- NOTE: This subroutine is intended to be CALLED FROM MXLINE as
! *-       various checks have been done in mxline to make sure it is
! *-       appropriate to do it.
! *-
! **********************************************************
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  3, 2006  23:19:40
Rem /w/papermaster/r2002//usr/acct/valerie/work/custom/htberry/movetounallocloc.src (univ2) [valerie] {37998}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc" ! dx
external lib "invttrans.dl4"
declare external sub maketrans
External Lib "ubsfunc.dl4"
declare external function getuidrec
External Lib "librasl.lib"
Declare External Sub chkwhrasl
Include "src/inc/fileinvtrans.inc"
Include "src/inc/filensinvtrans.inc"
Declare Intrinsic Sub DateToJulian,InpBuf,String
! Option Default Dialect IRIS1

Try 
! If Err 0 Gosub ERR_TRAP
Enter PROD$,WH,LOC$,LOT$,QTY,INTCO
Dim 1%,FCHAN[7],CTRL88
Dim 2%,C2,Rasl[5]
Dim F$[17],TMPKEY$[60],TMPKEY2$[60],userid$[10]
Dim 1%,P1[1],E,LT1[3],WHOAMI
Dim 2%,P2[2],TMPREC
Dim 2%,SYSDATE,PRODRECVDATE,JULDATE[1]
Dim P0$[66],P9$[50],P60$[50]
Dim 3%,P3[4]
Dim 3%,W3[24],LT2[5]
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim 2%,B1[24],3%,A[34]
Dim SCRATCH$[80],RASLUNALLOCLOC$[6]
Dim LT0$[56],LT1$[6]
Dim tmp$[200],Blank$[100],RSTR$[200],3%,Status
RSTR$="movetounallocloc.dl4" ! FOR MAINERR (can't be null)
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Dim itr. as invtrans
call dxget("S_USER.ID",tmp$) ! get from system variable
Let UserID$=UCase$(tmp$) ! make sure it's UPPERCASE as that's what PM uses
Blank$=" ",Blank$
Gosub OPENFILES
Mat Read #FCHAN[1],19,50;P9$; \ Mat Read #FCHAN[1],60,50;P60$;
Gosub VERIFYUNALLOC \ If E Goto OUTEND
!Read #FCHAN[6],Spc(6);WHOAMI;
Whoami=GetUIDRec(e$,IntCo,Userid$)
Read #FCHAN[1],3,172;SYSDATE;
Gosub MOVEPRODUCT
goto OutEnd
OPENFILES: Rem
C2 = Intco ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
CHNL = 99 \ Gosub GETCHAN \ FCHAN[1] = CHNL
F$ = "cntrl/CNTRL"+Str$(C2) 
! If C2 > 9 Let F$ = C2 Using "CNTRL##"
Ropen #FCHAN[1],F$
For I = 2 To 7
  Read CNTRL88
  If CNTRL88 <> -1
    Read #1,88,Abs(CNTRL88);F$;
    CHNL = 99 \ Gosub GETCHAN \ FCHAN[I] = CHNL
    If CNTRL88 > 0 Open #FCHAN[I],F$
    If CNTRL88 < 0 Ropen #FCHAN[I],F$
  End If 
Next I
Data "2528","2512","-1744","-1792","-1","-2736"
CHNL = 99 \ Gosub GETCHAN \ FCHAN[6] = CHNL
Ropen #FCHAN[6],"CNTRL/USERPORT"
Return 
CLOSEFILES: Rem
For I = 1 To 7
  Close #FCHAN[I]
Next I
Return 
VERIFYUNALLOC: Rem
E = 1
If P9$[41,41] = "N" Return 
If LOC$[1,6] = "STOCK " Or LOC$[1,6] = "NONE  " Return
if p9$[41,41]="W" ! rasl by whse
	clear Rasl[]
	Call ChkWhRasl(e$,intco,FChan[1],0,WH,RASL[])
	clear e$
	if not(Rasl[0]) return ! not whse rasl
Endif ! allow p9$[41,41] on thru
Mat Read #FCHAN[1],69,166;RASLUNALLOCLOC$;
If RASLUNALLOCLOC$ = "" Or RASLUNALLOCLOC$[1,1] = " " Return 
TMPKEY$ = WH Using "##",RASLUNALLOCLOC$[1,6]
Search #FCHAN[7],2,1;TMPKEY$,TMPREC,E \ If E > 1 ERROR 11000 ! Gosub ERR_SEARCH
If E Return 
SCRATCH$ = " ",SCRATCH$
SCRATCH$[1,Len(RASLUNALLOCLOC$)] = RASLUNALLOCLOC$
RASLUNALLOCLOC$ = SCRATCH$
E = 0
Return 
MOVEPRODUCT: Rem
TMPKEY$ = PROD$[1,12],WH Using "##"
Search #FCHAN[4],2,1;TMPKEY$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Mat Read #FCHAN[4],TMPREC,78;W3;
TMPKEY$ = PROD$[1,12]
Search #FCHAN[5],2,1;TMPKEY$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Mat Read #FCHAN[5],TMPREC,156;B1;
mat read #FCHAN[5],TMPREC,256;A;
clear itr.
itr.ProdCode$ = PROD$[1,12]+Blank$
itr.LotNum$=LOT$[1,12]+Blank$
itr.SrcCode$="PROG MV2UNAL"+Blank$
itr.Comment$="LINE QTY REDUCTION  "+Blank$
itr.TrnsType = 28 \ itr.Whse = WH \ itr.EntBy = WHOAMI \ itr.Tiebrkr = 0
itr.TrnsDate = SYSDATE \ itr.RunInvt = W3[0] \ itr.Qty = QTY
If P9$[32,32] = "Y"
  itr.CostLoad = W3[17]
  itr.CostAvg = W3[15]
Else 
  itr.CostLoad = B1[8]
  itr.CostAvg = B1[21]
End If 
itr.NetPrice = 0
itr.Loc$ = LOC$[1,6]+Blank$
if A[5]<=0 let A[5]=1
itr.Wgt = itr.qty*A[6]/A[5] ! "std weight
!Call "MAKETRANS",LT0$,LT1[],LT2[],LT1$,FCHAN[3]
Call MakeTrans(e$,IntCo,FCHAN[3],Status,ITR.) !  as invtrans)
itr.TrnsType = 10
itr.Tiebrkr = 0
itr.Loc$ = RASLUNALLOCLOC$[1,6]+Blank$
!Call "MAKETRANS",LT0$,LT1[],LT2[],LT1$,FCHAN[3]
Call MakeTrans(e$,IntCo,FCHAN[3],Status,ITR.) !  as invtrans)
TMPKEY2$ = WH Using "##",LOC$[1,6],PROD$[1,12],LOT$[1,12]
Search #FCHAN[2],2,3;TMPKEY2$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Mat Read #FCHAN[2],TMPREC,70;P2
Mat Read #FCHAN[2],TMPREC,82;P3
PRODRECVDATE = P2[0]
P2[1] = SYSDATE
P3[1] = P3[1] + QTY
Mat Write #FCHAN[2],TMPREC,70;P2
Mat Write #FCHAN[2],TMPREC,82;P3;
TMPKEY$ = TMPKEY2$
TMPKEY$[3,8] = RASLUNALLOCLOC$[1,6]
Search #FCHAN[2],2,3;TMPKEY$,TMPREC,E \ If E > 1 ERROR 11000 ! Gosub ERR_SEARCH
If E
  E = 2 \ Search #FCHAN[2],1,0;TMPKEY$,TMPREC,E
  If E ERROR 11000 ! Gosub ERR_SEARCH
  TMPKEY$ = TMPKEY2$[21,42],TMPKEY2$[1,2],RASLUNALLOCLOC$[1,6],TMPKEY2$[9,20]
  Search #FCHAN[2],4,1;TMPKEY$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
  TMPKEY$ = TMPKEY2$[9,20],TMPKEY2$[1,2],RASLUNALLOCLOC$[1,6],TMPKEY2$[21,42]
  Search #FCHAN[2],4,2;TMPKEY$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
  TMPKEY$ = TMPKEY2$
  TMPKEY$[3,8] = RASLUNALLOCLOC$[1,6]
  Search #FCHAN[2],4,3;TMPKEY$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
  TMPKEY$ = TMPKEY2$[9,20],TMPKEY2$[1,2],TMPKEY2$[21,42],RASLUNALLOCLOC$[1,6]
  Search #FCHAN[2],4,4;TMPKEY$,TMPREC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
  P0$ = " ",P0$
  P0$[1,12] = PROD$[1,12]
  P0$[13,24] = LOT$[1,12]
  P0$[25,41] = "RASL: LINE EDIT"
  Write #FCHAN[2],TMPREC;P0$
  P1[0] = WH \ P1[1] = 3
  Mat Write #FCHAN[2],TMPREC,66;P1
  P2[0] = SYSDATE \ P2[1] = 0 \ P2[2] = 1
  Mat Write #FCHAN[2],TMPREC,70;P2
  P3[0] = QTY \ P3[1] = 0 \ P3[2] = 0 \ P3[3] = 0 \ P3[4] = 0
  Mat Write #FCHAN[2],TMPREC,82;P3
  Mat Write #FCHAN[2],TMPREC,114;RASLUNALLOCLOC$[1,6]
  Write #FCHAN[2],TMPREC,120;P3[1];
Else 
  Mat Read #FCHAN[2],TMPREC,70;P2
  Mat Read #FCHAN[2],TMPREC,82;P3
  If P3[0] - P3[1] = 0
    P2[0] = PRODRECVDATE
  Else 
    JULDATE[0] = 0;JULDATE[1] = 0
    SCRATCH$ = PRODRECVDATE Using "&&&&&&"
    !If Err 0 Let JULDATE[0] = -999999
    Call DateToJulian(1,SCRATCH$,scratch$,E)
    If e let JULDATE[0]=-999999 ! If Err 0 Gosub ERR_TRAP
    If Not(JULDATE[0]) Let JULDATE[0] = SCRATCH$
    SCRATCH$ = P2[0] Using "&&&&&&"
    !If Err 0 Let JULDATE[1] = -999999
    Call DateToJulian(1,SCRATCH$,SCRATCH$,e)
    If e let JULDATE[1]=-999999 ! If Err 0 Gosub ERR_TRAP
    If Not(JULDATE[1]) Let JULDATE[1] = SCRATCH$
    If JULDATE[0] = -99999 !* err in recv date in orig loc.
      If JULDATE[1] = -99999 Let P2[0] = SYSDATE
    Else 
      If JULDATE[1] = -99999
        P2[0] = PRODRECVDATE
      Else 
        If JULDATE[0] < JULDATE[1] Let P2[0] = PRODRECVDATE
      End If 
    End If 
  End If 
  P2[0] = SYSDATE
  P2[2] = P2[2] + 1
  P3[0] = P3[0] + QTY
  Mat Write #FCHAN[2],TMPREC,70;P2
  Mat Write #FCHAN[2],TMPREC,82;P3;
End If 
Return 
Rem {begin src/inc/rtn.getchan.s}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
For SCR = CHNL To 1 Step -1
  CHNL = SCR
  Gosub CHNLFREE
  If CHNLFREE
    SCR = 1
  Else 
    CHNL = 0
  End If 
Next SCR
Return 
CHNLFREE: Rem check to see if a channel is being used
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
Try
	CHNLSCR = Chf(CHNL)
	!If Err 0 Gosub ERR_TRAP ! ERR_ESCAPE
Else
	Let CHNLFREE = 49 ! Spc(8)
End TRY
! If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
END_CHNLFREE: Rem
Return 
Rem {end rtn.getchan.s}
OUTEND: Rem* ba thee, ba thee, ba that's all folks!
Gosub CLOSEFILES
!End 
Rem {begin rtn.error.s}
Else
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet_call.inc"
End try
end
Rem {end rtn.error.s}
