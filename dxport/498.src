! >>> Program 498
!
! description Closed Claim Report
!
! loadsave -w -n 100,10 -o prog/dxport/498.dl4 src/498.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
! 
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY  1, 2001  10:40:09
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx1/sn498.src (univ2) [kag] {09894}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem SN498          Closed Claim Report  (selector)
Rem Author:        UBS    (07/21/1993)
Rem                UNIVERSAL BUSINESS SYSTEMS
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,Time,VerifyDate
!!Option Default Dialect IRIS1
dim 2%,N1[11],1%,N2[4],N1$[80],V9[4],J8,TIME$[22],DATE$[8],CNAME$[30],ITEM_LAB$[10]
If Err 0 Gosub ERR_TRAP
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
Dim Z1$[50],F1$[16],F2$[26],A$[26],K$[130],3%
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],X1,X$[40]
Dim 2%,X2,DT3[1],4%,J1,SCLAIM,ECLAIM
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[100]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="z",EndParam$
dim EndParam2$[12] \ EndParam2$="}",EndParam2$
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If V9[0] = 99 Goto L_900
For J = 2 To 5
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;F1$;
  Open #J,F1$
L_830: Next J
Data "1472","2400","416","-1"
L_900: Rem "============= field inits
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0) !!\ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
V9[4] = 56 \ If J8 Let V9[4] = 20
Mat Read #1,3,0;CNAME$;
Read #1,18,50;ITEM_LAB$;
Read #1,0,100;DATE$;
TIME$ = "" \ Call Time(TIME$) \ TIME$ = TIME$[15]
N1$=" ",N1$
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"498",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
call dxget("SCLAIMS",tmp$) \ SCLAIM = tmp$
call dxget("ECLAIMS",tmp$) \ If tmp$ = "" Let ECLAIM = "999999" Else Let ECLAIM = tmp$
call dxget("SPRODCT",X$) \ X$ = UCase$(X$),Blank$ \ N1$[13,24] = X$
call dxget("EPRODCT",X$) \ X$ = UCase$(X$),EndParam$ \ N1$[25,36] = X$ 
call dxget("SSERIAL",X$) \ X$ = UCase$(X$),Blank$ \ N1$[37,56] = X$
call dxget("ESERIAL",X$) \ X$ = UCase$(X$),EndParam2$ \ N1$[57,76] = X$
call dxget("SVENDOR",tmp$) \ N1[0] = tmp$
call dxget("EVENDOR",tmp$) \ If tmp$ = "" Let N1[1] = 999999 else Let N1[1] = tmp$
call dxget("SDATE",tmp$) \ If tmp$ = "" Let N1[2] = 010170 Else Let N1[2] = tmp$
call dxget("EDATE",tmp$) \ If tmp$ = "" Let N1[3] = 123159 Else Let N1[3] = tmp$
call dxget("SWHSE",tmp$) \ N1[4] = tmp$
call dxget("EWHSE",tmp$) \ If tmp$ = "" Let N1[5] = 99 Else Let N1[5] = tmp$
call dxget("SORT",tmp$) \ N2[0] = tmp$
call dxget("PRINT",tmp$) \ If tmp$ = "D" N2[1] = 1 Else Let N2[1] = 0
!
!validations Claims
If SCLAIM < 0 Or SCLAIM > 999999 Let e$="Invalid starting claims code, must be between 0 and 999999!" \ error 10000
If ECLAIM < SCLAIM Or ECLAIM > 999999 Let e$="Invalid ending claims code, must be between starting claims code and 999999!" \ error 10000
N1$[1,6] = SCLAIM Using "######"
N1$[7,12] = ECLAIM Using "######" 
!
!validations Products
If N1$[25,36] < N1$[13,24] LET  e$ = "Invalid ending product code, must be >= than starting product code!" \ error 10000
!
!validations Serials
If N1$[57,76] < N1$[37,56] LET  e$ = "Invalid ending serials code, must be >= than starting serials code!" \ error 10000
!
!validations vendor
If N1[0] < 0 Or N1[0] > 999999 Let e$="Invalid starting vendor code, must be between 0 and 999999!" \ error 10000
If N1[1] < N1[0] Or N1[1] > 999999 Let e$="Invalid ending vendor code, must be between starting vendor code and 999999!" \ error 10000
!
!validations Warehouse
If N1[4] < 0 Or N1[4] > 99 Let e$="Invalid starting warehouse code, must be between 0 and 99!" \ error 10000
If N1[5] < N1[4] Or N1[5] > 99 Let e$="Invalid ending warehouse code, must be between starting warehouse code and 99!" \ error 10000
!
!validations Starting date
errflag = 0 \ X$ = N1[2] Using "&&&&&&"
tmp1$ = X$[5,6],X$[1,2],X$[3,4] \ N1[2] = tmp1$
X2 = N1[2] \ Gosub L_7820 \ If errflag Let e$ = "!" \ error 10000
N1[2] = X2
!
!validations Ending date
X$ = N1[3] Using "&&&&&&"
tmp1$ = X$[5,6],X$[1,2],X$[3,4] \ N1[3] = tmp1$
X2 = N1[3] \ Gosub L_7820 \ If errflag Let e$ = "!" \ error 10000
N1[3] = X2
!
If N1[3] < N1[2] Let e$ = "Invalid ending date, must be >= than starting date!" \ error 10000
!
!!L_1000: Rem "=================================== get ranges
!!Gosub L_6000
!!L_1010: J5$ = "<CR> FOR FIRST,  E: TO EXIT";J0$ = "1 00062103";J1$ = "      "
!!Gosub L_7000 \ N1$[1,6] = J$
!!If J4$ = "E" Goto OUTEND
!!J5$ = "<CR> FOR LAST" \ J0$ = "1 00063503" \ J1$ = "999999"
!!Gosub L_7000 \ N1$[7,12] = J$
!!If N1$[7,12] < N1$[1,6] Gosub L_1390 \ Goto L_1010
!!L_1040: J5$ = "<CR> FOR FIRST" \ J0$ = "2 00121504" \ J1$ = "            "
!!Gosub L_7000 \ N1$[13,24] = J$
!!J5$ = "<CR> FOR LAST" \ J0$ = "2 00122904" \ J1$ = "zzzzzzzzzzzz"
!!Gosub L_7000 \ N1$[25,36] = J$
!!If N1$[25,36] < N1$[13,24] Gosub L_1390 \ Goto L_1040
!!L_1070: J5$ = "<CR> FOR FIRST" \ J0$ = "2 00201505" \ J1$ = "   "
!!Gosub L_7000 \ N1$[37,56] = J$
!!J5$ = "<CR> FOR LAST" \ J0$ = "2 00203505" \ J1$ = "}}}}"
!!Gosub L_7000 \ N1$[57,76] = J$
!!If N1$[57,76] < N1$[37,56] Gosub L_1390 \ Goto L_1070
!!L_1100: J5$ = "<CR> FOR FIRST" \ J0$ = "3000061906" \ J1 = 0
!!Gosub L_7000 \ N1[0] = J1
!!J5$ = "<CR> FOR LAST" \ J0$ = "3000063306" \ J1 = 999999
!!Gosub L_7000 \ N1[1] = J1
!!If N1[1] < N1[0] Gosub L_1390 \ Goto L_1100
!!L_1130: J5$ = "<CR> FOR EARLIEST" \ J0$ = "5 00081907" \ J1 = 700101
!!Gosub L_7000 \ N1[2] = J1
!!X2 = N1[2] \ Gosub L_7820 \ Goto L_1130
!!N1[2] = X2
!!L_1140: J5$ = "<CR> FOR LATEST" \ J0$ = "5 00083307" \ J1 = 591231
!!Gosub L_7000 \ N1[3] = J1
!!X2 = N1[3] \ Gosub L_7820 \ Goto L_1140
!!N1[3] = X2
!!If N1[3] < N1[2] Gosub L_1390 \ Goto L_1130
!!L_1160: J5$ = "<CR> FOR FIRST" \ J0$ = "3 00022508" \ J1 = 0
!!Gosub L_7000 \ N1[4] = J1
!!J5$ = "<CR> FOR LAST" \ J0$ = "3 00023908" \ J1 = 99
!!Gosub L_7000 \ N1[5] = J1
!!If N1[5] < N1[4] Gosub L_1390 \ Goto L_1160
!!L_1248: J5$ = "CHOOSE THE SORT OPTION DESIRED" \ J0$ = "3 00025710" \ J1 = 1
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!!Gosub L_7000 \ N2[0] = J1
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!!If N2[0] < 1 Or N2[0] > 6 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1248
!!L_1260: J5$ = "ENTER  D: FOR FULL DETAIL OR  S: FOR SUMMARY" \ J0$ = "2 00013715" \ J1$ = "S"
!!Gosub L_7000
!!If J$ <> "D" And J$ <> "S" Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1260
!!N2[1] = 0 \ If J$ = "D" Let N2[1] = 1
!!Goto L_1450
!!L_1390: J7$ = "ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! " \ Gosub L_7600 \ Return 
!!L_1450: Rem "================== all picked
!!Print @10,22;'CL'; \ Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
!!If Z1$ = "R" Goto L_1000
!!If Z1$ <> "P" Goto L_1450
!
! - A$ = Spc(6) \ A$ = A$[2,Len(A$) - 1]
! - Read #1,88,912;F1$;
! - L_1540: 
! - If F1$[Len(F1$)] = " " Let F1$ = F1$[1,Len(F1$) - 1] \ Goto L_1540
! - P2 = 0 \ Let F2$ = F1$ To "*" : P2 !!\ If Not(P2) Gosub ERR_SEARCH
!!Print @0,22;"OPENING SORT FILE, PLEASE WAIT . . . ";'CE';
! - KSIZE = 20
! - F1$[P2] = A$
! - Call FindF(F1$,H1)
! - If Err 0 Rem
! - Close #9 \ If Err 0 Gosub ERR_TRAP
! - If H1 Kill F1$
! - F2$ = "[1:256] ",F1$
! - Build #9,F2$
! - Search #9,0,1;K$,KSIZE,E !!\ If E Gosub ERR_SEARCH
! - L1 = 1000 \ Search #9,0,0;K$,L1,E !!\ If E Gosub ERR_SEARCH
! - If V9[4] > 30 Let J8 = 0 Else Let J8 = 1
!
Chain "prog/dxport/498a.dl4"
chain write CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,N1,N2,N1$,V9,J8,TIME$,DATE$,CNAME$,ITEM_LAB$
!
!!L_6000: Rem "========================================== screen
!!Print 'CS'
!!Print @0,0;"SN498";@33,0;"CLOSED CLAIM REPORT"
!!Print @17,2;"-STARTING-";@33,2;"-ENDING-";@48,2;"SORT BY:  1> CLAIM NO"
!!Print @1,3;"CLAIMS";@57,3;" 2> PRODUCT"
!!Print @1,4;"PRODUCTS";@57,4;" 3> SERIAL NO"
!!Print @1,5;"SERIAL NOS";@57,5;" 4> VENDOR"
!!Print @1,6;"VENDORS";@57,6;" 5> CLAIM DATE"
!!Print @1,7;"CLAIM DATES";@57,7;" 6> WAREHOUSE"
!!Print @1,8;"WAREHOUSES";
!!Print @49,10;"CHOOSE:"
!!Print @1,15;"PRINT FULL DETAIL OR SUMMARY? (D/S)"
!!Return 
!!L_7000: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
!!J0 = J0$[1,1]
!!J6 = J0$[2,2]
!!J2 = J0$[3,4]
!!J3 = J0$[5,6]
!!J4 = J0$[7,8]
!!J5 = J0$[9,10]
!!If J0 < 3 Let J2$ = " ",J2$
!!If J1$ = "" Let J1$[1,J3] = " ",J1$
!!If J0 <> 3 If J0 <> 4 Goto L_7070
!!If J0 = 3 Let J2$ = "#",J2$
!!If J0 = 4 Let J2$ = "-",J2$
!!J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
!!L_7070: J1$[J3 + 1] = ""
!!If J0 < 3 Goto L_7105
!!If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
!!If J0 = 6 Goto L_7105
!!If J0 <> 5 Goto L_7100
!!J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
!!J1$ = J9$[4,7],J9$[2,3],"  " \ Goto L_7105
!!L_7100: J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
!!If Len(J5$) > Msc(33) - 2 Let J5$[Msc(33) - 2] = ""
!!L_7105: If J5 < Msc(34) - 1 Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
!!Print @J4,J5;'BU';J1$[1,J3]; Tab (J4 + J3);'EU';" "; \ If J0 = 5 Print "  ";
!!Print @J4,J5;'BU'; \ Input Len 16384 + J3;""J4$
!!Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
!!If Len(J4$) <= J3 Goto L_7130
!!J7$ = "TOO LONG !" \ Gosub L_7600 \ Goto L_7105
!!L_7130: J9$ = J4$ \ If Len(J9$) Goto L_7145
!!If J0$[3,4] = "00" Let J9$ = J1$ \ Goto L_7145
!!J7$ = "FIELD MUST BE ENTERED !" \ Gosub L_7600 \ Goto L_7105
!!L_7145: For J8 = 1 To Len(J9$)
!!  If J9$[J8,J8] >= " " If J9$[J8,J8] <= "~" Next J8 \ Goto L_7160
!!J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!" \ Gosub L_7600 \ Goto L_7105
!!L_7160: On J0 Goto L_7165,L_7165,L_7185,L_7185,L_7185,L_7330 \ Stop 
!!L_7165: J$ = J0$[2,2],J$
!!If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
!!If J0 = 2 Let J$[1,Len(J9$)] = J9$
!!Goto L_7345
!!L_7185: J9 = 0;J9[1] = 0 \ For J8 = 1 To Len(J9$)
!!  If J0 = 4 If J8 = 1 If J9$[1,1] = "-" Goto L_7235
!!  If J0 = 4 If J8 = 1 If J9$[1,1] = "+" Goto L_7235
!!  If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto L_7230
!!  If J9$[J8,J8] = " " Goto L_7235
!!  If J8 <> 1 Or Len(J0$) < 11 Goto L_7210
!!  J7$ = "" \ Let J7$ = J0$[10] To J9$[J8,J8] : J7 \ If J7 Goto L_7235
!!L_7210: If J9$[J8,J8] <> "." Goto L_7250
!!  If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto L_7260
!!  If J9 Goto L_7250
!!  J9 = 1
!!L_7230: If J9 Let J9 = J9 + 1
!!  If Not(J9) Let J9[1] = J9[1] + 1
!!L_7235: Next J8
!!If J0 = 5 Goto L_7265
!!If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto L_7260
!!L_7242: If J6 If J9[1] > (J3 - J6 - 1) Let J7$ = "TOO MANY INTEGERS FOR FIELD !" \ Goto L_7260
!!If J0 = 4 If J6 If J9[1] > (J3 - J6 - 2) Let J9[1] = 99 \ Goto L_7242
!!J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto L_7345
!!L_7250: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
!!If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
!!L_7260: Gosub L_7600 \ Goto L_7105
!!L_7265: If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto L_7325
!!J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
!!If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto L_7315
!!If J9[1] < 1 Goto L_7325
!!On J9 Goto L_7290,L_7300,L_7290,L_7285,L_7290,L_7285
!!On J9 - 6 Goto L_7290,L_7290,L_7285,L_7290,L_7285,L_7290
!!Goto L_7325
!!L_7285: If J9[1] > 30 Goto L_7325
!!L_7290: If J9[1] > 31 Goto L_7325
!!Goto L_7315
!!L_7300: If J9[1] > 29 Goto L_7325
!!If Not(Fra(J9[2] / 4)) Goto L_7315
!!If J9[1] > 28 Goto L_7325
!!L_7315: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub L_7700
!!J$ = X$ \ J3 = 8 \ Goto L_7345
!!L_7325: J7$ = "INVALID DATE !" \ Gosub L_7600 \ Goto L_7105
!!L_7330: If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto L_7345
!!If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto L_7345
!!J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !" \ Gosub L_7600 \ Goto L_7105
!!L_7345: J$[J3 + 1] = "" \ Print @J4,J5;J$;" "; \ Return 
!!L_7600: If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
!!Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
!!Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
!!Print @0,Msc(34) - 1;'CL'; \ Return 
!
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
!!DT3[0] = X2;FLAG = 1;X$ = " "
!!Call "JULIANUTIL",DT3[],X$,FLAG
!!Return 
!!Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
!!X2 = X$[1,6] \ Return 
!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Let errflag = 1 \ Return 
X2 = X$[1,5] \ Return !!1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
!
!!X$ = X2 Using "&&&&"
!!DT3[0] = X$[1,2];DT3[1] = X$[3,4]
!!If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
!!If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
!!X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
!!X2 = X$[1,6] \ Return 
OUTEND: Rem EXIT PROGRAM
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
!
Call dxclose()
End
!
!!Print 'CS'
!!Chain "MX000C"
!!Close 
!!Chain "MX000"
!!Stop 
!!Stop 
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End 
!
Rem {end rtn.error.s}
