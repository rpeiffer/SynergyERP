!    dfgeneral.lib - general library to maintain/display demo file definitions subsystem files
!
!    "dfgeneral.bas" 1.0 8/25/2006
!
! loadsave -w -n 100,10 -o dfgeneral.lib src/dfgeneral.src
!
!    All rights reserved.    (C) Copyright 2006 by:
!    Dynamic Concepts, Inc.   Aliso Viejo, California USA
!
!    "@(#) dffiledef.bas 1.0@(#)"
!
!
!This source code is free to use and duplicate with purchase of dynamicXport
!license
!
declare intrinsic function findchannel,crc32,callstat$,encfnm$,fmtof,dateusing$
declare intrinsic sub dxget,dxset,dxclose,dxsave,bytecopy
!
declare external sub dfsuberr
declare external function builddir
!
!  List of Subs and Functions (S = Sub, F = Function)
!    F  GetProgramPath$
!    S  ReadSystemFile
!    S  OpenFiles
!    S  dfmainerr
!    S  dfsuberr
!    F  dfcrc$
!    F  dfGetMsg$
!
include "src/dffiles.bsh"
!
! ----------------------------------------------------
External Function GetProgramPath$()
!
!    GetProgramPath$() - get program path
!    Synopsis:
!        Path$ = GetProgramPath$()
!        Gets absolute Path to current program
!    Return value:
!        Success: absolute path to current program
!
 !
 Dim Path$[100]
 Dim %1,RetVal,P1,P2
 !
 !???use  msc$(9)  instead ??
 Path$ = EncFnm$(Msc$(1),Msc$(4))
 P1 = Pos(Path$, = "/",-1)       ! Unix
 P2 = Pos(Path$, = "\\",-1)      ! Windows
 If P2 > P1 Let P1 = P2
 Path$ = Path$[1,P1]
End Function Path$
!
!
external function builddir(dir$)
  !pass directory name
  !will return zero if directory already there
  !will build directory if not there and return nonzero
  tmpchan=findchannel()
  dim tmp$[fmtof(dir$)],tmp2$[fmtof(dir$)]
  tmp$=dir$
  if len(tmp$)>1 if tmp$[len(tmp$)]="/" let tmp$=tmp$[1,len(tmp$)-1] !strip off last / if there
  if tmp$="" exit function 0 !don't try if nothing there
  try
   ropen #tmpchan,tmp$ as "Directory"
   close #tmpchan
  else
   !scan down all dirs and build if needed
   tmp2$=tmp$
   cnt=1\if tmp2$[1,1]="/" let cnt=2
   do
    xpos=pos(tmp2$,="/",1,cnt)
	if xpos=0 exit do
	try build #tmpchan,tmp2$[1,xpos-1] as "Directory" else rem
	try close #tmpchan else rem
	cnt=cnt+1
   loop
   build #tmpchan,tmp$ as "Directory"
   close #tmpchan
   exit function 1
  end try
 end function 0
!
! ----------------------------------------------------
external sub ReadSystemFile(e$,config. as config)
 Dim text$[90],label$[30],value$[60],path$[80],filename$[92],dir$[80]
 !
 try
 path$=getprogrampath$()  !current program path, where dxport resides
 syschan=findchannel()
 filename$=path$,"dfsystem.txt"
 ropen #syschan,filename$
 !
 !
 Try
 Do
  read #syschan;text$
  if text$="" exit do
  if len(text$)>1 and text$[len(text$)]="\15\" let text$=text$[1,len(text$)-1]
  label$=text$ to "=":x
  label$=ucase$(label$)                 
  if x and x<>len(text$) 
  value$=text$[x+1]
  Select Case label$
   Case "FILETYPE"
    config.filetype$=value$
   Case "FILESDIR"
    config.filedir$=value$
   Case "FILEDEFHDR"
    config.filehdr$=value$
   Case "FILEDEFFIELDS"
    config.filefields$=value$
   Case "FILEDEFKEY"
    config.filekey$=value$
   Case "ODBCDIR"
    config.odbcdir$=value$
   Case "CODEDIR"
    config.codedir$=value$
   Case "SRCDIR"
    config.srcdir$=value$
   Case "STRUCTDIR"
    config.structdir$=value$
  End Select
  end if
 Loop
 Else
 End Try
 !
 ! build dirs if not there
 dir$=config.structdir$,"backup"
 if builddir(dir$)  !if this one not there, check the others...otherwise assume all are there
  dir$=config.srcdir$
  x=builddir(dir$)
  dir$=config.codedir$,"backup"
  x=builddir(dir$)
  dir$=config.odbcdir$
  x=builddir(dir$)
 end if
 !
 !
 !
 if config.filetype$="F" let config.drvr$="Foxpro FULL-ISAM"
 if config.filetype$="S" let config.drvr$="Microsoft SQL"
 else
 if spc(8) <> 10000
   call dfsuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !readsystemfile
!
! ----------------------------------------------------
external sub OpenFiles(e$,config. As config,c[])
! opens the data files for page definitions
 try
 dim filename$[93]
 !
 filename$="(rtrim=t) "+config.filedir$+config.filehdr$
 c[0] = findchannel()
 open #c[0],rtrim$(filename$) as config.drvr$ ! hdr definitions file
 Map Record #c[0] As filedefhdr
 Map #c[0],1;"ID"
 Map #c[0],2;"group"
 !
filename$="(rtrim=t) "+config.filedir$+config.filefields$
 c[1] = findchannel()
 open #c[1],rtrim$(filename$)  as config.drvr$ ! field definitions file
 Map Record #c[1] As filedeffields
 Map #c[1],1;"ID"
 !
filename$="(rtrim=t) "+config.filedir$+config.filekey$
 c[2] = findchannel()
 open #c[2],rtrim$(filename$) as config.drvr$ ! key definitions file
 Map Record #c[2] As filedefkey
 Map #c[2],1;"ID"
 !
 else
 
 if spc(8) < 10000
   call dfsuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  if spc(8)=42 let e$=filename$," not found in openfiles in dfgeneral.lib"
  if spc(8)<20000 error 10000 else error 20000
 end try
end sub !openfiles
!
! ----------------------------------------------------
external sub dfmainerr(e$,spc8,buttonlist$[],nextlist$[])
! call from /try/else of main routines (assumes dfsuberr already executed)
! pass spc(8) value, buttonlist and nextlist
! return
 dim optiondir$[60]
 if spc8< 20000  !20000 up don't override e$ or output
  try call dxget("s_view.optiondir",optiondir$) else optiondir$="dxstd/"
  call dxset("output",optiondir$+"msg.html")
 end if
 call dxset("s_msg",e$)
 if len(e$)>3 if e$[1,3]="msg" call dxset("s_msgno",e$[4])
 call dxset("buttonlist",buttonlist$[])  !msg page buttons
 call dxset("nextlist",nextlist$[])      !button functions
 call dxclose()
end sub !dfmainerr
!
! ----------------------------------------------------
external sub dfsuberr(e$,spc8,spc10,msc2$)
! call from try/else of subroutines to populate e$ error string 
! pass spc(8) value, spc(10) value, msc$(2) value
! returns populated e$
   dim errtype$[10]
   e$ = "error ",spc8," ",msc2$," at ",str$(spc10)," in "
   try
   for callstack=1 to 10
     e$=e$,callstat$(callstack,errtype$),":",errtype$,";"
    next callstack
   else
  end try
end sub !dfsuberr
!
! ----------------------------------------------------
external function dfcrc$(e$,a$,...)
! calculates the crc32 value of a data record
! pass the string field of the record and any numeric arrays of the record
! returns to crc32 number of the record (a 10 digit number)
!
 try
  dim 3%
  c=crc32(a$[1,len(a$)])
  do !for each numeric array that exists
   try
    enter a[],...
    x=len(hex$(a))/2 !dim precision
    y=ubound(a[],1) !# of elements in the array (less 1)
    free b?
    dim b?[x*(y+1)]
    call bytecopy(b?,a[]) !convert 1st array to binary
    c=crc32(b?,c)
    free a
   else
    exit do
   end try
  loop
 else
  if spc(8) < 10000
   call dfsuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  if spc(8)<20000 error 10000 else error 20000
 end try
end function str$(c) !crc
!
! ----------------------------------------------------
external function dfGetMsg$(e$,msglabel$,...)
! opens user's text message file and returns text for message # or label
! message file that is opened is defined in user's org's view 
! default is dxmsg.txt 
! (use message #'s 1000-1999 for errors,2000-2999 for descriptive (or label))
! pass msglabel$ the message label or number to return associated message text 
!      chan optional channel # message file is open on
! returns msg$ message text
!
 try
  try enter chan else chan=-1
  !
  dim msg$[80*4],filename$[60]
  !
  if chan=-1
   chan = findchannel()
   call dxget("s_view.messagefile",filename$)
   ropen #chan,filename$ as "text"
  end if
  do
   read #chan;msg$
   if msg$="" exit do
   try
    if p := pos(msg$, = ":") if msglabel$ = msg$[1,p-1]
     msg$ = msg$[p + 1]
     exit do
    end if
   else
   end try
  loop
  if msg$="" let msg$=msglabel$
 else
  if spc(8) < 10000
   call dfsuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  if spc(8)<20000 error 10000 else error 20000
 end try
end function msg$ !getmsg$
!
External Function dfDTconvert$(e$,value$,from$,too$)
  ! converts date in value$   from from$ format to too$ format
  ! returns e$ as error message if value$ is invalid date
  ! currently only MM DD YY YYYY options available in from format
  ! to format can be any DATEUSING$ format
 Try
  dim mask$[40],fromdate$[40],fromformat$[40],newvalue$[40],tmpdate$[8]
  dim 3%,date#,4%
  mask$="&",mask$
  e$="" !no error
  if value$="" or value$="0" exit function ""
  fromdate=value$
  fromdate$=fromdate using mask$[1,len(from$)] !in case no leading 0
  fromformat$=ucase$(from$)
  !arrange it to MMDDYYYY in tmpdate$
		xpos=pos(fromformat$,="M")
		if xpos=0 error 10001
		if xpos+1 > len(fromdate$) error 10000
		tmpdate$=fromdate$[xpos,xpos+1] !mm
		if xpos=0 error 10001
		xpos=pos(fromformat$,="D")
		if xpos+1 > len(fromdate$) error 10000
		tmpdate$=tmpdate$,fromdate$[xpos,xpos+1] !dd
        xpos=pos(fromformat$,="YYYY",-1)
		if xpos
		 if xpos+3 > len(fromdate$) error 10000
		 tmpdate$=tmpdate$,fromdate$[xpos,xpos+3] !yyyy
		else
		 xpos=pos(fromformat$,="YY",-1)
		 if xpos=0 error 10001
		 if xpos+1 > len(fromdate$) error 10000
		 tmpdate$=tmpdate$,"20",fromdate$[xpos,xpos+1] !yy
		 if val(tmpdate$[7,8])>50 let tmpdate$[5,6]="19" !assume
		end if
 mm=tmpdate$[1,2]\dd=tmpdate$[3,4]\yyyy=tmpdate$[5,8]
 try
  date#=dat#(yyyy,mm,dd)  
  newvalue$=dateusing$(date#,too$)
 else
  error 10000
 end try
Else
  if spc(8) = 10000 let e$="Invalid date!" \exit function ""
  if spc(8) = 10001 let e$="Invalid date from mask!"
  if spc(8)<>10000
   call dfsuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000 
 End Try
end function newvalue$ !dfDTconvert$