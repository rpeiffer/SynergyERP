! >>> Program 794a
!
! description FIFO / LIFO Stock Inventory Ledger
!             Detail, sort by Vendor, Category or Both
!
! loadsave -w -n 100,10 -o prog/dxport/794a.dl4 src/794a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN 13, 2006  12:21:57
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/mx77/mx794a.src (univ2) [mary] {36911}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX794A - FIFO/LIFO  STOCK LEDGER CARD IN DETAIL - NO VENDOR/CAT SORT
Rem AUTHOR: EWR   DEC 31, 1983
Rem LAST UPDATE:  03/1997 - FIFO USES JULIAN DATES
!
Declare Intrinsic Sub DateToJulian,InpBuf,String,Time,VerifyDate
! - Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
Dim L1$[56],A$[156],T1$[15]
Dim 1%,L1[3]
Dim 3%,CQTY[3],VQTY[3]
Dim 3%,T9,L2[4],QTY[3]
Dim 2%,CAT[4],VEND[4],DATEX[1],WHSE,OPROD$[12],NPROD$[12],PROD1$[12],PROD2$[12]
Dim VNAME$[30]
Dim PK$[12],K9$[60],S1$[24]
Dim 2%,B[24],D3[1],JDATE[1]
Dim SUNIT$[4],1%,PFU1[20]
Dim X$[10]
Dim 1%,FL1[2],FL1$[80],2%,FL2[3],3%,FL3[8]
Dim 1%,FT1[3],FT1$[72],2%,FT2[3],3%,FT3[3]
Dim 2%,FIFL,P60$[50],FLT$[50],3%,FQ9[2],FQTY,R[23],FLK$[50]
Dim FTK$[50],P61$[256]
Dim J$[40],J0$[10],J1$[40],J2$[20]
Dim 1%,F,X1,2%,X2,3%,J,X3
Dim U9$[30],P$[8]
Dim T9$[26]
Dim U8$[131]
Dim U5$[50],D8$[8],K1$[50],K2$[20],K3$[20]
!
Dim tmp$[1500],tmp1$[400],tmp2$[400],tmp3$[400],tmp4$[400]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="}",EndParam$
!
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
J8 = Spc(5)
J$ = Int((J8 - Int(J8 / 16384) * 16384) / 64) Using "CNTRL# "
For I = 2 To 7
  Read L
  If L = -1 Goto L_855
  Read #1,88,L;J$;
  Ropen #I,J$
L_855: Next I
Read #1,3;U9$;
Data "3008","1792","3024","0","1984","1728"
Mat Read #1,0,100;D8$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
L_900: Rem GET PRINTER TYPE
F = 0
If Err 0 Let F = Spc(8)
P = Chf(0)
L8 = 60
If F Let L8 = 22
F = 0
P = 0 \ L = 90
!!If Err 0 Gosub ERR_ESCAPE
!
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 55 \ If J8 Let J9 = 18
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"794a",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
call dxget("I0",tmp$)	\ if tmp$ = "" Let VEND[0] = 0  else VEND[0] = 99 !!sort by vendor (Y/N)
call dxget("I1",tmp$)	\ VEND[1] = tmp$ !!Starting Vendor Code
call dxget("I2",tmp$)	\ if tmp$ = "" Let VEND[2] = 999999  else Let VEND[2] = tmp$ !!Ending Vendor Code
call dxget("I3",tmp$)	\ if tmp$ = "" Let CAT[0] = 0  else Let CAT[0] = 99 !!sort by product sales category (Y/N) 
call dxget("I4",tmp$)	\ CAT[1] = tmp$ !!Enter Starting Product Category
call dxget("I5",tmp$)	\ if tmp$ = "" Let CAT[2] = 99  else Let CAT[2] = tmp$ !!Enter Ending Product Category
call dxget("I6",PROD1$)	\ PROD1$ = PROD1$, Blank$ !!Enter Starting Product Code
call dxget("I7",PROD2$)	\ PROD2$ = PROD2$, EndParam$ !!Enter Ending Product Code
call dxget("I8",tmp$)	\ DATEX[0] = tmp$  !!Enter Starting Date (MMDDYY)
call dxget("I9",tmp$)	\ if tmp$ = "" Let DATEX[1] = 999999 else Let DATEX[1] = tmp$  !!Enter ending Date (MMDDYY)
call dxget("I10",tmp$)	\ WHSE = tmp$  !!Enter Warehouse #
!
if VEND[0] = 0 let VEND[1] = 0 \ VEND[2] = 999999 ! no vendor sort
if VEND[1] < 0 OR VEND[1] > 999999 LET e$ = "Invalid starting vendor code, must be between 0 and 999999!" \ error 10000
if VEND[2] < VEND[1] or VEND[2] > 999999 Let e$ = "Invalid ending vendor code, must be between starting vendor code and 999999!"   \ error 10000
!
if CAT[0] = 0 let CAT[1] = 0 \ CAT[2] = 99 ! no category sort
if CAT[1] < 0 OR CAT[1] > 99 LET e$ = "Invalid starting product category, must be between 0 and 99!" \ error 10000
if CAT[2] < CAT[1] or CAT[2] > 99 Let e$ = "Invalid ending product category, must be between starting product category and 99!"   \ error 10000
!
if PROD2$ < PROD1$ LET e$ = "Invalid ending product code, must be >= than starting product code!" \ error 10000
!
X$ = DATEX[0] Using "&&&&&&"
tmp1$ = X$[5,6],X$[1,2],X$[3,4]
X$ = tmp1$ \ DATEX[0] = X$
X2 = DATEX[0]
Gosub NUM2DATE
IF DATEX[0]
  Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
  X2 = X$[1,6]
  X$ = X2 Using "&&&&&&"
  Call DateToJulian(1,X$,X$,E) 
  if E or X2 = 0 let JDATE[0] = -1 else let JDATE[0] = X$[1,5]
  If JDATE[0] < 0 let e$="Invalid date, must be <= 123199!" \ error 10000 
ELSE
  JDATE[0] = 0
END IF
!
X$ = DATEX[1] Using "&&&&&&"
tmp1$ = X$[5,6],X$[1,2],X$[3,4]
X$ = tmp1$ \DATEX[1] = X$
IF DATEX[1] = 999999 
	JDATE[1] = 36525
else
	X2 = DATEX[1]
	Gosub NUM2DATE
	Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
	X2 = X$[1,6]
	X$ = X2 Using "&&&&&&"
	Call DateToJulian(1,X$,X$,E)
	if E or X2 = 0 let JDATE[1] = -1 else let JDATE[1] = X$[1,5]
	If JDATE[1] < JDATE[0] let e$ = "Invalid ending date, must be between starting date and 123199!" \ error 10000
END IF
!
If WHSE < 0 Or WHSE > 99 let e$ = "Invalid warehouse, must be between 0 and 99!" \ error 10000
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
!
!!If P60$[9,9] = "F" Print @0,0;'CS'; Tab 20;"FIFO STOCK INVENTORY LEDGER IN DETAIL";
!If P60$[9,9] = "L" Print @0,0;'CS'; Tab 20;"LIFO STOCK INVENTORY LEDGER IN DETAIL";
!!L_1010: 
!!Print @0,2;'CL';"SORT BY VENDOR (Y/N) OR 'E' TO END "; \ Input ""J2$
!!If J2$ = "E" Goto OUTEND
!!If J2$ = "N" Let VEND[0] = 0 \ Goto L_1100
!!If J2$ <> "Y" Goto L_1010
!!L_1030: VEND[0] = 99 \ VEND[1] = 0 \ VEND[2] = 999999
!!Print @0,2;'CE';"Enter Starting Vendor Code, <CR> for all, 'E' to end: ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1100
!!VEND[1] = J2$
!!Print @0,3;'CE';"Enter Ending Vendor Code, <CR> for last, 'E' to end : ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1075
!!VEND[2] = J2$
!!L_1075: If VEND[2] >= VEND[1] Goto L_1100
!!Print @0,23;'CL RB';"Ending Vendor Code must be greater than Starting Vendor Code";
!!Signal 3,30
!!Goto L_1030
!!L_1100: 
!!Print @0,6;'CE';"SORT BY PRODUCT SALES CATEGORY (Y/N) OR 'E' TO END ";
!!Input ""J2$
!!If J2$ = "E" Goto OUTEND
!!If J2$ = "N" Let CAT = 0 \ Goto L_1200
!!If J2$ <> "Y" Goto L_1100
!!L_1125: CAT[0] = 99 \ CAT[1] = 0 \ CAT[2] = 99
!!Print @0,6;'CE';"Enter Starting Product Category, <CR> for all, 'E' to end: ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1200
!!CAT[1] = J2$
!!Print @0,7;'CE';"Enter Ending Product Category, <CR> for last, 'E' to end : ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1175
!!CAT[2] = J2$
!!L_1175: If CAT[2] >= CAT[1] Goto L_1200
!!Print @0,23;'CL RB';"Ending Category must be greater than Starting Category";
!!Signal 3,30 \ Goto L_1125
!!L_1200: PROD1$ = " ",PROD1$ \ PROD2$ = "}",PROD2$
!!! - If Not(CAT[0]) And Not(VEND[0]) Chain "MX794A1"
!!Print @0,10;'CE';"Enter Starting Product Code, <CR> for all, 'E' to end: ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1300
!!PROD1$ = J2$
!!Print @0,11;'CE';"Enter Ending Product Code, <CR> for last, 'E' to end : ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1250
!!PROD2$ = J2$
!!L_1250: If PROD2$ >= PROD1$ Goto L_1300
!!Print @0,23;'CL RB';"Ending Product Code must be greater than Starting Product";
!!Signal 3,30
!!Goto L_1200
!!L_1300: Rem ENTER DATE
!!DATEX[0] = 0;JDATE[0] = 0;DATEX[1] = 999999;JDATE[1] = 36525
!!L_1310: Print @0,14;'CE';"Enter Starting Date (MMDDYY),<CR> for all, 'E' to end: ";
!!Input ""J2$
!!If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1400
!!If Len(J2$) <> 6 Goto L_1310
!!X2 = J2$;J2$ = X2 Using "&&&&&&"
!!J0$ = J2$[5,6],J2$[1,4] \ DATEX[0] = J0$[1,6]
!!X2 = DATEX[0] \ Gosub L_7820 \ Goto L_1300
!!JDATE[0] = X2
!!L_1340: Print @0,15;'CL';"Enter Ending Date (MMDDYY), <CR> for last, 'E' to end: ";
!!Input ""J2$ \ J0$ = J2$[5,6],J2$[1,4]
!!If J2$ = "" Goto L_1370
!!If J2$ = "E" Goto OUTEND
!!If Len(J2$) <> 6 Goto L_1340
!!X2 = J2$;J2$ = X2 Using "&&&&&&"
!!J0$ = J2$[5,6],J2$[1,4] \ DATE[1] = J0$[1,6]
!!X2 = DATE[1] \ Gosub L_7820 \ Goto L_1340
!!JDATE[1] = X2
!!L_1370: If JDATE[1] >= JDATE[0] Goto L_1400
!!Print @0,23;'CL RB';"Ending Date must be greater than Starting Date";
!!Signal 3,30 \ Goto L_1300
!!L_1400: Rem ENTER WAREHOUSE
!!WHSE = 0
!!L_1405: Print @0,18;'CL';"Enter Warehouse #, <CR> for all, 'E' to end: ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!If J2$ = "" Goto L_1500
!!WHSE = J2$ \ If WHSE < 0 Goto L_1405
!!If WHSE > 99 Goto L_1405
!
if j8 
  If VEND[0]
    tmp$ = "VENDOR CODE",fdel$
    tmp$ = tmp$,"VENDOR NAME",fdel$
    IF CAT Let tmp$ = tmp$,"CATEGORY",fdel$,"CAREGORY CODE",fdel$
    tmp$ = tmp$,"PRODUCT CODE",fdel$
  else
    IF CAT 
      tmp$ = "CATEGORY",fdel$,"CAREGORY CODE",fdel$
	  tmp$ = tmp$,"PRODUCT CODE",fdel$
    else 
	  tmp$ = "PRODUCT CODE",fdel$
    end if
  end if
  tmp$ = tmp$,"DESCRIPTION 1",fdel$
  tmp$ = tmp$,"DESCRIPTION 2",fdel$
  tmp$ = tmp$,"TRANS#",fdel$
  tmp$ = tmp$,"DATE",fdel$
  tmp$ = tmp$,"SOURCE",fdel$
  tmp$ = tmp$,"COMMENT",fdel$
  tmp$ = tmp$,"WH",fdel$
  tmp$ = tmp$,"TRANS TYPE",fdel$
  tmp$ = tmp$,"U/M",fdel$
  tmp$ = tmp$,"BEG BAL",fdel$
  tmp$ = tmp$,"QTY IN",fdel$
  tmp$ = tmp$,"QTY OUT",fdel$
  tmp$ = tmp$,"TOTAL",fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
tmp1$ = "" \ tmp3$ = "" \ tmp4$ = ""
!
L_1500: Rem
!!Print @0,23;'CL';"SORTING...PLEASE WAIT....";
K9$ = " ",K9$
L_1610: 
Search #9,3,1;K9$,R[9],E
If E = 2 Goto L_1705
Search #9,5,1;K9$,R[9],E
If E Let e$ = "syserrorfile 794a sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
!!If E Gosub ERR_SEARCH
Goto L_1610
!!Print @0,23;'CL';"SORTING....PLEASE WAIT....";
L_1705: Rem
FLK$ = " ",FLK$ \ FLK$[1,Len(PROD1$)] = PROD1$
L_1750: 
Search #2,3,1;FLK$,R[2],E 
If E = 2 Goto L_1990
If FLK$[1,Len(PROD2$)] > PROD2$ Goto L_1990
Gosub L_8000
If WHSE If WHSE <> FL1[0] Goto L_1750
If CAT[0] = 0 And VEND[0] = 0 Goto L_1900
PK$ = " ",PK$ \ PK$[1,12] = FLK$[1,12]
Search #3,2,1;PK$,R[3],E
If E = 1 Goto L_1750
Mat Read #3,R[3],156;B;
If CAT If B[11] < CAT[1] Goto L_1750
If CAT If B[11] > CAT[2] Goto L_1750
If VEND If B[24] < VEND[1] Goto L_1750
If VEND If B[24] > VEND[2] Goto L_1750
L_1900: Rem SORT FOR DETAIL & TRANSACTION CODE
FTK$ = " ",FTK$ \ FTK$[1,6] = R[2] Using "######"
L_1910: 
Search #4,3,1;FTK$,R[4],E 
If E = 2 Goto L_1750
Gosub L_8100
If FT2[0] <> R[2] Goto L_1750
If FT2[2] > JDATE[1] Goto L_1910
If FT1[0] = 66 Goto L_1910
K9$ = " ",K9$
If VEND Let K9$[1,6] = B[24] Using "######"
If CAT Let K9$[7,8] = B[11] Using "##"
K9$[9,20] = FT1$[1,12]
K9$[23,28] = FT2[2] Using "######"
K9$[29,36] = R[4] Using "########"
R[9] = R[4]
Search #9,4,1;K9$,R[9],E !!\ If E Gosub ERR_SEARCH
If E Let e$ = "syserrorfile 794a sortfile mode (m)=4 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
Goto L_1910
!
L_1990: 
For X = 0 To 3 \ QTY[X] = 0 \ CQTY[X] = 0 \ VQTY[X] = 0 \ Next X
OPROD$ = " ",OPROD$
K9$ = " ",K9$ \ CAT[3] = 99 \ VEND[3] = 999999
L_2000: 
Search #9,3,1;K9$,R[9],E 
if E = 2 Goto L_9100
If Not(VEND[0]) Goto L_2030
VEND[4] = K9$[1,6] \ If VEND[4] = VEND[3] Goto L_2030
Gosub L_4200 !!VENDOR TOTALS
CAT[3] = K9$[7,8]
Gosub L_3000 !!VENDOR
L_2030: VEND[3] = VEND[4]
If Not(CAT) Goto L_2060
CAT[4] = K9$[7,8] \ If CAT[4] = CAT[3] Goto L_2060
Gosub L_4100 !!CATEGORY TOTALS
CAT[3] = CAT[4]
Gosub L_3100 !!CATEGORY
L_2060: CAT[3] = CAT[4]
NPROD$ = K9$[9,21] \ If OPROD$ <> NPROD$ Gosub L_3300 !!PRODUCT
R[4] = R[9] \ Gosub L_8100
If FT2[2] < JDATE[0] Goto L_2000
If FT3[0] >= 0 Let QTY[1] = FT3[0]
If FT3[0] < 0 Let QTY[2] = FT3[0]
Gosub L_5800
Gosub L_5000
Gosub L_2900
Goto L_2000
!
L_2900: Rem TOTALS CALC
For X = 1 To 2
  If VEND Let VQTY[X] = VQTY[X] + QTY[X]
  If CAT Let CQTY[X] = CQTY[X] + QTY[X]
  QTY[X] = 0
Next X
Return 
!
L_3000: Rem VENDOR CODE LOOKUP
L = 99

K1$[1,6] = VEND[4] Using "######"
Search #5,2,1;K1$,R[5],E
If E VNAME$ = "NOT ON FILE!!!!"
if E=0Mat Read #5,R[5],0;VNAME$;
Gosub L_5800
if j8 
  tmp1$ = VEND[4] Using "######",fdel$,rtrim$(VNAME$),fdel$
  If CAT Goto L_3115
  return
end if
Print #0;"" \ L = L + 1
Print #0; Using "######";"VENDOR: ";VEND[4];"  ";VNAME$;
If CAT Goto L_3115
Print #0;""
Return 
!
L_3100: Rem PRINT CAT TOTALS
Gosub L_5800
if not(j8) Print #0;" "
L = L + 1
L_3115: S1$ = "INVALID CATEGORY"
If CAT[3] > 0 And CAT[3] < 100 Mat Read #6,CAT[3],0;S1$;
if j8 
  tmp3$ = CAT[3] Using "##",fdel$,rtrim$(S1$),fdel$
  return
end if
Print #0; Using "##"; Tab 50;"CATEGORY: ";CAT[3];"  ";S1$ 
Return 
!
L_3300: Rem LOOK UP PRODUCT
QTY[3] = 0
K1$ = " ",K1$ \ K1$[1,12] = NPROD$
A$ = " ",A$ \ A$[9,38] = "**** PRODUCT NOT ON FILE *****"
Search #3,2,1;K1$,R[3],E \ If E = 1 Goto L_3360
!!If E Gosub ERR_SEARCH
Mat Read #3,R[3],0;A$;
Mat Read #3,R[3],512;PFU1;
Gosub L_6000
If VEND Let VQTY[0] = VQTY[0] + QTY[0]
If CAT Let CQTY[0] = CQTY[0] + QTY[0]
QTY[3] = QTY[0]
L_3360: 
if not(j8) Print #0;"" \ L = L + 1
Gosub L_5800
if j8 
  tmp4$ = tmp1$,tmp3$,rtrim$(K1$[1,12]),fdel$,rtrim$(A$[9,37]),fdel$,rtrim$(A$[63,90]),fdel$
  tmp2$ = tmp4$,"",fdel$,"",fdel$,"",fdel$
  tmp2$ = tmp2$,"",fdel$,"",fdel$,"",fdel$
  Gosub L_6000
  GOSUB L_5050
  OPROD$ = NPROD$
  QTY[0] = 0
  return
end if
Print #0;K1$[1,12];" ";A$[9,37];" ";A$[63,90];
Gosub L_6000
Gosub L_5051
OPROD$ = NPROD$
QTY[0] = 0
Return 
!
Gosub L_5800
if J8 return ! dx xml
!
Print #0;"\15\ ** END **"
If L8 < 30 Print #0;"\15\\15\"
L = 90
Return 
!
L_4100: Rem PRINT CATEGORY TOTALS
If Not(CAT[0]) Return 
If Not(CQTY[0]) And Not(CQTY[1]) And Not(CQTY[2]) Return 
U8$ = "-",U8$
!
if j8 goto ExitPrintCatTotals
!
Gosub L_5800
Print #0;U8$[1,131]
Gosub L_5800
Print #0; Using "######"; Tab 5;"TOTAL FOR CATEGORY: ";CAT[3];" ";S1$[1,24];
Print #0; Using "---------.##"; Tab 76;CQTY[0];
Print #0; Using "########.##"; Tab 89;CQTY[1];
Print #0; Using "########.##"; Tab 101;Abs(CQTY[2]);
Print #0; Using "----------#.##"; Tab 114;(CQTY[0] + CQTY[1] + CQTY[2])
Print #0;U8$[1,131] \ L = L + 1
!
ExitPrintCatTotals:
For X = 0 To 3 \ CQTY[X] = 0 \ Next X
QTY[3] = 0 \ QTY = 0 \ OTRAN = 0
Return 
!
L_4200: Rem PRINT VENDOR TOTALS
Gosub L_4100
If Not(VEND[0]) Return 
If Not(VQTY[0]) And Not(VQTY[1]) And Not(VQTY[2]) Return 
!
if j8 goto ExitVendorTotals
!
U8$ = "=",U8$
Gosub L_5800
If CAT Goto L_4220
Print #0;U8$[1,131]
Gosub L_5800
L_4220:
Print #0; Using "######"; Tab 5;"TOTAL FOR VENDOR: ";VEND[3];" ";VNAME$[1,30];
Print #0; Using "---------.##"; Tab 76;VQTY[0];
Print #0; Using "########.##"; Tab 89;VQTY[1];
Print #0; Using "########.##"; Tab 101;Abs(VQTY[2]);
Print #0; Using "----------#.##"; Tab 114;(VQTY[0] + VQTY[1] + VQTY[2])
Print #0;U8$[1,131] \ L = L + 1
!
ExitVendorTotals:
For X = 0 To 3 \ VQTY[X] = 0 \ Next X
QTY = 0 \ QTY[3] = 0 \ OTRAN = 0
Return 
!
L_4300: Rem READ TC
J = L1 - 1
Read #1,108,J * 15;T1$[1,15];
Return 
!
L_5000: Rem PRINT LINE FOR SUMMARY
if j8
  tmp2$ = tmp4$
  tmp2$ = tmp2$, FT2[0] Using "######",fdel$
  X2 = FT2[2] \ Gosub L_7770 \ P$ = X$
  tmp2$ = tmp2$, P$[1,8],fdel$
  tmp2$ = tmp2$, rtrim$(FT1$[41,52]),fdel$
  tmp2$ = tmp2$, rtrim$(FT1$[53,72]),fdel$
  If Not(WHSE) Let tmp2$ = tmp2$, FT1[1] Using "##",fdel$ Else Let tmp2$ = tmp2$, "",fdel$
    L1 = FT1[0] \ Gosub L_4300
    tmp2$ = tmp2$, rtrim$(T1$[1,12]),fdel$
    L_5050: SUNIT$ = " ",SUNIT$
    If A$[127,127] = "Y" And P61$[73,73] = "Y"
    SUNIT$[1,2] = "LB"
  Else 
    If PFU1[0] > 0 Mat Read #7,PFU1[0],10;SUNIT$;
    If PFU1[0] = -1 Let SUNIT$ = "CWT "
    If PFU1[0] = -2 Let SUNIT$ = "LOT "
    If PFU1[0] = -3 Let SUNIT$ = "LB  "
  End If 
  tmp$ = tmp2$, SUNIT$[1,4],fdel$
  If QTY[0] Let tmp$ = tmp$, QTY[0] Using "---------.##",fdel$ else let tmp$ = tmp$,"",fdel$
  tmp$ = tmp$, QTY[1] Using "########.##",fdel$
  tmp$ = tmp$, Abs(QTY[2]) Using "########.##",fdel$
  QTY[3] = QTY[3] + (QTY[1] + QTY[2])
  tmp$ = tmp$, QTY[3] Using "----------#.##",fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
!
Print #0; Using "######";FT2[0];
X2 = FT2[2] \ Gosub L_7770 \ P$ = X$
Print #0; Tab 7;P$[1,8];
Print #0; Tab 17;FT1$[41,52];
Print #0; Tab 30;FT1$[53,72];
If Not(WHSE) Print #0; Using "##"; Tab 53;FT1[1];
L1 = FT1[0] \ Gosub L_4300
Print #0; Tab 57;T1$[1,12];
L_5051: SUNIT$ = " ",SUNIT$
If A$[127,127] = "Y" And P61$[73,73] = "Y"
  SUNIT$[1,2] = "LB"
Else 
  If PFU1[0] > 0 Mat Read #7,PFU1[0],10;SUNIT$;
  If PFU1[0] = -1 Let SUNIT$ = "CWT "
  If PFU1[0] = -2 Let SUNIT$ = "LOT "
  If PFU1[0] = -3 Let SUNIT$ = "LB  "
End If 
Print #0; Tab 71;SUNIT$[1,4];
If QTY[0] Print #0; Using "---------.##"; Tab 76;QTY[0];
Print #0; Using "########.##"; Tab 89;QTY[1];
Print #0; Using "########.##"; Tab 101;Abs(QTY[2]);
QTY[3] = QTY[3] + (QTY[1] + QTY[2])
Print #0; Using "----------#.##"; Tab 114;QTY[3];
Print #0;""
Return 
!
L_5800: 
if J8 return
!
L = L + 1
If L < L8 Return 
If P = 0 Goto L_5825
!!If L8 = 22 Print @0,23;'CL';"PRESS <CR> TO CONTINUE "; \ Input ""X$
!!If L8 = 22 Print 'CS';
L_5825: 
If P Print #0;"\14\";
T9$ = "" \ Call Time(T9$)
Print #0;"\15\ - 794A - ";T9$;
Print #0; Tab (Int(66 - Len(U9$) / 2));U9$
P = P + 1
Print #0; Tab 10;"DATE: ";D8$;
If P60$[9,9] = "F" Print #0; Tab 30;"F I F O   S T O C K   T R A N S A C T I O N   L E D G E R   D E T A I L";
If P60$[9,9] = "L" Print #0; Tab 30;"L I F O   S T O C K   T R A N S A C T I O N   L E D G E R   D E T A I L";
Print #0; Tab 110;"PAGE";P
If WHSE Print #0; Using "##"; Tab 5;"FOR WAREHOUSE: ";WHSE;
If Not(WHSE) Print #0; Tab 5;"FOR ALL WAREHOUSES";
X2 = DATEX[0] \ Gosub L_8900
Print #0; Tab 38;"FOR THE PERIOD BEGINNING ";P$[1,8];" THRU ";
X2 = DATEX[1] \ Gosub L_8900
Print #0;P$[1,8]
Print #0;" "
Print #0;"TRANS#"; Tab 7;"DATE"; Tab 17;"SOURCE"; Tab 30;"COMMENT";
If Not(WHSE) Print #0; Tab 53;"WH";
Print #0; Tab 57;"TRANS TYPE"; Tab 71;"U/M";
Print #0; Tab 82;"BEG BAL"; Tab 93;"QTY IN"; Tab 105;"QTY OUT";
Print #0; Tab 123;"TOTAL";
Print #0;""
L = 8 \ Return 
Print #0;""
L = 8
Return 
!
L_6000: Rem PRODUCT BEGINNING BALANCE
For X = 0 To 2 \ QTY[X] = 0 \ Next X
FLK$ = " ",FLK$ \ FLK$[1,12] = NPROD$[1,12]
FLK$[13,14] = WHSE Using "##"
L_6020: 
Search #2,3,1;FLK$,R[2],E 
If E = 2 Goto L_6090
If FLK$[1,12] <> NPROD$[1,12] Goto L_6090
Gosub L_8000
If WHSE And WHSE <> FL1[0] Goto L_6090
FTK$ = " ",FTK$ \ FTK$[1,6] = R[2] Using "######"
L_6055: 
Search #4,3,1;FTK$,R[4],E 
If E = 2 Goto L_6020
Gosub L_8100
If FT2[0] <> R[2] Goto L_6020
If FT2[2] < JDATE[0] Let QTY[0] = QTY[0] + FT3[0]
Goto L_6055
L_6090: Return 
!
NUM2DATE:
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
!
L_7770: Rem DATE JULIAN X2 TO X$
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&";X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6] \ Return 
!
L_8000: Rem READ FIFOLOT
Mat Read #2,R[2],0;FL1;
Mat Read #2,R[2],6;FL1$
Mat Read #2,R[2],86;FL2;
Mat Read #2,R[2],102;FL3;
Return 
!
L_8100: Rem READ FIFOTRANS FILE
Mat Read #4,R[4],0;FT1$;
Mat Read #4,R[4],72;FT1;
Mat Read #4,R[4],80;FT2;
Mat Read #4,R[4],96;FT3;
Return 
!
L_8900: Rem PUT DATE FROM X2 INTO P$
U5$ = X2 Using "&&&&&&&"
If Not(X2) Let U5$ = " 000000"
P$[1,2] = U5$[4,5]
P$[3,3] = "/"
P$[4,5] = U5$[6,7]
P$[6,6] = "/"
P$[7,8] = U5$[2,3]
Return 
!
L_9100: Rem END OF THIS RANGE
Gosub L_4200
!!If L8 = 22 Print @0,23;'CL';"PRESS <CR> TO CONTINUE "; \ Input ""X$
!!Goto L_900
!!End
!
OUTEND: Rem EXIT ROUTINE
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
try call dxclose() else rem
End 
!
!!Print 'CS'
!!Chain "MX000C"
!!Stop 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
