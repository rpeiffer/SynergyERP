! --- serp940.dl4
! Currency Exchange Program 
!
! 1.0 10/28/2009 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp940.dl4 src/serp940.src
!
! Task#61198 - Multi-Currency
! Note: 
! File: 2/Currency#
!fILE CODE: CURRENCY           DESCRIPTION: Currency Exch              LEN: 700  
!------------------------------------------------------------------------------ 
!#  FIELD                 TYPE     VAR          BYTES DISP  COMMENTS            
!                                                                               
! 1 CurrID                S        CURRID          2     0  KEY                 
! 2 Description           C        CurrDesc$      30     2                      
! 3 Currency Code         C        CurrCode$       4    32  Abbrev(USD,CAN,E    
! 4 Last Change Date      D        CurrDate[0]     4    36                      
! 5 Date Changed          D-80     CurrDate[1-80]320    40                      
! 6 UserRec               T        CurrUser[0]     6   360                      
! 7 UserRec               T-80     CurrUser[1-80]480   366                      
! 8 Curr Exchange Rate    T        CurrRate[0]     6   846                      
! 9 Exchange Rate         T-80     CurrRate[1-80]480   852                      
!10 SPARE                 C                       68  1332           


!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus

Include "src/inc/fileprtdefault.inc" ! port defaults 
!
!
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"
!
Declare Intrinsic Sub InpBuf,String,checknumber
Declare Intrinsic Sub FindF
Declare Intrinsic function findchannel
! Option Default Dialect IRIS1
!
! *declare additional external libs & subs & functions
External Lib "ubsfunc.dl4"
Declare External Sub GetPortDefault
Declare External Function openfile



!Declare External Function openfile,pdate$,jdate$,Formatdate2$
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
Dim prt. As prtdefault ! port defaults
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[3200],tmp2$[500],b$[200],blank$[200],msg$[150]
dim UserID$[8],3%,rec_uac,portnum
b$=" ",b$
dim message$[150],webstr$[2000]
blank$=" ",blank$
!
! call dxopen()
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
Call GetPortDefault(e$,intco,UserID$,portnum,rec_uac,prt.)
! If Err 0 Gosub ERR_TRAP
DIM 1%,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],Y,R1,K1
DIM 2%,W,X,X1,K,C9,E,ST[1],S1[8],R[23]
DIM 3%,J1,X2,G1,B[17],o1
DIM J$[50],J0$[15],J1$[50],J2$[20],J4$[50],J5$[70],J7$[40],P60$[50]
DIM J9$[50],U5$[50],F$[16],X$[20],K1$[25],D$[30],G$[36]
dim k$[30]
dim 1%,currid
Dim currdesc$[30],currcode$[4]
Dim 2%,CurrDate[80],sysdate
Dim 3%,CurrUser[80],CurrRate[80]
Dim keycurr$[10],3%,rec_curr
DIM 2%
Dim P9$[50],P60$[50],P61$[256],filename$[50]
dim 3%,tmp3,R2
Dim custom_customer$[30]
dim List$[5000,1000]
! open files, read system flags, etc.


mat read #1,61,0;p61$;
mat read #1,115,60;custom_customer$;
mat read #1,3,172;sysdate;
Custom_customer$=UCase$(Trim$(custom_customer$))
let action1$=Ucase$(Rtrim$(action1$))

if action1$ = "SYSFLAGS"
	let returnstatus=1
	let message$="OK"
	clear list$[]
	list$[0]=bsdel$+"ConditionFlags"+fdel$
	list$[1]="MultiCurrency"+fdel$
	let tmp$="N"
	if p61$[136,136]="Y"
		let tmp$="Y" ! Check avail Option	
		let filename$="2/Currency"+STR$(intco)
		Call FindF(FILENAME$,FOUND)
		if not(found)
			let tmp$="N"
		endif
	endif
	let webstr$=webstr$,tmp$,fdel$
	!if tmp$="N"
	!	let returnstatus=0
	!	let message$="Option Is Not Available "
	!endif
	list$[2]=webstr$
	list$[3]=esdel$
	call AddToStr(e$,rstr$,List$[])
	goto outend:
endif

if action1$ = "DROPLIST" ! list of order types
	let returnstatus=1
	let message$="OK"
	Clear List$[]
	List$[0]=bsdel$,"Currency",fdel$
	List$[1]="CurrID",fdel$,"Description",fdel$
	lIST$[2]="0",Fdel$,"No Currency Exchange Rate",fdel$
	let row=3
	TMP$="N"
	if p61$[136,136]="Y"
		let tmp$="Y" ! Check avail Option	
		let filename$="2/Currency"+STR$(intco)
		Call FindF(FILENAME$,FOUND)
		if not(found)
			let tmp$="N"
		else
			let tmp$="Y"
			ch_curr=findchannel()
			open #ch_curr,filename$
		endif
	endif
	if tmp$="N"
		let returnstatus=0
		let message$="Multi Currency Not Available"
		goto endcurrdrop:
	endif
    let keycurr$=" ",keycurr$
	do
		search #ch_curr,3,1;keycurr$,rec_curr,e
		if e<>0 exit do
		mat read #ch_curr,rec_curr,2;currdesc$;
		list$[row]=keycurr$,fdel$,rtrim$(currdesc$),fdel$
		let row=row+1
	loop
	endcurrdrop: ! 
	List$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
	goto outend:
end if

!
if action1$ = "GETDATA"
	returnstatus=1
	Message$="OK"
	gosub LoadData 
	goto OutEnd:
endif
!
if action1$ = "SUBMITDATA"
	returnstatus=1
	Message$="OK"
	gosub LoadDataAndSave
	if returnstatus<>0
		Message$="Record updated."
	endif
	goto OutEnd:
endif

!if action1$ = "DELETE"
!	gosub DeleteData
!	Message$="Record deleted."
!	goto OutEnd:
!endif

message$="Invalid action"
returnstatus=0
goto OutErr
! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************


!----------------------------------------------------------------------------
! load selected sales order type data (new or existing) into rstr
!----------------------------------------------------------------------------
LoadData: !
	! build table of conditional item flags indicating display of field (or not)
	clear list$[]
	List$[0]=bsdel$+"CurrencyData"+fdel$
	webstr$="CurrID"+fdel$+"Description"+fdel$
	webstr$=webstr$+"CurrCode"+fdel$
	webstr$=webstr$+"ExchangeRate"+fdel$
	list$[1]=webstr$
	let row=2
	call dxget("CURRID", tmp$)
	let r2=tmp$
	if r2<1 or r2>7999
		let returnstatus=0
		let message$="Invalid Currency Id "
		goto endloaddata: ! 
	endif
	
	if p61$[136,136]<>"Y"
		let returnstatus=0
		let message$="Option Not Available"
		goto endloaddata:! 
	endif	
	let filename$="2/Currency"+STR$(intco)
	Call FindF(FILENAME$,FOUND)
	if not(found)
		Let returnstatus=0
		let message$="Option Not Available"
		goto endloaddata: ! 
	endif
    
	ch_curr=findchannel()
	ROPEN #CH_curr,FILENAME$
	let keycurr$=" ",keycurr$
	let keycurr$=r2 using "####"
	search #ch_curr,2,1;keycurr$,rec_curr,e
	if e=1 
		! new record
		let currid=r2
		let currdesc$=" ",currdesc$
		let currcode$=" ",currcode$
		for ctr=0 to 80\let currrate[ctr]=0\next ctr
	else
		if not (e)
			mat read #ch_curr,rec_curr,0;currid;
			mat read #ch_curr,rec_curr,2;currdesc$;
			mat read #ch_curr,rec_curr,32;currcode$;
			mat read #ch_curr,rec_curr,36;currdate;
			mat read #ch_curr,rec_curr,360;curruser;
			mat read #ch_curr,rec_curr,846;currrate;
		else
			let returnstatus=0
			let message$="Error in Getting Data From File "
			goto endloaddata: 
		endif
	endif
	if returnstatus<>0
		webstr$=str$(currid)+fdel$ ! id 
		webstr$=webstr$+rtrim$(currdesc$)+fdel$ ! description
        webstr$=webstr$+rtrim$(currcode$)+fdel$ ! currency code
		webstr$=webstr$+(currrate[0] using "#####.#####")+fdel$ ! currency exchange rate
		list$[row]=webstr$
		let row=row+1
	endif
	Endloaddata: ! 
	list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
	clear list$[]
	List$[0]=bsdel$+"CurrencyHist"+fdel$
	webstr$="Date"+fdel$+"Rate"+fdel$
	list$[1]=webstr$
	let row=2
	If returnstatus<>0
		for ctr=1 to 80
			if currrate[ctr]<>0
				let tmp$=currdate[ctr] using "&&&&&&"
				let webstr$=""
				let webstr$=tmp$[3,4]+"/"+tmp$[5,6]+"/"+tmp$[1,2]+fdel$ ! date
				let webstr$=webstr$+ (currrate[ctr] using "#####.#####")+fdel$ ! currency exchange rate
				let list$[row]=webstr$
				let row=row+1
			endif
		next ctr
	endif
	list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])	
return
!--------------------------------------------------------


!----------------------------------------------------------------------------
! load data from web and save bank code data
!----------------------------------------------------------------------------
LoadDataAndSave: !
	call dxget("CURRID", tmp$)
	let r2=tmp$
	if r2<1 or r2>7999
		let returnstatus=0
		let message$="Invalid Currency Id "
		goto endsavedata:
	endif
	! read data from control file
	if p61$[136,136]<>"Y"
		let returnstatus=0
		let message$="Option Not Available"
		goto endsavedata:
	endif	
	let filename$="2/CURRENCY"+STR$(intco)
	Call FindF(FILENAME$,FOUND)
	if not(found)
		Let returnstatus=0
		let message$="Option Not Available"
		goto endsavedata:
	endif
	ch_CURR=findchannel()
	OPEN #CH_CURR,FILENAME$
	let keycurr$=" ",keycurr$
	let keycurr$=r2 using "####"
	search #ch_curr,2,1;keycurr$,rec_curr,e
	if e>1 
		let returnstatus=0
		let message$="Error in Currency File. SE "+str$(e)
		goto endsavedata:
	else
		if not (e)
			gosub readcurrency:
			call dxget("DELETEFLAG", tmp$)
			if ucase$(rtrim$(tmp$))="Y"
				!if currrate[0]<>0
				!	let returnstatus=0
				!	let message$="May Not Delete, has currency rate already established "
				!	goto endsavedata:
				!else
					search #ch_curr,5,1;keycurr$,rec_curr,e
					if not(e)
						let e=3\search #ch_curr,1,0;keycurr$,rec_curr,e
					endif
					let message$="Deleted"
					goto endsavedata:
				!endif
			endif
			call dxget("DESCRIPTION", tmp$)
			If rtrim$(tmp$)=""
				let returnstatus=0
				let message$="Description Needs to be Entered "
				goto endsavedata:
			endif
			let currdesc$=rtrim$(tmp$)+blank$
			call dxget("EXCHANGERATE", tmp$)
			LET newrate=TMP$
			IF newrate<=0
				let returnstatus=0
				let message$="Invalid Currency Rate Entered "
				goto endsavedata:
			endif
			call dxget("CURRCODE", tmp$)
			let currcode$=rtrim$(ucase$(tmp$))+blank$
			if newrate<>currrate[0]
				for ctr=80 to 1 step -1
					let currrate[ctr]=currrate[ctr-1]
					let currdate[ctr]=currdate[ctr-1]
					let curruser[ctr]=curruser[ctr-1]
				next ctr
				let currrate[0]=newrate
				let curruser[0]=rec_uac
				let currdate[0]=sysdate
			endif
			gosub WriteCurrency
		else
		! e=1 not found
			call dxget("DELETEFLAG", tmp$)
			if ucase$(rtrim$(tmp$))="Y"
					let message$="Deleted"
					goto endsavedata:
			endif

			let currid=r2
			currdesc$=" ",currdesc$
			currcode$=" ",currcode$
			for ctr=0 to 80\currdate[ctr]=0\next  ctr
			for ctr=0 to 80\curruser[ctr]=0\next ctr
			for ctr=0 to 80\currrate[ctr]=0\next ctr
			call dxget("DESCRIPTION", tmp$)
			If rtrim$(tmp$)=""
				let returnstatus=0
				let message$="Description Needs to be Entered "
				goto endsavedata:
			endif
			let currdesc$=rtrim$(tmp$)+blank$
			call dxget("EXCHANGERATE", tmp$)
			LET CURRRATE[0]=TMP$
			IF CURRRATE[0]<=0
				let returnstatus=0
				let message$="Invalid Currency Rate Entered "
				goto endsavedata:
			endif
			call dxget("CURRCODE", tmp$)
			let currcode$=rtrim$(ucase$(tmp$))+blank$
			let keycurr$=currid using "####"
			let e=2\search #ch_curr,1,0;keycurr$,rec_curr,e\if e gosub err_search:
			gosub writecurrency:
			search #ch_curr,4,1;keycurr$,rec_curr,e\if e gosub err_search:
			if e<>0
				let returnstatus=0
				let message$="Error adding Order Type File. SE "+str$(e)
				goto endsavedata:
			endif
			gosub WriteCurrency: !
			

		endif
	endif
	
	
	endsavedata:
Return

!----------------------------------------------------------------------------
! delete selected bank code data
!----------------------------------------------------------------------------
!DeleteData: !
!	LET message$="Delete Option Not Available"
!	returnstatus=0
!Return



!----------------------------------------------------------------------------
! read sales order type data
!----------------------------------------------------------------------------
ReadCurrency: !
mat read #ch_curr,rec_curr,0;currid;
mat read #ch_curr,rec_curr,2;currdesc$;
mat read #ch_curr,rec_curr,32;currcode$;
mat read #ch_curr,rec_curr,40;currdate;
mat read #ch_curr,rec_curr,360;curruser;
mat read #ch_curr,rec_curr,846;currrate;
Return

!----------------------------------------------------------------------------
! write currency data
!----------------------------------------------------------------------------
WriteCurrency: !
mat write #ch_curr,rec_curr,0;currid;
mat write #ch_curr,rec_curr,2;currdesc$;
mat write #ch_curr,rec_curr,32;currcode$;
mat write #ch_curr,rec_curr,40;currdate;
mat write #ch_curr,rec_curr,360;curruser;
mat write #ch_curr,rec_curr,846;currrate;
Return


ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End


OUTEND: Rem EXIT ROUTINE
! ReturnStatus=1
OutErr: ! bypass status=1
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end