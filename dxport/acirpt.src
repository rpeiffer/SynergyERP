! >>> Program Acme Paper Custom Inventory Report
!
! description Product 12 Month
!
! loadsave -w -n 100,10 -o prog/dxport/acirpt.dl4 src/acirpt.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 18, 2003  10:33:25
Rem /w/papermaster/r2002/
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem This report based on MX442C - 12 MONTH PRODUCT SALES
Rem AUTHOR: TFH   DEC 29, 1987
Rem LAST UPDATE: RJS 11/19/93 FIX FOR ROLLING MONTHS

External Lib "ubsfunc.dl4"
Declare External Sub UTMonths
!
External Lib "libprod.lib"
Declare External Sub ProdGroup
!
External Lib "librasl.lib"
Declare External Sub ChkWhRasl
!
Declare Intrinsic Sub DateToJulian
Declare Intrinsic Sub InpBuf,String
! - Option Default Dialect IRIS1

If Err 0 Gosub ERR_TRAP
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
!
dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
dim Blank$[50] \ Blank$=" ",Blank$
dim Parm$[50] \ parm$="}",parm$
dim 1%,PFU1[20],CNVTU[2],UN[2],MONTH_[4],MTH[4]
dim 2%, Rasl[2]
dim 3%,PFU2[6],CNVTA,A[33],UWORK[10]
dim MTH$[108],ss$[12]
Dim 1%,N3,N4,N5,N6,BOYMONTH,ARMONTH,J1,CHAN,J8,ACTIVE,PW
dim 1%,l1,w0[3],PL1[1],3%,l2[5],CH_PW
dim 1%,whseflag,swhse,ewhse,breakflag,3%,T7[40],W3[24]
Dim 2%,X2,N1,N2,R[99],BREAK,B[24],V9[4],I,I1,Q0[1]
Dim 3%,S1[12,2],S2[12,2],Z1[12,2],Z2[12,2],AMOUNT,J,X3,T8[40],T9[40]
Dim 3%,AMU,VALUE,parm[10],whmisc2[7],a1[7]
Dim A$[156],P9$[50],SELLUNIT$[4],STOCKUNIT$[4],COSTUNIT$[4],Z1$[80]
Dim J$[40],CNAME$[30],N3$[4],N4$[4],J4$[40],ARDATE$[8],PMASK$[15]
Dim K1$[50],K2$[12],N1$[12],N2$[12],BREAK$[6],K9$[30],X$[10]
DIM CURDATE$[6],FIRSTDATE$[6],a2$[30]
dim jcurrdate$[6],jfirstdate$[6],PLOC$[13]
DIM custom_customer$[30],KPW$[50],k8$[64],Prim$[6]
dim f$[16],msg$[100],k6$[14],k5$[14],pw$[12]

!!!! dx add xport reporting code
dim tmp$[5000],tmp1$[500],tmp2$[50]
dim action$[30],options$[30],userid$[8],b$[200],3%,tmp3,fdel$[10],rstr$[5000],bsdel$[10],esdel$[10],rdel$[10]
call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

For J = 2 To 8
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1792","2080","1728","1744", "2528", "-1", "208"
CH_PW=5
LET F$="4/PWSALES"+STR$(Intco)  
ROPEN #7,F$  
Mat Read #1,0,100;ARDATE$;
Mat Read #1,19,50;P9$;
Mat Read #1,51,74;BOYMONTH;
Mat Read #1,0,120;ARMONTH;
Mat Read #1,3;CNAME$;
mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(trim$(custom_customer$))
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[3] = Chf(0) 
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
!
!MONTH_[1] = 1;MONTH_[2] = 0 \ rem ! - Call "UTMONTHS",MONTH_[],MTH$
!Call UTMonths(e$,MONTH_[],MTH$,BOYMONTH) ! set up month headers
!
V9[3] = 55 \ If J8 Let V9[3] = 22
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2
PMASK$ = "###########" \ X = Len(PMASK$) - Q0[1]
PMASK$[X,X] = "."
!
WHSE=1 ! warehouse used throughout (for  bin location/ !)
!

!
!!!! dx add xport reporting code
!call dxget("WHSEFLAG",tmp$) ! starting Warehouse
let whseflag=0 ! using range(99) or whse 1 only
!if rtrim$(tmp$)<>"" let whseflag=99
if whseflag<>0
	call dxget("SWHSE",tmp$) ! starting Warehouse
	if rtrim$(tmp$)="" let tmp$="1"
	let tmp3=tmp$
	if tmp3<0 or tmp3>99
		let e$="Invalid Starting Warehouse" \ error 10000
	endif
	let swhse=tmp3
	call dxget("EWHSE",tmp$) ! ending Warehouse
	if rtrim$(tmp$)="" let tmp$="99"
	let tmp3=tmp$
	if tmp3<0 or tmp3>99
		let e$="Invalid Ending Warehouse" \ error 10000
	endif
	let ewhse=tmp3
	!call dxget("BREAKFLAG",tmp$) ! starting Warehouse
	let breakflag=0
	!if rtrim$(tmp$)<>"" let breakflag=99
else
	let swhse=0
	let ewhse=99
	let breakflag=0
endif
call dxget("RWHSE",tmp$) \ Rwhse=tmp$
if RWhse<1 or RWhse>99 or fra(RWhse) let RWhse=1
!call dxget("N1",N1$) ! starting product
let n1$=UCase$(rtrim$(n1$))+blank$
!call dxget("N2",N2$) ! ending product 
let n2$=UCase$(rtrim$(n2$))+parm$
!call dxget("N3",N3$) ! starting commodity
let n3$=UCase$(rtrim$(n3$))+blank$
!call dxget("N4",N4$) ! ending commodity 
let n4$=UCase$(rtrim$(n4$))+parm$
!call dxget("begvendor",tmp$) \ N1=tmp$ ! starting vendor
!call dxget("endvendor",tmp$) \ if rtrim$(tmp$)="" let N2=999999 else N2=tmp$ ! ending vendor
!call dxget("products",tmp$) \ N3=tmp$ ! status, 1=active 2=inactive 3=all
!call dxget("sales",tmp$) \ N4=tmp$ ! 1=units & 2=dollars
let n4=1 ! we want units only
!call dxget("sortby",tmp$) \ N5=tmp$ ! sort by 1=product, 2=commodity, 3=vendor
let n5=1
!call dxget("analysis",tmp$) \ if rtrim$(tmp$)="" let N6=0 else N6=1 ! include analysis
!!!! dx end
!
!if N2$="" let N2$="}",N2$
if N2$<N1$ let e$="Invalid ending product, must be > starting product!" \ error 10000
!
!N3$=N3$,Blank$
!
!if N4$ = "" Let N4$ = "}}}}"
!N4$=N4$,Blank$
if N4$<N3$  let e$="Invalid ending commodity, must be > starting commodity!" \ error 10000
!If X9 = 2 Let X9 = 3 ! status
!
!if N1<0 or N1>999999  let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
!
!if N2<N1 or N2>999999  let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
if RWhse let Whse=RWhse
Call ChkWhRasl(e$,intco,Ctlc,WHCh,Whse,RASL[])
If Rasl[0]=0 ! to use bins - NEED RASL!!
	let e$="The warehouse selected is not RASL!" \ error 10000
Endif
if J8 ! dx xml, setup rstr$
 !<section>
 tmp$=bsdel$,"acirpt",fdel$,rdel$
 call addtostr(e$,rstr$,tmp$)
End if
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  ! try call dxclose() else rem
End If 

CHAN = 9 ! \ If N5 = 1 Let CHAN = 2 \ Goto L_1800
! - Print @0,22;'CE';"Clearing sort file...please wait"; \ Signal 3,0
! 
! *** Sort Section
L_1415: ! NO MORE SORT!!
CHAN=2 \ goto L_1800
!K9$ = " ",K9$
!Search #9,3,1;K9$,R[9],E
!If E Goto L_1500
!Search #9,5,1;K9$,R[9],E
!If E Let e$ = "syserrorfile acirpt sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
!Goto L_1415
!L_1500: Rem

! - Print @0,22;'CE';"Sorting...please wait"; \ Signal 3,0
!K2$ = N1$
!Search #2,2,1;K2$,R[2],E
!If Not(E) Goto L_1530
!L_1520: Search #2,3,1;K2$,R[2],E
!If E Goto L_1800
!L_1530: If K2$[1,Len(N2$)] > N2$ Goto L_1800
!if k2$[1,2]="99" goto L_1520 ! no products starting 99
!Mat Read #2,R[2],0;A$;
!Mat Read #2,R[2],156;B;
!mat read #2,r[2],944;a2$;
!GOSUB GET_PRODWHSE: ! look for whse rec - if none -- bypass!
!if w0[0]=-1 goto L_1520 ! NO RECORD OF WAREHOUSE
!gosub get_prodprim
!if Prim$[1,1]="R" or prim$[1,4]="    " goto L_1520 ! per spec no bins with R or no primary?
!K9$ = " ",K9$ \ R[9] = R[2]
!actv=0;tmp$=RTrim$(a2$[1,12]) ! supersede
!if tmp$="" let tmp$=k2$ ! if none supersede=curr prod
!if tmp$[1,12]=K2$[1,12] let actv=1
!let k9$[1,12]=tmp$+Blank$;k9$[13,13]=Str$(actv)
!let k9$[14]=k2$[1,12]
!Search #9,4,1;K9$,R[9],E 
!If E Let e$ = "syserrorfile acirpt sortfile mode (m)=4 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
!Goto L_1520


! *** Process Section
L_1800: Rem "=================================== start print
!
if j8 ! dx xml headings
    tmp$="ITEM #",fdel$

  tmp$=tmp$,"DESCRIPTION",fdel$
  let tmp$=tmp$,"DESCRIPTION #2",fdel$
  let tmp$=tmp$,"12 MO SALES",fdel$

    tmp$=tmp$,"SELLING UOM",fdel$,"CUBIC FEET",fdel$
    tmp$=tmp$,"QUANTITY ON HAND",fdel$,"ON SALES ORDER",fdel$
	tmp$=tmp$,"STOCKING UOM",fdel$,"BIN LOCATION",fdel$
	tmp$=tmp$,"DNR FLAG",fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! - Print @0,22;"Printing...please wait";'CE'; \ Signal 3,0
! - If J8 Print 'CS';
BREAK$ = "";BREAK = -1
V9[1] = 90;V9[0] = 0 \ If N6 Let V9[3] = V9[3] - 5
! - If Err 0 Gosub ERR_ESCAPE
! OK - we have eliminated all products except those with 0 sales
For I = 0 To 12 \ For I1 = 0 To 2 \ S1[I,I1] = 0;S2[I,I1] = 0 \ Next I1 \ Next I
Clear ss$
Let K2$ = " ",K2$
K2$ = N1$
Search #2,2,1;K2$,R[2],E
If Not(E) Goto L_2030
L_2000: Rem "========================================== print loop
Search #2,3,1;K2$,R[2],E
If E Goto L_9100
L_2030: If K2$[1,Len(N2$)] > N2$ Goto L_9100
if k2$[1,2]="99" goto L_2000 ! no products starting 99
if k2$[1,1]="E" goto L_2000 ! bypass E
Mat Read #2,R[2],0;A$;
Mat Read #2,R[2],156;B;
mat read #2,r[2],944;a2$;
GOSUB GET_PRODWHSE: ! look for whse rec - if none -- bypass!
if w0[0]=-1 goto L_2000 ! NO RECORD OF WAREHOUSE
gosub get_prodprim
if Prim$[1,1]="R" goto L_2000 !  or prim$[1,4]="    " goto L_2000 ! per spec no bins with R or no primary?
!Search #9,3,1;K9$,R[9],E ! was original L_2000! but NO MORE SORT
!If E Goto L_9100
!R[2] = R[9] ! r[9]=OLDITEM
!let actv=k9$[13,13] ! =1 if no supersede
!if actv=0 if ss$="" let ss$=k9$[1,12] ! curr supersede
Mat Read #2,R[2],0;A$;
Mat Read #2,R[2],156;B;
Mat Read #2,R[2],256;A;
Mat Read #2,r[2],460;a1;
Mat Read #2,R[2],512;PFU1;
Mat Read #2,R[2],554;PFU2;
mAT Read #2,R[2],944;a2$;
!GOSUB GET_PRODWHSE: ! look for whse rec - if none -- bypass!
! if actv=1 if w0[0]=1 goto FINSSA ! bypass - no supersede - DNR=Y
If A1[3]<=0 let A1[3]=1
R[3] = R[2]
!if actv=0 ! superseded - per specs accumlate ONLY if DNR=Y (exclude =N or =O)
!  if w0[0]=1 ! ACCUM SALES ONLY IF superseded and DNR=y -- 
	Mat Read #3,R[3],16;Z1; \ Gosub L_2500 ! moves it to s1[]
!  Else ! is DNR=N or DNR=O
!	goto L_2000 ! nothing else - get next
!  endif
!endif
!if actv=1  ! doing an active item - always accumulate! would be supersede at end of olditems it ss'd
!	Mat Read #3,R[3],16;Z1; \ Gosub L_2500 ! moves it to s1[]
!endif
!if actv=0 and ss$=k9$[1,12] ! we do not print olditem!! - we're still on supersede
!	let ss$=k9$[1,12]
!	goto L_2000 ! get next index - until supersede is active!
!endif

Gosub L_10000 ! convert using Supersede UOM's? and calc

ACTIVE = 0;T9[0] = 0;T9[20] = 0
For I = 1 To 12
  T9[0] = T9[0] + S1[I,1];T9[20] = T9[20] + S1[I,0] ! converted
  If (T9[20] or s1[I,0]) let active=99
Next I
! added if onhand & on order=0 BYPASS!
!If N3 = 3 Goto L_2135
!If N3 = 1 And ACTIVE Goto L_2135
!If N3 = 2 And Not(ACTIVE) Goto L_2135
if not(active) ! no sales
	if a[0]<1 and a[3]=0 Goto FinSSA ! no sales AND NO ON HAND at all
endif
L_2135: !If N5 = 1 Goto L_2155
!If N5 = 2 If BREAK$ <> "" If BREAK$[1,4] <> K9$[1,4] Gosub L_4500
!If N5 = 3 If BREAK <> -1 If BREAK <> B[24] Gosub L_4500
!BREAK$ = K9$[1,4];BREAK = B[24]
cnvtu[0]=pfu1[8];cnvtu[1]=0;cnvtu[2]=1;cnvta=1 ! 1 stock item to BASE
Gosub L_20000 \ let stkq=amount ! base of 1 stock item
TTLCUBE=FNR((stkq*B[23])/A1[3]) ! changed criteria - Cube is 1 stock item.!
!TTLCube=TTLCUBE+FNR((TTLSB*B[23])/A1[3]) ! cube of all sales (looks like what IQ did!)
if a[0]<1 and a[3]=0 goto FinSSA ! on hand<1 and on Order=0 - BYPASS (new criteria)
!k2$=k9$[14] ! product of record (active)
!Gosub get_prodprim
L_2155: Rem
Gosub L_5800
!If N6 Gosub L_5200
!If N6 Gosub L_6000
Gosub L_5000
! Gosub L_2200

FinSSA: ! finished
For I = 0 To 12 \ For I1 = 0 To 2 \ S1[I,I1] = 0;S2[I,I1] = 0 \ Next I1 \ Next I
clear ss$ ! clear supersede
TTLCUBE=0;TTLSB=0
Goto L_2000
!
L_2200: Rem "============================================= totals
T9[3] = T9[3] + S1[1,1] \ T9[23] = T9[23] + S1[1,0]
T9[4] = T9[4] + S1[2,1] \ T9[24] = T9[24] + S1[2,0]
T9[5] = T9[5] + S1[3,1] \ T9[25] = T9[25] + S1[3,0]
T9[6] = T9[6] + S1[4,1] \ T9[26] = T9[26] + S1[4,0]
T9[7] = T9[7] + S1[5,1] \ T9[27] = T9[27] + S1[5,0]
T9[8] = T9[8] + S1[6,1] \ T9[28] = T9[28] + S1[6,0]
T9[9] = T9[9] + S1[7,1] \ T9[29] = T9[29] + S1[7,0]
T9[10] = T9[10] + S1[8,1] \ T9[30] = T9[30] + S1[8,0]
T9[11] = T9[11] + S1[9,1] \ T9[31] = T9[31] + S1[9,0]
T9[12] = T9[12] + S1[10,1] \ T9[32] = T9[32] + S1[10,0]
T9[13] = T9[13] + S1[11,1] \ T9[33] = T9[33] + S1[11,0]
T9[14] = T9[14] + S1[12,1] \ T9[34] = T9[34] + S1[12,0]
T9[15] = T9[15] + T9 \ T9[35] = T9[35] + T9[20]
T8[3] = T8[3] + S1[1,1] \ T8[23] = T8[23] + S1[1,0]
T8[4] = T8[4] + S1[2,1] \ T8[24] = T8[24] + S1[2,0]
T8[5] = T8[5] + S1[3,1] \ T8[25] = T8[25] + S1[3,0]
T8[6] = T8[6] + S1[4,1] \ T8[26] = T8[26] + S1[4,0]
T8[7] = T8[7] + S1[5,1] \ T8[27] = T8[27] + S1[5,0]
T8[8] = T8[8] + S1[6,1] \ T8[28] = T8[28] + S1[6,0]
T8[9] = T8[9] + S1[7,1] \ T8[29] = T8[29] + S1[7,0]
T8[10] = T8[10] + S1[8,1] \ T8[30] = T8[30] + S1[8,0]
T8[11] = T8[11] + S1[9,1] \ T8[31] = T8[31] + S1[9,0]
T8[12] = T8[12] + S1[10,1] \ T8[32] = T8[32] + S1[10,0]
T8[13] = T8[13] + S1[11,1] \ T8[33] = T8[33] + S1[11,0]
T8[14] = T8[14] + S1[12,1] \ T8[34] = T8[34] + S1[12,0]
T8[15] = T8[15] + T9 \ T8[35] = T8[35] + T9[20]
! for the warehouse sort
LET T7[3]=T7[3]+S1[1,1] \ LET T7[23]=T7[23]+S1[1,0]                   
LET T7[4]=T7[4]+S1[2,1] \ LET T7[24]=T7[24]+S1[2,0]                   
LET T7[5]=T7[5]+S1[3,1] \ LET T7[25]=T7[25]+S1[3,0]                   
LET T7[6]=T7[6]+S1[4,1] \ LET T7[26]=T7[26]+S1[4,0]                   
LET T7[7]=T7[7]+S1[5,1] \ LET T7[27]=T7[27]+S1[5,0]                   
LET T7[8]=T7[8]+S1[6,1] \ LET T7[28]=T7[28]+S1[6,0]                   
LET T7[9]=T7[9]+S1[7,1] \ LET T7[29]=T7[29]+S1[7,0]                   
LET T7[10]=T7[10]+S1[8,1] \ LET T7[30]=T7[30]+S1[8,0]                 
LET T7[11]=T7[11]+S1[9,1] \ LET T7[31]=T7[31]+S1[9,0]                 
LET T7[12]=T7[12]+S1[10,1] \ LET T7[32]=T7[32]+S1[10,0]               
LET T7[13]=T7[13]+S1[11,1] \ LET T7[33]=T7[33]+S1[11,0]               
LET T7[14]=T7[14]+S1[12,1] \ LET T7[34]=T7[34]+S1[12,0]               
LET T7[15]=T7[15]+T9 \ LET T7[35]=T7[35]+T9[20]  
Return 
!
L_2500: Rem "========================== adjust buckets for last 12 months
X7 = BOYMONTH;	TTLSB=0
For I = 0 To 12  ! JUST MOVE Z1 to S1 and be done with it!!
  For X6 = 0 To 2
    If I<>0 Let S1[I,X6] = S1[I,X6]+Z1[I,X6] Else Let S1[0,X6] = S1[0,X6]+Z1[0,X6]
  Next X6
  If I<>0 
		TTLSB=TTLSB+S1[I,0] ! UNIT SLS IN BASE (FOR CUBE!)
  endif
Next I
Return
!
L_2600: Rem "========================== adjust last year buckets for fiscal year
X7 = BOYMONTH;X8 = 0
For I = 0 To 12
  For X6 = 0 To 2
    If Not(I) Let S2[0,X6] = Int(Z2[0,X6] + .5) \ Goto L_2640
    If Not(X8) Let S2[I,X6] = Int(Z2[X7,X6] + .5) Else Let S2[I,X6] = Int(Z1[X7,X6] + .5)
L_2640: Next X6
  If I<>0
	If X7 = ARMONTH Let X8 = 1
	Let X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
  endif
Next I
Return 
                    
!
L_4000: Rem "===================================== grand TOTAL PRINT
if J8 return ! dx xml
Return ! not used - no mention of totals!!

Return 

whse_total: !=======
Return  !not used??
GOSUB L_5800: ! "headings                                                     
       
FOR I=0 TO 40 \ LET T7[I]=0 \ NEXT I                    
return

!
L_4500: Rem "=============================================== sort break
if J8 return ! dx xml
Return !also not used

For I = 0 To 40 \ T8[I] = 0 \ Next I
Return 

!
get_prodprim: ! get primary
Prim$=" ",Prim$;pl1[1]=0
k8$=" ",k8$;k8$[1,12]=K2$[1,12]
K8$[13,14]=WHSE USING "##"
PLocLoop: ! 
Search #8,3,1;k8$,r[8],E
if e return
if k8$[1,12]<>k2$[1,12] Return
x2=k8$[13,14] \ if x2<>Whse Return
Mat read #8,r[8],18;pl1;
if pl1[1]<>1 goto PLocLoop ! not primary?
let Prim$=K8$[15]
goto PLocLoop
!
L_5000: Rem "============================================ PRINT SALES LINE
if J8
    tmp1$=A$[140,151],fdel$

  tmp$=tmp1$,rtrim$(A$[9,38]),fdel$
  let tmp$=tmp$,rtrim$(A$[63,92]),fdel$
  let tmp$=tmp$,LTrim$(T9[20] using "-----------#.##"),fdel$ ! 12 mo sls units (in Sell)
  tmp$=tmp$,SELLUNIT$,fdel$
    tmp$=tmp$,LTrim$(TTLCube Using "-------------#.##"),fdel$ ! sold cube?

    tmp$=tmp$,LTrim$(A[0] Using "-----------#.##"),fdel$ ! quantity on hand 
 
	tmp$=tmp$,LTrim$(A[3] Using "----------#.##"),fdel$ ! quantity on order
      tmp$=tmp$,STOCKUNIT$,fdel$ ! stock u/m
  tmp$=tmp$,Prim$,fdel$ ! primary location
  tmp1$="N" \ if w0[0]=1 let tmp1$="Y"
  if w0[0]=2 let tmp1$="O"
  tmp$=tmp$,tmp1$[1,1],fdel$ ! want DNR flag for some reason
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
 
  return
endif
!
Print #0; Tab 0;A$[140,151];
Print #0; Tab 13;A$[9,36];

Print #0; Using "---------#.##"; Tab 44;T9[20];
Print #0; Tab 58;SELLUNIT$;
! cubic something
Print #0; USING "---------#.##"; Tab 63;TTlCube;
Print #0; Using "--------#.##"; Tab 76;FNR(A[0]);
Print #0; Using "--------#.##"; Tab 88;FNR(A[3]);
Print #0; Tab 101;STOCKUNIT$; Tab 110;Prim$;
tmp1$="N" \ if w0[0]=1 let tmp1$="Y"
  if w0[0]=2 let tmp1$="O"
Print #0;Tab 121;tmp1$ ! add do not reorder flag
Print #0; tab 13;A$[63,92];

Print #0;" " \ V9[1] = V9[1] + 2
Return 
!


L_5800: Rem "===================================== HEADINGS ROUTINE
if j8 return
!
If V9[1] < V9[3] Return 
! - If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J8) Print #0;"\14\";
V9[0] = V9[0] + 1
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";V9[0]
Print #0;" - ACIRPT - ";Msc$(3);
Print #0; Tab 41;"PRODUCT INVENTORY REPORT";
!If N4 = 1 Print #0;" - THIS YEAR";
!If N5 = 1 Print #0;" BY PRODUCT" Else If N5 = 2 Print #0;" BY COMMODITY" Else Print #0;" BY VENDOR";
!if whseflag<>0 and breakflag<>0
	print #0; "  FOR WHSE ";WHSE;
! endif
PRINT #0;""
Print #0;" "
Print #0; Tab 1;"ITEM CODE";

Print #0; Tab 13;"DESCRIPTION";
Print #0; tab 47;"12 MO SLS";
Print #0; Tab 58;"UOM"; TAB 71;"CUBE";
Print #0; Tab 80;"ON HAND"; Tab 91;"ON ORDER"; Tab 101;"UOM";
Print #0; Tab 110;"BIN"; Tab 120;"DNR"
Print #0; TAB 13;"DESCRIPTION 2";
Print #0;" " \ Print #0;" "
V9[1] = 6
Return 
!

L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) 
If E<>0
	let x2=0
	Return
endif
X2 = X$[1,5]
Return
!
GET_PRODWHSE: REM LOOK UP PROD GROUP    
LET Kpw$=" ",Kpw$                         
! LET WHSE=1                              
LET PARM[2]=1;w0[0]=-1 ! NOT SETUP - DO NOT REORDER!!!                         
CHK_WHSE: REM                           
IF WHSE>99 RETURN                       
LET Kpw$[1,12]=A$[140,151]               
LET Kpw$[13,14]=WHSE USING "##"          
SEARCH #ch_pw,2,1;Kpw$,Rec_pw,E                  
IF E  RETURN                                  
  !LET WHSE=WHSE+1                       
  !GOTO CHK_WHSE:                        
!ENDIF                                   
Mat read #ch_pw,rec_pw,420;w0;
mat read #ch_pw,rec_pw,78;w3;
return ! product group? no
MAT  READ #ch_pw,Rec_pw,846;WHMISC2;            
CHK_PRODGRP: REM                        
LET PARM[0]=0                           
LET PARM[1]=WHMISC2[0]                  
Call ProdGroup(e$,intco,Parm[])
RETURN    

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem "======================================= EXIT ROUTINE
! dx close
if j8 !dx xml
 call addtostr(e$,rstr$,esdel$) !end section
 !!!!!!print rstr$
 call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
end if
!
! try call dxclose() else rem
end
! - Print 'CS'
! - Close #2,#3,#4
! - Chain "MX000"
! - Stop 
!
L_9100: Rem "==================================== END OF THIS RANGE
!If N5 > 1 Gosub L_4500
!if whseflag gosub whse_total:    !"last whse break
!Gosub L_4000
! - If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
!If Not(J8) Print #0;"\14\"
Goto OUTEND
!
L_10000: Rem "======================= converts and calcs
SELLUNIT$ = "ERR ";STOCKUNIT$ = "ERR ";COSTUNIT$ = "ERR "
R[4] = PFU1[9] \ If R[4]>0 Mat Read #4,R[4],10;SELLUNIT$;
If PFU1[9] = -1 Let SELLUNIT$ = "CWT "
If PFU1[9] = -3 Let SELLUNIT$ = "LB  "
R[4] = PFU1[8] \ If R[4]>0 Mat Read #4,R[4],10;STOCKUNIT$;
If PFU1[8] = -1 Let STOCKUNIT$ = "CWT "
If PFU1[8] = -3 Let STOCKUNIT$ = "LB  "
R[4] = PFU1[11] \ If R[4]>0 Mat Read #4,R[4],10;COSTUNIT$;
If PFU1[11] = -1 Let COSTUNIT$ = "CWT "
If PFU1[11] = -3 Let COSTUNIT$ = "LB  "
AMU = 0
For I = 1 To 12
  !If I <> ARMONTH Or N4 = 2 !  don't include current month for curent year
   ! CNVTU[0] = 0;CNVTU[1] = PFU1[8];CNVTU[2] = 1;CNVTA = S1[I,0]
   ! Gosub L_20000 \ AMU = AMU + AMOUNT
  !End If 
  CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = S1[I,0]
  Gosub L_20000 \ S1[I,0] = AMOUNT
Next I
!I = ARMONTH - BOYMONTH \ If I < 0 Let I = I + 12
!If N4 = 2 Let I = 12
!If I
!  AMU = FNR(AMU / I)
!Else 
!  AMU = 0
!End If
IF WHSEFLAG ! isn't used - sales are all Whses!
   !LET CNVTU[0]=0;CNVTU[1]=PFU1[11];CNVTU[2]=2;CNVTA=w3[15]                
   !GOSUB L_20000: \ LET B[21]=AMOUNT ! "avg cost                          
   !LET CNVTU[0]=0;CNVTU[2]=PFU1[11];CNVTU[2]=1;CNVTA=w3[0]                 
   !GOSUB L_20000: \ LET VALUE=FNR(B[21]*AMOUNT) ! "qty to cost units      
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=w3[0]                  
   GOSUB L_20000: \ LET A[0]=AMOUNT ! "qty on hand                        
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=w3[2]                  
   GOSUB L_20000: \ LET A[3]=AMOUNT ! "qty on order                         
ELSE
   !LET CNVTU[0]=0;CNVTU[1]=PFU1[11];CNVTU[2]=2;CNVTA=B[21]
   !GOSUB L_20000: \ LET B[21]=AMOUNT ! "avg cost
   !LET CNVTU[0]=0;CNVTU[2]=PFU1[11];CNVTU[2]=1;CNVTA=A[0]
   !GOSUB L_20000: \ LET VALUE=FNR(B[21]*AMOUNT) ! "qty to cost units
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=A[0]
   GOSUB L_20000: \ LET A[0]=AMOUNT ! "qty on hand
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=A[3]
   GOSUB L_20000: \ LET A[3]=AMOUNT ! "qty on order
endif

RETURN
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120 ! dx change  If Spc(4) > 1280 Goto L_20120

L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 


Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
end
