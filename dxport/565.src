! >>> Program 565
!
! description Reconcile A/P Checks from Comma delimited (.csv) file
! loadsave -w -n 100,10 -o prog/dxport/565.dl4 src/565.src
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"

Declare Intrinsic Sub Date,FileInfo,FindF,InpBuf,String,Time,VerifyDate,DateToJulian,StringSearch
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"                    
Declare External Function GetUIDRec,GetUIDInfo$
Try

! field 1: Record Code (R=reconcile will be the only ones considered)
! field 2: Account Number
! field 3: Check Number
! field 4: Check Amount (no decimal places)
! field 5: Paid Date (MMDDYYYY)
If Err 0 Gosub ERR_TRAP
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
dim 1%,z6,oldz6
dim rectype$[1],account$[30],reason$[50]
dim keyap$[50],keybank$[50],keychk$[50],keychk1$[50]
dim 1%,c3[1]
dim 3%,c2
dim 3%,rec_bank,rec_chk,rec_ap
dim 3%,paiddate,chknum,chkamt
Dim D$[136],F$[16],F1$[16],F2$[20],F9$[2],G$[2],K1$[25]
Dim P$[64],R$[20],R10$[30],R12$[235],S1$[4],S9$[80],R20$[30],R21$[30]
Dim SOURCEFILE$[50],TEXTFILE$[70],FNAME$[50],FILENAME$[50]
Dim SOURCEDIRNAME$[50],TEXTDIRNAME$[50]
Dim PERIOD$[4]
dim ReportDir$[75]
Dim 2%,PGLDATE,PDATE$[10]
Dim DATE$[8],DATE1$[6],GLDESC$[80]
Dim CUSTOM_CUSTOMER$[30]
Dim 1%,MONTH_
Dim R11$[20]
Dim T$[64],X1$[10],CLIENT$[4],WK$[100],WK1$[100],CMD$[1000]
Dim BTPER$[4],BFPER$[4],GROUP$[2],CLIENT1$[4]

Dim FIELD$[50]
Dim 1%,E,B,L9,LEARNFLAG
Dim 3%,T,R[23],R3,CRAMT,DRAMT
Dim 2%,D[3],G,G1,G2,G3,X
Dim 4%,C2[1]
DIM AV1$[40]
Dim A$[36],A3$[10],4%,A3[39],A4[39],SPARE1$[12],SPARE2$[6],3%,hyp1
dim BLANK$[50]
Dim fname$[50],groupid$[1],2%,apdate
Dim 1%,tmpmth,tmpyr,S9[1]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim tmp1$[200],blockid$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
DIM SOURCEDIRNAME$[50],TEXTDIRNAME$[50],tmpfile$[80],txtfile$[80]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim eparam$[50],blank$[50]
dim d8$[25]
Dim 3%,uarec
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
uarec= GetUIDRec(e$,IntCo,Userid$)
COID=intCO
COMP=intCO
Call Time(d8$)
for ctr=1 to 99
	Try Close #ctr Else Rem
next ctr
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
l1=99

Def FNR(R) = Sgn(R) * Int((Abs(R) + .005) * 100) / 100
Mat Read #1,51,6;S9;
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
custom_customer$ = UCase$(Trim$(custom_customer$))
Call dxsave(0,"tmp/la565.txt!")
FILENAME$ = "cntrl/la565.ini"
Call FindF(FILENAME$,A9)
If Not(A9)
	ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	Let sourcedirname$=rtrim$(reportDir$)+"/"
	textdirname$="tmp/"
	goto starthere1:
	!eflag=eflag+1
	!returnstatus=1
	!message$=FILENAME$+" does not exist. "
	!Goto OUTEND
End If 
Open #90,FILENAME$
Read #90;SOURCEDIRNAME$
X = Len(SOURCEDIRNAME$)
If x>0
	if sourcedirname$[x,x]="\15\" let sourcedirname$[x,x]=""
endif
sourcedirname$ = Trim$(sourcedirname$)
If SOURCEDIRNAME$ = "" Or SOURCEDIRNAME$ = "!"
	eflag=eflag+1
	returnstatus=1
	message$=SOURCEDIRNAME$+" source directory not set up properly. "
	Goto OUTEND
End If 
X = Len(SOURCEDIRNAME$)
If SOURCEDIRNAME$[X,X] <> "/" Let SOURCEDIRNAME$[X,X] = ""
Call FindF(SOURCEDIRNAME$,A9)
If Not(A9)
	eflag=eflag+1
	returnstatus=1	
	message$=SOURCEDIRNAME$+" - Source Directory Does not exist. "
	Goto OUTEND
End If 
Read #90;TEXTDIRNAME$
textdirname$ = Trim$(textdirname$)
let x=len(textdirname$)
If x>0
	if textdirname$[x,x]="\15\" let textdirname$[x,x]=""
endif
If TEXTDIRNAME$ = "" Or TEXTDIRNAME$ = "!"
	eflag=eflag+1
	returnstatus=1	
	message$=TEXTDIRNAME$+" text directory not set up properly. "
	Goto OUTEND
End If 
X = Len(TEXTDIRNAME$)
If TEXTDIRNAME$[X,X] <> "/" Let TEXTDIRNAME$[X,X] = ""
Call FindF(TEXTDIRNAME$,A9)
If Not(A9)
	eflag=eflag+1
	returnstatus=1
	let message$=TEXTDIRNAME$+" - Text Directory Does not exist. "
    Goto OUTEND
End If 
Starthere1: ! 
Call dxget("u_group",groupid$)             
If RTrim$(groupid$) = "" Let groupid$ = "0"
G$[1,1] = COID Using "#"
G$[2,2] = GROUPID$ 
GROUP$[1,2] = G$[1,2]
C15=15
!= OpenFile("AP.A00AP10",-intCo,1) \ If C15 = -1 Error 42  ! a00ap10
let f$="1/a00ap",g$[1,2]
open #c15,f$
keyap$=" ",keyap$
keyap$ = " 0"
Search #C15,2,1;keyap$,rec_ap,E
If E let e$="Can't find '",keyap$,"' in a00ap10 File!" \ error 10000
Mat Read #C15,V1,32;R$;
F$ = R$[13,13],"/","A50CR",G$[1,2]
open #2,F$
Mat Read #1,88,112;F$; \ Ropen #3,F$
! need to get client #
call dxget("BANK",tmp$) \ bank=tmp$ !!ENTER BANK#!!!!!!!!!!
If not (bank)
    let eflag=eflag+1
	messagE$="No bank has been entered "
	let returnstatus=1
	goto outend:
endif
keybank$ = bank Using "##"
Search #3,2,1;keybank$,rec_bank,E
if e<>0
	e$="Bank is not on file "\error 10000
endif

GETFNAME: Rem get filename

Call dxget("FNAME",tmp$)
let fname$=rtrim$(tmp$)
If FNAME$ = "" 
	let eflag=eflag+1
	returnstatus=1
	let message$="Invalid File Name Entered "
	Goto OUTEND
endif
For X = 1 To Len(FNAME$)
  If FNAME$[X,X] = " " Let FNAME$[X,X] = "_"
Next X
!Print @0,22;'CE';
SOURCEFILE$ = SOURCEDIRNAME$ + FNAME$ + ".csv"
TEXTFILE$ = TEXTDIRNAME$ + "la565" + Str$(uarec) + ".txt"
Call String(2,TEXTFILE$) ! make all lower case
TMPFILE$ = "tmp/laex565" + str$(uarec)
CMD$ = "(ls ",SOURCEFILE$," > ",TMPFILE$,") 2>/dev/null"
System CMD$
Call FindF(TMPFILE$,A9)
If Not(A9)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+rtrim$(fname$)+" Not Found "
	goto outend:
Else 
  R12$ = ""
  Open #99,TMPFILE$
  Read #99;R12$
  Close #99
  CMD$ = "rm " + TMPFILE$
  System CMD$
  let x=len(r12$)
  if x>0
	if r12$[x,x]="\15\" let r12$[x,x]=""
  endif
  If R12$ = ""
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+rtrim$(fname$)+" Not Found "
	goto outend:
  End If
  
End If 
!CMD$ = "dtox " + SOURCEFILE$ + " > " + TEXTFILE$
CMD$ = "cp " + SOURCEFILE$ + " " + TEXTFILE$
System CMD$
Call FindF(TEXTFILE$,A9)
If Not(A9)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+rtrim$(fname$)+" Not Available "
	goto outend:
End If 


totrec=0
Open #12,TEXTFILE$
Read #12;R12$
let x=len(r12$)
  if x>0
	if r12$[x,x]="\15\" let r12$[x,x]=""
  endif
If R12$ = ""
	let eflag=1
	let returnstatus=1
	let message$="CSV file does not contain data. Please Review File."
	goto outend
End If 
let x=len(r12$)
IF R12$[X,X]<>"," LET R12$[X+1,X+1]=","
READ #1,51,4;Z6;                                  
IF Z6>1 
	Let eflag=1
	let returnstatus=1
	let message$="CHECK RECONCILIATION IN PROGESS"   
	goto outend:
endif
let oldz6=z6
let z6=4
write #1,51,4;z6;
goto starthere:  ! bypass 1st read

L_2020: Read #12;R12$
let x=len(r12$)
  if x>0
	if r12$[x,x]="\15\" let r12$[x,x]=""
  endif
If R12$ = "" Goto L_2600 ! END OF BATCH
let x=len(r12$)
IF R12$[X,X]<>"," LET R12$[X+1,X+1]=","
starthere: ! 
Gosub GETFIELDS
if ucase$(rtrim$(rectype$))<>"R" goto L_2020: ! only the check rec
totrec=totrec+1
let keychk$=" ",keychk$
let keyCHK$[1,2]=BANK USING "##"
let keychk$[3,8]=chknum using "######"
reason$=" ",reason$
srchchk: ! 
search #2,3,1;keychk$,rec_chk,e
if e=2
	let reason$="Check Not Found "
	gosub prntline:
	goto L_2020:
endif
let tmp3=keychk$[1,2]
if tmp3<>bank 
	let reason$="Check Not Found "
	gosub prntline:
	goto L_2020:
endif
let tmp3=keychk$[3,8]
if tmp3<>chknum
	let reason$="Check Not Found "
	gosub prntline:
	goto L_2020
endif
mat read #2,rec_chk,18;c3;
if c3[1]<>0 ! already in process
	Reason$="Check has already been reconciled"
	goto checkdup:
Endif
mat read #2,rec_chk,12;c2;
let tmp3=(chkamt/100)
if tmp3<>c2
	Reason$="Different Check Amount "
	goto checkdup:
endif
let c3[1]=1
mat write #2,rec_chk,18;c3;
goto L_2020: 

checkdup: ! check for duplicate
let keychk1$=keychk$
search #2,3,1;keychk1$,rec,e
if e<>0
	gosub prntline:
	goto L_2020:
endif
if keychk1$[1,8]<>keychk$[1,8]
	gosub prntline:
	goto L_2020:
endif
goto srchchk:


L_2600: Rem END OF BATCH FILE
Try
	Close #2
	Close #3
	Close #15
	Close #99
	
else
	let tmp=tmp
end TRY
!If Err 0 Gosub ERR_TRAP
S9$ = "mv ",SOURCEFILE$," /tmp"
Rem LET S9$="mv ",SOURCEFILE$," mary/tmp/"
System S9$
S9$ = "rm ",TEXTFILE$
System S9$
if not(totrec)
	let z6=oldz6
	write #1,51,4;z6;
else
	let z6=1
	write #1,51,4;z6;
endif
Goto L_8900


prnthead: Rem HEADINGS
If P9 Print #0;"\14\";
!!If P9 If J8 Input "PRESS <CR> TO CONTINUE: "J$ \ Print 'CS';
P9 = P9 + 1
Print #0;D8$; Tab 50;"565 - AP Reconcilation Exceptions";
Print #0; Tab 110;"PAGE:";P9
Print #0; Tab 2;"CHECK #"; Tab 12;"Amount"; tab 25;"Reason";
print #0;""
L1 = 6
Return 

prntline: ! rem print line
let l1=l1+1
if l1>60 gosub prnthead:
print #0;using "########";chknum;
print #0;using "########.##";TAB 10;(CHKAMT/100);
print #0;tab 23;reason$;
print #0;""
return












GETFIELDS: Rem get field here
! field 1: Record Code (R=reconcile will be the only ones considered)
! field 2: Account Number
! field 3: Check Number
! field 4: Check Amount (no decimal places)
! field 5: Paid Date (MMDDYYYY)
CT = 0;POS_ = 1
Gosub L_8000
Rectype$ = FIELD$ ! record code
IF ucase$(rtrim$(rectype$))<>"R" RETURN ! only using type R
Gosub L_8000 
LET account$=FIELD$
Gosub L_8000
Let chknum=FIELD$
gosub L_8000:
let chkamt=field$ 
Gosub L_8000
let paiddate=field$
Return 
 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 

Rem {end call.input.i}
L_8000: Rem find string
field$=""
WK1$ = " ",WK1$
If R12$[POS_,POS_] = "''"
  POS_ = POS_ + 1
  WK1$ = R12$[POS_]
  Search WK1$,"''",CT
Else 
  WK1$ = R12$[POS_]
  Search WK1$,",",CT
  IF CT> 0 If WK1$[CT,CT] = "," Let CT = CT - 1
End If 
WK$ = " ",WK$
IF CT>0
	WK$[1,CT] = WK1$[1,CT]
	If WK$[CT,CT] = "''" Let WK$[CT,CT] = ""
ENDIF
If POS_ = 1 If WK$[1,1] = "''" Let WK$[1,1] = " "
POS_ = POS_ + (CT + 1)
IF CT>0 FIELD$ = WK$[1,CT]
if ct=0 and len(wk1$)<>0 ! end of string
	let field$=wk1$ !
endif
Return 

                               
                                                
ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump()
e$ = msg$ \ Error 10000                      
Return ! End  
                             
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
call programdump()
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)

L_8900: Rem END
OUTEND: Rem END
Close 
Call FindF(TEXTFILE$,A9)
If A9
  Kill TEXTFILE$
End If 
!Chain "mx000"
!Stop 
if eflag<>0 let returnstatus=1 ! error
!
!Chain "MX000"
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	let message$=message$+" Completed"	
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
! try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
end try
End ! the whole program
