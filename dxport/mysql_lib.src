! loadsave -w -n 100,10 -o mysql_lib.lib src/mysql_lib.src

External Lib "libgeneral.lib" !general routines
Declare External Sub suberr,searcherr

include "src/inc/mysql_lib.inc"

Declare Intrinsic Function FindChannel
Declare Intrinsic Sub JulianToDate,DateToJulian,FormatDate,env,programdump

Def DynamicRound(X,P) = Sgn(X) * (Abs(Int((Abs(X) + (5 * 10 ^ - (P + 1))) * 10 ^ P) / 10 ^ P))

!-------------------------------------------------
! MySQLOpen
!	Establish a connection with a MySQL database
!
!   forceChan = channel to open database on, set to -1 to have free one assigned
!	datbase$ = name of database (required)
!	rtrimStr = should string variables be trimmed of blanks on right?
!		(optional, 0 or 1, default is no (0))
!	user$ = user to connnect as (optional)
!	passwd$ = password for user (optional)
!	server$ = server IP/DNS Name where database resides (optional)
!	portNo = portNo to connect to on server (optional)
!
! RETURNS, channel opened or -1 if error
!-------------------------------------------------
External Function MysqlOpen(forceChan,database$,...)
try
	enter rtrimStr,...
else
	dim 1%,rtrimStr
end try
try
	enter user$,...
else
	dim user$[1]
end try
try
	enter passwd$,...
else
	dim passwd$[1]
end try
try
	enter server$,...
else
	dim server$[1]
end try
try
	enter portNo
else
	dim 2%,portNo
end try
try
	dim dsn$[100]
	dsn$="(rtrim="
	if rtrimStr
		dsn$=dsn$,"true"
	else
		dsn$=dsn$,"false"
	end if
	if user$ <> "" dsn$=dsn$,",user=",user$
	if passwd$ <> "" dsn$=dsn$,",password=",passwd$
	if portNo dsn$=dsn$,",port=",str$(portNo)
	dsn$=dsn$,")"
	if server$ <> "" dsn$=dsn$,server$,":"
	dsn$=dsn$,database$
	if forceChan = -1
		chn = findchannel()
	else
		chn = forceChan
	end if
	open #chn,dsn$ AS "MySQL SQL"
	exit function chn
else
	exit function -1
end try
end function -1

!-------------------------------------------------
! MySQLDateToDL4
!	Used to convert elements of data structures read in from MySQL to
!	their corrsponding DL4 record structure conterparts.
!
! arguments:	src: dl4 date style variable (read from MySQL table)
!				dest: numeric variable to receive the converted data
!				jul: optional - should we assume julian (default is YYYYMMDD)
!
!-------------------------------------------------
External Sub MySQLDateToDL4(e$,src#, dest,...)
try
	try
		enter jul
	else
		dim 1%,jul
	end try

	dim dstr$[8]
	dest = 0
	if IsSQLNULL(src#) exit sub
	dest = (year(src#) mod 100) * 10000 + month(src#) * 100 + monthday(src#)
	if jul
		dest = year(src#) * 10000 + month(src#) * 100 + monthday(src#)
		dstr$ = dest using "&&&&&&&&"
		call DateToJulian(5,dstr$)
		dest = dstr$
	end if
else ! main try
    include "src/callsuberr.inc"
end try
End Sub

!-------------------------------------------------
! MySQLNumToDL4
!	Used to convert elements of data structures read in from MySQL to
!	their corrsponding DL4 record structure conterparts.
!
! arguments:	src: muneric variable (read from MySQL table)
!				dest: numeric variable to receive the converted data
!
!-------------------------------------------------
External Sub MySQLNumToDL4(e$, src, dest)
try
	dest = 0
	if IsSQLNULL(src) exit sub
	dest = src
else ! main try
    include "src/callsuberr.inc"
end try
End Sub

!-------------------------------------------------
! MySQLStrToDL4
!	Used to convert elements of data structures read in from MySQL to
!	their corrsponding DL4 record structure conterparts.
!
! arguments:	src: string style variable (read from MySQL table)
!				dest: variable to receive the converted data
!				noPad: optional - Skip blank padding? 1 = YES (default = NO)
!
!-------------------------------------------------
External Sub MySQLStrToDL4(e$, src$, dest$,...)
try
	try
		enter noPad
	else
		dim %1,noPad
	end try
	if noPad
		dest$ = " ",dest$
	else
		dest$ = ""
	end if
	if IsSQLNULL(src$) exit sub
	if noPad
		dest$ = src$
	else
		dest$[1,len(src$)] = src$
	end if
else ! main try
    include "src/callsuberr.inc"
end try
End Sub

!-------------------------------------------------
! DL4DateToMySQL
!	Used to convert elements of data structures read in from DL4 to
!	their corrsponding MySQL record structure conterparts.
!
! arguments:	src: numeric date style variable (read from ISAM file YYMMDD)
!				dest: dl4 date style variable to receive date
!				jul: optional - should we assume julian (default is YYYYMMDD)
!
!-------------------------------------------------
External Sub DL4DateToMySQL(e$, src, dest#, ...)
try
	try
		enter jul,...
	else
		dim 1%,jul
	end try
	try
		enter noNull,...
	else
		dim 1%,noNull
	end try

	dim dstr$[8],tmp$[8]
	if not(noNull)
		try dest# = SQLNULL#() else clear dest#
	else
		clear dest#
	end if
	if not(src) exit sub
	if jul
		dstr$ = str$(src)
		try call JulianToDate(1,dstr$) else exit sub ! garbage
	else
		if src < 000101 exit sub ! garbage
		if src >= 999999 exit sub ! back order - not sure what to do here
		dstr$ = src using "&&&&&&"
		try call FormatDate(dstr$) else exit sub ! still garbage
	end if
	dest# = dstr$
else ! main try
    include "src/callsuberr.inc"
end try
End Sub

!-------------------------------------------------
! DL4NumToMySQL
!	Used to convert elements of data structures read in from DL4 to
!	their corrsponding MySQL record structure conterparts.
!
! arguments:	src: muneric variable (read from MySQL table)
!				dest: numeric variable to receive the converted data
!
!-------------------------------------------------
External Sub DL4NumToMySQL(e$, src, dest,...)
try
	try
		enter noNull,...
	else
		dim 1%,noNull
		noNull = 1 ! default to not "nulling" numerics
	end try
	try
		enter intType$
	else
		dim intType$[1]
		intType$ = ""
	end try
	dim tmp$[100]
	dim 1%,decLeft,decRight,decTot
	dim 3%
	
	if src > 1E+62 OR src < -1E+62 src = 0 ! garbage value - too big or too small!
	if src > 0 AND src < 1e-62 src = 0 ! garbage - too much precision
	if src < 0 and src > -1e-62 src = 0 ! garbage - too much precision
	select case intType$
		case "T" ! TIME
			if src<0 or src>235959 src=0
		case "UBIGINT"
			if src<0 or src>18446744073709551615 src=0
			if fra(src) src=0
		case "BIGINT"
			if src<-9223372036854775808 or src>9223372036854775807 src=0
			if fra(src) src=0
		case "UINT"
			if src<0 or src>4294967295 src=0
			if fra(src) src=0
		case "INT"
			if src<-2147483648 or src>2147483647 src=0
			if fra(src) src=0
		case "UMEDIUMINT"
			if src<0 or src>16777215 src=0
			if fra(src) src=0
		case "MEDIUMINT"
			if src<-8338608 or src>8338607 src=0
			if fra(src) src=0
		case "USMALLINT"
			if src<0 or src>65535 src=0
			if fra(src) src=0
		case "SMALLINT"
			if src<-32768 or src>32767 src=0
			if fra(src) src=0
		case "UTINYINT"
			if src<0 or src>255 src=0
			if fra(src) src=0
		case "TINYINT"
			if src<-128 or src>127 src=0
			if fra(src) src=0
	end select
	! check for decimal "inttype"
	if len(intType$) >= 12 and src <> 0 ! don't bother if 0, it's ok
		if intType$[1,8] = "DECIMAL("
			tmp$ = str$(src)
			search tmp$,"E",pos1
			if pos1
				! scientific notation, don't even
				! bother if it can be represented
				! with 16 significant digits,
				! this will cause a problem
				! for decimal types
				src = 0
			end if
			tmp$ = intType$[9]
			search tmp$,",",pos1
			if pos1
				decTot = tmp$[1,pos1-1]
				search tmp$,")",pos2
				if pos2
					decRight = tmp$[pos1+1,pos2-1]
				end if
			end if
			if decTot
				decLeft = decTot - decRight
				tmp$ = str$(src)
				search tmp$,".",pos1
				if not(pos1) pos1 = len(tmp$) + 1
				! if too many digits to left, causes segfault
				if pos1-1 > decLeft src = 0
				tmp$ = str$(src)
				search tmp$,".",pos1
				if not(pos1) pos1 = len(tmp$)
				! if too many digits to right, causes segfault
				if (len(tmp$) - pos1) > decRight
					! round to proper
					! number of digits
					src = DynamicRound(src,decRight)
				end if
			end if
		end if
	end if ! decimal check
	dest = src
	if not(src)
		if not(noNull)
			try dest = SQLNULL() else dest = 0
		else
			dest = 0
		end if
	end if
else ! main try
    include "src/callsuberr.inc"
end try
End Sub

!-------------------------------------------------
! DL4StrToMySQL
!	Used to convert elements of data structures read in from DL4 to
!	their corrsponding MySQL record structure conterparts.
!
! arguments:	src: string style variable (read from MySQL table)
!				dest: variable to receive the converted data
!
!-------------------------------------------------
External Sub DL4StrToMySQL(e$, src$, dest$,...)
try
	try
		enter noNull,...
	else
		dim 1%,noNull
	end try
	dest$ = rtrim$(src$)
	if (dest$ = "")
		if not(noNull) dest$ = SQLNULL$()
	else
		! check for bad characters in string, if we find
		! any, convert them to a space
		FOR X=1 TO LEN(dest$)
			IF dest$[X,X]<" " OR dest$[X,X]>"~" ! OUT OF STD ASCII RANGE
				LET dest$[X,X]=" " ! REPLACE WITH SPACE
			ENDIF
		NEXT X
	end if
else ! main try
    include "src/callsuberr.inc"
end try
End Sub

!-------------------------------------------------
! MySQLSecondsToTime
!	When MySQL returns a "TIME" variable to DL4 it is in the format
!	of total seconds since beginning of day, DL4 expects HHMMSS
!
! arguments:	src: muneric variable (read from MySQL table)
! returns:	numeric variable converted to hhmmss (military)
!
!-------------------------------------------------
External Function MySQLTimeToDL4(e$, src)
try
	dim 2%,dest
	dest = 0
	if IsSQLNULL(src) exit function dest
	dest = (Int(src / 3600) * 10000) + Int(src Mod 3600 / 60) * 100 + src Mod 60
else ! main try
    include "src/callsuberr.inc"
end try
End Function dest

!-------------------------------------------------
! MySQLSetRIE
!	For passed in SQL channel, set status of referential
!   integrity enforcement.  returns the value
!   of the enforcement prior to setting it.
!
! arguments:	sqlChan: open MySQL channel
!               newValue (must be a 0 or 1, 0=disable)
!
!-------------------------------------------------
External Function MySQLSetRIE(e$,sqlChan,newValue)
try
	dim %1,oldValue

	search #sqlChan;"SELECT @@FOREIGN_KEY_CHECKS"
	read #sqlChan;oldValue
	if newValue = 0 or newValue = 1
		search #sqlChan;"SET FOREIGN_KEY_CHECKS = "+str$(newValue)
	end if
else ! main try
    include "src/callsuberr.inc"
end try
End Function oldValue

!-------------------------------------------------
! MySQLTableRows
!	Return # of rows for a table, -1 means
!   table probably doesn't exist (good check to
!   see if table is defined)
!
! arguments:	sqlChan: open MySQL channel
!               newValue (must be a 0 or 1, 0=disable)
!
!-------------------------------------------------
External Function MySQLTableRows(e$,sqlChan,tableName$)
try
	dim %14,retval

	try
		search #sqlChan;"SELECT COUNT(*) FROM "+tableName$
		read #sqlChan;retval
	else
		retval = -1
	end try
else ! main try
    include "src/callsuberr.inc"
end try
End Function retval

