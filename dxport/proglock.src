! proglock.dl4
! file to hold more detailed processing locking.  Will save date/time if when a process
! got started so that if it gets "old" we can turn off any associated cntrl 120 record
! or whinfo flags so process can "autoreset"

!loadsave -w -n 100,10 -o prog/dxport/proglock.dl4 src/proglock.src

!include copyright, common libs, common intrinsics
include "src/copyright.inc"

!* declare functions, subs
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetSession
Declare Intrinsic Sub FindF
Declare Intrinsic Function FindChannel

try
	enter prog$,lck,mess$
	!! program to be locked, lock/unlock? (1,0), message back
	Dim action$[30],options$[30],userid$[8],fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
	dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! error handling variables
	dim action1$[20],action2$[30],rstr$[5000]
	dim tmp$[50],lckfle$[25],k$[50],lf$[20],LFM$[50],space$[100]
	Dim 1%,IntCo,IntSls
	dim 2%
	dim 3%,lf[5],tmp[5]
	space$=" ",space$
!System "echo afterDim >> /tmp/tcout"   
	!call dxopen()
	! Silly - get intco and then immediately reset it in call below to getsession
	! Call dxget("S_USER.AppID",tmp$) !company #               
    ! Try Let intCo = Val(tmp$) Else Let intCo = 1 !company #  
	call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
!System "echo AfterGetSession >> /tmp/tcout"   
	if intCo<10
		lckfle$="files/6/proglock"+(intCo using "&")
	else
		lckfle$="files/6/proglock"+(intCo using "&&")
	endif
	Call FindF(lckfle$,tmp)
	If not(tmp)
		gosub build_lckfle:
	else
		let sortchan = FindChannel() !assign a channel
	endif
	ecount=0 ! errorcounter
	Open #sortchan,lckfle$
	k$=" ",k$
	k$[1,10]=rtrim$(prog$)+space$
	K$[11,20]=ucase$(rtrim$(userid$))+space$
	SELECT CASE lck
	case 0
		! unlock
		search #sortchan,2,1;k$,rec,e
		if e>2 gosub rebuild_lckfle: \ goto outend:
		if not(e)
			search #sortchan,5,1;k$,rec,e \ if e goto outend:  !! just get out
			e=3
			search #sortchan,1,0;k$,rec,e
		endif
	case 1
		! set lock record
		Search #sortchan,2,1;k$,rec,e
		if e>1 
			gosub rebuild_lckfle:
			e=1  !! force next if
		endif
		if e
			e=2
lbl1:		search #sortchan,1,0;k$,rec,e 
			if e and not(ecount) gosub rebuild_lckfle: \ goto lbl1:
			search #sortchan,4,1;k$,rec,e 
		endif
		lf$=k$
		lf[0]=tim(8)*10000+tim(9)*100+tim(10)
		! yymmdd
		lf[1]=tim(11)*10000+tim(12)*100+tim(13)
		! hhmmss
		lfm$=" ",lfm$
		lfm$=mess$+space$
		write #sortchan,rec,0;lf$
		mat write #sortchan,rec,20;lf
		mat write #sortchan,rec,56;lfm$
	case 2 ! check for prog/user match
		search #sortchan,2,1;k$,rec,e
		if not(e)
			gosub chk_old:
			if not(removed) 
				lck=1  !! still there
			else
				lck=0
			endif
		else
			lck=0
		endif
	case 3
		! check if prog # entry left here, with date checking
		lck=0
		k$[1,20]=rtrim$(prog$)+space$
		mess$=rtrim$(prog$)+space$
lbl3:	search #sortchan,3,1;k$,rec,e
		if not(e) and k$[1,10]=mess$[1,10]
			gosub chk_old:
			if not(removed) 
				lck=1 !! still there
			else
				goto lbl3:
			endif
		endif
	case 4
		! check if userid$ entry left here, with date checking
		k$=" ",k$
		lck=0
lbl4:	search #sortchan,3,1;k$,rec,e
		if not(e) 
			if K$[11,20]=ucase$(rtrim$(userid$))+space$[1,(10-len(userid$))] 
				gosub chk_old:
				if not(removed)
					lck=1 !! still there
				else
					goto lbl4:
				endif
			endif
		endif
	case 5
		! check if prog # entry left here
		lck=0
		k$[1,20]=space$
		k$[1,10]=rtrim$(prog$)+space$
		mess$=rtrim$(prog$)+space$
		search #sortchan,3,1;k$,rec,e
		if not(e) and k$[1,10]=mess$[1,10]
			lck=1 !! still there
		endif
	case 6
		! check if userid$ entry left here
		k$=" ",k$
		lck=0
lbl6:	search #sortchan,3,1;k$,rec,e
		if not(e) 
			if K$[11,20]=ucase$(rtrim$(userid$))+space$[1,(10-len(userid$))] 
				lck=1 !! still there
			else
				goto lbl6:
			endif
		endif
	end select
outend: ! get out of here
	try 
		close #sortchan
	else
	end try
else
 include "src/callmainerrnet.inc"
end try
end ! end of program


!else
!	include "src/callsuberr.inc"
!end try
!end sub

chk_old: ! check if entry is oldish, if it is, remove it
removed=0
read #sortchan,rec,0;lf$
mat read #sortchan,rec,20;lf
mat read #sortchan,rec,56;lfm$
tmp[0]=tim(8)*10000+tim(9)*100+tim(10)
! yymmdd
tmp[1]=tim(11)*10000+tim(12)*100+tim(13)
! hhmmss
if int(tmp[1]/100)-int(lf[1]/100) > 5  !! 5 minute check
	! remove it
	search #sortchan,5,1;k$,rec,e \ if e goto outend:  !! just get out
	e=3
	search #sortchan,1,0;k$,rec,e
	removed=1
else
	if tmp[0]-lf[0]>0  !! older than today
			! remove it
			search #sortchan,5,1;k$,rec,e \ if e goto outend:  !! just get out
			e=3
			search #sortchan,1,0;k$,rec,e
			removed=1
	endif
endif
return

rebuild_lckfle: ! if get error in file, don't report it, make a new file
try
	close #sortchan
	kill lckfle$
	gosub build_lckfle:
	Open #sortchan,lckfle$
	ecount=ecount+1
else
	If Spc(8) <> 10000 Let e$ = "Error ",Spc(8)," at ",Spc(10)," in rebuild_lckfle"
	Error 10000
end try
return

!----------------------------------------------------------
build_lckfle:  ! build file used to handle advanced process locking
try
	Dim ID$[8],filename$[60],v$[50],filename2$[60],4%
	filename$=lckfle$
	let sortchan = FindChannel() !assign a channel
	filename2$ = "<660> [10:256] ",filename$,"!"
	Build #sortchan,filename2$ As "Universal Indexed-Contiguous"
	Rem key lengths in words
	r = 10
	Search #sortchan,0,1;v$,r,e
	If e  
		Close #sortchan
		sortchan = e * -1
	Else
		v$=""\r=0\e=0
		Search #sortchan,0,0;v$,r,e
		If e
			Close #sortchan
			sortchan = e * -1
		End If
	endIf
	If e=0
		Close #sortchan
	End If
Else
  If Spc(8) <> 10000 Let e$ = "Error ",Spc(8)," at ",Spc(10)," in build_lckfle"
  Error 10000
End Try
return
!