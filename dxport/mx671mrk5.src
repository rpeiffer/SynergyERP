! >>> Program mx671mrk5.dl4
!
! description converted call from unibasic MX671MRK5
!
! loadsave -w -n 10,10 -o prog/dxport/mx671mrk5.dl4 src/mx671mrk5.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem MX671MRK5 - LIST price from manual %   >=UB5
Rem CUSTOM - PROGRESSIVE BRICK
Rem AUTHOR : DAVE DEVITO
Rem BEDIT Version: 2.5 OBJECT CODE     Created: APR  1, 2015  13:25:12
Rem /x/w2/pm/r2005//x/usracct/jcs/work/custom/xrev9/mx671mrk5.src (synergyux.synergy.n) [jcs] {54666}
Rem  Copyright (c) 2015 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
! Option Default Dialect IRIS1

Enter PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,C4[],FIELD,BASECOST,LPMRK[],e$,rstr$
If Err 0 Gosub ERR_TRAP
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H) ! "round to penny
Def FNA(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H) ! "normal round
Def FNB(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H) ! "truncate to lower
Def FNC(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H) ! "round up
!dim e$[500],rstr$[2000] ! dx
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100],Msg$[100] 
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim 1%,M5[3],M8,CH_PM
Dim 2%,M6[3],Q0[1]
Dim 3%,B1[9,2],M7,UWORK[10]
Dim J1$[16],P9$[50],custom_customer$[30]

Mat Read #1,19,50;P9$;
mat read #1,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2 ! "mask for prices
If BASECOST <= 0 ! "if base=0 keep price!
  M7 = A[FIELD + 19] ! "so becomes 20-25
  Goto L_8800
End If 
CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = BASECOST
Gosub L_20000 \ M7 = AMOUNT ! "convert base cost to cost units
If M7 <= 0 Goto OUTEND
X1 = FIELD - 1 ! was -2 ! "which LPMrk variable [0-5]
If LPMRK[X1] = 0 Let M7 = 0 \ Goto L_8800 ! "NO CALC - ZERO PRICE
M7 = (M7 + (M7 * LPMRK[X1] / 100)) ! "no rounding
if custom_customer$="PRBRICK"
	M7 = FNR(M7) ! "OLD SYSTEM ROUNDS AT 2 - SO DO IT ON PM - 187534
endif
L_5780: CNVTA = M7 \ Goto L_5785 ! "no rounding here -cct87765
If P9$[42,42] = "N" Let CNVTA = FNA(M7) ! "normal round
If P9$[42,42] = "T" Let CNVTA = FNB(M7) ! "truncate
If P9$[42,42] = "U" Let CNVTA = FNC(M7) ! "round up
L_5785: Rem CLOSE #ch_pm
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
Gosub L_20000 \ M7 = AMOUNT ! "convert back down to base
Goto L_8800
L_8800: CNVTA = M7;FLAG = 0
OUTEND: Rem "outta here
End 
Stop 
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 2%,X1[9],Q0[1]
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H) ! "normal round
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H) ! "truncate to lower
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H) ! "vound up
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H) ! "round up to whole #
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170 ! not right type
BUNIT = 1 ! do not round flag
CNVTU[2] = 1 ! switch back to qty
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Goto L_20330
  If CNVTU[X1[1]] = -3 Goto L_20330 ! "catch wght
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650 ! INVALID CONVERSION
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650 ! OKAY
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530 ! ALREADY BASE UNITS
  If CNVTU[X1[1]] = -1 Goto L_20460
  If CNVTU[X1[1]] = -3 Goto L_20460 ! "Catch wgt
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650 ! INVALID UNIT
L_20450: If CUNIT = 0 Goto L_20530 ! ALREADY BASE
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_20510: ! NOT CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Goto L_20530
  End If 
  If CNVTU[X1[1]] = -3 ! "catch wgt Not per 100
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Goto L_20530
  End If 
L_20510: If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
  If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580 ! "not doing qty's
If BUNIT Goto L_20580 !! "not rounding units
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT) ! "round qty if not going to base units
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT) ! "be sure base is not a fraction
L_20580: If CNVTU[2] <> 2 Goto L_20630 ! "not doing costs/prices
If Not(CNVTU[1]) Goto L_20630 ! "going to base
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT) ! "normal round
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT) ! "truncate
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT) ! "vound up
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/mx671mrk5!","")
Error 11000 ! goto err_msg ! Error 10000
Return ! End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet_call.inc"
End 
