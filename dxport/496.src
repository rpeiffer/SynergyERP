! >>> Program 496
!
! description Claim Payment Accept
! loadsave -w -n 100,10 -o prog/dxport/496.dl4 src/496.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem SN496   CLAIM PAYMENT ACCEPT
Rem
Rem AUTHOR:   UBS   JULY 22, 1993
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY  1, 2001  10:11:39
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx1/sn496.src (univ2) [kag] {22209}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel

External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,formatdate2$,PDate$
Declare External Function buildsort
!Option Default Dialect IRIS1

If Err 0 Gosub ERR_TRAP
Dim 2%,intco
Dim rstr$[5000],Message$[600]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim K1$[40],K2$[40],K3$[60],K4$[60],J$[20],J1$[30],J4$[40]
Dim J8$[8],x$[20],CLM$[114],CLM1$[42],SN$[224],RP$[132]
Dim 1%,CLM1[1],STAT,RP0[2],SN1[2],HCLM1[1]
Dim 3%,CLM2[2],RP2[1],SN3[6],HCLM2[2]
Dim 2%,CLM[4],RP1[3],SN2[9],HCLM[4]
Dim 2%,WHSE,3%
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Close #CTLC ! opened as read-only - we need to write in here
CTLC=OpenFile(9999,IntCo) \ if ctlc=-1 error 42
For J = 2 To 5
  Read J1 \ If J1 = -1 Goto L_830
  Read #CTLC,88,J1;J$[1,16];
  Open #J,J$
L_830: Next J
Data "1472","416","2992","1472"
Read #CTLC,0,100;J8$;
Read #CTLC,20,26;STAT;
If STAT <> 3 Gosub L_8800 \ Goto L_9010
L_920: !Print @0,22;'CE';" DO YOU WANT TO ACCEPT PAYMENTS? (Y/N)  ";
!Input ""J$ \ Print @0,22;'CE';
!If J$ = "N" Goto L_9010 ! if user selects process - it's Y
!If J$ <> "Y" Goto L_920
STAT = 4 \ Write #CTLC,20,26;STAT;
!Print 'CS';@0,0;"CLAIM PAYMENTS ACCEPT";@50,0;"SN496"
!Print @0,22;'CE';"ACCEPTING, PLEASE WAIT" \ Signal 3,0
If Err 0 Gosub ERR_TRAP
K1$ = " ",K1$
J2 = 0
L_2000: Search #2,3,1;K1$,R1,E \ If E = 2 Goto L_9100
If E Gosub ERR_SEARCH
If K1$[7,7] = "" Or K1$[7,8] = "  " Goto L_2000
Mat Read #2,R1,0;CLM;
Mat Read #2,R1,20;CLM1;
If CLM1[0] <> 0 Goto L_2000
Mat Read #2,R1,24;CLM2
Mat Read #2,R1,42;CLM$
Mat Read #2,R1,156;CLM1$
Gosub L_3000
Gosub L_3500
Gosub L_3100
CLM1[0] = 1
Mat Write #2,R1,20;CLM1;
J2 = J2 + 1
Goto L_2000
L_3000: Rem UPDATE REPAIR
K4$ = " ",K4$;K4$[1,42] = CLM1$[42]
K4$[43] = CLM[0]
Search #4,2,1;K4$,R4,E \ If E = 1 Return 
If E Gosub ERR_SEARCH
Mat Read #4,R4,132;RP0
RP0[2] = 2
Mat Write #4,R4,132;RP0;
Return 
L_3100: Rem CLAIM HEADER
K2$ = " ",K2$;K2$ = K1$[1,6];K2$[7] = ""
Search #5,2,1;K2$,R5,E \ If E = 1 Return 
If E Gosub ERR_SEARCH
Mat Read #5,R5,0;HCLM
Mat Read #5,R5,20;HCLM1
Mat Read #5,R5,24;HCLM2
HCLM[4] = CLM[4]
HCLM1[0] = 1
HCLM2[2] = HCLM2[2] + CLM2[2]
Mat Write #5,R5,0;HCLM
Mat Write #5,R5,20;HCLM1
Mat Write #5,R5,24;HCLM2;
Return 
L_3500: Rem UPDATE SERIAL FILE
K3$ = " ",K3$;K3$[1,12] = CLM1$[1,12]
L_3510: Search #3,3,2;K3$,R3,E \ If E = 2 Return 
If K3$[1,12] <> CLM1$[1,12] Return 
Mat Read #3,R3,0;SN$;
If SN$[35,64] <> CLM1$[13,42] Goto L_3510
Mat Read #3,R3,342;SN3
SN3[6] = SN3[6] + CLM2[2]
Mat Write #3,R3,342;SN3;
Return 
x$ = " ",x$ \ x$[10] = ""
x$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
x$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
x$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
x$[4,4] = "/" \ x$[7,7] = "/" \ x$ = x$[2]
If Not(X2) Let x$ = "        "
Return 
X2 = x$[4,5] \ X1 = x$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = x$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
L_8800: Rem CLAIM PAYMENTS IN PROCESS
!Print @0,21;'RB CE';"CLAIM PAYMENT ";
returnstatus=1
If STAT = 1 let tmp$="ENTRY "
If STAT = 2 let tmp$="JOURNAL "
If STAT = 0 let tmp$="JOURNAL HAS NOT BEEN RUN. "
If STAT = 4 let tmp$="ACCEPT "
If STAT <> 0 let tmp$=tmp$,"IS IN PROCESS. "
!Print " PRESS <CR> TO EXIT  ";
!Input ""J$
!If J$ <> "!" Return 
message$=tmp$
Return ! 1 ! +1 BYPASSES EXIT??
ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/cja496se!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
OUTEND: Rem EXIT
Returnstatus=0 ! \ message$="OK - Complete"
STAT = 0 \ Write #CTLC,20,26;STAT;
L_9010: !Print 'CS'
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
End
L_9100: Rem DONE WITH RANGE
Message$="COMPLETE! ",Str$(J2)," PAYMENTS ACCEPTED"
!Input @0,23;"PRESS <CR> TO CONTINUE "J$
Goto OUTEND
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
Rem {end rtn.error.s}
End