! libdroplist.lib
!
! supporting library of drop list routines for browser
!
! 1.0 04/16/07 new
!
! loadsave -w -n 10,10 -o prog/dxport/libdroplist.lib src/libdroplist.src
!
include "src/copyright.inc"
!
! sub & functions for drop list library
!
!  sub       StatesDropList      creates a states drop down list
!  sub       PrintersDropList    creates a printer drop down list
!  sub       OtherCashDropList   creates a other cash drop down list
!  sub       JECashDropList      creates a journal entry drop down list
!  sub       BankDropList        creates a bank drop down list
!  sub       CustDropList        creates a customer drop down list
!  sub	     OrdTypeDropList     creates a order type drop list
!  sub       ShipTermDropList    creates an order shipping terms droplist
!  sub       RoutingDropList     creates an order routing Droplist
!  sub		 CMTypeDropList		 creates a cm type droplist
include "src/inc/filecashother.inc" ! other discounts
include "src/inc/filecashacc.inc" ! bank
include "src/inc/filecashrecf.inc" ! misc a/r cash, journal entry
include "src/inc/filecust.inc" ! customer
!
External Lib "libgeneral.lib"
Declare External Sub SubErr,AddToStr,CustInfoHeading,CustInfoRecord
!
Declare Intrinsic Function FindChannel
Declare Intrinsic Sub Logic,Env
!
! ----------------------------------------
external sub statesdroplist(rstr$)
	   !rstr$ is string to concat to, if GUI passed, creates rstr$ in GUI format
	   dim tmp$[50],tmp2$[100],type$[3],e$[60]
	   type$=rstr$
	   dim fdel$[10],rdel$[10]
       call env(1,"FDEL",fdel$)
       call env(1,"RDEL",rdel$)
	   if rstr$="GUI" let rstr$=""
	   do
	    try read tmp$ else exit do
	    if ucase$(type$)="GUI"
	     rstr$=rstr$,tmp$[1,2],'HT',tmp$,"~"
	    else
		 tmp2$=tmp$[1,2],fdel$,tmp$,fdel$,"N",fdel$,rdel$
	     call addtostr(e$,rstr$,tmp2$)
	    end if
	   loop
	  data "AK ALASKA","AL ALABAMA","AR ARKANSAS","AZ ARIZONA","CA CALIFORNIA","CO COLORADO","CT CONNECTICUT","DC DISTRICT OF COLUMBIA","DE DELAWARE"
      data "FL FLORIDA","GA GEORGIA","HI HAWAII","IA IOWA","ID IDAHO","IL ILLINOIS","IN INDIANA","KS KANSAS","KY KENTUCKY","LA LOUISIANA","MA MASSACHUSETTS"
      data "MD MARYLAND","ME MAINE","MI MICHIGAN","MN MINNESOTA","MO MISSOURI","MS MISSISSIPPI","MT MONTANA","NC NORTH CAROLINA","ND NORTH DAKOTA"
      data "NE NEBRASKA","NH NEW HAMPSHIRE","NJ NEW JERSEY","NM NEW MEXICO","NV NEVADA","NY NEW YORK","OH OHIO","OK OKLAHOMA","OR OREGON","PA PENNSYLVANIA"
      data "RI RHODE ISLAND","SC SOUTH CAROLINA","SD SOUTH DAKOTA","TN TENNESSEE","TX TEXAS","UT UTAH","VA VIRGINIA","VT VERMONT","WA WASHINGTON"
      data "WI WISCONSIN","WV WEST VIRGINIA","WY WYOMING"
end sub !statesdroplist
!
! ----------------------------------------
external sub PrintersDropList(...)
! if optional rstr$ passed, it is a .net call, addtstr to rstr$
! if optional xmloption is passed, 0 is off, 1 is on, default is on
! if optional pdf is passed, 0 is off, 1 is on, default is on
! if optional dcs is passed, 0 is off, 1 is on, default is on

  try
    try enter rstr$,... else dim rstr$[1]
	try enter xmloption,... else let xmloption=1
	try enter pdfoption,... else let pdfoption=1
	try enter dcsoption else let dcsoption=0
    !
    dim e$[200],msc2$[100]
    dim P61$[30],P1$[10],P2$[20],U5$[16],Co$[2]
    dim Printers$[100,70]
    dim tmp$[100],tmp1$[25]
    dim blank$[100] \ blank$=" ",blank$
    dim 1%,tmprec[256],R1,P1[4]
    dim 2%,P2[5],C2
    dim 3%,PortNo
    !
    !
    ! Open user, control and lpt control files
    !
	call dxget("u_port",tmp$)
    PortNo=val(tmp$) ! port # from usercntrl file
    !
    UserChan=FindChannel()
    Open #UserChan,"cntrl/userport"
    read #UserChan,PortNo;R1; 
	! --- R1=-1 ! temp line
    !
    CntrlChan=FindChannel()
    call dxget("S_USER.AppID",Co$) !company #
    Open #CntrlChan,"cntrl/cntrl" + Co$
    MAT READ #CntrlChan,61,0;P61$;
    !
    LptChan=FindChannel()
    Open #LptChan,"cntrl/cntrl.lpt"
    !
    ! Clear/reset printer list
	!
	For cnt = 1 To Chf(LptChan) - 1
      Mat Read #LptChan,cnt,30;P1;
      If P1[1] = PortNo 
        P1 = 0 \ P1[1] = 0
        Mat Write #LptChan,cnt,30;P1;
      endif
    Next cnt
    !
	! Create printer list
    !
    prtcnt=0 ! init counter
	if rstr$<>"GUI" let Printers$[0]="--- select one ---" \prtcnt=1
	!
    ! Process printers ($)
    For cnt=1 to chf(LptChan)-1
      READ #LptChan,cnt;P1$;
      READ #LptChan,cnt,10;P2$;
      MAT  READ #LptChan,cnt,30;P1;
      READ #LptChan,cnt,40;P2;
      if P1$[1,1]<>"*"  !crt types not valid on web
	   READ #LptChan,0,P1[3]*16;U5$;  ! paper type (forms)
	   !
	   C2=val(Co$) !company #
       CALL LOGIC(1,2^C2,P2,P2)    !??does what??
	   if R1=-1 let P2=1 ! all printers
       !
       tmp1$=cnt using "&& ",P2$,blank$ ! printer record # & name
	   
       !old code, not necessary all spooled printers now 
	   !if P1=0
       ! tmp$="   clear",blank$[1,30]
       !else
       ! tmp$="   IN USE BY SELECTION ",P1 using "###" ! menu #
	   ! tmp$=tmp$," user ",P1[1] using "####  "
       !endif
	   if dcsoption and p1[4]<>1 goto go_next
	   if P2
	    ! Printers$[prtcnt]=tmp1$,rtrim$(U5$[1,16]) ! printer, status & form
	    Printers$[prtcnt]=tmp1$
        prtcnt=prtcnt+1
	   endif !P2
	  endif !P2$[1,1] 
    go_next: next cnt
    !
    ! Process other print type
    !
	if pdfoption
	 Printers$[prtcnt]="P  PDF Display"
	 prtcnt=prtcnt+1
	end if
	!
	if not(dcsoption)
		Printers$[prtcnt]="D  Disk File"
		prtcnt=prtcnt+1
	end if
    !
	!per err 081121 no email
    !if P61$[30,30]="Y" ! e-mail
    !  Printers$[prtcnt]="M  E-Mail"
    !  prtcnt=prtcnt+1
    !endif
    !
    if P61$[29,29]="Y" and not(dcsoption) ! archive
	  ! note: archiving does not exist in erp- use saves to my reports task#19630
      !Printers$[prtcnt]="A  Archive"  !
      ! prtcnt=prtcnt+1
    endif
    !
    !  write html variables
	if rstr$=""
     call dxset("Printers",Printers$[])
	else !.net
     dim fdel$[10],rdel$[10]
     call env(1,"FDEL",fdel$)
     call env(1,"RDEL",rdel$)
	 if rstr$="GUI" let rstr$=""
	 for i=0 to prtcnt-1
	  if fdel$="GUI" !dl4term gui
	   rstr$=rstr$, printers$[i,1,2],'ht',rtrim$(printers$[i]),"~"
	  else
	   tmp$=Printers$[i],fdel$,Printers$[i,1,2],fdel$,"N",fdel$,rdel$
	   call addtostr(e$,rstr$,tmp$)
	  end if
	 next i
	 if xmloption
	  tmp$="To browser",fdel$,"-1",fdel$,"Y",fdel$,rdel$
	  call addtostr(e$,rstr$,tmp$)
	 end if !xmloption
	end if
    !
    close #UserChan,#CntrlChan,#LptChan
    !
  else
    include "src/callsuberr.inc"
  end try
end sub ! PrinterDropList
!
! ----------------------------------------
external sub OrdTypeDropList(e$,OrdTypeList$[],bsdel$,esdel$,fdel$,maxcnt,chan)
  !
  !  Create drop list of otder type from cntrl rec# 62
  !
  !  OrdTypeList[] : other cash array
  !  bsdel$          : beginning section delimiter
  !  esdel$          : ending section delimiter
  !  fdel$           : field delimiter
  !  maxcount        : maxium # of array
  !  chan            : chan for cntrl file
  !
  !  Output 1st field : order type #
  !         2nd field : order type description
  !        
  !
  try
    !
	dim tmp$[200]
	dim desc$[20]
	dim 1%,row
	dim 2%,tmpcnt,dsp
	!
	tmpcnt=maxcnt
	!
	OrdTypeList$[0]=bsdel$,"OrdTypeList",fdel$ ! beginning of section
	!
	OrdTypeList$[1]="ID",fdel$,"Description",fdel$
    !
	!
	row=2
	for cnt=1 to 38
		let dsp=(cnt-1)*20
	        read #chan,62,dsp;desc$;
		if rtrim$(desc$)<>""
			 if row>tmpcnt let tmpcnt=expandarray(E$,OrdTypeList$[])
			!
			tmp$=str$(cnt),fdel$
			 tmp$=tmp$,rtrim$(Desc$),fdel$
		!
			OrdTypeList$[row]=tmp$
			row=row+1
		endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,OrdTypeList$[])
	OrdTypeList$[row]=esdel$ ! end section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! OrdTypeDropList
! ---------------------------------------------------------------------------------
external sub ShipTermDropList(e$,ShipTermList$[],bsdel$,esdel$,fdel$,maxcnt,chan)
  !
  !  Create drop list of Shipping Terms from cntrl rec# 107
  !
  !  ShipTermList[]  : List array
  !  bsdel$          : beginning section delimiter
  !  esdel$          : ending section delimiter
  !  fdel$           : field delimiter
  !  maxcount        : maxium # of array
  !  chan            : chan for cntrl file
  !
  !  Output 1st field : Ship Term #
  !         2nd field : Ship Term description
  !        
  !
  try
    !
	dim tmp$[200]
	dim desc$[16]
	dim 1%,row
	dim 2%,tmpcnt,dsp
	!
	tmpcnt=maxcnt
	!
	ShipTermList$[0]=bsdel$,"ShipTermList",fdel$ ! beginning of section
	!
	ShipTermList$[1]="ID",fdel$,"Description",fdel$
    !
	!
	row=2
	for cnt=1 to 16
		let dsp=(cnt-1)*16
	        read #chan,107,dsp;desc$;
		if rtrim$(desc$)<>""
			 if row>tmpcnt let tmpcnt=expandarray(E$,ShipTermList$[])
			!
			tmp$=str$(cnt),fdel$
			 tmp$=tmp$,rtrim$(Desc$),fdel$
		!
			ShipTermList$[row]=tmp$
			row=row+1
		endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,ShipTermList$[])
	ShipTermList$[row]=esdel$ ! end section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! ShipTermDropList

! ---------------------------------------------------------------------------------
external sub routingDropList(e$,routingList$[],bsdel$,esdel$,fdel$,maxcnt,chan)
  !
  !  Create drop list of Routing from cntrl rec# 130
  !
  !  routingList[]  : List array
  !  bsdel$          : beginning section delimiter
  !  esdel$          : ending section delimiter
  !  fdel$           : field delimiter
  !  maxcount        : maxium # of array
  !  chan            : chan for cntrl file
  !
  !  Output 1st field : Routing #
  !         2nd field : Routing description
  !        
  !
  try
    !
	dim tmp$[200]
	dim desc$[12]
	dim 1%,row
	dim 2%,tmpcnt,dsp
	!
	tmpcnt=maxcnt
	!
	routingList$[0]=bsdel$,"RoutingList",fdel$ ! beginning of section
	!
	routingList$[1]="ID",fdel$,"Description",fdel$
    !
	!
	row=2
	for cnt=1 to 106
		let dsp=(cnt-1)*12
	        read #chan,130,dsp;desc$;
		if rtrim$(desc$)<>""
			 if row>tmpcnt let tmpcnt=expandarray(E$,routingList$[])
			!
			tmp$=str$(cnt),fdel$
			 tmp$=tmp$,rtrim$(Desc$),fdel$
		!
			routingList$[row]=tmp$
			row=row+1
		endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,routingList$[])
	routingList$[row]=esdel$ ! end section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! routingDropList

! ----------------------------------------
external sub OtherCashDropList(e$,OtherCashList$[],bsdel$,esdel$,fdel$,maxcnt,chan)
  !
  !  Create drop list from other cash file
  !
  !  OtherCashList[] : other cash array
  !  bsdel$          : beginning section delimiter
  !  esdel$          : ending section delimiter
  !  fdel$           : field delimiter
  !  maxcount        : maxium # of array
  !  chan            : chan for other cash file (scashother#)
  !
  !  Output 1st field : record # (cashother)
  !         2nd field : other cash description
  !         3rd field : G/L account #
  !
  try
    !
	dim tmp$[200]
	dim CO. as cashother
	dim 1%,row
	dim 2%,tmpcnt
	!
	tmpcnt=maxcnt
	!
	OtherCashList$[0]=bsdel$,"OtherCashList",fdel$ ! beginning of section
	!
	OtherCashList$[1]="ID",fdel$,"Description",fdel$,"G/L #",fdel$
    !
	! No record in other cash for freight, default to zero record #
	OtherCashList$[2]="0",fdel$,"Freight",fdel$,"0",fdel$ ! other cash description & g/l acct
	!
	row=3
	for cnt=1 to chf(chan)-1
	  read record #chan,cnt;CO.;
	  if rtrim$(CO.Description$)<>""
	    if row>tmpcnt let tmpcnt=expandarray(E$,OtherCashList$[])
		!
		tmp$=str$(cnt),fdel$
	    tmp$=tmp$,rtrim$(CO.Description$),fdel$
		tmp$=tmp$,str$(CO.GLAccount),fdel$
		!
		OtherCashList$[row]=tmp$
		row=row+1
	  endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,OtherCashList$[])
	OtherCashList$[row]=esdel$ ! end section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! OtherCashDropList
!
! ----------------------------------------
external sub JECashDropList(e$,JECashList$[],bsdel$,esdel$,fdel$,maxcnt,Chan)
  !
  !  Create drop list from Misc Cash File (Journal Entry)
  !
  !  JECashList[] : journal entry array
  !  bsdel$       : beginning section delimiter
  !  esdel$       : ending section delimiter
  !  fdel$        : field delimiter
  !  maxcount     : maxium # of array
  !  chan         : chan for misc cash file (scashrecf#)
  !
  !  Output 1st field : record # (cashrecf)
  !         2nd field : misc cash description
  !         3rd field : G/L account #
  !
  try
    !
	dim tmp$[200]
	dim MC. as cashrecf
	dim 1%,row
	dim 2%,tmpcnt
	!
	tmpcnt=maxcnt
	!
	JECashList$[0]=bsdel$,"JECashList",fdel$ ! beginning of section
	!
	JECashList$[1]="ID",fdel$,"Description",fdel$,"G/L #",fdel$ ! headings
    !
	row=2
	for cnt=1 to chf(chan)-1
	  read record #chan,cnt;MC.;
	  if rtrim$(MC.Description$)<>""
	    if row>tmpcnt let tmpcnt=expandarray(E$,JECashList$[])
		!
		tmp$=str$(cnt),fdel$
	    tmp$=tmp$,rtrim$(MC.Description$),fdel$
		tmp$=tmp$,str$(MC.GLAccount),fdel$
		!
		JECashList$[row]=tmp$
		row=row+1
	  endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,JECashList$[])
	JECashList$[row]=esdel$ ! end section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! JECashDropList
!
! ----------------------------------------
external sub BankDropList(e$,BankList$[],bsdel$,esdel$,fdel$,maxcnt,Chan)
  !
  !  Create drop list from Bank File 
  !
  !  BankList$[]  : bank array
  !  bsdel$       : beginning section delimiter
  !  esdel$       : ending section delimiter
  !  fdel$        : field delimiter
  !  maxcount     : maxium # of array
  !  chan         : chan for bank file (scashacc#)
  !
  !  Output 1st field : record # (cashacc)
  !         2nd field : bank description
  !
  try
    !
	dim tmp$[200]
	dim Bank. as cashacc
	dim 1%,row
	dim 2%,tmpcnt
	!
	tmpcnt=maxcnt
	!
	BankList$[0]=bsdel$,"BankList",fdel$ ! beginning section
	!
	BankList$[1]="ID",fdel$,"Description",fdel$ ! headings
    !
	row=2
	for cnt=1 to chf(chan)-1
	  read record #chan,cnt;Bank.;
	  if rtrim$(Bank.Description$)<>""
	    if row>tmpcnt let tmpcnt=expandarray(E$,BankList$[])
		!
		tmp$=str$(cnt),fdel$
	    tmp$=tmp$,rtrim$(Bank.Description$),fdel$
		!
		BankList$[row]=tmp$
		row=row+1
	  endif
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,BankList$[])
	BankList$[row]=esdel$ ! end of section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! BankDropList
!
! ----------------------------------------
external sub CustDropList(e$,List$[],bsdel$,esdel$,fdel$,maxcnt,Chan,CustKey$)
  try
    !
	dim WebStr$[200]
	dim SearKey$[64],Mode$[5]
	dim Cust. as cust
	dim 1%,row
	dim 2%,tmpcnt
	dim 3%
	!
	tmpcnt=maxcnt
	row=0
	!
	call CustInfoHeading(e$,row,List$[])
    !
	stop
	CustKey$=ucase$(rtrim$(CustKey$))
	if len(CustKey$)>14 let CustKey$=CustKey$[1,14]
    SearKey$=CustKey$
    Mode$=">"
    Dir=2 ! by customer name
    do
      CustRec=FileGetCust(e$,Chan,Mode$,Dir,SearKey$,Cust.)
      if CustRec<0 or SearKey$[1,len(CustKey$)]<>CustKey$ exit do
	  !
      if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	  !
      call CustInfoRecord(e$,WebStr$,SearKey$,cust.)
	  !
	  List$[row]=WebStr$
	  row=row+1
	loop
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
	List$[row]=esdel$ ! end of section delimiter
	!
  else
    include "src/callsuberr.inc"
  end try
  !
end sub ! custdroplist
!
! ----------------------------------------
external sub CMTypeDropList(e$,CMTypeList$[],bsdel$,esdel$,fdel$,maxcnt,chan,ua2$)
  !
  !  Create drop list of Credit types from cntrl rec# 48
  !
  !  CMTypeList[]    : List array
  !  bsdel$          : beginning section delimiter
  !  esdel$          : ending section delimiter
  !  fdel$           : field delimiter
  !  maxcount        : maxium # of array
  !  chan            : chan for cntrl file (NOT USED - now in 2/cmtype#)
  !  ua2$			 : User flags
  !
  !  Output 1st field : cm type #
  !         2nd field : cm type description
  !        
  !
  try
    !
	dim tmp$[200],co$[5]
	dim desc$[40] ! 16]
	dim 1%,row,cmtchan
	dim 2%,tmpcnt,dsp
	!
	CMTChan=FindChannel()
    call dxget("S_USER.AppID",Co$) !company #
	Try
		ROpen #CMTChan,"2/cmtype" + RTrim$(Co$)
		inctrl=0
	Else
		let inctrl=1
	End try
	!
	tmpcnt=maxcnt
	!
	CMTypeList$[0]=bsdel$,"CMTypeList",fdel$ ! beginning of section
	!
	CMTypeList$[1]="ID",fdel$,"Description",fdel$
    !
	!
	row=2;x2=99
	if inctrl let x2=16
	for cnt=1 to X2
	  if ua2$[34,34]<>"Y" and cnt=3 goto skipcmt ! no type 3 allowed
	  if ua2$[44,44]="Y" and cnt<>6 goto skipcmt ! only type 6 allowed
	  if inctrl
		let dsp=(cnt-1)*16
	    read #chan,48,dsp;desc$[1,16];
	  Else ! from the file
		let dsp=0
		Try ! in case notwritten
			mat read #cmtchan,cnt,dsp;desc$;
		Else
			clear desc$
		End try
	  Endif ! in file or control
		if rtrim$(desc$)<>""
			 if row>tmpcnt let tmpcnt=expandarray(E$,CMTypeList$[])
			!
			tmp$=str$(cnt),fdel$
			 tmp$=tmp$,rtrim$(Desc$),fdel$
		!
			CMTypeList$[row]=tmp$
			row=row+1
		endif
	skipcmt: ! skip
	next cnt
	!
	if row>tmpcnt let tmpcnt=expandarray(E$,CMTypeList$[])
	CMTypeList$[row]=esdel$ ! end section delimiter
	if not(inctrl) Try Close #CMTChan Else REM
	!
  else
    include "src/callsuberr.inc"
  end try
end sub ! CMTypeDropList

! ---------------------------------------------------------------------------------