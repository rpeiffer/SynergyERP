! >>> Program 135e
!
! description Change Buyer for vendor
! loadsave -w -n 100,10 -o prog/dxport/135e.dl4 src/135e.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem   MX135e   - GLOBAL CHA BUYER FOR SPECIFIED VENDOR
Rem   author:    jl 10/26/96
Rem
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR  9, 2009  11:57:56
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx1/mx135e.src (univ2) [txc] {49706}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub CheckDigits,InpBuf,String,programdump
!Option Default Dialect IRIS1
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
If Err 0 Gosub ERR_TRAP
Dim 1%,SC,SR,CNVTU[2],SRC,COST_LEV[3],COST_SEC,Z9[9],UN[2]
Dim 2%,E1
Dim 3%,UNIT,CNVTA
Dim e$[500],buttonlist$[5,50],nextlist$[5,100],Msg$[500],rstr$[2000] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
Dim A$[156],A2$[30],C1$[32],PSN$[20],U3$[60],HZ$[30]
Dim 1%,LLC,PFU1[20],WH
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1],CUST
Dim 3%,A1[7],A[33],PFU2[6],PLV[1],U3
Dim W1$[32],W2$[16],WH3$[24]
Dim 2%,W2[9],W7[14],WH7[3]
Dim 1%,W0[3],W1[2],WH8[47]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2]
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7,J8,X1
Dim 2%,J9[9],X2,4%,J1
DIM_VARS: Rem
Dim 1%,BWH,EWH,BICLASS,EICLASS
Dim 1%,BUYER,2%,VENDOR,VENKEY$[6],BUYKEY$[18],BUYDESC$[30],VENDESC$[30],3%,R3,R5
Dim 3%,R[99]
Dim K2$[16],K3$[14],P9$[50],P60$[50],P61$[256],BCOMM$[4],ECOMM$[4]
Dim BPROD$[12],EPROD$[12],V1$[10],W9$[4]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

OPEN_FILES: Rem          opens files here
For J = 2 To 6
  Read J1
  If J1 = -1 Goto NXTF
  Read #1,88,Abs(J1);J$;
  If J1 > 0 Open #J,J$ Else Ropen #J,J$
NXTF: Rem
Next J
Data "1792","1744","-2288","-2400","-1"
J$ = "2/BUYERS"
Ropen #6,J$
Mat Read #1,60,50;P60$;
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
INIT_VARS: Rem sort flags
FLG = 0;returnstatus=0 ! 0=ok on blockid
CFLG = 0;Message$=""
DFLG = 0
MMFLG = 0
PFLG = 0
SSFLG = 0
WFLG = 0
BPROD$ = "           1";EPROD$ = "ZZZZZZZZZZZZ";BCOMM$ = "   0"
ECOMM$ = "ZZZZ"
CH_PRWH = 3;CH_PROD = 2;BWH = 0;EWH = 99;MAVE = 6;BICLASS = 0;EICLASS = 99
MAIN: Rem
!Gosub PRINT_RANGES
!Goto FLD1 \ FLG = 1
!Goto INPUTS
! call dxsave(0,"tmp/135esv.txt!") ! save web send data
PRINT_RANGES: Rem
!Print 'CS'
!Print @2,0;"MX135E";@20,0;"Global Buyer Change for Vendor Specified"
!Print @2,3;"1> Enter Starting Warehouse Number :";
!Print @2,4;"2> Enter Ending Warehouse Number   :";
!Print @2,6;"3> Enter Starting Commodity Code   :";
!Print @2,7;"4> Enter Ending Commodity Code     :";
!Print @2,9;"5> Enter Starting Inventory Class  :";
!Print @2,10;"6> Enter Ending Inventory Class    :";
!Print @2,12;"7> Enter Starting Product Code     :";
!Print @2,13;"8> Enter Ending Product Code       :";
!Print @2,15;"9> Specific VENDOR                 :";
!Print @1,17;"10> NEW BUYER                       :";
!Return 
INPUTS: Rem

FLD1: Rem
!J5$ = "Enter starting warehouse, or <CR> for all"

call dxget("BWH",tmp$)
J1=tmp$
BWH = J1
!Print @40,3;BWH;'CL';
If BWH Let WFLG = 1
J5$ = " ",J5$
FLD2: Rem
!J5$ = "Enter ending warehouse, or <CR> for last"

call dxget("EWH",tmp$)
j1=tmp$
EWH = J1
!Print @40,4;EWH;'CL';
If BWH > EWH ! Goto FLD1
	message$=message$+"Invalid whse range  "
	Returnstatus=1
Endif
!If FLG Return 
FLD3: Rem
!J5$ = "Enter starting commodity code, <CR>: All, or  -: Help"

call dxget("BCOMM",j$)
BCOMM$ = J$+B$
!Print @50,6;V1$;'CL';
If Trim$(BCOMM$) <> "" Let CFLG = 1
J5$ = " ",J5$
FLD4: Rem
!J5$ = "Enter ending commodity code, <CR> for last, or  -: Help"

call dxget("ECOMM",j$)
ECOMM$ = J$+B$

J5$ = " ",J5$
If BCOMM$ > ECOMM$ ! Goto FLD3
	message$=message$+"Invalid commodity range  "
	Returnstatus=1
Endif
!If FLG Return 
FLD5: Rem
!J5$ = "Enter starting inventory class code, or <CR>: All"

Call dxget("BICLASS",tmp$)
J1=tmp$
BICLASS = J1
!Print @40,9;BICLASS;'CL';
!J5$ = " ",J5$
FLD6: Rem
!J5$ = "Enter ending inventory class code, or <CR> for last"

call dxget("EICLASS",tmp$)
j1=tmp$
EICLASS = J1
If BICLASS > EICLASS ! Goto FLD5
	message$=message$+"Invalid class range  "
	Returnstatus=1
Endif
!Print @40,10;EICLASS;'CL';
!If FLG Return 
FLD7: Rem
!J5$ = "Enter starting product code, <CR>: All, or  -: Help"

call dxget("BPROD",J$)
BPROD$ = UCase$(J$)+B$
If Trim$(BPROD$) <> "" Let PFLG = 1
J5$ = " ",J5$
FLD8: Rem
!J5$ = "Enter ending product code, <CR> for last, or  -: Help"

call dxget("EPROD",j$)
EPROD$ = UCase$(J$)+B$
!Print @40,13;EPROD$;'CL';
If BPROD$ > EPROD$ ! Goto FLD7
	message$=message$+"Invalid Product range  "
	returnstatus=1
Endif
!J5$ = " ",J5$
!If FLG Return 
FLD9: Rem
!J5$ = "Enter the Vendor Code for which Products will be changed to the New Buyer"

call dxget("VENDOR",tmp$)
J1=tmp$
If Not(J1)
  message$=message$+"VENDOR IS REQUIRED!  "
  RETURNstatus=1
Else 
  VENKEY$ = J1 Using "######"
  Search #5,2,1;VENKEY$,R5,E \ If E > 1 Gosub ERR_SEARCH
  If E
    message$=message$+"VENDOR IS NOT ON FILE  "
	returnstatus=1
  Else 
    Mat Read #5,R5;VENDESC$;
    !Print @49,15;VENDESC$[1,30]
  End If 
End If 
VENDOR = J1
J5$ = " ",J5$
!If FLG Return 
FLD10: Rem
!J5$ = "Enter the New Buyer Code"

call dxget("BUYER",tmp$)
j1=tmp$
If J1 < 1 Or J1 > 999 Let J1 = 0
If J1
  try
	Mat Read #6,J1;BUYDESC$;
  Else
	BUYDESC$=""
  end try
  If BUYDESC$ = "" Let J1 = 0
End If 
If J1 = 0
  message$=message$+"BUYER IS REQUIRED!  "
  returnstatus=1
Else 
  !Print @49,17;BUYDESC$[1,30]
End If 
BUYER = J1
J5$ = " ",J5$
!If FLG Return 
CHECK_INPUTS: ! CHECK
If ReturnStatus<>0 ! not okay
	e$=message$ ! it uses e$
	Goto Err_Msg
Endif

UPDATE: Rem
!Print @0,23;"Records updated...";'CL';
K2$ = " ",K2$;K3$ = " ",K3$
If CFLG
  K2$[1,4] = BCOMM$;K2$[5] = BPROD$[1,11]
Else 
  K2$ = BPROD$[1,11]
End If 
!call dxsave(0,"tmp/135esv.txt!") ! save web send data
!goto nextstep
SEARCHP: Rem 
If CFLG
  Search #2,3,3;K2$,REC_PROD,E \ If E > 2 Gosub ERR_SEARCH
  If E Goto NEXTSTEP
  If K2$[1,4] > ECOMM$ Goto NEXTSTEP
  If PFLG If K2$[5,16] > EPROD$ Goto SEARCHP
  Gosub READ_PROD
  K3$ = " ",K3$;K3$[1,12] = K2$[5,16]
Else 
  Search #2,3,1;K2$,REC_PROD,E \ If E > 2 Gosub ERR_SEARCH
  If E Goto NEXTSTEP
  If PFLG If K2$[1,12] > EPROD$ Goto SEARCHP
  Gosub READ_PROD
  K3$ = " ",K3$;K3$[1,12] = K2$[1,12]
End If 
SEARCHW: Rem
Search #3,3,1;K3$,REC_PRWH,E \ If E > 2 Gosub ERR_SEARCH
If E Goto SEARCHP
If K3$[1,12] <> A$[140,151] Goto SEARCHP
If WFLG
  Mat Read #3,REC_PRWH,32;W1;
  If W1[0] < BWH Goto SEARCHW
  If W1[0] > EWH Goto SEARCHP
End If 
Gosub READ_PRWH
If W7[6] < BICLASS Or W7[6] > EICLASS Goto SEARCHW
If W2[3] = 0 Let W2[3] = B[24]
If VENDOR <> W2[3] Or BUYER = W1[2] Goto SEARCHW
BUYKEY$ = " ",BUYKEY$ \ BUYKEY$[1,2] = K3$[13,14];BUYKEY$[3,5] = W1[2] Using "###"
BUYKEY$[6,17] = K3$[1,12];BUYKEY$[18,18] = " "
Search #3,5,2;BUYKEY$,R3,E \ If E > 1 Gosub ERR_SEARCH
W1[2] = BUYER;BUYKEY$[3,5] = W1[2] Using "###"
WRITEW: Rem
K = K + 1
!Print @18,23;K Using "######";
Mat Write #3,REC_PRWH,32;W1;
Search #3,4,2;BUYKEY$,REC_PRWH,E \ If E Gosub ERR_SEARCH
Goto SEARCHW
READ_PRWH: Rem
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,404;W2$
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Return 
READ_PROD: Rem
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,670;U4
Mat Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Mat Read #CH_PROD,REC_PROD,944;HZ$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Return 
NEXTSTEP: Rem
Unlock #2,#3
!Input "       Press <CR> to Exit"X$
OUTEND: Rem
ReturnStatus=0 ! 0= ok in blockid, is =1 elsewhere
Message$="Complete - "+Str$(K)+" Warehouse Records Updated"
 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
 call AddToStr(e$,rstr$,WebStr$)
 call SetOutPut(e$,rstr$)
 try Call dxclose() else rem
End 
ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
Return 
ISERRMSG: Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: !
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.DL4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {begin rtn.error.s}
ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/135ese!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
  call AddToStr(e$,rstr$,WebStr$)
  call SetOutPut(e$,rstr$)
  
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End
Rem {end rtn.error.s}