! --- evapupdate
! description accept the sales after update in 411
!
! loadsave -w -n 100,10 -o prog/dxport/evapupdate.dl4 src/evapupdate.src
!
! 1.0 mm/dd/yyyy change??
!
!include copyright, common libs, common intrinsics
! looks like a modified copy of mx227b
! PASSED IN: full path sortfile name, Co#, E$
! NOTES:
! 1. some fields/files are updated in 227b so don't update 2x
!    notably the on hands, A/R
! 2. This is INVOICE HISTORY - NO backorders, deletes, etc
! 3. Credit memos are included - so TMULTI +- 1 is used!
! 4. CM type 16 is this month 15 is last month
! 5. IF UPDATE IS MADE HERE - CHECK if 227B NEEDS UPDATING!
include "src/copyright.inc"
Rem EVAPUPDATE  INVOICE ACCEPT (of fields not previously updated)
Rem PART 1 - The ONLY PART
Rem LAST UPDATE:10/88 FOR REV 2.3 CUSTOM - ATHENS
Rem BEDIT Version: 2.3 OBJECT CODE     Created: MAR  7, 2013  10:18:00
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/xrev9/evapupdate.src (univ2) [jcs] {53395}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,FormatDate,InpBuf,String,Time
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function AddToMYReports
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenMySQLMirror
include "src/inc/sql_slscurr.inc"
include "src/inc/sql_prod.inc"
! Option Default Dialect IRIS1
dim buttonlist$[5,50],nextlist$[5,100],rstr$[500] !error handling variables
If Err 0 Gosub ERR_TRAP
enter sort$,intco,e$
Def FNR(H) = Sgn(H) * (Int(Abs(H) * 100 + .5) * .01)
Def FND(H) = FNR(H - (H * D3[0]))
Dim 1%,TERMFLAG,IntCo,icflag,statchan
Dim 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33]
Dim A$[60],A1$[60],A2$[12],F$[30],M$[10],M1$[40],J$[8],W2$[24],PRODA$[156]
Dim ORDCSH0$[156],SPUNIT$[4],HMAT$[2],SMAT$[2],S1$[118],P9$[50],P61$[256]
Dim A3$[16],A4$[60],P0$[20],L2$[20],L7$[6],K9$[50],A5$[156],K5$[50]
Dim X$[10],SP$[50],W$[50],P2$[23],I1$[30],S$[30],FLG$[4],NS$[50],L6$[60]
Dim K6$[60],S3$[33],SUNIT$[4],PUNIT$[4],PAY3$[16],CSH$[70],P60$[50]
Dim K36$[20],Z1$[10],SCRATCH$[80],SA$[60],S2$[20],PRODCODE$[12]
Dim 1%,UN[2],T9,DDAY[4],A0[12],OLS2[1],TAX[100],DTAX,HTAX,MTAX,FTAX,DDF,S8
Dim 1%,CDAY,MCTXBL[9],FLAG[99],SPFU1[20],OPFU1[20],OPUM,SPUM
Dim 1%,C,C8[4],D,H3[1],L3[3],M,ARMONTH,S[30],H4[2],X1,W1[2],WH8[47],NS[1]
Dim 1%,SYSMONTH,I,S4[1],WHSE,CSH1[2],CSH4,PAY0[12],BNK[1],J9[2],EUN[2]
Dim 1%,TRACK[1],LINENUM,PORTNUM,PART,TYPE,TRACKDATE$[25]
Dim WHPROD$[12],2%,WHBLD[2],ORDNUM
Dim 1%,LPRINTED,PREVBOLINE,S0,SPLITFLAG,SPLITTYPE,LWHSE,HWHSE
Dim 2%,LP_DATE,LP_TIME,SHPL,BASECOST2P,TRUCK,CSPLT[4]
Dim 2%,ROS_S5,BUDGD[1],SLBDD[1]
Dim 3%,ACC_CTR,Z9[2],S9[17],L7[11],O7[12],T1,N1[4,4],P9[10],NMERCH,CS9[3],OCS1[3]
Dim 3%,D2[19,5],D4[5],Q2[8],Q3[8],S6[1],W5[25],W3[24],OLM[5],CUST,CUSTORD
Dim 3%,C7,L5[3],P2[12,2],T2[25],C5[5],C6[9],N2[12,4],SCOM[4],S5[3],LTAX1
Dim 3%,SCST[4],SMER[4],A5[6],AMOUNT,SPC4[6],SPC5[2],PLV[1],WHLV[1],RDNETDL
Dim 3%,MCHARGE[9,1],TOT[4],CS7[2],TOT_SELL,UA3[13],2%,UA2[5],4%,HBT[1]
Dim 3%,C12[1],C0,R[99],PFN[1],MERCHSUBT,TL2[1],PHUP,E
Dim 3%,CST,R2,GLCTY[12],GLCOST,OPFU2[6],SPFU2[6],OPT1,OPA[33],SPA[33]
Dim 3%,S2[1],A3[13],L8[4],S7[20],D0[7],CFIN[8],EB[8],NOLINES,UNF[6],WHDISC
Dim 3%,SRN[5],MISCCHGS_TAXED,MISCCHGS_NONTAXED,OLDL4,NEWL4
Dim 2%,A2[5],ARDATE,D9,X,X9[12],Y9,C2,WH7[3],JRNL,A4[8],ORDCSH0[4]
Dim 2%,L6[5],C9,U4[1],DUED,SP1[5],SLSM[9],L9[1],P6[2],H6[8],PAY2[5]
Dim 2%,V2,S1[3],S3[1],H5[16],CURDATE,W9,B[24],P1,DEPT,TAXTYP,W2[9]
Dim 2%,W7[12],HA3[2],SHIPDATE,A1[2],MCODE[9],M1
Dim 2%,A9,C0,H0[12],L4[3],N0,R1[9],X2,H1,CSH2[8],I2,PAY4[7]
Dim 2%,MSDS2[1],OWHT1[1],WN[6],MM,DD,YY,POCOST,AVGCOST
Dim 3%,P3[11,1],P8,SUNIT[3],PUNIT,TX0[3],TX1[10],TX2[10],C10[5],WHMISC[6]
Dim 3%,ARREF[1],OREF[5],SLSMN_S7[1],L1,V1,CS9[3]
Dim 4%,D3[1],3%,LYP2[12,2],PAY3[13],PAY5[5],PAID,CSH3[6],ORDCSH1[2],QPB
Dim 2%,DSP3[4],KEY1$[60],KEY2$[60],KEY3$[60],KEY4$[60],KEY5$[60],KEY6$[60]
Dim 2%,CHKDEP$[50],BLANK$[50],SLFLG$[38]
Dim KEYROD$[50],3%,REC_ROD,2%,DEP1[7],3%,DEP2[4],1%,DEP3[1]
Dim DSP3$[6],MT$[2],TRACKFILE$[40],LPONUM$[30],LJOBNUM$[30]
Dim PSNUM$[30],MSG1$[30],MSG2$[30],BPO$[20],PPU$[6]
Dim 3%,BASECOST,NETPOCOST,WHMISC[6]
Dim 3%,OREF[5],INVNO,ARREF[1],PYREF[1],REC_WEEKLYSLS,BUDG[1],NEWL4
Dim 3%,REC_CR,REC_PAY
Dim 3%,COMMSRVCHG,X3[9]
Dim TAXDESC$[20],CUSTOM_CUSTOMER$[30],ReportDir$[128],BaseName1$[128],Statusfile$[128]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim sql_slscurr. as sql_slscurr
For X1 = 2 To 99
  If Err 0 Rem
  Close #X1
Next X1
If Err 0 Gosub ERR_TRAP
!Try 
!call dxopen() ! may not need this! NEEDS FOR DXTEST/RESTART RUN!!
!Else
	Rem
!End try
TERMFLAG = 0
! call programdump("tmp/evupbeg.txt!","")
RESTART0: Rem let restart = 1   ! unrem me to restart!
! call dxget("S_USER.APPID",X$)
COID = Intco ! X$ ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
if COID=0 let COID=1 ! MOST ARE COID=1
If RESTART
  F$ = "cntrl/CNTRL" + Str$(COID)
  Open #1,F$
End If 
For X1 = 2 To 37
  Read I \ If I = -1 Goto L_260
  Read #1,88,I;F$[1,16];
  Open #X1,F$
L_260: Next X1
Data "1648","1808","2080","1792","2064","-1","1136","1152","1168","1184","-1"
Data "1824","-1","2176","2192","2240","2016","1600","2048","1664","-1","2896","2912"
Data "1744","2928","1728","1936","688","928","-1","1504","2224","400","1632","1312","-1"
! Read #1,88,912;F$[1,16];
!TRMSPAC: If F$[Len(F$)] = " " Let F$ = F$[1,Len(F$) - 1] \ Goto TRMSPAC
!X1 = 0 \ Search F$,"*",X1 \ If Not(X1) Let F$ = "6/SORTWORK";X1 = 11
!F$[X1] = Str$(Spc(6))
tmp$=sort$ ! passed as dl4 is different!
X1 = 0 \ Call FindF(tmp$,X1) \ If Not(X1) let E$="CAN'T FIND SORTFILE" \ Error 42
Open #7,tmp$
F$ = "4/SORDFLEMH" + Str$(COID) \ Open #14,F$
F$ = "4/PWSALES" + Str$(COID) \ Open #37,F$
F$ = "6/EVAPTTL" + Str$(COID) \ Open #31,F$
If Err 0 Rem
Close #50
If Err 0 Gosub ERR_TRAP
! open mysql on channel 76 as it seems to be available...
sqlChan = OpenMySQLMirror(e$,76)
F$ = "2/ARTERMCODE" + Str$(COID) \ Ropen #50,F$
SCRATCH$ = "cntrl/weeklyslsflag" + Str$(COID)
F$ = "2/weeklysls" + Str$(COID)
WEEKLYSLSFLAG = 0 \ Call FindF(SCRATCH$,WEEKLYSLSFLAG)
If WEEKLYSLSFLAG
  Rem {begin src/inc/dim.weeklysls.i}
  Dim PRODCODE$[12]
  Dim 1%,WOY[1],WSDIV,WSWH
  Dim 2%,CUSTCODE
  Dim 3%,DOW[7,9]
  Rem {end dim.weeklysls.i}
  CH_WEEKLYSLS = 38
  Open #38,F$
End If 
F$ = "cntrl/rdms.ini"
RDMSFLAG = 0 \ Call FindF(F$,RDMSFLAG)
Read #1,3,172;CURDATE;
M$ = "#",M$
DDF = 0 \ If Chf(35) - 1 > 99 Let DDF = 1
BLANK$ = " ",BLANK$
Close #35 ! DON'T NEED DEPT ANYMORE
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,3,188;SHIPDATE;
Mat Read #1,165,0;SLFLG$;
If P60$[23,23] = "Y"
  Read #1,88,1264;F$; \ Open #75,F$
End If 
L_560: Rem "bypass auto cash
ROLTAGFLAG = 0
F$ = "3/SORDROLTAG" + Str$(COID)
Call FindF(F$,ROLTAGFLAG)
If ROLTAGFLAG
  Open #44,F$
End If 
Read #1,88,2112;F$[1,16]; \ Open #42,F$ ! "SHIPLIST
F$ = "4/CSLSALES" + Str$(COID)
Open #43,F$ ! "similar to slscurr for shiplists
If RESTART
  Open #80,"1/411track" + Str$(COID)
  Read #80,0,0;TRACK[0],TRACK[1],ORDNUM,LINENUM,PORTNUM,PART,TYPE,TRACKDATE$;
  TERMFLAG = TYPE
Else 
  TRACKFILE$ = COID Using "files/1/411track#"
  SCRATCH$ = "[1:42] " + TRACKFILE$ + "!" \ Build #80,SCRATCH$
  Close #80 \ Open #80,TRACKFILE$
  TRACK[0] = 0;TRACK[1] = 0
  PORTNUM = Spc(6);PART = 1;TYPE = TERMFLAG;TRACKDATE$ = Msc$(3)
  Write #80,0,0;TRACK[0],TRACK[1],ORDNUM,LINENUM,PORTNUM,PART,TYPE,TRACKDATE$;
End If 
! Statchan=88 ! instead of keeping irm open (pass it as com)
If RESTART ! leave in for manual restart! dl4/scope ONLY
  Print 'CS';@0,10;"The track file contains the following values: "
  Print @2,12;"Order:    ";ORDNUM;@25,12;"Line:  ";LINENUM;
  Print @2,13;"Track[0]: ";TRACK[0];@25,13;"Track[1]: ";TRACK[1];
  Print @2,15;"Port: ";PORTNUM;"  Part: ";
  If PART = 1 Print "mx411";
  If PART = 2 Print "mx411";
  If PART = 3 Print "mx411";
  Print "   Type: ";
  If TYPE = 0 Print "Both (cash & orders)";
  If TYPE = 1 Print "Cash";
  If TYPE = 2 Print "Orders";
  Print @2,16;"Date/Time Started: ";TRACKDATE$;
ASK_READY: Print @0,23;"Ready to begin the restart? (Y/N) (last chance!) ";
  Input ""Z1$ \ Call String(1,Z1$)
  If Z1$ <> "Y" And Z1$ <> "N" Goto ASK_READY
  If Z1$ = "N" Goto RESTART_EXIT
End If 
! ADD STATCHAN TO MYREPORTS AS THIS WILL DO A WHOLE MONTH!!
StatChan = 88 ! FindChannel() ! channel to build text file need fixed channel
ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	BaseName1$ = "evap_eom_accept_"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
	StatusFile$ = ReportDir$ + "/"+BaseName1$
	Call FindF(StatusFile$,tmp)
	If tmp Kill StatusFile$
	Try Close #88 Else Rem
	Try
		Build #StatChan,StatusFile$ As "TEXT"
	Else
		returnstatus=1
		let e$="Error in Building Status File "
		statchan=0 \ goto Starterup ! goto L_9100
	end TRY
	Try Close #StatChan Else Rem
	Try
		Open #StatChan,StatusFile$
	else
		returnstatus=1
		let e$="Error in Opening Status File "
		statchan=0 \ goto Starterup ! goto L_9100
	end TRY
	Print #StatChan;"Accept Process Started..."
	! PAUSE 20
	e = AddToMYReports(BaseName1$) 
	if e<0
		e$="Error adding to my reports!" 
		returnstatus=1
		goto Starterup ! L_9100
	endif
	!returnstatus=0 ! or is it 1?
	!message$="Please check under My Reports "+basename1$+" for status and completion"
	!Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
	!Call AddToStr(e$,rstr$,WebStr$)                            
	!Call SetOutPut(e$,rstr$)
	! Statchan=88 ! instead of keeping irm open (pass it as com)
Starterup: ! start
if statchan Print #statchan;"EVAP EOM accept starting"
! Print 'CR MU CL';"PLEASE WAIT . . . . "; \ Signal 3,0
For X = 1 To 12 \ Read X9[X] \ Next X
Data "0","31","59","90","120","151","181","212","243","273","304","334"
Mat Read #1,0,118;SYSMONTH;
Read #1,0,108;ARDATE;
J$ = ARDATE Using "######"
Gosub L_3900 \ YR = Y9
A9 = 0 \ X9[0] = D9
Read #1,0,120;ARMONTH;
SA$ = " ",SA$
! call programdump("tmp/evupst.txt!","")
L_1000: Rem "====================== accept starts here
L_1070: Search #7,3,1;SA$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto OUTEND
H1 = V1
If RDMSFLAG System "echo " + Str$(H1) + " >> 6/invhaccept" ! rdms record file??
Mat Read #8,H1;H0;
Mat Read #8,H1,512;OREF;
Mat Read #10,OREF[5],8;T2;
If TERMFLAG = 1 And T2[10] = 0 Goto L_1070
If TERMFLAG = 2 And T2[10] <> 0 Goto L_1070
ACC_CTR = ACC_CTR + 1
TMULTI = 1 \ If H0[0] = 31 Let TMULTI = -1 ! "credits added
Close #16
If TMULTI = 1 Read #1,88,2192;F$[1,16]; ! "Invoice Totals
If TMULTI = -1 Read #1,88,2208;F$[1,16]; ! "Credit Totals
Open #16,F$
ORDNUM = H0[7] \ Write #80,0,4;ORDNUM;
J$ = H0[8] Using "######" \ Gosub L_3900
Mat Read #8,H1,52;H3;
Mat Read #8,H1,446;P0$;
Mat Read #8,H1,78;H4; \ Mat Read #8,H1,444;HMAT$;
Mat Read #8,H1,348;SMER; \ Mat Read #8,H1,378;SCST;
Mat Read #8,H1,278;SLSM; \ Mat Read #8,H1,318;SCOM;
Mat Read #8,H1,568;COMMSRVCHG;
Mat Read #8,H1,598;SPLITFLAG;
If SPLITFLAG < -1 Or SPLITFLAG > 3 Let SPLITFLAG = 0
If H4 <= 0 Let H4 = 1
If H4 >= Chf(15) Let H4 = Chf(15) - 1
Mat Read #8,H1,104;H5;
Mat Read #8,H1,408;H6;
Mat Read #8,H1,490;OWHT1;
Mat Read #8,H1,512;OREF;
Mat Read #8,H1,548;CSPLT;
Read #8,H1,586;PHUP;
HWHSE = H4[2] ! "for Header Whse stuff
INVNO = OREF[1] ! "used through out as 3% Inv #
Mat Read #9,OREF[4],8;S1$;
Mat Read #9,OREF[4],126;S2$;
Mat Read #9,OREF[4],154;SRN;
Mat Read #10,OREF[5],8;T2;
Mat Read #10,OREF[5],168;MCODE;
Mat Read #10,OREF[5],208;MCHARGE;
Mat Read #10,OREF[5],328;TOT;
Mat Read #10,OREF[5],358;MCTXBL;
T2[1] = T2[1] - H6[6];T2[5] = T2[5] + H6[6];UD36 = 0
MERCHSUBT = T2[1] ! save merch subtotal for customer on order
If H5[7] = 36 ! "read Totals File
  A3$ = " ",A3$;A3$[1,6] = H0[1] Using "######"
  Search #31,2,1;A3$,R9,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Read #31,R9,4;D3[0]; ! "total sales $
    Read #31,R9,12;D3[1]; ! "total cost $
    HBT[0] = D3[0];HBT[1] = D3[1] ! "hold totals
    If HLDBT = H0[1] ! "already got first BI of month
      HBT[0] = 0;HBT[1] = 0 ! "only once please
    Else ! "only on the first Invoice
      If T2[7] Let BTTAX = 1 Else Let BTTAX = 0
      REFINV = OREF[1] ! " was H0[6]
      If H0[0] = 31 Let REFINV = H0[7] ! "credit (if first one - it's only one!)
    End If 
    UD36 = 0 ! "Update OT 36 (cause no OT 37?)
    If D3[1] = 0 And D3[0] <> 0 Let UD36 = 1 ! "sales/no cost
  Else 
    UD36 = 0
  End If 
End If 
A3$ = " ",A3$;HLDBT = H0[1]
D3[0] = 0;D3[1] = 0;N0 = OREF[1] !  "was H0[6]
If H0[0] > 30 Let N0 = H0[7] ! "Credit
If T2[1] Let D3[1] = T2[3] / T2[1]
If D3[1] < -1 Or D3[1] > 1 Let D3[1] = 0
D3[0] = D3[1]
Gosub L_5500
L_1240: If TRACK < 1 Let TRACK = TRACK + 1 \ Write #80,0,0;TRACK[0];
Mat Read #3,C0,378;C8;
Mat Read #3,C0,668;C12; ! "posting Customer
Gosub L_5900
L_1270: If TRACK < 2 Let TRACK = TRACK + 1 \ Write #80,0,0;TRACK[0];
If H5[7] = 8 Or H5[7] = 16 Goto L_1300
If TRACK < 3 Gosub L_5600
If TRACK < 3 Let TRACK = TRACK + 1 \ Write #80,0,0;TRACK[0];
If TRACK < 4 Gosub L_2500
If TRACK < 4 Let TRACK = TRACK + 1 \ Write #80,0,0;TRACK[0];
L_1300: Rem "======================================== line items
If H5[7] = 8 Or H5[7] = 16 And TRACK < 3 Let TRACK = TRACK + 2 \ Write #80,0,0;TRACK[0];
PREVBOLINE = 0 ! initialize to no bo lines kept
A$ = " ",A$;NOLINES = 0
A$[1,10] = N0 Using M$[1,10]
A1$ = A$
L_1340: Search #11,3,1;A$,V1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_1900
If A$[1,10] <> A1$[1,10] Goto L_1900
iF STATCHAN PRINT #STATCHAN;"Doing...";ACC_CTR;A$
LINENUM = A$[11,13] \ Write #80,0,8;LINENUM;
A1$ = A$
L1 = V1
Mat Read #11,L1,8;L3;
If L3[3] < 1 Let L3[3] = 1
If L3[3] > 20 Let L3[3] = 20
Mat Read #11,L1,16;L4;
If Not(L4[1]) Let L4[1] = H0[11]
If SPLITFLAG <> -1 Let L4[1] = H0[11]
LWHSE=L4[3] \ if LWHSE<1 or LWHSE>99 let LWHSE=HWhse
If L3 Let OLDL4 = L4
Mat Read #11,L1,32;L5;
Mat Read #11,L1,56;L6; \ Mat Read #11,L1,404;OLM;
Mat Read #11,L1,80;L6$; \ Mat Read #11,L1,368;MT$;
Mat Read #11,L1,140;L2$ \ Mat Read #11,L1,250;UN;
Mat Read #11,L1,160;L9; \ Mat Read #11,L1,508;LTAX1;
If Not(A9) If L3[2] >= 990 Goto L_1720
Mat Read #11,L1,168;L7; \ Mat Read #11,L1,250;L7$; \ Mat Read #11,L1,256;OLS2;
If A9 If L3[2] >= 990 Goto L_1700
Mat Read #11,L1,260;S9; \ Mat Read #11,L1,370;S3$;
Mat Read #11,L1,446;EUN; \ Mat Read #11,L1,452;UNF; \ Mat Read #11,L1,542;QPB;
Mat Read #11,L1,502;CST;
L5[2] = L5[2] - S9[15];OLM[3] = OLM[3] - S9[15]
L5[0] = L5[0] - OLM[0];L5[3] = L5[3] - OLM[1]
If P60$[42,42] = "Y" Gosub L_4800
If TRACK[1] < 1 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If L7[4] Let NOLINES = NOLINES + 1
If (H5[7] = 21 Or H5[7] = 22) And A1$[7,9] = "   " Goto L_1720
T1 = L7[4]
If H5[7] = 15 !bill & hold
  T1 = 0 \ S9[12] = 0
  If Not(H0[5]) Let T1 = L7[2];S9[12] = S9[13]
End If 
If OLS2[0] = 3 !message line
  Goto L_1700
End If 
GLCOST = L7[10]
If P9$[17,17] = "N" Let GLCOST = (T1 * CST) ! uses second line cost
If Not(GLCOST) Let GLCOST = S9[12] ! uses ext load
D3[0] = D3[1] !IF L5[3]>=0 LET D3[0]=D3[1] ELSE  LET D3[0]=-D3[1]
If L3 Goto L_7400
Mat Read #5,L4,512;PFU1 \ Mat Read #5,L4,554;PFU2
L_1493: Mat Read #5,L4,256;A
Mat Read #5,L4,0;PRODA$
Mat Read #5,L4,990;PLV
If H5[7] = 8 Or H5[7] = 16 Goto L_1560
If H5[7] = 6 Or H5[7] = 10 Goto L_1560
If H5[7] = 36 And Not(UD36) Goto L_1560
If TRACK[1] > 1 Goto L_1560
A[7] = A[7] + (FND(L5[3]) * TMULTI)
A[8] = A[8] + (FND(L5[3]) * TMULTI)
A[9] = A[9] + (T1 * TMULTI);A[10] = A[10] + (T1 * TMULTI)
If TMULTI = -1 ! "it's a credit - Add to Credit flds
  A[30] = A[30] + FND(L5[3])
  A[31] = A[31] + T1
  A[32] = A[32] + S9[12]
End If 
A[11] = A[11] + (S9[12] * TMULTI)
A[12] = A[12] + (S9[12] * TMULTI)
If TMULTI > 0 And T1 < 0 ! "qty is less than zero, treat as a credit
  A[30] = A[30] + Abs(FND(L5[3]))
  A[31] = A[31] + Abs(T1)
  A[32] = A[32] + Abs(S9[12])
End If 
L_1560: Write #5,L4,204;H0[8]
Mat Write #5,L4,256;A
Mat Write #5,L4,990;PLV
If TRACK[1] < 2 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
! If H5[7] = 8 Or H5[7] = 16 Goto L_1664
If H5[7] = 8 Or H5[7] = 16
	! make sure above writes to prod record get written out
	if sqlChan<>-1
		e = prod_UpdateSQLFromDL4(e$, intCo, proda$[140,151], sqlChan,5)
		if e<>1 gosub err_search
	end if
	Goto L_1664
End if
D4 = H0[4]
Write #5,L4,472;D4;
! make sure above writes to prod record get written out
if sqlChan<>-1
	e = prod_UpdateSQLFromDL4(e$, intCo, proda$[140,151], sqlChan,5)
	if e<>1 gosub err_search
end if
If L3 Let L4 = OLDL4
L_1600: Rem.DONT DROP
If H5[7] = 6 Or H5[7] = 10 Goto L_1664
If H5[7] = 36 And Not(UD36) Goto L_1664
If H5[6] Or OREF[2] If TRACK[1] < 3 Gosub L_6100
If TRACK[1] < 3 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If S9[17] Gosub L_10000
If TRACK[1] < 4 Gosub L_3000
If TRACK[1] < 4 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 5 Gosub L_5650
If TRACK[1] < 5 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 6 Gosub L_3600
If TRACK[1] < 6 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 7 Gosub L_4300
If TRACK[1] < 7 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If L9[0] If TRACK[1] < 8 Gosub L_12000
If TRACK[1] < 8 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 9 Gosub L_8000
If TRACK[1] < 9 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
L_1664: If TRACK[1] < 10 Gosub L_7900
If TRACK[1] < 10 Let TRACK[1] = 10 \ Write #80,0,2;TRACK[1];
If H5[7] = 6 Or H5[7] = 8 Or H5[7] = 10 Or H5[7] = 16 Or (H5[7] = 36 And Not(UD36))
  If L3 And OLDL4 Let L4 = OLDL4
  Goto L_1700
End If 
If L3[0] = 1 If TRACK[1] < 11 Gosub L_6640
If TRACK[1] < 11 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 12 Gosub L_5200
If TRACK[1] < 12 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If Int(S9[16] = 1) If TRACK[1] < 13 Gosub L_6170
If TRACK[1] < 13 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 14 Gosub L_13500
If TRACK[1] < 14 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 15 Gosub UPDATE_WEEKLYSLS ! "weekly sales file
If TRACK[1] < 15 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
If TRACK[1] < 16 ! "shiplist sales curr
  Gosub SHPL_SALES
  TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
End If 
L_1700: Rem "====================================== line accepted. now delete it
PREVBOLINE = 0
L_1720: Rem "Also referenced
Goto L_7000 ! "History - Don't delete anything!!
L_1840: A$ = A1$
L_1895: TRACK[1] = 0 \ Write #80,0,2;TRACK[1];
Goto L_1340
L_1900: Rem "===================================== no more lines
If H5[7] = 8 Or H5[7] = 16 Goto L_1950
If TRACK[0] < 5 ! "Update A/R
  Gosub L_2000 ! "ar
  TRACK[0] = TRACK[0] + 1 \ Write #80,0,0;TRACK[0];
End If 
If TRACK[0] < 6 ! "INVTOT (FRGT)
  Gosub L_3800 ! "add freight to invtot file (rec #0)
  TRACK[0] = TRACK[0] + 1 \ Write #80,0,0;TRACK[0];
End If 
If TRACK[0] < 7 ! "SHIP LIST (BEFORE CUST UPDATE!)
  Gosub SHIPL_BUDG ! "ship list bpo/budget chk/update
  TRACK[0] = TRACK[0] + 1 \ Write #80,0,0;TRACK[0];
End If 
If TRACK[0] < 8 ! "CUST MISC UPDATE
  Gosub L_3200 ! "customer sales tax/freight/misc + tax file
  TRACK[0] = TRACK[0] + 1 \ Write #80,0,0;TRACK[0];
End If 
If TRACK[0] < 9 ! "Entered by update
  Gosub L_3500 ! "entered by sales
  TRACK[0] = TRACK[0] + 1 \ Write #80,0,0;TRACK[0];
End If 
L_1950: Gosub L_6000 ! "delete messages - this can happen again for restarts
Gosub L_6200 !"delete order line tag
If TRACK[0] < 10 ! "division file
  Gosub L_3700 ! "division file
  TRACK[0] = 10 \ Write #80,0,0;TRACK[0];
End If 
Gosub L_4200
ORD_DELETED = 0 \ Gosub L_4000
If ORD_DELETED Goto L_1995
If H5[7] = 4 Or H5[7] = 24 Or H5[7] = 15 Gosub L_6600
L_1995: TRACK[0] = 0 \ Write #80,0,0;TRACK[0];
Goto L_1000
L_2000: Rem "=======================Normally update AR (now setup Vars)
If H5[7] = 36 And REFINV = OREF[1] Gosub UPDATE_ARGP ! "was H0[6]
If H5[7] = 16 And T2[0] = 0 Return 
Read #10,OREF[5],164;JRNL;
A2[0] = H0[11];A2[1] = 0;A2[2] = C9;A2[4] = ARDATE;ARREF[1] = 0 ! was: arref[1]=H0[6]
For X1 = 0 To 11
  A0[X1] = 0
  If X1 <= 2 Let A1[X1] = 0
  If X1 <= 8 Let A4[X1] = 0
  If X1 <= 5 Let A5[X1] = 0
  A3[X1] = 0
Next X1
If T2[0] < 0 Goto L_2060
If T2[13] > T2[0] Let T2[13] = T2[0]
L_2060: A3[0] = Abs(T2[0]);A3[2] = Abs(T2[13])
If T2[0] < 0 Let A3[0] = A3[0] + A3[2] \ A3[2] = 0
A3[4] = T2[5];A3[5] = T2[1]
A4$ = " ",A4$;A4$[1,20] = P0$
A1[0] = H0[7]
A1[1] = C12[1] ! "Posting Customer
A2[4] = H0[8];A4[3] = H0[8] ! set inv/due to invoice date
X$ = A2[4] Using "&&&&&&" \ Call DateToJulian(1,X$,X$,E) \ If E Let X$ = Tim(6) Using "#####"
A2[4] = X$[1,5]
A3[7] = T2[7];A3[13] = T2[16]
A0[1] = H4[0];A1[2] = OWHT1[1];A0[5] = H5[8]
A3[10] = T2[4] + T2[6];A5[0] = Abs(T2[11])
A0[6] = H5[7];A0[7] = H5[9];A0[8] = H5[0]
A3[12] = T2[22];A4[0] = T2[23]
A0[9] = H3[1];A0[10] = 0;A4[1] = H0[4]
A0[3] = H4[2];A5[6] = T2[3];A0[0] = H0[12]
A4[2] = JRNL
A3[8] = H5[13] - (H5[14] - T2[17] + T2[18])
A3[6] = H5[13] - H5[14]
A0[2] = ARMONTH * 100 + YR
A0[12] = 411 ! accept source
A$ = " ",A$;A$[1,6] = C9 Using "######";A$[7,17] = OREF[1] Using "##########1"
If T2[0] < 0 ! "make into a credit
  A$[17,17] = "6"
  A3[4] = - A3[4];A3[5] = - A3[5];A3[7] = - A3[7];A5[6] = - A5[6];A3[10] = - A3[10]
End If 
A3[6] = 0;S3[0] = V1;C = 7;D = 1
A$[7,12] = A2[4] Using "######"
A$[13] = A1$[7]
If P9$[48,48] <> "Y" Goto L_2330
L_2330: Rem "============================= cash/non cash month totals
If H5[7] = 36 And Not(UD36) Return 
If TMULTI = 1
  If T2[10] <> 0 Mat Read #19,1;N1;
  If T2[10] = 0 Mat Read #19,1,150;N1;
Else ! "credits
  If H0[12] = 1 Mat Read #19,2;N1;
  If H0[12] <> 1 Mat Read #19,2,150;N1;
End If 
X = H4[2] - 1 \ If X < 0 Let X = 0 Else If X > 4 Let X = 4
N1[0,X] = N1[0,X] + T2[1]
N1[1,X] = N1[1,X] + T2[7]
N1[2,X] = N1[2,X] + T2[3]
N1[3,X] = N1[3,X] + T2[4] + T2[6]
N1[4,X] = N1[4,X] + T2[5]
If TMULTI = 1
  If T2[10] <> 0 Mat Write #19,1;N1;
  If T2[10] = 0 Mat Write #19,1,150;N1;
Else ! "credits
  If H0[12] = 1 Mat Write #19,2;N1;
  If H0[12] <> 1 Mat Write #19,2,150;N1;
End If 
Return 
UPDATE_ARGP: Rem "type 36 Update Load Cost G/P from totals
A$ = " ",A$;A$[1,6] = H0[1] Using "######"
A$[7,16] = OREF[1] Using "##########";A$[17] = "1" ! "was H0[6]
If TMULTI = -1 Let A$[17] = "6" ! "credit
Search #32,2,1;A$,V1,E \ If E Return 
Mat Read #32,V1,316;ARREF; !"rev9 upgrade - was: Mat Read #32,v1,0;UA2;
If ARREF[0] <> REFINV Return !"different? Not on first Inv-rev9 upgrade-was UA2[5]
Mat Read #32,V1,24;UA3
UA3[6] = HBT[0] - HBT[1] ! "actual G/P
Mat Write #32,V1,24;UA3;
Return 
L_2400: Rem "================================== ar proof file
Return ! "?? need G/P Update?? (Done in 227b/246b!)
R34REC = 2 \ If TMULTI = -1 Let R34REC = 3
Mat Read #34,R34REC,0;P9
X = 1 \ If T2[0] < 0 Let X = -1
P9[0] = P9[0] + (A3[0] * X)
P9[1] = P9[1] + (A3[0] * X) \ P9[2] = P9[2] + (A3[0] * X)
P9[3] = P9[3] + A3[6] \ P9[4] = P9[4] + A3[6] \ P9[5] = P9[5] + A3[6]
P9[6] = P9[6] + 1 \ P9[7] = P9[7] + 1 \ P9[8] = P9[8] + 1
Mat Write #34,R34REC,0;P9;
If Not(H5[8]) Let H5[8] = 1
Mat Read #34,(H5[8] * 10) + R34REC,0;P9
X = 1 \ If T2[0] < 0 Let X = -1
P9[0] = P9[0] + (A3[0] * X)
P9[1] = P9[1] + (A3[0] * X) \ P9[2] = P9[2] + (A3[0] * X)
P9[3] = P9[3] + A3[6] \ P9[4] = P9[4] + A3[6] \ P9[5] = P9[5] + A3[6]
P9[6] = P9[6] + 1 \ P9[7] = P9[7] + 1 \ P9[8] = P9[8] + 1
Mat Write #34,(H5[8] * 10) + R34REC,0;P9;
R34REC = 12 \ If TMULTI Let R34REC = 18
Read #34,0,R34REC;P8
P8 = P8 + (A3[0] * X)
Write #34,0,R34REC;P8;
Return 
L_2500: Rem "================================== update commissions
If P9$[14,14] = "N" Return 
If H5[7] = 6 Return 
If H5[7] = 36 Return ! " was =37 RETURN
For X5 = 0 To 4
  If SPLITFLAG = 0 ! "not multi-slsm type
    If X5 > 0 Goto L_2895
  End If 
  If SLSM[X5] = 0 Goto L_2895
  A$ = " ",A$ \ D4 = 1
  A$[1,3] = SLSM[X5] Using "###"
  A$[4,13] = OREF[1] Using "##########" ! " was H0[6]
  A$[14,14] = "1"
  If TMULTI = -1 ! "credit
    A$[4,13] = H0[7] Using "##########"
    A$[14,14] = "6"
  End If 
  Search #17,2,1;A$,V1,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E) Goto L_2680
  D4 = 0;E = 2 \ Search #17,1,0;A$,V1,E \ If E Gosub ERR_SEARCH
  SMAT$ = " ",SMAT$
  CS7 = 0;CS7[1] = OREF[1];CS7[2] = CSPLT[X5]
  For X1 = 0 To 3
    S1[X1] = 0;CS9[X1] = 0
    If X1 < 2 Let S2[X1] = 0;S3[X1] = 0;S4[X1] = 0;S6[X1] = 0
  Next X1
  Mat Write #17,V1,0;S1;
  Mat Write #17,V1,16;S2;
  Mat Write #17,V1,28;S3;
  Mat Write #17,V1,36;S4;
  Mat Write #17,V1,40;S6;
  Mat Write #17,V1,52;SMAT$;
  Mat Write #17,V1,54;CS7;
  Mat Write #17,V1,72;CS9;
  Mat Write #17,V1,100;COMMSRVCHG;
L_2680: Rem EXISTING
  Mat Read #17,V1,0;S1
  Mat Read #17,V1,16;S2
  Mat Read #17,V1,28;S3
  Mat Read #17,V1,36;S4
  Mat Read #17,V1,40;S6
  Mat Read #17,V1,52;SMAT$
  Mat Read #17,V1,54;CS7
  Mat Read #17,V1,72;CS9
  Mat Read #17,V1,100;COMMSRVCHG
  S1[0] = SLSM[X5];S1[1] = H0[7];S1[2] = SLSM[X5 + 5];S1[3] = H0[8]
  If SPLITFLAG = 1 ! " was P61$[72,72]="Y" ! "commission Split
    If X5 > 0 Let S1[2] = SLSM[5] ! "comm % is only on main slsm
  Else ! "not splitting one comm $
    If SPLITFLAG = 0 Let CSPLT[X5] = 100 ! "split always 100 to the guy
  End If 
  S2[0] = 0;S2[1] = 0
  S6[0] = 0;S6[1] = 0
  CS7 = 0
  If SPLITFLAG <> 2
    CS7[2] = CSPLT[X5] ! commission split %
    SPLITTYPE = 0
  Else 
    CS7[2] = SLSM[X5 + 5]
    SPLITTYPE = CSPLT[X5]
  End If 
  If SPLITFLAG = -1 Goto L_2762
  S2[0] = S2[0] + T2[1];S6[0] = S6[0] + T2[17]
  If P9$[35,35] = "Y" Let S2[0] = S2[0] + T2[5]
  If P9$[36,36] = "Y" Let S2[0] = S2[0] - T2[3]
  S6[1] = S6[1] + T2[18]
  If P9$[37,37] = "Y" Let S6[0] = S6[0] + T2[20]
  S6[0] = S6[0] + TOT[2]
  If P9$[38,38] = "Y" Let S2[0] = S2[0] + T2[6]
  S2[0] = S2[0] + TOT[1]
L_2762: SMAT$[1,2] = HMAT$[1,2]
  If SPLITFLAG = -1
    S2[0] = S2[0] + SMER[X5]
    S6[0] = S6[0] + SCST[X5]
    S6[1] = 0 ! NO AVE COST ON MULTI SLSM
  End If 
  S2[1] = S2[1] + SCOM[X5]
  If H5[7] = 10 Let S1[2] = 0 \ S2[1] = 0 \ S2[0] = 0
  S3[0] = H5[7]
  S3[1] = H0[1]
  S4[0] = ARMONTH
  OCS1[0] = S2[1]
  OCS1[1] = S1[2]
  OCS1[2] = S2[0]
  OCS1[3] = S6[0]
  Mat Write #17,V1,0;S1
  Mat Write #17,V1,16;S2
  Mat Write #17,V1,28;S3
  Mat Write #17,V1,36;S4
  Mat Write #17,V1,40;S6
  Mat Write #17,V1,52;SMAT$
  Mat Write #17,V1,54;CS7
  Mat Write #17,V1,72;CS9
  Mat Write #17,V1,100;COMMSRVCHG
  Mat Write #17,V1,112;OCS1
  Mat Write #17,V1,136;SPLITFLAG
  Mat Write #17,V1,138;SPLITTYPE;
  If D4 = 1 Goto L_2895
  A$ = " ",A$
  A$[1,3] = S1[0] Using "###"
  A$[4,13] = CS7[1] Using "##########"
  A$[14,14] = "1"
  If TMULTI = -1 ! "credit
    A$[4,13] = S1[1] Using "##########"
    A$[14,14] = "6"
  End If 
  C = 17 \ D = 1
  Gosub L_5000
  iF e Gosub ERR_SEARCH
L_2895: Next X5
Return 
L_3000: Rem "=============================== update customer file /custsales
If H5[7] = 10 Or H5[7] = 6 Goto L_3149
If H5[7] = 36 And Not(UD36) Return ! "only type 37
Mat Read #3,C0,252;C5
C5[0] = C5[0] + (T1 * TMULTI);C5[1] = C5[1] + (T1 * TMULTI)
C5[2] = C5[2] + (FND(L5[3]) * TMULTI);C5[3] = C5[3] + (FND(L5[3]) * TMULTI)
C5[4] = C5[4] + ((FND(L5[3]) - S9[12]) * TMULTI)
C5[5] = C5[5] + ((FND(L5[3]) - S9[12]) * TMULTI)
Mat Write #3,C0,252;C5;
A3[6] = A3[6] + (FND(L5[3]) - S9[12])
Mat P2 = Zer
Mat Read #6,C0,4;P2;
Gosub L_3150
Write #6,C0,0;H0[4];
Mat Write #6,C0,4;P2;
Write #6,C0,508;H0[8];
L_3149: Return 
L_3150: Rem "======================= add to monthly sales buckets
P2[0,0] = P2[0,0] + (T1 * TMULTI);P2[ARMONTH,0] = P2[ARMONTH,0] + (T1 * TMULTI)
P2[0,1] = P2[0,1] + (FND(L5[3]) * TMULTI)
P2[ARMONTH,1] = P2[ARMONTH,1] + (FND(L5[3]) * TMULTI)
P2[0,2] = P2[0,2] + (S9[12] * TMULTI)
P2[ARMONTH,2] = P2[ARMONTH,2] + (S9[12] * TMULTI)
Return 
UPDATE_WEEKLYSLS: Rem 2/weeklysls#
If H5[7] = 36 And Not(UD36) Return ! "only type 37
If Not(WEEKLYSLSFLAG) Return 
If L3
  PRODCODE$ = "Z ZZZZZZZZZZ" ! "non stock
  If NEWL4 And L3 Let L4 = NEWL4 ! "non stock
  If Not(NEWL4) And L3 Return ! "non stock record not there! ERROR!
  If L7[7]
    NETPOCOST = L7[7]
    POCOST = L7[7];AVGCOST = L7[7];BASECOST = L7[7]
  Else 
    NETPOCOST = L5[1]
    POCOST = L5[1];AVGCOST = L5[1];BASECOST = L5[1]
  End If 
Else 
  PRODCODE$ = L2$[1,12]
  If P9$[32,32] = "Y" ! warehouse pricing
    W$ = " ",W$;W$[1,12] = PRODCODE$;W$[13,14] = LWHSE Using "##"
    Search #25,2,1;W$,W9,E \ If E Gosub ERR_SEARCH
    Mat Read #25,W9,78;W3
    Read #25,W9,812;NETPOCOST;
    POCOST = W3[16];AVGCOST = W3[15];BASECOST = W3[18]
  Else ! regular prod file
    Mat Read #5,L4,156;B
    Read #5,L4,910;BASECOST2P
    BASECOST = BASECOST2P !! didn't want to dim basecost as 2%
    Mat Read #5,L4,1018;PFN;
    POCOST = B[10];AVGCOST = B[21];NETPOCOST = PFN[0]
  End If 
End If 
EXT = 1 ! how to extend
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2;CNVTA = BASECOST;AMOUNT = 0
If CNVTA Gosub L_20000 \ BASECOST = AMOUNT * EXT ! extend the cost
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2;CNVTA = POCOST;AMOUNT = 0
If CNVTA Gosub L_20000 \ POCOST = AMOUNT * EXT ! extend the cost
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2;CNVTA = NETPOCOST;AMOUNT = 0
If CNVTA Gosub L_20000 \ NETPOCOST = AMOUNT * EXT ! extend the cost
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2;CNVTA = AVGCOST;AMOUNT = 0
If CNVTA Gosub L_20000 \ AVGCOST = AMOUNT * EXT ! extend the cost
X$ = H0[8] Using "&&&&&&" ! invoice date
YY = X$[1,2]
MM = X$[3,4]
DD = X$[5,6]
Call "weeknum",MM,DD,YY,WN[]
CUSTCODE = 0
WEEKLYLOOPCTR = 1 ! we do this twice, 1st for cust=0 then for rea l cust
LOOP_WEEKLYSLS: Rem
WOY[0] = 0;WOY[1] = 0
For X = 0 To 7
  For Y = 0 To 9 \ DOW[X,Y] = 0 \ Next Y
Next X
SCRATCH$[1,4] = WN[1] Using "&&&&" ! year YYYY
SCRATCH$[5,6] = WN[0] Using "##" ! weeknumber
SCRATCH$[7,18] = PRODCODE$ ! prod
SCRATCH$[19,20] = H5[8] Using "##" ! div
SCRATCH$[21,22] = LWHSE Using "##" ! whse
SCRATCH$[23,28] = CUSTCODE Using "######" ! cust
Search #CH_WEEKLYSLS,2,1;SCRATCH$,REC_WEEKLYSLS,E \ If E > 1 Gosub ERR_SEARCH
If E
  E = 2 \ Search #CH_WEEKLYSLS,1,0;SCRATCH$,REC_WEEKLYSLS,E
  If E Gosub ERR_SEARCH
  Gosub WRITE_WEEKLYSLS
  Search #CH_WEEKLYSLS,4,1;SCRATCH$,REC_WEEKLYSLS,E
  If E Gosub ERR_SEARCH
  SCRATCH$[1,4] = WN[1] Using "&&&&" ! year YYYY
  SCRATCH$[5,6] = WN[0] Using "##" ! weeknumber
  SCRATCH$[7,12] = CUSTCODE Using "######"
  SCRATCH$[13,24] = PRODCODE$
  SCRATCH$[25,26] = H5[8] Using "##" ! div
  SCRATCH$[27,28] = LWHSE Using "##" ! whse
  Search #CH_WEEKLYSLS,4,2;SCRATCH$,REC_WEEKLYSLS,E
  If E Gosub ERR_SEARCH
  SCRATCH$[1,12] = PRODCODE$
  SCRATCH$[13,14] = H5[8] Using "##" ! div
  SCRATCH$[15,16] = LWHSE Using "##" ! whse
  SCRATCH$[17,22] = CUSTCODE Using "######"
  SCRATCH$[23,26] = WN[1] Using "&&&&"
  SCRATCH$[27,28] = WN[0] Using "##"
  Search #CH_WEEKLYSLS,4,3;SCRATCH$,REC_WEEKLYSLS,E
  If E Gosub ERR_SEARCH
  SCRATCH$[1,6] = CUSTCODE Using "######"
  SCRATCH$[7,10] = WN[1] Using "&&&&"
  SCRATCH$[11,12] = WN[0] Using "##"
  SCRATCH$[13,24] = PRODCODE$
  SCRATCH$[25,26] = H5[8] Using "##" ! div
  SCRATCH$[27,28] = LWHSE Using "##" ! whse
  Search #CH_WEEKLYSLS,4,4;SCRATCH$,REC_WEEKLYSLS,E
  If E Gosub ERR_SEARCH
End If 
Rem {begin src/inc/read.weeklysls.i}
Read #CH_WEEKLYSLS,REC_WEEKLYSLS,0;CUSTCODE
Read #CH_WEEKLYSLS,REC_WEEKLYSLS,4;PRODCODE$
Mat Read #CH_WEEKLYSLS,REC_WEEKLYSLS,16;WOY
Mat Read #CH_WEEKLYSLS,REC_WEEKLYSLS,20;DOW
Mat Read #CH_WEEKLYSLS,REC_WEEKLYSLS,500;WSDIV
Mat Read #CH_WEEKLYSLS,REC_WEEKLYSLS,502;WSWH
Rem {end read.weeklysls.i}
WOY[0] = WN[0]
WOY[1] = WN[1]
WSDIV = H5[8]
WSWH = L4[3]
DOW[0,0] = WN[4] - (WN[3] - 1) ! juliandate for monday
DOW[0,1] = DOW[0,1] + (T1 * TMULTI) ! units
DOW[0,2] = DOW[0,2] + (S9[4] * TMULTI) ! ext weight
DOW[0,3] = DOW[0,3] + (FND(L5[3]) * TMULTI) ! dollars
DOW[0,4] = DOW[0,4] + (BASECOST * TMULTI) ! unit
DOW[0,5] = DOW[0,5] + (S9[12] * TMULTI) ! ext load cost
DOW[0,6] = DOW[0,6] + (POCOST * TMULTI) ! UNIT (cm does -pocost)
DOW[0,7] = DOW[0,7] + (NETPOCOST * TMULTI) ! UNIT
DOW[0,8] = DOW[0,8] + (AVGCOST * TMULTI) ! UNIT
DOW[0,9] = DOW[0,9] + (GLCOST * TMULTI) ! EXT'D
DOW[WN[3],0] = WN[2] ! day ofthe year
DOW[WN[3],1] = DOW[WN[3],1] + (T1 * TMULTI) ! units
DOW[WN[3],2] = DOW[WN[3],2] + (S9[4] * TMULTI) ! ext weight
DOW[WN[3],3] = DOW[WN[3],3] + (FND(L5[3]) * TMULTI) ! dollars
DOW[WN[3],4] = DOW[WN[3],4] + (BASECOST * TMULTI)
DOW[WN[3],5] = DOW[WN[3],5] + (S9[12] * TMULTI) ! ext load cost
DOW[WN[3],6] = DOW[WN[3],6] + (POCOST * TMULTI)
DOW[WN[3],7] = DOW[WN[3],7] + (NETPOCOST * TMULTI)
DOW[WN[3],8] = DOW[WN[3],8] + (AVGCOST * TMULTI)
DOW[WN[3],9] = DOW[WN[3],9] + (GLCOST * TMULTI)
Gosub WRITE_WEEKLYSLS
If WEEKLYLOOPCTR = 1
  WEEKLYLOOPCTR = 2
  CUSTCODE = H0[4]
  Goto LOOP_WEEKLYSLS
End If 
If L3 And OLDL4 Let L4 = OLDL4 !"reset rec#
Return 
WRITE_WEEKLYSLS: Rem
Rem {begin src/inc/write.weeklysls.i}
Write #CH_WEEKLYSLS,REC_WEEKLYSLS,0;CUSTCODE
Write #CH_WEEKLYSLS,REC_WEEKLYSLS,4;PRODCODE$
Mat Write #CH_WEEKLYSLS,REC_WEEKLYSLS,16;WOY
Mat Write #CH_WEEKLYSLS,REC_WEEKLYSLS,20;DOW
Mat Write #CH_WEEKLYSLS,REC_WEEKLYSLS,500;WSDIV
Mat Write #CH_WEEKLYSLS,REC_WEEKLYSLS,502;WSWH
Rem {end write.weeklysls.i}
Return 
L_3200: Rem "================= cust sales tax, freight, misc + salestax file
If H5[7] = 36 Or H5[7] = 37 Return ! "already done IN 227B!
If H5[7] = 10 Or H5[7] = 6 Goto L_3350
Mat Read #3,C0,288;C6
Mat Read #3,C0,544;CFIN;
Mat Read #3,C0,624;C10
C6[0] = C6[0] + (T2[7] * TMULTI) \ C6[1] = C6[1] + (T2[7] * TMULTI)
C6[2] = C6[2] + (T2[5] * TMULTI) \ C6[3] = C6[3] + (T2[5] * TMULTI)
C10[0] = C10[0] + (T2[20] * TMULTI);C10[1] = C10[1] + (T2[20] * TMULTI)
C6[4] = C6[4] + (T2[3] * TMULTI) \ C6[5] = C6[5] + (T2[3] * TMULTI)
If TMULTI = 1
  C6[6] = C6[6] + T2[4] + T2[6] \ C6[7] = C6[7] + T2[4] + T2[6]
Else ! "(this is the way it is in 247!)
  C6[6] = C6[6] - T2[4] - T2[6] \ C6[7] = C6[7] - T2[4] - T2[6]
End If 
If TMULTI = 1
  CFIN[0] = CFIN[0] + 1
  CFIN[1] = CFIN[1] + 1
Else ! "credits
  CFIN[2] = CFIN[2] + 1
  CFIN[3] = CFIN[3] + 1
End If 
Write #3,C0,200;H0[8]
Mat Write #3,C0,288;C6
Mat Write #3,C0,544;CFIN
Mat Write #3,C0,624;C10;
Rem goto L_3350:
Mat Read #3,C0,728;PPU$;
Mat Read #3,C0,734;BPO$; ! "blanket PO
Mat Read #3,C0,754;BUDG; ! "budget / used
Mat Read #3,C0,766;BUDGD;
If BUDG[0] <= 0 Goto L_3350 ! "no budget - skip used update
If Len(BPO$) < 20 Let BPO$ = BPO$ + "                    " ! "fill to 20 chars!
If BPO$[1,1] <> "" And BPO$[1,5] <> "     " ! "is using Blanket PO
  If BPO$ <> P0$ Goto L_3350 ! "diff blanket po - skip rest
  FLAG[3] = 0 ! "if shiplist&Cust both have SAME Blanket PO - update BOTH!
End If 
If Not(FLAG[3]) ! "did not update shiplist budget
  If BUDGD[1] ! budget by date range
    If BUDGD[0] <= H0[10] And BUDGD[1] >= H0[10] ! ship date falls in budget period
      BUDG[1] = BUDG[1] + (T2[0] * TMULTI) ! "total invoice amount
    End If 
  Else ! no budget date range
    BUDG[1] = BUDG[1] + (T2[0] * TMULTI) ! "total invoice amount
  End If 
  Mat Write #3,C0,754;BUDG;
End If 
L_3350: Rem "===== now do sales tax file
Read #3,C0,498;TAXTYP
Gosub L_8900
Gosub L_8980
Mat Read #15,H4,0;TAXDESC$;
Mat Read #15,H4,24;D4
Mat Read #15,H4,132;TX0
Mat Read #15,H4,156;TX1
Mat Read #15,H4,222;TX2
If P60$[42,42] <> "Y" ! not tax by line option
  D4[0] = D4[0] + (T2[7] * TMULTI);D4[3] = D4[3] + (T2[7] * TMULTI)
  D4[1] = D4[1] + (T2[11] * TMULTI);D4[4] = D4[4] + (T2[11] * TMULTI)
  D4[2] = D4[2] + (T2[9] * TMULTI);D4[5] = D4[5] + (T2[9] * TMULTI)
  TX0[0] = TX0[0] + (T2[8] * TMULTI);TX0[2] = TX0[2] + (T2[8] * TMULTI)
  TX0[1] = TX0[1] + (T2[9] * TMULTI);TX0[3] = TX0[3] + (T2[9] * TMULTI)
Else 
  D4[0] = D4[0] + (TOT[3] * TMULTI);D4[3] = D4[3] + (TOT[3] * TMULTI)
  D4[1] = D4[1] + (MISCCHGS_TAXED * TMULTI);D4[4] = D4[4] + (MISCCHGS_TAXED * TMULTI)
  If FTAX <> 0
    If TAXDESC$[1,1] = "+"
      D4[1] = D4[1] + (T2[5] * TMULTI);D4[4] = D4[4] + (T2[5] * TMULTI)
    Else 
      If T2[8] <> 0
        D4[1] = D4[1] + (T2[5] * TMULTI);D4[4] = D4[4] + (T2[5] * TMULTI)
      End If 
    End If 
  End If 
  If H5[7] <> 6 And H5[7] <> 10
    If DTAX Let D4[1] = D4[1] - (T2[3] * TMULTI);D4[4] = D4[4] - (T2[3] * TMULTI)
    If HTAX Let D4[1] = D4[1] + (T2[6] * TMULTI);D4[4] = D4[4] + (T2[6] * TMULTI)
  End If 
End If 
If H5[7] = 6 Or H5[7] = 10
  TX1[4] = TX1[4] + (T2[3] * TMULTI);TX2[4] = TX2[4] + (T2[3] * TMULTI)
  TX1[7] = TX1[7] + (T2[6] * TMULTI);TX2[7] = TX2[7] + (T2[6] * TMULTI)
Else 
  If DTAX
    TX1[0] = TX1[0] + (T2[3] * TMULTI);TX2[0] = TX2[0] + (T2[3] * TMULTI)
  Else 
    TX1[4] = TX1[4] + (T2[3] * TMULTI);TX2[4] = TX2[4] + (T2[3] * TMULTI)
  End If 
  If HTAX
    TX1[3] = TX1[3] + (T2[6] * TMULTI);TX2[3] = TX2[3] + (T2[6] * TMULTI)
  Else 
    TX1[7] = TX1[7] + (T2[6] * TMULTI);TX2[7] = TX2[7] + (T2[6] * TMULTI)
  End If 
End If 
If FTAX <> 0
  If TAXDESC$[1,1] = "+"
    TX1[2] = TX1[2] + (T2[5] * TMULTI);TX2[2] = TX2[2] + (T2[5] * TMULTI) ! taxable freight
  Else 
    If T2[8] <> 0
      TX1[2] = TX1[2] + (T2[5] * TMULTI);TX2[2] = TX2[2] + (T2[5] * TMULTI) ! taxable freight
    Else 
      TX1[6] = TX1[6] + (T2[5] * TMULTI);TX2[6] = TX2[6] + (T2[5] * TMULTI) ! nontax freight
    End If 
  End If 
Else 
  TX1[6] = TX1[6] + (T2[5] * TMULTI);TX2[6] = TX2[6] + (T2[5] * TMULTI) ! nontax freight
End If 
TX1[1] = TX1[1] + (MISCCHGS_TAXED * TMULTI);TX2[1] = TX2[1] + (MISCCHGS_TAXED * TMULTI)
TX1[5] = TX1[5] + (MISCCHGS_NONTAXED * TMULTI);TX2[5] = TX2[5] + (MISCCHGS_NONTAXED * TMULTI)
Mat Write #15,H4,24;D4
Mat Write #15,H4,132;TX0
Mat Write #15,H4,156;TX1
Mat Write #15,H4,222;TX2;
Return 
L_3500: Rem ENTERED BY SALES
If H5[7] = 36 And Not(UD36) Return 
If H5[0] < 0 Or H5[0] > 999 Or Fra(H5[0]) Let H5[0] = 999
Mat Read #21,H5,20;EB
Gosub L_3560
Mat Write #21,H5,20;EB
Mat Read #21,H5,74;EB
Gosub L_3560
Mat Write #21,H5,74;EB;
Return 
L_3560: Rem ENTD BY ROUTINE
For X = 0 To 5
  If X = 2 Let EB[X] = EB[X] + (T2[7] * TMULTI) \ Goto L_3580
  If X = 4 Let EB[X] = EB[X] + ((T2[6] + T2[4]) * TMULTI) \ Goto L_3580
  EB[X] = EB[X] + (T2[X] * TMULTI)
L_3580: Next X
EB[6] = EB[6] + ((H5[13] - H5[14]) * TMULTI);EB[7] = EB[7] + 1
EB[8] = EB[8] + NOLINES
Return 
L_3600: Rem "===================== invoice (or credit) totals
If H5[7] = 36 And Not(UD36) Return 
X = L9[1] \ If X < 0 Let X = 0 Else If X > 8 Let X = 8
Mat Read #16,L3[3];Q2
Mat Read #16,L3[3],54;Q3
Q2[X] = Q2[X] + FND(L5[3])
Q3[X] = Q3[X] + S9[12]
Mat Write #16,L3[3];Q2
Mat Write #16,L3[3],54;Q3;
Return 
L_3700: Rem "=========================== update division file (DIVFLE)
If H5[7] = 36 And Not(UD36) Return 
If H5[8] < 1 Or H5[8] > 99 Let H5[8] = 1
Mat Read #29,H5[8],28;D0
D0[0] = D0[0] + (T2[1] * TMULTI)
D0[1] = D0[1] + (T2[17] * TMULTI)
D0[2] = D0[2] + 1
D0[4] = D0[4] + (T2[1] * TMULTI)
D0[5] = D0[5] + (T2[17] * TMULTI)
D0[6] = D0[6] + 1
Mat Write #29,H5[8],28;D0;
Return 
L_3800: Rem "=====================cmtot or invtot (freight)
If H5[7] = 36 And Not(UD36) Return 
X = OWHT1[1] \ If X < 0 Let X = 0 Else If X > 8 Let X = 8
Mat Read #16,0;Q2
Mat Read #16,0,54;Q3;
Q2[X] = Q2[X] + T2[5]
Q3[X] = Q3[X] + T2[20]
Mat Write #16,0;Q2;
Mat Write #16,0,54;Q3;
Return 
L_3900: Rem "=========== date breakdown
Y9 = J$[1,2]
M = J$[3,4]
D = J$[5,6]
D9 = 365 * Y9 + X9[M] + D
If M > 2 If Not(Fra(Y9 / 4)) Let D9 = D9 + 1
Return 
L_4000: Rem "====================== whole order accepted. delete it.
Return 
L_4200: Rem ==================================== clear out sordcash
Return 
L_4300: Rem "======================================= slscurr
If H5[7] = 36 And Not(UD36) Return 
If Not(C8[2]) Return 
If L3 Let A2$ = "Z ZZZZZZZZZZ" \ Goto L_4330
Read #5,L4,139;A2$;
L_4330: C2 = H0[4]
Mat P2 = Zer
A$ = " ",A$
A$[1,6] = C2 Using "######"
A$[7,18] = A2$[1,12]
A$[19,20] = H4[2] Using "##"
Search #18,2,1;A$,R1,E
If E > 1 Gosub ERR_SEARCH
If E = 1 Gosub L_4500 \ Goto L_4330
Mat Read #18,R1,16;P2
Gosub L_3150
Mat Write #18,R1,16;P2;
if sqlChan >= 0
	e = slscurr_UpdateSQLFromDL4(e$, intCo, a$, sqlChan,18)
	if e<>1 gosub err_search
end if
Return 
L_4500: Rem NEW REC
If Err 0 Gosub ERR_TRAP
E = 2 \ Search #18,1,0;A$,R1,E
If E Gosub ERR_SEARCH
Write #18,R1;A$[7,18];
Write #18,R1,12;C2;
For C = 0 To 12
  For I = 0 To 2
    P2[C,I] = 0
  Next I
Next C
Mat Write #18,R1,16;P2;
Write #18,R1,254;H4[2];
Mat Write #18,R1,256;P2;
C = 18 \ D = 1 \ V1 = R1
Gosub L_5000
If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_4650
E = 3 \ Search #18,1,0;A$,R1,E
Return 
L_4650: Rem DIR #2
A$ = " ",A$
A$[1,12] = A2$[1,12]
A$[13,18] = C2 Using "######"
A$[19,20] = H4[2] Using "##"
C = 18 \ D = 2 \ V1 = R1
Gosub L_5000
If E Gosub ERR_SEARCH
Return 
L_4800: Rem SALES TAX BY LINE ITEM
Return ! "Already Done
If P60$[42,42] <> "Y" Return 
If L6[5] Let TAXREC = L6[5] Else Let TAXREC = H4
Mat Read #15,TAXREC,24;D4 \ Mat Read #15,TAXREC,132;TX0
D4[0] = D4[0] + (LTAX1 * TMULTI);D4[3] = D4[3] + (LTAX1 * TMULTI)
If L6[5]
  TX0[0] = TX0[0] + (L5[3] * TMULTI);TX0[2] = TX0[2] + (L5[3] * TMULTI)
  D4[1] = D4[1] + (L5[3] * TMULTI);D4[4] = D4[4] + (L5[3] * TMULTI)
Else 
  TX0[1] = TX0[1] + (L5[3] * TMULTI);TX0[3] = TX0[3] + (L5[3] * TMULTI)
  D4[2] = D4[2] + (L5[3] * TMULTI);D4[5] = D4[5] + (L5[3] * TMULTI)
End If 
If TRACK[1] < 1 Mat Write #15,TAXREC,24;D4 \ Mat Write #15,TAXREC,132;TX0;
Return 
L_5000: Rem "====================== insert dir
Search #C,4,D;A$,V1,E \ If E > 2 Gosub ERR_SEARCH
If Not(E) Return 1
!Print 'RB';A$;"  ALREADY IN FILE!!" \ Return 
Return
L_5200: Rem "======================= product sales history
If H5[7] = 36 And Not(UD36) Return 
If NEWL4 And L3 Let L4 = NEWL4
If Not(NEWL4) And L3 Goto L_5289
P1 = L4
Mat P2 = Zer
Mat Read #4,P1,16;P2
Gosub L_3150
Mat Write #4,P1,16;P2;
L_5289: If L3 And OLDL4 Let L4 = OLDL4
Return 
L_5500: Rem GET CUST.REC.#
A$ = " ",A$
A$[1,6] = H0[4] Using M$[1,6]
Search #3,2,1;A$,V1,E
C0 = V1
If Not(E) Return 
! Print 'RB CR';"CUSTOMER # ";A$[1,6];" NOT FOUND!"
Gosub ERR_SEARCH
L_5600: Rem "================================= salesman file
If H5[7] = 37 Return ! "Only Comm $ for 36
For X5 = 0 To 4
  If SPLITFLAG = 0 ! "both use multiple slsm
    If X5 > 0 Goto L_5635
  End If 
  If SLSM[X5] = 0 Goto L_5635
  A$ = " ",A$
  A$ = SLSM[X5] Using "###"
  Search #13,2,1;A$,V1,E \ If E > 1 Gosub ERR_SEARCH
  !If E Print 'RB CR';"SALESMAN # ";A$;" NOT FOUND!" \ Gosub ERR_SEARCH
  if E gosub ERR_SEARCH
  Mat Read #13,V1,118;S5
  S5[2] = S5[2] + (SCOM[X5] * TMULTI)
  S5[3] = S5[3] + (SCOM[X5] * TMULTI)
  Mat Write #13,V1,118;S5;
L_5635: Next X5
Return 
L_5650: Rem "================================ salesman file / sls
If H5[7] = 36 And Not(UD36) Return 
A$ = " ",A$
A$ = L4[1] Using "###"
Search #13,2,1;A$,V1,E \ If E Gosub ERR_SEARCH
Mat Read #13,V1,142;D2
If Not(L3[3]) Let L3[3] = 1
X = L3[3] - 1
D2[X,0] = D2[X,0] + (T1 * TMULTI);D2[X,1] = D2[X,1] + (T1 * TMULTI)
D2[X,2] = D2[X,2] + (FND(L5[3]) * TMULTI)
D2[X,3] = D2[X,3] + (FND(L5[3]) * TMULTI)
D2[X,4] = D2[X,4] + ((FND(L5[3]) - S9[12]) * TMULTI)
D2[X,5] = D2[X,5] + ((FND(L5[3]) - S9[12]) * TMULTI)
Mat Write #13,V1,142;D2;
Mat P2 = Zer
Mat Read #20,V1,4;P2
Gosub L_3150
Mat Write #20,V1,4;P2
Write #20,V1,0;L4[1]
Write #20,V1,508;H0[8];
Return 
L_5900: Rem CHK BILLTO
C9 = H0[1] \ A$ = " ",A$ \ A$ = C9 Using "######"
Search #3,2,1;A$,V1,E
If Not(E) Return 
If E > 1 Gosub ERR_SEARCH
! Print 'RB CR';"BILL TO CUSTOMER # ";A$[1,6];" NOT FOUND!"
Gosub ERR_SEARCH
L_6000: Rem ! "================= Setup messages file
If H5[7] = 36 And Not(UD36) Return ! "only ot 36 if no shipping
RTAX = 0;X1 = 801 ! "in non-printing Area
NMSG: Rem "Set up key
A$ = N0 Using "######";A$[7] = X1 Using "###"
Search #14,2,1;A$,V1,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  X1 = X1 + 1 \ If X1 > 999 Let X1 = 700
  Goto NMSG
Else 
  E = 2;V1 = 0
  Search #14,1,0;A$,V1,E \ If E Gosub ERR_SEARCH
  Search #14,4,1;A$,V1,E \ If E Gosub ERR_SEARCH
  M1$ = " ",M1$
  If Not(RTAX)
    X$ = CURDATE Using "&&&&&&" \ Call FormatDate(X$,X$,E)
    If E
      X$ = "" \ Call Time(X$) \ X$[13] = ""
    End If 
    M1$ = "REPRICED " + X$ + " INVOICE "
    X$ = REFINV Using "##########"
    M1$ = M1$ + X$
    If H5[7] = 36 ! "OT 36 not repriced
      If UD36 ! "first tell'em no shipping
        X$ = " ",X$
        X$[1,2] = ARMONTH Using "&&";X$[4,5] = YR Using "&&"
        X$[3,3] = "/"
        M1$ = "NO SHIPPING INVOICES MONTH OF " + X$[1,5]
      End If 
    End If 
    Mat Write #14,V1,0;M1$;
    M1 = X1
    Write #14,V1,40;M1;
    X1 = X1 + 1;RTAX = 1
    If Not(UD36) Goto NMSG
  Else 
    If BTTAX Let M1$ = "BILLING INVOICE TAXABLE - SEE ABOVE INV#"
    If Not(BTTAX) Let M1$ = "BILLING INVOICE NOT TAXABLE"
    M1 = X1
    Mat Write #14,V1,0;M1$;
    Write #14,V1,40;M1;
  End If 
End If 
Return 
GETCOMMMSG: Rem "Commission message if OT 36 and <>RefInv
X$ = Str$(REFINV)
M1$ = "COMMISSION WAS FIGURED ON INVOICE " + X$
Return 
L_6100: Rem B/O REL RESET
Return 
L_6200: Rem roltag
Return 
L_6170: Rem "============================== substitute prod sales history
If H5[7] = 36 And Not(UD36) Return 
If L3 Return 
Read #5,L4,139;A2$;
L_6185: WHSE = H4[2]
Mat P2 = Zer
A$ = " ",A$
A$[1,12] = S3$[21,33]
A$[13,24] = A2$[1,12]
A$[25,26] = H4[2] Using "##"
Search #24,2,1;A$,R1,E
If E > 1 Gosub ERR_SEARCH
If E = 1 Gosub L_6255 \ Goto L_6185
Mat Read #24,R1,24;P2;
Gosub L_3150
Mat Write #24,R1,24;P2;
Return 
L_6255: Rem "substitute record not there. make one!
If Err 0 Gosub ERR_TRAP
E = 2 \ Search #24,1,0;A$,R1,E
If E Gosub ERR_SEARCH
Write #24,R1;A$[1,24];
For C = 0 To 12
  For I = 0 To 2
    P2[C,I] = 0
  Next I
Next C
Mat Write #24,R1,24;P2;
Write #24,R1,258;WHSE;
C = 24 \ D = 1 \ V1 = R1
Gosub L_5000
If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_6365
E = 3 \ Search #24,1,0;A$,R1,E
Return 
L_6365: Rem "build dir #2
A$ = " ",A$
A$[1,12] = A2$[1,12]
A$[13,24] = S3$[21,33]
A$[25,26] = H4[2] Using "##"
C = 24 \ D = 2 \ V1 = R1
Gosub L_5000
If E Gosub ERR_SEARCH
Return 
SUBSTUSG: Rem "Update Usage of Original if Substituted
SUBSUP = 0 ! "inform 7900: if updated or not (not default)
If P61$[48,48] <> "Y" Return ! "not flagged
If S3$[21,21] = "" Or S3$[21,25] = "     " Return ! "no prod code
W$ = " ",W$;W$ = S3$[21,32]
Search #5,2,1;W$,R[5],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Return ! "can't find original product!
Mat Read #5,R[5],256;OPA;
Mat Read #5,R[5],512;OPFU1;
Mat Read #5,R[5],554;OPFU2;
OPT1 = T1 ! "set to same
If OLS2[0] = 1 Or OLS2[0] = 2 ! "it's been cut!
  If OLS2[1] Let OPT1 = OPT1 * OLS2[1]
End If 
If PFU1[0] = OPFU1[0] Goto GET_OPWHSE ! "base is the same - proceed!
For X = 1 To 7 ! "find matching u/m
  If OPFU1[X] ! "only non-zero
    For X1 = 0 To 7
      If PFU1[X1] And OPFU1[X] = PFU1[X1] Goto GOT_OPUM
    Next X1
  End If 
Next X
Return ! "no U/M Matches - cancel this sucker
GOT_OPUM: Rem "convert subs prod from base to match um for original
OPUM = X;SPUM = X1
For X = 0 To 33 ! "save u/m variables for this invoiced product
  SPA[X] = A[X]
  If X <= 20 Let SPFU1[X] = PFU1[X]
  If X <= 6 Let SPFU2[X] = PFU2[X]
Next X
CNVTU[0] = 0;CNVTU[1] = PFU1[SPUM];CNVTU[2] = 1
CNVTA = T1 \ Gosub L_20000
OPT1 = AMOUNT ! "now in matching U/M
For X = 0 To 33 ! "move original prod U/M stuff in
  A[X] = OPA[X]
  If X <= 20 Let PFU1[X] = OPFU1[X]
  If X <= 6 Let PFU2[X] = OPFU2[X]
Next X
CNVTU[0] = PFU1[OPUM];CNVTU[1] = 0;CNVTU[2] = 1
CNVTA = OPT1 \ Gosub L_20000
OPT1 = AMOUNT ! "from matching to Base for Original Prod
For X = 0 To 33 ! "set back to the U/M for Invoice Line Product
  A[X] = SPA[X]
  If X <= 20 Let PFU1[X] = SPFU1[X]
  If X <= 6 Let PFU2[X] = SPFU2[X]
Next X
GET_OPWHSE: Rem "get whse record for original prod
W$ = " ",W$;W$[1,12] = S3$[21,32];W$[13,14] = LWHSE Using "##"
Search #25,2,1;W$,W9,E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto SUBSTUDONE ! "can't update whats not there
Mat Read #25,W9,228;W5
Mat Read #25,W9,800;WHMISC
If H5[7] = 7 Goto S_7934
If L3[0] Or Not(L3[1]) Goto SUBSTUDONE
If H5[7] = 8 Goto S_7945 ! OR H5[7]=16 GOTO S_7945:
If H5[7] = 16 And WHMISC[6] <> 1 Goto S_7945 ! everyone else - no update
S_7934: Rem
If CUSTOM_CUSTOMER$ = "HTBERRY"
  If H5[7] <> 35 Let W5[0] = W5[0] + (OPT1 * TMULTI);W5[ARMONTH] = W5[ARMONTH] + (OPT1 * TMULTI)
Else 
  W5[0] = W5[0] + (OPT1 * TMULTI);W5[ARMONTH] = W5[ARMONTH] + (OPT1 * TMULTI)
End If 
SUBSUP = 1 ! "went through - Don't update Substitute
S_7945: Rem "
Mat Write #25,W9,228;W5;
SUBSTUDONE: Rem "
Return 
L_6500: Rem "============================== update ship history
If H5[7] = 36 And Not(UD36) Return 
If TMULTI = -1 Return ! "not on credits
If OLS2 = 3 Return 
Mat Read #1,60,6;FLG$;
If FLG$[1,1] = "N" Return 
Gosub L_10500
If Err 0 Rem
Close #22
Mat Read #1,88,2496;K5$;
Open #22,K5$
If Err 0 Gosub ERR_TRAP
K5$ = " ",K5$;K5$[1,6] = H0[4] Using "######";K5$[7,12] = H0[7] Using "######"
K5$[13,15] = L3[2] Using "###" \ K5$[16,21] = H0[10] Using "######"
If RESTART Search #22,2,1;K5$,R1[9],E \ If Not(E) Goto SHIPHISTDONE
E = 2 \ Search #22,1,0;K5$,R1[9],E \ If E Gosub ERR_SEARCH
K5$[22,28] = R1[9] Using "###### "
Search #22,4,1;K5$,R1[9],E \ If E Gosub ERR_SEARCH
S$ = " ",S$ \ For X = 0 To 20 \ S7[X] = 0 \ Next X
S$[1,10] = P0$;S$[11,14] = SUNIT$[1,4];S$[15,18] = PUNIT$[1,4]
S$[19,30] = L2$[1,12]
S7[0] = H0[7];S7[1] = H0[7];S7[2] = OREF[1];S7[3] = L3[2];S7[4] = SUNIT[0]
S7[5] = SUNIT[2];S7[6] = H0[10];S7[7] = PUNIT;S7[8] = L5[3];S7[9] = H0[9]
S7[10] = 0 \ S7[11] = 0
S7[12] = H0[4] \ S7[13] = L4[0] \ S7[14] = L3[0]
S7[15] = SUNIT[1]
If Not(A9) Let S7[10] = 411 \ S7[11] = CURDATE
Mat Write #22,R1[9],0;S$
Mat Write #22,R1[9],30;S7;
SHIPHISTDONE: Close #22
Return 
L_6600: Rem BILL AND HOLD NEXT SHIP DATE !
Return 
L_6640: Rem "============================= non stock sales history
If H5[7] = 36 And Not(UD36) Return 
L_6655: C2 = S9[14] \ WHSE = H4[2]
If S3$[1,4] = "    " Or Len(S3$) = 0 Let S3$[1,20] = "99999999999999999999"
Mat N2 = Zer
A$ = " ",A$
A$[1,6] = C2 Using "######"
A$[7,26] = S3$[1,20]
A$[27,28] = H4[2] Using "##"
Search #23,2,1;A$,R1,E \ If E > 1 Gosub ERR_SEARCH
If E Gosub L_6725 \ Goto L_6655
Mat Read #23,R1,24;N2
Mat Read #23,R1,416;NS
Gosub L_6890
Mat Write #23,R1,24;N2
If HA3[1] Let NS[0] = HA3[1]
Mat Write #23,R1,416;NS;
Return 
L_6725: Rem "non stock record not there. make one!
If Err 0 Gosub ERR_TRAP
E = 2 \ Search #23,1,0;A$,R1,E \ If E Gosub ERR_SEARCH
Write #23,R1;A$[7,26];
Write #23,R1,20;C2;
For C = 0 To 12
  For I = 0 To 4
    N2[C,I] = 0
  Next I
Next C
Mat Write #23,R1,24;N2;
Write #23,R1,414;WHSE;
NS[0] = 0;NS[1] = 0 \ Mat Write #23,R1,416;NS;
C = 23 \ D = 1 \ V1 = R1
Gosub L_5000 \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_6835
E = 3 \ Search #23,1,0;A$,R1,E
Return 
L_6835: Rem "build dir #2
A$ = " ",A$
A$[1,20] = S3$[1,20]
A$[21,26] = S9[14] Using "######"
A$[27,28] = H4[2] Using "##"
C = 23 \ D = 2 \ V1 = R1
Gosub L_5000 \ If E Gosub ERR_SEARCH
Return 
L_6890: Rem "=========================== add to non stock sales buckets
N2[0,0] = N2[0,0] + (T1 * TMULTI);N2[ARMONTH,0] = N2[ARMONTH,0] + (T1 * TMULTI)
N2[0,1] = N2[0,1] + (FND(L5[3]) * TMULTI)
N2[ARMONTH,1] = N2[ARMONTH,1] + (FND(L5[3]) * TMULTI)
N2[0,2] = N2[0,2] + (S9[12] * TMULTI)
N2[ARMONTH,2] = N2[ARMONTH,2] + (S9[12] * TMULTI)
X = 1 \ If T1 < 1 Let X = -1
N2[0,3] = N2[0,3] + (X * FNR(Abs((L6[2] * L7[4]) / UNF[4])) * TMULTI)
N2[ARMONTH,3] = N2[ARMONTH,3] + (X * FNR(Abs((L6[2] * L7[4]) / UNF[4])) * TMULTI)
N2[0,4] = N2[0,4] + (X * S9[4] * TMULTI)
N2[ARMONTH,4] = N2[ARMONTH,4] + (X * S9[4] * TMULTI)
Return 
L_7000: Rem "============================ process b'ord line
A9 = 99
If TRACK[1] > 16 Goto L_1840 ! skip this already done
If TRACK[1] < 15 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
Goto L_1840
L_7400: Rem "===================== update non stocks
OLDL4 = L4 \ NEWL4 = 0
If H5[7] = 36 And Not(UD36) Goto L_7495
If TRACK[1] > 1 Goto L_7495
Gosub L_30000
Gosub L_10500 \ T1 = SUNIT[2]
L8 = L3[3]
L8[1] = (T1 * TMULTI)
L8[2] = (L5[1] * TMULTI)
L8[3] = (OLM[3] * TMULTI)
L8[4] = (L5[3] * TMULTI)
X2 = 0 \ If Not(L7[3]) Let X2 = -1
If H5[7] = 24 Let X2 = 0
If H5[7] = 4 And (L7[2] > L7[0] + S9[6] Or L7[2] > QPB + S9[7]) Let X2 = 0
If H5[7] = 15 And (L7[2] > L7[0] + S9[6] Or L7[2] > QPB + S9[7]) Let X2 = 0
OLDL4 = L4 \ NEWL4 = 0
NS$ = " ",NS$ \ NS$[1,12] = "Z ZZZZZZZZZZZZ"
Search #5,2,1;NS$,L4,E \ If E > 1 Gosub ERR_SEARCH
If E Let L4 = 0 Else Let NEWL4 = L4
If L4 Goto L_1493 Else Let L4 = OLDL4
L_7495: If TRACK[1] < 2 Let TRACK[1] = TRACK[1] + 1 \ Write #80,0,2;TRACK[1];
Goto L_1600
L_7500: Rem "======================== set up header and keep this b'order
If TRACK[0] > 10 Goto KEEP_BACKORDER_DONE
If TRACK[0] < 11 Let TRACK[0] = 10 \ Write #80,0,0;TRACK[0];
KEEP_BACKORDER_DONE: Return 
L_7900: Rem "==================================== update warehouse file
If H5[7] = 36 Or H5[7] = 37 Return ! "already Done!!in 227b
If L3[0] Goto L_7954
SUBSUP = 0 ! "as default update usage here
If Int(S9[16]) = 1 Gosub SUBSTUSG ! "substituted - Update Original Prod usg?
W$ = CURDATE Using "######" \ M9 = W$[3,4]
W$ = " ",W$;W$[1,12] = L2$[1,12];W$[13,14] = H4[2] Using "##"
Search #25,2,1;W$,W9,E \ If E Gosub ERR_SEARCH
Mat Read #25,W9,32;W1
Mat Read #25,W9,38;W2
Mat Read #25,W9,78;W3
Mat Read #25,W9,228;W5 \ Mat Read #25,W9,444;WH8
Mat Read #25,W9,780;WHLV \ Mat Read #25,W9,696;W7
Mat Read #25,W9,800;WHMISC
Mat Read #5,L4,670;U4;
If H5[7] = 7 Goto L_7934
If L3[0] Or Not(L3[1]) Goto L_7954
If H5[7] = 8 Goto L_7945 ! OR H5[7]=16 GOTO L_7945: ! "consignment (no sales to record)
If H5[7] = 16 And WHMISC[6] <> 1 Goto L_7945 ! everyone else - no update
L_7934: Rem
If CUSTOM_CUSTOMER$ = "HTBERRY"
  If Not(SUBSUP) If H5[7] <> 35 Let W5[0] = W5[0] + (T1 * TMULTI);W5[ARMONTH] = W5[ARMONTH] + (T1 * TMULTI) ! "unit sales (ytd/mtd)
Else 
  If Not(SUBSUP) Let W5[0] = W5[0] + (T1 * TMULTI);W5[ARMONTH] = W5[ARMONTH] + (T1 * TMULTI) ! "unit sales (ytd/mtd)
End If 
If W3[0] > 0 Goto L_7945
If W7[8] And Not(W7[9]) Goto L_7945
W7[8] = CURDATE;W7[11] = W7[11] + 1;W7[9] = 0
L_7945: Mat Write #25,W9,32;W1
W2[6] = H0[8] \ Mat Write #25,W9,38;W2
Mat Write #25,W9,78;W3
Mat Write #25,W9,228;W5
Mat Write #25,W9,444;WH8
Mat Write #25,W9,780;WHLV \ Mat Write #25,W9,696;W7;
L_7954: Return 
L_8000: Rem "================================== DIVISION HISTORY FILE
If H5[7] = 36 And Not(UD36) Return 
If Not(L3[0]) Let A2$[1,12] = L2$[1,12] Else Let A2$[1,12] = "Z ZZZZZZZZZZ"
KEY1$ = " ",KEY1$ ! NO MORE DDF - ALWAYS 4 digits!
KEY1$[1,6] = H0[4] Using "######" ! "cust
KEY1$[7,10] = L9[1] Using "####" ! "dept
KEY1$[11,22] = A2$[1,12] ! "prod
KEY1$[23,24] = H5[7] Using "##" ! "order type
KEY1$[25,26] = H5[8] Using "##" ! "division
KEY1$[27,28] = LWHSE Using "##" ! "whse
KEY1$[29,30] = MT$[1,2] ! "mat code
KEY1$[31,32] = L3[3] Using "##" ! "category
KEY1$[33,36] = L2$[17,20] ! "commodity
Search #2,2,1;KEY1$,R2,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_8330 ! "already there
R2 = 0
E = 2 \ Search #2,1,0;KEY1$,R2,E \ If E Gosub ERR_SEARCH
KEY2$ = " ",KEY2$
KEY2$[1,8] = KEY1$[29,36] ! "mat, cat, comm
KEY2$[9,20] = KEY1$[11,22] ! "prod
KEY2$[21,24] = KEY1$[25,28] ! "div, whse
KEY2$[25,26] = KEY1$[23,24] ! "type
KEY2$[27,36] = KEY1$[1,10] ! "cust, dept
KEY3$ = " ",KEY3$
KEY3$[1,4] = KEY2$[21,24] ! "div, whse
KEY3$[5,14] = KEY2$[27,36] ! "cust, dept
KEY3$[15,34] = KEY2$[1,20] ! "mat, cat, comm, prod
KEY3$[35,36] = KEY2$[25,26] ! "type
KEY4$ = " ",KEY4$
KEY4$[1,4] = KEY3$[1,4] ! "div, whse
KEY4$[5,24] = KEY3$[15,34] ! "mat, cat, comm, prod
KEY4$[25,34] = KEY3$[5,14] ! "cust, dept
KEY4$[35,36] = KEY3$[35,36] ! "type
KEY5$ = " ",KEY5$
KEY5$[1,4] = KEY3$[1,4] ! "div, whse
KEY5$[5,6] = KEY3$[35,36] ! "type
KEY5$[7,36] = KEY3$[5,34] ! "cust, dept, mat, cat, comm, prod
KEY6$ = " ",KEY6$
KEY6$[1,12] = KEY3$[23,34] !  ! "prod
KEY6$[13,16] = KEY3$[1,4] ! "div, whse
KEY6$[17,28] = KEY4$[25,36] ! "cust, dept, type
KEY6$[29,36] = KEY2$[1,8] ! "mat, cat, comm
Search #2,4,1;KEY1$,R2,E \ If E Gosub ERR_SEARCH
Search #2,4,2;KEY2$,R2,E \ If E Gosub ERR_SEARCH
Search #2,4,3;KEY3$,R2,E \ If E Gosub ERR_SEARCH
Search #2,4,4;KEY4$,R2,E \ If E Gosub ERR_SEARCH
Search #2,4,5;KEY5$,R2,E \ If E Gosub ERR_SEARCH
Search #2,4,6;KEY6$,R2,E \ If E Gosub ERR_SEARCH
For X = 0 To 12 \ For Y = 0 To 2
    P2[X,Y] = 0;LYP2[X,Y] = 0
  Next Y \ Next X
For X = 0 To 12 \ GLCTY[X] = 0 \ Next X
DSP3[0] = L9[1]
DSP3[1] = H4[2]
DSP3[2] = H5[8]
DSP3[3] = H5[7]
DSP3[4] = L3[3]
DSP3$ = " ",DSP3$
DSP3$[1,4] = L2$[17,20]
DSP3$[5,6] = MT$[1,2]
C2 = H0[4]
Mat Write #2,R2,0;A2$
Mat Write #2,R2,12;C2
Mat Write #2,R2,16;P2
Mat Write #2,R2,250;LYP2
Mat Write #2,R2,488;DSP3
Mat Write #2,R2,508;DSP3$
Mat Write #2,R2,514;GLCTY
Mat Write #2,R2,592;GLCTY;
L_8330: Mat Read #2,R2,16;P2
If P9$[20,20] <> "F" Goto L_8350
If Not(L3[0]) Goto L_8350
T1 = S9[4]
If Sgn(L7[4]) <> Sgn(T1) And L7[4] <> 0 Let T1 = - T1
If TMULTI = -1 And (H3[1] = 3 Or (L3[1] = 0 And L5[1] = 0)) Let T1 = 0
L_8350: Gosub L_3150
T1 = L7[4]
If L3[0] Let T1 = SUNIT[2]
If H5[7] = 15
  T1 = 0 \ If Not(H0[5]) Let T1 = L7[2]
End If 
If TMULTI = -1 And (H3[1] = 3 Or (L3[1] = 0 And L5[1] = 0)) Let T1 = 0
Mat Write #2,R2,16;P2;
Mat Read #2,R2,514;GLCTY
GLCTY[0] = GLCTY[0] + (GLCOST * TMULTI)
GLCTY[ARMONTH] = GLCTY[ARMONTH] + (GLCOST * TMULTI)
Mat Write #2,R2,514;GLCTY;
If RDMSFLAG System "echo " + Str$(R2) + " >> 6/divhaccept" ! rdms record file
Return 
L_8900: Rem CHECK TO SEE IF FREIGHT IS TAXABLE
FTAX = 0 \ HTAX = 0 \ DTAX = 0 \ MTAX = 0
If SRN[4] Let TAXTYP = SRN[4]
Mat Read #30,TAXTYP,36;TAX;
FTAX = TAX[99]
DTAX = TAX[100]
MTAX = TAX[98]
HTAX = TAX[97]
Return 
L_8980: Rem =============  misc charges - taxable & nontaxable
MISCCHGS_TAXED = 0;MISCCHGS_NONTAXED = 0;FREIGHTTAX = 0;FREIGHTNONTAX = 0
For X = 0 To 9
  If MCTXBL[X] = 0
    MISCCHGS_NONTAXED = MISCCHGS_NONTAXED + MCHARGE[X,0]
  Else 
    MISCCHGS_TAXED = MISCCHGS_TAXED + MCHARGE[X,0]
  End If 
Next X
Return 
OUTEND: Rem EXIT
!Print @0,22;'RB CE';"COMPLETE ";
!Print ACC_CTR;" INVOICE(S) ACCEPTED ";
!Signal 3,40
!Print 'CS'
If statchan print #statchan;"EVAP EOM COMPLETE ";Str$(ACC_CTR);" INVOICE(S) UPDATED "
For X = 0 To 99
  If Err 0 Rem
  If X <> 1 Close #X
Next X
If Err 0 Gosub ERR_TRAP
! call programdump("tmp/evudone.txt!","")
End 
RESTART_EXIT: Close 
! Chain ""
END
L_10000: Rem "================= check msds history
If TMULTI = -1 Return ! "not on credits
If SRN[2] Let MSDS2[0] = SRN[2] Else Let MSDS2[0] = H0[4]
MSDS2[1] = SRN[1]
K6$ = " ",K6$
K6$[1,6] = MSDS2[0] Using "######" ! "shipping cust code
K6$[7,12] = MSDS2[1] Using "######" ! ship to code
K6$[13,22] = S9[17] Using "##########" ! "msds sheet #
K6$[23,34] = L2$[1,12] ! "prod code
Search #26,2,1;K6$,R6,E
If Not(E) Goto L_10120
If E > 1 Gosub ERR_SEARCH
E = 2 \ Search #26,1,0;K6$,R6,E
If E Gosub ERR_SEARCH
Search #26,4,1;K6$,R6,E
If E Gosub ERR_SEARCH
L_10120: Write #26,R6,0;H0[9];
Write #26,R6,4;H0[7];
Write #26,R6,12;H0[4];
Write #26,R6,16;S9[17];
Write #26,R6,22;L2$[1,12];
Mat Write #26,R6,34;MSDS2; ! ship to customer
Write #26,R6,42;INVNO; ! " inv#
Return 
L_10500: Rem CONVERT TO SELLING AND PRICE UNIT (set-up for ORDSHIPHSTx)
For X = 0 To 2
  CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1;CNVTA = L7[X + 2];AMOUNT = 0
  If CNVTA Gosub L_20000
  SUNIT[X] = AMOUNT
Next X
CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = L6[1];AMOUNT = 0
If CNVTA Gosub L_20000
L6[1] = AMOUNT
CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = OLM[3];AMOUNT = 0
If CNVTA Gosub L_20000
PUNIT = AMOUNT
If UN[0] = -1 Let SUNIT$ = "CWT "
If UN[0] = -2 Let SUNIT$ = "LOT "
If UN[0] = -3 Let SUNIT$ = "LB  "
If UN[1] = -1 Let PUNIT$ = "CWT "
If UN[1] = -2 Let PUNIT$ = "LOT "
If UN[1] = -3 Let PUNIT$ = "LB  "
If UN[0] > 0 Mat Read #27,UN[0],10;SUNIT$;
If UN[0] > 0 Mat Read #27,UN[1],10;PUNIT$;
Return 
L_12000: Rem UPDATE SPECIAL PRICE FILE
If H5[7] = 36 And Not(UD36) Return 
CUST = 0
If L9[0] = 3 Or L9[0] = 7 Or L9[0] = 8 Or L9[0] = 11 Or L9[0] = 16 Let CUST = 999999
If L9[0] = 2 Or L9[0] = 4 Or L9[0] = 6 Or L9[0] = 12 Or L9[0] = 13 Or L9[0] = 15 Let CUST = H0[4]
If L3[0] And (L9[0] = 15 Or L9[0] = 16) Return ! non-stk - no cost group
If Not(CUST) Return 
SP$ = " ",SP$
If L9[0] = 2 Or L9[0] = 3 Or L9[0] = 13 Let SP$[1,6] = CUST Using "######";SP$[7,18] = L2$[1,12]
If L9[0] = 6 Or L9[0] = 8 Let SP$[1,6] = CUST Using "######";SP$[7,7] = "#"
If L9[0] = 4 Or L9[0] = 7 Let SP$[1,6] = CUST Using "######";SP$[7,7] = "*";SP$[8,11] = L2$[17,20]
If L9[0] = 15 Or L9[0] = 16 Let SP$[1,6] = CUST Using "######";SP$[7,7] = "-";SP$[8,18] = PRODA$[116,126]
If L9[0] <> 11 And L9[0] <> 12 Goto L_12035
SP$[1,6] = CUST Using "######";SP$[7,7] = "&"
If PFU1[19] > 0 Mat Read #27,PFU1[19],10;SPUNIT$;
SP$[8,11] = SPUNIT$[1,4];SP$[12,15] = PFU1[19] Using "####"
L_12035: SP$[19] = "" \ If OLM[2] Let SP$[1,6] = OLM[2] Using "C#####"
Search #28,2,1;SP$,SP,E
If E Return 
Mat Read #28,SP,12;SP1
Mat Read #28,SP,46;SPC4 \ Mat Read #28,SP,138;SPC5
Mat Read #5,L4,156;B
SP1[3] = CURDATE
SPC4[4] = SPC4[4] + (L7[4] * TMULTI)
SPC4[6] = SPC4[6] + (L5[3] * TMULTI)
If SP1[1] Let SPC4[5] = SPC4[5] + (((B[8] * L7[4]) - (SPC5[2] * L7[4])) * TMULTI)
Mat Write #28,SP,12;SP1
Mat Write #28,SP,46;SPC4;
Return 
L_13500: Rem ========== UPDATE PROD/WHSE SALES
If H5[7] = 36 And Not(UD36) Return 
If L3[0] Return 
W$ = " ",W$;W$[1,12] = L2$[1,12];W$[13,14] = H4[2] Using "##"
Search #37,2,1;W$,W9,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  W9 = 0;E = 2 \ Search #37,1,0;W$,W9,E \ If E Gosub ERR_SEARCH
  Write #37,W9,0;L2$[1,12];
  Write #37,W9,12;H4[2];
  Mat Write #37,W9,14;LYP2;
  Mat Write #37,W9,248;LYP2;
  For I = 0 To 12 \ O7[I] = 0 \ Next I
  Mat Write #37,W9,482;O7;
  Mat Write #37,W9,560;O7;
  Mat Write #37,W9,638;O7;
  Mat Write #37,W9,716;O7;
  Search #37,4,1;W$,W9,E \ If E Gosub ERR_SEARCH
End If 
Mat Read #37,W9,14;P2
Gosub L_3150
Mat Write #37,W9,14;P2;
Return 
SHPL_SALES: Rem "shiplist sales file
If H5[7] = 36 And Not(UD36) Return 
If SRN[3] = 0 Or SRN[3] = 5 Return ! "not shiplist related (custfle or manual)
KEY6$ = " ",KEY6$
KEY6$[1,6] = SRN[2] Using "######" ! "shiplist customer
KEY6$[7,7] = "."
KEY6$[8] = SRN[1] Using "&&&&&&" ! "shiplist number
Search #42,2,1;KEY6$,R[42],E \ If E > 1 Gosub ERR_SEARCH
If E Return ! "no shiplist record - no update!
If L3 Let A2$ = "Z ZZZZZZZZZZ" \ Goto SLNSTK ! "non stock
Read #5,L4,139;A2$;
SLNSTK: C2 = SRN[2]
SHPL = SRN[1] ! "include default shiplist (0)
Mat P2 = Zer
A$ = " ",A$
A$[1,6] = C2 Using "######" ! "cust
A$[7,12] = SHPL Using "######" ! "not zero fill
A$[13,24] = A2$[1,12] ! "prod
A$[25,26] = LWHSE Using "##" ! "whse
Search #43,2,1;A$,R1,E
If E > 1 Gosub ERR_SEARCH
If E = 1 Gosub NWCSLR \ Goto SLNSTK ! "make the record and try again
Mat Read #43,R1,16;P2
Gosub L_3150 ! "build monthly buckets
Mat Write #43,R1,16;P2;
Return 
NWCSLR: Rem NEW REC
If Err 0 Gosub ERR_TRAP
E = 2 \ Search #43,1,0;A$,R1,E
If E Gosub ERR_SEARCH
Write #43,R1;A$[13,24]; ! "product code
Write #43,R1,12;C2; ! "custcode
For C = 0 To 12
  For I = 0 To 2
    P2[C,I] = 0
  Next I
Next C
Mat Write #43,R1,16;P2; ! "tyr sales
Write #43,R1,250;SHPL; ! "shiplist #
Write #43,R1,254;LWHSE;
Mat Write #43,R1,256;P2; ! "last year also
Write #43,R1,490;KEY6$[1,14]; ! "record shiplist file key(for IQ)
C = 43 \ D = 1 \ V1 = R1
Gosub L_5000
If E > 1 Gosub ERR_SEARCH
If Not(E) Goto CSLDR2
E = 3 \ Search #43,1,0;A$,R1,E ! "fail insert so return record?
Return 
CSLDR2: Rem DIR #2 of cust/shiplist/prod/whse Sales
A$ = " ",A$
A$[1,12] = A2$[1,12]
A$[13,18] = C2 Using "######"
A$[19,24] = SHPL Using "######"
A$[25,26] = LWHSE Using "##"
C = 43 \ D = 2 \ V1 = R1
Gosub L_5000
If E Gosub ERR_SEARCH
Return 
SHIPL_BUDG: Rem "see if po was blanket or has budget
If H5[7] = 36 Or H5[7] = 37 Return ! "already done IN 227B!
FLAG[3] = 0 ! "did not update shiplist budget yet
If SRN[3] = 0 Or SRN[3] = 5 Return ! "not shiplist related (custfle or manual)
If SRN[2] <> H0[4] Return ! "shipped to diff customer
KEY6$ = " ",KEY6$
KEY6$[1,6] = SRN[2] Using "######" ! "shiplist customer
KEY6$[7,7] = "."
KEY6$[8] = SRN[1] Using "&&&&&&" ! "shiplist number
Search #42,2,1;KEY6$,R[42],E \ If E > 1 Gosub ERR_SEARCH
If E Return ! "no shiplist record - no update!
Mat Read #42,R[42],452;BUDG;
Mat Read #42,R[42],464;SLBDD;
If BUDG[0] <= 0 Return ! "no budget recorded - bypass
Mat Read #42,R[42],432;BPO$;
If Len(BPO$) < 20 Let BPO$ = BPO$ + "                    " ! "fill to 20 chars!
If BPO$[1,1] <> "" And BPO$[1,5] <> "     " ! "is using Blanket PO
  If BPO$ <> P0$ Return ! "wrong po - no shiplist update
End If 
If SLBDD[1] ! buget by date
  If SLBDD[0] <= H0[10] And SLBDD[1] >= H0[10]
    BUDG[1] = BUDG[1] + (T2[0] * TMULTI) ! "total invoice
  End If 
Else ! no date range for budget
  BUDG[1] = BUDG[1] + (T2[0] * TMULTI) ! "total invoice
End If 
Mat Write #42,R[42],452;BUDG;
FLAG[3] = 1 ! "we DID update shiplist budget
Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_30000: Rem ===== set units for conversions (stock/nonstock version)
If OLS2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4) 
IF STATCHAN
	PRINT #STATCHAN;E$
	PRINT #STATCHAN;"Invoice accept has ended in an error"
Endif
! call programdump("tmp/evuse.txt!","")
Error 11000                                 
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! call programdump("tmp/evuerr.txt!","")
include "src/callsuberr.inc"
END
