! >>> Program LA528a
!
! description Accounts Payable Void Check Journal - gl interface, ap hist
!
! loadsave -w -n 100,10 -o prog/dxport/la528a.dl4 src/la528a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx





Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 19, 2006  12:46:51
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/ap/la528a.src (univ2) [bill] {59895}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FileInfo,FindF,InpBuf,String,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Rem LA528A VOID CHECK JOURNAL PART 2  GENERAL LEDGER INTERFACE, AP HISTORY
Rem UPDATE 3/91 - MTG - MULTIPLE BANKS -V4
Rem        04/29/1997 - trans & check date julian
Try
  Enter spec[],message$,IntCo,rstr$,e$ 
  dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
  dim e$[500]!,message$[600]
	dIM GROUPID$[1]
	Dim 2%,C4[4],3%,Q[7],T[7],2%,jrnl,bankid
	Dim 1%,PRGNUM,EFLAG,RETURNSTATUS
	DIM 3%,REC_UAC,chkregvar
Comp = spec[0] ! company #                     
intCo = spec[0]                                
C4[0] = spec[1] ! CURRENT/NEXT MONTH
C4[1]= spec[2] ! POSTING PERIOD                              
C4[2] = spec[3]  ! POSTING date (mmddyy)                            
C4[3] = spec[4] !  LOGICAL UNIT NUMBER FOR A10IN
C4[4] = SPEC[5] ! POSTING DATE YYMMDD
JRNL = SPEC[6] !BATCH NUMBER /JRNL # IF NOT IN BATCH MODE

PRGNUM=SPEC[7] ! PROGRAM NUMBER
rec_uac = spec[8]                              
returnstatus = spec[9] 
eflag=spec[10]
for ctr=0 to 7
	let t[ctr]=spec[11+ctr]
next ctr
bankid=spec[25]
dim 1%,currpass
	dim 1%,apbCURRID,3%,apbCURRFACT,keycurr$[30],currdesc$[30],2%,bnk_currid,3%,curr_rate
	dim 1%,cnvcu[10],3%,cnvca[10]
	dim 1%,oiCURRID,3%,oicurrfact
	dim 1%,aph_CURRID,3%,aph_currfact
	dim 1%,a2ccurrid,3%,a2ccurrfact
	dim 3%,aphmerch,aphfreight,aphmisc,grossapamt,discapamt,netapamt,currvaramt,grosspayamt, discamt, checkamt,totcurrvaramt
	dim p61$[256],currdesc$[30],keybank$[30],rec_bnk
	dim 3%,glexchamt,glexchacct,vcexchacct
	rem dim apdett
	dim 1%,apt1[1],2%,apt2,3%,apt3[1],apt1$[12],rec_apdt
	dim 1%,xapt1[1],2%,xapdt2,xapt1$[12],3%,xapt3[1],rec_xapdt
Dim KD$[34],KB$[80],2%,KA[25],KD[128,1],CRMKEYSIZE
Dim 1%,B1[1],B5[1],B6,G3,E,N1[1],N3,O1[2],O4[1],P,S6,S7,S[1],X1,C0[6],DEPT
Dim 2%,B[3],B3[1],B7,G[2],H2[2],M[3],N[2],O2[6],O5,S1[8],S5[1],X,X2,PortNum
Dim 2%,DIV,VT0[1],HPREC,HAREC,DT3[1],TDATE,CDATE
Dim 3%,R[50],RECA,RECB,LETTER$[1]
Dim 3%,A1[9],A3[6],A6[2],B2[2],B4,G1,H1,M2[4],N2[3],O3[9],Q[7],S2[4],S8[2],T9[4]
Dim 3%,DIVTOT[3],BNKTOT[2],VT1[14]
Dim B$[30],B1$[12],B3$[8],D1$[25],D2$[77],H$[68],H1$[68],H9$[2],K1$[30],K2$[30]
Dim K3$[30],K4$[30],K5$[30],K13$[30],N$[30],O$[6],O1$[12],R$[63]
Dim S$[12],S5$[12],S6$[12],F$[30],X$[10],A5$[30],2%
Dim K18$[12],DV1$[12],DV2$[12],DV3$[12],K49$[20],K50$[20],K9$[20]
Dim G8$[2],Q$[9],2%,G9[3]
Dim VENDNAME$[30],CLIENT$[4],P9$[50],K7$[30],D$[30]
Dim 3%,D2[2]
Dim GLACCT$[12],4%,GLACCT,GLAMOUNT
Dim 2%,COMP,CLIENT
Rem dim glcd detail file
Dim 2%,GLD[6],GLD$[12],GLD1$[30],4%,GLD1,1%,GLD2[3],3%,GLD0
Dim 3%,REC_GLD,GLDKEY1$[50],GLDKEY2$[50]
Rem dim glcp temp file
Dim 3%,GLA1[1],2%,GLA2[3],GLA1$[30],1%,GLA3[1]
Dim KEYGLAP$[50],3%,REC_GLA
Dim 3%
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
RESTART = 0 \ PORTNUM = rec_uac
!G9[0] = Spc(5) \ G9[1] = Int(G9[0] / 16384) \ G9[2] = Int((G9[0] - G9[1] * 16384) / 64)
!G9[3] = G9[0] - (G9[1] * 16384 + G9[2] * 64) \ G8$[1,1] = G9[2] Using "#"
!G8$[2,2] = G9[3] Using "#"
G8$[1,1]=intco using "#"
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
g8$[2,2]=groupid$
if not(restart) mat read #1,61,0;p61$;
Goto L_900
Rem RESTART SECTION
Rem LET C4[0]=CURRENT =0  OR NEXT MONTH =1
Rem LET C4[1]=POSTING PERIOD (YYMM)
Rem LET C4[2]=POSTING DATE (MMDDYY)
Rem LET C4[3]=LOGICAL UNIT NUMBER FOR A10IN
Rem LET C4[4]=POSTING DATE (YYMMDD)
Rem LET PORT= port number ap temp files were created on
Rem jrnl = jrnl # restarting from
Rem OPEN FILES
F$ = COMP Using "cntrl/CNTRL#"
Open #1,F$
Mat Read #1,19,50;P9$;
mat read #1,61,0;p61$;
Mat Read #1,88,16;F$; \ Open #15,F$
Mat Read #1,88,48;F$; \ Open #16,F$
K2$ = " 0"
Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif
 Mat Read #15,R[15],2;R$

F$ = R$[31,31],"/A80VM",G8$[1,2] \ Open #2,F$
F$ = R$[35,35],"/A10VC",G8$[1,2] \ Open #3,F$
F$ = R$[53,53],"/A20OI",G8$[1,2] \ Open #4,F$
F$ = R$[58,58],"/A10VL",G8$[1,2] \ Open #5,F$
F$ = R$[43,43],"/A50CR",G8$[1,2] \ Open #17,F$
Rem 1-CNTRL, 2-A80VM, 3-A10VC, 4-A20OI, 5,A10VL,  8-AM0CR
Rem 9-AM0CD,11-A10IN,12-APDETH,13-APDETL,15-A00AP, 16-ACF
Rem #17-A50CR
R$[60,60] = C4[3] Using "#"
Mat Read #1,88,432;F$; \ Open #12,F$
Mat Read #1,88,448;F$; \ Open #13,F$
Mat Read #1,88,112;F$; \ Open #14,F$
F$ = COMP Using "2/APDETT#"
Open #81,F$
X$ = C4[1] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G8$[1,2],X$[1,4] \ Open #8,F$
F$ = R$[42,42],"/AM0CD",G8$[1,2],X$[1,4] \ Open #9,F$
If P9$[17,17] <> "Y"
  F$ = R$[60,60],"/A10IN",G8$[1,2],X$[1,4] \ Open #11,F$
End If 
If P9$[17,17] = "Y"
  F$ = COMP Using "6/GLCDTEMP#"
  Open #75,F$
  F$ = COMP Using "4/GLCDDETL#"
  Open #77,F$
End If 
Mat Read #1,51,10;DEPT; \ Mat Read #1,51,18;C0;
If C0[6] ! ap divisions
  If Not(PortNum) Let PortNum = rec_uac
  F$ = R$[1,1],"/APDIV",G8$[1,2] \ Open #18,F$
  F$ = R$[2,2],"/APVDV",G8$[1,2] \ Open #19,F$
  F$ = PortNum Using "2/APVCTEMP&&&&"
  Open #50,F$
  F$ = PortNum Using "2/APBNKTEMP&&&&"
  Open #49,F$
  Rem #50-APCRTEMP,#49-APBNKTEMP
End If 
L_900: Rem! start update
K2$ = "10" \ Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '10' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif
Read #15,R[15],2;CLIENT$;
CLIENT = CLIENT$
Read #15,R[15],6;Q$;
Q[0] = Q$
Read #15,R[15],24;Q$;
Q[1] = Q$
Read #15,R[15],132;Q$;
Q[2] = Q$
Read #15,R[15],96;Q$;
Q[3] = Q$
Read #15,R[15],114;Q$;
Q[4] = Q$
Read #15,R[15],150;Q$;
Q[5] = Q$
Mat Read #1,51,10;DEPT; \ Mat Read #1,51,18;C0;
Mat Read #1,19,50;P9$;
Rem! find key size of am0cr file
K2$ = " 0"
Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
Else 
  Mat Read #15,R[15],2;R$;
End If 
X$ = C4[1] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G8$[1,2],X$[1,4]
KB$ = F$
Call FileInfo(KD$,KA[],KB$,1,KD[])
CRMKEYSIZE = KD[1,0]
K2$ = "20"
Search #15,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15],10;H9$;
If P9$[17,17] = "Y" Goto UPDATEGL
STARTA10IN: Rem start a10in interface here
R[11] = Chf(11)
R[11] = R[11] - 1
L_910: Read #11,R[11];H1$;
If H1$[63,63] = "9" If H1$[1,1] = "*" Goto L_935
R[11] = R[11] - 1
If R[11] >= 0 Goto L_910
	Eflag=eflag+1
	let message$="ERROR IN INTERFACE FILE!!!"\ gosub err_search

L_935: K2$ = "20" \ Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '20' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif

Mat Read #15,R[15],10;H9$;
T9 = 0
Mat Read #1,51,18;C0;
If C0[6] Goto L_2000
For X = 0 To 4
  If X = 2 Goto L_1095
  If X = 3 Goto L_1095
  If Not(T[X]) Goto L_1095
  H1 = T[X]
  H$ = " ",H$
  H$[1,1] = H9$[2,2]
  H$[2,10] = Q[X] Using "#########"
  If JRNL
    H$[14,19] = JRNL Using "######"
  Else 
    H$[14,19] = C4[2] Using "######"
  End If 
  H$[20,25] = C4[2] Using "######"
  H$[26,50] = D2$[X * 11 + 1,X * 11 + 11],"/VOID CHECK     "
  H$[59,62] = (R[11] + 1) Using "####"
  H$[63,63] = "0"
  Gosub L_3000
L_1095: Next X
K1$ = " ",K1$
if bankid>0 let k1$[1,2]=(bankid-1) using "##"
L_1110: Search #14,3,1;K1$,R[14],E \ If E = 2 Goto L_1200
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid goto L_1200:
	if tmp3<>bankid goto L_1110:
endif
Mat Read #14,R[14],32;A6;
Mat Read #14,R[14],2;A5$;
If A6[2]<>0
	H1 = A6[2] \ H$ = " ",H$
	H$[1,1] = H9$[2,2]
	H$[2,10] = A6 Using "#########"
	If JRNL
	 H$[14,19] = JRNL Using "######"
	Else 
		H$[14,19] = C4[2] Using "######"
	End If 
	H$[20,25] = C4[2] Using "######"
	H$[26,50] = A5$[1,16],"/VOID CHK"
	H$[59,62] = (R[11] + 1) Using "####"
	H$[63,63] = "0"
	Gosub L_3000
endif
mat read #14,R[14],116;GLEXCHACCT;
mat read #14,R[14],128;VCEXCHAMT;
IF VCEXCHAMT<>0	
	H1 = VCEXCHAMT \ H$ = " ",H$
	H$[1,1] = H9$[2,2]
	H$[2,10] = GLEXCHACCT Using "#########"
	If JRNL
	 H$[14,19] = JRNL Using "######"
	Else 
		H$[14,19] = C4[2] Using "######"
	End If 
	H$[20,25] = C4[2] Using "######"
	H$[26,50] = A5$[1,16],"/VOID CHK"
	H$[59,62] = (R[11] + 1) Using "####"
	H$[63,63] = "0"
	Gosub L_3000
endif
Goto L_1110
L_1200: Goto L_3100
L_2000: Rem UPDATE SECTION FOR MULTIPLE DIVISION
H$ = " ",H$ \ H$[1,1] = H9$[2,2]
If JRNL
  H$[14,19] = JRNL Using "######"
Else 
  H$[14,19] = C4[2] Using "######"
End If 
H$[20,25] = C4[2] Using "######" \ H$[63,63] = "0"
K50$ = " ",K50$
L_2020: Search #50,3,1;K50$,R[50],E \ If E = 2 Goto L_2200
If E Gosub ERR_SEARCH
Mat Read #50,R[50],0;DIVTOT;
K18$ = K50$
Search #18,2,1;K18$,R[18],E \ If E Goto L_2060
Mat Read #18,R[18],42;DV1$;
Mat Read #18,R[18],54;DV2$;
Mat Read #18,R[18],66;DV3$; \ Goto L_2075
L_2060: DV1$[1,9] = Q[0] Using "#########"
DV2$[1,9] = Q[1] Using "#########"
DV3$[1,9] = Q[3] Using "#########"
L_2075: If Not(DIVTOT[0]) Goto L_2095
H1 = DIVTOT[0] \ H$[3,10] = DV1$[2,9]
H$[26,50] = "A/P DIVISION-",K18$[1,2],"/VOID CHK   "
H$[59,62] = (R[11] + 1) Using "####" \ Gosub L_3000
L_2095: If Not(DIVTOT[1]) Goto L_2115
H1 = DIVTOT[1] \ H$[3,10] = DV2$[2,9]
H$[26,50] = "AP CREDIT DIV",K18$[1,2],"/VOID CHK   "
H$[59,62] = (R[11] + 1) Using "####" \ Gosub L_3000
L_2115: If Not(DIVTOT[2]) Goto L_2135
H1 = DIVTOT[2] \ H$[3,10] = DV3$[2,9]
H$[26,50] = "DISCOUNT DIV-",K18$[1,2],"/VOID CHK   "
H$[59,62] = (R[11] + 1) Using "####" \ Gosub L_3000
L_2135: Goto L_2020
L_2200: Rem BANKS AMOUNTS BY DIVISION
H$ = " ",H$ \ H$[1,1] = H9$[2,2]
If JRNL
  H$[14,19] = JRNL Using "######"
Else 
  H$[14,19] = C4[2] Using "######"
End If 
H$[20,25] = C4[2] Using "######" \ H$[63,63] = "0"
K49$ = " ",K49$
L_2220: Search #49,3,1;K49$,R[49],E \ If E = 2 Goto L_3100
If E Gosub ERR_SEARCH
Mat Read #49,R[49],0;BNKTOT;
If Not(BNKTOT[0]) Goto L_2220
H1 = BNKTOT[0] \ H$[2,10] = BNKTOT[1] Using "#########"
H$[26,50] = "A/P CASH DIV-",K18$[1,2],"/VOID CHK   "
H$[59,62] = (R[11] + 1) Using "####" \ Gosub L_3000
Goto L_2220
L_3000: Rem WRITE TO GLHISTORY
H2[1] = R[11]
Write #11,R[11];H$;
Write #11,R[11],1;H1;
R[11] = R[11] + 1
T9 = T9 + H1
Return 
L_3100: Rem SUSPENSE ACCOUNT POSTING
If Not(T9) Goto L_3175
H$ = " ",H$ \ H$[1,1] = H9$[2,2]
H$[2,10] = Q[5] Using "#########"
If JRNL
  H$[14,19] = JRNL Using "######"
Else 
  H$[14,19] = C4[2] Using "######"
End If 
H$[20,25] = C4[2] Using "######"
H$[26,44] = "SUSPENSE/VOID CHECK    "
H$[59,62] = (R[11] + 1) Using "####"
H$[63,63] = "0"
H1 = - T9
Gosub L_3000
T[5] = H1
!Print @0,22;'CL RB';"SUSPENSE ACCOUNT POSTING HAS BEEN MADE FOR ";H1
!Print @0,23;'CL RB';"PRESS <CR> TO CONTINUE UPDATE ";
!Input ""X$
eflag=eflag+1
let message$="SUSPENSE ACCOUNT POSTING HAS BEEN MADE FOR "+str$(h1)+" "
L_3175: Write #11,R[11];H1$;
H1 = 0
Write #11,R[11],1;H1;
Goto L_4000
UPDATEGL: Rem update section for gl accts
K1$ = " ",K1$
if bankid>0 let k1$[1,2]=(bankid-1) using "##"
SRCHA10VC: Search #3,3,1;K1$,R[3],E \ If E = 2 Goto L_4000
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid goto L_4000:
	If tmp3<>bankid goto srcha10vc:
endif
Mat Read #3,R[3],40;N3;

!If BANK
!  If BANK <> N3 Goto SRCHA10VC
!End If 
Mat Read #3,R[3],0;N;
Mat Read #3,R[3],12;N1;
Mat Read #3,R[3],16;N2;
Mat Read #3,R[3],42;N$
VENDNAME$ = N$
Rem find check in apdeth file
K2$ = " ",K2$ \ K2$[1,6] = N[2] Using "######"
K2$[7,12] = N[0] Using "######" \ K2$[20,20] = "9"
Search #12,2,1;K2$,R[12],E \ If E Gosub ERR_SEARCH
Mat Read #12,R[12],0;S; \ Mat Read #12,R[12],4;S$;
Mat Read #12,R[12],16;S1;
Mat Read #12,R[12],52;S2;
search #81,2,1;k2$,rec_apdt,e
if not(e)
	mat read #81,rec_apdt,0;apt1;
	mat read #81,rec_apdt,16;apt2;
	mat read #81,rec_apdt,40;apt1$;
	mat read #81,rec_apdt,82;apt3;
	LET APT1[0] = 8
	mat write #81,rec_apdt,0;apt1;
	let k4$=k2$\let k4$[20,20]="8"
	search #81,5,1;k2$,rec_apdt,e\if e<>0 gosub err_search:
	search #81,4,1;k4$,rec_apdt,e\if e<>0 gosub err_search:
endif
K3$ = " ",K3$ \ K3$[1,6] = R[12] Using "######"
SRCHAPDETL: Search #13,3,1;K3$,R[13],E \ If E = 2 Goto SRCHA10VC
If E Gosub ERR_SEARCH
X2 = K3$[1,6]
If X2 <> R[12] Goto SRCHA10VC
Mat Read #13,R[13],0;S5;
Mat Read #13,R[13],8;S6;
Mat Read #13,R[13],36;S8;
If S1 <> S8[2] Goto SRCHAPDETL
Mat Read #13,R[13],12;S5$; \ Mat Read #13,R[13],22;S7;
If S7 > 7 Goto SRCHAPDETL
Mat Read #13,R[13],24;S6$; \ Mat Read #13,R[13],36;S8;
K4$ = " ",K4$ \ K4$[1,6] = S5[1] Using "######"
K4$[7,18] = S6$[1,12] \ K4$[19,20] = S7 Using "##"
Search #12,2,1;K4$,R,E \ If E Gosub ERR_SEARCH
Mat Read #12,R,48;DIV;
let xapt3[1]=0;currvaramt=0
if p61$[136,136]="Y" !  and currpass<>0
	search #81,2,1;k4$,rec_xapdt,e
	if not(e)
		mat read #81,rec_xapdt,0;xapt1;
		mat read #81,rec_xapdt,82;xapt3;		
	else
		let xapt3[0]=apt3[0]
		let currvaramt=0
	endif
	if xapt3[0]=0
		let xapt3[1]=0
		currvaramt=0
	endif
	if xapt3[0]=apt3[0] ! same currency
		let xapt3[1]=0
		let currvaramt=0
	else
		if currpass=0 and xapt3[0]<>0 and apt3[0]<>0
			currvaramt=fnr(s8[0]-s8[1])
			let cnvcu[0]=1
			let cnvcu[1]=1
			let cnvca[0]= currvaramt
			let cnvca[1]=xapt3[0]
			call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
			let amount=(cnvca[0])
			let cnvcu[0]=2
			let cnvcu[1]=1
			let cnvca[0]= amount 
			let cnvca[1]=apt3[0]
			call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
			let amount=fnr(cnvca[0])
			let currvaramt=currvaramt-amount
		else
			let currvaramt=0
		endif
	endif
endif
If S8[0] ! ap amt
  ACCTTYPE = 0
  GLAMOUNT = - (S8[0])
  GLACCT = 0;DETFLAG = 0
  If C0[6] ! division: !
    K18$ = " ",K18$ \ K18$[1,2] = DIV Using "##"
    Search #18,2,1;K18$,R[18],E \ If E > 1 Gosub ERR_SEARCH
    If S7 = 2
      Mat Read #18,R[18],54;GLACCT$;
      GLACCT = GLACCT$
    Else 
      Mat Read #18,R[18],42;GLACCT$;
      GLACCT = GLACCT$
    End If 
  End If 
  If Not(GLACCT)
    If S7 = 2
      GLACCT = Q[1]
    Else 
      GLACCT = Q[0]
    End If 
  End If 
  Gosub UPGLCDTEMP
  Gosub UPGLDET
End If 
Rem update discount account
If S8[1] ! discount amount
  GLACCT = 0;DETFLAG = 0
  If C0[6] ! by divisions
    Rem need to get amounts by divisions
    K18$ = " ",K18$ \ K18$[1,2] = DIV Using "##"
    Search #18,2,1;K18$,R[18],E \ If E > 1 Gosub ERR_SEARCH
    If Not(E)
      Mat Read #18,R[18],66;GLACCT$;
      GLACCT = GLACCT$
    End If 
  End If 
  If Not(GLACCT)
    GLACCT = Q[4]
  End If 
  ACCTTYPE = 2
  GLAMOUNT = (S8[1])
  Gosub UPGLCDTEMP
  Gosub UPGLDET
End If 

if p61$[136,136]<>"Y" let currvaramt=0

If (S8[0] - S8[1] - currvaramt) ! cash account ! post cash
  GLACCT = 0;DETFLAG = 0
  K4$ = N3 Using "##"
  Search #14,2,1;K4$,R[14],E \ If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #14,R[14],32;A6;
    GLACCT = A6
    If DEPT <> 0 And C0[6] <> 0 And DIV <> 0
      K5$ = " ",K3$ \ K5$[1,9] = A6 Using "#########"
      K5$[8,9] = DIV Using "&&"
      Search #5,2,1;K5$,R[5],E \ If E > 1 Gosub ERR_SEARCH
      If Not(E)
        GLACCT = K5$[1,9]
      End If 
    End If 
  End If 
  If Not(GLACCT) Let GLACCT = Q[2]
  GLAMOUNT =  (S8[0] - S8[1] - currvaramt)
  ACCTTYPE = 1
  Gosub UPGLCDTEMP
  Gosub UPGLDET
End If 
If (currvaramt) and p61$[136,136]="Y"  ! cash account ! post cash
	GLACCT = 0;DETFLAG = 0
	K4$ = N3 Using "##"
	Search #14,2,1;K4$,R[14],E \ If E > 1 Gosub ERR_SEARCH
	If Not(E)
		mat read #14,R[14],116;GLEXCHACCT; 
		GLACCT = GLEXCHACCT
		If DEPT <> 0 And C0[6] <> 0 And DIV <> 0
			K5$ = " ",K3$ \ K5$[1,9] = GLEXCHACCT Using "#########"
			K5$[8,9] = DIV Using "&&"
			Search #5,2,1;K5$,R[5],E \ If E > 1 Gosub ERR_SEARCH
			If Not(E)
				GLACCT = K5$[1,9]
			End If 
		End If 
	 End If 
	 !If Not(GLACCT) Let GLACCT = Q[2]
	GLAMOUNT = (currvaramt)
	ACCTTYPE = 3
	Gosub UPGLCDTEMP
	Gosub UPGLDET
End If 
Goto SRCHAPDETL
L_4000: Rem UPDATE AP HISTORY FILES
K1$ = " ",K1$
if bankid<>0
	let k1$[1,2]=bankid using "##"
endif
L_4020: Search #3,3,1;K1$,R[3],E
If E = 2 Goto L_8000
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid goto L_8000
	if tmp3<>bankid goto L_4020
endif
DUPFLAG = 0
Mat Read #3,R[3],0;N;
Mat Read #3,R[3],16;N1;
Mat Read #3,R[3],16;N2; \ Mat Read #3,R[3],40;N3;
Mat Read #3,R[3],42;N$;
K2$ = " ",K2$ \ K2$[1,6] = N[2] Using "######"
K2$[7,12] = N[0] Using "######" \ K2$[20,20] = "9"
Search #12,2,1;K2$,R[12],E
If E Gosub ERR_SEARCH
Gosub L_6000
S[0] = 8
Gosub L_6100
K4$ = K2$ \ K4$[19,20] = S[0] Using "##"
HPREC = R[12] \ R = R[12]
Search #12,2,1;K4$,R[12],E \ If E = 1 Goto L_4170
If E Gosub ERR_SEARCH
Goto L_5900
L_4170: Search #12,4,1;K4$,R[12],E
If E Gosub ERR_SEARCH
Search #12,5,1;K2$,R[12],E
If E Gosub ERR_SEARCH
! APDETT
K2$ = " ",K2$ \ K2$[1,6] = N[2] Using "######"
K2$[7,12] = N[0] Using "######" \ K2$[20,20] = "9"
Search #81,2,1;K2$,rec_apdt,E
if not(e)
	mat read #81,rec_apdt,0;apt1;
	mat read #81,rec_apdt,16;apt2;
	mat read #81,rec_apdt,40;apt1$;
	mat read #81,rec_apdt,82;apt3;
endif
L_4200: Rem ** APDETL FOR PAYMENT TRANSACTION **
R = HPREC
K13$ = " ",K13$ \ K13$[1,6] = R Using "######"
L_4215: Search #13,3,1;K13$,R[13],E
If E = 2 Goto L_4900
If E Gosub ERR_SEARCH
X2 = K13$[1,6]
If X2 <> HPREC Goto L_4900
Gosub L_6600
If S8[2] <> S1 Goto L_4215
S6 = 8
Gosub L_6500
B1$[1,12] = S6$[1,12] \ B2[0] = S8[0] \ B2[1] = S8[1]
B2[2] = S8[0] - S8[1]
K2$ = " ",K2$ \ K2$[1,6] = S5[1] Using "######"
If S7 > 3 Let K2$[1,6] = S8[2] Using "######"
K2$[7,18] = S6$[1,12] \ K2$[19,20] = S7 Using "##"
Search #12,2,1;K2$,R[12],E
If E Gosub ERR_SEARCH
HAREC = R[12]
Gosub L_6000
S[1] = 0 \ S2[2] = S2[2] - S8[0]
S2[3] = S2[3] - S8[1]
B[3] = TDATE
Gosub L_6100
K4$ = " ",K4$ \ K4$[1,6] = S5[1] Using "######"
K4$[7,18] = S$[1,12] \ K4$[19,20] = S[0] Using "##"
search #81,2,1;k4$,rec_xapdt,e
if not(e)
	mat read #81,rec_xapdt,0;xapt1;
	mat read #81,rec_xapdt,16;xapt2;
	mat read #81,rec_xapdt,40;xapt1$;
	mat read #81,rec_xapdt,82;xapt3;	
	if p61$[136,136]="Y" and currvaramt<>0
		let xapt3[1]=xapt3[1]-currvaramt
		mat write #81,rec_xapdt,82;xapt3;
	endif
endif
K4$ = " ",K4$ \ K4$[1,6] = S5[1] Using "######"
K4$[7,18] = S$[1,12] \ K4$[19,20] = S[0] Using "##"
Search #4,2,1;K4$,R[4],E
If E = 1 Goto L_4500
If E Gosub ERR_SEARCH
Gosub L_6300
O3[2] = O3[2] + S8[1]
If C4 Let O3[7] = O3[7] - S8[0]
If Not(C4) Let O3[5] = O3[5] - S8[0]
O$[4,4] = "0"
If C4 Let O$[4,4] = "1"
O2[1] = 0 \ O2[6] = 0
If O1 = 3 Let O2[6] = S1[5] \ O2[1] = S1[6]
If O$[1,1] = "6" Let O$[1,1] = "1"
O$[3,3] = "1" \ If O1 = 3 Let O$[3,3] = "3"
If (O3[5] + O3[7]) Let O$[3,3] = "0"
If O1 <> 3 Let O4 = 0
Gosub L_6400
let checkamt=s8[0]-s8[1]
currvaramt=0
If p61$[136,136]="Y" and oicurrfact<>0 and apt3[0]<>0 	
	IF oicurrfact<>apt3[0]
		let currvaramt=fnr(checkamt) ! keep for original checkamt in open item value
		let cnvcu[0]=1
		LET cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=oicurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
		let checkamt=cnvca[0]
		let cnvcu[0]=2
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=apt3[0]
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring down to base currency based upon check print rate
		let checkamt=FNR(cnvca[0])
		let currvaramt=currvaramt-checkamt
	endif
endif
Goto L_4600
L_4500: Rem INSERT INTO A20OI FILE

E = 2 \ Search #4,1,0;K4$,R[4],E
If E Gosub ERR_SEARCH
O$ = " ",O$ \ O$[1,1] = "1" \ O$[3,3] = S[0] Using "#"
O$[5,5] = C4 Using "#"
For X = 0 To 9
  O3[X] = 0
  If X < 3 Let O1[X] = 0
  If X < 7 Let O2[X] = 0
Next X
O1 = S[0] \ O2 = S5[1] \ O2[2] = TDATE \ O2[3] = S1[3]
O2[4] = S1[4] \ O2[5] = S1[7] \ O3[0] = S8[0] \ O3[2] = S8[1]
If S2[0] > O3[0]
  If C4
    O3[7] = S2[0] - O3[0]
  Else 
    O3[5] = S2[0] - O3[0]
  End If 
  O3[0] = S2[0]
End If 
O3[3] = O3[0] - O3[2]
O1$[1,12] = S$[1,12]
If O1 = 3 Let O4 = N3 \ O2[6] = S1[5] \ O2[1] = S1[6]
O4[1] = S1[8] \ O5 = S1[0]
if p61$[136,136]="Y"
	let oicurrid=xAPT1[1]
	let oicurrfact=xAPT3[0]
else
	let oicurrid=0
	let oicurrfact=0
endif
Gosub L_6400
L_4585: Search #4,4,1;K4$,R[4],E
If E Gosub ERR_SEARCH
currvaramt=0;xapt3[1]=0
let checkamt=s8[0]-s8[1]
If p61$[136,136]="Y" and oicurrfact<>0 and apt3[0]<>0 	
	IF oicurrfact<>apt3[0]
		let currvaramt=fnr(checkamt) ! keep for original checkamt in open item value
		let cnvcu[0]=1
		LET cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=oicurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
		let checkamt=cnvca[0]
		let cnvcu[0]=2
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=apt3[0]
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring down to base currency based upon check print rate
		let checkamt=FNR(cnvca[0])
		let currvaramt=currvaramt-checkamt
		! let xapt3[1]=currvaramt
	endif
endif
L_4600: Rem ** APDETL FOR APPLIED TRANSACTION **
If C0[6] Gosub L_7000
Gosub L_7500
R[12] = HAREC
K4$ = " ",K4$ \ K4$[1,6] = R[12] Using "######"
L_4615: Search #13,3,1;K4$,R[13],E
If E = 2 Goto L_4690
If E Gosub ERR_SEARCH
X2 = K4$[1,6]
If X2 <> HAREC Goto L_4690
Gosub L_6600
X2 = S6$[1,12]
If X2 <> N[0] Goto L_4615
S7 = 8
Gosub L_6500
Goto L_4700
L_4690: S1 = S8[2]
Goto L_4215
L_4700: Rem UPDATE AM0CR FILE
B[0] = N[0] \ B[1] = S5[1] \ B[2] = N[1]
B1 = 8 \ B1[1] = 0 \ B$[1,30] = N$[1,30]
B5 = N3 \ B5[1] = O4[1] \ B7 = N[2]
if p61$[136,136]="Y" and currvaramt<>0
	let b2[2]=b2[2]-currvaramt
endif
E = 2 \ Search #8,1,0;K2$,R[8],E
If E Gosub ERR_SEARCH
For X = 0 To 2
  B2[X] = B2[X] * (-1)
Next X
Gosub L_6700
K2$ = " ",K2$ \ K2$[1,2] = B5 Using "##" \ K2$[3,8] = B[0] Using "######"
K2$[9,14] = B[1] Using "######"
If CRMKEYSIZE <> 20
  K2$[15,18] = R[8] Using "####"
Else 
  K2$[15,20] = R[8] Using "######"
End If 
L_4765: Search #8,4,1;K2$,R[8],E
If E Gosub ERR_SEARCH
B3[0] = R[8] \ B3[1] = B[1] \ B3$[1,8] = Q[0] Using "########"
B4 = B2[0] \ B6 = O4[1]
If Not(C0[6]) Goto L_4830
Gosub L_7700
B3$[1,8] = DV1$[2,9] \ If O1 = 2 Let B3$[1,8] = DV2$[2,9]
L_4830: E = 2 \ Search #9,1,0;K4$,R[9],E
If E Gosub ERR_SEARCH
Gosub L_6800
K4$ = " ",K4$ \ K4$[1,6] = R[8] Using "######"
K4$[7,12] = B[1] Using "######" \ K4$[13,18] = R[9] Using "######"
L_4860: Search #9,4,1;K4$,R[9],E
If E Gosub ERR_SEARCH
K4$ = " ",K4$ \ K4$[1,8] = B3$[1,8]
K4$[9,14] = B[1] Using "######" \ K4$[15,20] = R[9] Using "######"
L_4885: Search #9,4,2;K4$,R[9],E
If E Gosub ERR_SEARCH
if currvaramt<>0
	B3[0] = R[8] \ B3[1] = B[1] !\ B3$[1,8] = Q[0] Using "########"
	B4 = currvaramt\ B6 = O4[1]
	K4$ = N3 Using "##"
	Search #14,2,1;K4$,R[14],E \ If E > 1 Gosub ERR_SEARCH
	If Not(E)
		mat read #14,R[14],116;GLEXCHACCT; 
		GLACCT = GLEXCHACCT
		If DEPT <> 0 And C0[6] <> 0 And DIV <> 0
			K5$ = " ",K3$ \ K5$[1,9] = GLEXCHACCT Using "#########"
			K5$[8,9] = DIV Using "&&"
			Search #5,2,1;K5$,R[5],E \ If E > 1 Gosub ERR_SEARCH
			If Not(E)
				GLACCT = K5$[1,9]
			End If 
		End If 
	ELSE
		LET GLACCT=0
	ENDIF
	B3$[1,8] = GLACCT  Using "########"
	E = 2 \ Search #9,1,0;K4$,R[9],E \If E Gosub ERR_SEARCH
	Gosub L_6800
	K4$ = " ",K4$ \ K4$[1,6] = R[8] Using "######"
	K4$[7,12] = B[1] Using "######" \ K4$[13,18] = R[9] Using "######"
	Search #9,4,1;K4$,R[9],E\If E Gosub ERR_SEARCH
	K4$ = " ",K4$ \ K4$[1,8] = B3$[1,8]
	K4$[9,14] = B[1] Using "######" \ K4$[15,20] = R[9] Using "######"
	Search #9,4,2;K4$,R[9],E \ If E Gosub ERR_SEARCH
ENDIF
S1 = S8[2] \ Goto L_4215

L_4900: Rem UPDATE DUPLICATES
If Not(DUPFLAG) Goto L_5100
R = HPREC
K3$ = " ",K3$ \ K3$[1,6] = R Using "######"
L_4920: Search #13,3,1;K3$,R[13],E \ If E = 2 Goto L_4985
If E Gosub ERR_SEARCH
X2 = K3$[1,6]
If X2 <> HPREC Goto L_4985
Gosub L_6600
If S5[1] <> S1 Goto L_4920
S5[0] = DUPREC
K4$ = K3$ \ K4$[1,6] = DUPREC Using "######"
R = R[13]
Search #13,4,1;K4$,R[13],E \ If E Gosub ERR_SEARCH
Search #13,5,1;K3$,R[13],E \ If E Gosub ERR_SEARCH
Gosub L_6500
Goto L_4920
L_4985: K2$ = " ",K2$ \ K2$[1,6] = N[2] Using "######"
K2$[7,12] = N[0] Using "######" \ K2$[20,20] = "9"
Search #12,5,1;K2$,R[12],E \ If E Gosub ERR_SEARCH
If R[12] <> HPREC Gosub ERR_SEARCH
Gosub L_6000
K2$ = " ",K2$ \ K2$[1,6] = N[2] Using "######" \ K2$[7,12] = S1[1] Using "######"
K2$[13,18] = R[12] Using "######"
Search #12,5,2;K2$,R[12],E \ If E Gosub ERR_SEARCH
If R[12] <> HPREC Gosub ERR_SEARCH
K5$ = " ",K5$;K5$[1,6] = S2[4] Using "######";K5$[7,24] = K2$[1,18]
Search #12,5,3;K5$,R[12],E \ If E Gosub ERR_SEARCH
If R[12] <> HPREC Gosub ERR_SEARCH
E = 3 \ Search #12,1,0;K2$,R[12],E \ If E Gosub ERR_SEARCH
L_5100: Rem UPDATE A50CR FILE
K2$ = " ",K2$ \ K2$[1,2] = N3 Using "##" \ K2$[3,8] = N[0] Using "######"
L_5110: Search #17,3,1;K2$,R[17],E \ If E = 2 Goto L_5200
If E Gosub ERR_SEARCH
Mat Read #17,R[17],0;G;
Mat Read #17,R[17],12;G1;
Mat Read #17,R[17],18;P; \ Mat Read #17,R[17],52;G3;
X2 = G[2] \ Gosub L_7890
CDATE = DT3[0]
If N3 <> G3 Goto L_5200
If N <> G[1] Goto L_5200
If N[2] <> G[0] Goto L_5110
If N[1] <> CDATE Goto L_5110
Search #17,5,1;K2$,R[17],E \ If E Gosub ERR_SEARCH
K4$ = " ",K4$ \ K4$[1,2] = G3 Using "##" \ K4$[3,8] = G[2] Using "######"
K4$[9,14] = G[1] Using "######" \ K4$[15,16] = P Using "##"
Search #17,5,2;K4$,R[17],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #17,1,0;K2$,R[17],E \ If E Gosub ERR_SEARCH
L_5200: Rem DELETE A10VC TRANSACTION
Search #3,5,1;K1$,R[3],E \ If E Gosub ERR_SEARCH
E = 3 \ Search #3,1,0;K1$,R[3],E \ If E Gosub ERR_SEARCH
Goto L_4020
L_5900: Rem ADD TO VOID CHECK AMT IF ALREADY ON FILE
For X = 0 To 4
  M2[X] = S2[X]
Next X
Gosub L_6000
For X = 0 To 3
  S2[X] = S2[X] + M2[X]
Next X
Gosub L_6100
If HPREC = R[12] Goto L_5955
DUPFLAG = 99 \ DUPREC = R[12]
L_5955: Goto L_4200
L_6000: Rem READ APDETH FILE
Mat Read #12,R[12],0;S;
Mat Read #12,R[12],4;S$;
Mat Read #12,R[12],16;S1;
Mat Read #12,R[12],52;S2
X2 = S1[1] \ Gosub L_7890
TDATE = DT3[0]
Return 
L_6100: Rem WRITE APDETH FILE
Mat Write #12,R[12],0;S
Mat Write #12,R[12],4;S$
Mat Write #12,R[12],16;S1
Mat Write #12,R[12],52;S2;
Return 
L_6200: Rem UPDATE AM0CD FILE
E = 2 \ Search #9,1,0;K4$,R[9],E
If E Gosub ERR_SEARCH
Gosub L_6800
K4$ = " ",K4$ \ K4$[1,6] = B3 Using "######"
K4$[7,12] = B3[1] Using "######" \ K4$[13,18] = R[9] Using "######"
Search #9,4,1;K4$,R[9],E
If E Gosub ERR_SEARCH
K4$ = " ",K4$ \ K4$[1,8] = B3$[1,8] \ K4$[9,14] = B3[1] Using "######"
K4$[15,20] = R[9] Using "######"
Search #9,4,2;K4$,R[9],E
If E Gosub ERR_SEARCH
Return 
L_6300: Rem READ OPEN ITEM FILE
Mat Read #4,R[4],0;O$;
Mat Read #4,R[4],6;O1;
Mat Read #4,R[4],12;O2;
Mat Read #4,R[4],40;O3;
Mat Read #4,R[4],100;O1$;
Mat Read #4,R[4],112;O4;
Mat Read #4,R[4],116;OICURRID;
Mat Read #4,R[4],118;O5
Mat Read #4,R[4],122;OICURRFACT;
Return 
L_6400: Rem WRITE A20OI
Mat Write #4,R[4],0;O$
Mat Write #4,R[4],6;O1
Mat Write #4,R[4],12;O2
Mat Write #4,R[4],40;O3
Mat Write #4,R[4],100;O1$
Mat Write #4,R[4],112;O4 
Mat Write #4,R[4],116;OICURRID;
Mat Write #4,R[4],118;O5;
Mat Write #4,R[4],122;OICURRFACT;
Return 

L_6500: Rem WRITE APDETL
Mat Write #13,R[13],0;S5
Mat Write #13,R[13],8;S6
Mat Write #13,R[13],10;S5$
Mat Write #13,R[13],22;S7
Mat Write #13,R[13],24;S6$
Mat Write #13,R[13],36;S8;
Return 
L_6600: Rem READ APDETL
Mat Read #13,R[13],0;S5;
Mat Read #13,R[13],8;S6;
Mat Read #13,R[13],10;S5$;
Mat Read #13,R[13],22;S7;
Mat Read #13,R[13],24;S6$;
Mat Read #13,R[13],36;S8
Return 
L_6700: Rem WRITE AM0CR
Mat Write #8,R[8],0;B
Mat Write #8,R[8],16;B1
Mat Write #8,R[8],20;B$
Mat Write #8,R[8],50;B1$
Mat Write #8,R[8],62;B2
Mat Write #8,R[8],80;B5;
Mat Write #8,R[8],86;B7;
Write #8,R[8],90;JRNL;
Return 
L_6800: Rem WRITE AM0CD
Mat Write #9,R[9],0;B3
Mat Write #9,R[9],8;B1$
Mat Write #9,R[9],20;B3$
Mat Write #9,R[9],28;B4
Mat Write #9,R[9],34;B6;
Return 
L_7000: Rem VENDOR DIVISION TOTALS
If Not(C0[6]) Goto L_7095
K9$ = " ",K9$ \ K9$[1,6] = S5[1] Using "######"
K9$[7,8] = O4[1] Using "##"
Search #19,2,1;K9$,R[19],E \ If Not(E) Goto L_7055
If E > 1 Gosub ERR_SEARCH
E = 2 \ Search #19,1,0;K9$,R[19],E \ If E Gosub ERR_SEARCH
VT0[0] = N[2] \ VT0[1] = O4[1] \ Mat Write #19,R[19],0;VT0
For I = 0 To 14 \ VT1[I] = 0 \ Next I
Search #19,4,1;K9$,R[19],E \ If E Gosub ERR_SEARCH
Goto L_7060
L_7055: Mat Read #19,R[19],8;VT1
L_7060: VT1[14] = VT1[14] + S8[0]
If C4 Goto L_7085
VT1[4] = VT1[4] - S8[1] \ VT1[6] = VT1[6] - S8[1]
VT1[8] = VT1[8] - (S8[0] - S8[1]) \ VT1[10] = VT1[10] - (S8[0] - S8[1])
VT1[12] = VT1[12] - (S8[0] - S8[1])
Goto L_7090
L_7085: VT1[5] = VT1[5] - S8[1] \ VT1[9] = VT1[9] - (S8[0] - S8[1])
L_7090: Mat Write #19,R[19],8;VT1;
L_7095: Return 
L_7500: Rem UPDATE VENDOR PAYMENT AMOUNTS
E = 0 \ K2$ = S5[1] Using "######"
Search #2,2,1;K2$,R[2],E
If E Gosub ERR_SEARCH
Mat Read #2,R[2],304;A1; \ Mat Read #2,R[2],498;A3
A1[0] = A1[0] + S8[0]
If C4 Goto L_7570
A1[2] = A1[2] - S8[1]
A1[4] = A1[4] - S8[1]
A1[7] = A1[7] - (S8[0] - S8[1])
A1[8] = A1[8] - (S8[0] - S8[1])
A3[6] = A3[6] - (S8[0] - S8[1])
Goto L_7580
L_7570: A1[6] = A1[6] - S8[1]
A1[9] = A1[9] - (S8[0] - S8[1])
L_7580: Mat Write #2,R[2],304;A1;
Return 
L_7700: Rem DIVISION LOOKUP
K18$ = " ",K18$ \ K18$[1,2] = B6 Using "##"
Search #18,2,1;K18$,R[18],E \ If E Goto L_7725
Mat Read #18,R[18],42;DV1$; \ Mat Read #18,R[18],54;DV2$;
Mat Read #18,R[18],66;DV3$; \ Goto L_7750
L_7725: DV1$[1,9] = Q[0] Using "#########"
DV2$[1,9] = Q[1] Using "#########"
DV3$[1,9] = Q[3] Using "#########"
L_7750: Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
L_7890: Rem CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem UPDATE TOTAL TO AM0CD
If C0[6] Goto L_8100
For X = 4 To 5
  If Not(T[X]) Goto L_8040
  B4 = T[X]
  B3 = 0 \ B3[1] = C4[4]
  B1$ = " ",B1$ \ B1$[1,12] = "VOID CHECK  "
  B3$ = Q[X] Using "########"
  Gosub L_6200
L_8040: Next X
K1$ = " ",K1$
IF BANKID>0 LET K1$[1,2]=(BANKID-1) USING "##"
L_8050: Search #14,3,1;K1$,R[14],E \ If E = 2 Goto OUTEND
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,4]
	if tmp3>bankid goto outend
	if tmp3<>bankid goto L_8050:
endif
Mat Read #14,R[14],32;A6;
If A6[2]<>0
	B4 = A6[2] \ B3 = 0 \ B3[1] = C4[4]
	B1$ = " ",B1$ \ B1$[1,12] = "VOID CHECK  "
	B3$ = A6 Using "########"
	Gosub L_6200
endif
!mat read #14,R[14],116;GLEXCHACCT;
!mat read #14,R[14],128;VCEXCHAMT;
!IF VCEXCHAMT<>0
!	B4 = VCEXCHAMT \ B3 = 0 \ B3[1] = C4[4]
!	B1$ = " ",B1$ \ B1$[1,12] = "VOID CHECK  "
!	B3$ = GLEXCHACCT Using "########"
!	Gosub L_6200
!endif
Goto L_8050
L_8100: Rem UPDATE SECTION FOR MULTIPLE DIVISION
B3[0] = 0 \ B3[1] = C4[4] \ R[8] = 0 \ B1$ = " ",B1$ \ B6 = 0 \ K50$ = " ",K50$
L_8110: Search #50,3,1;K50$,R[50],E \ If E = 2 Goto L_8200
If E Gosub ERR_SEARCH
Mat Read #50,R[50],0;DIVTOT;
B1$ = "DIVISION-",K50$[1,2],"  " \ B6 = K50$[1,2]
Gosub L_7700
Goto L_8150
If Not(DIVTOT[0]) Goto L_8150
B4 = DIVTOT[0] \ B3$[1,8] = DV1$[2,9] \ Gosub L_6200
L_8150: If Not(DIVTOT[1]) Goto L_8160
Goto L_8160
B4 = DIVTOT[1] \ B3$[1,8] = DV2$[2,9] \ Gosub L_6200
L_8160: If Not(DIVTOT[2]) Goto L_8170
B4 = DIVTOT[2] \ B3$[1,8] = DV3$[2,9] \ Gosub L_6200
L_8170: Goto L_8110
L_8200: Rem BANKS AMOUNTS BY DIVISION
K49$ = " ",K49$
L_8210: Search #49,3,1;K49$,R[49],E \ If E = 2 Goto OUTEND
If E Gosub ERR_SEARCH
B1$ = "DIVISION-",K49$[3,4],"  " \ B6 = K49$[3,4]
Mat Read #49,R[49],0;BNKTOT;
If Not(BNKTOT[0]) Goto L_8210
B4 = BNKTOT[0] \ B3$[1,8] = BNKTOT[1] Using "########" \ Gosub L_6200
Goto L_8210
L_8600: Rem CLEAR APCASH FILE
K1$ = " ",K1$
if bankid>0 let K1$[1,2]=(bankid-1) using "##"
L_8620: Search #14,3,1;K1$,R[14],E
If E = 2 Return 
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid return
	if tmp3<>bankid GOto L_8620:
endif
Mat Read #14,R[14],32;A6;
If A6[2]<>0
	A6[2] = 0
	Mat Write #14,R[14],32;A6;
endif
mat read #14,R[14],128;VCEXCHAMT;
IF VCEXCHAMT<>0	
	LET VCEXCHAMT=0
	mat write #14,R[14],128;VCEXCHAMT;
endif
Goto L_8620
UPGLCDTEMP: Rem update gl ap temp file (#75)
For X = 0 To 1 \ GLA1[X] = 0 \ Next X
For X = 0 To 3 \ GLA2[X] = 0 \ Next X
GLA1$ = " ",GLA1$
GLA3 = 0;GLA3[1] = 0
GLA1[0] = GLACCT
GLA2[0] = JRNL
GLA2[1] = CLIENT
If DETFLAG
  GLA2[2] = N[2]
  GLA2[3] = N[0]
  GLA1$[1,30] = VENDNAME$[1,30]
  GLA3[0] = N3
  GLA3[1] = 0
End If 
KEYGLAP$ = " ",KEYGLAP$
KEYGLAP$[1,4] = GLA2[1] Using "####"
KEYGLAP$[5,12] = GLA1[0] Using "########"
KEYGLAP$[13,14] = GLA3[0] Using "##"
KEYGLAP$[15,20] = GLA2[3] Using "######"
KEYGLAP$[21,26] = GLA2[2] Using "######"
KEYGLAP$[27,28] = GLA3 Using "##"
Search #75,2,1;KEYGLAP$,REC_GLA,E \ If E > 1 Gosub ERR_SEARCH
If E
  E = 2 \ Search #75,1,0;KEYGLAP$,REC_GLA,E \ If E Gosub ERR_SEARCH
  Mat Write #75,REC_GLA,0;GLA1;
  Mat Write #75,REC_GLA,12;GLA2;
  Mat Write #75,REC_GLA,40;GLA1$;
  Mat Write #75,REC_GLA,70;GLA3;
  Search #75,4,1;KEYGLAP$,REC_GLA,E \ If E Gosub ERR_SEARCH
End If 
Mat Read #75,REC_GLA,0;GLA1
GLA1[1] = GLA1[1] + GLAMOUNT
Mat Write #75,REC_GLA,0;GLA1;
Return 
UPGLDET: Rem up gl detail file
For X9 = 0 To 6 \ GLD[X9] = 0 \ Next X9
For X9 = 0 To 3 \ GLD2[X9] = 0 \ Next X9
GLD$ = " ",GLD$;GLD1$ = " ",GLD1$
GLD1 = 0;GLD0 = 0
GLD[0] = CLIENT
GLD[1] = C4[1]
GLD[2] = N[2]
GLD[3] = N[0]
GLD[4] = N[1]
GLD[5] = C4[4]
GLD[6] = JRNL
GLD0 = N2[2]
GLD$[1,9] = GLACCT Using "#########"
GLD1$[1,30] = VENDNAME$[1,30]
GLD2[0] = 8
GLD2[1] = 0
GLD2[2] = N3
GLD2[3] = ACCTTYPE
GLDKEY1$ = " ",GLDKEY1$
GLDKEY1$[1,4] = GLD[1] Using "&&&&"
GLDKEY1$[5,16] = GLD$[1,12]
GLDKEY1$[17,22] = GLD[6] Using "######"
GLDKEY1$[23,24] = GLD2[2] Using "##"
GLDKEY1$[25,30] = GLD[3] Using "######"
GLDKEY1$[31,36] = GLD[2] Using "######"
GLDKEY1$[37,38] = GLD2[0] Using "##"
Search #77,2,1;GLDKEY1$,REC_GLD,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  E = 2 \ Search #77,1,0;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  Mat Write #77,REC_GLD,0;GLD;
  Mat Write #77,REC_GLD,34;GLD0;
  Mat Write #77,REC_GLD,40;GLD$;
  Mat Write #77,REC_GLD,52;GLD1$;
  Mat Write #77,REC_GLD,82;GLD1;
  Mat Write #77,REC_GLD,90;GLD2;
  Search #77,4,1;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  GLDKEY2$ = " ",GLDKEY2$
  GLDKEY2$[1,6] = GLD[2] Using "######"
  GLDKEY2$[7,8] = GLD2[2] Using "##"
  GLDKEY2$[9,14] = GLD[3] Using "######"
  GLDKEY2$[15,16] = GLD2[0] Using "##"
  GLDKEY2$[17,20] = GLD[1] Using "&&&&"
  GLDKEY2$[21,26] = GLD[6] Using "######"
  GLDKEY2$[27,38] = GLD$[1,12]
  Search #77,4,2;GLDKEY2$,REC_GLD,E \ If E Gosub ERR_SEARCH
End If 
Rem add amount into transaction
Mat Read #77,REC_GLD,82;GLD1
GLD1 = GLD1 + GLAMOUNT
Mat Write #77,REC_GLD,82;GLD1;
Return 

ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$ = msg$ \ Error 10000                      
Return ! End                                 
If Msg$<>"" let e$=msg$ !  Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump("tmp/la528a!","")
! goto err_msg ! Error 10000
Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)



OUTEND: K2$ = " 0" \ Search #15,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15],2;R$;
If P9$[17,17] <> "Y"
  R$[60,60] = C4[3] Using "#"
End If 
Mat Write #15,R[15],2;R$;
Gosub L_8600
Try Close Else Rem
If C0[6]
  F$ = PortNum Using "2/APVCTEMP&&&&"
  Call FindF(F$,G9)
  If G9
    Kill F$
  End If 
  F$ = PortNum Using "2/APBNKTEMP&&&&"
  Call FindF(F$,G9)
  If G9
    Kill F$
  End If 
End If 

PRGNUM = 528

SPEC[7]=prgnum! PROGRAM NUMBER
if eflag
	let returnstatus=0
	let spec[9]=returnstatus
endif
Call "GLCDPOST.dl4",spec[],message$,IntCo,rstr$,e$
 
Else
	ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program

Chain "glcdpost"

