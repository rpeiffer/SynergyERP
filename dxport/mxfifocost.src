! >>> Program mxfifocost
!
! description Fifo Cost
!
! loadsave -w -n 100,10 -o prog/dxport/mxfifocost.dl4 src/mxfifocost.src
!
! 1.0 mm/dd/yyyy change??
!
Rem MXFIFOCOST ! call routine to get fifo cost
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL  6, 2006  10:03:51
Rem /w2/papermaster/r2005//usr/acct/mary/work/r10devl/misc/mxfifocost.src (univ2) [mary] {40940}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

include "src/copyright.inc" ! dx
External Lib "libgeneral.lib" !general routines
  Declare External Sub suberr,mainerr,getsession,setoutput,addtostr,CreateNetStatus
  Declare External Function getmsg$,expandarray
Declare Intrinsic Sub InpBuf,String
!Option Default Dialect IRIS1
Try
Enter FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$,e$,rstr$
!If Err 0 Gosub ERR_TRAP
Dim 1%,WHSE,TTYPE,ORDTYPE,nocostflag
Dim 2%,WDATE,Q0[1]
Dim 3%,AQTY,QTY,FCOST[1],FQ9[2],FICOST[1],FI4[1]
Dim 3%,REC_FL,REC_FT,REC_FS,REC_OS,REC_PROD,REC_PRWH,REC,R[50]
Dim 3%,REC_WHINFO,REC_FTMP,SPCOST,EXTWGT
Dim 3%,PRODLBS,PRODFACT
Dim 2%,JDATE,ACPER,FIFL
Dim LOTCODE$[12],SERIAL$[10],LOCATION$[6]
Dim PRODCODE$[12],P61$[256],P60$[50],P9$[50]
Dim TOLOTCODE$[12],TOSERIAL$[10],TOLOCATION$[10]
Dim WORKORDER$[6],BUILDPROD$[12],ADDKEY$[60],CCODE$[14],J4$[60]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],message$[400],webStr$[400]
Dim 2%,REASONCODE,REASONDESC$[16]
Dim DESC$[100],P8$[7]
Dim OLDFKEY$[30],NEWFKEY$[30]
Dim 3%,TMPFIFOCOST[3]
Rem {begin srcdevl/inc/dim.convert.i}
Dim 1%,CNVTU[2]
Dim 3%,CNVTA,AMOUNT
Rem {end dim.convert.i}
Dim 1%,FL1[2]
Dim 2%,FL2[3]
Dim 3%,FL3[14],FL4[1]
Dim FL1$[80]
Dim FLK$[50]
Dim 1%,FT1[3]
Dim 2%,FT2[3]
Dim 3%,FT3[3]
Dim FT1$[72]
Dim FLT$[50]
Dim KEYPRWH$[50]
Dim 3%,W3[24]
Dim A9$[156]
Dim 1%,PFU1[20]
Dim 2%,C1[24]
Dim 3%,A[33]
Dim KEYPROD$[50]
Dim FSKEY$[40],1%,FC0[1],3%,FC2[1]
Dim 2%,WHOS
Dim 3%
Def FNR(H) = Sgn(H) * (Int(Abs(H) * 100 + .5) * .01)
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,52,60;P8$;
mat read #1,3,192;fifl;
CH_FL = FIFOSPECCH[0]
CH_FT = FIFOSPECCH[1]
CH_FS = FIFOSPECCH[2]
CH_WHINFO = FIFOSPECCH[3]
CH_PROD = FIFOSPECCH[4]
CH_PRWH = FIFOSPECCH[5]
CH_FTMP = FIFOSPECCH[6]
If Not(CH_FL) Error 10000 ! Gosub ERR_TRAP
If Not(CH_PROD) Error 10000 ! Gosub ERR_TRAP
If Not(CH_PRWH) Error 10000 ! Gosub ERR_TRAP
SOURCE = FIFOSPEC1[0]
WHSE = FIFOSPEC1[1]
FROMWHSE = FIFOSPEC1[2]
TOWHSE = FIFOSPEC1[3]
ORDTYPE = FIFOSPEC1[4]
REASONCODE = FIFOSPEC1[5]
JDATE = FIFOSPEC2[0]
ACPER = FIFOSPEC2[1]
QTY = FIFOSPEC3[0]
TRANSREF = FIFOSPEC3[1]
TRANSCODE = FIFOSPEC3[2]
UNITCOST = FIFOSPEC3[3]
LBSUNIT = FIFOSPEC3[4]
LBSFACTOR = FIFOSPEC3[5]
BASEUNIT = FIFOSPEC3[6]
EXTWGT = FIFOSPEC3[7]
GLCOST = FIFOSPEC3[8]
SPECCOST = FIFOSPEC3[9]
PRODCODE$[1,12] = FIFOSPEC$[1,12]
LOTCODE$[1,12] = FIFOSPEC$[13,24]
SERIAL$[1,10] = FIFOSPEC$[25,34]
LOCATION$[1,6] = FIFOSPEC$[35,40]
TOLOTCODE$[1,12] = FIFOSPEC$[41,52]
TOSERIAL$[1,10] = FIFOSPEC$[53,62]
TOLOCATION$[1,6] = FIFOSPEC$[63,68]
WORKORDER$ = FIFOSPEC$[69,74]
BUILDPROD$ = FIFOSPEC$[75,86]
If SOURCE = 873
  P61$[60,60] = "N"
End If 
REASONDESC$ = FIFOSPEC$[87,102]
KEYPROD$ = PRODCODE$
Search #CH_PROD,2,1;KEYPROD$,REC_PROD,E \ If E Gosub ERR_SEARCH
Gosub READPROD
Gosub GETPRWH
If P60$[9,9] <> "F" And P60$[9,9] <> "L" Goto OUTEND
If Not(QTY) Goto OUTEND
If P61$[60,60] = "Y" Gosub GETSPECIALCOST
FCOST = 0;FCOST[1] = 0
FQ9[0] = (QTY) \ FQ9[1] = 0 \ FQ9[2] = 0
APPLYQTY: Rem start apply qty
FQ9[2] = FQ9[0] - FQ9[1]
FICOST = 0 \ FICOST[1] = 0 \ WDATE = 0 \ FI4[0] = 0 \ FI4[1] = 0
let nocostflag=0
Gosub L_5500
FQ9[1] = (FQ9[1] + FQ9[2])
FICOST = TMPFIFOCOST[0];FICOST[1] = TMPFIFOCOST[2]
FI4[0] = FL4[0];FI4[1] = FL4[1]
If P61$[60,60] = "Y" ! fifo special cost
  If TMPFIFOCOST[2] <> 0
    FCOST[1] = FCOST[1] + ((FQ9[2] * TMPFIFOCOST[2]))
  Else 
    If P8$[5,5] = "F"
      FCOST[1] = FCOST[1] + ((FQ9[2] * TMPFIFOCOST[0]))
    Else 
      If P8$[5,5] = "I"
        FCOST[1] = FCOST[1] + ((FQ9[2] * TMPFIFOCOST[1]))
      End If 
    End If 
  End If 
End If 
If P8$[5,5] = "I" Let FCOST = FCOST + ((FQ9[2] * TMPFIFOCOST[1]))
If P8$[5,5] = "F" Let FCOST = FCOST + ((FQ9[2] * TMPFIFOCOST[0]))
If FQ9[0] = FQ9[1] Goto OUTEND
Goto APPLYQTY
END ! Stop 
L_5500: Rem UPDATE FIFOLOT & FIFOTRANS
FLK$ = " ",FLK$ \ FLK$[1,12] = A9$[140,151] \ FLK$[13,14] = WHSE Using "##" \ MODE = 3
If P60$[9,9] = "L" Let FLK$[15] = "999999" \ MODE = 6
L_5510: Search #CH_FL,MODE,1;FLK$,REC_FL,E \ If E = 2 Goto CREATEFIFOLOT
If E Gosub ERR_SEARCH
If FLK$[1,12] <> A9$[140,151] Goto CREATEFIFOLOT
S9 = FLK$[13,14] \ If S9 <> WHSE Goto CREATEFIFOLOT
Mat Read #CH_FL,REC_FL,102;FL3; \ If Not(FL3 - FL3[1]) Goto L_5510
If FQ9[2] > 0 ! adding qty in
  If (FL3[0] - FL3[1]) < 0 ! fifo tier is negative
    If FQ9[2] >= Abs(FL3[0] - FL3[1]) Goto L_5590
  End If 
End If 
L_5555: FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FQ9[2] < 0 If FQTY > 0 Goto L_5590
If FQ9[2] >= 0 Goto L_5510
If FL3[0] Goto L_5510
Mat Read #CH_FL,REC_FL,86;FL2;
If JDATE = FL2[1] Goto L_5590
Goto L_5510
L_5590: Gosub READFIFOLOT
If FQ9[2] > 0 ! taking up a negative lot
  TMPFIFOCOST[0] = 0;TMPFIFOCOST[2] = 0
End If 
L_5615: If FQ9[2] > 0 Goto L_5650
FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FL3[0] If FQTY < Abs(FQ9[2]) Let FQ9[2] = - (FQTY)
If SOURCE = 226
  FL3[2] = FL3[2] - FQ9[2]
  if not(fl3[6]) let nocostflag=99
  Gosub WRITEFIFOLOT
  Gosub CREATEFIFOTMP
End If 
If SOURCE = 246
  FL3[4] = FL3[4] - FQ9[2]
  Gosub WRITEFIFOLOT
  Gosub CREATEFIFOTMP
End If 
If SOURCE = 324
  FL3[10] = FL3[10] - FQ9[2]
  Gosub WRITEFIFOLOT
  Gosub CREATEFIFOTMP
End If 
If SOURCE = 873
  FL3[9] = FL3[9] - FQ9[2]
  Gosub WRITEFIFOLOT
  Gosub CREATEFIFOTMP
End If 
L_5650: Rem!!!
If FICOST[1] > 0
  TMPFIFOCOST[2] = FICOST[1]
  FL4[0] = FI4[0];FL4[1] = FI4[0]
End If 
If FICOST[0] > 0
  TMPFIFOCOST[0] = FICOST[0]
  FL4[0] = FI4[0];FL4[1] = FI4[1]
End If 
If Not(TMPFIFOCOST[0])
  If UNITCOST
    TMPFIFOCOST[0] = UNITCOST
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  Else
	if not(nocostflag)
		gosub getfifocost:
	endif
	let nocostflag=0
  End If 
End If 
If Not(TMPFIFOCOST[2])
  If SPCOST
    TMPFIFOCPST[2] = SPCOST
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  End If 
End If 
TMPFIFOCOST[1] = TMPFIFOCOST[0] + ((TMPFIFOCOST[0] * FIFL) / 100)
L_5680: Rem write out fifolot
Return 
CREATEFIFOLOT: Rem CREATE FIFOLOT
For S9 = 0 To 14
  If S9 < 3 Let FL1[S9] = 0
  If S9 < 3 Let FL2[S9] = 0
  If S9 < 2 Let FL4[S9] = 0
  FL3[S9] = 0
Next S9
if spcost let ficost[1]=spcost
FL2[1] = JDATE
If FICOST
  TMPFIFOCOST[0] = FICOST
  FL4[0] = FI4[0];FL4[1] = FI4[1]
End If 
If FICOST[1]
  TMPFIFOCOST[2] = FICOST[1]
  FL4[0] = FI4[0];FL4[1] = FI4[1]
End If 
If TMPFIFOCOST[0] Goto L_5845
If (SOURCE = 227 Or SOURCE = 247) And (ORDTYPE = 8 Or ORDTYPE = 16) Goto L_5845
If Not(TMPFIFOCOST[0])
  If UNITCOST
    TMPFIFOCOST[0] = UNITCOST
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  Else 
    Gosub GETFIFOCOST
  End If 
End If 
L_5845: TMPFIFOCOST[1] = TMPFIFOCOST[0] + ((TMPFIFOCOST[0] * FIFL) / 100)
Return 
GETFIFOCOST: Rem need a fifo cost
FLK$[1,12] = A9$[140,151] \ FLK$[13,14] = WHSE Using "##" \ FLK$[15] = "999999" \ MODE = 6
If P60$[9,9] = "L" Let FLK$[15] = "" \ MODE = 3
Search #CH_FL,MODE,1;FLK$,REC,E \ If E = 2 Goto GETWHSECOST
If E Gosub ERR_SEARCH
S9 = FLK$[13,14]
If FLK$[1,12] = A9$[140,151] And S9 = WHSE
  Mat Read #CH_FL,REC,192;FL4;
  if fq9[2]<0 or tmpfifocost[2]<=0
	read #ch_fl,rec,186;tmpfifocost[2]; ! special cost 
  endif
  Read #CH_FL,REC,138;TMPFIFOCOST[0];
  If A9$[127,127] = "Y"
    If P61$[73,73] <> "Y"
      If TMPFIFOCOST[0]
        A[5] = FL4[1];A[6] = FL4[0]
        CNVTA = TMPFIFOCOST[0];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
        Gosub CONVERT
        A[6] = LBSFACTOR;A[6] = LBSUNIT
        CNVTA = AMOUNT;CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
        Gosub CONVERT
        TMPFIFOCOST[0] = AMOUNT
      End If 
      If P61$[60,60] = "Y" And TMPFIFOCOST[2] <> 0
        A[5] = FL4[1];A[6] = FL4[0]
        CNVTA = TMPFIFOCOST[2];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
        Gosub CONVERT
        A[6] = LBSUNIT;A[5] = LBSFACTOR
        CNVTA = AMOUNT;CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
        Gosub CONVERT
        TMPFIFOCOST[2] = AMOUNT
      End If 
      A[5] = PRODFACT;A[6] = PRODLBS
    End If 
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  End If 
  Return 
End If 
GETWHSECOST: Rem get cost
If P9$[32,32] = "Y" And W3[16] <> 0
  FL4[0] = A[6];FL4[1] = A[5]
  TMPFIFOCOST[0] = W3[16]
  If A9$[127,127] = "Y"
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
    CNVTA = W3[16];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
    Gosub CONVERT
    TMPFIFOCOST[0] = AMOUNT
    If P61$[73,73] <> "Y"
      A[5] = FL4[1];A[6] = FL4[0]
      CNVTA = TMPFIFOCOST[0];CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
      Gosub CONVERT
      TMPFIFOCOST[0] = AMOUNT
      A[5] = PRODFACT;A[6] = PRODLBS
    End If 
  End If 
  Return 
End If 
TMPFIFOCOST[0] = C1[10]
FL4[0] = A[6];FL4[1] = A[5]
If A9$[127,127] = "Y"
  FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  CNVTA = C1[10];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
  Gosub CONVERT
  TMPFIFOCOST[0] = AMOUNT
  If P61$[73,73] <> "Y"
    A[5] = FL4[1];A[6] = FL4[0]
    CNVTA = TMPFIFOCOST[0];CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
    Gosub CONVERT
    TMPFIFOCOST[0] = AMOUNT
    A[5] = PRODFACT;A[6] = PRODLBS
  End If 
End If 
Return 
GETSPECIALCOST: Rem get special cost for product
SPCOST = 0
If P61$[60,60] <> "Y" Return 
REC_OS = WHSE - 1
If REC_OS < 0 Goto ENDGETSPCCOST
If REC_OS > Chf(CH_WHINFO) Goto ENDGETSPCCOST
Read #CH_WHINFO,REC_OS,2970;WHOS;
If Not(WHOS) Goto ENDGETSPCCOST
FSKEY$[1,12] = A9$[140,151]
FSKEY$[13,16] = WHOS Using "####"
Search #CH_FS,2,1;FSKEY$,REC_FS,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_FS,REC_FS,12;FC0;
  Mat Read #CH_FS,REC_FS,38;FC2;
  If (fc0[1]=-1 or fc0[1]=-3) and extwgt>0 ! "cwt or catch wgt
    CNVTA = FC2[0];CNVTU[0] = 0;CNVTU[1] = FC0[1];CNVTU[2] = 2
    Gosub CONVERT \ DSP_COST = AMOUNT
    If FC0[1] = -1 Let DISP_EXT = DSP_COST * (EXTWGT) / 100
    If FC0[1] = -3 Let DISP_EXT = DSP_COST * (EXTWGT)
    TMPFIFOCOST[2] = DISP_EXT / QTY
  Else 
    TMPFIFOCOST[2] = FC2[0]
  End If 
  let spcost=tmpfifocost[2]
End If 
ENDGETSPCCOST: Rem
Return 
READFIFOLOT: Rem READ FIFOLOT
Mat Read #CH_FL,REC_FL,0;FL1
Mat Read #CH_FL,REC_FL,6;FL1$
Mat Read #CH_FL,REC_FL,86;FL2
Mat Read #CH_FL,REC_FL,102;FL3
Mat Read #CH_FL,REC_FL,192;FL4
TMPFIFOCOST[0] = FL3[6]
TMPFIFOCOST[1] = FL3[7]
TMPFIFOCOST[2] = FL3[14]
Return 
WRITEFIFOLOT: Rem  WRITE FIFOLOT
Rem MAT  WRITE #ch_fl,rec_fl,0;FL1
Rem MAT  WRITE #ch_fl,rec_fl,6;FL1$
Rem MAT  WRITE #ch_fl,rec_fl,86;FL2
Mat Write #CH_FL,REC_FL,102;FL3;
Rem mat  write #ch_fl,rec_fl,192;fl4;
Return 
GETPRWH: Rem PRODWHSE FILE
For S9 = 14 To 24 \ W3[S9] = 0 \ Next S9
KEYPRWH$ = " ",KEYPRWH$ \ KEYPRWH$[1,12] = A9$[140,151]
KEYPRWH$[13,14] = WHSE Using "##"
Search #CH_PRWH,2,1;KEYPRWH$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_PRWH,REC_PRWH,78;W3;
End If 
Return 
READPROD: Rem PRODUCT FILE
Mat Read #CH_PROD,REC_PROD,0;A9$;
Mat Read #CH_PROD,REC_PROD,156;C1;
Mat Read #CH_PROD,REC_PROD,256;A;
Mat Read #CH_PROD,REC_PROD,512;PFU1;
PRODLBS = A[6];PRODFACT = A[5]
Return 
CREATEFIFOTMP: Rem  INSERT KEY INTO FIFOTMP FILE
Search #CH_FTMP,2,1;FLK$,REC_FTMP,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  REC_FTMP = REC_FL
  Search #CH_FTMP,4,1;FLK$,REC_FTMP,E \ If E  Gosub ERR_SEARCH
End If 
Return 
L_10000: Rem ADD TO FIFO ADD FOR NEGATIVE ITEMS
If P60$[9,9] = "F" Or P60$[9,9] = "L"
  ADDKEY$ = " ",ADDKEY$;ADDKEY$[1,12] = A9$[140,151]
  ADDKEY$[13,14] = WHSE Using "##"
  Search #32,2,1;ADDKEY$,R[32],E \ If E > 1 Gosub ERR_SEARCH
  If E = 1
    Search #32,4,1;ADDKEY$,R[32],E \ If E Gosub ERR_SEARCH
  End If 
End If 
Return 

Rem {begin srcdevl/inc/rtn.converti.i}
CONVERT: Rem "convert quantities, costs & prices
Mat Read #1,115,40;Q0;
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
If CNVTU[2] = 3 Gosub DISPVALIDUNITS \ Goto CONVEND
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] ! "qty units same
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[0] = -2 Or CNVTU[1] = -2 ! "lot price
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[2] ! "all but valid conversion test
  If Not(CNVTA) ! "nothing there
    AMOUNT = 0
    Goto CONVEND
  End If 
End If 
Gosub DOCONVERT
If CNVTU[2] <> 0 And CNVTU[2] <> 3 ! "conversion types
  If FLAG Let E = FLAG ! \ Gosub ERR_SEARCH
End If 
CONVEND: Rem "go back
Return 
DOCONVERT: Rem "go for it
CONVFLAG = 0;SR = 8;SC = 12
If CNVTU[2] = 5 ! "no rounding of quantity
  CONVFLAG = 1
  CNVTU[2] = 1
End If 
If CNVTU[2] = 6 ! "no rounding of price/cost
  CONVFLAG = 1
  CNVTU[2] = 2
End If 
On CNVTU[2] + 1 Goto CHECKVALID1,DOCONVERT1,DOCONVERT1
Error 10000 ! E = 0 \ Gosub ERR_SEARCH
CHECKVALID1: Rem "see if valid conversion
For X1[1] = 0 To 1
  If CNVTU[X1[1]] > 0
    For X1[2] = 0 To 7
      If CNVTU[X1[1]] = PFU1[X1[2]] Goto VALID
    Next X1[2]
    FLAG = 1 \ Return 
  End If 
VALID: Rem "o.k.
Next X1[1]
FLAG = 0
Return 
DOCONVERT1: Rem "convert cost/price/quantity
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] <> 0 ! "not base
    If CNVTU[X1[1]] > 0 ! "not cwt
      For CUNIT = 0 To 7
        If PFU1[CUNIT] = CNVTU[X1[1]] Goto CONVVALID
      Next CUNIT
      FLAG = 0 \ Return 
CONVVALID: Rem "continue on
      If Not(CUNIT) Goto LOOPBACK
    End If 
    If CNVTU[2] = 2 Let CMODE = - CMODE
    If CNVTU[X1[1]] = -1 ! "cwt calculation
      If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
      If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Else 
      If CNVTU[X1[1]] = -3 ! "catch weight
        If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
        If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
      Else 
        If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
        If PFU2[CUNIT - 1] And CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
      End If 
    End If 
  End If 
LOOPBACK: Rem "get next x1[1]
Next X1[1]
If CNVTU[2] = 1 And Not(CONVFLAG) ! "convert quantity
  If CNVTU[1] And CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
  If Fra(AMOUNT) And (Not(CNVTU[1]) Or CNVTU[1] = PFU1[0]) Let AMOUNT = FNU(AMOUNT)
End If 
If CNVTU[2] = 2 And CNVTU[1] ! "cost/price (not base) to round
  If Not(CONVFLAG) ! "round away
    If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
    If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
    If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
  End If 
End If 
FLAG = 0
Return 
DISPVALIDUNITS: Rem "u/m list
Return

Rem {end rtn.converti.i}
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
OUTEND: Rem end of routine
FIFOSPEC3[8] = FNR(FCOST)
FIFOSPEC3[9] = FNR(FCOST[1])
End 
!Stop 
Else
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
Rem {end rtn.error.s}
