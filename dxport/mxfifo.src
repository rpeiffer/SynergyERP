! >>> Program mxfifo
!
! description Fifo File update
!
! loadsave -w -n 100,10 -o prog/dxport/mxfifo.dl4 src/mxfifo.src
!
! ERPScheduler Enabled
!
include "src/copyright.inc" ! dx
Rem MXFIFO ! call routine to update fifo transactions
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL  6, 2006  14:09:36
Rem /w2/papermaster/r2005//usr/acct/mary/work/r10devl/misc/mxfifo.src (univ2) [mary] {49702}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
!Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Try
Enter FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$,e$,IntCo,rstr$
! If Err 0 Gosub ERR_TRAP
Dim 1%,WHSE,TTYPE,ORDTYPE,CH_NEGFL,nocostflag
dim 1%,spo,c0[6],poglflag,spcflag,adjnegflag,spfcflag
dim 2%,wdate,q0[1],neglotflag,orgrtsdate
Dim 3%,AQTY,QTY,FCOST[1],FQ9[2],FICOST[1],FI4[1]
Dim 3%,REC_FL,REC_FT,REC_FS,REC_OS,REC_PROD,REC_PRWH,REC,R[50]
Dim 3%,REC_WHINFO,REC_FTMP,SPCOST,EXTWGT,REC_NEGLOT,RECCHK,POSQTY
Dim 3%,PRODLBS,PRODFACT
dim 3%,pos_rec_fl,pos_rec_ft,pl3[14],ofcst,ofscst
dim 3%,spunitcost,speccost
dim 2%,jdate,acper,pocntrl,negdate,fifl,xferord
Dim LOTCODE$[12],SERIAL$[10],LOCATION$[6]
Dim PRODCODE$[12],P61$[256],P60$[50],P9$[50]
Dim TOLOTCODE$[12],TOSERIAL$[10],TOLOCATION$[10]
Dim WORKORDER$[6],BUILDPROD$[12],ADDKEY$[50],CCODE$[14],J4$[60]
Dim 2%,REASONCODE,REASONDESC$[16]
Dim DESC$[100],P8$[7],LETTER$[1]
Dim OLDFKEY$[30],NEWFKEY$[30],KEYNEG$[30],NEWFTKEY$[30],FILENAME$[20]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
Rem {begin srcdevl/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Rem {begin srcdevl/inc/dim.convert.i}
Dim 1%,CNVTU[2]
Dim 3%,CNVTA,AMOUNT
Rem {end dim.convert.i}
Dim 1%,FL1[2],NEGFL1[2]
Dim 2%,FL2[3],NEGFL2[3]
Dim 3%,FL3[14],FL4[1],NEGFL3[14]
Dim FL1$[80],NEGFL1$[80]
Dim FLK$[50]
Dim 1%,FT1[3]
Dim 2%,FT2[3]
Dim 3%,FT3[3]
Dim FT1$[72]
Dim FLT$[50]
Dim KEYPRWH$[50]
Dim 3%,W3[24]
Dim A9$[156]
Dim 1%,PFU1[20]
Dim 2%,C1[24]
Dim 3%,A[33]
Dim KEYPROD$[50]
Dim FSKEY$[40],1%,FC0[1],3%,FC2[1]
Dim 2%,WHOS
Dim 3%
Def FNR(H) = Sgn(H) * (Int(Abs(H) * 100 + .5) * .01)
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,52,60;P8$;
Mat Read #1,19,50;P9$;
mat read #1,3,192;fifl;
mat read #1,51,88;poglflag;
mat read #1,51,76;spo;
mat read #1,51,18;c0;
CH_FL = FIFOSPECCH[0]
CH_FT = FIFOSPECCH[1]
CH_FS = FIFOSPECCH[2]
CH_WHINFO = FIFOSPECCH[3]
CH_PROD = FIFOSPECCH[4]
CH_PRWH = FIFOSPECCH[5]
CH_FTMP = FIFOSPECCH[6]
If Not(CH_FL) Error 10000 ! Gosub ERR_TRAP
If Not(CH_FT) Error 10000 ! Gosub ERR_TRAP
If Not(CH_PROD) Error 10000 ! Gosub ERR_TRAP
If Not(CH_PRWH) Error 10000 ! Gosub ERR_TRAP
SOURCE = FIFOSPEC1[0]
WHSE = FIFOSPEC1[1]
FROMWHSE = FIFOSPEC1[2]
TOWHSE = FIFOSPEC1[3]
ORDTYPE = FIFOSPEC1[4]
REASONCODE = FIFOSPEC1[5]
PRIMAL = FIFOSPEC1[6]
let spfcflag=fifospec1[7] ! for 339 unreceive 
JDATE = FIFOSPEC2[0]
ACPER = FIFOSPEC2[1]
POCNTRL = FIFOSPEC2[2]
let xferord=fifospec2[3] ! 774 order # for spicer
let orgrtsdate=fifospec2[4] ! 339 unreceive
QTY = FIFOSPEC3[0]
TRANSREF = FIFOSPEC3[1]
TRANSCODE = FIFOSPEC3[2]
UNITCOST = FIFOSPEC3[3]
LBSUNIT = FIFOSPEC3[4]
LBSFACTOR = FIFOSPEC3[5]
BASEUNIT = FIFOSPEC3[6]
EXTWGT = FIFOSPEC3[7]
GLCOST = FIFOSPEC3[8]
SPECCOST = FIFOSPEC3[9]
let spunitcost=fifospec3[10] ! special fifo unit cost
PRODCODE$[1,12] = FIFOSPEC$[1,12]
LOTCODE$[1,12] = FIFOSPEC$[13,24]
SERIAL$[1,10] = FIFOSPEC$[25,34]
LOCATION$[1,6] = FIFOSPEC$[35,40]
TOLOTCODE$[1,12] = FIFOSPEC$[41,52]
TOSERIAL$[1,10] = FIFOSPEC$[53,62]
TOLOCATION$[1,6] = FIFOSPEC$[63,68]
WORKORDER$ = FIFOSPEC$[69,74]
BUILDPROD$ = FIFOSPEC$[75,86]
If SOURCE = 873
  P61$[60,60] = "N"
End If 
REASONDESC$ = FIFOSPEC$[87,102]
KEYPROD$ = PRODCODE$
Search #CH_PROD,2,1;KEYPROD$,REC_PROD,E \ If E Gosub ERR_SEARCH
Gosub READPROD
Gosub GETPRWH
If P60$[9,9] <> "F" And P60$[9,9] <> "L" Goto OUTEND
If Not(QTY) And PRIMAL <> 0 Gosub CREATEFIFOLOT
If Not(QTY) Goto OUTEND
!If P61$[60,60] = "Y" Gosub GETSPECIALCOST
FCOST = 0;FCOST[1] = 0
FQ9[0] = (QTY) \ FQ9[1] = 0 \ FQ9[2] = 0
if source=339
	goto relunrec:
endif
if p61$[60,60]="Y" gosub getspecialcost:
APPLYQTY: Rem start apply qty
FQ9[2] = FQ9[0] - FQ9[1]
FICOST = 0 \ FICOST[1] = 0 \ WDATE = 0 \ FI4[0] = 0 \ FI4[1] = 0
Gosub L_5500
FQ9[1] = (FQ9[1] + FQ9[2])
FICOST = FL3[6];FICOST[1] = FL3[14]
FI4[0] = FL4[0];FI4[1] = FL4[1]
If P61$[60,60] = "Y" ! fifo special cost
  If FL3[14] <> 0
    FCOST[1] = FCOST[1] + ((FQ9[2] * FL3[14]))
  Else 
    If P8$[5,5] = "F"
      FCOST[1] = FCOST[1] + ((FQ9[2] * FL3[6]))
    Else 
      If P8$[5,5] = "I"
        FCOST[1] = FCOST[1] + ((FQ9[2] * FL3[7]))
      End If 
    End If 
  End If 
End If 
If P8$[5,5] = "I" Let FCOST = FCOST + ((FQ9[2] * FL3[7]))
If P8$[5,5] = "F" Let FCOST = FCOST + ((FQ9[2] * FL3[6]))
If SOURCE = 227 Or SOURCE = 247 Or SOURCE = 774
  If ORDTYPE = 8 Or ORDTYPE = 16 ! consignment or warehouse transfer
    AQTY = - FQ9[2] \ FQ9[2] = - FQ9[2]
    WHSE = TOWHSE \ WDATE = FL2[1]
L_5455: Gosub L_5500
    AQTY = AQTY - FQ9[2]
    If AQTY
      FQ9[2] = AQTY \ Goto L_5455
    End If 
    WHSE = FROMWHSE
  End If 
End If 
If FQ9[0] = FQ9[1] Goto OUTEND
Goto APPLYQTY
Stop 
L_5500: Rem UPDATE FIFOLOT & FIFOTRANS
NEGLOTFLAG = 0;REC_NEGLOT = 0;nocostflag=0
FLK$ = " ",FLK$ \ FLK$[1,12] = A9$[140,151] \ FLK$[13,14] = WHSE Using "##" \ MODE = 3
If P60$[9,9] = "L" Let FLK$[15] = "999999" \ MODE = 6
L_5510: Search #CH_FL,MODE,1;FLK$,REC_FL,E \ If E = 2 Goto CREATEFIFOLOT
If E Gosub ERR_SEARCH
If FLK$[1,12] <> A9$[140,151] Goto CREATEFIFOLOT
S9 = FLK$[13,14] \ If S9 <> WHSE Goto CREATEFIFOLOT
Mat Read #CH_FL,REC_FL,102;FL3; \ If Not(FL3 - FL3[1]) Goto L_5510
If FQ9[2] > 0 ! adding qty in
  If (FL3[0] - FL3[1]) < 0 ! fifo tier is negative
    If FQ9[2] >= Abs(FL3[0] - FL3[1])
      FQ9[2] = Abs(FL3[0] - FL3[1])
      NEGLOTFLAG = 0;REC_NEGLOT = 0
      Goto L_5590
    Else 
      Rem check to see if any amount posted are lessed than rcvd amt
      If NEGLOTFLAG = 99 And REC_NEGLOT <> 0 Goto ENDNEGINV
      KEYNEG$ = " ",KEYNEG$;KEYNEG$[1,6] = REC_FL Using "######"
SRCHNEGT: Rem search for negative fifo trans
      Search #CH_FT,3,1;KEYNEG$,REC_FT,E \ If E = 2 Goto ENDNEGINV
      If E Gosub ERR_SEARCH
      RECCHK = KEYNEG$[1,6] \ If RECCHK <> REC_FL Goto ENDNEGINV
      Mat Read #CH_FT,REC_FT,96;FT3;
      If FT3[0] >= 0 Goto SRCHNEGT
      If FQ9[2] >= Abs(FT3[0]) ! Check if fifo trans neg amt to take a part
        NEGLOTFLAG = 99;REC_NEGLOT = REC_FL
        Goto ENDNEGINV
      End If 
      Goto SRCHNEGT
ENDNEGINV: Rem end negative
    End If 
  End If 
End If 
If SOURCE = 227 ! take amount out of in process tier for invoices
  FL3[3] = FL3[3] - Abs(FQ9[2]) \ If FL3[3] < 0 Let FL3[3] = 0
End If 
If SOURCE = 247 ! take amount out of in process tier for credit memos
  FL3[5] = FL3[5] - Abs(FQ9[2]) \ If FL3[5] < 0 Let FL3[5] = 0
End If 
If SOURCE = 873 ! take amount our of in process tier for mfg
  FL3[9] = FL3[9] - Abs(FQ9[2]) \ If FL3[9] < 0 Let FL3[9] = 0
End If 
If SOURCE = 324 ! take amount out of in process tier for misc rts
  FL3[10] = FL3[10] - Abs(FQ9[2]) \ If FL3[10] < 0 Let FL3[10] = 0
End If 
L_5555: FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FQ9[2] < 0 If FQTY > 0 Goto L_5590
If FQ9[2] >= 0 Goto L_5510
If FL3[0] Goto L_5510
Mat Read #CH_FL,REC_FL,86;FL2;
If JDATE = FL2[1] Goto L_5590
Goto L_5510
L_5590: Gosub READFIFOLOT
let ofcst=fl3[6];ofscst=fl3[14]
If FQ9[2] > 0 ! taking up a negative lot
  FL3[0] = (FL3[0] + FQ9[2])
  FL3[6] = 0;FL3[14] = 0
  Gosub SETTRANSTYPE
  Gosub SETTRANSDESC
  FL1[1] = TTYPE
  FL1[2] = PFU1[0]
  If A9$[127,127] = "Y" And P61$[73,73] = "Y" Let FL1[2] = -3
  FL1$[1,80] = DESC$[1,80]
  NEGDATE = JDATE
  If ORDTYPE = 16 And FQ9[2] >= 0 And WDATE <> 0
    NEGDATE = WDATE
  End If 
  If NEGDATE <> FL2[1] ! date change need to change key
    OLDFKEY$ = " ",OLDFKEY$;OLDFKEY$[1,12] = FL1$[1,12]
    OLDFKEY$[13,14] = FL1[0] Using "##";OLDFKEY$[15,20] = FL2[1] Using "######"
    OLDFKEY$[21,26] = FL2[0] Using "######"
    NEWFKEY$ = OLDFKEY$;NEWFKEY$[15,20] = NEGDATE Using "######"
    Search #CH_FL,4,1;NEWFKEY$,REC_FL,E \ If E Gosub ERR_SEARCH
    Search #CH_FL,5,1;OLDFKEY$,REC,E \ If E Gosub ERR_SEARCH
    FL2[1] = NEGDATE
  End If 
End If 
L_5615: If FQ9[2] > 0 Goto L_5650
FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If SOURCE = 227
  FL3[3] = FL3[3] - Abs(FQ9[2]) \ If FL3[3] < 0 Let FL3[3] = 0
End If 
If SOURCE = 247
  FL3[5] = FL3[5] - Abs(FQ9[2]) \ If FL3[5] < 0 Let FL3[5] = 0
End If 
If SOURCE = 873
  FL3[9] = FL3[9] - Abs(FQ9[2]) \ If FL3[9] < 0 Let FL3[9] = 0
End If 
If SOURCE = 324
  FL3[10] = FL3[10] - Abs(FQ9[2]) \ If FL3[10] < 0 Let FL3[10] = 0
End If 
L_5635: FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FL3[0] If FQTY < Abs(FQ9[2]) Let FQ9[2] = - (FQTY)
FL3[1] = (FL3[1] - FQ9[2])
if fl3[6]=0 let nocostflag=99
L_5650: FL2[2] = JDATE
If FICOST[1] > 0
  FL3[14] = FICOST[1]
  FL4[0] = FI4[0];FL4[1] = FI4[0]
End If 
If FICOST[0] > 0
  FL3[6] = FICOST[0]
  FL4[0] = FI4[0];FL4[1] = FI4[1]
End If 
If Not(FL3[6])
  If UNITCOST
    FL3[6] = UNITCOST
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  Else 
   	if source<>374 and source<>385 and source<>339 ! ok for po's & dm's not to have cost
		If not(nocostflag)
			gosub getfifocost:
		endif
		let nocostflag=0
	End If 
  End If 
End If 
If Not(FL3[14])
  If SPCOST
    FL3[14] = SPCOST
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  End If 
End If 
FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
L_5680: Rem write out fifolot
If BASEUNIT > 0 Let FL3[12] = FL3[12] + BASEUNIT Else Let FL3[13] = FL3[13] + Abs(BASEUNIT)
Gosub WRITEFIFOLOT
If SOURCE = 227 Or SOURCE = 247 Gosub CREATEFIFOTMP
Gosub CREATEFIFOTRANS
if p9$[17,17]<>"Y" goto endvar: ! no gl interface
if not(poglflag) goto endvar: ! no po/gl interface
if not(spo) goto endvar: ! no po control #
if not(c0[4]) goto endvar: ! no ap po interface
if p61$[60,60]="Y"
	if fl3[14] ! has an old fifo cost
		if not (ofscst) let ofscst=ofcst ! set to orig cost
		if ofscst<>fl3[14] ! ofscst -- fifo lot special tier cost
		  let spcflag=99
		  call "MXFIFOVAR.dl4",FIFOSPECCH[],rec_fl,rec_ft,ofscst,fl3[14],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
		endif
		goto endvar:
	endif
endif
if ofcst<>fl3[6]
	let spcflag=0
	!! call routing
	call "MXFIFOVAR.dl4",FIFOSPECCH[],rec_fl,rec_ft,ofcst,fl3[6],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
endif
endvar: ! end update of variance
Return 
CREATEFIFOLOT: Rem CREATE FIFOLOT
FL1$ = " ",FL1$
For S9 = 0 To 14
  If S9 < 3 Let FL1[S9] = 0
  If S9 < 3 Let FL2[S9] = 0
  If S9 < 2 Let FL4[S9] = 0
  FL3[S9] = 0
Next S9
if spcost let ficost[1]=spcost
FL1[0] = WHSE
Gosub SETTRANSTYPE
Gosub SETTRANSDESC
FL1[1] = TTYPE
FL1[2] = PFU1[0]
If A9$[127,127] = "Y" And P61$[73,73] = "Y" Let FL1[2] = -3
FL1$[1,80] = DESC$[1,80]
FL2[1] = JDATE
If SOURCE = 227 And ORDTYPE = 16 And FQ9[2] > 0 ! keep orig tier transaction date
  FL2[1] = WDATE
End If 
If FQ9[2] > 0 Let FL3[0] = (FQ9[2])
If FQ9[2] < 0 Let FL3[1] = (Abs(FQ9[2]))
If FICOST
  FL3[6] = FICOST
  FL4[0] = FI4[0];FL4[1] = FI4[1]
End If 
If FICOST[1]
  FL3[14] = FICOST[1]
  FL4[0] = FI4[0];FL4[1] = FI4[1]
End If 
If FL3[6] Goto L_5845
If (SOURCE = 227 Or SOURCE = 247) And (ORDTYPE = 8 Or ORDTYPE = 16) and fq9[2]>0 Goto L_5845
If Not(FL3[6])
  If UNITCOST
    FL3[6] = UNITCOST
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  Else
    if source<>374 and source<>385 and source<>339! ok for po's & dm's not to have cost
          Gosub GETFIFOCOST
    End If 
  End If 
End If 
L_5845: FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
FLK$ = " ",FLK$
E = 2 \ Search #CH_FL,1,0;FLK$,REC_FL,E \ If E Gosub ERR_SEARCH
FL2 = REC_FL
If BASEUNIT > 0 Let FL3[12] = FL3[12] + BASEUNIT Else Let FL3[13] = FL3[13] + Abs(BASEUNIT)
Gosub WRITEFIFOLOT
If SOURCE = 227 Or SOURCE = 247 Gosub CREATEFIFOTMP
FLK$ = " ",FLK$ \ FLK$[1,12] = FL1$[1,12] \ FLK$[13,14] = FL1 Using "##"
FLK$[15,20] = FL2[1] Using "######" \ FLK$[21,26] = FL2 Using "######"
Search #CH_FL,4,1;FLK$,REC_FL,E \ If E Gosub ERR_SEARCH
Gosub CREATEFIFOTRANS
If FQ9[2] > 0 And NEGLOTFLAG = 99
  let pos_rec_ft=rec_ft ! save positive fifo trans rec #
  let pos_rec_fl=rec_fl ! save positive fifo lot rec #
  let pl3[6]=fl3[6] ! save positive cost
  let pl3[14]=fl3[14] ! save negative cost
  Gosub ADJNEGFIFO
  	if p9$[17,17]<>"Y" goto endnegvar: ! no gl interface
	if not (poglflag) goto endnegvar: ! no po gl interface
	if not (spo) goto endnegvar: ! no po control #
	if not (c0[4]) goto endnegvar: ! no ap po interface
	if not (adjnegflag) goto endnegvar: ! no adjustment was made
	MAT  READ#ch_ft,pos_rec_ft,0;FT1$;
	MAT  READ#ch_ft,pos_rec_ft,72;FT1;
	MAT  READ#ch_ft,pos_rec_ft,80;FT2;
	if p61$[60,60]="Y"
		if pl3[14]<>0
			if not (ofscst) let ofscst=ofcst
			if pl3[14]<>ofscst
				let spcflag=99
				!! set call variables
				call "MXFIFOVAR.dl4",FIFOSPECCH[],pos_rec_fl,pos_rec_ft,ofscst,pl3[14],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
			endif
			goto endnegvar:
		endif
	endif
	if pl3[6]<>ofcst
		let spcflag=0
		!! set call variable
		call "MXFIFOVAR.dl4",FIFOSPECCH[],pos_rec_fl,pos_rec_ft,ofcst,pl3[6],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
	endif
	endnegvar: ! end update of negative variance
End If 
Return 
CREATEFIFOTRANS: Rem FIFOTRANS FILE UPDATE
For S9 = 0 To 3 \ FT1[S9] = 0 \ FT2[S9] = 0 \ FT3[S9] = 0 \ Next S9
Gosub SETTRANSDESC
FT1$ = " ",FT1$
FT1$[1,49] = DESC$[1,49]
if source=227 or source=247 or source=374 or source=385 or source=774 or source=339
	LET FT1$[53,63]=desc$[50,60] ! customer code\vendor code
	if source=774 and xferord<>0
		LET FT1$[65,70]=xferord using "######"
	ENDIF                                    
End If 
If SOURCE = 374 Or SOURCE = 385 ! set po contrl # in fifotrans
  FT1$[66,72] = DESC$[74,80]
End If 
If SOURCE = 873
  FT1$[1,51] = DESC$[1,51]
  FT1$[52,63] = DESC$[53,64]
End If 
If SOURCE = 324
  FT1$[41,48] = "MISC RTS"
  FT1$[49,49] = " "
  FT1$[53,72] = DESC$[41,60]
End If 
If SOURCE = 697
  FT1$[41,48] = "PROG 697"
  FT1$[49,49] = " "
  FT1$[53,72] = DESC$[41,60]
End If 
If SOURCE = 775
  FT1$[41,48] = "PROG 775"
  FT1$[49,49] = " "
  FT1$[53,72] = DESC$[41,60]
End If 
Gosub SETTRANSTYPE
FT1[0] = TTYPE
If FT1[0] = 8 Or FT1[0] = 9 Or FT1[0] = 10 ! need to save warehouse #
  FT1$[71,72] = FROMWHSE Using "##"
End If 
If FT1[0] = 22 Or FT1[0] = 28
  FT1$[71,72] = TOWHSE Using "##"
End If 
FT1[1] = WHSE
FT1[2] = Spc(6) \ FT2[0] = FL2[0]
FT2[2] = JDATE \ FT3[0] = FQ9[2]
FT2[3] = ACPER
FT3[1] = FL3[6] \ FT3[2] = FL3[7] \ FT3[3] = FL3[14]
if (source=385 or source=339) and unitcost<>0 and unitcost<>fl3[6]! debit memo coming out with a different cost
  FT3[1] = UNITCOST
  let ofcst=unitcost ! need to adjust this tier 
  FT3[2] = FT3[1] + ((FT3[1] * FIFL) / 100)
End If 
if source=339 and spfcflag<>0 and spunitcost<>0 and spunitcost<>fl3[14]
	let ft3[3]=spunitcost
	let ofscst=spunitcost
endif
FLT$ = " ",FLT$
E = 2 \ Search #CH_FT,1,0;FLT$,REC_FT,E \ If E Gosub ERR_SEARCH
If REC_FT <= 999999 Let FT2[1] = REC_FT
Gosub L_6100
FLT$[1,6] = FT2[0] Using "######" \ FLT$[7,12] = FT2[2] Using "######"
If REC_FT <= 999999
  FLT$[13,18] = FT2[1] Using "######"
Else 
  FTRECA = Int((REC_FT - 1000000) / 100000)
  FTRECB = Fra(REC_FT / 100000) * 100000
  Call String(4,FTRECA + 193,LETTER$)
  FLT$[13,13] = LETTER$[1,1]
  FLT$[14,18] = FTRECB Using "#####"
End If 
Search #CH_FT,4,1;FLT$,REC_FT,E \ If E Gosub ERR_SEARCH
if (source=385 or source=339) and unitcost<>0 and unitcost<>fl3[6]! debit memo coming out with a different cost
	mat read #ch_ft,rec_ft,96;ft3;
	let ofcst=ft3[1] ! need to adjust this tier 
endif
if source=339 and spfcflag<>0 and spunitcost<>0 and spunitcost<>fl3[14]
	mat read #ch_ft,rec_ft,96;ft3;
	let ofscst=ft3[3]
endif
Return 
GETFIFOCOST: Rem need a fifo cost
FLK$[1,12] = A9$[140,151] \ FLK$[13,14] = FL1[0] Using "##" \ FLK$[15] = "999999" \ MODE = 6
If P60$[9,9] = "L" Let FLK$[15] = "" \ MODE = 3
Search #CH_FL,MODE,1;FLK$,REC,E \ If E = 2 Goto GETWHSECOST
If E Gosub ERR_SEARCH
S9 = FLK$[13,14]
If FLK$[1,12] = A9$[140,151] And S9 = FL1[0]
  Mat Read #CH_FL,REC,192;FL4;
  if fq9[2]<0 or fl3[14]<=0
	read #ch_fl,rec,186;fl3[14];
  endif	
  Read #CH_FL,REC,138;FL3[6];
  If A9$[127,127] = "Y"
    If P61$[73,73] <> "Y"
      If FL3[6]
        A[5] = FL4[1];A[6] = FL4[0]
        CNVTA = FL3[6];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
        Gosub CONVERT
        A[6] = LBSFACTOR;A[6] = LBSUNIT
        CNVTA = AMOUNT;CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
        Gosub CONVERT
        FL3[6] = AMOUNT
      End If 
      If P61$[60,60] = "Y" And FL3[14] <> 0
        A[5] = FL4[1];A[6] = FL4[0]
        CNVTA = FL3[14];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
        Gosub CONVERT
        A[6] = LBSUNIT;A[5] = LBSFACTOR
        CNVTA = AMOUNT;CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
        Gosub CONVERT
        FL3[14] = AMOUNT
      End If 
      A[5] = PRODFACT;A[6] = PRODLBS
    End If 
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  End If 
  Return 
End If 
GETWHSECOST: Rem get cost
If P9$[32,32] = "Y" And W3[16] <> 0
  FL4[0] = A[6];FL4[1] = A[5]
  FL3[6] = W3[16]
  If A9$[127,127] = "Y" ! need to get the cost per lbs
    FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
    CNVTA = W3[16];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
    Gosub CONVERT
    FL3[6] = AMOUNT
    If P61$[73,73] <> "Y"
      A[5] = FL4[1];A[6] = FL4[0]
      CNVTA = FL3[6];CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
      Gosub CONVERT
      FL3[6] = AMOUNT
      A[5] = PRODFACT;A[6] = PRODLBS
    End If 
  End If 
  Return 
End If 
FL3[6] = C1[10]
FL4[0] = A[6];FL4[1] = A[5]
If A9$[127,127] = "Y"
  FL4[0] = LBSUNIT;FL4[1] = LBSFACTOR
  CNVTA = C1[10];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
  Gosub CONVERT
  FL3[6] = AMOUNT
  If P61$[73,73] <> "Y" ! not by lb
    A[5] = FL4[1];A[6] = FL4[0]
    CNVTA = FL3[6];CNVTU[0] = -3;CNVTU[1] = 0;CNVTU[2] = 2
    Gosub CONVERT
    FL3[6] = AMOUNT
    A[5] = PRODFACT;A[6] = PRODLBS
  End If 
End If 
Return 
GETSPECIALCOST: Rem get special cost for product
SPCOST = 0
If P61$[60,60] <> "Y" Return 
REC_OS = WHSE - 1
If REC_OS < 0 Goto ENDGETSPCCOST
If REC_OS > Chf(CH_WHINFO) Goto ENDGETSPCCOST
Read #CH_WHINFO,rec_os,2970;WHOS;
If Not(WHOS) Goto ENDGETSPCCOST
FSKEY$[1,12] = A9$[140,151]
FSKEY$[13,16] = WHOS Using "####"
Search #CH_FS,2,1;FSKEY$,REC_FS,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_FS,REC_FS,12;FC0;
  Mat Read #CH_FS,REC_FS,38;FC2;
  If (fc0[1]=-1 or fc0[1]=-3) and extwgt>0 ! "cwt or catch wgt
     CNVTA = FC2[0];CNVTU[0] = 0;CNVTU[1] = FC0[1];CNVTU[2] = 2
    Gosub CONVERT \ DSP_COST = AMOUNT
    If FC0[1] = -1 Let DISP_EXT = DSP_COST * (EXTWGT) / 100
    If FC0[1] = -3 Let DISP_EXT = DSP_COST * (EXTWGT)
    FL3[14] = DISP_EXT / QTY
  Else 
    FL3[14] = FC2[0]
  End If 
  let spcost=fl3[14]
End If 
ENDGETSPCCOST: Rem
Return 
READFIFOLOT: Rem READ FIFOLOT
Mat Read #CH_FL,REC_FL,0;FL1
Mat Read #CH_FL,REC_FL,6;FL1$
Mat Read #CH_FL,REC_FL,86;FL2
Mat Read #CH_FL,REC_FL,102;FL3
Mat Read #CH_FL,REC_FL,192;FL4
Return 
WRITEFIFOLOT: Rem  WRITE FIFOLOT
Mat Write #CH_FL,REC_FL,0;FL1
Mat Write #CH_FL,REC_FL,6;FL1$
Mat Write #CH_FL,REC_FL,86;FL2
Mat Write #CH_FL,REC_FL,102;FL3;
Mat Write #CH_FL,REC_FL,192;FL4;
Return 
L_6100: Rem WRITE FIFOTRANS
Mat Write #CH_FT,REC_FT,0;FT1$;
Mat Write #CH_FT,REC_FT,72;FT1;
Mat Write #CH_FT,REC_FT,80;FT2;
Mat Write #CH_FT,REC_FT,96;FT3;
Return 
GETPRWH: Rem PRODWHSE FILE
For S9 = 14 To 24 \ W3[S9] = 0 \ Next S9
KEYPRWH$ = " ",KEYPRWH$ \ KEYPRWH$[1,12] = A9$[140,151]
KEYPRWH$[13,14] = WHSE Using "##"
Search #CH_PRWH,2,1;KEYPRWH$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_PRWH,REC_PRWH,78;W3;
End If 
Return 
READPROD: Rem PRODUCT FILE
Mat Read #CH_PROD,REC_PROD,0;A9$;
Mat Read #CH_PROD,REC_PROD,156;C1;
Mat Read #CH_PROD,REC_PROD,256;A;
Mat Read #CH_PROD,REC_PROD,512;PFU1;
PRODLBS = A[6];PRODFACT = A[5]
Return 
CREATEFIFOTMP: Rem  INSERT KEY INTO FIFOTMP FILE
Search #CH_FTMP,2,1;FLK$,REC_FTMP,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  REC_FTMP = REC_FL
  Search #CH_FTMP,4,1;FLK$,REC_FTMP,E \ If E Gosub ERR_SEARCH
End If 
Return 
L_10000: Rem ADD TO FIFO ADD FOR NEGATIVE ITEMS
If P60$[9,9] = "F" Or P60$[9,9] = "L"
  ADDKEY$ = " ",ADDKEY$;ADDKEY$[1,12] = A9$[140,151]
  ADDKEY$[13,14] = WHSE Using "##"
  Search #32,2,1;ADDKEY$,R[32],E \ If E > 1 Gosub ERR_SEARCH
  If E = 1
    Search #32,4,1;ADDKEY$,R[32],E \ If E Gosub ERR_SEARCH
  End If 
End If 
Return 
SETTRANSTYPE: Rem set transaction type
If SOURCE = 227 ! set the transaction types
  TTYPE = 16
  If ORDTYPE = 6 Or ORDTYPE = 10 ! samples and donations
    TTYPE = 26
  Else 
    If ORDTYPE = 16 ! warehouse transfer
      If FQ9[2] > 0 Let TTYPE = 10 Else Let TTYPE = 28
    Else 
      If ORDTYPE = 8 ! consignments
        If FQ9[2] > 0 Let TTYPE = 8 Else Let TTYPE = 22
      End If 
    End If 
  End If 
End If 
If SOURCE = 247 ! from credit memo accept
  TTYPE = 3
  If ORDTYPE = 8
    If FQ9[2] >= 0 Let TTYPE = 9 Else Let TTYPE = 22
  End If 
End If 
If SOURCE = 324
  If FQ9[2] >= 0 Let TTYPE = 7 Else Let TTYPE = 30
End If 
If SOURCE = 374 or source=339 
  TTYPE = 1
End If 
If SOURCE = 385
  TTYPE = 31
End If 
If SOURCE = 697
  If FQ9[2] >= 0 Let TTYPE = 11 Else Let TTYPE = 24
End If 
If SOURCE = 774
  If FQ9[2] >= 0 Let TTYPE = 10 Else Let TTYPE = 28
End If 
If SOURCE = 775
  If FQ9[2] >= 0 Let TTYPE = 13 Else Let TTYPE = 15
End If 
If SOURCE = 873 ! for mfg
  If FQ9[2] >= 0 Let TTYPE = 2 Else Let TTYPE = 17
End If 
Return 
SETTRANSDESC: Rem set transaction description
DESC$ = " ",DESC$
DESC$[1,12] = A9$[140,151]
DESC$[13,24] = LOTCODE$[1,12]
DESC$[25,34] = SERIAL$[1,10]
DESC$[35,40] = LOCATION$[1,6]
If SOURCE = 227
  DESC$[41,49] = TRANSREF Using "I########"
  DESC$[50,60] = TRANSCODE Using "CUST ######"
End If 
If SOURCE = 247
  DESC$[41,49] = TRANSREF Using "CM#######"
  DESC$[50,60] = TRANSCODE Using "CUST ######"
End If 
If SOURCE = 324
  DESC$[41,56] = REASONDESC$[1,16]
  DESC$[57,57] = "/";DESC$[58,60] = REASONCODE Using "###"
  If REASONCODE = 99
    DESC$[71,80] = BUILDPROD$
  End If 
End If 
If SOURCE = 374 or source=339 
  DESC$[41,49] = TRANSREF Using "PO#######"
  DESC$[50,60] = TRANSCODE Using "VEND ######"
  If POCNTRL
    DESC$[74,74] = "c"
    DESC$[75,80] = POCNTRL Using "######"
  End If 
End If 
If SOURCE = 385
  DESC$[41,49] = TRANSREF Using "DM#######"
  DESC$[50,60] = TRANSCODE Using "VEND ######"
  If POCNTRL
    DESC$[74,74] = "c"
    DESC$[75,80] = POCNTRL Using "######"
  End If 
End If 
If SOURCE = 697
  DESC$[41,65] = "PHYSICAL INVENTORY ADJUST"
  If PRIMAL Let DESC$[41,65] = "PRIMAL INVENTORY ADJUST  "
End If 
If SOURCE = 774
  If FQ9[2] >= 0
    DESC$[13,24] = TOLOTCODE$[1,12]
    DESC$[25,34] = TOSERIAL$[1,10]
    DESC$[35,40] = TOLOCATION$[1,6]
    DESC$[41,48] = "PROG 774"
    DESC$[50,59] = FROMWHSE Using "FROM WH ##"
  Else 
    DESC$[41,48] = "PROG 774"
    DESC$[50,59] = TOWHSE Using "TO WH ##  "
  End If 
End If 
If SOURCE = 775
  DESC$[41,65] = "INVENTORY RESET          "
End If 
If SOURCE = 873
  DESC$[41,44] = "PWO#"
  DESC$[45,50] = WORKORDER$[1,6]
  DESC$[51,51] = "/"
  DESC$[52,63] = BUILDPROD$[1,12]
End If 
Return 
ADJNEGFIFO: Rem adjust for negative fifo lots
let adjnegflag=0
CH_NEGFL = 0
If FQ9[2] <= 0 Goto ENDADJNEGFIFO
If NEGLOTFLAG <> 99 Goto ENDADJNEGFIFO
If REC_NEGLOT = 0 Goto ENDADJNEGFIFO
Mat Read #CH_FL,REC_NEGLOT,0;NEGFL1;
If NEGFL1[0] <> FL1[0] Goto ENDADJNEGFIFO
Mat Read #CH_FL,REC_NEGLOT,6;NEGFL1$;
If NEGFL1$[1,12] <> FL1$[1,12] Goto ENDADJNEGFIFO
Mat Read #CH_FL,REC_NEGLOT,102;NEGFL3;
If (NEGFL3[0] - NEGFL3[1]) >= 0 Goto ENDADJNEGFIFO
Mat Read #CH_FL,REC_NEGLOT,6;NEGFL1$
Rem for record locking purposes need to open fifolot on another channel
Rem open fifolot on another channel for record locking
CHNL = Findchannel() ! 99
! Gosub GETCHAN
CH_NEGFL = CHNL
Read #1,88,3008;FILENAME$; \ Open #CH_NEGFL,FILENAME$
Mat Read #CH_FL,REC_NEGLOT,6;NEGFL1$;
mat read #ch_fl,rec_neglot,102;negfl3;
let ofcst=negfl3[6];ofscst=negfl3[14]
POSQTY = FQ9[2]
KEYNEG$ = " ",KEYNEG$;KEYNEG$[1,6] = REC_NEGLOT Using "######"
SRCHNEGFT: Rem search for negative fifo trans lot
Search #CH_FT,3,1;KEYNEG$,REC_FT,E \ If E = 2 Goto ENDADJNEGFIFO
If E Gosub ERR_SEARCH
RECCHK = KEYNEG$[1,6] \ If RECCHK <> REC_NEGLOT Goto ENDADJNEGFIFO
Mat Read #CH_FT,REC_FT,96;FT3;
If FT3[0] >= 0 Goto SRCHNEGFT
If POSQTY < Abs(FT3[0]) Goto SRCHNEGFT
let adjnegflag=99
Rem ok we have found 1
Mat Read #CH_FT,REC_FT,0;FT1$
Mat Read #CH_FT,REC_FT,72;FT1
Mat Read #CH_FT,REC_FT,80;FT2
Rem reduce qty used in negative fifo lot
Mat Read #CH_NEGFL,REC_NEGLOT,102;NEGFL3
NEGFL3[1] = NEGFL3[1] + FT3[0]
Mat Write #CH_NEGFL,REC_NEGLOT,102;NEGFL3;
Rem increase qty used in positive fifolot
Mat Read #CH_FL,REC_FL,102;FL3
FL3[1] = FL3[1] - FT3[0]
Mat Write #CH_FL,REC_FL,102;FL3;
Rem move fifo trans record to positive lot
NEWFTKEY$ = KEYNEG$
NEWFTKEY$[1,6] = REC_FL Using "######"
FT2[0] = REC_FL
Search #CH_FT,4,1;NEWFTKEY$,REC_FT,E \ If E Gosub ERR_SEARCH
Search #CH_FT,5,1;KEYNEG$,REC_FT,E \ If E Gosub ERR_SEARCH
Mat Write #CH_FT,REC_FT,80;FT2;
POSQTY = POSQTY + FT3[0]
If POSQTY <= 0 Goto ENDADJNEGFIFO
Goto SRCHNEGFT
ENDADJNEGFIFO: Rem end of adjusting negative fifo tiers
If CH_NEGFL Close #CH_NEGFL
CH_NEGFL = 0
NEGLOTFLAG = 0;REC_NEGLOT = 0
Return 

relunrec: !! unreceive purchase order - release from po that it was received from
if fq9[0]>=0 goto applyqty: ! adding qty in
if source<>339 goto applyqty: ! only for unrelease
if not (spo) goto applyqty: ! not po control #
if not (c0[4]) goto applyqty: ! not po ap interface
!! looking to apply to original purchase order #
LET FLK$=" ",FLK$ \ LET FLK$[1,12]=A9$[140,151] \ LET FLK$[13,14]=WHSE USING "##" 
if orgrtsdate let flk$[15,20]=orgrtsdate using "######"
 LET MODE=3 !FIFO
srchunlot: !!
let fq9[2]=fq9[0]-fq9[1]
SEARCH #ch_fl,MODE,1;FLK$,rec_fl,E \ IF E=2 GOTO applyqty:
IF E GOSUB Err_Search:
IF FLK$[1,12]<>A9$[140,151] goto applyqty:
LET S9=FLK$[13,14] \ IF S9<>WHSE goto applyqty: 
if orgrtsdate
	let x2=flk$[15,20]\if orgrtsdate<>x2 goto applyqty: ! not on this day
endif
mat read #ch_fl,rec_fl,6;fl1$;
!!! check the po #
let x2=fl1$[44,49]\if x2<>transref goto srchunlot:
!!! Check the contrl #
if fl1$[74,74]="c"
	let x2=fl1$[75,80]\if x2<>pocntrl goto srchunlot:
endif
MAT  READ #ch_fl,rec_fl,102;FL3; \ IF NOT(FL3-FL3[1]) GOTO srchunlot: !LOT CLOSED
LET FQTY=FL3[0]
FOR S9=1 TO 5 \ LET FQTY=FQTY-FL3[S9] \ NEXT S9
for s9=8 to 11\ let fqty=fqty-fl3[s9] \ next s9
if fqty<=0 goto srchunlot:
GOSUB readfifolot: ! READ FIFOLOT
! check again with locks on
let fqty=fl3[0]
for s9=1 to 5 \let fqty=fqty-fl3[s9]\next s9
for s9=8 to 11\let fqty=fqty-fl3[s9]\next s9
if fqty<=0 goto srchunlot:
let ofcst=fl3[6];ofscst=fl3[14]
LET FQTY=FL3[0]
IF FQTY<ABS(FQ9[2]) LET FQ9[2]=-(FQTY)
LET FL3[1]=(FL3[1]-FQ9[2]) ! TAKE UP QTYUSED  
LET FL2[2]=JDATE !  
if ficost[1]>0
	let fl3[14]=ficost[1]
	let fl4[0]=fi4[0];fl4[1]=fi4[0]
endif
IF FICOST[0]>0
	LET FL3[6]=FICOST[0]
	let fl4[0]=fi4[0];fl4[1]=fi4[1]
endif
if not(fl3[6])
	if unitcost
		let fl3[6]=unitcost
		let fl4[0]=lbsunit;fl4[1]=lbsfactor
	else
		if source<>374 and source<>385 and source<>339 ! ok for po's & dm's not to have cost
			gosub getfifocost:
		endif
	endif
endif
if not(fl3[14])
	if source=339 and spunitcost<>0 and spfcflag<>0
		let fl3[14]=spunitcost
	else
		if spcost
			let fl3[14]=spcost
			let fl4[0]=lbsunit;fl4[1]=lbsfactor
		endif
	endif
endif
LET FL3[7]=FL3[6]+((FL3[6]*FIFL)/100)
! write out fifolot 
if baseunit>0 let fl3[12]=fl3[12]+baseunit else let fl3[13]=fl3[13]+abs(baseunit)
GOSUB writefifolot: 
GOSUB createfifotrans: !  CREATE FIFO TRANS
if p9$[17,17]<>"Y" goto endunvar: ! no gl interface
if not(poglflag) goto endunvar: ! no po/gl interface
if not(spo) goto endunvar: ! no po control #
if not(c0[4]) goto endunvar: ! no ap po interface
if p61$[60,60]="Y"
	if fl3[14] ! has an old fifo cost
		if not (ofscst) let ofscst=ofcst ! set to orig cost
		if ofscst<>fl3[14] ! ofscst -- fifo lot special tier cost
		  let spcflag=99
		call "MXFIFOVAR.dl4",FIFOSPECCH[],rec_fl,rec_ft,ofscst,fl3[14],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
		endif
		goto endunvar:
	endif
endif
if ofcst<>fl3[6]
	let spcflag=0
	!! all routing
	call "MXFIFOVAR.dl4",FIFOSPECCH[],rec_fl,rec_ft,ofcst,fl3[6],FT1$,FT1[],FT2[],SPCFLAG,e$,IntCo,rstr$
endif
endunvar: ! end update of variance
LET FQ9[1]=(FQ9[1]+FQ9[2])
IF FQ9[0]=FQ9[1] goto outend:
!! and update lot posting
goto srchunlot:


Rem {begin srcdevl/inc/rtn.converti.i}
CONVERT: Rem "convert quantities, costs & prices
Mat Read #1,115,40;Q0;
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
If CNVTU[2] = 3 Gosub DISPVALIDUNITS \ Goto CONVEND
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] ! "qty units same
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[0] = -2 Or CNVTU[1] = -2 ! "lot price
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[2] ! "all but valid conversion test
  If Not(CNVTA) ! "nothing there
    AMOUNT = 0
    Goto CONVEND
  End If 
End If 
Gosub DOCONVERT
If CNVTU[2] <> 0 And CNVTU[2] <> 3 ! "conversion types
  If FLAG Let E = FLAG \ Gosub ERR_SEARCH
End If 
CONVEND: Rem "go back
Return 
DOCONVERT: Rem "go for it
CONVFLAG = 0;SR = 8;SC = 12
If CNVTU[2] = 5 ! "no rounding of quantity
  CONVFLAG = 1
  CNVTU[2] = 1
End If 
If CNVTU[2] = 6 ! "no rounding of price/cost
  CONVFLAG = 1
  CNVTU[2] = 2
End If 
On CNVTU[2] + 1 Goto CHECKVALID1,DOCONVERT1,DOCONVERT1
E = 0 \ Gosub ERR_SEARCH
CHECKVALID1: Rem "see if valid conversion
For X1[1] = 0 To 1
  If CNVTU[X1[1]] > 0
    For X1[2] = 0 To 7
      If CNVTU[X1[1]] = PFU1[X1[2]] Goto VALID
    Next X1[2]
    FLAG = 1 \ Return 
  End If 
VALID: Rem "o.k.
Next X1[1]
FLAG = 0
Return 
DOCONVERT1: Rem "convert cost/price/quantity
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] <> 0 ! "not base
    If CNVTU[X1[1]] > 0 ! "not cwt
      For CUNIT = 0 To 7
        If PFU1[CUNIT] = CNVTU[X1[1]] Goto CONVVALID
      Next CUNIT
      FLAG = 0 \ Return 
CONVVALID: Rem "continue on
      If Not(CUNIT) Goto LOOPBACK
    End If 
    If CNVTU[2] = 2 Let CMODE = - CMODE
    If CNVTU[X1[1]] = -1 ! "cwt calculation
      If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
      If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Else 
      If CNVTU[X1[1]] = -3 ! "catch weight
        If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
        If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
      Else 
        If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
        If PFU2[CUNIT - 1] And CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
      End If 
    End If 
  End If 
LOOPBACK: Rem "get next x1[1]
Next X1[1]
If CNVTU[2] = 1 And Not(CONVFLAG) ! "convert quantity
  If CNVTU[1] And CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
  If Fra(AMOUNT) And (Not(CNVTU[1]) Or CNVTU[1] = PFU1[0]) Let AMOUNT = FNU(AMOUNT)
End If 
If CNVTU[2] = 2 And CNVTU[1] ! "cost/price (not base) to round
  If Not(CONVFLAG) ! "round away
    If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
    If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
    If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
  End If 
End If 
FLAG = 0
Return 
DISPVALIDUNITS: Rem "u/m list
Return ! NOT VALID ON WEB!

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
goto Err_Msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
OUTEND: Rem end of routine
FIFOSPEC3[8] = FNR(FCOST)
FIFOSPEC3[9] = FNR(FCOST[1])
! update the product file /prodwhse average fifo cost
!if p60$[9,9]="F" or p60$[9,9]="L" ! fifo/lifo is on
!	if p61$[81,81]="Y" ! avg fifo is turn on
!		call "mxfifoavg",fifospecch[],fifospec$
!	endif
!endif
!End 
!
Rem {begin rtn.error.s}
Else
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program