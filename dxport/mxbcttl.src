! >>> Program mxbcttl
!
! description get bill complete (OT19) totals
!
! loadsave -w -n 100,10 -o prog/dxport/mxbcttl.dl4 src/mxbcttl.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MXBCTTL - Get Totals for OT19 from InvHistory
Rem Burke - 08/2005 - This does not use Hist Archives!
Rem

! from HHKey dir 3 (Order/Invoice#)
! Line #'s would have to be the same
! includes elements of 'ordertotal'
! as first we get Line totals, then retotal for roh,rot
! we'll use the vars HTTLS & LTTLS for totalling using Actual var names
! then move the totals back to appropriate actual variable
! Go thru one whole line # history until done, then next line(s)
! ROH,ROT,ROL are on std channels (8,10,11) for OE
! pass in:
!          Bill Complete Order Header Rec
!          S9[] - usual 2?? info
!          CH[] - as used in "ordertotal"
Rem BEDIT Version: 2.3 OBJECT CODE     Created: FEB 16, 2011  13:39:38
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/xrev9/mxbcttl.src (univ2) [jcs] {31188}
Rem  Copyright (c) 2011 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String,programdump
Declare Intrinsic function findchannel
!Option Default Dialect IRIS1
If err 0 gosub err_trap
Enter REC_ROH,S9[],CH[],Intco
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim K1$[60],K2$[60],K3$[60],K4$[60],K5$[60],FLE$[20]
Dim P9$[50],P60$[50],P61$[256]
Dim 1%,LINENO,STRTCHNL,PARTL,FRSTLINE,J,X,CHWK,CHANL[50]
Dim 1%,CH_CUST,CH_ROH,CH_ROS,CH_ROT,CH_ROL,CH_SPRODDESC
Dim 1%,CH_HHKEY,CH_INVH,CH_INVS,CH_INVT,CH_INVL
Dim 1%,COID,MAXCH,COUNT,X1[9],SC,SR,SCR,FLAG[9]
Dim 2%,X2[9],J1
Dim 2%,ORDERNO,OH0[12],OH5[16]
Dim 3%,R[99],INVNO,X3[9],O1,C8,TOT_HOLD,UWORK[20]
Dim 3%,HTTLS[99],LTTLS[99]
Dim 3%,ITTLS[99]
Dim 3%,OREF[5]
Dim 1%,PFU1[20],2%,B[24],3%,A[33],A1[7],PFU2[6]
Dim 1%,CNVTU[2],3%,CNVTA,AMOUNT,NETCOST[5]
Dim 1%,MCTXBL[9],OMCTXBL[9],S2[1],CTWT[1],L3[3],UN[2],EUN[2]
Dim 2%,H0[12],H5[16],H6[8],MCODE[9],OMCODE[9]
Dim 2%,L6[5],LTAX2,GWGT[1]
Dim 3%,TOTGL,T2[25],MCHARGE[9,1],TOT[4],TOT1[2],TOT_SELL,OMCHARGE[9,1]
Dim 3%,L5[3],L7[12],S3[17],OLM[6],LTAX1,QPB,GWGT1,UNF[6]
dim e$[500],rstr$[2000],Msg$[100]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
COID = Intco ! (Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64))
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
STRTCHNL = 99;MAXCH = 19
For X = 0 To MAXCH \ CHANL[X] = Abs(CH[X]) \ Next X
For COUNT = 1 To MAXCH
  If CHANL[COUNT] > 0 And CHANL[COUNT] <= 99
    CHNL = CHANL[COUNT]
    Gosub CHNLFREE
    If CHNLFREE Let CHANL[COUNT] = - CHANL[COUNT]
  End If 
  If CHANL[COUNT] <= 0 ! ignore passed info in favor of getchan
    CHNL = STRTCHNL
    Gosub GETCHAN
    CHANL[COUNT] = - CHNL
    STRTCHNL = CHNL - 1
  End If 
Next COUNT
CH_CUST = Abs(CHANL[5])
CH_ROS = Abs(CHANL[7])
CH_ROH = Abs(CHANL[8])
CH_ROT = Abs(CHANL[9])
CH_ROL = Abs(CHANL[10])
CH_SPRODDESC = Abs(CHANL[11])
For J = 2 To MAXCH
  Read J1
  If J1 <> -1
    Read #1,88,J1;FLE$;
    CHWK = Abs(CHANL[J])
    If CHANL[J] < 0 Open #CHWK,FLE$
  End If 
Next J
Data "-1","-1","-1","1808","-1","1856","1840","1872","1888","2128","-1","-1"
Data "-1","-1","-1","-1","-1","-1"
CHNL = 89 \ Gosub GETCHAN
CH_HHKEY = CHNL
FLE$ = "4/SORDFLEHHKEY" + Str$(COID)
Ropen #CH_HHKEY,FLE$
CHNL = 89 \ Gosub GETCHAN
CH_INVH = CHNL
Read #1,88,1136;FLE$;
Ropen #CH_INVH,FLE$
CHNL = 89 \ Gosub GETCHAN
CH_INVS = CHNL
Read #1,88,1152;FLE$;
Ropen #CH_INVS,FLE$
CHNL = 89 \ Gosub GETCHAN
CH_INVT = CHNL
Read #1,88,1168;FLE$;
Ropen #CH_INVT,FLE$
CHNL = 89 \ Gosub GETCHAN
CH_INVL = CHNL
Read #1,88,1184;FLE$;
Ropen #CH_INVL,FLE$
STARTIT: Rem "off we go
If REC_ROH = 0 Goto OUTEND
Mat Read #CH_ROH,REC_ROH,0;OH0;
Mat Read #CH_ROH,REC_ROH,104;OH5;
Mat Read #CH_ROH,REC_ROH,508;PARTL;
ORDERNO = OH0[7];R[3] = REC_ROH
If OH5[7] <> 19 Goto OUTEND
If PARTL Goto OUTEND
For X = 0 To 99 \ HTTLS[X] = 0 \ Next X
For X = 0 To 99 \ LTTLS[X] = 0 \ Next X
For X = 0 To 99 \ ITTLS[X] = 0 \ Next X
FRSTLINE = 0
K1$ = " ",K1$
K1$[1,6] = ORDERNO Using "######"
ROL_LOOP: Rem "thru lines on order
Search #CH_ROL,3,1;K1$,R[1],E \ If E = 2 Goto OLINESDONE
If E Gosub ERR_SEARCH
X2 = K1$[1,6] \ If X2 <> ORDERNO Goto OLINESDONE
LINENO = K1$[7,9]
If Not(FRSTLINE) Let FRSTLINE = LINENO
K2$ = " ",K2$;K2$ = K1$[1,6]
INVL_LOOP: Rem " invoice line - get all inv's for this order
Gosub GET_INV \ Goto INVLDONE
K3$ = " ",K3$;K3$ = K2$[7,16]
K3$[11] = LINENO Using "###"
INVNO = K3$[1,10]
Search #CH_INVL,2,1;K3$,R[2],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto INVL_LOOP
Gosub READ_INVL
If S2[0] = 3 Goto INVL_LOOP
Gosub TTL_INVL
Goto INVL_LOOP
INVLDONE: Rem "done with History
Gosub READ_ROL
If S2[0] = 3 Goto ROL_LOOP
Gosub UPDT_ROL
For X = 0 To 99 \ LTTLS[X] = 0 \ Next X
Goto ROL_LOOP
OLINESDONE: Rem "done with lines - update order header, etc
Gosub READ_OHEAD
Gosub UPDT_OHEAD
Goto BCDONE
GET_INV: Rem "through hhkey by order/invoice (DIR3=ooooooiiiiii)
Search #CH_HHKEY,3,3;K2$,R[4],E \ If E = 2 Return 
If E Gosub ERR_SEARCH
X2 = K2$[1,6] \ If X2 <> ORDERNO Return 
Mat Read #CH_INVH,R[4],0;H0;
Mat Read #CH_INVH,R[4],104;H5;
If H5[7] <> 19 Goto GET_INV
!! REM ALSO CHECK THAT CUST # IS THE SAME(RECYCLE ORDER #)    
If H0[4] <> OH0[4] Goto GET_INV
If FRSTLINE = LINENO ! "doing first line - get invh info
  Gosub READ_INVH
  Gosub TTL_INVH
End If 
Return 1
READ_INVL: Rem "invoice line hist read
Mat Read #CH_INVL,R[2],32;L5;
Mat Read #CH_INVL,R[2],56;L6;
Mat Read #CH_INVL,R[2],168;L7;
Mat Read #CH_INVL,R[2],256;S2;
Mat Read #CH_INVL,R[2],260;S3;
Mat Read #CH_INVL,R[2],404;OLM;
Mat Read #CH_INVL,R[2],508;LTAX1;
Mat Read #CH_INVL,R[2],532;GWGT1;
Mat Read #CH_INVL,R[2],438;LTAX2;
Mat Read #CH_INVL,R[2],543;QPB;
Return 
READ_ROL: Rem "order line read
Mat Read #CH_ROL,R[1],8;L3;
Mat Read #CH_ROL,R[1],32;L5;
Mat Read #CH_ROL,R[1],56;L6;
Mat Read #CH_ROL,R[1],168;L7;
Mat Read #CH_ROL,R[1],250;UN;
Mat Read #CH_ROL,R[1],256;S2;
Mat Read #CH_ROL,R[1],260;S3;
Mat Read #CH_ROL,R[1],404;OLM;
Mat Read #CH_ROL,R[1],446;EUN;
Mat Read #CH_ROL,R[1],452;UNF;
Mat Read #CH_ROL,R[1],508;LTAX1;
Mat Read #CH_ROL,R[1],514;CTWT;
Mat Read #CH_ROL,R[1],524;GWGT;
Mat Read #CH_ROL,R[1],532;GWGT1;
Mat Read #CH_ROL,R[1],438;LTAX2;
Mat Read #CH_ROL,R[1],543;QPB;
Gosub L_30000
Return 
READ_INVH: Rem "read history totals
Mat Read #CH_INVH,R[4],0;H0;
Mat Read #CH_INVH,R[4],56;TOT_SELL;
Mat Read #CH_INVH,R[4],104;H5;
Mat Read #CH_INVH,R[4],408;H6;
Mat Read #CH_INVH,R[4],498;TOTGL;
Mat Read #CH_INVH,R[4],512;OREF;
Rem "do we do Slsm/scom/smer/scst?
Mat Read #CH_INVT,OREF[5],8;T2;
Mat Read #CH_INVT,OREF[5],168;OMCODE;
Mat Read #CH_INVT,OREF[5],208;OMCHARGE;
Mat Read #CH_INVT,OREF[5],328;TOT;
Mat Read #CH_INVT,OREF[5],358;OMCTXBL;
Mat Read #CH_INVT,OREF[5],380;TOT1;
Return 
TTL_INVL: Rem "put line hist into totals
LTTLS[1] = LTTLS[1] + L5[3]
LTTLS[2] = LTTLS[2] + L7[4]
LTTLS[3] = LTTLS[3] + L7[10]
LTTLS[4] = LTTLS[4] + S3[4]
LTTLS[5] = LTTLS[5] + S3[9]
LTTLS[6] = LTTLS[6] + S3[10]
LTTLS[7] = LTTLS[7] + S3[12]
LTTLS[8] = LTTLS[8] + OLM[1]
LTTLS[9] = LTTLS[9] + OLM[6]
LTTLS[10] = LTTLS[10] + LTAX1
LTTLS[11] = LTTLS[11] + GWGT1
Return 
TTL_INVH: Rem "add totals of hist for comparison
ITTLS[1] = ITTLS[1] + H5[13]
ITTLS[2] = ITTLS[2] + H5[14]
ITTLS[3] = ITTLS[3] + H6[6]
ITTLS[4] = ITTLS[4] + TOTGL
ITTLS[5] = ITTLS[5] + T2[0]
ITTLS[6] = ITTLS[6] + T2[1]
ITTLS[7] = ITTLS[7] + T2[3]
ITTLS[8] = ITTLS[8] + T2[4]
ITTLS[9] = ITTLS[9] + T2[5]
ITTLS[10] = ITTLS[10] + T2[6]
ITTLS[11] = ITTLS[11] + T2[7]
ITTLS[12] = ITTLS[12] + T2[8]
ITTLS[13] = ITTLS[13] + T2[9]
ITTLS[14] = ITTLS[14] + T2[11]
ITTLS[15] = ITTLS[15] + T2[12]
ITTLS[16] = ITTLS[16] + T2[15]
ITTLS[17] = ITTLS[17] + T2[18]
ITTLS[18] = ITTLS[18] + T2[19]
ITTLS[19] = ITTLS[19] + T2[20]
ITTLS[20] = ITTLS[20] + TOT[0]
ITTLS[21] = ITTLS[21] + TOT[1]
ITTLS[22] = ITTLS[22] + TOT[2]
ITTLS[23] = ITTLS[23] + TOT[3]
ITTLS[24] = ITTLS[24] + TOT1[1]
ITTLS[25] = ITTLS[25] + TOT1[2]
ITTLS[26] = ITTLS[26] + TOT_SELL
ITTLS[27] = ITTLS[27] + T2[16]
ITTLS[28] = ITTLS[28] + T2[17]
ITTLS[29] = 0
ITTLS[30] = 0
Return 
UPDT_ROL: Rem "update order line with totals from inv hist lines
L5[3] = LTTLS[1]
L7[4] = LTTLS[2]
L7[10] = LTTLS[3]
S3[4] = LTTLS[4]
S3[9] = LTTLS[5]
S3[10] = LTTLS[6]
S3[12] = LTTLS[7]
OLM[1] = LTTLS[8]
OLM[6] = LTTLS[9]
LTAX1 = LTTLS[10]
GWGT1 = LTTLS[11]
If L7[4] ! "need a recalc of wgt/cube FACTOR - ONLY IF SHIPPED!
  If UNF[4] <= 0 Let UNF[4] = 1
  If UNF[5] <= 0 Let UNF[5] = 1
  If GWGT[1] <= 0 Let GWGT[1] = UNF[5]
  If GWGT1 <= 0 Let GWGT1 = S3[4]
  X3 = Abs(S3[4] / L7[4] * UNF[5])
  If (UN[1] = -1 Or UN[2] = -1 Or PFU1[15] = -3) And X3 <> L6[4] ! "wgt unit chg - Recalc
    Gosub BASE2D
    A[6] = Abs(X3)
    Gosub DISP2B
  End If 
  L6[4] = (X3)
  X3 = Abs(GWGT1 / L7[4] * GWGT[1])
  GWGT[0] = (X3)
End If 
If S3[8] = -3 And L7[2] Let CHBASE = (S3[0] / L7[2]) Else Let CHBASE = S3[0]
OLM[3] = L5[2] - L6[1] + CHBASE
OLM[3] = OLM[3] - (OLM[3] * (L6[0] / 100))
If L7[8] > 0 Let OLM[3] = OLM[3] + (OLM[3] * (L7[8] / 100))
If L7[8] < 0 Let OLM[3] = OLM[3] + (0 - L7[8])
If S3[11] = -3 And L7[2] Let CHBASE = (S3[1] / L7[2]) Else Let CHBASE = S3[1]
NETCOST[0] = L5[1] + CHBASE
If S3[8] = -3 Let S3[9] = S3[0] Else Let S3[9] = FNR(S3[0] * L7[4])
If S3[11] = -3 Let S3[10] = S3[1] Else Let S3[10] = FNR(S3[1] * L7[4])
L5[0] = FNR(L7[2] * OLM[3])
S3[13] = FNR(L7[2] * NETCOST[0])
L5[3] = FNR(L7[4] * OLM[3])
S3[12] = FNR(L7[4] * NETCOST[0])
If UN[1] = -2 Let L5[0] = FNR(OLM[3]) * Sgn(L7[2]);L5[3] = FNR(OLM[3]) * Sgn(L7[4])
If UN[2] = -2 Let S3[12] = FNR(NETCOST[0] * Sgn(L7[4]));S3[13] = FNR(NETCOST[0] * Sgn(L7[2]))
Mat Write #CH_ROL,R[1],32;L5;
Mat Write #CH_ROL,R[1],56;L6;
Mat Write #CH_ROL,R[1],168;L7;
Mat Write #CH_ROL,R[1],256;S2;
Mat Write #CH_ROL,R[1],260;S3;
Mat Write #CH_ROL,R[1],404;OLM;
Mat Write #CH_ROL,R[1],508;LTAX1;
Mat Write #CH_ROL,R[1],524;GWGT;
Mat Write #CH_ROL,R[1],532;GWGT1;
Mat Write #CH_ROL,R[1],438;LTAX2;
Mat Write #CH_ROL,R[1],543;QPB;
If S2[0] = 3 Goto LTDONE
HTTLS[6] = HTTLS[6] + L5[3]
HTTLS[29] = HTTLS[29] + L5[0]
HTTLS[30] = HTTLS[30] + S3[13]
If L7[4] <> 0
  If GWGT1 <= 0 Let GWGT1 = S3[4]
  X3 = GWGT1
  If CTWT[0] = -3 Let X3 = S3[4]
  HTTLS[27] = HTTLS[27] + FNR(X3)
  If UNF[4] Let HTTLS[16] = HTTLS[16] + FNR(Abs(L7[4] * L6[2]) / UNF[4])
End If 
If L6[5] Let HTTLS[12] = HTTLS[12] + (L5[3] - OLM[1])
If Not(L6[5]) Let HTTLS[13] = HTTLS[13] + (L5[3] - OLM[1])
If P60$[42,42] = "Y" ! "line tax
  If Not(L6[5]) Let LTAX1 = 0 \ LTAX2 = 0
  HTTLS[11] = HTTLS[11] + LTAX1
End If 
HTTLS[28] = HTTLS[28] + S3[12]
HTTLS[3] = HTTLS[3] + OLM[1]
HTTLS[24] = HTTLS[24] + S3[4]
HTTLS[25] = HTTLS[25] + GWGT1
HTTLS[4] = HTTLS[4] + L7[10]
LTDONE: Rem "done
Return 
READ_OHEAD: Rem "read Order Info
Mat Read #CH_ROH,R[3],0;H0;
Mat Read #CH_ROH,R[3],56;TOT_SELL;
Mat Read #CH_ROH,R[3],104;H5;
Mat Read #CH_ROH,R[3],408;H6;
Mat Read #CH_ROH,R[3],498;TOTGL;
Rem "do we do Slsm/scom/smer/scst?
Mat Read #CH_ROT,H0[3],8;T2;
Mat Read #CH_ROT,H0[3],168;MCODE;
Mat Read #CH_ROT,H0[3],208;MCHARGE;
Mat Read #CH_ROT,H0[3],328;TOT;
Mat Read #CH_ROT,H0[3],358;MCTXBL;
Mat Read #CH_ROT,H0[3],380;TOT1;
TOT_HOLD = T2[0]
If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
  TOT_HOLD = (T2[0] - T2[1] + T2[24] - TOT[4])
Else 
  TOT_HOLD = T2[0]
End If 
Return 
UPDT_OHEAD: Rem "update order with hist totals
If H6[7] ! "cust disc %
  HTTLS[7] = FNR(H6[7] * HTTLS[6] / 100)
Else 
  HTTLS[7] = ITTLS[7]
End If 
Rem set up in httls any only can get from actual partial invoice
HTTLS[8] = ITTLS[8]
HTTLS[9] = ITTLS[9]
HTTLS[10] = ITTLS[10]
HTTLS[14] = ITTLS[14]
HTTLS[15] = ITTLS[15]
HTTLS[17] = ITTLS[17]
HTTLS[18] = ITTLS[18]
HTTLS[19] = ITTLS[19]
HTTLS[20] = ITTLS[20]
HTTLS[21] = ITTLS[21]
HTTLS[22] = ITTLS[22]
HTTLS[23] = ITTLS[23]
HTTLS[26] = ITTLS[26]
If P60$[42,42] <> "Y" Let HTTLS[11] = 0 \ HTTLS[11] = FNR(HTTLS[12] * (T2[2] / 100))
If P60$[42,42] = "Y" Let HTTLS[11] = HTTLS[11] + HTTLS[23]
HTTLS[5] = HTTLS[6] - HTTLS[7] + T2[4] + HTTLS[9] + HTTLS[10] + HTTLS[11]
HTTLS[1] = HTTLS[6] - HTTLS[3];HTTLS[2] = HTTLS[28]
If P9$[35,35] = "Y" Let HTTLS[1] = HTTLS[1] + HTTLS[9] + HTTLS[3]
If P9$[36,36] = "Y" Let HTTLS[1] = HTTLS[1] - HTTLS[7]
If P9$[37,37] = "Y" Let HTTLS[2] = HTTLS[2] + HTTLS[19]
If P9$[38,38] = "Y" Let HTTLS[1] = HTTLS[1] + HTTLS[10]
HTTLS[1] = HTTLS[1] + HTTLS[21];HTTLS[2] = HTTLS[2] + HTTLS[22]
H5[13] = HTTLS[1]
H5[14] = HTTLS[2]
TOTGL = HTTLS[4]
T2[0] = HTTLS[5]
T2[1] = HTTLS[6]
T2[3] = HTTLS[7]
Rem Let T2[4]=HTTLS[8] ! "misc charge (only on ttls screen) !ROT t2[4] only
T2[5] = HTTLS[9]
T2[6] = HTTLS[10]
T2[7] = HTTLS[11]
T2[8] = HTTLS[12]
T2[9] = HTTLS[13]
T2[11] = HTTLS[14]
T2[12] = HTTLS[15]
T2[14] = HTTLS[30]
T2[15] = HTTLS[16]
T2[16] = HTTLS[27]
T2[17] = HTTLS[28]
T2[18] = HTTLS[17]
T2[19] = HTTLS[18]
T2[20] = HTTLS[19]
T2[24] = HTTLS[29]
TOT[0] = HTTLS[20]
TOT[1] = HTTLS[21]
TOT[2] = HTTLS[22]
TOT[3] = HTTLS[23]
TOT1[1] = HTTLS[24]
TOT1[2] = HTTLS[25]
TOT_SELL = HTTLS[26]
Mat Write #CH_ROH,R[3],0;H0;
Mat Write #CH_ROH,R[3],56;TOT_SELL;
Mat Write #CH_ROH,R[3],104;H5;
Mat Write #CH_ROH,R[3],408;H6;
Mat Write #CH_ROH,R[3],498;TOTGL;
Rem "do we do Slsm/scom/smer/scst? (A: no will get after this)
Mat Write #CH_ROT,H0[3],8;T2;
Mat Write #CH_ROT,H0[3],168;MCODE;
Mat Write #CH_ROT,H0[3],208;MCHARGE;
Mat Write #CH_ROT,H0[3],328;TOT;
Mat Write #CH_ROT,H0[3],358;MCTXBL;
Mat Write #CH_ROT,H0[3],380;TOT1;
Return 
CUSTONORDER: Rem "================================== open order amount
O1 = TOT_HOLD
If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
  If O1 = (T2[0] - T2[1] + T2[24] - TOT[4]) Return 
Else 
  If O1 = T2[0] Return 
End If 
K5$ = " ",K5$;K5$ = H0[4] Using "######"
Search #CH_CUST,2,1;K5$,R5,E \ If E > 2 Gosub ERR_SEARCH
If Not(E)
  Read #CH_CUST,R5,412;C8
  C8 = C8 - O1
  If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
    C8 = C8 + (T2[0] - T2[1] + T2[24] - TOT[4])
  Else 
    C8 = C8 + T2[0]
  End If 
  Write #CH_CUST,R5,412;C8;
End If 
If H0[1] <> H0[4]
  K5$ = " ",K5$;K5$ = H0[1] Using "######"
  Search #CH_CUST,2,1;K5$,R5,E \ If E > 2 Gosub ERR_SEARCH
  If Not(E)
    Read #CH_CUST,R5,412;C8
    C8 = C8 - O1
    If P60$[40,40] = "O" And (T2[24] - TOT[4]) > 0
      C8 = C8 + (T2[0] - T2[1] + T2[24] - TOT[4])
    Else 
      C8 = C8 + T2[0]
    End If 
    Write #CH_CUST,R5,412;C8;
  End If 
End If 
Return 
BASE2D: Rem "on wgtbased price/cost - the wgt changed to display UM
CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2
CNVTA = L5[2] \ Gosub CONVERT
UWORK[1] = AMOUNT
CNVTA = OLM[3] \ Gosub CONVERT
UWORK[2] = AMOUNT
CNVTU[0] = 0;CNVTU[1] = UN[2];CNVTU[2] = 2
CNVTA = L5[1] \ Gosub CONVERT
UWORK[3] = AMOUNT
CNVTA = L7[7] \ Gosub CONVERT
UWORK[4] = AMOUNT
Return 
DISP2B: Rem "convert back to base using new factor
CNVTU[0] = UN[1];CNVTU[1] = 0;CNVTU[2] = 2
CNVTA = UWORK[1] \ Gosub CONVERT
L5[2] = AMOUNT
CNVTA = UWORK[2] \ Gosub CONVERT
OLM[3] = AMOUNT
CNVTU[0] = UN[2];CNVTU[1] = 0;CNVTU[2] = 2
CNVTA = UWORK[3] \ Gosub CONVERT
L5[1] = AMOUNT
CNVTA = UWORK[4] \ Gosub CONVERT
L7[7] = AMOUNT
Return 
L_30000: Rem ===== set units for conversions (stock/nonstock version)
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
B[23] = L6[2];A1[3] = UNF[4] \ If Not(A1[3]) Let A1[3] = 1;UNF[4] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
If UN[1] = -3 Or UN[2] = -3 Or CTWT = -3 Let PFU1[15] = -3
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
BCDONE: Rem "done
Gosub CUSTONORDER
Goto OUTEND
OUTEND: Rem
If Err 0 Rem
For SCR = 1 To MAXCH
  If CHANL[SCR] < 0 Close #Abs(CHANL[SCR])
Next SCR
Close #CH_HHKEY
Close #CH_INVH
Close #CH_INVS
Close #CH_INVT
Close #CH_INVL
If Err 0 Gosub ERR_TRAP
End 
Rem {begin src/inc/rtn.getchan.i}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
chnl=findchannel()
Return 
CHNLFREE: Rem check to see if a channel is being used
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
CHNLSCR = Chf(CHNL)
If Err 0 Gosub ERR_TRAp
If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
END_CHNLFREE: Rem
Return 
Rem {end rtn.getchan.i}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: Rem ALL UB 5+!!  IF SPC 4>1280 GOTO cvtstartb: ! "unibasic 5+

CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("/tmp/mxbcttlse!","")
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"

End ! the whole program
