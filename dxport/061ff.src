! >>> Program 061ff
!
! description: Load Pending Base, PO cost from file utility
! loadsave -w -n 100,10 -o prog/dxport/061ff.dl4 src/061ff.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.5 OBJECT CODE     Created: APR 26, 2017  16:51:20
Rem /x/w2/pm/r2005//x/usracct/becky/work/custom/xrev9/mx061fromfile.src (synergyux.synergy.n) [rjs] {61956}
Rem  Copyright (c) 2017 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,StringSearch,Time,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub Date,FileInfo,FindF,InpBuf,String,Time,VerifyDate,DateToJulian,StringSearch,FormatDate
Declare Intrinsic Sub Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Declare External Function GetUIDRec,GetUIDInfo$
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort
Rem mx061fromfile pull from tab delimited text
Rem 03/08/2013 - copied from mx061
Com 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],J4$[50]
Def FNR(X) = (Int(Abs(X) * 100 + .5) / 100) * Sgn(X)
! If Err 0 Gosub ERR_TRAP
Try
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim 1%,IMODE,IMODECOUNT,LM,WHLM[1],EXITFLAG,WH[99],PRDMAIN
Dim 1%,PFTB[3],TBL[2],2%,D1,D2,J9[4],P1,X2[4],V1,W2[9],W7[14],Q0[1]
Dim 2%,DT3[1],JDATE,CURJDATE,SCRATCH$[80]
Dim 3%,C1[1],J8,W3[24],2%,C4[8],PFCO[3],B[24],PLC[3]
Dim J$[40],J0$[12],J1$[40],J2$[20],J5$[77],J7$[40],J9$[50]
Dim CG1$[11],CG2$[11],SPCPRMPT$[80] ! starting product code prompt
Dim K1$[25],R1$[12],R2$[12],T2$[2],U5$[10],X$[20],C2$[4],A$[156]
Dim K4$[50],P9$[60],P60$[50],PMASK$[12],K29$[50],BADCODE$[12]
Dim 1%,WHPARC[5],3%,WHMISC[6],PRPARC[3]
Dim FILENAME$[50],FILE$[50],PATH$[50],DQ$[10],QCQ$[10],SQ$[10],WHSE$[2]
Dim X1$[2000],WK$[2000],WK1$[2000],BCUOM$[4],POUOM$[4],VITEM$[20],BCDATE$[10]
Dim PODATE$[10],CCD$[14],VEND$[30],KEY_$[50],RSN$[100],CC$[4],PROD$[12],PROC$[1]
Dim PBCDATE$[10],PPODATE$[10],DESC1$[30],DESC2$[30],CUOM$[4],ARDATE$[8],CNAME$[30]
Dim WHSECMP$[50],REJECTFILE$[50],RJFILE$[50]
Dim 1%,MKUP,LINEOK,FILEOK,BADVITEM,BADVEND,BADBCUOM,BADPOUOM,BADBCDATE,BADPODATE
Dim 1%,BRK,BADMKUP,BADBRK,BCUOMREC,POUOMREC,SOMEISSUES,VITEMFOUND,DNR
Dim 2%,V9[4]
Dim 3%,PBCOST,PPOCOST,PBCOSTBASE,PPOCOSTBASE,DISP_BCOST,DISP_POCOST,BASEP,POP,SN
Dim CUSTOM_CUSTOMER$[30],WHSEKEY$[50]

DIM SOURCEDIRNAME$[50],TEXTDIRNAME$[50],tmpfile$[80],txtfile$[80]
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim eparam$[50],blank$[80]
Dim 3%,uarec
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
uarec= GetUIDRec(e$,IntCo,Userid$)
COID=intCO
COMP=intCO
for ctr=1 to 99
	Try Close #ctr Else Rem
next ctr
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
BLANK$ = " ",BLANK$
DQ$ = "''''"
QCQ$ = "'',''"
SQ$ = "''"
If Err 0 Gosub ERR_TRAP
! Gosub SELECT_PRINTER
If X = 1 Goto OUTEND
For J = 2 To 6
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$[1,16];
  Open #J,J$
L_830: Next J
Data "1792","2400","1744","-1","1728"
MRK = 999 !  CHF(5)-1 ! "set max markup tables (or always 999?)
Try
	J8 = 0 \ J9 = chf(0)
else
	j8 = spc(8)
	If J8 <> 49 error j8
	let j8=99;j7=99
end try
! If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 55 ! \ If J8 Let J9 = 18 
V9[4] = 58 \ If J7 Let V9[4] = 18
SCRPRT = J7
FALSE = 0;TRUE = Not(FALSE)
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
let custom_customer$=rtrim$(CUSTOM_CUSTOMER$)
  
Read #1,3;CNAME$;
Read #1,0,100;ARDATE$;
PMASK$ = "---------"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])




X1$ = "cntrl/pendbasepo.ini"
Call FindF(X1$,FOUND)
if not(found)
	eflag=eflag+1
	returnstatus=1	
	message$=" Option not available.  Ini File has not been established. "
	Goto OUTEND
End If 
PATH$ = ""
Ropen #5,X1$
Read #5;X1$
If X1$[1,25] = "Pend Base/PO Cost Utility"
	INILOOP: Read #5;X1$
	If rtrim$(X1$)<>""
		If X1$[1,5] = "PATH=" Let PATH$ = X1$[6,Len(X1$) - 1]
		Goto INILOOP
	End If 
ENDIF 
Close #5
If rtrim$(PATH$)= "" Let PATH$ = "/usr/tmp/"
FILENAME$ = " ",FILENAME$ \ FILENAME$ = ""
REJECTFILE$ = PATH$ + "pendbasepocostexp.txt!"
LET RJFILE$=PATH$ + "pendbasepocostexp.txt"

L_900: Rem "============================ init vars
Read #1,0,108;D2; ! "current date
X2 = D2 \ Gosub L_7820 \ X2 = 0
If X2 Let CURJDATE = X2 Else Gosub L_7650
T2$ = "  " \ C1[0] = 0;C1[1] = 0 ! "type / factor
C2$ = "    " ! "comm code
CG1$ = " ",CG1$;CG2$ = "Z",CG2$ ! "start/end costgroup
R1$ = " ",R1$ \ R2$ = "Z",R2$ ! "start/end prod code
V1 = 0 \ D1 = 0 ! "vendor / effective date
TBL[0] = 0;TBL[1] = 0 ! "break & markup tbls ( 0)=no change
For X = 1 To 99 \ WH[X] = 0 \ Next X ! "default ALL to N?
IMODECOUNT = 0;PRDMAIN = 1;WH = -1 ! "for no whse pricing
! Gosub L_5400 ! "screen labels
!IMODE_QUEST: Rem mode for speed entry of individual products
!For W = 1 To 3 ! "prompt for all fields
!  EXITFLAG = 0
!  Gosub L_2200
!  If EXITFLAG = 1 Goto L_9500
!Next W
!
!! DXGETS

!!L_3200: Rem "=================== get file
GET_FILE_NAME: Rem let's get the file name
Call dxget("FNAME",tmp$)
let filename$=lcase$(rtrim$(tmp$))
If FileNAME$ = "" 
	let eflag=eflag+1
	returnstatus=1
	let message$="Invalid File Name Entered "
	Goto OUTEND
endif
For X = 1 To Len(FileNAME$)
  If FileNAME$[X,X] = " " Let FileNAME$[X,X] = "_"
Next X
FILE$ = PATH$ + FILENAME$
Call FindF(FILE$,FOUND)
let tmp$=FILE$
if not(found)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+filename$+" Does Not Exists "
	goto outend:
endif
Ropen #5,FILE$
Read #5;X1$
If rtrim$(X1$) <> ""
	Call String(1,X1$,E)
	FLOK = 1
Else 
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+filename$+" Does Not Contain Any Data "
	goto outend:
End If  
Close #5


! L_3300: Rem "================= vendor
Call dxget("VEND",tmp$)
let v1=tmp$
if v1<=0 or v1>999999
	let eflag=eflag+1
	let returnstatus=1
	let message$="Invalid Vendor Code Entered"
	goto outend:
endif
KEY_$ = " ",KEY_$
KEY_$ = V1 Using "######"
Search #3,2,1;KEY_$,R3,E
if e<>0
	let eflag=eflag+1
	let returnstatus=1
	let message$="Vendor Code "+str$(v1)+" Not on File "
	goto outend:
endif
Mat Read #3,R3,0;VEND$

!L_3500: ! Rem "================= warehouse
If P9$[32,32] = "Y"  
	Call dxget("WHSE",tmp$)
    if rtrim$(tmp$)=""
		let eflag=eflag+1
		let returnstatus=1
		let message$="Warehouse Needs to be Entered"
		goto outend:
	endif  
	! multiple selection
	! can be all wh[0]=99
	! can be only product wh[0]=-1
	if rtrim$(tmp$)="A" 
		let wh[0]=99 ! all warehouses
		let ctr=99
		goto getupdprod:
	endif
	if rtrim$(tmp$)="0" ! product only
		let wh[0]=-1 
		let ctr=99
		goto getupdprod:
	endif
	let ctr=0
	let pos1=1
	for x=1 to len(tmp$)	
		if tmp$[x,x]=","
			let tmp3=tmp$[pos1,(x-1)]
			if tmp3>0 and tmp3<=99
				let wh[tmp3]=99
			endif
			let pos1=x+1
		endif
	next x							
	if not(ctr)
		let eflag=eflag+1
		let returnstatus=1
		let message$="Warehouse Needs to be Entered"
		goto outend:
	endif
	getupdprod: ! 
	PRDMAIN = 0
	Call dxget("UPDPROD",tmp$) ! update main product
	if rtrim$(tmp$)<>"" let prdmain=99
	if not (prdmain) and wh[0]=-1
		let eflag=eflag+1
		let returnstatus=1
		let message$="No Warehouse or Main Product Selected"
		goto outend:
	endif
endif


Call dxget("PRPRT",tmp$)     
audonly = 0 \ If rtrim$(tmp$) <> "" Let audonly = 1
LET PROC$="R"
if audonly<>0 let PROC$="A" 

Call DXGet("UPDATEREC",tmp$) \ tmp$=UCase$(Trim$(tmp$))
if tmp$="" let tmp$="N" ! unchecked it?
If tmp$="N" AND PROC$="R"   ! DO NOT WANT TO RUN!
	eflag=eflag+1
	returnstatus=1	
	message$=" Please run in preview mode if you are not updating records. "
	Goto OUTEND	 
Endif
if tmp$<>"N" and Proc$="A"
	eflag=eflag+1
	returnstatus=1	
	message$="Print Preview has been selected.  Please uncheck Update Records "
	Goto OUTEND	 
Endif	
 
! start process 
Gosub L_2400
goto outend: ! Goto L_9500
 
L_2400: Rem GO THRU FILE AND RUN AUDIT
V9[0] = 0 \ V9[1] = 99
Build #11, + REJECTFILE$
TRY
	CLOSE #11
ELSE
	REM ! 
END TRY
TRY
	OPEN #11,RJFILE$
ELSE
	LET RETURNSTATUS=1
	LET EFLAG=EFLAG+1
	MESSAGE$="Error in Creating Print File"
	goto outend
end try
Ropen #5,FILE$
Read #5;X1$
Print #11;X1$[1,Len(X1$) - 1]
! If Not(J7) Print @0,23;"Processing...";'CL';
PROCESS_LINES: Rem go thru stuff
BADREC = 0
Gosub GET_DATA_LINE
If BADREC<>0
	if len(x1$)>1 
		Print #11;X1$[1,Len(X1$) - 1];
	else
		if len(x1$)=1
			Print #11;X1$[1,Len(X1$)];
		else
			Print #11;" ";
		endif
	endif
  print #11;"\11\";RSN$
  Goto PROCESS_LINES
End If 
If FILEDONE Return 
If PRDMAIN ! we are doing product
  VITEMFOUND = 0
  Gosub CHECK_PRODMAIN
  If Not(VITEMFOUND) ! no vendor item found
    LINEOK = 0
    BADVITEM = 1
    Gosub PRINT_REJECTED_LINE
  End If 
End If 
If P9$[32,32] = "Y" And WH >= 0 !whse pricing a whses chosen
  VITEMFOUND = 0
  BADVITEM = 0
  For XX1 = 1 To 99
    If WH[XX1]
      Gosub CHECK_WHSE !check whse
    End If 
  Next XX1
  If Not(VITEMFOUND) ! absolutely nothing and we are not updateing main
    LINEOK = 0
    BADVITEM = 1
    If Not(PRDMAIN) Gosub PRINT_REJECTED_LINE ! have to tell something
  End If 
End If 
Goto PROCESS_LINES
PRINT_REJECTED_LINE: Rem completely kicked out
If Not(LINEOK) ! either problem with the item or vendor
  RSN$ = " ",RSN$
  RSN$ = "REJECTED"
  If BADVITEM Let RSN$ = RSN$ + " VENDOR ITEM"
  Goto MESSAGE
End If 
If SOMEISSUES
  If P9$[32,32] = "Y"
    RSN$ = " ",RSN$ \ RSN$ = "REJECTED  " + PROD$[1,12] + "  WHSE "
    RSN$ = RSN$ + WHSE$ + " "
  Else 
    RSN$ = " ",RSN$ \ RSN$ = "REJECTED  " + PROD$[1,12] + " "
  End If 
  If BADBCUOM Let RSN$ = RSN$ + ",BASE COST UOM "
  If BADBCDATE Let RSN$ = RSN$ + ",BASE EFF DATE "
  If BADPOUOM Let RSN$ = RSN$ + ",PO COST UOM "
  If BADPODATE Let RSN$ = RSN$ + ",PO EFF DATE "
  If BADMKUP Let RSN$ = RSN$ + ",MARKUP >999 "
  If BADBRK Let RSN$ = RSN$ + ",BREAK >999 "
  If NEEDBASE Let RSN$ = RSN$ + ",TABLES NEED PEND BASE"
  If NOTHING Let RSN$ = RSN$ + ",NO CHANGES "
End If 
MESSAGE: Print #11;X1$[1,Len(X1$) - 1];"\11\";RSN$
Return 
UPDATE_MAIN: ! If Not(J7) Print @0,23;"Processing...";'CL';
If Not(LINEOK) Or SOMEISSUES Return 
If PBCOST
  If Not(BADBCUOM) If Not(BADBCDATE)
    If PRDMAIN
      If PBCOST <> DISP_BCOST !is there a change
        PFCO[0] = PBCOSTBASE ! "pending base
        PFCO[1] = PBCDATE$ ! "effective date
      End If 
    End If 
  End If 
End If 
If PPOCOST
  If Not(BADPOUOM) If Not(BADPODATE)
    If PRDMAIN
      If PPOCOST <> DISP_POCOST
        PLC[0] = PPOCOSTBASE ! "pending base
        PLC[1] = PPODATE$ ! "effective date
      End If 
    End If 
  End If 
End If 
If P60$[50,50] <> "Y"
  If MKUP
    If PRDMAIN
      If MKUP <> C4[3] Let PFTB[1] = MKUP
    End If 
  End If 
  If BRK
    If PRDMAIN
      If BRK <> B[22] Let PFTB[0] = BRK
    End If 
  End If 
End If 
Mat Write #2,R2,846;PFTB
Mat Write #2,R2,974;PFCO
Mat Write #2,R2,1002;PLC;
Return 
Stop 


CHECK_WHSE: Rem PROD WAREHOUSE
LINEOK = 1
SOMEISSUES = 0
BADBCUOM = 0
BADPOUOM = 0
BADBCDATE = 0
BADPODATE = 0
BADMKUP = 0
BADBRK = 0
PROD$ = " ",PROD$
WHSE$ = " ",WHSE$
WHSE$ = XX1 Using "##"
K4$ = " ",K4$
K4$[1,2] = XX1 Using "##"
K4$[3] = VITEM$[1,20]
WHSECMP$ = K4$[1,22]
L_4050: Search #4,3,4;K4$,R4,E
If E If E <> 2 Gosub ERR_SEARCH
W9 = K4$[1,2]
If E = 2 Or K4$[1,22] <> WHSECMP$[1,22]
  Goto BACKFROMWHSE
End If 
Mat Read #4,R4,38;W2
Mat Read #4,R4,78;W3
Mat Read #4,R4,384;WHPARC
Mat Read #4,R4,696;W7
Mat Read #4,R4,800;WHMISC
Mat Read #4,R4,842;WHLM
PROD$ = K4$[23,34]
If V1 <> W2[3] Goto L_4050
VITEMFOUND = 1
K1$ = PROD$[1,12]
Search #2,2,1;K1$,R2,E
If E Goto L_4050 ! product not there
Gosub READ_PROD_VALIDATE ! get even more
CHANGES = 0
NOTHING = 0
If LINEOK And Not(SOMEISSUES)
  CNVTU[0] = 0 \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2
  CNVTA = W3[18] ! "base cost
  Gosub L_20000 ! "convert to costing values
  DISP_BCOST = AMOUNT
  If PBCOST
    If DISP_BCOST <> PBCOST Let CHANGES = 1
  End If 
  CNVTA = W3[16] ! "po cost
  Gosub L_20000 ! "convert to costing values
  DISP_POCOST = AMOUNT
  If PPOCOST
    If DISP_POCOST <> PPOCOST Let CHANGES = 1
  End If 
  If P60$[50,50] <> "Y"
    If MKUP If MKUP <> WHPARC[1] Let CHANGES = 1
    If BRK If BRK <> WHPARC[0] Let CHANGES = 1
  End If 
  If CHANGES
    Gosub PRINT_DETAIL
    If PROC$ = "R" Gosub UPDATE_WHSE
  Else 
    SOMEISSUES = 1
    NOTHING = 1
    Gosub PRINT_REJECTED_LINE
  End If 
Else 
  Gosub PRINT_REJECTED_LINE
End If 
Goto L_4050 ! check for anyother products
BACKFROMWHSE: Return 
UPDATE_WHSE: Rem update pendings
If Not(LINEOK) Or SOMEISSUES Return 
If PBCOST
  If Not(BADBCUOM) If Not(BADBCDATE)
    If PBCOST <> DISP_BCOST
      W7[2] = PBCOSTBASE ! "pending base
      W7[3] = PBCDATE$ ! "effective date
    End If 
  End If 
End If 
If PPOCOST
  If Not(BADPOUOM) If Not(BADPODATE)
    If PPOCOST <> DISP_POCOST
      W7[7] = PPOCOSTBASE ! "pending po cost
      W7[13] = PPODATE$ ! "effective date
    End If 
  End If 
End If 
If P60$[50,50] <> "Y"
  If MKUP
    If Not(BADMKUP)
      If MKUP <> WHPARC[1] Let WHPARC[5] = MKUP
    End If 
  End If 
  If BRK
    If Not(BADBRK)
      If BRK <> WHPARC[0] Let WHPARC[4] = BRK
    End If 
  End If 
End If 
Mat Write #4,R4,696;W7
Mat Write #4,R4,384;WHPARC
Return 
L_4500: Rem CALC NEW LOAD COST
CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
CNVTA = B[8] ! "load cost
Gosub L_20000
X2 = AMOUNT
If T2$[2,2] = "%" Let X2 = FNP(X2 + (X2 * C1[1] / 100)) ! "% increase
If T2$[2,2] = "$" Let X2 = FNP(X2 + C1[1]) ! "flat increase
If T2$[2,2] = "=" Let X2 = FNP(C1[1]) ! "replace
If X2 < 0 Let X2 = 0 ! "no negative
If X2 > 999999 Let X2 = 999999
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
CNVTA = X2
Gosub L_20000 \ PRPARC[0] = AMOUNT
If C1[1] = 0 Let PRPARC[0] = 0 ! save 0 to pending if change is 0
Return 
L_4650: Rem CALC NEW LOAD COST (WHSE)
CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
CNVTA = W3[17] ! "load cost
Gosub L_20000
X2 = AMOUNT
If T2$[2,2] = "%" Let X2 = FNP(X2 + (X2 * C1[1] / 100)) ! "% increase
If T2$[2,2] = "$" Let X2 = FNP(X2 + C1[1]) ! "flat increase
If T2$[2,2] = "=" Let X2 = FNP(C1[1]) ! "replace
If X2 < 0 Let X2 = 0
If X2 > 999999 Let X2 = 999999
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
CNVTA = X2
Gosub L_20000 \ WHMISC[0] = AMOUNT
If C1[1] = 0 Let WHMISC[0] = 0 ! save 0 to pending if change 0
Return 
L_4800: Rem UPDATE TABLES
WHPARC[4] = TBL[1] ! "new break
WHPARC[5] = TBL[0] ! "new markup
If D1 = 999999 Goto L_4830 ! "cancel pending updates
Goto L_4850 ! "write it
L_4830: Rem cancel tables
WHPARC[4] = 0;WHPARC[5] = 0 ! "clear em out
L_4850: Mat Write #4,R4,384;WHPARC;
Return 
GET_DATA_LINE: Rem read all the information
X1$ = " ",X1$
MKUP = 0
BRK = 0
Read #5;X1$
If X1$ = ""
  FILEDONE = 1
  Return 
End If 
Call String(1,X1$)
POS_ = 1
Gosub L_8000 ! field 1 vendor item code
VITEM$ = WK$[1,20]
Gosub L_8000 ! field 2 description 1
DESC1$ = WK$[1,30]
Gosub L_8000 ! field 3 description 2
DESC2$ = WK$[1,30]
Gosub L_8000 ! field 4 pending base cost
PBCOST = WK$
Gosub L_8000 ! field 5 base cost uom
BCUOM$ = WK$[1,4]
Gosub L_8000 ! field 6 base cost effective date
BCDATE$ = WK$[1,10]
Gosub L_8000 ! field 7 new po cost
PPOCOST = WK$
Gosub L_8000 ! field 8 po cost uom
POUOM$ = WK$[1,4]
Gosub L_8000 ! field 9 po cost effective date
PODATE$ = WK$[1,10]
If P60$[50,50] <> "Y"
  Gosub L_8000 ! field 10 mark up table
  MKUP = WK$
  Gosub L_8000 ! field 11 mark up table
  BRK = WK$
End If 
If VITEM$[1,20] = BLANK$[1,20]
  BADREC = 1
  RSN$ = "REJECTED BLANK VENDOR ITEM "
End If 
If PBCOST = 0 If PPOCOST = 0 If MKUP = 0 If BRK = 0
  BADREC = 1
  RSN$ = "REJECTED NOTHING TO UPDATE"
End If 
Return 
CHECK_PRODMAIN: Rem if we are doing main validate  main
LINEOK = 1
SOMEISSUES = 0
BADVITEM = 0
BADBCUOM = 0
BADPOUOM = 0
BADBCDATE = 0
BADPODATE = 0
BADMKUP = 0
BADBRK = 0
VITEMFOUND = 0
DNR = 0
PROD$ = " ",PROD$
WHSE$ = " ",WHSE$
WHSE$ = "MN"
K4$ = VITEM$[1,20] ! look for vendor item that's all we got
LOOK_UP_VITEM: Search #2,3,4;K4$,R2,E
If E = 2 Or K4$[1,20] <> VITEM$[1,20]
  Goto DONE_WITH_ITEM
End If 
If E Gosub ERR_SEARCH
Mat Read #2,R2,156;B
If B[24] <> V1 Goto LOOK_UP_VITEM ! is this for the correct vendor?
If CUSTOM_CUSTOMER$ = "JPAPER"
  WHSEKEY$ = " ",WHSEKEY$
  WHSEKEY$ = K4$[21,32]
  WHSEKEY$[13] = " 1"
  Search #4,2,1;WHSEKEY$,R4,E
  If Not(E)
    Read #4,R4,420;DNR
    If DNR = 1 Goto LOOK_UP_VITEM ! if DNR set to 1 skip
  End If 
End If 
VITEMFOUND = 1 ! well a vendor item was found.
Gosub READ_PROD_VALIDATE ! get even more
CHANGES = 0
NOTHING = 0
If LINEOK And Not(SOMEISSUES)
  CNVTU[0] = 0 \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2
  CNVTA = C4[4] ! "base cost
  Gosub L_20000 ! "convert to costing values
  DISP_BCOST = AMOUNT
  If PBCOST
    If PBCOST <> DISP_BCOST Let CHANGES = 1 ! something changed
  End If 
  CNVTA = B[10] ! "po cost
  Gosub L_20000 ! "convert to costing values
  DISP_POCOST = AMOUNT
  If PPOCOST
    If PPOCOST <> DISP_POCOST Let CHANGES = 1
  End If 
  If P60$[50,50] <> "Y"
    If MKUP
      If MKUP <> C4[3] Let CHANGES = 1
    End If 
    If BRK
      If BRK <> B[22] Let CHANGES = 1
    End If 
  End If 
  If CHANGES ! something is different
    Gosub PRINT_DETAIL
    If PROC$ = "R" Gosub UPDATE_MAIN
  Else 
    SOMEISSUES = 1
    NOTHING = 1
    Gosub PRINT_REJECTED_LINE
  End If 
Else 
  Gosub PRINT_REJECTED_LINE
End If 
Goto LOOK_UP_VITEM
DONE_WITH_ITEM: Return 
READ_PROD_VALIDATE: Rem read the product and validate more
LINEOK = 1
BADBCUOM = 0
BADPOUOM = 0
BADBCDATE = 0
BADPODATE = 0
BADMKUP = 0
BADBRK = 0
NEEDBASE = 0
SOMEISSUES = 0
Mat Read #2,R2,0;A$
Mat Read #2,R2,156;B
Mat Read #2,R2,256;A
Mat Read #2,R2,512;PFU1
Mat Read #2,R2,554;PFU2
Mat Read #2,R2,596;PRPARC
Mat Read #2,R2,620;LM
Mat Read #2,R2,846;PFTB
Mat Read #2,R2,894;C4
Mat Read #2,R2,974;PFCO
Mat Read #2,R2,1002;PLC;
If PFU1[11] = -1 Let CUOM$ = "CWT"
If PFU1[11] <> -1
  Mat Read #6,PFU1[11];CCD$
  CUOM$ = CCD$[11,14]
End If 
PROD$ = A$[140,151]
If PBCOST ! we have a pending base cost
  If BCUOM$[1,4] <> BLANK$[1,4] ! We have pend base better be uom
    CC$ = BCUOM$[1,4]
    Gosub VALIDATEUOM !
    If R6
      BCUOMREC = R6
      CNVTU[0] = BCUOMREC \ CNVTU[1] = 0 \ CNVTU[2] = 2
      CNVTA = PBCOST
      Gosub L_20000 ! "convert to costing values
      PBCOSTBASE = AMOUNT
    Else 
      SOMEISSUES = 1
      BADBCUOM = 1
    End If 
  Else 
    SOMEISSUES = 1
    BADBCUOM = 1
  End If 
  If BCDATE$[1,8] <> BLANK$[1,8] ! need an effective date
    Call VerifyDate(BCDATE$,PBCDATE$,E)
    If E
      BADBCDATE = 1
      SOMEISSUES = 1
    End If 
  Else 
    BADBCDATE = 1
    SOMEISSUES = 1
  End If 
End If 
If PPOCOST ! we have a pending po cost
  If POUOM$[1,4] <> BLANK$[1,4] ! We have pend po better be uom
    CC$ = POUOM$[1,4]
    Gosub VALIDATEUOM !
    If R6
      POUOMREC = R6
      CNVTU[0] = POUOMREC \ CNVTU[1] = 0 \ CNVTU[2] = 2
      CNVTA = PPOCOST
      Gosub L_20000 ! "convert to costing values
      PPOCOSTBASE = AMOUNT
    Else 
      SOMEISSUES = 1
      BADPOUOM = 1
    End If 
  Else 
    SOMEISSUES = 1
    BADPOUOM = 1
  End If 
  If PODATE$[1,8] <> BLANK$[1,8] ! need an effective date
    Call VerifyDate(PODATE$,PPODATE$,E)
    If E
      BADPODATE = 1
      SOMEISSUES = 1
    End If 
  Else 
    SOMEISSUES = 1
    BADPODATE = 1
  End If 
End If 
If P60$[50,50] <> "Y"
  If MKUP
    If MKUP > 999
      BADMKUP = 1 ! too big
      SOMEISSUES = 1
    Else 
      If Not(PBCOST) Or BADBCDATE Or BADBCUOM
        NEEDBASE = 1
        SOMEISSUES = 1
      End If 
    End If 
  End If 
  If BRK
    If BRK > 999
      BADBRK = 1 ! too big
      SOMEISSUES = 1
    Else 
      If Not(PBCOST) Or BADBCDATE Or BADBCUOM
        NEEDBASE = 1
        SOMEISSUES = 1
      End If 
    End If 
  End If 
End If 
GOBACK: Return 
VALIDATEUOM: Rem check for valid uom only
If CC$ = "CWT "
  R6 = -1
  If PFU1[11] <> R6 Let R6 = 0
  Goto DONEUOM
End If 
If CC$ = "LOT " Let CC$ = "EA  " !not a valid uom
If CC$[1,4] = BLANK$[1,4]
  R6 = 0
  Goto DONEUOM
End If 
Search #6,2,1;CC$,R6,E
If Not(E)
  For LOOP_ = 0 To 7
    If PFU1[LOOP_] = R6 Goto DONEUOM
  Next LOOP_
End If 
R6 = 0
DONEUOM: Return 
L_5000: Rem "======================== display screen data
Return 

PRINT_HEADING: Rem "==================================== headings
If V9[1] < V9[4] Return 
! If V9[0] If J7 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J7) Print #0;"\14\";
V9[0] = V9[0] + 1 \ V9[1] = 7
If Not(J7) Print #0;"\15\";
Print #0; Tab 0;"061fromfile"; Tab 15;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";V9[0]
Print #0; Tab 20;"PENDING BASE, PO COST LISTING FROM TAB DELIMITED FILE FOR VENDOR ";
Print #0; Using "######";V1;"  ";VEND$
Print #0;" "
Print #0; Tab 0;"VENDOR ITEM"; Tab 30;"DESCRIPTION 1"; Tab 70;"DESCRIPTION 2"
If P9$[32,32] = "Y"
  Print #0; Tab 0;"LOC";
End If 
Print #0; Tab 5;"ITEM CODE";
Print #0; Tab 26;"CURRENT"; Tab 42;"PENDING"; Tab 54;"EFFECTIVE";
Print #0; Tab 68;"CURRENT"; Tab 84;"PENDING"; Tab 95;"EFFECTIVE";
If P60$[50,50] <> "Y"
  Print #0; Tab 105;"CURR"; Tab 110;"PEND"; Tab 115;"CURR"; Tab 120;"PEND";
End If 
Print #0;" "
Print #0; Tab 25;"BASE COST"; Tab 41;"BASE COST"; Tab 56;"DATE";
Print #0; Tab 68;"PO COST"; Tab 84;"PO COST"; Tab 98;"DATE";
If P60$[50,50] <> "Y"
  Print #0; Tab 105;"MKUP"; Tab 110;"MKUP"; Tab 115;"BRK"; Tab 120;"BRK";
End If 
Print #0;" "
Print #0;" "
Return 
PRINT_DETAIL: Rem print line detail
If Not(CHANGES) Return 
Gosub PRINT_HEADING
Print #0;""
Print #0; Tab 0;VITEM$[1,20];
Print #0; Tab 30;DESC1$[1,30]; Tab 70;DESC2$[1,30] ! prod/desc
If P9$[32,32] = "Y"
  Print #0; Tab 0;WHSE$;
End If 
Print #0; Tab 4;PROD$;
If PBCOST If PBCOST <> DISP_BCOST
  SN = 0
  If PBCOST < DISP_BCOST
    SN = -1
	If DISP_BCOST <> 0                            
		BASEP = SN * (1 - (PBCOST / DISP_BCOST))    
	Else                                          
		BASEP = 0                                   
	End If 
  End If 
  If PBCOST > DISP_BCOST
	If DISP_BCOST <> 0                            
		BASEP = ((PBCOST / DISP_BCOST) - 1)         
	Else                                          
		BASEP = 0                                   
	End If 
  End If 
  BASEP = BASEP * 100
  Print #0; Using PMASK$; Tab 17;DISP_BCOST;"/";CUOM$[1,4];
  Print #0; Using "---.##%"; Tab 31;BASEP;
  Print #0; Using PMASK$; Tab 38;PBCOST;"/";BCUOM$[1,4]; Tab 52;BCDATE$[1,10];
End If 
If PPOCOST If DISP_POCOST <> PPOCOST
  SN = 0
  If PPOCOST < DISP_POCOST
    SN = -1
    POP = SN * (1 - (PPOCOST / DISP_POCOST))
  End If 
  If PPOCOST > DISP_POCOST
    POP = ((PPOCOST / DISP_POCOST) - 1)
  End If 
  POP = POP * 100
  Print #0; Using PMASK$; Tab 62;DISP_POCOST;"/";CUOM$[1,4];
  Print #0; Using "---.##%"; Tab 71;POP;
  Print #0; Using PMASK$; Tab 79;PPOCOST;"/";POUOM$[1,4]; Tab 96;PODATE$[1,10];
End If 
If P60$[50,50] <> "Y"
  If WHSE$ = "MN"
    If MKUP If MKUP <> C4[3] Print #0; Using "####"; Tab 105;C4[3]; Tab 110;MKUP;
    If BRK If BRK <> B[22] Print #0; Using "####"; Tab 115;B[22]; Tab 120;BRK;
  Else 
    If MKUP If MKUP <> WHPARC[1] Print #0; Using "####"; Tab 105;WHPARC[1]; Tab 110;MKUP;
    If BRK If BRK <> WHPARC[0] Print #0; Using "####"; Tab 115;WHPARC[0]; Tab 120;BRK;
  End If 
End If 
Print #0;""
V9[1] = V9[1] + 3 ! "line ctr
Return 

 L_7650: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
D2 = X$ ! "GOOD DATE
Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
X2 = X$[1,5]
CURJDATE = X2
Return 
 
 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem search comma delimited files
WK1$ = " ",WK1$ \ WK1$ = X1$[POS_]
Search WK1$,"\11\",CT
WK$ = " ",WK$
If CT = 1 Goto L_8060
If CT = 0
  CT = Len(WK1$)
  If CT <= 1 Goto L_8060
End If 
WK$[1,CT - 1] = WK1$[1,CT - 1]
L_8060: POS_ = POS_ + CT
Gosub L_9000
Return 
L_9000: Rem work on quotes and commas
L_9050: Search WK$,DQ$,PT
If PT
  WK$[PT,PT + 1] = "~^"
  Goto L_9050
End If 
L_9100: Search WK$,QCQ$,PT
If PT
  WK$[PT,PT] = "^"
  WK$[PT + 1,PT + 1] = "|"
  WK$[PT + 2,PT + 2] = "^"
  Goto L_9100
End If 
L_9170: Search WK$,SQ$,PT
If PT
  WK$[PT,PT] = "^"
  Goto L_9170
End If 
WK1$ = " ",WK1$
L = 1
For LOOP_ = 1 To Len(WK$) - 1
  If WK$[LOOP_,LOOP_] <> "^"
    WK1$[L,L] = WK$[LOOP_,LOOP_]
    L = L + 1
  End If 
Next LOOP_
WK$ = " ",WK$
WK$ = WK1$[1,Len(WK1$)]
L_9320: Search WK$,"|",PT ! had replaced , with |
If PT
  WK$[PT,PT] = ","
  Goto L_9320
End If 
L_9370: Search WK$,"~",PT !replaced " with !
If PT
  WK$[PT,PT] = "''"
  Goto L_9370
End If 
Return 
 

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050 ! "um window
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160 ! "going to same units
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160 ! "lot
If CNVTU[2] = 0 Goto L_20050 !!THIS TESTS IF VALID CONVERSION
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160 ! "none there
L_20050: !If Spc(4) > 1280 Goto L_20120 ! "unibasic 5+
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160 ! "um window
L_20080:  ! Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160 !!TEST IF VALID CONVERSION
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160 !!TEST IF VALID CONVERSION
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump()  
e$ = msg$ \ Error 10000                      
Return ! End 

ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
eflag=1
Message$=E$
call programdump()

OUTEND: Rem END
if eflag<>0 let returnstatus=1 ! error

Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)	
	let message$="Complete. "
	if processed<>0
		IF D1<>999999
			let message$=Message$+str$(T1)+" Records Updated. "
		else
			let message$=Message$+str$(T1)+" scheduled cost update(s) canceled. "
		endif
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)

Else
!
	include "src/callmainerrnet.inc"
end try
End ! the whole program
