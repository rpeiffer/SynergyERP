! -- dxblockgeneral.lib
! supporting library of general routines for browser for page block definitions
!
! 1.0 12/01/2004 new 
!
! loadsave -w -n 100,10 -o dxblockgeneral.lib src/dxblockgeneral.src
!
!all rights reserved. (c)copyright 2005 by: dynamicconcepts 
!
declare intrinsic function findchannel,crc32,callstat$,encfnm$
declare intrinsic sub dxget,dxset,dxclose,dxsave,bytecopy,setglobals
declare external sub blocksuberr
!
!
include "src/dxblockfiles.bsh"
!
!    GetProgramPath$() - get program path
!    Synopsis:
!        Path$ = GetProgramPath$()
!        Gets absolute Path to current program
!    Return value:
!        Success: absolute path to current program
!
External Function BlockGetProgramPath$()
 !
 Dim Path$[100]
 Dim %1,RetVal,P1,P2
 !
 !???use  msc$(9)  instead ??
Path$ = EncFnm$(Msc$(1),Msc$(4))
 P1 = Pos(Path$, = "/",-1)       ! Unix
 P2 = Pos(Path$, = "\\",-1)      ! Windows
 If P2 > P1 Let P1 = P2
 Path$ = Path$[1,P1]
End Function Path$
!
!
external sub blockreadsystemfile(e$,blockconfig. as blockconfig)
 Dim text$[90],label$[30],value$[60],path$[80],filename$[92]
 Dim helpdir$[60]
 !
 try
 path$=blockgetprogrampath$()  !current program path, where dxport resides
 syschan=findchannel()
 filename$=path$,"dfsystem.txt"
 ropen #syschan,filename$
 !
 !
 Try
 Do
  read #syschan;text$
  if text$="" exit do
  if len(text$)>1 and text$[len(text$)]="\15\" let text$=text$[1,len(text$)-1]
  label$=text$ to "=":x
  label$=ucase$(label$)                 
  if x and x<>len(text$) 
  value$=text$[x+1]
  Select Case label$
   Case "FILETYPE"
    blockconfig.filetype$=value$
   Case "FILESDIR"
    blockconfig.filedir$=value$
   Case "BLOCKHDR"
    blockconfig.filehdr$=value$
   Case "BLOCKCOL"
    blockconfig.filecol$=value$
   Case "BLOCKINP"
    blockconfig.fileinp$=value$
   Case "BLOCKINPLST"
    blockconfig.fileinplst$=value$
   Case "BLOCKBUT"
    blockconfig.filebut$=value$
   Case "PRINTERCHANNEL"
    blockconfig.printerchannel$=value$
   Case "SORTCHANNEL"
    blockconfig.sortchannel$=value$
   Case "DATEFORMAT"
    blockconfig.dateformat$=value$
   Case "GUITITLE"
    blockconfig.guititle$=value$
   Case "GUIFOOTER"
    blockconfig.guifooter$=value$
   Case "GUIMINROWS"
    blockconfig.guiminrows=value$
   Case "GUIRETURN"
    blockconfig.guireturn$=value$
   Case "HELPDIR"
    helpdir$=value$   !doesn't need to be in config. array, just in setglobals for later (some others don't either but they already there, so be it :)
  End Select
  end if
 Loop
 Else
 End Try
 !
 call setglobals("dfsystem",0,blockconfig.dateformat$,blockconfig.printerchannel$,blockconfig.sortchannel$)  !so routines can access without re-reading dfsystem.txt file
 !printerchannel opened in dxblockx.dl4 and dxblockgui.dl4
 !sortchannel opened in dxblockx.dl4 and dxblockgui.dl4
 call setglobals("dfsystem",3,blockconfig.guititle$,blockconfig.guifooter$,blockconfig.guiminrows,blockconfig.guireturn$)
 !guititle,guifooter,minrows  used in (screeninit) dxblockguigeneral.lib
 !guireturn$ used in dxblockgui.dl4
 call setglobals("dfsystem",7,helpdir$)
 !helpdir$ used in (setproperties) dxblockcallsx.dl4 and (?) dxblockcallsgui.dl4
 !
 !
 if blockconfig.filetype$="F" let blockconfig.drvr$="Foxpro FULL-ISAM"
 if blockconfig.filetype$="S" let blockconfig.drvr$="Microsoft SQL"
 else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !blockreadsystemfile
!
!
external sub blockopenfiles(e$,blockconfig. As blockconfig,c[])
! opens the data files for page definitions
 try
 dim filename$[93]
 !
 filename$="(rtrim=t) "+blockconfig.filedir$+blockconfig.filehdr$
 c[0] = findchannel()
 open #c[0],rtrim$(filename$) as blockconfig.drvr$ ! block hdr definitions file
 Map Record #c[0] As blockhdr
 Map #c[0],1;"ID"
 !
filename$="(rtrim=t) "+blockconfig.filedir$+blockconfig.filecol$
 c[1] = findchannel()
 open #c[1],rtrim$(filename$)  as blockconfig.drvr$ ! block col definitions file
 Map Record #c[1] As blockcol
 Map #c[1],1;"ID"
 !
filename$="(rtrim=t) "+blockconfig.filedir$+blockconfig.fileinp$
 c[2] = findchannel()
 open #c[2],rtrim$(filename$) as blockconfig.drvr$ ! block inp definitions file
 Map Record #c[2] As blockinp
 Map #c[2],1;"ID"
 !
 filename$="(rtrim=t) "+blockconfig.filedir$+blockconfig.fileinplst$
 c[3] = findchannel()
 open #c[3],rtrim$(filename$) as blockconfig.drvr$ ! block inplst definitions file
 Map Record #c[3] As blockinplst
 Map #c[3],1;"ID"
 !
 filename$="(rtrim=t) "+blockconfig.filedir$+blockconfig.filebut$
 c[4] = findchannel()
 open #c[4],rtrim$(filename$) as blockconfig.drvr$ ! block but definitions file
 Map Record #c[4] As blockbut
 Map #c[4],1;"ID"
 !
 !open inp file on 2nd channel as ropen to read common prompts on 2nd channel
 filename$="(rtrim=t) "+blockconfig.filedir$+blockconfig.fileinp$
 c[5] = findchannel()
 ropen #c[5],rtrim$(filename$) as blockconfig.drvr$ ! block inp definitions file
 Map Record #c[5] As blockinp
 Map #c[5],1;"ID"
 !
 !open user defaults on 9th channel as open to read/write user defaults
 filename$="(rtrim=t) "+blockconfig.filedir$+"blockdefaults"  !blockconfig.fileinp$
 c[9] = findchannel()
 open #c[9],rtrim$(filename$) as blockconfig.drvr$ ! block inp definitions file
 Map Record #c[9] As blockdefaults
 Map #c[9],1;"ID"
 !
 else
 if spc(8) < 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
 if spc(8)=42 let e$=filename$," not found in openfiles in dfgeneral.lib"
  if spc(8)<20000 error 10000 else error 20000
 end try
end sub !blockopenfiles
!
!
external sub blockmainerr(e$,spc8,buttonlist$[],nextlist$[])
! call from /try/else of main routines (assumes suberr already executed)
! pass spc(8) value, buttonlist and nextlist
! return
 dim optiondir$[60]
 if spc8< 20000  !20000 up don't override e$ or output
  try call dxget("s_view.optiondir",optiondir$) else optiondir$="dxstd/"
  call dxset("output",optiondir$+"msg.html")
 end if
 call dxset("s_msg",e$)
 if len(e$)>3 if e$[1,3]="msg" call dxset("s_msgno",e$[4])
 call dxset("buttonlist",buttonlist$[])  !msg page buttons
 call dxset("nextlist",nextlist$[])      !button functions
 call dxclose()
end sub !blockmainerr
!
!
external sub blocksuberr(e$,spc8,spc10,msc2$)
! call from try/else of subroutines to populate e$ error string 
! pass spc(8) value, spc(10) value, msc$(2) value
! returns populated e$
   dim errtype$[10]
   if spc8<10000
    e$ = "error ",spc8," ",msc2$," at ",str$(spc10)," in "
    try
     for callstack=1 to 10
      e$=e$,callstat$(callstack,errtype$),":",errtype$,";"
     next callstack
    else
    end try
   end if
end sub !blocksuberr
!
!----------------------------------------------------------
External Function blockbuildsort(e$,keylen,flag,...)
Declare Intrinsic Function dateusing$,FindChannel
Declare Intrinsic Sub DXGet
! standard routine - builds a key only sort file and returns channel #
! pass keylen in words, flag=0 build, 1 open
! optionally, can pass channel # to build and open on
 Try
  try enter sortchan else sortchan=-1
  Dim ID$[8],filename$[60],v$[keylen*2],filename2$[60],4%
  Call DXGet("S_User.ID",ID$)
  filename$="files/sort",ID$
  if sortchan=-1 let sortchan = FindChannel() !assign a channel
  If flag = 1 
   Open #sortchan,filename$
  Else
   filename2$ = "<660> [10:256] ",filename$,"!"
   Build #sortchan,filename2$ As "Universal Indexed-Contiguous"
   Rem key lengths in words
   r = keylen
   Search #sortchan,0,1;v$,r,e
   If e  
    Close #sortchan
    sortchan = e * -1
   Else
    v$=""\r=0\e=0
    Search #sortchan,0,0;v$,r,e
    If e
     Close #sortchan
     sortchan = e * -1
    End If
   End If
   If e=0
    Close #sortchan
    Open #sortchan,filename$
   End If
  End If
 Else
  if spc(8) < 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  if spc(8)<20000 error 10000 else error 20000
 End Try
End Function sortchan !blockbuildsort
!
!
external function blockcrc$(e$,a$,...)
! calculates the crc32 value of a data record
! pass the string field of the record and any numeric arrays of the record
! returns to crc32 number of the record (a 10 digit number)
!
 try
  dim 3%
  c=crc32(a$[1,len(a$)])
  do !for each numeric array that exists
   try
    enter a[],...
    x=len(hex$(a))/2 !dim precision
    y=ubound(a[],1) !# of elements in the array (less 1)
    free b?
    dim b?[x*(y+1)]
    call bytecopy(b?,a[]) !convert 1st array to binary
    c=crc32(b?,c)
    free a
   else
    exit do
   end try
  loop
 else
  if spc(8) < 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  if spc(8)<20000 error 10000 else error 20000
 end try
end function str$(c) !blockcrc
!
!
external function blockgetmsg$(e$,msglabel$,...)
! opens user's text message file and returns text for message # or label
! message file that is opened is defined in user's org's view 
! default is dxmsg.txt 
! (use message #'s 1000-1999 for errors,2000-2999 for descriptive (or label))
! pass msglabel$ the message label or number to return associated message text 
!      chan optional channel # message file is open on
! returns msg$ message text
!
 try
  try enter chan else chan=-1
  !
  dim msg$[80*4],filename$[60]
  !
  if chan=-1
   chan = findchannel()
   call dxget("s_view.messagefile",filename$)
   ropen #chan,filename$ as "text"
  end if
  do
   read #chan;msg$
   if msg$="" exit do
   try
    if p := pos(msg$, = ":") if msglabel$ = msg$[1,p-1]
     msg$ = msg$[p + 1]
     exit do
    end if
   else
   end try
  loop
  if msg$="" let msg$=msglabel$
 else
  if spc(8) < 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  if spc(8)<20000 error 10000 else error 20000
 end try
end function msg$ !blockgetmsg$
