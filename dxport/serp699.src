! serp699 - alternate vendor maintenance
!
! 1.0 05/21/2010 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp699.dl4 src/serp699.src
!
Rem PO699     altvend file maintenance
Rem     *************
Rem
Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC 21, 2004  14:37:54
Rem /w/papermaster/r2002//usr/acct/bill/work/devl/po/po699.src (univ2) [bill] {32140}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/inc/fileprod.inc"
include "src/copyright.inc"
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
Declare External Function chkDteFrmt$,ChkAltItem$
External Lib "libprod.lib"
Declare External Sub UMDList
Declare External Function ChkPrdUM
Declare Intrinsic Sub programdump
! Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
dim 1%,J4$[75],PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,AMOUNT,A[33]
Def FNA(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)

! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim F$[16]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],Y,UNITC
Dim 2%,X,X1,AV2[6],Q0[1]
Dim 3%,J1,X2,AV3[3],PRICE
Dim J$[60],J0$[20],J1$[60],J2$[60],J5$[70],J7$[60]
Dim J9$[50],X$[10],AV1$[32],A$[156],AV$[264]
Dim U9$[50],U3$[80],W$[60],Y$[80]
Dim U5$[50],PMASK$[12],P61$[255]
Dim W9$[9],UNIT$[4],FILE$[16],a5$[30]
Dim prod. as prod ! for um list call
Dim K1$[18],K3$[12],K4$[6],2%,D0,K,K1,D1,K3,K4
Dim A1$[28],T2$[7],A2$[2],Z2$[30],Z3$[12],OPT$[10]
Dim 1%,Z0,Z2[4],2%,Z1[4]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[600],msg$[100],rstr$[2000],webstr$[2000]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim Action1$[30],action2$[30],blank$[100]
Dim List$[100,100] ! for lists
! call dxopen() ! for standalone run
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
Blank$=" ",blank$
action1$=UCase$(RTrim$(action1$))
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
!Let FILE$ ="cntrl/cntrl"+Str$(COID) 
!If Err 0 Rem
!Close #1
!Ropen #1,FILE$
!If Err 0 Gosub ERR_TRAP
Returnstatus=1
message$="OK"
Mat Read #1,61,0;P61$;
if action1$="SYSFLAG" ! send flag
	clear List$[]
	List$[0]=bsdel$,"SYSFLAG",fdel$
	List$[1]="USEALTV",fdel$
	List$[2]=P61$[51,51],fdel$
	List$[3]=esdel$
	call addtostr(e$,rstr$,List$[])
	goto OutEnd
Endif
! all rest of action1's are below
If P61$[51,51] = "N" Goto NOAVOPT ! from now on - NOT ALLOWED PER FLAG
U3$ = " ",U3$
OPT$ = "@%&-=?/,*"
Mat Read #1,115,40;Q0
If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "-------#####"
X = Len(PMASK$) - Q0[1]
If X < 0 Let X = A0[1]
PMASK$[X,X] = "."
For J = 2 To 6
  Read J1
  If J1 = -1 Goto L_830
  Read #1,88,Abs(J1);J$;
  If J1 > 0 Open #J,J$ Else Ropen #J,J$
L_830: Next J
Data "1568","-1792","-2400","-1","-1728"
L_1000: If Err 0 Gosub ERR_TRAP
!Print 'CS'
!Print @23,0;"ALTERNATE VENDOR FILE MAINTENANCE";@70,0;"PO699";
!Print @0,4;"        PRODUCT CODE";
!Print @0,10;" 1> VENDOR PROD CODE:";
!Print @0,11;" 2> LAST ORDER DATE.:";
!Print @0,12;" 3> LAST UNIT PRICE.:";
!Print @0,13;" 4> AVG LEAD TIME...:";
!Print @0,14;" 5> LEAD TIME 1.....:";
!Print @0,15;" 6> LEAD TIME 2.....:"
!Print @0,24;" ";
!Signal 3,0
U9$ = ""
! whether get or submit - always get prod/vendor
L_1140: ! get product J0$ = "2 001222 4"
If action1$<>"GETVEND" ! not on vendor get
Call dxget("PRODID",tmp$)
tmp2$=UCase$(RTrim$(tmp$))
tmp1$=ChkAltItem$(e$,intCo,tmp2$) ! check if alt item entered
if tmp1$<>"" and tmp1$[1,3]<>"   "
	tmp$=tmp1$ ! move in found product
Endif ! 
j$=UCase$(RTrim$(tmp$))+blank$
K3$ = J$ \ AV1$[1,12] = J$
Search #3,2,1;K3$,K3,E
If E or rtrim$(tmp$)=""
	e$="PRODUCT NOT FOUND!"
	goto err_msg
Endif
Mat Read #3,K3,0;A$;
Mat Read #3,K3,256;A; \ Mat Read #3,K3,512;PFU1;
Mat Read #3,K3,554;PFU2;
read record #3,k3,0;prod.; ! for um list
A2$ = K3$
UNITC = PFU1[10] \ Gosub L_10700 ! default=Purchasing
ENDIF ! of not getvend
if action1$="GETPROD"
	clear list$[]
	List$[0]=bsdel$,"PRODDATA",fdel$
	List$[1]="PRODID",fdel$,"DESC1",fdel$,"DESC2",fdel$
	List$[2]=K3$,fdel$,RTrim$(A$[9,38]),fdel$,RTrim$(A$[63,92]),FDEL$
	List$[3]=esdel$
	call addtostr(e$,rstr$,List$[])
	Clear List$[]
	! send Cost UM's
	Call UMDList(e$,"COST",3,k3,List$[],IntCo,Prod.)
	call addtostr(e$,rstr$,List$[])
	goto OutEnd
Endif
!Goto L_1400
L_1400: Rem GET VENDOR
BADVEND = 0

L_1440: ! J0$ = "2 00 622 7"
Call dxget("VENDID",tmp$)
x2=tmp$
if x2<=0 or x2>999999 or fra(X2)
	e$="INVALID VENDOR NUMBER"
	GOTO ERR_MSG
Endif
AV2[0] = tmp$
K4$ = AV2[0] Using "######"
Search #4,2,1;K4$,K4,E
If E 
  !e$="VENDOR NOT FOUND!"
  !goto err_msg
  Badvend=9 ! allow not found for delete bad recs
Else
	Mat Read #4,K4,0;AV$;
	mat read #4,k4,576;a5$; ! phone #
Endif
if action1$="GETVEND"
	clear list$[]
	List$[0]=bsdel$,"VENDDATA",fdel$
	List$[1]="VENDID",fdel$,"NAME",fdel$,"CONTACT",fdel$,"PHONENO",fdel$
	webstr$=Str$(Av2[0]),fdel$,RTrim$(AV$[1,30]),FDEL$
	webstr$=webstr$,RTrim$(AV$[129,148]),fdel$,RTrim$(A5$[1,30]),fdel$
	List$[2]=webstr$
	List$[3]=esdel$
	call addtostr(e$,rstr$,List$[])
	goto OutEnd
Endif
A2$ = K4$
if action1$="GETAVDATA"
	L_1800: K1$ = " ",K1$ \ K1$[1,12] = K3$ \ K1$[13] = K4$
	Search #2,2,1;K1$,K1,E \ If E > 2 Goto ERR_SEARCH
	If E ! Goto L_1210
		av1$=" ",av1$
		clear av2[]
		clear av3[]
		av1$[1,12]=k1$[1,12]
		av2[0]=k4$
		av2[6]=unitc ! default product 
	Else
		Mat Read #2,K1;AV1$;
		Mat Read #2,K1,32;AV2;
	Endif
	If AV2[6] Let UNITC = AV2[6] \ Gosub L_10700
	CNVTU[0] = 0 \ CNVTU[1] = UNITC \ CNVTU[2] = 2 \ CNVTA = AV2[2]
	L_2020: Gosub CONVERT \ PRICE = AMOUNT
	! Gosub L_5000
	clear list$[]
	list$[0]=bsdel$,"AVDATA",fdel$
	webstr$="VENDITEM",fdel$,"LASTORDER",fdel$,"LASTPRICE",fdel$,"UM",fdel$
	webstr$=webstr$,"AVGLEAD",fdel$,"LEAD1",fdel$,"LEAD2",fdel$
	List$[1]=webstr$
	webstr$=RTrim$(AV1$[13,32]),fdel$
	X2 = AV2[1];tmp$=""
	If x2 let tmp$=PDate$(X2)
	webstr$=webstr$,tmp$,fdel$
	webstr$=WEBSTR$,LTrim$(PRICE Using PMASK$),fdel$,UNIT$,fdel$
	webstr$=webstr$,LTrim$(FNA(AV2[3] * 30) Using "####.##"),fdel$
	webstr$=webstr$,LTrim$(FNA(AV2[4] * 30) Using "####.##"),fdel$
	webstr$=webstr$,LTrim$(FNA(AV2[5] * 30) Using "####.##"),fdel$
	list$[2]=webstr$
	list$[3]=esdel$
	call addtostr(e$,rstr$,List$[])
	If BADVEND Goto L_8200 ! Gosub L_8200
	goto OutEnd
Endif ! of get avdata
if action1$="SUBMITDATA"
	If BADVEND ! cannot submit with bad vendor
		e$="VENDOR NOT FOUND!"
		goto err_msg
	Endif
	K1$ = " ",K1$ \ K1$[1,12] = K3$ \ K1$[13] = K4$
	Search #2,2,1;K1$,K1,E \ If E > 2 Goto ERR_SEARCH
	If E ! Goto L_1210
		av1$=" ",av1$
		clear av2[]
		clear av3[]
		av1$[1,12]=k1$[1,12]
		av2[0]=k4$
	Else
		Mat Read #2,K1;AV1$
		Mat Read #2,K1,32;AV2
		mat read #2,k1,60;av3
	Endif
	If E ! add new record
		E = 2 \ Search #2,1,0;K1$,K1,E
		If E Gosub ERR_SEARCH
		Search #2,4,1;K1$,K1,E
		If E Gosub ERR_SEARCH
	Endif
	call dxget("VENDITEM",tmp$)
	j$=RTrim$(tmp$)+Blank$
	AV1$[13,32] = J$
	
	L_3022: !J5$ = "Enter Last Order Date"
	Call dxget("LASTORDER",tmp$)
	tmp1$=chkDteFrmt$(e$,tmp$) ! chk/convert to mm/dd/yyyy
	if tmp1$[1,1]<"0" and tmp1$[1,1]>"9" let tmp1$=""
	x$=formatdate2$(tmp1$) ! from mm/dd/yyyy to yyyymmdd
	AV2[1] = x$[3,8] ! just yymmdd
	
	L_3030: ! J5$ = "Enter Last Unit Price" \ J2$ = "######.###"
	call dxget("LASTPRICE",tmp$)
	J1=tmp$
	call dxget("UM",tmp$)
	UNIT$ = tmp$+Blank$
	If UNIT$ = "CWT " Let UNITC = -1 \ Goto L_3180
	If UNIT$ = "LOT " Let UNITC = -2 \ Goto L_3180
	If UNIT$ = "LB  " And PFU1[15] = -3 Let UNITC = -3 \ Goto L_3180
	Search #6,2,1;UNIT$,AV2[6],E
	If AV2[6] Let UNITC = AV2[6]
	If E ! Print @35,12;"NOT VALID" \ Signal 3,15 \ Print @35,12;'CL' \ Goto L_3105
		e$="UM NOT VALID"
		goto err_msg
	Endif
	L_3180: AV2[2] = J1
	av2[6]=unitC
	umrec=av2[6]
	Rok=ChkPrdUM(e$,umrec,IntCo,Prod.)
	if rok=0 ! no good
		e$="UM not on file for Product"
		goto err_msg
	Endif
	CNVTU[0] = UNITC;CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = AV2[2]
	Gosub CONVERT \ AV2[2] = AMOUNT
	
	L_3039: ! J5$ = "Enter the Average Lead Time in Months or ''-'' Days"
	call dxget("AVGLEAD",tmp$) ! sent in days - return in same!
	J1=tmp$;j1=0-j1 ! always days
	If RTrim$(tmp$) = "" Goto L_3040
	If J1 < 0 Let AV2[3] = Abs(J1 / 30) Else Let AV2[3] = J1
	L_3040: ! 
	L_3050: ! J5$ = "Enter Lead Time 1 in Months or ''-'' Days"
	Call dxget("LEAD1",tmp$)
	j1=tmp$;j1=0-j1 ! always days
	If RTrim$(tmp$) = "" Goto L_3060
	If J1 < 0 Let AV2[4] = Abs(J1 / 30) Else Let AV2[4] = J1
	
	L_3060: !
	L_3080: ! J0$ = "4200082215"
	call dxget("LEAD2",tmp$)
	j1=tmp$;j1=0-j1 ! always days
	If RTrim$(tmp$) = "" Goto L_3090
	If J1 < 0 Let AV2[5] = Abs(J1 / 30) Else Let AV2[5] = J1
	
	L_3090: ! EDIT_ = 0
	L_3105: !
	L_2500: Rem WRITE TO ALT VEND FILE
	AV1$[1,12] = K3$
	Mat Write #2,K1;AV1$;
	Mat Write #2,K1,32;AV2;
	mat write #2,k1,60;AV3;
	Goto OutEnd
Endif ! of action submit
If action1$ = "DELETE"
	K1$ = " ",K1$ \ K1$[1,12] = K3$ \ K1$[13] = K4$
	Search #2,2,1;K1$,K1,E \ If E > 2 Goto ERR_SEARCH
	If E goto OutEnd ! can't delete what's not there
	! delete the recordE9 = Spc(9)
	Search #2,5,1;K1$,K1,E
	If E Gosub ERR_SEARCH
	E = 3
	Search #2,1,0;K1$,K1,E
	If E Gosub ERR_SEARCH
	message$="Record Deleted"
	Goto OutEnd
Endif ! end of delete
! passed on thru with action1 not found
returnstatus=0
message$="Action 1 not found!"
goto OutEnd

L_8200: Rem vendor missing warning
e$="The vendor for this record no longer exists."
e$=e$+" You should either delete this record or add "
e$=e$+"the vendor back in 501. "
Goto Err_msg ! Return

NOAVOPT: Rem "flag is off
e$="THE ALT VEND OPTION IS TURNED OFF!"
Goto OutEnd

L_10700: Rem FIND UNIT ABBR
UNIT$ = "ERR!"
If UNITC = -1 Let UNIT$ = "CWT "
If UNITC = -2 Let UNIT$ = "LOT "
If UNITC = -3 Let UNIT$ = "LB  "
If UNITC <= 0 Goto L_10790
Mat Read #6,UNITC,10;UNIT$;
L_10790: Return 
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
! If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: ! always a call
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/699se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 0 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Goto OUTEND                         
OUTEND: Rem EXIT ROUTINE
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)
END
!Print 'CS'
!Close 
!Chain "mx000"
!Stop 
!Stop 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End
