! serp218.dl4
!
! Product Inventory Inquiry (PM program 218)
!
! 1.0 04/03/2009
!  USE "stockinq.dl4" for list generation
!
! loadsave -w -n 100,10 -o prog/dxport/serp218.dl4 src/serp218.src
!
!
!custom_customer$="OMAHA" task#10465/cct174037 disp cost in pricing um   
!


include "src/copyright.inc"
! internal files needed

Include "src/inc/fileccodes.inc" ! u/m file
Include "src/inc/filecommhead.inc" ! commodity
Include "src/inc/fileprod.inc" ! product file
Include "src/inc/fileprodwhse.inc" ! prodwhse file
Include "src/inc/filewhinfoz.inc" ! wh info file (rec 0 fix)
include "src/inc/fileprtdefault.inc" ! port default
Include "src/inc/filebrktbl.inc" ! break table
Include "src/inc/fileordhead.inc" ! roh,ros,rot files
Include "src/inc/filerolnew.inc" ! lines
Include "src/inc/filecust.inc" ! customer

! other external functions / subs
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$,buildsort
Declare External Function ChkAltItem$,formatdate2$,getuidrec
Declare External Sub UserCntrl,getportdefault

External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus

External Lib "libprod.lib"
Declare External Sub ProdList,UMDList
Declare External Function getpravail,getumrec,ChkPrdUM

External Lib "libprodwh.lib"
Declare External Function getWhAvail

External Lib "ubsprconv.dl4"
Declare External Function XUnit$

External Lib "libprodconv.lib"
Declare External Function ConvProdAmount

External Lib "librebates.lib"
Declare External Sub rebates

External Lib "libprice.lib"
Declare External Sub SysPriceCalc

External Lib "ubsvendlist.dl4"
Declare External Sub VendList

External Lib "upcxref.dl4"
Declare External Sub UPCLookup

! internal subs/functions 

Declare Intrinsic sub programdump,env,Logic,FindF
Declare Intrinsic Sub DateToJulian,JulianToDate
Declare Intrinsic Function findchannel

Declare Sub Openfiles,updatelog,sndprod,PBWind
Declare Sub FUTOLIST
Declare Function chkdatefrmt$,GetOrdRec
Try
	Option String Redim is legal ! in case subs dim/use same names
	
	dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
	dim action$[30],options$[30],userid$[8],b$[200],action1$[30],Action2$[30]
	Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[3000]
	dim tmp$[1200],tmp1$[300],Msgdesc$[150],Field$[1,30]
	dim Message$[200],WebStr$[2000],SessionID$[200]
	Dim Prod$[12],ProdKey$[60],P9$[50],P60$[50],P61$[256]
	Dim QMask$[20],PMask$[20],Key1$[60],HKey$[60]
	Dim Key2$[64],KCM$[50],K1$[50],Mode$[2]
	Dim TUID$[10],UCA2$[50],UTYPE$[10],custom_customer$[30]
	dim Blank$[100] \ Blank$=" ",Blank$
	dim 1%,cost_lev[4],Whse,debug,Cnvtu[2],UCA5[10]
	Dim 2%,Q0[1],maxcnt \ maxcnt=50 ! init max records in arrays for list
	dim List$[maxcnt,1000] ! for .net (larger size - ZLines)
	dim 1%,X1[9],2%,CurDate,cust
	Dim 2%,x2[9],sysdate,Vend,DOTp
	Dim 3%,PRR,PWR,CUR,VNR,RHR,RDR,SHR,SDR
	Dim 3%,CNVTA,Amount,X3[9],R[99],Chans[20],UPC3[7]
	dim dmsg$[256],dblog$[60] \ dblog$="files/6/p218.log" ! fields for DEBUG
	dim custom_customer$[30],Fle$[20]
	DEF FNR(H)=INT(ABS(H)*100+.5)*.01*SGN(H)
	
	Dim umc. as ccodes ! u/m file
	Dim PR. as prod ! product file
	Dim PW. as prodwhse ! prodwhse file
	Dim WHI. as whinfo ! wh info file
	Dim comd. as commhead ! commodity
	dim prt. as prtdefault ! port defaults
	dim cust. as cust ! customer

	! call dxopen() ! already done in menu
	call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
	
	debugDetail=0;debug=0 ! can do debug text by changing both to 1
	If debugDetail
		debug=1
		tmp$="serp218"
		dmsg$[1,50]="-",dmsg$ \ Call updatelog(debug)               
		dmsg$="start...program "+tmp$ \ Call updatelog(debug)
	Endif
	Action2$=UCase$(Action2$)
	ACtion2$=RTrim$(Action2$) ! make sure UPPERCASE and No blanks at end
	Action1$=UCase$(action1$)
	Action1$=RTrim$(action1$) ! UC and trimmed
	GAct=0 ! action not found
	if debugdetail
		dmsg$="SERP218 ACTION1 "+action1$
		If Action2$<>"" let dmsg$=dmsg$+" ACTION2 "+action2$
		Call updatelog(debug)
	Endif
	

	MAT  READ #CTLC,3,172;SysDate;
	Mat Read #ctlc,19,50;P9$;
	Mat Read #ctlc,60,50;P60$;
	Mat Read #ctlc,61,0;P61$;
	Mat Read #ctlc,115,52;DOTp;
	Mat read #ctlc,115,60;custom_customer$;
	Custom_customer$=UCase$(Trim$(custom_customer$))
	Call OpenFiles() ! open any/all files
	Mat Read #CTLC,115,40;Q0;
	QMask$="---------#.##"
	tmp$="#",tmp$
	If q0[1]<=0 Let Q0[1]=2
	If Q0[1] Let Pmask$="-----------#.",tmp$[1,Q0[1]]     !price mask
	DEF FNP(X)=SGN(X)*(INT(ABS(X)*10^Q0[1]+.5)/10^Q0[1])
	! get the Usercntrl Rec #
	If Userid$="" or UserID$[1,2]="  "
		Call DXGet("S_USER.ID",tmp$) ! get from system variable
	Else
		tmp$=UserID$
	Endif
	Let UserID$=UCase$(tmp$) ! make sure it's UPPERCASE as that's what PM uses
	TUID$=UserID$+Blank$
	If Len(TUID$)>10 let TUID$[11]=""
	Call UserCntrl(TUID$,UCA2$,UCA5[],status,intCo)
	Let COST_LEV[0]=UCA5[0]
	Let COST_LEV[1]=UCA5[1]
	Let COST_LEV[2]=UCA5[2]
	Let COST_LEV[3]=UCA5[3]
	Let COMM_LEV=UCA5[4]
	let rec_uac=GetUIDRec(e$,IntCo,TUID$)
	call GetPortDefault(e$,IntCO,TUID$,portnum,rec_uac,prt.) ! get port default
	clear e$
	tmp$=Tim(8) using "&&"
	tmp$[3]=TIM(9) using "&&"
	tmp$[5]=TIM(10) using "&&"
	CurDate=tmp$[1,6] ! yymmdd
	ReturnStatus=0
	Message$="ACTION1 NOT FOUND"
	select case action1$
	case "PRODSEARCH" ! product scan						doc=SSInq-ProdScan.doc
		!
		Let ReturnStatus=1
		Message$="OK"
		X2=0 ! IT'S Normal TYPE SCAN
		Call ProdList(e$,IntCo,List$[],maxcnt,ctlc,prc,pwc,x2,debugdetail,dblog$,UserId$)
		If E$<>""
		  Let ReturnStatus=0
		  Message$=E$
		Endif
		clear e$
		call AddToStr(e$,rstr$,List$[])
		
		if debugdetail
			dmsg$="Product Search sent "+Message$ \ Call updatelog(debug)
		Endif
		GAct=1 ! okay
		! end of prodsearch
	case "SYSFLAGS" ! send up flags							doc=SSInq-GetSysFlags.doc
		GAct=1 ! ok
		ReturnStatus=1
		Message$="OK"
		Clear List$[]
		List$[0]=bsdel$,"SYSFLAGS",fdel$
		Webstr$="COSTLEV",fdel$,"DFWHSE",fdel$,"DFOTP",fdel$
		List$[1]=webstr$
		TMP$=Str$(cost_lev[1])
		Webstr$=tmp$[1,1],fdel$,Str$(prt.wh),fdel$,Str$(DOTp),fdel$
		List$[2]=webstr$
		List$[3]=esdel$
		call AddToStr(e$,rstr$,List$[])
		
		! send whse List
		Clear list$[]
		List$[0]=bsdel$,"WHSELIST",fdel$
		List$[1]="ID",fdel$,"NAME",fdel$
		List$[2]="0",fdel$,"ALL WHSES",fdel$
		row=3
		for x=0 to 98 ! translate to 1-99
				Try 
					read record #WHI,x,0;whi.;
				Else
					clear whi.
				End try
				tmp$=RTrim$(whi.WhName$)
				if tmp$<>""
					webstr$=Str$(X+1),fdel$,tmp$,fdel$
					List$[row]=webstr$
					row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
				Endif
		Next x
		List$[row]=esdel$
		clear e$
		call AddToStr(e$,rstr$,List$[])
		! send otype List
		Clear list$[]
		List$[0]=bsdel$,"OTYPELIST",fdel$
		List$[1]="ID",fdel$,"NAME",fdel$
		List$[2]="0",fdel$,"ALL TYPES",fdel$
		row=3;tmp$=" ",tmp$
		for x=1 TO 38
			read #ctlc,62,(X-1)*20;tmp$[1,20];
			tmp1$=RTrim$(tmp$)
			if tmp1$<>""
				webstr$=Str$(X),fdel$,tmp1$,fdel$
				List$[row]=webstr$
				row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
			Endif
		Next x
		List$[row]=esdel$
		clear e$
		call AddToStr(e$,rstr$,List$[])
		if debugdetail
			dmsg$="System Flags & droplists sent "+Message$ \ Call updatelog(debug)
		Endif
		! end of sysflags
	case "GETPROD" ! get prod details (individual)			doc=SSInq-GetProduct.doc
		ReturnStatus=1
		Message$="OK"
		Call dxget("PRODID",tmp$)
		tmp$=UCase$(tmp$) ! always to upper case?
		tmp1$=chkaltitem$(e$,intco,tmp$)
		clear e$
		tmp1$=RTrim$(tmp1$)
		If tmp1$<>"" ! found an altitem
		  Prod$=UCase$(tmp1$)+Blank$ ! use this instead of add'l calls
		Else ! ALT not found
		  ! try upc
		  Mode=2;group=0;unms=0 ! look up UPC/ALT
		  call UPCLookup(e$,Intco,MODE,GROUP,UNMS,tmp$,tmp1$)
		  If RTrim$(tmp1$)<>"" let tmp$=tmp1$ ! found a product
		  Prod$=UCase$(tmp$)+Blank$ ! use what we got
		Endif
		If Len(Prod$)>12 let Prod$[13]=""
		PrR=filegetprod(e$,PRC,"=",1,prod$,PR.) ! product mode=2 dir=1
		clear e$
		! initialize status
		if PrR<0 ! Product record not found
			clear PR.
			ReturnStatus=0
			Message$="Error, Product not found"
			goto ProdInvld
		Endif
		! need to add prodwhse - for costing
		Call dxget("WHSE",tmp$)
		Whse=tmp$
		if whse<0 or whse>99 or fra(whse)
			ReturnStatus=0
			Message$="Error, Warehouse not found"
			goto ProdInvld
		Endif
		if p9$[32,32]="Y" ! whse pricing - need pw
			key1$=" ",key1$
			if whse ! you needa
				key1$=prod$;key1$[13]=Whse using "##"
				PWR=filegetprodwhse(e$,PWC,"=",1,Key1$,pw.)
				if pwr<0 let whse=0;pwr=0
				clear e$
			else
				clear pw.
			Endif
		Else ! no whse price
			Whse=0;pwr=0
		Endif
		! in case of altitem - send it
		Call sndprod()
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		ProdInvld: ! prod nogood
		if debugdetail
			dmsg$="Product sent "+Prod$+" "+Message$
			Call updatelog(debug)
		Endif
		! end of getprod
	case "NXTPROD" ! want next id							doc=SSInq-GetNextProduct.doc
		ReturnStatus=1
		Message$="OK"
		Call dxget("CURRPROD",tmp$)
		Prod$=UCase$(tmp$)+Blank$ ! fill to 12
		PRR=filegetprod(e$,PRC,">",1,prod$,PR.) ! product mode=3 dir=1
		! initialize status
		if PrR<0 ! Product record not found
			clear PR.
			ReturnStatus=0
			Message$="Error, End of file"
			goto NProdInvld
		Endif
		clear e$
		! need to add prodwhse - for costing
		Call dxget("WHSE",tmp$)
		Whse=tmp$
		if whse<0 or whse>99 or fra(whse)
			ReturnStatus=0
			Message$="Error, Warehouse not found"
			goto NProdInvld
		Endif
		if p9$[32,32]="Y" ! whse pricing - need pw
			key1$=" ",key1$
			if whse ! you needa
				key1$=prod$;key1$[13]=Whse using "##"
				PWR=filegetprodwhse(e$,PWC,"=",1,Key1$,pw.)
				if pwr<0 let whse=0;pwr=0
				clear e$
			else
				clear pw.
			Endif
		Else ! no whse price
			Whse=0;pwr=0
		Endif
		! in case of altitem - send it
		Call sndprod()
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		NProdInvld: ! prod nogood
		if debugdetail
			dmsg$="Next Product sent "+Prod$+" "+Message$
			Call updatelog(debug)
		Endif
		! end of NXTPROD
	case "PRCWIND" ! price window (10 bracket ONLY!)		doc=SSInq-GetPriceWindow.doc
		ReturnStatus=1
		Message$="OK"
		Call dxget("PRODID",tmp$)
		Prod$=UCase$(tmp$)+Blank$
		If Len(Prod$)>12 let Prod$[13]=""
		PrR=filegetprod(e$,PRC,"=",1,prod$,PR.) ! product mode=2 dir=1
		clear e$
		! initialize status
		if PrR<0 ! Product record not found
			clear PR.
			ReturnStatus=0
			Message$="Error, Product not found"
			goto PWProdInvld
		Endif
		if pr.PriceType<>2 ! only 10 bracket
			ReturnStatus=0
			Message$="Error, Not 10 Bracket Pricing"
			goto PWProdInvld
		Endif
		Call dxget("WHSE",tmp$)
		Whse=tmp$
		if whse<0 or whse>99 or fra(whse)
			ReturnStatus=0
			Message$="Error, Warehouse not found"
			goto PWProdInvld
		Endif
		call dxget("QTYUM",tmp$)
		X2=GetUMRec(e$,CCC,TMP$,IntCo,Pr.)
		let UMG=ChkPrdUM(e$,X2,IntCo,Pr.)
		clear e$
		If Not(UMG) 
			returnStatus=0
			Message$="U/M "+tmp$+" not valid for product"
			Goto PWProdInvld
		Endif
		UMR=x2
		if p9$[32,32]="Y" ! whse pricing - need pw
			key1$=" ",key1$
			if whse ! you needa
				key1$=prod$;key1$[13]=Whse using "##"
				PWR=filegetprodwhse(e$,PWC,"=",1,Key1$,pw.)
				if pwr<0 let whse=0;pwr=0
				clear e$
			Endif
		Else ! no whse price
			Whse=0;pwr=0
		Endif
		SRC=0 ! used in mx218bk for?
		Clear List$[]
		Call pbwind()
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		PWProdInvld: ! prod nogood
		if debugdetail
			dmsg$="Product Prices sent "+Prod$+" "+Message$
			Call updatelog(debug)
		Endif
		! end of PRCWIND
	case "FUTLIST" ! show futures							doc=SSInq-GetFutOrders.doc
		ReturnStatus=1
		Message$="OK"
		Call dxget("PRODID",tmp$)
		Prod$=UCase$(tmp$)+Blank$
		If Len(Prod$)>12 let Prod$[13]=""
		PrR=filegetprod(e$,PRC,"=",1,prod$,PR.) ! product mode=2 dir=1
		clear e$
		! initialize status
		if PrR<0 ! Product record not found
			clear PR.
			ReturnStatus=0
			Message$="Error, Product not found"
			goto FLProdInvld
		Endif
		Call dxget("WHSE",tmp$)
		Whse=tmp$
		if whse<0 or whse>99 or fra(whse)
			ReturnStatus=0
			Message$="Error, Warehouse not found"
			goto FLProdInvld
		Endif
		call dxget("QTYUM",tmp$)
		X2=GetUMRec(e$,CCC,TMP$,IntCo,Pr.)
		let UMG=ChkPrdUM(e$,X2,IntCo,Pr.)
		clear e$
		If Not(UMG) 
			returnStatus=0
			Message$="U/M "+tmp$+" not valid for product"
			Goto FLProdInvld
		Endif
		UMR=x2
		Clear List$[]
		Call FUTOLIST()
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		FLProdInvld: ! prod nogood
		if debugdetail
			dmsg$="Product Future Orders sent "+Prod$+" "+Message$
			Call updatelog(debug)
		Endif
		! end of FUTLIST
	case "GETSTOCK" ! wants the list						doc=SSInq-GetProductStock.doc
		ReturnStatus=1
		Message$="OK"
		Call dxget("PRODID",tmp$)
		Prod$=UCase$(tmp$)+Blank$
		If Len(Prod$)>12 let Prod$[13]=""
		PrR=filegetprod(e$,PRC,"=",1,prod$,PR.) ! product mode=2 dir=1
		clear e$
		! initialize status
		if PrR<0 ! Product record not found
			clear PR.
			ReturnStatus=0
			Message$="Error, Product not found"
			goto SIProdInvld
		Endif
		close ! files reopened in stockinq
		chain "stockinq.dl4"
		SIProdInvld: ! prod nogood
		if debugdetail
			dmsg$="Product Stock sent "+Prod$+" "+Message$
			Call updatelog(debug)
		Endif
		! end of GETSTOCK
	end select
	clear e$
	! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)

  if debugdetail
		dmsg$="End of Program serp218" \ Call updatelog(debug)
  Endif
else
 include "src/callmainerrnet.inc"
end try
end  ! end of Main
!
!--------------------------------------------------------------------

! subs start now
!------------------------------------------------------------------------------------------
Sub OpenFiles()

 Try
    !
	CTLC = OpenFile(-9999,intCo) \ If CTLC = -1 Error 42 !control
	CCC=OpenFile(-1728,IntCo) \ IF CCC=-1 Error 42 ! u/m file
	CMC=OpenFile(-2288,IntCo) \ if CMC=-1 Error 42 ! commodity
	PRC=OpenFile(-1792,IntCo) \ if prc=-1 Error 42 ! product file
	PWC=OpenFile(-1744,IntCo) \ If PWC=-1 Error 42 ! prodwhse file
	WHI = OpenFile(-2768,IntCo) \ if whi = -1 Error 42 ! wh info file (rec 0 fix)
	PLC = OpenFile(-2528,Intco) \ if plc=-1 Error 42 ! prodlot
	SLC = OpenFile(-2320,IntCo) \ if slc=-1 Error 42 ! sordlot
	AIC=Openfile(-2352,IntCo) \ if aic=-1 error 42 ! alt items
	CUC = OpenFile(1808,IntCo) \ if cuc = -1 Error 42 ! customer
	
 	if debugdetail
		dmsg$="Files Opened" \ Call updatelog(debug)
    Endif
 else
    include "src/callsuberr.inc"
  end try
end sub ! openfiles
! 
!--------------------------------------------------------------------
Sub updatelog(debug)                                        
    If not(debug) Exit Sub                                    
	System "echo ''" + msc$(0) + " UID "+Userid$+" " + dmsg$ + "'' >> " + dblog$
End Sub 
! 
!--------------------------------------------------------------------
Function chkDateFrmt$(DIn$)
! see if date in is MM/DD/YY or MM/DD/YYYY
! if not make it MM/DD/YYYY
Try
	Dim DOut$[10],X$[20]
	Dim 1%,Mth,Day
	Dim 3%,Yr
	If DIn$[1,2]="00" or UCase$(DIn$[1,4])="NONE" or DIn$="0"
	  Let DOut$=UCase$(DIn$)
	  Exit Function DOut$ ! no reformat - send back as is
	Endif
	Mth=DIn$[1,2];Day=Din$[4,5];Yr=DIn$[7]
	if Din$[2,2]="/" or DIn$[2,2]="-" ! 1 digit month
	  Let Mth=DIn$[1,1]
	  If DIn$[4,4]="/" or DIn$[4,4]="-" ! 1 digit day
	     Let Day=DIn$[3,3]
		 Let Yr=DIn$[5]
	  Else
	     Let Day=Din$[3,4] ! try 2 digit
		 Let Yr=DIn$[6]
	  Endif
	Endif
	X$=Mth Using "&&"
	X$[3,4]=Day Using "&&"
	If Yr>1000 ! 4
		X$[5]=Yr Using "&&&&"
	Else ! 2 digit
		If YR<67 let yr=2000+yr Else Let Yr=yr+1900
		X$[5]=Yr Using "####"
	Endif
	Dout$=X$[1,2]+"/"+X$[3,4]+"/"+X$[5]
 else
    include "src/callsuberr.inc"
  end try
end Function DOut$ ! chkDateFrmt$
! 
!--------------------------------------------------------------------
Sub sndprod()
! send product info
 Try
	dim cpr. as prod ! copy for alt/supercede
	dim 3%,vendid,rec_vend,vendname$[30],keyvend$[10]

	Ch_Vend = OpenFile(2400,intCo) \ If Ch_Vend = -1 Error 42  ! vend

	List$[0]=bsdel$,"PRODDATA",fdel$
		Webstr$="ID",fdel$,"DESC1",fdel$,"DESC2",fdel$,"VENDITEM",fdel$,"MATCD",fdel$,"COST",fdel$
		webstr$=WebStr$,"ALTS",fdel$,"SUBS",fdel$,"SPRCD",fdel$,"PWIND",fdel$,"CTCHWGT",fdel$
		Webstr$=webstr$,"HILIGHTPID",fdel$
		Webstr$=webstr$,"PRODLIT",fdel$
		Webstr$=webstr$,"VENDOR",fdel$
		List$[1]=webstr$
		WebStr$=Prod$,fdel$,RTrim$(pr.desc1$),fdel$,RTrim$(pr.desc2$),fdel$
		Webstr$=WebStr$,rtrim$(pr.VendItem$),fdel$,pr.MatCode$,fdel$
		LET DFT_COST=P60$[29,29]                  
		IF DFT_COST=0 OR DFT_COST>5 LET DFT_COST=1
		IF DFT_COST=1 
			LET LC=PR.CostLoad    
			if p9$[32,32]="Y" and pw.CostLoad>0 Let LC=pw.CostLoad
		endif		
		IF DFT_COST=2 
			LET LC=pr.CostLoad2
			if p9$[32,32]="Y" and pw.CostLoad2>0 Let LC=pw.CostLoad2
		endif		
		IF DFT_COST=3 
			LET LC=pr.CostAvg 
			if p9$[32,32]="Y" and pw.CostAvg>0 Let LC=pw.CostAvg
		endif		
		IF DFT_COST=4 
			LET LC=pr.CostPO
			if p9$[32,32]="Y" and pw.CostLastPo>0 Let LC=pw.CostLastPo
		endif
		IF DFT_COST=5 
			LET LC=pr.CostBase
			if p9$[32,32]="Y" and pw.CostBase>0 Let LC=pw.CostBase
		endif
		clear e$
		If Custom_Customer$<>"OMAHA" ! task#10465/cct174037 disp cost in pricing um
			cnvtu[0]=0;cnvtu[1]=pr.UMCostDefault;cnvtu[2]=2
			cnvta=LC
			X3=ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PR.)
			tmp$=XUnit$(pr.UMCostDefault,ccc)!!! mtg
		else
			! for Omaha default task#10465/cct174037 disp cost in pricing um
			cnvtu[0]=0;cnvtu[1]=pr.UMPriceDefault;cnvtu[2]=2
			cnvta=LC
			X3=ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PR.)
			tmp$=XUnit$(pr.UMPriceDefault,ccc)
		endif
		
		if cost_lev[1]
			webstr$=webstr$,LTrim$(X3 using PMask$)," ",tmp$,fdel$ ! cost
		Else
			webstr$=WebStr$,"0",fdel$ ! none
		Endif
		tmp1$=" ",tmp1$;tmp1$[1,12]=prod$
		tmp$="N"
		ailoop: ! loop alts
		Search #aic,3,2;tmp1$,R[1],E
		if not(e) and tmp1$[1,12]=Prod$[1,12]
			read #aic,r[1],0;cust;
			if cust=0 let tmp$="Y"
			if cust<>0 goto ailoop
		Endif
		! upc/alt - check it if there
		Fle$="2/upcxref"+Str$(Intco)
		Call FindF(fle$,Found)
		if found
			CHan=Findchannel()
			ROpen #Chan,Fle$
			tmp1$=" ",tmp1$;tmp1$[1,12]=prod$
			do
				search #chan,3,1;tmp1$,r[1],e
				if e or tmp1$[1,12]<>prod$[1,12] exit do
				tmp$="Y"
			Loop
			try close #chan else rem
		Endif
		webstr$=webstr$,tmp$,fdel$ ! alts entered y/n
		tmp$="N";tmp1$=RTrim$(pr.AltPart1$)
		if tmp1$<>"" let tmp$="Y"
		tmp1$=RTrim$(pr.AltPart2$)
		if tmp1$<>"" let tmp$="Y"
		webstr$=webstr$,tmp$,fdel$ ! subst entered
		tmp1$=RTrim$(pr.SupersedeCode$)
		tmp$="N" \ IF TMP1$<>"" let tmp$="Y"
		webstr$=webstr$,tmp$,fdel$ ! supercedes y/n
		tmp$="N" \ if pr.PriceType=2 let tmp$="Y"
		webstr$=webstr$,tmp$,fdel$ ! 10 bracket
		tmp$="N" \ if pr.CatchwgtItem$="Y" let tmp$="Y"
		webstr$=webstr$,tmp$,fdel$ ! catchweight y/n
		tmp$="N" \ if custom_customer$="MORRISETTE" and Int(pr.UdNumeric)<>0 let tmp$="Y"
		! If Int(pr.UdNumeric)<>0 let tmp$="Y" ! TESTING ONLY - TESTING ONLY - TESTING ONLY - 
		webstr$=webstr$,tmp$,fdel$ ! custom - high light product code
		tmp$="N"
		let tmp$="N"
		if p61$[26,26]="Y"
			dim imfilename$[30],imkey$[50],3%,rec_im
			let imfilename$="6/iminvindex"+str$(intco)
			Call FindF(imfilename$,tmp3)
			if tmp3<>0
				let ch_im=findchannel()
				try 
					ropen #ch_im,imfilename$
					let imkey$=" ",imkey$
					let imkey$[1,2]="PL"
					let imkey$[3,14]=pr.ProdCode$
					search #ch_im,3,1;imkey$,rec_im,e
					if not(e)
						if imkey$[1,2]="PL" and imkey$[3,14]=pr.ProdCode$
							let tmp$="Y"
						endif
					endif
				else
					! error in trying to get the data
				end try
			endif
		endif
		let webstr$=webstr$,tmp$,fdel$
		! vendor
		if pr.PrimVend<>0
			let keyvend$=pr.primvend using "######"
			search #ch_vend,2,1;keyvend$,rec_vend,e
			if e<>0
				let pr.primvend=0
			else
				read #ch_vend,rec_vend,0;vendname$;
			endif
		endif
		if pr.primvend<>0
			let webstr$=webstr$,str$(pr.primvend)," ",vendname$,fdel$
		else
			let webstr$=webstr$,"",fdel$
		endif
		List$[2]=WebStr$
		List$[3]=esdel$
		clear e$
		call AddToStr(e$,rstr$,List$[])
		! send the UM Lists NOW? (also sent in stockinq.dl4)
		Clear List$[]
		tmp$="QTY" ! pass it
		Call UMDList(e$,tmp$,PRC,PRR,List$[],IntCo,Pr.)
		If E$<>""
			  Let ReturnStatus=0
			  Message$=E$
		Endif
		List$[0]=bsdel$,"QTYUM",fdel$ ! change sectionname
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		! send alt items & superc/alt now
		Clear list$[]
		lIST$[0]=bsdel$,"ALTITEMS",fdel$
		List$[1]="ALTID",fdel$
		row=2
		tmp1$=" ",tmp1$;tmp1$[1,12]=prod$
		do
			Search #aic,3,2;tmp1$,R[1],E
			if e exit do
			if tmp1$[1,12]<>Prod$[1,12] exit do
			read #aic,r[1],0;cust;
			if cust=0 ! avail for all to use
				tmp$=tmp1$[13]
				list$[row]=RTrim$(tmp$),fdel$ ! just the altitem code
				row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
			Endif
		Loop
		! upc/alt - send if there
		Fle$="2/upcxref"+Str$(Intco)
		Call FindF(fle$,Found)
		if found
			CHan=Findchannel()
			ROpen #Chan,Fle$
			tmp1$=" ",tmp1$;tmp1$[1,12]=Prod$
			do
				search #chan,3,1;tmp1$,R[1],E
				if e or tmp1$[1,12]<>Prod$[1,12] exit do
				mat read #chan,r[1],58;upc3;
				if UPC3[3]
					let tmp$="UPC ",tmp1$[13,37]
				Else
					LET TMP$="ALT ",TMP1$[13,37] ! ALT/UPC
				Endif
				LIST$[ROW]=RTrim$(tmp$),fdel$ ! just alt/upc
				row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
			Loop
			Try close #chan Else Rem
		Endif ! upc/alt
		List$[row]=esdel$
		call AddToStr(e$,rstr$,List$[]) ! add droplist to string
		! send the supercede and prodfile alts
		Clear list$[]
		List$[0]=bsdel$,"SUBITEMS",fdel$
		List$[1]="TYPE",fdel$,"ID",fdel$,"DESC1",fdel$,"DESC2",fdel$
		row=2
		tmp1$=pr.SupersedeCode$+Blank$
		tmp1$[13]=""
		cprr=filegetprod(e$,PRC,"=",1,tmp1$,CPR.) ! product mode=2 dir=1
		if cprr>0
			WebStr$="SUP",fdel$,RTrim$(tmp1$),fdel$,RTrim$(cpr.desc1$),fdel$,RTrim$(cpr.desc2$),fdel$
			List$[row]=webstr$
			row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
		Endif
		tmp1$=RTrim$(pr.AltPart1$)+blank$
		tmp1$[13]=""
		cprr=filegetprod(e$,PRC,"=",1,tmp1$,CPR.) ! product mode=2 dir=1
		if cprr>0
			WebStr$="SUB",fdel$,RTrim$(tmp1$),fdel$,RTrim$(cpr.desc1$),fdel$,RTrim$(cpr.desc2$),fdel$
			List$[row]=webstr$
			row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
		Endif
		tmp1$=RTrim$(pr.AltPart2$)+blank$
		tmp1$[13]=""
		cprr=filegetprod(e$,PRC,"=",1,tmp1$,CPR.) ! product mode=2 dir=1
		if cprr>0
			WebStr$="SUB",fdel$,RTrim$(tmp1$),fdel$,RTrim$(cpr.desc1$),fdel$,RTrim$(cpr.desc2$),fdel$
			List$[row]=webstr$
			row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
		Endif
		List$[row]=esdel$
		clear e$
  else
    include "src/callsuberr.inc"
  end try
end sub ! sndprod
! 
!--------------------------------------------------------------------
Sub PBWind()
! 10 bracket price window
 Try
	Call "mx218bk.dl4",PRC,PWC,CCC,UMR,WHSE,PRR,PWR,SRC,IntCo,e$,List$[],maxcnt
 else
    include "src/callsuberr.inc"
  end try
end sub ! PBWind
! 
!--------------------------------------------------------------------
Sub FUTOLIST()
! generate a list of future orders
 Try
	dim rolkey$[60],SrtKey$[60]
	dim 2%,hlddate
	Dim 3%,OLR,OHR,STTL[6]
	dim roh. as roh ! order header
	dim ros. as ros ! order ship to file
	dim rot. as rot ! order total file
	dim rol. as rolnew ! order lines
	OHC=OpenFile(-1840,IntCo) \ if OHC=-1 Error 42
	OSC=OpenFile(-1856,IntCo) \ if OSC=-1 Error 42
	OTC=OpenFile(-1872,IntCo) \ if OTC=-1 Error 42
	OLC=OpenFile(-1888,IntCo) \ if OLC=-1 Error 42
	SRTC=buildsort(e$,20,0) ! build sort keylen=40 chars
	If SRTC<0
		ReturnStatus=0
		Message$="ERROR "+Str$(SRTC)+" building Sort File"
		Goto FOLDone
	Endif
	clear e$
	Clear List$[]
	tmpcnt=maxcnt
	List$[0]=bsdel$,"FUTORLIST",fdel$
	List$[1]="ORDERID",fdel$,"CUSTID",fdel$,"CUSTNAME",fdel$,"QTYOPEN",fdel$,"SHIPDATE",fdel$,"WHSE",fdel$
	row=2
	RolKey$=" ",RolKey$
	RolKey$[1,6]=PRR Using "######"
	Do
		OLR = filegetrolnew(e$,OLC,">",2,rolkey$,rol.)
		clear e$
		If OLR<0 Exit Do
		X2=RolKey$[1,6] \ if x2<>PRR Exit do
		If ROL.NStkItem=0
			let orderno=rolkey$[7,12]
			OHR=GetOrdRec(e$,OHC,OSC,OTC,OrderNo,roh.,ros.,rot.)
			clear e$
			If OHR>0 ! found it
				if whse if whse<>roh.Wh goto nxtline
				if roh.OrdType=5
					srtkey$=" ",srtkey$
					srtkey$[1,6]=roh.ShipDate using "&&&&&&"
					srtkey$[7,8]=roh.wh
					srtkey$[9]=OLR Using "########"
					srtkey$[17]=ohr using "########"
					Search #SRTC,4,1;SrtKey$,OHR,E
					if e>1
						ReturnStatus=0
						Message$="Search Error "+Str$(E)+" inserting Sort Key "+SrtKey$
					Endif ! ng
				Endif ! of it's ot 5
			Endif ! of found order
		Endif ! of stock item
	nxtline: ! bypass order
	Loop
	! sorted - now display
	SrtKey$=" ",SrtKey$
	HldDate=-1;Sttl[0]=0;sttl[1]=0
	Do
		Search #srtc,3,1;srtKey$,OHR,E
		if e exit do
		X2=SrtKey$[1,6] \ if hlddate=-1 let hlddate=x2
		if x2<>hlddate ! subtotals
			Webstr$="0",fdel$,"0",fdel$
			Webstr$=webstr$,"TOTALS FOR SHIP DATE",fdel$
			webstr$=webstr$,LTrim$(Sttl[0] using QMask$),fdel$
			Webstr$=Webstr$,"0",fdel$,"0",fdel$
			List$[row]=webstr$
			row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
			Sttl[0]=0
			hlddate=srtkey$[1,6]
		Endif
		OLR=srtkey$[9,16]
		try
			Read record #OLC,OLR,0;rol.;
		Else
			clear rol.
			goto nxtsline
		End try
		ohr=srtkey$[17,24]
		Try
			Read record #OHC,OHR,0;roh.;
		Else
			clear roh.
			goto nxtsline
		End try
		K1$=roh.custnum using "######"
		CUR=filegetcust(e$,CUC,"=",1,k1$,cust.)
		clear e$
		if CUR<=0
			clear cust.
			cust.name$="CUSTOMER NOT FOUND"
		Endif
		Webstr$=Str$(roh.OrdNum),fdel$,Str$(roh.CustNum),fdel$
		webstr$=webstr$,RTrim$(cust.name$),fdel$
		cnvtu[0]=0;cnvtu[1]=UMR;cnvtu[2]=1
		cnvta=rol.QtyOrd-rol.PrevQtyShip
		x3=ConvProdAmount(e$,CNVTU[],CNVTA,ctlc,FLAG,PR.)
		Webstr$=webstr$,LTrim$(X3 Using QMask$),fdel$
		Sttl[0]=sttl[0]+x3;sttl[1]=sttl[1]+x3
		tmp$=PDate$(roh.ShipDate)
		webstr$=webstr$,tmp$,fdel$,SrtKey$[7,8],fdel$
		List$[row]=webstr$
		row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	NxtSline: ! skipped
	Loop
	Webstr$="0",fdel$,"0",fdel$
	Webstr$=webstr$,"TOTALS FOR SHIP DATE",fdel$
	webstr$=webstr$,LTrim$(Sttl[0] using QMask$),fdel$
	Webstr$=Webstr$,"0",fdel$,"0",fdel$
	List$[row]=webstr$
	row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	Webstr$="0",fdel$,"0",fdel$
	Webstr$=webstr$,"TOTALS FOR LIST",fdel$
	webstr$=webstr$,LTrim$(Sttl[1] using QMask$),fdel$
	Webstr$=Webstr$,"0",fdel$,"0",fdel$
	List$[row]=webstr$
	row=row+1 \ If row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]=esdel$
	FOLDone: ! finito
	clear e$
	Try close #OHC Else rem
	Try close #OSC Else rem
	Try close #OTC Else rem
	Try close #OLC Else rem
 else
    include "src/callsuberr.inc"
  end try
end sub ! FUTOLIST
! 
!--------------------------------------------------------------------
Function GetOrdRec(e$,OHC,OSC,OTC,OrderNo,roh. as roh, ros. as ros, rot. as rot)
! search thru all status for Order
! ohc,osc,otc = channels for roh, ros, rot
! orderNo = Order # to find
! roh.,ros.,rot. = structs for roh,ros,rot
! returns 
! X3 = order header rec #
	Try
		Dim KOHC$[20]
		Dim 1%,X[9],SCHN[2]
		Dim 2%,X2[9]
		Dim 3%,X3[9],OHR
		SCHN[0]=OHC;SCHN[1]=OSC;SCHN[2]=OTC
		Let X2=OrderNo
		let OHR=-1 ! not found as default
		if debugdetail
			dmsg$="Look for Order "+Str$(X2) \ Call updatelog(debug)
		Endif
		For X=1 to 99
			If X<20 or x>24 ! skip deleted
				Let KOHC$=" ",KOHC$
				KOHC$[1,2]=X Using "##"
				KOHC$[3]=OrderNo Using "######"
				X3=filegetrohz(e$,SCHN[],"=",1,kohc$,roh.,ros., rot.)
				clear e$
				If X3>0 ! found it
				  Exit function X3
				Endif
			Endif
		Next X
		if debugdetail
			dmsg$="Order NOT FOUND "+Str$(X2) \ Call updatelog(debug)
		Endif
	else
    include "src/callsuberr.inc"
  end try
end Function OHR ! getordrec
! 
!--------------------------------------------------------------------