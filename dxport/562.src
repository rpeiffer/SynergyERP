! >>> Program 562
!
! description Accounts Payable Check Reconciliation List
! loadsave -w -n 100,10 -o prog/dxport/562.dl4 src/562.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN 24, 2009  10:13:34
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/ap/t.la562.src (univ2) [mary] {28299}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
Rem LA562 - M1020 CHECK RECONCILIATION VERIFICATION LIST
Rem          ********
Rem          UNIVERSAL BUSINESS SYSTEMS,INC.
Try ! If Err 0 Gosub ERR_TRAP
dim 1%,a5currid,3%,a5currfact
dim 1%,currpass
dim 1%,apbCURRID,3%,apbCURRFACT,keycurr$[30],currdesc$[30],2%,bnk_currid,3%,curr_rate,bankname$[30],k4$[20]
dim 1%,cnvcu[10],3%,cnvca[10]
dim 1%,oiCURRID,3%,oicurrfact
dim 1%,aph_CURRID,3%,aph_currfact
dim 3%,aphmerch,aphfreight,aphmisc,grossapamt,discapamt,netapamt,currvaramt,grosspayamt, discamt, checkamt
dim 3%,glexchamt,glexchacct
dim p61$[256],currdesc$[30]
DIM USR$[40],3%,UIDREC[1]
Dim 1%,X,Z6,E,C2[1]
Dim 2%,H,L1,P9,V1,A9,B9,C[2],W9,C9,DT3[1],X2
Dim 1%,F6[1],A3$[30],3%,T3
Dim 3%,C1,T2
Dim D2$[10],D3$[8],D8$[25],P1$[18],X$[10]
Dim K$[30],C$[30],F$[16],G8$[2],G9$[40],R2$[4],R$[20],V$[20]
Dim K18$[10],K49$[10],K50$[10],DV1$[12],DV2$[12],DV3$[12],J$[50]
Dim fname$[50],groupid$[1]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Mat Read #1,88,16;F$; \ Open #15,F$ ! a00ap
Mat Read #1,88,48;F$; \ Open #16,F$ ! acf
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNS(H) = Int(Abs(H) * 100) * .01 * Sgn(H) ! rounding to nearest penny

V8=0
Rem Check Reconciliation Flag 
Read #1,51,4;Z6;
If Z6 > 1 
	let eflag=eflag+1
	let message$= "CHECK RECONCILIATION IN PROGESS"
	Goto L_9020
endif
Z6 = 4
Write #1,51,4;Z6;
UIDREC = GetUIDRec(e$, intCo, userid$)
USR$ = GetUIDInfo$(e$,IntCo,UIDRec)

Call Time(D8$)

Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
G8$[1,1] = intco Using "#"
g8$[2,2]=groupid$

V$ = " ",V$
V$ = "20"
Search #15,2,1;V$,V1,E
If E <>0 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '20' Not On File. "
	let z6=0\Write #1,51,4;Z6;
	goto L_9020:
endif

Mat Read #15,V1,10;R$;
If R$[3,3]<> "0" 
	eflag=eflag+1
	message$="Check Register Must Be Accepted "
	let z6=0\Write #1,51,4;Z6;
	goto L_9020:
endif

L_945: V$ = " ",V$
V$ = " 0"
Search #15,2,1;V$,V1,E
If E <>0 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '0' Not On File. "
	let z6=0\Write #1,51,4;Z6;
	goto L_9020:
endif

Mat Read #15,V1,32;R$;
F$ = R$[13,13],"/","A50CR",G8$[1,2]
Ropen #2,F$
Mat Read #1,88,112;F$; \ Ropen #3,F$

mat read #1,61,0;p61$;
if p61$[136,136]="Y"
	ch_curr=OpenFile(9712,intCo) \ If Ch_curr = -1 Error 42 ! currency header file
endif


V$ = "10"
E = 0
Search #15,2,1;V$,V1,E
If E <>0 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '10' Not On File. "
	let z6=0\Write #1,51,4;Z6;
	goto L_9020:
endif
Mat Read #15,V1,2;R2$;
V$ = " ",V$
V$[3,6] = R2$[1,4]
Search #16,2,1;V$,V1,E
If E <>0 
	eflag=eflag+1
	message$="Error In A/P Control File. Client "+rtrim$(r2$[1,4])+" Not on File "
	let z6=0\Write #1,51,4;Z6;
	goto L_9020:
endif
Mat Read #16,V1,10;G9$;
if eflag <>0 goto L_9020:
Call dxget("PRPRT",tmp$) ! (NOT ADDED?)     
audonly = 0 \ If rtrim$(tmp$) <> "" Let audonly = 1 
let bnkchk=0
! Gosub L_2290 ! print page heading
K$ = "" \ F6 = 0
L_2010: E = 0
Search #2,3,1;K$,H,E
If E = 2 Goto L_2230
If E Gosub ERR_SEARCH
Mat Read #2,H,0;C;
Mat Read #2,H,12;C1;
Mat Read #2,H,18;C2;
Mat Read #2,H,22;C$;
Mat Read #2,h,54;a5currid; ! 9 CURRID                S        CURRID          2    54   
Mat Read #2,h,56;a5currfact; !  10 CURRENCY FACT         T        CURRFACT        6    56   
If C2[1] = 0 Goto L_2010
LET TMP3=K$[1,2] 
IF BANKCHK<>TMP3
	K4$ = tmp3 Using "##"
	bnk_currid=0
	bankname$=" ",bankname$
	currdesc$=" ",currdesc$
	curr_rate=0
	Search #3,2,1;K4$,R[3],E 
	if not(e)
		mat read #3,r[3],54;bnk_currid;
		mat read #3,r[3],2;bankname$;
		if p61$[136,136]="Y"
			let keycurr$=bnk_currid using "####"
			search #ch_curr,2,1;keycurr$,rec_curr,e
			if e<>0
				let currdesc$=" ",currdesc$
				let curr_rate=0
			else
				mat read #ch_curr,rec_curr,2;currdesc$;
				mat read #ch_curr,rec_curr,846;curr_rate;
			endif
		else
			let currdesc$=" ",currdesc$
			let curr_rate=0
		endif
	endif
	let bankchk=tmp3
endif

!!!!!
if not(p9) or L1>99 gosub L_2290
F6[1] = K$[1,2]
If F6<>0
	If F6[1] <> F6 Gosub L_3000
endif
If F6 <> F6[1] Gosub L_3100
F6 = F6[1]
If L1 > 48 Gosub L_2290
totrec=totrec+1
Print #0; Using "######"; Tab 2;C[1];
Print #0; Using "######"; Tab 12;C[0];
Print #0; Tab 25;C$;
X2 = C[2] \ Gosub L_7770
D3$ = X$[1,8]
Print #0; Tab 60;D3$;
if p61$[136,136]="Y" and curr_rate<>0 and a5currfact<>0
	let cnvcu[0]=1
	let cnvcu[1]=1
	let cnvca[0]=c1
	let cnvca[1]=a5currfact
	call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
	let c1=FNS(cnvca[0])
endif
Print #0; Using "####,###.##"; Tab 79;C1
T2 = T2 + C1
T3 = T3 + C1
L1 = L1 + 1
P1$ = C[1] Using "######"
Goto L_2010
L_2230: Gosub L_3000
IF P61$[136,136]<>"Y"
	If L1 > 48 Gosub L_2290
	Print #0; Tab 78;"------------"
	Print #0; Tab 35;" T O T A L  A M O U N T";
	Print #0; Using "##,###,###.##"; Tab 77;T2
	Print #0;" "
	Print #0;"\15\";" 562  - END -  ";
endif
Goto OUTEND
L_2290: Rem HEADINGS
If P9 Print #0;"\14\";
P9 = P9+1
IF P9=1
	gosub print_banner:
endif
Print #0;"     ";G9$;
If audonly <> 0 Print #0; Tab 81;"*PREVIEW*";
Print#0;""
Print #0;" A/P CHECK RECONCILIATION VERIFICATION LIST ";
Print #0; Tab 50;D8$[1,15]
Print #0;"Bank: ";bankchk;"  ";bankname$[1,30]
if p61$[136,136]="Y" and bank_currid<>0
	print #0;"Currency: ";currdesc$[1,30]
else
	Print #0;" "
endif
Print #0; Tab 2;"CHECK #"; Tab 12;"VENDOR #"; Tab 25;"VENDOR NAME";
Print #0; Tab 60;"DATE"; Tab 84;"AMOUNT"
L1 = 0
if p9=1
	let ll=2
endif
Return 

Print_banner:
Print #0;d8$; ! time stamp
Print #0;tab 35; "USER: ";usr$[21,40];
Print #0;using "##"; tab 65; "COMP: ";intco;
Print #0;TAB 80;"SEL: 562"
print #0;""
return

L_3000: Rem PRINT BANK TOTALS
If L1 > 48 Gosub L_2290
Print #0; Tab 78;"------------"
Print #0; Tab 35;" BANK TOTAL AMOUNT";
Print #0; Using "##,###,###.##"; Tab 77;T3
L1 = L1 + 2
T3 = 0
Return 
L_3100: Rem PRINT BANK NAME
A3$ = "BANK NOT ON FILE!!!"
V$ = F6[1] Using "##"
Search #3,2,1;V$,V1,E
If E = 1 Goto L_3150
If E Gosub ERR_SEARCH
Mat Read #3,V1,2;A3$;
L_3150: If L1 > 48 Gosub L_2290
Print #0;" "
Print #0; Using "##  ";"BANK:  ";F6[1];A3$
Print #0;""
L1 = L1 + 3
Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_7770: Rem DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 


ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem END
if audonly=0 ! 
	let z6=1\Write #1,51,4;Z6; ! 
else
	let z6=0\Write #1,51,4;Z6;
endif
L_9020: ! Close 
!Chain "MX000"
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		let message$=message$+"There are no reconciled checks available to list"
		message$=message$+"."
	else
		Let message$=message$+" "+str$(totrec)+" Reconciled Check(s) Listed"
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program