! >>> Program mx671brk5.dl4
!
! description converted call from unibasic MX671BRK5
!
! loadsave -w -n 10,10 -o prog/dxport/mx671brk5.dl4 src/mx671brk5.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Declare External Function GetParameter$
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR 29, 2003  14:35:22
Rem /w/papermaster/r2002//usr/acct/txc/work/r2002/mx/mx671brk5.src (univ2) [txc] {38929}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX671BRK5 - CALC LOAD & LIST   >=UB5
Rem AUTHOR : DAVE DEVITO
Rem "LAST UPDATE:  roman 01/31/1994.  add gross margin calc
!
Declare Intrinsic Sub InpBuf,String
declare intrinsic function FindChannel
!
Enter PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,C4[],FIELD,BASE,e$,rstr$
!
If Err 0 Gosub ERR_TRAP
Def FNA(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNB(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNC(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim 1%,M5[5,4],M8,CH_PM
Dim 2%,Q0[1],B1
Dim 3%,M7,UWORK[10],M6[5,3]
Dim J1$[16],P9$[50],tmp$[40]
!
dim buttonlist$[5,50],nextlist$[5,100] ! dxport
!
! - CHNL = 97
COID = GetParameter$("S_USER.APPID")
If Field<1 Or Field>6 Goto OutExit: ! "1 to 6 ONLY!!
Let B1=Field-1 ! so becomes 0 to 5
If B1<0 Or B1>5 goto OutExit: ! "NO GOOD - 0 to 5 ONLY
! - Gosub GETCHAN
CH_PM = FindChannel()
!
!Read #1,88,2720;J1$;
J1$="2/SPRICEMARK"+STR$(COID)
Ropen #CH_PM,J1$
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2

B4 = C4[3] ! (FIELD * 1000) - 1000 + C4[3]
If B4 <= 0 Goto OUTEND ! no table zero
Mat Read #CH_PM,B4,18;M5;
Mat Read #CH_PM,B4,78;M6;
CNVTU[0] = 0 \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2 \ CNVTA = BASE
Gosub L_20000 \ M7 = AMOUNT
For M8 = 0 To 3
  If Not(M6[B1,0]) Let M7 = 0
  If Not(M6[B1,M8]) Goto L_5780
  If M5[B1,M8] = 1 Let M7 = M7 + (M6[B1,M8])
  If Not(M5[B1,M8]) Let M7 = M7 + (M7 * (M6[B1,M8] / 100))
  If M5[B1,M8] = 2 Let M7 = (M7 / (100 - M6[B1,M8])) * 100
Next M8
L_5780: 
CNVTA = M7 \ Goto L_5785
If P9$[42,42] = "N" Let CNVTA = FNA(M7)
If P9$[42,42] = "T" Let CNVTA = FNB(M7)
If P9$[42,42] = "U" Let CNVTA = FNC(M7)
L_5785: Rem CLOSE #ch_pm
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
Gosub L_20000 \ M7 = AMOUNT
CNVTA = M7
FLAG = X2
!
OUTEND: 
Close #CH_PM 
OutExit: ! invalid data!
End 
! -Stop 
!
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 2%,X1[9],Q0[1]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: 
BUNIT = 0
!
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
e$="Error in mx671brk5.dl4" \ error 10000
!
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Goto L_20330
  If CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: 
Next X1[1]
FLAG = 0
Goto L_20650
!
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Goto L_20460
  If CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 
  Goto L_20650
L_20450: 
  If CUNIT = 0 Goto L_20530
L_20460: 
  If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_20510: ! NOT CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Goto L_20530
  End If 
  If CNVTU[X1[1]] = -3 ! "catch wgt Not per 100
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Goto L_20530
  End If 
L_20510: 
  If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
  If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
L_20530: 
Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: 
If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: 
FLAG = 0 
goto L_20650
!
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 
!
! - Rem {begin src/inc/rtn.getchan.s}
! - GETCHAN: Rem search for open channel (counts down from supplied chnl #)
! - For SCR = CHNL To 1 Step -1
! -   CHNL = SCR
! -   Gosub CHNLFREE
! -   If CHNLFREE
! -     SCR = 1
! -   Else 
! -     CHNL = 0
! -   End If 
! - Next SCR
! - Return 
! - CHNLFREE: Rem check to see if a channel is being used
! - If Err 0 Let CHNLFREE = Spc(8)
! - CHNLFREE = 0
! - CHNLSCR = Chf(CHNL)
! - If Err 0 Gosub ERR_ESCAPE
! - If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
! - END_CHNLFREE: Rem
! - Return 
!
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callsuberr.inc"
End 
