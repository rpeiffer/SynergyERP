!PODELETE -- DELETE Purchase Order
!! **** Originally From podelete *****
!loadsave -w -n 100,10 -o prog/dxport/podelete.dl4 src/podelete.src
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 30, 2001  12:13:53
Rem /usr/acct/r97//usr/acct/txc/work/devl/po/po361e.src (univ2) [txc] {47438}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc" ! dx
Declare Intrinsic Sub InpBuf,Logic,String
!Option Default Dialect IRIS1
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault
Declare External Function OpenFile,PDate$,FormatDate2$,OpenMySQLMirror
include "src/inc/sql_prod.inc"

Rem PO361E  PURCHASE ORDER DELETE MODULE
Rem  AUTHOR: G.DOSCHER   8/07/85
Rem  LAST UPDATE: mtg 5/93 expanded pofleh & poflel files
Try
Enter Chan[],spec[],msg$,errtype,rstr$
! dxgets needed for # of order lines to copy, order line num, # order message line copy, order msg line #
!! call parameters are as follows
! spec variable is the same of the s9 -- except added spec[10] for the company # 

	
!spec[0] = purchase order record #
!spec[1] = vendor record # 

!Spec[10] = Company #

!chan[0] = cntrl file	*
!chan[1] = purchase order header  #8 *	
!chan[2] = purchase order lines   #9*
!chan[3] = order header  *
!chan[4] = product file #3 *
!chan[5] = product warehouse #10 *
!chan[6] = nonstock #14 *
!chan[7] = unit of measure file #67
!chan[8] = order lines  * 
!chan[9] = po messages *
!chan[10] = order message #70
!chan[11] = po gen work #72
!chan[12] = deals #19
!chan[13] = customer
!chan[14] = order total
!chan[15] = altvend
!chan[16] = a80vm  - vendor file #5 

dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Dim 1%,E,E1[24],H4[3],K1,L1[5],W0[3],WH8[4],X1,FLAG[11],POMISC[2],debitmemoflag
Dim 2%,C1[6],H0[5],H3[4],L2[2],X2[9],F1$[16],OLL4[3],K1$[50]
Dim 2%,SOPO
Dim 3%,H8[9],L3[6],Q9,R0,R2,R4,R8,R9,W3[14],X3[9],A[33],PL4[16]
Dim A$[156],U5$[50],X$[12],K99$[50],P60$[50]
Dim NSD$[96],1%,NSD1[7],2%,NSD2[4],3%,NSD3[9],N5$[50],L1$[104],K2$[50]
DIM 1%,COST_LEV[3],2%,S9[9],J4$[50]
DIM A9$[60],I9$[60],K5$[60],RLTKey$[60]                 
DIM S0$[36],LOC$[6],1%,S1[3],3%,S5[5],P4[4],v1,r17
Dim 3%,R[99]
dim key_posn1$[60],key_posn2$[60],key_sn$[60],3%,rec_posn,rec_sn,rec_tmp
dim sn1$[54],2%,sn0[1],1%,sn1[2]
dim 3%,r10
dim 3%
! FILES
let intco=spec[10] ! set the company #
for ctr=0 to 9
	let s9[ctr]=spec[ctr]
next ctr
! openfiles 
if not (chan[0]) ! cntrl file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
if not (chan[1]) ! purchase order header  #8
	 Ch_Poh = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
else
	ch_poh=chan[1]
endif
if not (chan[2]) ! po lines #11
	Ch_PoL = openfile(2432,intCo) \ If Ch_Pol = -1 Error 42     !"po lines file
else
	let ch_pol=chan[2]
endif
if not (chan[3]) ! order header 
	 Ch_Roh = openfile(1840,intCo) \ If Ch_Roh = -1 Error 42     !order  header file --- *
else
	let ch_roh=chan[3]
endif
if not (chan[4]) ! product file #3
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file --- *
else
	let ch_prod=chan[4]
endif
if not (chan[5]) ! product warehouse #10
	Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
else
	let ch_prwh=chan[5]
endif
if not (chan[6]) !  nonstock #66
	ch_nstk=OpenFile(2448,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
else
	let ch_nstk=chan[6]
endif
if not (chan[7]) ! unit of measure file #67
	Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file
else
	let ch_ccode=chan[7]
endif
if not (chan[8]) ! order lines *
	ch_rol=OpenFile(1888,intCo) \ If Ch_rol = -1 Error 42 ! order line
else
	let ch_rol=chan[8]
endif
if not (chan[9]) ! po messages #11
	Ch_Pom = openfile(2464,intCo) \ If Ch_Pom = -1 Error 42     !"po message file
else
	let ch_pom=chan[9]
endif
if not (chan[10]) ! order message #70
	Ch_Rom = openfile(1968,intCo) \ If Ch_Rom = -1 Error 42     !order  message file
else
	let ch_rom=chan[10]
endif
if not (chan[11]) ! po gen work #72
	ch_pogen=OpenFile(2752,intCo) \ If Ch_pogen = -1 Error 42 ! ch_pogenwrk file
else
	ch_pogen=chan[11]
endif
If not (chan[12]) ! deals #19
	ch_deal=OpenFile(864,intCo) \ If Ch_deals = -1 Error 42 ! deals file
else
	let ch_deal=chan[12]
endif
If not (chan[13]) ! customer file
	ch_cust=OpenFile(1808,intCo) \ If Ch_cust = -1 Error 42 ! customer file
else
	let ch_cust=chan[13]
endif
If not (chan[14]) ! order total
	 Ch_Rot = openfile(1872,intCo) \ If Ch_Rot = -1 Error 42     !"order total file
else      
	let ch_rot=chan[14]
endif
If not (chan[15]) ! alt vend
	ch_alt=OpenFile(-1568,intCo) \ If Ch_alt = -1 Error 42 !alternate vendor code
else
	let ch_alt=chan[15]
endif
If not (chan[16]) ! vendor
	ch_vend=OpenFile(2400,intCo) \ If Ch_vend = -1 Error 42 ! vendor code * 
else
	let ch_vend=chan[16]
endif
ch_sordlot = OpenFile(2320,intco) \ If ch_sordlot = -1 Error 42
ch_sprodlot = OpenFile(2528,intco) \ If ch_sprodlot = -1 Error 42
CH_POLTAG=OPENFILE(9936,IntCo) \ if ch_poltag=-1 let CH_POLTAG=0
sqlChan = OpenMySQLMirror(e$)
R8 = SPEC[0] ! S9[0]
Mat Read #ch_poh,R8;H0;
Mat Read #ch_poh,R8,222;H3;
Mat Read #ch_poh,R8,242;H4;
Mat Read #ch_poh,R8,250;H8;
Mat Read #ch_vend,H0[1],264;C1;
Mat Read #ctlc,60,50;P60$;
debitmemoflag=0
if h0>10 and h0<14 let debitmemoflag=99
If h0=97 let debitmemoflag=99
L_1030: Rem LINES
U5$ = H0[2] Using "######"
Search #ch_pol,3,1;U5$,R9,E
If E Goto L_1500
X2 = U5$[1,6]
If X2 <> H0[2] Goto L_1500
Mat Read #ch_pol,R9;L1
Mat Read #ch_pol,R9,12;L2
Mat Read #ch_pol,R9,24;L3;
Mat Read #ch_pol,R9,232;PL4;
Mat Read #ch_pol,R9,376;POMISC;
Gosub L_5800 ! unpack flags
If Not(FLAG[2])
	if debitmemoflag<>0
		gosub L_6600: ! delete sordlot
	endif
	Gosub L_5000
endif
if debitmemoflag<>0 gosub DELSERNUM: ! delete serial number
If PL4[10] And PL4[11] Gosub L_6500 ! links to sales order
if ch_poltag gosub delpoltag ! file open - delete poltag
J4$ = L3[1] Using "######"
J4$[7] = H0[2] Using "######"
J4$[13] = L1[2] Using "###"
If Not(FLAG[2]) 
	Search #ch_pol,5,2;J4$,R2,E
	if e<>0
		let msg$=msg$+" Error in Deleting Line "+str$(L1[2])+" on PO# "+str$(h0[2])+"."
		let errtype=99
		goto outend:
	endif
endif
U5$ = J4$[7]
Search #ch_pol,5,1;U5$,R9,E
if e<>0
	let msg$=msg$+" Error in Deleting Line "+str$(l1[2])+" on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif
E = 3 \ Search #ch_pol,1,0;U5$,R9,E 
if e<>0
	let msg$=msg$+" Error in Deleting Line "+str$(L1[2])+" on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif
Goto L_1030
L_1500: Rem PO CHANGE LEVEL LINES
Ch_tmp = openfile(2480,intCo) ! po level file
if ch_tmp<>-1
	U5$ = " ",U5$;U5$ = H0[2] Using "######"
	L_1530: Search #ch_tmp,3,1;U5$,V1,E \ If E Goto L_1580
	X2 = U5$[1,6] \ If X2 <> H0[2] Goto L_1580
	Search #ch_tmp,5,1;U5$,V1,E
	if e<>0
		let msg$=msg$+" Error in Deleting Po Levels on PO# "+str$(h0[2])+"."
		let errtype=99
		goto outend:
	endif
	E = 3\Search #ch_tmp,1,0;U5$,V1,E 
	if e<>0
		let msg$=msg$+" Error in Deleting PO Levels on PO# "+str$(h0[2])+"."
		let errtype=99
		goto outend:
	endif
	Goto L_1530
	L_1580: Close #ch_tmp
endif
Goto L_2000
L_2000: Rem HEADER
Gosub L_3500
Gosub L_7000
U5$ = H0 Using "##"
U5$[3] = H0[2] Using "######"
Search #ch_poh,5,1;U5$,R8,E 
if e<>0
	let msg$=msg$+" Error in Deleting Header Info on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif
U5$ = C1[1] Using "######"
U5$[7] = H0[2] Using "######"
Search #ch_poh,5,2;U5$,R8,E
if e<>0
	let msg$=msg$+" Error in Deleting Header Info on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif

E = 3 \ Search #ch_poh,1,0;U5$,R8,E
if e<>0
	let msg$=msg$+" Error in Deleting Header Info on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif

For K1 = 1 To 2
L_2520: U5$ = " ",U5$ \ U5$ = K1 * 10 ^ 6 + H0[2] Using "#######"
  Search #ch_pom,2,1;U5$,R4,E
  If E Goto L_2610
  Search #ch_pom,5,1;U5$,R4,E 
  if e<>0
	let msg$=msg$+" Error in Deleting Message on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
  endif
  E = 3 \ Search #ch_pom,1,0;U5$,R4,E 
  if e<>0
	let msg$=msg$+" Error in Deleting Message on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
  endif
  Goto L_2520
L_2610: Next K1
Goto OUTEND

L_3000: Rem CHECK FOR SALES ORDER LINE FOR NON STOCK
ORD = NSD$[1,6]
LINE_ = NSD$[8,10]
K1$[1,6] = ORD Using "######"
K1$[7,10] = LINE_ Using "### "
Search #ch_rol,2,1;K1$,R99,E 
If not(e)
	Mat Read #ch_rol,R99,16;OLL4
	If OLL4[2] = H0[2]  ! was <> ?? if oline po = po change to zero!
		OLL4[2] = 0 ! BAD recode of orig po361e - was if po's <> to bypass change
	endif
	Mat Write #ch_rol,R99,16;OLL4;
endif
Return 

L_3500: Rem NO MORE LINES IN WORKFILE - Delete PO GEN File PO
if debitmemoflag<>0 return
K2$ = " ",K2$
K2$ = H4[1] Using "##" \ K2$[3] = H3[3] Using "######"
If S9[9] = 1 Let K2$[9] = "   0@" \ Gosub CONTAPODEL
If S9[8] And S9[7] <= S9[8]
  For X2 = S9[7] To S9[8]
    K2$ = " ",K2$
    K2$ = H4[1] Using "##" \ K2$[3] = H3[3] Using "######"
    K2$[9,12] = X2 Using "####";K2$[13] = "@"
    Search #ch_pogen,2,1;K2$,R2,E \ If E = 0 Gosub CONTAPODEL
  Next X2
End If 
return
CONTAPODEL: Rem "
R0 = K2$[17] \ If R0 <> H0[2] Return 
Search #ch_pogen,2,1;K2$,R2,E \ If E Return 
Search #ch_pogen,5,1;K2$,R0,E
if e<>0
	let msg$=msg$+" Error in Deleting Po Gen on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif

E = 3 \ Search #cb_pogen,1,0;K2$,R2,E 
if e<>0
	let msg$=msg$+" Error in Deleting Po Gen on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif
Return 

L_5000: Rem ADJUST ON ORDER PO
Call Logic(1,2 ^ 0,L1[3],X1)
If X1 Gosub L_6000 \ Goto L_5140
If Not(POMISC[0]) Goto L_5140
Q9 = L3[2] - L3[3]
if debitmemoflag<>0
	let q9=L3[4]+pl4[16]
endif
If Q9 < 0 Let Q9 = 0
Mat Read #ch_prod,L3[1];A$
Mat Read #ch_prod,L3[1],256;A
if not(debitmemoflag)
	A[2] = A[2] - Q9 \ If A[2] < 0 Let A[2] = 0
else
	A[3] = A[3] - Q9 
endif
Mat Write #ch_prod,L3[1],256;A;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, a$[140,151], sqlChan, ch_prod)
	if e <> 1 ! returns the number of records add/updated/deleted
		gosub ERR_SEARCH
	end if
end if
U5$ = A$[140,151] \ U5$[13] = L1[1] Using "##"
Search #ch_prwh,2,1;U5$,R10,E
If E<>0 return ! 
Mat Read #ch_prwh,R10,78;W3
if not(debitmemoflag)
	W3[1] = W3[1] - Q9 \ If W3[1] < 0 Let W3[1] = 0
else
	W3[2] = W3[2] - Q9
endif
Mat Write #ch_prwh,R10,78;W3;
L_5140: Return 
L_5800: Rem UNPACK L1[3] TO FLAG[x]
X2 = L1[3] \ For K = 0 To 11
  FLAG[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
X2 = 0 \ For K = 0 To 11
  If FLAG[K] Let X2 = X2 + 2 ^ K
Next K \ L1[3] = X2 \ Return 
L_6000: Rem REMOVE NON STOCK
Gosub L_6300
X1 = 0
L_6040: N5$ = NSD$[1,12] \ N5$[13] = X1 Using "##"
N5$[15] = ""
Search #ch_nstk,2,1;N5$,R14,E 
If E
  X1 = X1 + 1 \ If X1 > 99 Goto L_6210
  Goto L_6040
End If 
If L3[1] <> R14 Let X1 = X1 + 1 \ Goto L_6040
Search #ch_nstk,5,1;N5$,R14,E
if e<>0
	let msg$=msg$+" Error in Deleting Nonstock Item "+rtrim$(nsd$[1,12])+" on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif
E = 3 \ Search #ch_nstk,1,0;N5$,R14,E 
if e<>0
	let msg$=msg$+" Error in Deleting Nonstock Item "+rtrim$(nsd$[1,12])+" on PO# "+str$(h0[2])+"."
	let errtype=99
	goto outend:
endif
Gosub L_3000
L_6210: Return 
L_6300: Rem READ NSTKDESC
Mat Read #ch_nstk,L3[1];NSD$
Mat Read #ch_nstk,L3[1],96;NSD1
Mat Read #ch_nstk,L3[1],112;NSD2
Mat Read #ch_nstk,L3[1],132;NSD3
Return 

L_6500: Rem CHECK FOR SALES ORDER LINE FOR NON STOCK
K1$[1,6] = PL4[10] Using "######"
K1$[7,10] = PL4[11] Using "### "
Search #ch_rol,2,1;K1$,R99,E 
If not(E) 
	Mat Read #ch_rol,R99,16;OLL4
	If OLL4[2] = H0[2] ! WAS <>?? - if oline po = po - zero it!
		OLL4[2] = 0 ! BAD recode of orig po361e - was if po's <> to bypass change
	endif
	Mat Write #ch_rol,R99,16;OLL4;
endif
Return 

L_6600: ! DELETE LOTS                                                           
IF NOT (POMISC[0]) RETURN  ! "no update 
IF NOT(DEBITMEMOFLAG) RETURN
LET A9$=" ",A9$ \ LET A9$=H0[2] USING "######" \ LET A9$[7]=L1[2] USING "###"   
LET A9$[10]=L1[1] USING "##" \ LET I9$=A9$                                      
SEARCH #ch_sordlot,2,3;A9$,V1,E \ IF E>1 GOSUB Err_Search:                              
IF NOT (E) GOTO L_6640:                                                           
L_6630: SEARCH #ch_sordlot,3,3;A9$,V1,E \ IF E>2 GOSUB Err_Search:                      
IF E RETURN  ! "eof                                                             
L_6640: IF A9$[1,11]<>I9$[1,11] RETURN  ! "order/line/whse changed              
IF A9$[30,32]="KIT" GOTO L_6630: ! "kits deleted separately                     
IF A9$[40,40]<>"4" GOTO L_6630: ! NOT A DEBIT MEMO                              
LET I9$=A9$ \ LET R17=V1                                                        
MAT  READ #ch_sordlot,V1;S0$; \ MAT  READ #ch_sordlot,V1,60;S5;                                 
MAT  READ #ch_sordlot,V1,106;LOC$; \ MAT  READ #ch_sordlot,V1,36;S1;                            
IF S1[1]<>4 GOTO L_6630:                                                        
LET A9$=" ",A9$ \ LET A9$[1,2]=L1[1] USING "##" !rel qty in prodlot             
LET A9$[3,8]=LOC$[1,6] \ LET A9$[9,32]=S0$[1,24]                                
SEARCH #ch_sprodlot,2,3;A9$,V1,E \ IF E>1 GOSUB Err_Search:                              
IF E GOTO L_6705:                                                               
MAT  READ #ch_sprodlot,V1,82;P4                                                          
LET P4[3]=P4[3]-S5[1] \ IF P4[3]<0 LET P4[3]=0 ! "qty allocated                 
LET P4[4]=P4[4]-S5[3] \ IF P4[4]<0 LET P4[4]=0 ! "qty b'ord                     
MAT  WRITE #ch_sprodlot,V1,82;P4;                                                        
L_6705: LET K5$=" ",K5$ \ LET K5$[1,12]=S0$[13,24] \ LET K5$[23,39]=I9$[1,17]   
LET K5$[40,51]=S0$[1,12] \ LET K5$[52,52]="4" \ LET V1=R17 \ LET A9$=I9$        
SEARCH #ch_sordlot,5,3;A9$,V1,E \ IF E GOSUB Err_Search: !delete ordlot                 
SEARCH #ch_sordlot,5,2;K5$,V1,E \ IF E GOSUB Err_Search:                                
LET K5$=" ",K5$                                                                 
LET K5$[1,12]=S0$[1,12];K5$[13,29]=I9$[1,17];K5$[30,41]=S0$[13,24]              
LET K5$[52,52]="4"                                                              
SEARCH #ch_sordlot,5,1;K5$,V1,E                                                         
IF E GOSUB Err_Search:                                                          
LET V1=R17                                                                      
LET E=3 \ SEARCH #ch_sordlot,1,0;K5$,V1,E \ IF E GOSUB Err_Search:                      
LET A9$=I9$                                                                     
GOTO L_6630: 


DELSERNUM: ! DELETE SERIAL NUMBERS FOR DEBIT MEMOS
IF nOT(DEBITMEMOFLAG) RETURN
IF FLAG[0]<>0 RETURN ! NONSTOCK LINE
IF FLAG[2]<>0 RETURN ! MESSAGE LINE
IF POMISC[0]=0 RETURN ! STOCK UPDATE LINE
Mat Read #ch_prod,L3[1];A$
IF A$[8,8]<>"Y" return ! not a serial number product
Try
 IF CH_POSN<>0 close #ch_posn
 IF CH_SN<>0 close #ch_sn
else
end try
ch_posn = OpenFile(2944,intCo) \ If ch_posn = -1 Error 42 !control ! for debit memos -- this is the sales order file using
ch_sn = OpenFile(416,intCo) \ If ch_sn = -1 Error 42 !control
let key_posn1$=" ",key_posn1$
let key_posn1$[1,6]=H0[2] using "######"
let key_posn1$[7,9]=l1[2] using "###"
do
	search #ch_posn,3,1;key_posn1$,rec_posn,e
	if e<>0 exit do
	let tmp3=key_posn1$[1,6]
	if tmp3<>h0[2] exit do
	let tmp3=key_posn1$[7,9]
	if tmp3<>l1[2] exit do
	mat read #ch_posn,rec_posn,0;sn1$;
	mat read #ch_posn,rec_posn,54;sn0;
	let key_sn$=" ",key_sn$
	let key_sn$[1,30]=SN1$[25,54]
	srchsn: ! 
	search #ch_sn,3,1;key_sn$,rec_sn,e
	if e<>0 goto endsrchsn:
	if key_sn$[1,30]<>sn1$[25,54] goto endsrchsn:
	mat read #ch_sn,rec_sn,290;sn1;
	if sn1[2]=3
		let sn1[2]=0
		mat write #ch_sn,rec_sn,290;sn1;
	endif
	endsrchsn:! 
	let key_posn2$=" ",key_posn2$
	let key_posn2$[1,30]=SN1$[25,54]
	let key_posn2$[31,36]=l3[1] using "######"
	search #ch_posn,5,2;key_posn2$,rec_tmp,e
	! if e
	search #ch_posn,5,1;key_posn1$,rec_tmp,e
	if not(e)
		let e=3\search #ch_posn,1,0;key_posn1$,rec_posn,e
		! if e 
	endif
loop
Try
 close #ch_posn
 close #ch_sn
 let ch_posn=0
 let ch_sn=0
else
end try
RETURN

L_7000: Rem CHECK FOR SALES ORDER COPIED FROM
If not(debitmemoflag)
	If Not(H3[4]) Return 
	SOPO = 0
	For ST = 1 To 7
	 K99$[1,2] = ST Using "##"
	K99$[3] = H3[4] Using "######"
	Search #ch_roh,2,1;K99$,R99,E
	If Not(E) Read #ch_roh,R99,112;SOPO
	If Not(E) If SOPO <> H0[2] Goto L_7110
	If Not(E) Let SOPO = 0 \ Write #ch_roh,R99,112;SOPO; \ Goto L_7110
	Next ST
	L_7110: ! end of search of sales orders
	Return
else
	! debit memo check po # copied ! 	L_7000: ! CHECK FOR PURCHASE ORDER COPIED FROM  
	IF PH[1] RETURN  ! from a credit memo           
	if not (h3[4]) return ! no po #                   
	LET K99$[1,6]=H3[3] USING "######"              
	LET K99$[7,12]=h3[4] USING "######"             
	SEARCH #ch_poh,2,2;K99$,R99,E \ IF E RETURN          
	READ #ch_poh,R99,314;SOPO; \ IF SOPO<>h3[4] RETURN   
	LET SOPO=0 \ WRITE #ch_poh,R99,314;SOPO;             
	RETURN  
endif
return
DelPOLTag: ! delete po line tag index
RLTKey$=U5$ ! line dir 1 key
Search #CH_POLTAG,2,1;RLTKey$,R[88],E
if e Return
Search #ch_PolTag,5,1;RLTKey$,R,E
let E=3;r=r[88]
Search #ch_poltag,1,0;RLTKey$,R,E
Return
OUTEND: Rem EXIT
! If Err 0 Rem
! close files opened in the prog
if not (chan[0]) and ctlc<>1 close #ctlc ! cntrl file
if not (chan[1]) close #ch_poh ! purchase order header  #60
if not (chan[2]) close #ch_pol ! po lines #61
if not (chan[3]) close #ch_roh ! order header #62
if not (chan[4]) close #ch_prod ! product file #64
if not (chan[5]) close #ch_prwh! product warehouse #65
if not (chan[6]) close #ch_nstk!  nonstock #66
if not (chan[7]) close #ch_ccode! unit of measure file #67
if not (chan[8]) close #ch_rol ! order lines #68
if not (chan[9]) close #ch_pom! po messages #69
if not (chan[10]) close #ch_rom ! order message #70
if not (chan[11]) close #ch_pogen ! po gen work #72
If not (chan[12]) close #ch_deal ! deals #19
If not (chan[13]) close #ch_cust ! customer file
If not (chan[14]) close #ch_rot ! order total
if not (chan[15]) close #ch_alt ! alternate vendor
if not (chan[16]) close #ch_vend ! vendor file
Try close #ch_sordlot else rem 
If ch_poltag>0 try close #ch_poltag else Rem
if sqlChan >= 0 try close #sqlChan else rem
!if err 0 gosub err_trap:
parm[2] = 99 ! s9[2]
Else
	include "src/callmainerrnet.inc"
end try
End ! the whole program

Stop 
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
Stop 
Rem {end rtn.error.s}
