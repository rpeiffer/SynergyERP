! --- serp308.dl4
! Bank Account maintenance program converted from 
!
! 1.0 10/28/2009 - initial conversion
!
!loadsave -w -n 100,10 -o prog/dxport/serp308.dl4 src/serp308.src
!
! From the original code:
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB 21, 2008  12:35:19
Rem /w2/papermaster/r2005//usr/acct/jliu/work/r2005/mx1/mx133.src (univ2) [jliu] {15170}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
!
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"
!
Declare Intrinsic Sub InpBuf,String,checknumber
Declare Intrinsic Sub FindF
! Option Default Dialect IRIS1
!
! *declare additional external libs & subs & functions
External Lib "libdroplist.lib"
Declare External sub OtherCashDropList
External Lib "ubsfunc.dl4"
Declare External Function openfile
!Declare External Function openfile,pdate$,jdate$,Formatdate2$
Declare Intrinsic function findchannel


declare sub getwhsename, getcustname, getodiscname
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
dim fname$[16],whdesc$[30]
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[5000] ! .net delimiters
dim tmp$[3200],tmp2$[500],b$[200]
b$=" ",b$
dim message$[150],webstr$[5000]
!
! call dxopen()
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
call dxsave(0,"/tmp/md.in!")
! If Err 0 Gosub ERR_TRAP
Dim BCOMPID$[36],PYSRC$[4]
dim 1%,currid,currdesc$[30]
dim 2%,custid,custname$[30],keycust$[30],3%,rec_cust
dim 2%,whid,whname$[30]
dim 2%,odiscid,odiscname$[22]
DIM 1%,C[17],CLFLAG,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],Y,R1,K1,P0[1]
DIM 2%,B1[6],W,X,X1,K,C9,E,ST[1],CLIENT,S1[8],R[23],I3,LASTCRNUM
DIM 3%,J1,X2,G1,B[17],o1
DIM B1$[20],J$[50],J0$[15],J1$[50],J2$[20],J4$[50],J5$[70],J7$[40],P60$[50]
DIM J9$[50],U5$[50],F$[16],X$[20],K1$[25],D$[30],G$[36]
DIM CLIENT$[4],G9$[140],P8$[7],G8$[2],K7$[30],L9$[2],o$[24]
dim clientname$[40],k$[30]
DIM 2%
Dim P9$[50],C$[36],P60$[50],P61$[256],RTYPE$[1]
dim 1%,tx9[1]
Dim 1%,tcb,2%,K,MaxNew
dim 3%,tmp3
Dim custom_customer$[30]
dim List$[5000,1000]
! open files, read system flags, etc.


mat read #1,61,0;p61$;
MAT  READ #1,19,50;P9$; \ MAT  READ #1,52,60;P8$; \ MAT  READ #1,51,0;C;
MAT  READ #1,60,50;P60$; \ MAT  READ #1,52,0;S1;
MAT  READ #1,20,34;LASTCRNUM; 
READ #1,88,1456;F$;
OPEN #2,F$
LET maxnew=CHF(2)-1
IF maxnew>99 LET maxnew=99
let clflag=0
IF P9$[17,17]="M" or P9$[17,17]="Y" 
	READ #1,88,176;F$; \ OPEN #4,F$ 
	IF C[3]<>0 ! MULTI CLIENT
		IF P8$[7,7]="D" 
			MAT  READ #1,88,48;F$; \ OPEN #7,F$ !ACF FILE
			LET CLFLAG=99
			CLOSE #4
		endif
	endif
endif
if p61$[139,139]="Y"
	let f$=intco using "2/CURRENCY#"
	ropen #5,f$
endif
IF P9$[49,49]="Y" 
	read #1,88,1808;f$; ! customer file
	Ropen #10,f$ 
	let ch_cust=10
	Read #1,88,2768;F$; ! whinfo file
	let ch_wh=11
	Ropen #ch_wh,f$
	Read #1,88,1488;F$;
	let ch_odisc=12
	ropen #ch_odisc,f$
endif

mat read #1,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
let action1$=Ucase$(Rtrim$(action1$))

if action1$ = "GLDROPLIST"
	let returnstatus=1
	let message$="OK"
	gosub clientgldroplist:
	goto OutEnd:
endif
if action1$="ODISCLIST"
	let returnstatus=1
	let message$="OK"
	gosub getodiscdroplist:
	goto OutEnd:
endif
if action1$ <> "GETLIST"
	call DxGet("BankID", tmp$) \ r2 = tmp$
	if r2 < 1 OR r2 > MaxNew
		message$ = "Invalid bank code ID entered!" !\ error 10000
		returnstatus=0
		goto outerr
	end if
	gosub ReadBankCode
	if rtrim$(d$)=""
		! new record, make sure fields are initialized
		! properly
		gosub InitbankCode
		call DxGet("Description", tmp$) \ d$=tmp$,b$
		!if trim$(tmp$)=""
		!	message$="Please enter a description!"
		!	goto OutErr
		!Endif
	end if
end if

!
! get list of current bank codes
!
if action1$ = "GETLIST"
	returnstatus=1
	Message$="OK"
	gosub BuildBankDroplist ! * added to rstr
	!
	! section - status
	
	goto OutEnd:
!
! get data for a specific bank code
!
else if action1$ = "GETDATA"
	returnstatus=1
	Message$="OK"
	gosub LoadData 
	goto OutEnd:
!
! update ye' old bank code
!
else if action1$ = "SUBMITDATA"
	gosub LoadDataAndSave
	Message$="Record updated."
	goto OutEnd:
!
! delete bank code (doesn't happen too often:))
!
else if action1$ = "DELETE"
	gosub DeleteData
	Message$="Record deleted."
	goto OutEnd:

 
	 
	goto OutEnd:
!
! chart of account for client
!
!
! UNKNOWN ACTION
!
else
	message$ = "Unknown action1: "+action1$ !\ error 10000
	returnstatus=0
	goto outerr
end if
message$="Invalid action"
returnstatus=1
goto OutErr
! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************

!----------------------------------------------------------------------------
! build initial drop list of existing bank codes
!----------------------------------------------------------------------------
BuildBankDroplist: !
	clear list$[]
	list$[0]=bsdel$+"TCDroplist"+fdel$
	List$[1]="ID"+fdel$+"Desc"+fdel$
	let row=2
	if returnstatus>0
		for i = 1 To MaxNew
			mat read #2,i,0;d$;
			if rtrim$(d$)<>""
				List$[row]=str$(i)+fdel$+str$(i)+" - "+rtrim$(d$)+fdel$
				let row=row+1
			end if
		next i
	endif
	let list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
Return

!----------------------------------------------------------------------------
! load selected bank code data (new or existing) into rstr
!----------------------------------------------------------------------------
LoadData: !
	! build table of conditional item flags indicating display of field (or not)
	clear list$[]
	list$[0]=bsdel$+"ConditionFlags"+fdel$
	list$[1]="MultiClient"+fdel$+"GLAccount"+fdel$+"MultiCurrency"+fdel$+"ElectronicCR"+fdel$
	let tmp$="N"\if clflag<>0 let tmp$="Y"
	let webstr$=tmp$,fdel$
	let tmp$="N"
	If P9$[17,17] = "M" OR P9$[17,17] = "Y"
		let tmp$="Y"
	endif
	let webstr$=webstr$,tmp$,fdel$
	let tmp$="N"
	If P61$[136,136] = "Y"
		let tmp$="Y"
	endif
	let webstr$=webstr$,tmp$,fdel$
	let tmp$="N"
	IF P9$[49,49]="Y" let tmp$="Y"
	let webstr$=webstr$,tmp$,fdel$
	list$[2]=webstr$
	list$[3]=esdel$
	call AddToStr(e$,rstr$,List$[])
	clear list$[]
	List$[0]=bsdel$+"BankData"+fdel$
	webstr$="BankID"+fdel$+"Description"+fdel$
	webstr$=webstr$+"ClientID"+fdel$
	webstr$=webstr$+"Client Name "+fdel$
	webstr$=webstr$+"GLAccount"+fdel$
	Webstr$=webstr$+"Currid"+fdel$
	webstr$=webstr$+"CurrDesc"+fdel$
	Webstr$=Webstr$+"WHSE",fdel$ ! DEFAULT WAREHOUSE #  0       
	Webstr$=Webstr$+"CUSTID",fdel$ ! DEFAULT CUSTOMER #       0   	
	Webstr$=webstr$+"CUSTNAME",fdel$ ! customer's name
	Webstr$=webstr$+"BankAcct"+fdel$
	Webstr$=webstr$+"ShortOverAmt"+fdel$
	Webstr$=webstr$+"ShortOverCode"+fdel$
	list$[1]=webstr$
	let row=2
	if returnstatus<>0
		webstr$=str$(r2)+fdel$ !  BankID
		webstr$=webstr$+rtrim$(d$)+fdel$ ! Desc
		if clflag<>0
			if B1[3]<1 or B1[3]>9999
				let B1[3]=s1[0]
			endif
			if B1[3]<1 or B1[3]>9999
				let B1[3]=1
			endif
			let webstr$=webstr$+str$(B1[3])+fdel$ ! client#
			LET K7$=" ",K7$ \ LET K7$[3,6]=B1[3] USING "####"
			SEARCH #7,2,1;K7$,R[7],E
			if e<>0
				CLIENTNAME$="Not of File "
			endif
			MAT  READ #7,R[7],0;G9$;
			let clientname$=g9$[11,50]
			LET L9=G9$[135,136] \ IF L9<10 LET L9$=L9 USING "#" ELSE  LET L9$=L9 USING "##"
			LET CLIENT$=B1[3] USING "####"
			FOR X=1 TO 4
				IF CLIENT$[X,X]=" " LET CLIENT$[X,X]="."
			NEXT X
			LET G8$[1,1]=S1[1] USING "&" \ LET G8$[2,2]=S1[2] USING "&"
			LET F$=L9$,"/GLM",G8$[1,2],CLIENT$
			Call FindF(F$,a9)
			!CALL 96,F$,A9
			if a9<>0
				Try Close #4 Else Rem
				OPEN #4,F$
			endif
			webstr$=webstr$+rtrim$(clientname$)+fdel$ ! client name

		else
			let webstr$=webstr$+""+fdel$+""+fdel$ ! client #, client name
		endif
		If P9$[17,17] = "M" OR P9$[17,17] = "Y"
			webstr$=webstr$+str$(g1)+fdel$ ! GLAccount"
		else
			webstr$=webstr$+""+fdel$ ! GLAccount"
		endif
		if p61$[136,136]<>"Y"
			webstr$=webstr$+""+fdel$ ! currid
			webstr$=webstr$+""+fdel$ ! currency desc
		else
			webstr$=webstr$+str$(currid)+fdel$ ! currid
			K$ = " ",K$
			CURRDESC$=" ",CURRDESC$
			IF CURRID<>0
				LET K$=CURRID USING "####" 
				Search #5,2,1;K$,R1,E  
				IF NOT(E)
					Mat Read #5,R1,2;CURRDESC$;
				ENDIF
			ENDIF
			webstr$=webstr$+rtrim$(currdesc$)+fdel$ ! curr desc
		endif
		IF P9$[49,49]="Y"
			 Let Webstr$=Webstr$ + (B1[1] using "###"),fdel$ ! DEFAULT WAREHOUSE #  0       ! 
			 Let Webstr$=Webstr$+(B1[0] using "######"),fdel$ ! ! DEFAULT CUSTOMER #  
			 let custname$="" 
			 if B1[0]>0
				let custid=B1[0]
				call getcustname(custid)
				if returnstatus=0				
					let custname$="Customer Not On File "
					let returnstatus=1
					let message$="OK"
				endif
			 endif
			 Let Webstr$=Webstr$+rtrim$(custname$),fdel$ ! ! Customer Name
			 let webstr$=webstr$+rtrim$(BCOMPID$),fdel$ ! BANK ACCOUNT #               
			 let webstr$=webstr$+(B1[4]  using "###.##"),fdel$ ! SHORT/OVER AMT           0.00
			 let webstr$=webstr$+(B1[5] using "###"),fdel$ ! short/over code
		else
			let webstr$=webstr$,"",fdel$ ! default warehouse
			let webstr$=webstr$,"",fdel$ ! default customer
			let webstr$=webstr$,"",fdel$ ! default customer name
			let webstr$=webstr$,"",fdel$ ! bank account id
			let webstr$=webstr$,"",fdel$ ! short/over amt
			let webstr$=webstr$,"0",fdel$ ! short/over code
		endif
		list$[row]=webstr$
		let row=row+1
	endif
	list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
	!
	clear list$[]
	let list$[0]=bsdel$+"ClientList"+fdel$
	let list$[1]="ClientId"+fdel$+"ClientName"+fdel$
	let row=2
	if clflag<>0 and returnstatus<>0
		LET K7$=" ",K7$ 
		do
			SEARCH #7,3,1;K7$,R[7],E
			if e<>0 exit do
			if k7$[7,8]="  "
				let tmp=k7$[3,6]
				MAT  READ #7,R[7],0;G9$;
				let clientname$=g9$[11,50]
				let webstr$=str$(tmp),fdel$
				let webstr$=webstr$,rtrim$(clientname$),fdel$
				list$[row]=webstr$
				row=row+1
			endif
		loop
	endif
	list$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
	clear list$[]
	gosub getgldroplist:
	gosub getcurrdroplist: 
return
!--------------------------------------------------------
getgldroplist: ! create g/l droplist
clear list$[]
let list$[0]=bsdel$+"GLDroplist"+fdel$
let list$[1]="ID"+fdel$+"Desc"+fdel$
let row=2
if returnstatus<>0
	If P9$[17,17] = "M" OR P9$[17,17] = "Y"
		K$ = " ",K$
		do
			Search #4,3,1;K$,R1,E \ if E>2 Error 42
			if E exit do
			try
				let tmp3=k$
			else
				goto skipGLNum
			end try
			if not(tmp3) goto skipglnum
			if tmp3 = g1 let found = 1
			Mat Read #4,R1,0;C$;
			if c$[13,13]<>"0" goto skipglnum:
			webstr$=str$(tmp3)+fdel$
			webstr$=webstr$+str$(tmp3)+" - "+rtrim$(c$[15])+fdel$
			list$[row]=webstr$
			let row=row+1
			skipGLNum: !
		loop
		if not(found)
			webstr$=str$(g1)+fdel$+"ACCOUNT NOT ON FILE!"+fdel$
			list$[row]=webstr$
			let row=row+1
		endif
	endif
endif
list$[row]=esdel$
call AddToStr(e$,rstr$,List$[])
clear list$[]
return

getodiscdroplist: ! get other discount droplist
clear list$[]
List$[0] = bsdel$,"OtherCashList",fdel$ ! beginning of section  
List$[1] = "ID",fdel$,"Description",fdel$
List$[2] = "0",fdel$,"None",fdel$
LET row=3
If p9$[49,49]="Y"
	for cnt=1 to chf(ch_odisc)-1
		read #ch_odisc,cnt,0;odiscname$;
		if rtrim$(odiscname$)<>""
			let list$[row]=str$(cnt),fdel$,rtrim$(odiscname$),fdel$
			let row=row+1
		endif
	next cnt
endif
list$[row]=esdel$
call AddToStr(e$,rstr$,List$[])
clear list$[]
return
 
!----------------------------------------------------------------------------
! client g/l droplist
!----------------------------------------------------------------------------
clientgldroplist: !
	let returnstatus=1
	let message$="OK"
	if not (clflag)
		let returnstatus=0
		let message$="Multi Client Option is not Available"
		goto endclientdrop:
	endif
	call DxGet("ClientId", tmp$) \ b1[3]=tmp$
	if b1[3]<=0 or b1[3]>9999
		message$ = "Invalid Client Number Submitted!"
		returnstatus=0
		goto endclientdrop:
	endif
	LET K7$=" ",K7$ \ LET K7$[3,6]=B1[3] USING "####"
	SEARCH #7,2,1;K7$,R[7],E
	if e<>0
		message$ = "Invalid Client Number "+str$(b1[3])+" Submitted!"
		returnstatus=0
		goto endclientdrop:
	endif
	MAT  READ #7,R[7],0;G9$;
	LET L9=G9$[135,136] \ IF L9<10 LET L9$=L9 USING "#" ELSE  LET L9$=L9 USING "##"
	LET CLIENT$=B1[3] USING "####"
	FOR X=1 TO 4
		IF CLIENT$[X,X]=" " LET CLIENT$[X,X]="."
	NEXT X
	LET G8$[1,1]=S1[1] USING "&" \ LET G8$[2,2]=S1[2] USING "&"
	LET F$=L9$,"/GLM",G8$[1,2],CLIENT$
	Call FindF(F$,a9) !CALL 96,F$,A9
	IF NOT (A9)
		message$ = "No General Ledger Master File for Client "+str$(b1[3])
		returnstatus=0
		goto endclientdrop:		
	endif
	Try
		Close #4
	Else 
		Rem
	End Try
	OPEN #4,F$
	endclientdrop: ! 
	clear list$[]
	gosub getgldroplist:
return
!--------------------------------------------------------
getcurrdroplist: ! create currency droplist
clear list$[]
let list$[0]=bsdel$+"Currency"+fdel$
let list$[1]="ID"+fdel$+"Desc"+fdel$
let row=2
if returnstatus<>0 and p61$[139,139]="Y"
	let webstr$="0",fdel$,"None",fdel$
	let list$[row]=webstr$
	let row=row+1
	K$ = " ",K$
	do
		Search #5,3,1;K$,R1,E \ if E>2 Error 42
		if E exit do
		Mat Read #5,R1,2;CURRDESC$;
		webstr$=TRIM$(K$)+fdel$
		webstr$=webstr$+RTRIM$(CURRDESC$)+fdel$
		if currid<>0
			let tmp3=k1$
			if tmp3=currid let found=99
		endif
		list$[row]=webstr$
		let row=row+1
	loop
	if not(found)
		webstr$=str$(currid)+fdel$+"Currency Not on File!"+fdel$
		list$[row]=webstr$
		let row=row+1
	endif
endif
list$[row]=esdel$
call AddToStr(e$,rstr$,List$[])
clear list$[]
return


!----------------------------------------------------------------------------
! load data from web and save bank code data
!----------------------------------------------------------------------------
LoadDataAndSave: !
	! existing record has been read - update appropriate values
	call DxGet("Description", tmp$) \ d$=rtrim$(tmp$),b$
	if Trim$(tmp$)=""
		returnstatus=0
		message$="Please enter a description!"
		goto OutErr
	Endif
	If P9$[17,17] = "M" OR P9$[17,17] = "Y"
		if clflag<>0
			call DxGet("ClientId", tmp$) \ b1[3]=tmp$
			if b1[3]<=0 or b1[3]>9999
				message$ = "Invalid Client Number Submitted!"
				returnstatus=0
				goto outerr
			endif
			LET K7$=" ",K7$ \ LET K7$[3,6]=B1[3] USING "####"
			SEARCH #7,2,1;K7$,R[7],E
			if e<>0
				message$ = "Invalid Client Number "+str$(b1[3])+" Submitted!"
				returnstatus=0
				goto outerr
			endif
			MAT  READ #7,R[7],0;G9$;
			LET L9=G9$[135,136] \ IF L9<10 LET L9$=L9 USING "#" ELSE  LET L9$=L9 USING "##"
			LET CLIENT$=B1[3] USING "####"
			FOR X=1 TO 4
				IF CLIENT$[X,X]=" " LET CLIENT$[X,X]="."
			NEXT X
			LET G8$[1,1]=S1[1] USING "&" \ LET G8$[2,2]=S1[2] USING "&"
			LET F$=L9$,"/GLM",G8$[1,2],CLIENT$
			Call FindF(F$,a9) !CALL 96,F$,A9
			IF NOT (A9)
				message$ = "No General Ledger Master File for Client "+str$(b1[3])
				returnstatus=0
				goto outerr
			endif
			Try
				Close #4
			Else 
				Rem
			End Try
			OPEN #4,F$
		endif
		call DxGet("GLAccount", tmp$) \ G1=tmp$
		if not(g1)
			let returnstatus=0
			let message$="MUST HAVE A GENERAL LEDGER ACCOUNT ID!!!"
			goto outerr:
		endif
		If G1<>0
			K$ = " ",K$ \ K$[1,9] = G1 Using "#########"
			Search #4,2,1;K$,R1,E 
			If E<>0
				message$ = "G/L account number not in master file!"
				returnstatus=0
				goto outerr
			endif
		endif
	end if
	if p61$[136,136]="Y"
		call DxGet("CURRID", tmp$) \ TMP3=tmp$	
		IF TMP3<>CURRID
			MAT  READ #2,r2,40;I3;        
			If I3<>0 or LastCrNum<>0
				let message$="Current Month Activity Exists. May Not Change Currency Id. "	
				let returnstatus=0
				goto outerr:
			endif
			MAT  READ #2,r2,48;B;
			FOR X=0 TO 17
				if b[x]<>0
					let message$="Current Month Activity Exists. May Not Change Currency Id . "
					let returnstatus=0
					goto outerr:
				endif
			NEXT X
		endif
		let currid=tmp3
	else
		let currid=0
	endif
	If p9$[49,49]="Y"
		call DxGet("WHSE",tmp$) ! DEFAULT WAREHOUSE #  0 
		let tmp3=tmp$
		if tmp3<0 or tmp3>99
			let message$="Invalid Warehouse Entered "	
			let returnstatus=0
			goto outerr:
		endif
		if tmp3>0
			chan=findchannel()
			read #ctlc,88,2768;fname$;
			ropen #chan,fname$
			read #chan,(tmp3-1),4;whdesc$;
			if rtrim$(whdesc$)=""
				let message$="Warehouse Has Not been Defined"	
				let returnstatus=0
				goto outerr:	
			endif
			try close #chan else rem
		endif
		B1[1]=tmp3
		call DxGet("CUSTID",tmp$) ! DEFAULT CUSTOMER #       0 
		let tmp3=tmp$
		if tmp3<0 or tmp3>999999
			let message$="Invalid Customer Entered "	
			let returnstatus=0
			goto outerr:
		endif 
		if tmp3<>0
			let custid=tmp3
			call getcustname(custid)
			if returnstatus=0 goto outerr:
		endif
		let B1[0]=custid
		call DxGet("BankAcct",tmp$)
		if len(tmp$)>36
			let message$="Bank Account has a max of 36 characters "	
			let returnstatus=0
			goto outerr:
		endif 
		BCOMPID$=rtrim$(tmp$)+b$
		call DxGet("ShortOverAmt",tmp$)
		let tmp3=tmp$
		if tmp3<0 or tmp3>99.99
			let message$="Invalid Short and Over Amount must be between 0 and 99.99 "	
			let returnstatus=0
			goto outerr:
		endif 
		if fra(tmp3*100)
			let message$="Invalid Short/Over Amount must be between 0 and 99.99 with only 2 decimal places "	
			let returnstatus=0
			goto outerr:
		endif 
		B1[4]=tmp3
		call DxGet("ShortOverCode",tmp$)
		let tmp3=tmp$
		if tmp3<0 or tmp3>999
			let message$="Invalid Short and Over Other Discount Code "	
			let returnstatus=0
			goto outerr:
		endif 	
		B1[5]=tmp3
	endif
	gosub WriteBankCode
Return

!----------------------------------------------------------------------------
! delete selected bank code data
!----------------------------------------------------------------------------
DeleteData: !
	MAT  READ #2,r2,40;I3;        
	If I3<>0 or LastCrNum<>0
		let message$="Current Month Activity Exists. May Not Delete. "	
		let returnstatus=0
		goto outerr:
	endif
	MAT  READ #2,r2,48;B;
	FOR X=0 TO 17
		if b[x]<>0
			let message$="Current Month Activity Exists. May Not Delete. "
			let returnstatus=0
			goto outerr:
		endif
	NEXT X
	Gosub InitbankCode
Return

!----------------------------------------------------------------------------
! initialize a new bank code record
!----------------------------------------------------------------------------
InitbankCode: !
	LET D$=" ",D$ \ LET B1$=" ",B1$
	LET G1=0
	FOR X=0 TO 1 \ LET ST[X]=0 \ LET P0[X]=0 \ NEXT X
	FOR X=0 TO 17 \ LET B[X]=0 \ NEXT X
	FOR X=0 TO 6 \ LET B1[X]=0 \ NEXT X
	let bcompid$=" ",bcompid$
	let pysrc$=" ",pysrc$
	currid=0
	MAT  WRITE #2,r2;D$;
	MAT  WRITE #2,r2,6;G1;
	MAT  WRITE #2,r2,36;P0;
	MAT  WRITE #2,r2,40;ST;
	MAT  WRITE #2,r2,48;B;
	MAT  WRITE #2,r2,156;B1$; 
	MAT  WRITE #2,r2,176;B1;
	Mat  WRITE #2,r2,204;bcompid$;
	MAT  WRITE #2,r2,240;pysrc$;
	MAT  WRITE #2,r2,248;currid;
Return

!----------------------------------------------------------------------------
! read bank code data
!----------------------------------------------------------------------------
ReadbankCode: !
MAT  READ #2,r2;D$
MAT  READ #2,r2,30;G1;
MAT  READ #2,r2,156;B1$; \ MAT  READ #2,r2,176;B1;
Mat  Read #2,r2,204;bcompid$;
mat  read #2,r2,240;pysrc$;
MAT  READ #2,r2, 248;currid;              
                     
Return

!----------------------------------------------------------------------------
! write bank data
!----------------------------------------------------------------------------
WritebankCode: !
MAT  WRITE #2,r2;D$
MAT  WRITE #2,r2,30;G1
MAT  WRITE #2,r2,156;B1$ \ MAT  WRITE #2,r2,176;B1;
Mat  WRITE #2,r2,204;bcompid$;
MAT  WRITE #2,r2,240;pysrc$;
Mat  Write #2,r2,248;currid;
Return




OUTEND: Rem EXIT ROUTINE
ReturnStatus=1
OutErr: ! bypass status=1
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end


!--------------------------------------------------------------------
sub getcustname(custid)
  Try
    let returnstatus=1
    let message$="OK"
    let keycust$=custid using "######"
    search #ch_cust,2,1;keycust$,rec_cust,e
    if not(e)
	mat read #ch_cust,rec_cust,30;custname$;
    else
	let rec_cust=-1
	let returnstatus=0
	let message$="Customer "+str$(custid)+" Not on File "
    endif   	  
  else
    include "src/callsuberr.inc"
  end try
end sub ! getcustname