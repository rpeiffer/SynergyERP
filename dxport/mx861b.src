! --- mx861b
! description Production Order Quick Entry LINES
!
! 1.0 mm/dd/yyyy change??
!
! loadsave -w -n 100,10 -o prog/dxport/mx861b.dl4 src/mx861b.src
!
include "src/copyright.inc"

Rem MX861B -- BOM LINE FILE CREATE
Rem
Rem REV. 3.1 -- 01/93
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  9, 2001  12:11:59
Rem /usr/acct/r97//usr/acct/kag/work/r97/mfg/mx861b.src (univ2) [kag] {11974}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libprodwh.lib"
Declare External Sub mxwhcreate

External Lib "dxblockcustom.lib"
Declare External Sub blockPrintersDropList

External Lib "libgeneral.lib" !general routines
Declare External Sub suberr,mainerr,getsession,setoutput,addtostr,CreateNetStatus
Declare External Function getmsg$,expandarray

Declare Intrinsic Sub InpBuf,String
! Option Default Dialect IRIS1

Com 1%,Intco,SC,SR,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],J4$[50],rstr$[2000]
Com 1%,COST_LEV[3],2%,PASSR[1],TYPE,S9[9],3%,QTY
If Err 0 Gosub ERR_TRAP
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Def FNU(X) = Sgn(X) * (Int(Abs(X) + .9999))
Def FNP(X) = FNR(X * X1)
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
DIM 1%,PW1[2],2%,PW2[9],PW7[1],PWH7[3],3%,PW3[24],PW2$[16]
DIM Prod$[20]  
Dim K1$[30],K2$[30],K3$[30],K4$[30],P0$[10],V1$[1000],F1$[16]
Dim C1$[1400],G$[30],A2$[156],P$[156],P1$[156],A$[30],J0$[30]
Dim J$[30],J1$[30],J2$[30],J3$[30],J5$[30],X$[10],N2$[26],1%,LVL[1]
Dim A9$[28],W$[180],W5$[64],N1$[41],F$[20],P9$[50],P60$[50]
Dim 3%,R[40],B1,MQTY,AMNT,BMAMT,S3,AQTY,WONUM[99]
Dim 3%,W3[4],W7[4],A1[20],A2[1],A3[1],A4,WGHT,PW_W3[24]
Dim 1%,S2[3],W0,W1[2],W5[4],N1[1],N2[41,4],ECOST,WHSE,LM[1],WHLM[1]
Dim K30$[40],T9$[20],3%,Q1[30],PREC[1],WHMISC[6],PRPARC[3],PF_LOAD2
Dim 2%,W2[7],W6[3],B[24],C4[10],WHBLD[2],NUM
Dim 3%
Dim CUSTOM_CUSTOMER$[30],List$[100,1000],tmp$[1000],tmp1$[500]
dim action$[30],options$[30],userid$[8],b$[200],action1$[30],msg$[100]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10]
Dim Message$[500],WebStr$[1000]
! opened in the whmenu
! call dxopen()
!
call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$)
!
! files open in mx861: 2 to 10
! "1792","512","1808","656","528","1744","1728","2528","2320"
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
A9$[1,27] = " ABCDEFGHIJKLMNOPQRSTUVWXYZ"
C1$ = " ",C1$
NOMORE = 0;WOUSED = 0
TPLVLREC = S9[2];PASSR[0] = TPLVLREC
R4 = TPLVLREC
Mat Read #3,R4;W$;
Read #3,R4,180;W0;
Mat Read #3,R4,182;W1;
Mat Read #3,R4,188;W2;
Mat Read #3,R4,220;W3;
J5$[1,6] = W$[145,150]
LVL[0] = 1;LVL[1] = 1
WONUM[LVL[0]] = 1
K1 = S9[1];WHSE = W0
let ch_pwh=7
W5$ = " ",W5$
For X = 0 To 4
  W5[X] = 0
  W7[X] = 0
  If X < 4 Let W6[X] = 0
Next X
W6[1] = 0 \ If W3[1] Let W6[1] = FNR((W3 - W3[1]) * 100 / W3[1])
W5[1] = 0
If S9 = 861 Let W5[1] = 1
W3[1] = 0
Write #3,R4,226;W3[1];
Mat Read #2,K1;P$;
A2$ = P$
X1 = 1
E2 = K1 \ Gosub READ_PROD
If A[5] = 0 Let A[5] = 1
WGHT = (A[6] * W3[0] / A[5])
MQTY = W3 \ Gosub BASE2STKU
W3[0] = MQTY
Gosub CHKPRVTLBL
If PLBL = 0 Let W$[180,180] = " "
Mat Write #3,R4;W$;
Gosub BOMSTART
If PLBL Gosub CHKPRVTLBLITEMS
Goto OUTEND
ADDNEWWOHEDR: Rem HEADER CREATE
If Not(W1[2]) Let J5$ = W$[145,150] \ Return 
J5$ = " "
Mat Read #3,R4;W$;
J5$ = W$[145,150]
Read #3,R4,180;W0;
Mat Read #3,R4,182;W1;
Mat Read #3,R4,188;W2;
Mat Read #3,R4,220;W3;
X7 = WONUM[LVL]
X7 = X7 + 1
L1028: If X7 > 27 Let NOMORE = 9 \ Return 
J5$[6,6] = A9$[X7,X7]
WONUM[LVL + 1] = X7
Search #3,2,1;J5$,V1,E
If E Goto WRT_NEWWOH
X7 = X7 + 1
Goto L1028
WRT_NEWWOH: Rem WRITE HEADER
W$[145,150] = J5$[1,6]
W$[151,162] = "            "
E = 2
Search #3,1,0;J5$,V1,E
If E Gosub ERR_SEARCH
LVL[0] = LVL[0] + 1
Search #3,4,1;J5$,V1,E
If E Gosub ERR_SEARCH
J4$ = " "
J4$[1,6] = W2[5] Using "######"
J4$[7,12] = J5$[1,6]
Search #3,4,2;J4$,V1,E
If E Gosub ERR_SEARCH
J4$ = " "
J4$[1,18] = W5$[13,24] + J5$[1,6]
Search #3,4,3;J4$,V1,E
If E Gosub ERR_SEARCH
W3[0] = A2[1]
W3[1] = 0 \ If B0 <= 0 Let B0 = 1
W2[7] = A2[1] / B0
If PLBL = 0 Let W$[180,180] = " "
W$[121,132] = W5$[13,24]
W$[163,164] = P0$[6,7]
Mat Write #3,V1;W$;
Write #3,V1,180;W0;
Mat Write #3,V1,182;W1;
Mat Write #3,V1,188;W2;
Mat Write #3,V1,220;W3;
PASSR[0] = V1;TYPE = 1;QTY = W3;Prod$=W$[121,132]
!Swap 1,"MXPRWH"
gosub do_prwh:
R4 = V1
! Print @63,2;J5$;
J3$ = " ",J3$
J3$[1,6] = W2[6] Using "######"
J3$[7,9] = W1[1] Using "###"
J3$[10] = J5$[1,6]
Search #3,4,4;J3$,R4,E
If E = 1 Return 
If E Gosub ERR_SEARCH
Return 
ADDMACH2WOH: Rem INSERT MACHINE
K1$ = " ",K1$
K1$ = W5$[1,12] + W5$[33,38]
Search #3,2,3;K1$,R4,E
If E = 1 Return 
If E Gosub ERR_SEARCH
Mat Read #3,R4,0;W$;
If W$[145,150] <> W5$[33,38] Return 
If W$[151,162] <> "            " Return 
W$[151,162] = P$[140,151]
Write #3,R4,150;W$[151,162];
Return 
GETRIGHTWOH: Rem Find WO - Chk if ALREADY THERE
X7 = 0
If X7 <= 0 Let X7 = 1
TRYNXTLETTR: Rem "
J5$[6] = A9$[X7,X7]
K1$ = " ",K1$
If Not(W1[2]) Return 
K1$ = N1$[1,12];K1$[13] = J5$[1,6]
Search #3,2,3;K1$,V1,E
If E = 1
  X7 = X7 + 1
  If X7 > LVL[0] Let V1 = 0 \ Return 
  Goto TRYNXTLETTR
End If 
If E Gosub ERR_SEARCH
K1$ = " ",K1$
K1$ = J5$[1,6] + N1$[25,27]
Search #6,2,1;K1$,R1,E
If Not(E) ! "Still already there - try next?
  X7 = X7 + 1
  Goto TRYNXTLETTR
End If 
Return 1
GET_PRODWHSE: Rem READ PRODWHSE
K30$ = " ",K30$;K30$[1,12] = P$[140,151]
If Not(WHSE) Let K30$[13] = 1 Using "##" Else Let K30$[13] = WHSE Using "##"
Search #7,2,1;K30$,R[7],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto NEEDNEWWHSE
Mat Read #7,R[7],78;PW_W3;
Mat Read #7,R[7],800;WHMISC;
Mat Read #7,R[7],842;WHLM;
If PW_W3[17] Let B[8] = PW_W3[17]
If PW_W3[15] Let B[21] = PW_W3[15]
If PW_W3[16] Let B[10] = PW_W3[16]
A[0] = PW_W3[0];A[1] = PW_W3[2];A[2] = PW_W3[1];A[3] = 0
WHSEAVAIL = A[0] - A[1]
Return 
NEEDNEWWHSE: Rem ==== prodwhse record not found, build it
If Not(WHSE) Let WHSE = 1
WHBLD[0] = 7;WHBLD[1] = Abs(WHSE)
WHBLD[2] = B[24]
K30$[13] = ""
!Call "MXWHCREATE",K30$,WHBLD[]
call mxwhcreate(e$,IntCo,K30$,WHBLD[])
R[7] = WHBLD[2];WHBLD[2] = 0
Mat PW_W3 = Zer \ Mat WHMISC = Zer \ Mat WHLM = Zer
PW_W3[0] = 0;WHMISC[0] = 0;WHLM[0] = 0
Return 
CREATEWOLINE: Rem " Write the lines file
FOUND = 0
If Not(W1[2])
  K1$ = J5$[1,6] + N1$[25,27]
Else 
  Gosub GETRIGHTWOH \ Return 1
  E = E
End If 
E = 2
Search #6,1,0;K1$,R1,E
If E Gosub ERR_SEARCH
Search #6,4,1;K1$,R1,E
If E Gosub ERR_SEARCH
K2$ = " "
If S2[3] = 1 Let P$ = " ",P$;P$[140,141] = "Z ";N1$[13,24] = P$[140,151]
K2$[1,21] = P$[140,151],K1$
Search #6,4,2;K2$,R1,E
If E Gosub ERR_SEARCH
K3$ = " "
X = J$[7,9]
Y = 1000 - X
K3$ = J5$[1,6]
K3$[7,10] = Y Using "###"
For X = 7 To 10
  If K3$[X,X] = " " Let K3$[X,X] = "0"
Next X
Search #6,4,3;K3$,R1,E
If E Gosub ERR_SEARCH
W5$ = " ",W5$
W5$[1,24] = N1$[1,24]
W5$[25,27] = P$[123,125]
W5$[28,31] = P$[152,155]
W5$[32,32] = P$[156,156]
W5$[33,38] = J5$[1,6]
If S2[3] = 1 Let W5$[39,64] = N2$[1,26]
If S2[3] = 1 Let A2 = 0;B[8] = 0;A2[1] = 0
If S2[1] = 2 Let S2[0] = PFU1[13]
Gosub CHKVALIDUM
W5 = J$[7,9] \ W5[3] = S2[0]
W7 = A2 \ W5[4] = S2[1]
W7[3] = B[8]
Mat Write #6,R1;W5$;
Mat Write #6,R1,64;W5;
Mat Write #6,R1,74;W6;
Mat Write #6,R1,90;W7;
If P$[152,155] = "MACH" Gosub ADDMACH2WOH \ Goto L4390
If S2[3] = 1 Goto L4390
PASSR[1] = R1;TYPE = 3;QTY = W7[0];Prod$=W5$[13,24] 
gosub do_prwh:
! Swap 1,"MXPRWH"
L4390: Return 
Do_PRWH: ! instead of a swap
LET J$=" ",J$ \ LET J$=Prod$[1,12] \ LET J$[13]=W0 USING "##"
	SEARCH #ch_pwh,2,1;J$,R10,E \ IF E RETURN                     
	MAT  READ #ch_pwh,R10,32;PW1;                                 
	MAT  READ #ch_pwh,R10,38;PW2                                  
	MAT  READ #ch_pwh,R10,78;PW3                                  
	MAT  READ #ch_pwh,R10,404;PW2$;                               
	MAT  READ #ch_pwh,R10,428;PWH7;                               
	MAT  READ #ch_pwh,R10,696;PW7                                 
	IF TYPE=1 LET PW3[1]=PW3[1]+QTY                           
	IF PW3[1]<0 LET PW3[1]=0                                  
	IF TYPE=2 LET PW3[0]=PW3[0]+QTY                           
	IF TYPE=3 LET PW3[2]=PW3[2]+QTY                           
	IF PW3[2]<0 LET PW3[2]=0                                  
	IF TYPE=4 LET PW3[0]=PW3[0]+QTY                           
	MAT  WRITE #ch_pwh,R10,32;PW1;                                
	MAT  WRITE #ch_pwh,R10,38;PW2                                 
	MAT  WRITE #ch_pwh,R10,78;PW3                                 
	MAT  WRITE #ch_pwh,R10,404;PW2$;                              
	MAT  WRITE #ch_pwh,R10,428;PWH7;                              
	MAT  WRITE #ch_pwh,R10,696;PW7;  
Return
BOMSTART: Rem ****** EXPLOSION *******
R = K1
A$ = R Using "#####   0    0"
F$ = A$
LVLCOUNT = 0
MAINLVLLOOP: Search #5,3,1;F$,R6,E
If E Return 
If A$[1,5] <> F$[1,5] Return 
R2 = F$[1,5]
Read #2,R2,0;P0$;
If F$[15,16] <> P0$[6,7] Goto MAINLVLLOOP
Read #5,R6;B1;
Mat Read #5,R6,6;N1$;
Mat Read #5,R6,48;S2;
Mat Read #5,R6,56;N2$;
J0$ = "Y";J1$ = "Y"
J$ = F$
Gosub GETWOQTY
If S2[2] = 2 Or S2[3] = 1 Goto MAINLVLLOOP
If J0$ = "N" Goto MAINLVLLOOP
If Not(W1[2]) Goto MAINLVLLOOP
If NOMORE Goto MAINLVLLOOP
LVLCOUNT = 1
STARTNEWLEVEL: C1$[LVLCOUNT * 15 + 1,LVLCOUNT * 15 + 14] = R3 Using "#####   0    0"
G$ = C1$[LVLCOUNT * 15 + 1,LVLCOUNT * 15 + 14]
L5130: Search #5,3,1;G$,R6,E
If E Goto L5260
If G$[1,5] <> C1$[LVLCOUNT * 15 + 1,LVLCOUNT * 15 + 5] Goto L5260
R2 = G$[1,5]
Read #2,R2,0;P0$;
If G$[15,16] <> P0$[6,7] Goto L5130
BOMLVLLOOP: G$ = C1$[LVLCOUNT * 15 + 1,LVLCOUNT * 15 + 14]
R2 = G$[1,5] \ Read #2,R2,0;P0$;
G$[15,16] = P0$[6,7]
L5170: Search #5,3,1;G$,R6,E
If E Goto L5260
If G$[1,5] <> C1$[LVLCOUNT * 15 + 1,LVLCOUNT * 15 + 5] Goto L5260
R2 = G$[1,5]
Read #2,R2,0;P0$;
If G$[15,16] <> P0$[6,7] Goto L5170
Read #5,R6;B1;
Mat Read #5,R6,6;N1$;
Mat Read #5,R6,48;S2;
Mat Read #5,R6,56;N2$;
J$ = G$
J0$ = "Y";J1$ = "Y"
Gosub GETWOQTY
C1$[LVLCOUNT * 15 + 1,LVLCOUNT * 15 + 14] = G$
If J0$ = "N" Goto BOMLVLLOOP
If S2[2] = 2 Or S2[3] = 1 Goto BOMLVLLOOP
If Not(Q1[LVLCOUNT + 1]) Goto BOMLVLLOOP
If NOMORE Goto BOMLVLLOOP
LVLCOUNT = LVLCOUNT + 1
Goto STARTNEWLEVEL
L5260: LVLCOUNT = LVLCOUNT - 1
If LVLCOUNT = 0 Goto MAINLVLLOOP
Goto BOMLVLLOOP
GETWOQTY: Rem NET REQUIREMENT CALCULATIONS
Gosub CHKMAKEINFO
A4 = 0;A2 = 0;A2[1] = 0
Gosub L8100
R3 = J$[10,14];E2 = R3;ECOST = 1
Gosub READ_PROD \ N1$[13,24] = P$[140,151]
If S2[2] = 1 Gosub OPTLRAW
If S2[2] = 1 If P$[139,139] = "M" If J1$ = "Y" Gosub OPTLMAKE
If S2[2] = 2 Let J0$ = "N"
If J1$ = "N" Let A4 = 0 \ Goto CHKIFENOUGH
If S2[3] = 1 Let P$ = " ",P$;P$[140,141] = "Z ";N1$[13,24] = P$[140,151] \ Goto L5550
Mat Read #2,R3,256;A1;
L5550: Rem "get header requirements
If Not(W1[2])
  V1 = TPLVLREC
Else 
  Gosub GETRIGHTWOH \ V1 = TPLVLREC
  E = E
End If 
L5680: Read #3,V1,220;W3;
A3 = A1[0] - (A1[1] + A1[3])
If WHSE Let A3 = WHSEAVAIL
If A3 <= 0 Let A3 = 0
If S2[1] = 0 Let BMAMT = B1 \ Gosub PRDTN2BASEU \ B1 = S3
If S2[1] = -1 Let A2 = B1;A2[1] = B1 \ Goto L5710
Gosub CHKMAKEINFO \ Gosub GETMAKEQTY
If S2[3] = 1 Goto L5720
A2 = FNR(MQTY * B1)
A2[1] = A2[0]
If S2[1] = 2 Gosub PRCTOFWGHT
L5710: A4 = A2 \ X1 = 1
If (S2[1] = 0 Or S2[1] = 2) Let X1 = .01
A4 = FNP(A2)
If P$[152,155] = "MACH" Or P$[152,155] = "TIME" Or P$[152,155] = "LABR" Goto L5720
A2 = FNU(A4);A4 = FNU(A4)
A2[1] = A2[0]
L5720: Gosub CREATEWOLINE \ Goto L5730
Goto L5755
L5730: Gosub CHKIFENOUGH
If S2[3] = 1 Goto L5755
Gosub INCALLOC
If Q1[LVLCOUNT + 1] Gosub MAKETHISITEM
L5755: Rem.  (COULD BE RETURN +1 FROM 4000 ROUTINE)
Return 
CHKIFENOUGH: Rem ************* SET NEXT LEVEL QTY******************
Q1[LVLCOUNT + 1] = 0;A2[1] = A2[0]
If A3 >= A4 Goto L5820
If A3 < A4 ! "make the difference
  A3[1] = A4 - A3
  If A3[1] <= 0 Let A3[1] = A4
  A4 = A3[1]
  A2[1] = A4
End If 
If J0$ = "N" Or S2[2] = 2 Goto L5820
If P$[139,139] <> "M" Goto L5820
If Not(W1[2]) Goto L5820
If NOMORE Goto L5820
Gosub CHK4BOM
MQTY = A4 \ Gosub BASE2STKU
If MQTY > 0 Let A4 = MQTY
Q1[LVLCOUNT + 1] = A4
L5820: Return 
INCALLOC: Rem *************  ADD TO ALLOCATED *******************
A1[1] = A1[1] + A2
Mat Write #2,R3,256;A1;
Return 
INCWIP: Rem *************** ADD TO WIP ********************
A1[2] = A1[2] + A2[1]
Mat Write #2,R3,256;A1;
Return 
MAKETHISITEM: Rem *************** WRITE WO **********************
If NOMORE ! "reached 1000 WO Nums used?
  Q1[LVLCOUNT + 1] = 0
  Return 
End If 
Gosub INCWIP
Gosub ADDNEWWOHEDR
Return 
CHKMAKEINFO: Rem GET TYPE OF FNP
K2$ = " ",K2$ \ K2$ = N1$[1,12]
Search #2,2,1;K2$,V2,E
If E Goto L6100
Mat Read #2,V2;P1$;
If P1$[139,139] <> "M" Goto L6130
A2$ = P1$
X1 = 1
E2 = V2 \ Gosub L6805
B0 = B[16]
If B0 <= 0 Let B0 = 1
Return 
L6100: Rem INVALID CODE
V2 = J$[1,5]
Mat Read #2,V2;P1$;
L6130: If P1$[139,139] <> "M" Let P1$ = A2$
N1$[1,12] = P1$[140,151]
Write #5,R6,6;N1$[1,12];
Goto CHKMAKEINFO
CHK4BOM: Rem CHK BOM & IF ALREADY MADE
T9$ = " ",T9$ \ T9$ = R3 Using "#####"
Search #5,2,1;T9$,R0,E
If Not(E) Goto L6250
A4 = 0
Return 
L6250: Rem CHK IF ENDLESS LOOP
Return 
T9$ = " ",T9$ \ T9$ = N1$[13,24]
T9$[13] = J5$[1,5] \ T9$[18] = ""
Search #3,2,3;T9$,R0,E
If E Return 
A4 = 0
Return 
GETMAKEQTY: Rem GET Make for this level (every time?)
If A[5] = 0 Let A[5] = 1
WGHT = (A[6] * W3 / A[5])
MQTY = W3 \ Gosub BASE2STKU
E2 = R3 \ Gosub READ_PROD
Return 
PRCTOFWGHT: Rem FOR % OF WEIGHT
A4 = FNR(WGHT * B1)
CNVTA = A4;CNVTU[0] = S2[0];CNVTU[1] = 0;CNVTU[2] = 1
Gosub STARTCONVERT
A2 = AMNT
Return 
OPTLMAKE: Rem OPTIONAL PATH -> TAKE IT?
If Not(W1[2]) Let J0$ = "N" \ Return 
let j0$="N"
!Print @0,20;'CE';N1$[13,24];" IS OPTIONAL MAKE ITEM.  EXPLODE IT? (Y/N)  ";
!Input ""J0$ \ Print @0,20;'CL';
If J0$ <> "Y" If J0$ <> "N" Goto OPTLMAKE
If J0$ = "Y" Return 
If J0$ = "N" Return 
Goto OPTLMAKE
OPTLRAW: Rem OPT - RM
J0$ = "N";J1$="N"
!Print @0,21;'CE';N1$[13,24];" IS OPTIONAL ITEM.  USE IT? (Y/N)  ";
!Input ""J1$ \ Print @0,21;'CL';
If J1$ <> "Y" If J1$ <> "N" Goto OPTLRAW
If J1$ = "Y" Return 
If J1$ = "N" Return 
Goto OPTLRAW
CHKVALIDUM: Rem CHECK ON U/M
For NUM = 0 To 7
  If S2[0] > 0 And PFU1[NUM] > 0 And S2[0] = PFU1[NUM] Return 
Next NUM
S2[0] = PFU1[8]
Return 
READ_PROD: Rem READ PROD
If S2[3] = 1 Return 
L6805: Mat Read #2,E2;P$;
Mat Read #2,E2,156;B;
Mat Read #2,E2,256;A;
Mat Read #2,E2,512;PFU1; \ Mat Read #2,E2,938;PF_LOAD2;
Mat Read #2,E2,554;PFU2; \ Mat Read #2,E2,620;LM;
Mat Read #2,E2,596;PRPARC; \ Mat Read #2,E2,894;C4;
PREC[0] = E2;R[3] = E2
If P9$[32,32] <> "Y" Goto L6836
If WHSE Gosub GET_PRODWHSE
If P9$[32,32] = "Y" And WHSE Gosub CHKWHSEDATA
L6836: If ECOST Gosub CALCLOAD
If Not(B[8]) Let B[8] = B[21]
If Not(B[8]) Let B[8] = B[10]
If PFU1[8] <= 0 Let PFU1[8] = PFU1[0]
If PFU1[13] <= 0 Let PFU1[13] = PFU1[0]
ECOST = 0
Return 
BASE2PRDTN: Rem BASE(S3) -> PRDTN
CNVTA = S3 \ CNVTU[0] = 0 \ CNVTU[1] = S2[0] \ CNVTU[2] = 1
Gosub STARTCONVERT
If AMNT <= 0 Let AMNT = S3
BMAMT = AMNT
L6900: Rem BASE COST -> PRDTN COST
CNVTA = A2 \ CNVTU[0] = 0 \ CNVTU[1] = S2[0] \ CNVTU[2] = 2
Gosub STARTCONVERT
If AMNT <= 0 Let AMNT = A2
MQTY = FNR(AMNT)
Return 
PRDTN2BASEU: Rem PRDTN -> BASE UNITS
CNVTA = BMAMT \ CNVTU[0] = PFU1[13] \ CNVTU[1] = 0 \ CNVTU[2] = 1
Gosub STARTCONVERT
If AMNT <= 0 Let AMNT = BMAMT
S3 = AMNT \ Return 
BASE2STKU: Rem BASE -> STOCK UNITS
CNVTA = MQTY \ CNVTU[0] = 0 \ CNVTU[1] = PFU1[8] \ CNVTU[2] = 1
Gosub STARTCONVERT \ If AMNT <= 0 Let AMNT = MQTY
MQTY = AMNT
Return 
STARTCONVERT: Rem STD
If S2[3] = 1 Let AMNT = CNVTA \ Goto L6985
Goto CONVERT
L6985: Return 
CONVERT: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMNT = CNVTA
Return 
CHKPRVTLBLITEMS: Rem ADD IN ASS'RY
R4 = S9[2]
Mat Read #3,R4,0;W$;
If W$[180,180] = " " Return 
Read #3,R4,180;W0;
Mat Read #3,R4,182;W1;
Mat Read #3,R4,188;W2;
Mat Read #3,R4,220;W3;
J5$[1,6] = W$[145,150]
N1$ = " ",N1$;W1[2] = 0
N1$ = W$[121,132]
S2[1] = 1;S2[2] = 0;S2[3] = 0
J4$ = " ",J4$;J4$[1,6] = J5$[1,6]
For AC = 30 To 34
  J4$[7] = AC Using "&&&";E = 0
  Search #6,2,1;J4$,R6,E
  If E = 1 Goto L7100
L7090: Next AC
Return 
L7100: Rem ADD LINES
LVLCOUNT = 0;X2 = AC
A$ = " ",A$;A$[1,12] = N1$[1,12]
Search #2,2,1;A$,R2,E
If E Goto L7090
J$ = " ",J$;J$[1,5] = R2 Using "#####"
J$[7,9] = J4$[7,9]
Mat Read #2,R2,0;P1$;
X2 = J$[7,9] \ If X2 < 30 Or X2 > 34 Goto L7090
Gosub L8100
If T9$[1,1] = "" Or T9$[1,3] = "   " Goto L7090
If X2 > 29 If AQTY <= 0 Or Fra(AQTY) Goto L7090
B1 = AQTY
E2 = R2 \ Gosub READ_PROD
MQTY = W3 \ Gosub BASE2STKU
W3[0] = MQTY
E2 = V2 \ Gosub READ_PROD
S2[0] = PFU1[8]
Gosub GETWOQTY
Goto CHKPRVTLBLITEMS
CHKPRVTLBL: Rem PRIVATE LABEL
V1$ = " ",V1$;PLBL = 0
If P60$[11,11] <> "Y" Return 
If W$[180,180] <> "Y" Return 
If Err 0 Rem
Close #16
Close #15
If Err 0 Gosub ERR_TRAP
Read #1,88,480;F1$[1,16];
Open #15,F1$
Mat Read #15,1,0;N1; \ Mat Read #15,1,4;N2;
If N1 = 0 Or N1[1] = 0 Goto L8080
Read #1,16,16;F1$[1,16];
If F1$[1,1] = "" Or F1$[1,2] = "  " Goto L8080
If Err 0 Let F = Spc(8)
F = 0 \ Open #16,F1$
If Err 0 Gosub ERR_TRAP
If F = 0 Let PLBL = 9
L8080: Close #15
Return 
L8100: Rem OKAY
If PLBL = 0 Or LVLCOUNT <> 0 Return 
V1$ = " ",V1$;AQTY = 0
T9$ = " ",T9$;T9$[1,6] = W2[5] Using "######"
T9$[7] = P1$[140,151]
Search #16,2,1;T9$,R16,E
If E Let PLBL = 0 \ Return 
Read #16,R16,24;V1$[1,N1[1]];
PLBL = 9;T9$ = " ",T9$
X2 = J$[7,9]
If X2 = 10 Goto L8200
If X2 = 15 Goto L8200
If X2 = 20 Goto L8200
If X2 >= 30 If X2 <= 34 Goto L8200
Return 
L8200: Rem GET NEW PROD
T9$ = " ",T9$;AQTY = 0
If X2 = 10 Let T9$ = V1$[67,78]
If X2 = 15 Let T9$ = V1$[79,90]
If X2 = 20 Let T9$ = V1$[91,102]
If X2 = 30 Let T9$ = V1$[103,114];AQTY = V1$[115,120]
If X2 = 31 Let T9$ = V1$[121,132];AQTY = V1$[133,138]
If X2 = 32 Let T9$ = V1$[139,150];AQTY = V1$[151,156]
If X2 = 33 Let T9$ = V1$[157,168];AQTY = V1$[169,174]
If X2 = 34 Let T9$ = V1$[175,186];AQTY = V1$[187,192]
If T9$[1,1] = "" Or T9$[1,3] = "   " Return 
If X2 > 29 If AQTY <= 0 Or Fra(AQTY) Return 
Search #2,2,1;T9$,V2,E
If E Let T9$ = " ",T9$ \ Return 
J$[10,14] = V2 Using "#####";R3 = V2
N1$[13,24] = T9$[1,12]
S2[1] = 1;S2[2] = 2;S2[3] = 0
Return 
CALCLOAD: Rem CALC LOADS FROM LOAD MARKUP
If P9$[32,32] = "Y" And WHSE > 0
  If WHLM[0]
    WH = WHSE;LTBL = WHLM[0];CNVTA = 0
    Gosub L8405 \ If R[3] > 0 Let PW_W3[17] = CNVTA;B[8] = CNVTA
  End If 
  If WHLM[1]
    WH = WHSE;LTBL = WHLM[1];CNVTA = 0
    Gosub L8405 \ If R[3] > 0 Let PW_W3[14] = CNVTA;PF_LOAD2 = CNVTA
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    Gosub L8405 \ If R[3] > 0 Let B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    Gosub L8405 \ If R[3] > 0 Let PF_LOAD2 = CNVTA
  End If 
End If 
Return 
L8405: Rem CALL
OTYPE = 1
Call "MXLOAD5.DL4",OTYPE,WH,LTBL,PREC[],CNVTA,IntCo,e$,rstr$
Return 
CHKWHSEDATA: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = PW_W3[19] + PW_W3[20] + PW_W3[21] + PW_W3[22] + PW_W3[23] + PW_W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(PW_W3[X2 - 1]) Let PW_W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(PW_W3[17]) Let WHLM[0] = LM[0]
  If Not(PW_W3[17]) Let PW_W3[17] = B[8]
  If Not(WHLM[1]) And Not(PW_W3[14]) Let WHLM[1] = LM[1]
  If Not(PW_W3[14]) Let PW_W3[14] = PF_LOAD2
  If Not(PW_W3[15]) Let PW_W3[15] = B[21]
  If Not(PW_W3[16]) Let PW_W3[16] = B[10]
  If Not(PW_W3[18]) Let PW_W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
OUTEND: Rem OUT ! NATIVE - allocate & then print it!
call "mx201l.dl4",Message$,IntCo,rstr$,s9[]
!Print @0,20;
!If S9 = 899 Print @0,16;'CE'; \ Chain "MX201L"
!Print 'CR RB';" COMPLETE!! "
!Signal 3,40
!Chain "MX201L"
! ERP - show complete & send printer list
Clear List$[]
let list$[0]=bsdel$,"PWOINFO",fdel$
list$[1]="PWORDERID",fdel$,"Message",fdel$
list$[2]=W$[145,150],fdel$,"Created",fdel$
list$[3]=esdel$
call AddToStr(e$,rstr$,List$[])
ReturnStatus=1;Message$="PWO Created"
clear list$[]
list$[0]=bsdel$,"Printers",fdel$
List$[1]="Name",fdel$,"Id",fdel$,"Default",fdel$
call AddToStr(e$,rstr$,List$[])
pdfoption=1
xmloption=0 ! BROWSER NOT OK  (MULTIPLE PRINT FORMATS for diff status!)
Call blockPrintersDropList(rstr$,xmloption,pdfoption)
Call AddToStr(e$,rstr$,esdel$) ! end of section 
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
	!
call SetOutPut(e$,rstr$)
END
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM ",MSC$(4)
call programdump("tmp/mx861bse!","")
ERROR 11000
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
end
Rem {end rtn.error.s}