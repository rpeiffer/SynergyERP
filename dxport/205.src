! >>> Program 205
!
! description ORDER ACCEPT
!
! loadsave -w -n 100,10 -o prog/dxport/205.dl4 src/205.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX205  -  ORDER ACCEPT
Rem AUTHOR:
Rem LAST UPDATE: DAVE
!              jlp 3/27/97 set s9[4] for swap to mxrasl, cct101444
! jliu 08/05/99 cct121149 check backorder file before creating invoice
! zyc  02/20/01 cct144501 check wo# in the cntrl file
! jliu 5/4/01 cct142926 create a new hold code - hold code 10 tax exempt num
!             per committee meeting on 5/30/01 - remove the new hold code 10
! 6/21/01 jliu cct146887 if the invoice date is greater that ship date # days 
!         , don't calcuate the commission and commission amt is zero          
! 4/10/03 jliu cct166218 add the option - order range 
! 12/08/04 jliu cct185269 if the system flag screen s3 page 2 field 15 set 
!          to "N" and suflag screen 1 field#45 is "Y" or "A", if the o/t is
!          16, change to status 6 (not status 5).
! 7/5/05 jliu cct191511 add a prompt to confirm the date entered is correct.
! 10/12/10 txc 244313 if bypass 221 is on, set directs to status 4 
! --------------------- CUSTOM FOR Jersey Paper: ---------------
! txc 11/10/10 - cct 244757 set ot 15 to 4
! txc 03/17/11 - task 2950 it was not setting h0[0] and key so they would match for order type 15
! CUSTOM WENELSON - Send afflink asn if applicable
! --------------------------------------------------------------
!???:04/16/00:Converted to Bedit   (mkbedit 1.2b)

Rem 02/09/2000 - Check Available on Auto-Generate Work Order
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 27, 2008  13:42:14
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/xrev9/mx205.src (univ2) [jcs] {43013}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/inc/fileedittrack.inc"

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String
 Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
External Lib "libedittrack.lib"
Declare External Sub MakeEdittrack


Try
Com 2%,S9[9],1%,COST_LEV[3],COID
Com 3%,AVAILQTY
! If Err 0 Gosub ERR_TRAP
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)

dim 1%,Lchan[50],fchan[10],un[2]
dim 3%,otype,prec[3],LDSTAT[2],unf[6]
dim 3%,wh
dim l1$[20]
Dim keysot$[10],blank$[100]
dim 1%,ch_sot,ot2[15],3%,rec_sot,2%,lc0[1]
DIM 3%,ORGLOADCOST,NEWLOADCOST

Rem {begin src/inc/dim.prod.i}
dim 1%,ch_prod,3%,rec_prod
Dim pr_A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}

Rem {begin src/inc/dim.prwh.i}
dim 1%,ch_prwh,3%,rec_prwh,Key_prwh$[16]
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]


DIM 3%,L5[3],S3[17]
DIM 2%,L6[5]
dim l1$[20]

Dim 1%,MCTXBL[9],DCLVL,EFlg[9],afflink,ch_oaip
Dim 2%,PASSINFO[20],CH[99],T1[5],MCODE[9],R5,V1
Dim 3%,T2[25],MCHARGE[9,1],TOT[4],CFIN[8]
Dim A$[30],F$[20],K1$[30],K2$[30],K3$[30],K4$[30],L2$[20],K5$[6],K13$[4],Z$[50]
Dim T1$[42],P1$[156],P9$[50],P60$[50],D1$[10],CURDATE$[8],X$[10],P61$[256]
Dim INVDATE$[8],SHIPDATE$[8],K7$[50],PWHKEY$[40],I$[20],K16$[50]
Dim J$[50],J0$[15],J1$[50],J2$[20],J4$[75],J5$[70],J7$[40],J9$[50],J3$[50]
Dim SCRATCH$[256],SCRATCH1$[256],A1$[142],ORIP$[40],OAIP$[40],MESS$[256]
Dim 1%,P0[1023],H4[2],S1,S2[1],L3[3],I,RASL[5],CHOPEN[20]
Dim 1%,S0[1],J0,J2,J3,J4,J5,J6,J8,J9[2],N1[6],T9[12],P2[4],P1[3]
Dim 3%,T3[2],X3,L7[12],J1,X2,PW_W3[10],AVAIL,A[5],ORDERQTY,R[99]
Dim 2%,H0[12],R1,R2,R3,R4,R6,INVDATE,SHIPDATE,X1,SORDER,EORDER
Dim 2%,L4[3],H5[16],CURDATE,N0,D9[5],NDNC,NDNCBO,SLSM[9]
Dim 2%,MD[7],E,UIDREC[1],JDate[5]
Dim 3%,P3[4],QTYBO,ROT2[25],SCOM[4],OREF[5],REFNO,SORDREC
Dim CA2$[30],Q$[20],F1$[16],USR$[40],custom_customer$[30]
Dim H$[50],DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],lne$[100],INDORD$[500]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]

Dim etr. as edittrack
blank$=" ",blank$
! call dxopen() ! needed?
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!! call dxsave(0,"tmp/tc205!")
COID=IntCo ! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
Close #1 ! getsession open cntrl# as READONLY
F$="cntrl/cntrl"+Str$(COID)
Open #1,f$
ORIP$ = "cntrl/orip" + Str$(COID)
OAIP$ = "cntrl/oaip" + Str$(COID)
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
Mat Read #1,0,182;INVDATE;
Dinvdate=InvDate
Mat Read #1,60,50;P60$;
Mat Read #1,182,60;NDNC;
Mat Read #1,182,64;NDNCBO;
Mat Read #1,3,164;CURDATE$;
Mat Read #1,3,172;CURDATE;
Mat Read #1,115;D9;
Mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(Trim$(custom_customer$))
let s9[4]=205
X2 = INVDATE \ Gosub L_7700 \ INVDATE$ = X$
SHIPDATE$ = X$ \ SHIPDATE = INVDATE
tmp$=Invdate using "&&&&&&"
Call DateToJulian(1,tmp$,tmp1$,F)
If not(F)
	let Jdate[1]=tmp1$ ! inv date as julian
Else
	let JDate[1]=Tim(6) ! bad inv date - use today
Endif
For I = 2 To 24
  Read R1 \ If R1 = -1 Goto L_260
  Read #1,88,Abs(R1);F$;
  If R1 <= 0 Ropen #I,F$ Else Open #I,F$
L_260: Next I
Data "1840","1888","1968","-1792","-1744","-2576","2528","-1","1920","2288","1808","1856","1872"
Data "2128","928","1824","2176","2320","1728","-1","2032","-1","-1"
Rem 2=ORDH, 3=ORDL, 4=ORDM, 5=PROD, 6=ProdWhse, 7=bowork, 8=Sprodlot
!* #10-zone,#11-commodity,#12-cust,#13-ros,#14-rot,#15-prod desc
!* #16-cust tax,#17-sales rep,#18-tax code,#19-sordlot,#20-ccodes
!* #21-delvchrg,#22-miscchrg,#23-afflinkcust,#24-sordtype
!* #9 = sortfile used if enter individual orders!!!
Mat CH = Zer
CH[2] = 10
CH[3] = 5
CH[4] = 11
CH[5] = 12
CH[6] = 6
CH[7] = 13
CH[8] = 2
CH[9] = 14
CH[10] = 3
CH[11] = 15
CH[12] = 16
CH[13] = 17
CH[14] = 18
CH[15] = 8
CH[16] = 19
CH[17] = 20
CH[18] = 21
CH[19] = 22
PASSINFO[0] = 0
PASSINFO[1] = 0
PASSINFO[2] = 0
PASSINFO[3] = 1
PASSINFO[4] = 1
PASSINFO[5] = 0
PASSINFO[6] = 0
PASSINFO[10]=0
ch_prod=5
ch_prwh=6
ch_sot=24
afflink=0
let F$="7/affcustlist"+Str$(COID)
Call FindF(F$,Found)
IF CUSTOM_CUSTOMER$<>"MORRISETTE" and custom_customer$<>"WENELSON"
	LET FOUND=0 ! only on morrisette/nelson?
endif
if found
	afflink=1
	ropen #23,f$
end if
let f$="3/SORDTYPE"+STR$(COID)
ROPEN #24,f$
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
S1 = 3
S2 = 4
! call programdump("tmp/oacpt!","")
If P9$[45,45] = "Y" Or P9$[45,45] = "A" Let S2 = 5
COUNT = 0;CH_PRODLOT = 8
EFlg=0;Message$=""
Call DXGet("U_ABRT",tmp$)
F$=UCase$(Trim$(tmp$))
If F$ <> "" 
	Let Message$="OK - NO UPDATE"
	Call SetOutput(e$,rstr$,1,message$) ! send an ok w/0 message
	Goto L_9020
Endif
chk_again: Mat Read #1,120;P0;
UIDRec[1]=GetUIDRec(e$,IntCo,Userid$) ! Call "getuidrec",UIDREC[1]
If P0[204] <> 0 ! If P0[204]<>UIDREC[1] ! =3  ! "allow same user in?
  CAN_RESET = 1
  Gosub CHECK_IF_CAN_RESET
  r=0  !! use as counter flag
  If Not(CAN_RESET)
	!if not(r)
	!	call "flagreset","SERP204.DL4",e
	!	r=1
	!	if e goto chk_again 
	!endif
    Gosub L_380
  Else 
    !Print @0,19;"Aborted 204 detected. Other flags checked."
    !Print @0,20;"Port no longer in 204, no errors detected."
    !Print @0,21;"205 processing will be allowed."
    !Signal 3,20
    P0[204] = 0
  End If 
End If 
If P0[205] <> 0 ! If P0[205]<>UIDREC[1] ! =4
  CAN_RESET = 1
  Gosub CHECK_IF_CAN_RESET2
  r=0  !! use as counter flag
  If Not(CAN_RESET)
	! CHECK PROGLOCK
	E=3  ! CHECK with time check
	TMP$=" "
	call "proglock.dl4","205",e,TMP$  !! no special flag for delete
	if e  !! found entry
		message$ = "Update may be in process. Please try again in 5 minutes."
		!eflg=eflg+1
		goto L_9020
	endif
	call "flagreset","205.DL4",e
	if not(e) 
		gosub L_374
		GOSUB message
		goto l_9020
	ELSE
		MESSAGE$=""
		eflg=0
	endif
  Else 
    !Print @0,19;"Aborted 205 detected. Other flags checked."
    !Print @0,20;"Port no longer in 205, no errors detected."
    !Print @0,21;"205 processing will be allowed."
    !Signal 3,20
    P0[205] = 0
  End If 
End If

Goto L_500
L_374: Rem accept in proc
R = P0[205]
!Call "getuidinfo",R,USR$
Usr$=GetUIDInfo$(e$,IntCo,R)
EFlg=eflg+1;Message$=Message$+STR$(EFLG)+" ORDERS BEING ACCEPTED BY USER "+USR$[21]+" RUN ACCEPT WHEN DONE"
Return ! Goto L_390
L_380: Rem reg in process
R = P0[204]
!Call "getuidinfo",R,USR$
Usr$=GetUIDInfo$(e$,IntCo,R)
EFlg=eflg+1;Message$=Message$+STR$(EFLG)+Message$+" ORDERS BEING REGISTERED BY USER "+USR$[21]+" RUN ACCEPT WHEN DONE"
Return
L_390: Goto L_9020  ! "Signal 3,20 \ Goto L_9020
L_500: Rem CHECK FOR ORDERS TO ACCEPT
K1$ = " ",K1$ \ K1$ = S1 Using "##"
Search #2,2,1;K1$,R2,E
If E Goto L_580
K3$ = " ",K3$ \ K3$ = S1 Using "##"
If K3$[1,2] <> K1$[1,2] Goto L_580
If Eflg>0 goto L_9010 ! some other issue
Goto ORDER_QUEST
L_580: Eflg=eflg+1;Message$=Message$+Str$(EFLG)+" NO ORDERS TO BE ACCEPTED! "
Goto L_9010 ! Signal 3,20 \ Goto L_9010
ORDER_QUEST: Rem (WEB has a range entry at all times!!!)
Call DXGet("U_SORD",tmp$)
  If tmp$ = "" Let tmp$ = "1"
  SORDER = tmp$ ! \ If Not(SORDER) Goto EDT_SORDER
Call DXGet("U_EORD",tmp$)
Z$=tmp$
  If Z$ = "" Let Z$ = "999999"
  EORDER = Z$ ! \ If Not(EORDER) Goto EDT_EORDER
  If EORDER < SORDER ! "invalid range
    Message$="ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! "
    EFlg=1 !Signal 3,50
    E$=Message$ \ Goto L_9010 ! get out now
  End If 
! ADD INDIVIDUAL ORDER ENTRY
	Call DXGet("U_INDORD",indord$)
	if indord$[1,3]>"   "
		let indord=1
		if indord$[len(indord$)]<>"," let indord$=indord$+","  ! add a trailing comma
	else
		indord=0  ! individual order list
	end if
	If SORDER>1 and EORDER<999999 and indord ! range or individ - NOT BOTH!
		Message$ = "ENTER A RANGE OR INDIVIDUAL ORDERS - CAN NOT HAVE BOTH!"
		EFlg=1
	  E$=MESSAGE$ \ Goto L_9010 ! get out now
	End If 
!Print @0,14;'CE';@0,14;"    DO YOU WANT TO ACCEPT ";D1$;"S? (Y/N) ";
!Input ""F$
!Call String(1,F$)

!If F$ <> "" Goto L_900 
L_900: Read #1,18,0;D1$;
! call programdump("/tmp/oalog1!","")
If P9$[45,45] = "Y" Or P9$[45,45] = "A" !Gosub L_5000
	L_5000: Rem WARNING SCREEN
	Call getglobals("blockx",0,blockid$)
	 If blockid$ = "205"
		! call programdump("/tmp/oalog2!","")
		Call env(2,"NEXTBLOCK","205a")
		tmp$=InvDate$[1,2],Invdate$[4,5],InvDate$[7,8]
		!Call dxset("U_IDATE",tmp$) ! SEND AS MMDDYY
		!Call dxset("U_SDATE",tmp$) ! per above, it's the SAME DATE
		Call setoutput(e$,rstr$,1) !1 flag puts 0 status section, puts </page> in
		! programdump("/tmp/oalog3!","")
		End 
			
	 End If 
	Call DXGet("IDATE",tmp1$)
	tmp$ = tmp1$[5,6],tmp1$[1,2],tmp1$[3,4]
	  J1 = tmp$
	If J1 ! check if valid date
	  tmp$=j1 Using "&&&&&&"
		Call DateToJulian(1,tmp$,tmp1$,F)
		If F let Message$="INVALID INVOICE DATE!";eflg=1;E$=Message$ \ goto L_9010
		JDate[0]=tmp1$ ! julian date
		if ABS(JDATE[0]-JDate[1])>7 ! 1 week range
			eflg=1
			Let Message$="INVALID INVOICE DATE! Over 1 week";E$=Message$ \ goto L_9010
		Endif
	Endif
	If J1<=0 let J1=DInvDate ! Goto ASK_INVDATE
	X2 = J1 \ INVDATE = J1
	Gosub L_7700 \ INVDATE$ = X$
	
	ASK_DATEOK: Rem "cct191511
	Call DXGet("SDATE",tmp1$)
	tmp$ = tmp1$[5,6],tmp1$[1,2],tmp1$[3,4]
	  J1 = tmp$
	If J1 ! check if valid date
	  tmp$=j1 Using "&&&&&&"
		Call DateToJulian(1,tmp$,tmp1$,F)
		If F let Message$="INVALID SHIP DATE!";eflg=1;E$=Message$ \ goto L_9010
		JDate[0]=tmp1$ ! julian date
		if ABS(JDATE-JDate[1])>31 ! 1 month range
			Eflg=1
			Let Message$="INVALID SHIP DATE! Over 1 month";E$=Message$ \ goto L_9010
		Endif
	Endif
	If J1<=0 let J1=InvDate
	X2 = J1 \ Gosub L_7700 \ SHIPDATE$ = X$ \ SHIPDATE = X2
	
	! call programdump("/tmp/oalog4!","")
ENDIF ! of auto invoice "A" or "Y" Return 
IF INDORD ! parse out orders to accept
		kpos=0
		do
		  tmp$=indord$[KPOS+1] TO ",":KPOS
		  if kpos>1 and kpos<=len(indord$)
			iord=tmp$
			j4$=" ",j4$;j4$[1,2]="}:" ! make diff from zones
			if iord>0 and iord<=999999
				j4$[3]=iord using "######"
				v1=0
				Search #9,4,1;J4$,V1,E 
				! if e>1 gosub err_search ! allow dupes
			Endif
		  Else ! past or at end
			exit do
		  Endif ! of within string
		Loop
	Endif ! of individ orders
!System "cp /dev/null " + OAIP$
	Ch_oaip=Findchannel()
   ! tmp$="<666> "+OAip$+"!"
  tmp$=OAip$+"!"
  Build #CH_oaip,+tmp$
  Close #CH_oaip
  tmp$="chmod go+rw files/"+OAIP$
  System tmp$
  open #ch_oaip,oaip$
  Print #Ch_oaip;"order accept started ";Msc$(3)
  Print #Ch_oaip;"user ";UIDREC[1];" SPC 5= ";Spc(5)
  
  Eflg[2]=1 ! built ip file flag
  If Not(EFlg) ! only if no problems!
	Mat read #1,120;P0
	I = 205 \ P0[I] = UIDREC[1]
	Mat Write #1,120;P0;
	EFlg[1]=1 ! set port flag
	Print #Ch_oaip;"set cntrl record 120 flag ";msc$(3)
	TMP$="doing a lock"
	call "proglock.dl4","205",1,TMP$
Endif
! Print @0,15;"PLEASE WAIT. . .";
tmp$="Accept in Process"
! Call SetOutput(e$,rstr$,1,tmp$) ! send a message ! CAN NOT DO AT THIS TIME!
Print #Ch_oaip;"start order loop ";Msc$(3)
Scratch$="  "
call dxget("u_snhold",tmp$) 
try snhold=val(tmp$) else snhold=11  !! use 99 if u_snhold not set in prog/custom/sfsystem.txt
K1$ = " ",K1$ \ K1$ = S1 Using "##"
K3$ = K1$ \ R1 = 0
Search #2,2,1;K1$,R2,E
If Not(E) Goto L_2020
L_2000: Rem LOOP IT
L_2010: Search #2,3,1;K1$,R2,E
If E = 2 Goto OUTEND
If E ERROR 11000 ! Gosub ERR_SEARCH
L_2020: If K1$[1,2] <> K3$[1,2] Goto OUTEND
if indord ! individ
	let j4$=" ",j4$;J4$[1,2]="}:"
	let J4$[3]=k1$[3];j4$[9]="" ! trim it
	search #9,2,1;J4$,R,E
	if e goto L_2010 ! the order is not on list!
Endif
Print #Ch_oaip;"status / order ";k1$[1,2];+" / ";k1$[3];" ";Msc$(3)
Mat Read #2,R2;H0
Mat Read #2,R2,78;H4
Mat Read #2,R2,104;H5
Mat Read #2,R2,278;SLSM
Mat Read #2,R2,318;SCOM
Mat Read #2,R2,512;OREF
mat read #14,h0[3],8;rot2;
if rot2[21]
	Print #Ch_oaip;"ship order ";k1$[3];" on hold  ";Msc$(3)
	if P9$[45,45] = "Y" Or P9$[45,45] = "A"
		goto l_2010   !! skip stuff on hold
	endif
endif
if not(indord) ! range
	If H0[7] < SORDER Goto L_2010
	If H0[7] > EORDER Goto L_2010
Endif
If P9$[45,45] = "Y" Or P9$[45,45] = "A" ! check if status bumped
  If H5[7] = 5 Or H5[7] = 9 Or H5[7] = 11 Or H5[7] = 12 Goto L_2010  ! DO NOT INVOICE 
  let s2=5
  if h5[7]=2 ! custom from acme now std 178845
	!if P9$[45,45] = "A" ! per request ONLY IF "A" - per DD for all
	   let s2=4
    else
	   let s2=5
    endif
  !Endif
  if custom_customer$="ACME" if h5[7]=16 let s2=4 ! task 59440 - acme custom - keep at 4
End If 
! now check serial numbers
call "orderserlno.dl4",h0[7]
mat read #14,h0[3],8;rot2;
gosub unpack_holds:
if t9[snhold] 
	print #Ch_oaip;"order ";k1$[3];" failed serial number test ";Msc$(3)
	if P9$[45,45] = "Y" Or P9$[45,45] = "A"goto l_2010  !! skip serial number holds
end if    
if rot2[21]   !! doing as extra check, seems not really needed
	Print #Ch_oaip;"ship order ";k1$[3];" on hold  ";Msc$(3)
	if P9$[45,45] = "Y" Or P9$[45,45] = "A" goto l_2010   !! skip stuff on hold
end if
!
If P9$[45,45] = "Y" Or P9$[45,45] = "A"
  Gosub L_8000
  If BOFLAG
    COUNT = COUNT + 1
    SCRATCH$ = "THERE WERE "
    SCRATCH$ = SCRATCH$ + Str$(COUNT)
    SCRATCH1$ = " ORDERS THAT COULDN'T BE INVOICED DUE TO BACKORDER IN PROCESS"
    SCRATCH$ = SCRATCH$ + SCRATCH1$
	Print #Ch_oaip;"order ";k1$[3];" failed BO test ";Msc$(3)
    Goto L_2010
  end if
End If !"of 'bypass 221'
Gosub L_3000
Gosub L_3050
Print #Ch_oaip;"key reset ";k2$[1,2];" for order ";k2$[3];" ";Msc$(3)
If P61$[55,55] = "N" If S2 = 5 If H5[7] = 16
  H0[0] = 6
Else 
  H0[0] = S2
End If 
let sos4=0
if (h5[7]=2 or (H5[7]=3 AND P60$[22,22]="N")) let sos4=1
if custom_customer$="JPAPER" 
    if (h5[7]=2 or h5[7]=15 or (H5[7]=3 AND P60$[22,22]="N")) let sos4=1
Endif
if custom_customer$="ACME" if h5[7]=16 let sos4=1 ! acme keep whxfer at 4
IF S2<>4 and SOS4=1   
	let h0[0]=4                                  
endif    ! txc 244313
IF P9$[45,45]="Y" OR P9$[45,45]="A" ! txc 244313 bypass 221
	if h0[0]>4 gosub l_5500:
endif
! If P9$[45,45] = "Y" Or P9$[45,45] = "A" Gosub L_5500 ! get inv #
Mat Write #2,R2,0;H0;
Mat Write #2,R2,512;OREF;
Print #Ch_oaip;"write record ";str$(r2);" for order ";k1$[3];" ";Msc$(3)
!If P9$[45,45] = "Y" Or P9$[45,45] = "A" Gosub CHECK_NUMDAY_NOCOMM
If (P9$[45,45] = "Y" Or P9$[45,45] = "A") 
	Gosub CHECK_NUMDAY_NOCOMM
	LET OT2[13]=0
	let keysot$=h5[7] using "##"
	search #ch_sot,2,1;keysot$,rec_sot,e
	if e<>0
		let ot2[13]=0
	else
		mat read #ch_sot,rec_sot,32;ot2;
	endif
	if ot2[13]<>0  gosub updateldcost: ! update load cost

	Gosub DO_ORDER_TOTALS
endif
R1 = R1 + 1
If P60$[17,17] = "Y" Gosub L_4000
If RASL Gosub L_4300
If P60$[17,17] = "Y" And WARNING_FLAG
  Message$="WARNING! WORK ORDER NUMBER IS GREATER THAN OR EQUAL TO 99998"
  Message$=Message$+"AUTO WORK ORDER CREATION IS UNSUCCESSFUL FOR ORDER"+Str$(H0[7])
  !Print @0,22;"PLEASE CALL UNIVERSAL BUSINESS SYSTEMS FOR ASSISTANCE"
  !Print @0,23;'CL';"PRESS <CR> TO EXIT ";
  !Input ""F$
  eflg=1
  Goto L_9010
End If 
Gosub DO_ASN
Goto L_2000
L_3000: Rem DELETE OLD KEY
K2$ = " ",K2$ \ K2$ = K1$
Search #2,5,1;K2$,R6,E
If E ERROR 11000 ! Gosub ERR_SEARCH
If R6 <> R2 Message$="RECORD MISMATCH" \ E = 1 \ ERROR 11000 ! Gosub ERR_SEARCH
Return 
L_3050: Rem INSERT NEW
K2$ = " ",K2$
If P61$[55,55] = "N" If S2 = 5 If H5[7] = 16
  K2$ = 6 Using "##"
Else 
  K2$ = S2 Using "##"
End If 
let sos4=0
If (h5[7]=2 or (H5[7]=3 AND P60$[22,22]="N")) let sos4=1
if custom_customer$="JPAPER" 
    if (h5[7]=2 or h5[7]=15 or (H5[7]=3 AND P60$[22,22]="N")) let sos4=1
Endif
if custom_customer$="ACME" if h5[7]=16 let sos4=1 ! acme keep whxfer at 4
IF S2<>4 and sos4=1
	let k2$=4 using "##"
endif ! txc 244313
K2$[3] = H0[7] Using "######" \ R6 = R2
Search #2,4,1;K2$,R6,E
If E ERROR 11000 ! Gosub ERR_SEARCH
Return 
L_4000: Rem THRU LINES
If P9$[2,2] <> "M" Return 
If H0[0] > 4 Return 
If H5[7] <> 1 Return 
If S2 <> 4 Return 
K4$ = " ",K4$;K4$[1,6] = H0[7] Using "######"
L_4040: Search #3,3,1;K4$,R3,E
If E Return 
X2 = K4$[1,6] \ If X2 <> H0[7] Return 
If (H5[7] = 21 Or H5[7] = 22) And K4$[7,9] = "   " Goto L_4040
Print #Ch_oaip;"line read ";k4$;" ";Msc$(3)
Mat Read #3,R3,8;L3;
Mat Read #3,R3,16;L4;
Mat Read #3,R3,140;L2$;
Mat Read #3,R3,168;L7;
Mat Read #3,R3,256;S0;
If L3[0] <> 0 Or L3[1] <> 1 Goto L_4040
If L7[2] <= 0 Goto L_4040
If (L7[3] + L7[4]) <= 0 Goto L_4040
If S0[0] <> 0 Goto L_4040
ORDERQTY = L7[3] + L7[4]
Gosub L_4210 \ Goto L_4040
WARNING_FLAG = 0
Read #1,20,74;Z9;
If Z9 >= 99998
  WARNING_FLAG = 1
  Return 
End If 
S9[2] = R2
S9[4] = 205
S9[5] = R3
Print #Ch_oaip;"swap mx861sw ";k4$;" ";Msc$(3)
Swap 2,"MX861SW.DL4"  !================================  NEEDS WEB/DL4 VERSION ==================
!Print @0,16;'CE';@30,2;'CL';
!Print @0,16;
Goto L_4040
L_4210: Rem READ ITEM
Mat Read #5,L4;P1$;
If P1$[139,139] <> "M" Return 
If P1$[140,151] <> L2$[1,12] Return 
Mat Read #5,L4,256;A;
AVAIL = 0;PWHKEY$ = " ",PWHKEY$;AVAILQTY = 0
AVAIL = A[0] - (A[1] + A[3])
WHSE = H4[2]
PWHKEY$ = P1$[140,151];PWHKEY$[13] = WHSE Using "##"
Search #6,2,1;PWHKEY$,R6,E
If Not(E)
  Mat Read #6,R6,78;PW_W3;
  AVAIL = PW_W3[0] - PW_W3[2]
End If 
Gosub GET_QTYBO
AVAIL = AVAIL - QTYBO
AVAILQTY = AVAIL + ORDERQTY
If AVAILQTY >= ORDERQTY Return 
Return 1
L_4300: Rem RASL ASSIGN LOCATION / check for "NONE"
S9[2] = R2;S9[4] = 205;S9[5] = 0
CHOPEN[0] = 1;CHOPEN[1] = 5;CHOPEN[2] = 2;CHOPEN[3] = 3;CHOPEN[4] = 0
CHOPEN[5] = 0;CHOPEN[6] = 8;CHOPEN[7] = 0;CHOPEN[8] = 0;CHOPEN[9] = 0
Call "MXRASL5.DL4",intco,Ctlc,S9[],CHOPEN[]
Return 

updateldcost: ! update load cost
if not (ot2[13]) return
K4$ = " ",K4$
K4$[1,6] = H0[7] Using "######"
do
	Search #3,3,1;K4$,r3,E 
	If E>2 Gosub ERR_SEARCH
	if e<>0 exit do
	X2 = K4$[1,6]
	If X2 <> H0[7] exit do
	Gosub L_7100 ! read line items
	If S0[0]<> 3 ! not a message line
		gosub calcnewload:
	endif
loop
return

!!!!
L_7100: Rem "===================================== read line record
Mat Read #3,R3,8;L3; !
Mat Read #3,R3,16;L4; !
Mat Read #3,R3,32;L5;
Mat Read #3,R3,56;L6;
Mat Read #3,R3,168;L7; !
Mat Read #3,R3,256;S0; !
Mat Read #3,R3,260;S3;
mat read #3,R3,494;lc0;
mat read #3,R3,140;l1$;
Return! 

! ---------------------------------------------------
read_prod:! read product file
Rem {begin src/inc/read.prod.i}
    Mat Read #CH_PROD,REC_PROD,0;PR_A$
    Mat Read #CH_PROD,REC_PROD,156;B
    Mat Read #CH_PROD,REC_PROD,256;A
    Mat Read #CH_PROD,REC_PROD,460;A1
    Mat Read #CH_PROD,REC_PROD,508;A2
    Mat Read #CH_PROD,REC_PROD,512;PFU1
    Mat Read #CH_PROD,REC_PROD,554;PFU2
    Mat Read #CH_PROD,REC_PROD,596;PRPARC
    Mat Read #CH_PROD,REC_PROD,620;LM
    Mat Read #CH_PROD,REC_PROD,624;PR_PO
    Mat Read #CH_PROD,REC_PROD,628;AGEDAY
    Read #CH_PROD,REC_PROD,630;LLC
    Mat Read #CH_PROD,REC_PROD,632;PSN$
    Mat Read #CH_PROD,REC_PROD,652;PSN
    Mat Read #CH_PROD,REC_PROD,660;U2
    Mat Read #CH_PROD,REC_PROD,664;LBSORD
    Mat Read #CH_PROD,REC_PROD,670;U4
    Read #CH_PROD,REC_PROD,678;U3
    Mat Read #CH_PROD,REC_PROD,684;U3$
    Mat Read #CH_PROD,REC_PROD,744;HZ$
    Mat Read #CH_PROD,REC_PROD,834;A3
    Mat Read #CH_PROD,REC_PROD,846;PFTB
    Read #CH_PROD,REC_PROD,854;UPCT
    Mat Read #CH_PROD,REC_PROD,856;C1$
    Mat Read #CH_PROD,REC_PROD,894;PR_C4
    Read #CH_PROD,REC_PROD,938;PF_LOAD2
    Mat Read #CH_PROD,REC_PROD,944;PR_A2$
    Mat Read #CH_PROD,REC_PROD,974;PFCO
    Mat Read #CH_PROD,REC_PROD,990;PLV
    Mat Read #CH_PROD,REC_PROD,1002;PLC
    Mat Read #CH_PROD,REC_PROD,1018;PFN
    Mat Read #CH_PROD,REC_PROD,1030;STK
    Mat Read #CH_PROD,REC_PROD,1048;FDT
    Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
    Mat Read #CH_PROD,REC_PROD,1066;PRBASE
    Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
    Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
    Mat Read #CH_PROD,REC_PROD,1088;FUT
    Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
    Mat Read #CH_PROD,REC_PROD,1108;PRREDI
    Mat Read #CH_PROD,REC_PROD,1120;PIC$
    Mat Read #CH_PROD,REC_PROD,1270;PRD0
    Mat Read #CH_PROD,REC_PROD,1282;PRIML$
    Mat Read #CH_PROD,REC_PROD,1294;PRD1
    Mat Read #CH_PROD,REC_PROD,1304;PRD2
    Rem {end read.prod.i}
return
! --------------------------------------------------
read_prwh: ! read prodwhse ifle
	Rem {begin src/inc/read.prwh.i}
		Mat Read #CH_PRWH,REC_PRWH,0;W1$
		Mat Read #CH_PRWH,REC_PRWH,32;W1
		Mat Read #CH_PRWH,REC_PRWH,38;W2
		Mat Read #CH_PRWH,REC_PRWH,78;W3
		Mat Read #CH_PRWH,REC_PRWH,228;W5
      Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
      Read #CH_PRWH,REC_PRWH,396;WHLPOOL
      Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
      Read #CH_PRWH,REC_PRWH,404;FCWGT
      Mat Read #CH_PRWH,REC_PRWH,420;W0
      Mat Read #CH_PRWH,REC_PRWH,428;WH7
      Mat Read #CH_PRWH,REC_PRWH,444;WH8
      Mat Read #CH_PRWH,REC_PRWH,540;WH9
      Mat Read #CH_PRWH,REC_PRWH,696;W7
      Mat Read #CH_PRWH,REC_PRWH,756;WH3$
      Mat Read #CH_PRWH,REC_PRWH,780;WHLV
      Read #CH_PRWH,REC_PRWH,798;WHRPLN
      Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
      Mat Read #CH_PRWH,REC_PRWH,842;WHLM
      Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
      Read #CH_PRWH,REC_PRWH,894;RESTRICTED
      Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
      Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
      Read #CH_PRWH,REC_PRWH,922;VLIST
      Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
      Read #CH_PRWH,REC_PRWH,938;WHBASE
      Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
      Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
      Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
      Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
      Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
      Rem {end read.prwh.i}
return
!------------------------------------------------
CALC_LOAD: Rem
PREC[0] = REC_PROD
IF NOT(PREC[0]) LET PREC[0]=L4[0]
PREC[2] = FNR(Abs((L6[4] * L7[2]) / A[5]))
If L6[4] And L6[4] <> A[6] ! line lbs different from prod file lbs
  PREC[3] = L6[4]
Else 
  PREC[3] = 0
End If 
CNVTA = -999 ! SET TO CALCULATE BASED UPON PROD/PRODWHSE
OTYPE = - H5[7] 
Call "MXLOAD5.DL4",OTYPE,WH,LTBL,PREC[],CNVTA,Intco,E$,RSTR$
Return 

calcnewload: ! calc new load cost based upon order type
if l3[0]<>0 return ! not a stock item
if lc0=11 return !11 - special salesman cost
if lc0=10 return ! !10 - rebate salesman cost 
if ot2[13]<>1 return ! flag to update load cost
if l4[0]<=0 return ! no product record number
! read the product file
REC_PROD = L4[0]
gosub read_prod:   
let ld1=0 ! that is the new load cost
ORGLOADCOST=0
NEWLOADCOST=0
If P9$[32,32] = "Y" ! warehouse pricing
	! get prodwhse file
	let whlm[0]=0;w3[17]=0
	Key_prwh$ = " ",Key_prwh$
	Key_prwh$[1,12] =L1$[1,12]
	Key_prwh$[13,14] = H4[2] Using "##"
	Search #CH_PRWH,2,1;Key_prwh$,REC_PRWH,E \ If E goto outend:
	If Not(E)
		gosub read_prwh: 
	ELSE
		GOTO ENDWHLOAD: ! no warehouse record
	endif
	if whlm[0]=0 
       	LD1 = W3[17]
		!goto endwhload:
		if LD1<=0 goto endwhload:
		GOTO ENDLOADCOST:
	endif
	WH = H4[2];LTBL = WHLM[0]
    Gosub CALC_LOAD
    LD1 = CNVTA
	if ld1>0 goto endloadcost: 
End If 
	endwhload: ! end warehouse load costing
	! check the product load table
	If LM[0]
        WH = 0;LTBL = LM[0]
        Gosub CALC_LOAD
        LD1 = CNVTA 
    Else 
       	LD1 = B[8]
    End If ! find load table
	endloadcost: ! end finding load cost
	if ld1>0 and ld1<>l5[1]
		LET ORGLOADCOST=L5[1]
		LET NEWLOADCOST=LD1	
		Mat Read #3,R3,32;L5;
		Mat Read #3,R3,168;L7;
		Mat read #3,R3,250;UN; 
		Mat read #3,R3,260;S3;
		Mat read #3,R3,452;UNF   
		let l5[1]=ld1
		If Not(UNF[5]) Let UNF[5] = 1
		netcost=l5[1]
		S3[13] = FNR(L7[2] * l5[1])
		If H5[7] = 4 Or H5[7] = 15 ! "bill and hold
			S3[12] = FNR(S3[7] * NETCOST)
		Else 
			S3[12] = FNR(L7[4] * NETCOST)
		End If 
		If UN[2] = -2 Let S3[12] = FNR(NETCOST * Sgn(L7[4]));S3[13] = FNR(NETCOST[0] * Sgn(L7[2]))
		Mat Write #3,R3,32;L5;
		Mat Write #3,R3,260;S3;
	endif
	endloadcstupd: ! 
	if p60$[44,44]="Y" then gosub edittrack ! for everyone? lets try it
return

Edittrack: ! do edittracking
FOR I=0 TO 2 \ LET FCHAN[I]=-1 \ NEXT I
if p60$[44,44]<>"Y" return
IF ORGLOADCOST=NEWLOADCOST return
FOR I=0 TO 2 \ LET FCHAN[I]=-1 \ NEXT I
! fchan[0] =-1 edittrack not open
! fchan[1] =-1 usercntrl not open
etr.Status=h0[0] ! STATUS
etr.OrdNum=H0[7]
etr.LineNum=L3[2]
etr.ProdCode$=l1$[1,12]
etr.etaction=205
!CALL $LOGIC,1,2^0,PL1[3],etnonstock                                             
etr.NstkFlag = 0 ! stock items only
etr.umsell=0
let etr.umsell=un[0]
! There is no qty change ... just for tracking
etr.OrgQtyOrd=l7[2]
etr.OrgQtyShip=l7[4]
etr.OrgQtyBO=l7[3]
etr.NewQtyOrd=l7[2]
etr.NewQtyShip=l7[4]
etr.NewQtyBO=l7[3]
!
etr.InvNum=oref[1]
etr.OrgOrdTot=t2[0]
etr.CustNum=h0[4]
etr.Printer=0
let etr.OrgLoadCost=0
let etr.NewLoadCost=0
let etr.umcost=0
IF ORGLOADCOST<>0 OR NEWLOADCOST<>0
	IF ORGLOADCOST<>NEWLOADCOST
		let etr.umcost=un[2]
		let etr.OrgLoadCost=ORGLOADCOST
		let etr.NewLoadCost=NEWLOADCOST ! get load cost
	ENDIF
ENDIF
ETR.AccessCode$ = "Invoicing"+BLANK$
Call MakeEdittrack(e$,IntCo,fchan[],etr.)
Let e$=""
Return

L8200: Rem CHECK WHSINFO FOR WHSE TO MAKE IN
!If Err 0 Rem
!Close #89
!If Err 0 Gosub ERR_TRAP
CHAN=FindChannel()
Read #1,88,2768;I$[1,16];
Open #CHAN,I$
If WHSE < 1 Let WHSE = 1
If WHSE > D9[5] Let WHSE = 1
Mat Read #CHAN,(WHSE - 1),122;N1;
If N1[1] > 0 And N1[1] <= D9[5] Let WHSE = N1[1]
Close #CHAN
Return 
L_5500: Rem GET INVOICE NUMBER AND ASSIGN DATE
If H0[0]<5 return ! did not invoice it!
H0[8] = INVDATE
H0[10] = SHIPDATE
Read #1,20,180;REFNO
REFNO = REFNO + 1
Write #1,20,180;REFNO;
OREF[1] = REFNO
Print #Ch_oaip;"assign invoice number ";str$(oref[1]);" for order ";k1$[3];" ";Msc$(3)
Return 

L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
CHECK_NUMDAY_NOCOMM: Rem"cct146887 check number of day for no commission
if h0[0]<5 return
If H5[7]=19 Return ! "not on this order type
Print #Ch_oaip;"check_numday_nocomm for order ";k1$[3];" ";Msc$(3)
NOCOMM = 0
X2 = H0[8] \ Gosub L_7820 \ JINVDATE = 0 \ JINVDATE = X2
X2 = H0[10] \ Gosub L_7820 \ JSHPDATE = 0 \ JSHPDATE = X2
If H0[5] !"backorder
  If NDNCBO If (JINVDATE - JSHPDATE) > NDNCBO Let NOCOMM = 1
Else 
  If NDNC If (JINVDATE - JSHPDATE) > NDNC Let NOCOMM = 1
End If 
If NOCOMM
  For I = 0 To 4
    SLSM[I + 5] = 0
    SCOM[I] = 0
  Next I
  Mat Write #2,R2,278;SLSM;
  Mat Write #2,R2,318;SCOM;
End If 
Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
GET_QTYBO: Rem FIND QTY B/O
QTYBO = 0
K16$ = " ",K16$
K16$[1,12] = P1$[140,151]
K16$[13,14] = WHSE Using "##"
QTYBO_LOOP: Rem
Search #CH_PRODLOT,3,4;K16$,R16,E
If Not(E) And K16$[1,12] = P1$[140,151]
  If Not(WHSE) Or Val(K16$[13,14]) = WHSE
    Mat Read #CH_PRODLOT,R16,82;P3;
    QTYBO = QTYBO + P3[4]
    Goto QTYBO_LOOP
  End If 
End If 
Return 
L_8000: Rem  ======= make sure invoice is not in bowork file
BOFLAG = 0 \ K7$ = " ",K7$
K7$[1,6] = H0[4] Using "######" \ K7$[7,12] = H0[7] Using "######"
L_8030: Search #7,3,2;K7$,R,E \ If E = 2 Return 
X2 = K7$[1,6] \ If X2 <> H0[4] Return 
X2 = K7$[7,12] \ If X2 <> H0[7] Goto L_8030
BOFLAG = 99
Return 
DO_ORDER_TOTALS: Rem
if h0[0]<5 return ! not inv'd
K5$ = H0[4] Using "######"
Search #CH[5],2,1;K5$,R5,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Mat Read #CH[5],R5,544;CFIN;
K13$ = " ",K13$ \ K13$ = H0[11] Using "###"
Search #CH[13],2,1;K13$,V1,E  \ If E ERROR 11000 ! Gosub ERR_SEARCH
S9[2] = R2;S9[4] = 205;S9[5] = 0
Print #Ch_oaip;"ordertotal call for order ";k1$[3];" ";Msc$(3)
! there seems to be a verion that makes the UB call work
Call "ordertotal",S9[],R2,PASSINFO[],CH[],T1[],T2[],MCODE[],MCHARGE[],TOT[],MCTXBL[],DCLVL,R5,V1,CFIN[]
Print #Ch_oaip;"return from ordertotal call for order ";k1$[3];" ";Msc$(3)
Return 
unpack_holds: Rem UNPACK ROT2[21] TO T9[x]
X2 = ROT2[21] \ For K = 1 To 12
  T9[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 

DO_ASN: Rem "need advance shipping notification?
Print #Ch_oaip;"do_asn ";k1$[3];" ";Msc$(3)
Let SordRec=R2 ! "header record #
If Not(SordRec) Return ! "alignment? not order?
Let chopen[1]=1;chopen[5]=12;chopen[6]=20;chopen[8]=2 ! "cntrl,cust,ccode,roh
Let chopen[9]=13;chopen[10]=14;chopen[11]=3;chopen[12]=4 ! "ros,rot,rol,rom
Let chopen[7]=5 ! "product
Let chopen[0]=3 ! " asn status (from) 3=ord accept
Let Scratch1$="AFFASN" ! DO NOT USE SCRATCH! (used elsewhere as message)
Call FindF(Scratch1$,X2)
IF x2 !AFFLINK ASN THERE
	if afflink
		J3$=" ",J3$
		J3$=H0[4] USING "######"
		SEARCH #23,2,1;J3$,R23,E
		IF NOT(E) !is an afflink customer
			Print #Ch_oaip;"call affasn ";k1$[3];" ";Msc$(3)
			call "AFFASN.DL4",SORDREC,chopen[],e$,IntCo,rstr$
		end if
	end if
end if
K5$ = H0[4] Using "######"
Search #12,2,1;K5$,R5,E  \ If E ERROR 11000 ! Gosub ERR_SEARCH
Mat Read #12,R5,0;A1$;
If A1$[142,142] <> "Y" Return 
SORDREC = R2
If Not(SORDREC) Return 
SCRATCH1$ = " ",SCRATCH1$;SCRATCH1$ = "NSCASN"
Call FindF(SCRATCH1$,X2)
If Not(X2) Return 
CHOPEN[1] = 1;CHOPEN[5] = 12;CHOPEN[6] = 20;CHOPEN[8] = 2
CHOPEN[9] = 13;CHOPEN[10] = 14;CHOPEN[11] = 3;CHOPEN[12] = 4
CHOPEN[0] = 3
!Call "NSCASN",SORDREC,CHOPEN[]
Print #Ch_oaip;"call nscasn ";k1$[3];" ";Msc$(3)
Call "NSCASN.DL4",SORDREC,PCHAN[],e$,IntCo,rstr$
If CHOPEN[0] = 0 ! "sent successfully
End If 
Return 

CHECK_IF_CAN_RESET: Rem see if in use flags is bogus
E = 0 \ Call FindF(ORIP$,E)
If (E) ! "found
  EFlg=Eflg+1;Message$=message$+Str$(Eflg)+" ORDER REGISTER INPROCESS DETECTED! CANNOT RE-START."
  SCRATCH$ = ORIP$
  ! System "cat " + ORIP$
  ! Gosub MESSAGE
  CAN_RESET = 0
End If 
Return 
CHECK_IF_CAN_RESET2: Rem see if in use flags is bogus
E = 0 \ Call FindF(OAIP$,E)
If (E) ! "found
  EFlg=Eflg+1;Message$=message$+Str$(Eflg)+" ORDER ACCEPT INPROCESS DETECTED! CANNOT RE-START."
  SCRATCH$ = OAIP$
  USERPORTINFO[1] = 205
  ! System "cat " + OAIP$
  ! Gosub MESSAGE
  CAN_RESET = 0
End If 
Return 
MESSAGE: Rem ADD INFO ON ACCEPT BOMB IF IT COULD BE IN PROGRESS
schan=findchannel()
call findf(scratch$,fnd)
if not(fnd) return
Open #schan,SCRATCH$
MESS1: Read #schan;MESS$;
If MESS$ = "" Close #schan \ Return 
If MESS$[1,4] <> "user" Goto MESS1
Close #schan ! was #99 - it's used for blockid files!
For K1 = 6 To 22
  If MESS$[K1,K1 + 2] = "SPC" Goto MESS2
Next K1
Return 
MESS2: UIDREC = MESS$[6,K1 - 1]
USR$ = " ",USR$
Chan=Findchannel()
Ropen #Chan,"cntrl/USERCNTRL"
If UIDREC > 0 If UIDREC < Chf(Chan) Mat Read #Chan,UIDREC[0],280;Usr$; ! just desc
If UIDREC = -1 Let USR$ = "SYSTEM ADMINSTRATOR"
Close #chan
tmp$=USR$[21]
for k1=1 to len(tmp$)
	if tmp$[k1,k1]<" " or tmp$[k1,k1]>"~" then usr$="        "
next k1
!Print "*******************************************"
message$=message$+"NOTE: SOMEONE MAY CURRENTLY BE RUNNING THE "
If USERPORTINFO[1] = 204 message$=message$+"ORDER REGISTER. "
If USERPORTINFO[1] = 205 message$=message$+"ORDER ACCEPT. "
K1 = 20 \ If tmp$[16,20] = "     " Let K1 = 15 \ If tmp$[11,15] = "     " Let K1 = 10
message$=message$+"PLEASE CHECK " \ If USR$[1,5] <> "     " message$=message$+"WITH "+tmp$[1,K1]
message$=message$+" TO SEE IF THIS IS TRUE."
!Print "IF THIS IS THE CASE, AND THERE HAVE BEEN NO ERRORS ON THE OTHER PORT,"
!Print "PLEASE WAIT UNTIL THEY ARE FINISHED. THEN YOU CAN RUN THIS JOURNAL AGAIN."
message$=message$+"OTHERWISE, IF THERE IS A PROBLEM, PLEASE CONTACT UNIVERSAL."
Return 


ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 


Rem {end rtn.input.s}
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
E$=msg$
Call programdump("tmp/oa205se!","")
Goto ERR_MSG ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
OUTEND: Rem EXIT ROUTINE
Print #Ch_oaip;"got to outend ";Msc$(3)
L_9010: Rem "clear / reset
If Eflg[1]=1 ! we set flag - so unset it
	Mat Read #1,120;P0;
	P0[205] = 0
	Mat Write #1,120;P0;
	Print #Ch_oaip;"reset record 120 flag ";Msc$(3)
	TMP$="do an unlock"
	call "proglock.dl4","205",0,tmp$
Else
	Print #Ch_oaip;"did not reset rec 120 flag ";Msc$(3)
Endif
if ch_oaip then close #ch_oaip
Try ! If Err 0 Rem
	if eflg[2]=1 Kill OAIP$ 
Else
	Rem
End try

if eflg=0
	If SCRATCH$[1,2] <> "  " 
		Message$=SCRATCH$+"  ";RETURNSTATUS=1
	Endif
	Message$=mESSAGE$+" COMPLETE! "+Str$(R1)+" "+D1$+"S ACCEPTED"
	! Input "\15\PRESS <CR> TO EXIT "F$
	!Call SetOutput(e$,rstr$,1,message$) ! send an ok w/0 message
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
AOK=1
endif
if aok=1 goto PISDONE
!If Err 0 Gosub ERR_TRAP
L_9020: !Print 'CS' ! BYPASS RESET / Kill OAIP$
!For i=0 to 90
	!Try Close #I  Else Rem
!Next I

If Eflg>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
	If Eflg>0 let tmp$="THERE ARE "+Str$(EFLG)+" ISSUES "
	tmp$=tmp$+Message$
	Message$=tmp$
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
Endif

! try to send to next program (to get out of 205!!)
PISDONE: ! get out now!
! we have the choice of showing messages or go to a done screen - SHOW MESSAGES!
!Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!Call getglobals("blockx",0,blockid$)
!If blockid$="205"
!	Nextblockid$="999" ! send 'em off to complete?
!	call env(2,"NEXTBLOCK","999") ! nextblockid$)
!	Call setoutput(e$,rstr$,1) !1 flag puts 0 status section, puts </page> in
	! call programdump("/tmp/oalog5!","")
!	END
!Endif
try Call dxclose() else rem
!Close 
!Chain "MX000"
!Stop 
!End 
Else
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
Rem {end rtn.error.s}
! this is the LAST LINE OF THE PROGRAM - DO NOT ADD ANY LINES AFTER THIS!!
