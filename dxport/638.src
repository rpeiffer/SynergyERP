! >>> Program 638
!
! description  General Ledger Report #3 - G/L detail drill down
!
! loadsave -w -n 100,10 -o prog/dxport/638.dl4 src/638.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 12, 2004  11:14:49
Rem /w/papermaster/r2002//usr/acct/mary/work/devl/ap/gl638.src (univ2) [mary] {45716}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem GL638  G/L REPORT FORMAT 2
!

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"                      
Declare External Function GetUIDRec,GetUIDInfo$ 
Try 
If Err 0 Gosub ERR_TRAP
!!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Rem {begin dim.rtn.input}
DIM 1%,APBTH[999],2%,PREVACCT
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Dim GLT$[80],GLTKEY$[50],4%,GLT0,R[10]
Dim REPTYPE$[1],PERIOD$[4],CP1$[4],CP2$[4],groupid$[1],keyacct$[30]
dim fye$[4]
dim 1%,archhist
Dim 2%,CPER[1],SUPRZ,C1[2],DETPRNT,SUBT,SUBPER[1]
Dim 3%,REC_SRT,GLAMT,GLACCT$[12],GLSRC$[2],rec_uac
Dim K2$[20],K9$[50],K10$[10]
Dim TMPFNAME$[30],CMD$[50]
Dim V$[12],D1$[26]
Dim S1$[4]
Dim H$[4],3%,P[1]
Dim S$[6],I$[8],Ex$[14],bex$[14]
Dim F4$[16],C$[140],1%,D9,2%,A9,F9$[2]
Dim 4%,N1,N2,N3
Dim 1%,S9[6],glch
Dim 4%,T3[5],B3[5],H3[5],SACCT,EACCT,ACCT,U3[5]
Dim 4%,D3
Dim M$[36]
Dim 3%,F,F$[20],G$[2],B1,F1,acctnum
! for profit center
dim 1%,plen
dim k21$[50],pmask$[8],PCNAME$[30]
Dim 3%,rec_pc,pc[100],tmp99$[2000],work$[2000],tmp98$[50]
Dim 3%
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[9000],tmp1$[800]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[5000],bsdel$[10],esdel$[10],rdel$[10]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[6000]
Dim blockid$[100],msg$[100],groupid$[1]
dim 2%,glt1[4],prgnum,1%,srcprg,srccode$[2]
DIM DESC$[200]
dim 1%,jscode[12],jscode$[12],rcode,rsncode
dim lines$[80]
dim wo$[6],jsprnt$[1]
dim proddesc$[30],vrsrc$[40]
dim 3%,entry,prodcode$[12],comment$[16],1%,reason,whse
dim trans$[12],2%,trandate,vend,4%,rec_gld,gldamt
dim keygld$[50],keychk$[50],fname$[20],vendname$[30]
dim proddesc$[30]
dim 2%,cust,custname$[30],3%,artran,potran
dim 2%,ponum,pocntrl
dim 2%,check,1%,bank
dim 3%
!let jscode$="ACDEPMRSQVWX"
let jscode$= "ACDE MRS    "
for x=0 to 12\jscode[x]=0\next x
let lines$="-",lines$
!Try call dxopen() Else Rem ! needed?
!Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!Call dxsave(0,"/tmp/md638.txt!")

tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(intco)
ROpen #1,J$
eflag=0
returnstatus=0 ! blockid no errors
pageflag=0
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
G$[1,1] = intco Using "#"
g$[2,2]=groupid$

!
!!Print 'CS';"-gl638-"; Tab 20;"GENERAL LEDGER REPORT #2 "
Mat Read #1,51,6;S9;
Mat Read #1,51,94;archhist;
Ex$ = "###,###,###.##"
bex$= "-----------.##"

try      
	J9 = Chf(0)    
	let l9=60
	let j8=0
else
	let browser=99
	let j8=browser
end try
            
IF NOT(J8) ! to the printer               
	L9 = 60;SRCPRT = 0
ELSE
	L9=99999
Endif
srcprt=0
l8=0

Call DXGet("u_group",groupid$)
G$[1,1] = intco Using "#"
G$[2,2] = groupid$
F4$ = "1/ACF",G$
Call FindF(F4$,A9)
If Not(A9) 
	eflag=eflag+1
	Let message$ = "File ",F4$," not found!" 
	goto outend:
endif
Ropen #5,F4$
!

let eflag=0
let message$=""
if s9<>0!
	call dxget("CLIENT",tmp$) \ S = tmp$ ! Enter Client #
else
	let s=1
endif

call dxget("SPERIOD",tmp$) \ CPER[0] = tmp$ ! Starting Current Accounting Period (MMYY)
call dxget("EPERIOD",tmp$) \ CPER[1] = tmp$ ! Ending Current Accounting Period (MMYY)
REPTYPE$="I" ! call dxget("TYPEREPORT",REPTYPE$) ! D=Detail,  S=Summary,  J=Source Summary, I=Detail With Drill Down 
DETPRNT=1 ! JOURNAL SOURCE call dxget("PRTOPTION",tmp$) \ DETPRNT = tmp$ ! 1=Journal Source 2=Posting Date
SUBT=1 !call dxget("SUBTOTALS",tmp$) \ if rtrim$(tmp$) = "" Let SUBT = 0 else Let SUBT = 1 ! Print Subtotals (Y/N)
call dxget("SACCT",tmp$) \ SACCT = tmp$\ if rtrim$(tmp$)="" let sacct=1 ! Starting Account Number
call dxget("EACCT",tmp$) \ if rtrim$(tmp$) = "" Let EACCT = 99999999 else Let EACCT = tmp$ ! Ending Account Number
SUPRZ=0!call dxget("BALANCE",tmp$) \ if rtrim$(tmp$) = "" Let SUPRZ = 0 else Let SUPRZ = 1 ! Suppress Zero Account Balance Printing (Y/N)

let profcent=0 ! no profit centrer
If s9[3]<>0 
	call dxget("PROFCENT",tmp99$)
	if rtrim$(tmp99$)="" let tmp99$="0"
	let profcent=0
	if tmp99$<>"0"
		F$ = intCO Using "1/GLPCTR#"
		Try
			Ropen #21,F$ !
		Else
			let message$="Profit Center File Does Not Exist "
			let eflag=eflag+1
			goto outend:
		end try
		let plen=s9[5]-s9[4]+1\if plen<0 let plen=1
		if plen>9 let plen=9
		let pmask$[1,plen]="#",pmask$[1,plen]
NextType: ! 
		if len(rtrim$(tmp99$))<31
			let tmp98$=rtrim$(tmp99$)
		else
			let tmp98$=rtrim$(tmp99$[1,30])+",etc."
		endif
		x$=""
		X2 = 0 \ Let work$ = tmp99$ To "," : X2 
		if rtrim$(work$)="" goto exittype:
		If x2<>0 and x2>len(tmp99$) let x2=0
		IF LEN(work$)>0 AND LEN(work$)<7
			let tmp3=work$
			K21$[1,4] = S Using "####";K21$[5,4 + PLEN] = tmp3 Using PMASK$   
			Search #21,2,1;K21$,rec_pc,e                                    
			If e = 1 
				Let e$ = "Profit center "+str$(tmp3)+" not on file!!!" \ error 10000 
			endif
			Mat Read #21,rec_pc,8;PCNAME$;
			let profcent=profcent+1
			let pc[profcent]=tmp3
	    endif  
		if profcent=99 goto exittype:
        If X2<>0 Let tmp99$ = tmp99$[X2 + 1]
		if x2<>0 Goto NextType  
		ExitType: !
		if profcent=1
			let tmp3=pc[1]
			K21$[1,4] = S Using "####";K21$[5,4 + PLEN] = tmp3 Using PMASK$   
			Search #21,2,1;K21$,rec_pc,e                                    
			If e = 1 
				Let e$ = "Profit center "+str$(tmp3)+" not on file!!!" \ error 10000 
			endif
			Mat Read #21,rec_pc,8;PCNAME$;
		endif
	endif                                  
endif


V$ = " ",V$ \ V$[3,6] = S Using "####"
Search #5,2,1;V$,V1,E 
If E<>0
	Let message$ = "Invalid client "+str$(s)+" client not on file!" ! 
	let eflag=eflag+1
	goto outend: 
endif
Mat Read #5,V1,0;C$;

D9 = C$[135,136]
If D9 > 9 Let F9$ = D9 Using "##"
If D9 < 10 Let F9$ = D9 Using "#"
CLIENT = S
S$ = S Using "####"
For I = 1 To 4
  If S$[I,I] = " " Let S$[I,I] = "."
Next I
F4$ = F9$,"/GLM",G$,S$
Call FindF(F4$,A9)
If Not(A9) 
	Let message$ = "G/L Master File ",F4$,"not found"  
	let eflag=eflag+1
	goto outend:
endif
ARCHHIST=0 ! NOT ON THIS REPORT
F4$ = F9$,"/GLM",G$[1,2],s$
Call FindF(F4$,A9)
If Not(A9) 
	if archHist<>0
		message$ = "Archived File ",F4$," not found " !\ error 10000
		let eflag=eflag+1
		goto outend: 
	else
		message$ = "File ",F4$," not found "! \ error 10000
		let eflag=eflag+1
		goto outend: 
	endif
ENDIF
!!  Print @0,23;'CL RB';"FILE ";F4$;"NOT FOUND "; \ Signal 3,50 \ Goto OUTEND
!!End If 
Ropen #2,F4$
V$ = " ",V$
Search #2,2,1;V$,V1,E 
if e<>0
	let message$="G/L Master Control Record Not on File "!!\ If E Gosub ERR_SEARCH
	let eflag=eflag+1
	goto outend:
endif
Mat Read #2,V1,70;D3;
H$ = D3 Using "####"
P[0] = H$[1,2]
P[1] = H$[3,4]
D5 = P[1]
If D5 <> 14 If D5 <> 39 Let D5 = 39
Dim 4%,M3[D5],A3[D5]
Mat Read #2,V1,70;A3;
! Mat Read #1,88,128;F$; \ Ropen #10,F$
!
! STARTING PERIOD
comd = 0
CP1$ = CPER[0] Using "&&&&"
PERIOD$ = CP1$[3,4],CP1$[1,2]
B1 = PERIOD$[1,4]
!
Gosub VERIFYPERIOD
!if comd = 2 Let e$ = "Invalid starting period, period not found!" \ error 10000
!if comd = 1 Let e$ = "Invalid starting period!" \ error 10000
if comd = 1
	Let MESSAGe$ = "Invalid starting period, must be between MMYY format!" ! 
	let eflag=eflag+1
	goto outend:
endif 
if comd = 2 
	Let message$ = "Invalid staring period, period not found!" 
	let eflag=eflag+1
	goto outend:
endif
C1[0] = X1
C1[1] = X3
!
CP2$ = CPER[1] Using "&&&&"
PERIOD$ = CP2$[3,4],CP2$[1,2]
F1 = PERIOD$[1,4]
Gosub VERIFYPERIOD 
!if comd = 2 Let e$ = "Invalid ending period, period not found!" \ error 10000
!if comd = 1 Let e$ = "Invalid ending period!" \ error 10000
if comd = 1
	Let message$ = "Invalid ending period, must be in MMYY format!" 
	let eflag=eflag+1
	goto outend:
endif
if comd = 2
	Let message$ = "Invalid ending period, period not found!" 
	let eflag=eflag+1
	goto outend:
endif
C1[2] = X1
!If C1[0] > C1[2] Let e$ = "Invalid ending date, must be >= starting date!" \ error 10000
If C1[0] > C1[2] 
	Let message$ = "Invalid ending period, must be >= than starting period!" 
	let eflag=eflag+1
	goto outend:
endif
!
!If SACCT < 0 or SACCT > 99999999 Let e$ = "Invalid starting account number, must be between 0 and 99999999!" \ error 10000
!If EACCT < SACCT or EACCT > 99999999 Let e$ = "Invalid ending account number, must be between starting account number and 99999999!" \ error 10000
!
! starting & ending account #'s
If SACCT < 0 or SACCT > 99999999 
	Let message$ = "Invalid starting account number, must be between 0 and 99999999!" 
	let eflag=eflag+1
	goto outend:
endif
If EACCT < SACCT or EACCT > 99999999
	Let message$ = "Invalid ending account number, must be between starting account number and 99999999!" 
	let eflag=eflag+1
	goto outend:
endif 
let gldet=0!
if reptype$="I" ! g/l drill down
	!IF browser<>0 ! to the browser
	!	let e$="Drill Down Option Not Available with Browser selection "\Error 10000
	!endif
	call dxget("JSCODE",tmp$) \let tmp$=rtrim$(tmp$)!!Journal Source Code or O: all
	let jsprnt$=tmp$
	let ctr=0
	if len(tmp$)<>1
		let message$="Journal Source needs to be selected"
		let eflag=eflag+1
	endif
	for x9=1 to 12
		if tmp$[1,1]=jscode$[x9,x9]
			let jscode[x9]=1
			let ctr=99
		endif
	next x9
	endsetjscode: ! end setting the jscode
	if not(ctr)
		let e$="Invalid Journal Source Entered" \ Error 10000
	endif
	let gldet=99 ! flag to include g/l drill down
	let reptype$="D"
endif
If REPTYPE$ <> "D" Let DETPRNT = 2 \ SUBT = 0
!
!
!If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
 ! 
 ! Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
!End If
!
Goto GETGLT !!add
!

!
GETGLT: Rem verify within same fiscal year and file exists
FYEMO = C$[128,129]
BEGMO = CP1$[1,2] \ BEGFYE = CP1$[3,4]
ENDMO = CP2$[1,2] \ ENDFYE = CP2$[3,4]
If BEGMO > FYEMO Let BEGFYE = BEGFYE + 1 \ If BEGFYE > 99 Let BEGFYE = 0
If ENDMO > FYEMO Let ENDFYE = ENDFYE + 1 \ If ENDFYE > 99 Let ENDFYE = 0
!If BEGFYE <> ENDFYE Let e$ = "Invalid periods, must be in same fiscal year!" \ error 10000
!!  Print @0,23;'CL RB';"ACCOUNTING PERIODS MUST BE IN SAME FISCAL YEAR";
If BEGFYE <> ENDFYE 
	Let  message$ = "Invalid periods, must be in same fiscal year!" 
	let eflag=eflag+1
	goto outend:
endif
FYE = ENDFYE
S1$[1,2] = ".."
S1$[3,4] = FYE Using "&&"
F$ = F9$,"/GLT",G$,S$,S1$
Call FindF(F$,A9)
If Not(A9) 
	Let  message$ = "Invalid transaction file, transaction file for fiscal year ",S1$[3,4]," does not exist!"
	let eflag=eflag+1
	goto outend:
endif!!  Print @0,23;'CL RB';"G/L Transaction File For Fiscal Year ";S1$[3,4];"Does Not Exist ";
ROPEN #3,F$
If FYE = 0
  PERIOD$ = B1 Using "&&&&"
  If PERIOD$[1,2] = "00" Let B1 = B1 + 10000
  PERIOD$ = F1 Using "&&&&"
  If PERIOD$[1,2] = "00" Let F1 = F1 + 10000
End if
If REPTYPE$ = "J" 
	REC_UAC = GetUIDRec(e$,IntCo,Userid$)
	Gosub CREATE_GLSRTMP
endif
L_905: !!If Err 0 Gosub ERR_ESCAPE
STARTPRINT: Rem  start print
let j8=browser
If J8 ! dx xml, setup rstr$
  !<section>
  search rstr$,"<section>",e
  if e<>0
	tmp$=rstr$[1,e-1]
	rstr$=tmp$
  endif
  tmp$ = bsdel$,"638",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 

Call Time(D1$)
V9 = 0;L = 99;PCTR = 0
For I = 0 To 5 \ B3[I] = 0 \ T3[I] = 0 \ H3[I] = 0 \ Next I
!
if j8 
	tmp$=""
	If s9<>0 let tmp$ ="Client",fdel$
	! tmp$ = tmp$, "CLIENT NAME",fdel$
	tmp$ = tmp$, "Account",fdel$
	tmp$ = tmp$, "Acct Description",fdel$
	tmp$ = tmp$, "Period",fdel$
	tmp$ = tmp$, "JS",fdel$
	tmp$ = tmp$, "Post Date",fdel$
	tmp$ = tmp$, "Batch",fdel$
	if jsprnt$="C" or jsprnt$="S" or jsprnt$="E" 
		if jsprnt$="C" let tmp$=tmp$,"C/M #",fdel$
		if jsprnt$="S" let tmp$=tmp$,"INV #",fdel$
		if jsprnt$="E" let tmp$=tmp$,"Tran#",fdel$
		tmp$=tmp$,"Date",fdel$
		tmp$=tmp$,"Cust #",fdel$
		tmp$=tmp$,"Cust Name",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	if jsprnt$="R"
		tmp$=tmp$,"Entry#",fdel$
		tmp$=tmp$,"Date",fdel$
		tmp$=tmp$,"Cust #",fdel$
		tmp$=tmp$,"Cust Name",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	if jsprnt$="D"
		tmp$=tmp$,"Check#",fdel$
		tmp$=tmp$,"Bank#",fdel$
		tmp$=tmp$,"Date",fdel$
		tmp$=tmp$,"Vend #",fdel$
		tmp$=tmp$,"Vend Name",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	if jsprnt$="A"
		tmp$=tmp$,"Transaction",fdel$
		tmp$=tmp$,"Date",fdel$
		tmp$=tmp$,"Vend #",fdel$
		tmp$=tmp$,"Vendor Name ",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	if jsprnt$="M"
		tmp$=tmp$,"Entry#",fdel$
		tmp$=tmp$,"Product",fdel$
		tmp$=tmp$,"Comment",fdel$
		tmp$=tmp$,"Reas",fdel$
		tmp$=tmp$,"Wh",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	!!! not used
	if jsprnt$="W"                      
		tmp$=tmp$,"W.O.#",fdel$        
		tmp$=tmp$,"Comp Date",fdel$   
		tmp$=tmp$,"Product",fdel$     
		tmp$=tmp$,"Description",fdel$ 
		tmp$=tmp$,"Amount",fdel$       
	endif                               
	!!! not currently used for po/gl interface
	if jsprnt$="X"
		tmp$=tmp$,"Cntrl#",fdel$
		tmp$=tmp$,"PO/DM#",fdel$
		tmp$=tmp$,"Product",fdel$
		tmp$=tmp$,"Prod Description",fdel$
		tmp$=tmp$,"Wh",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	! not currently used - po/gl variance
	if jsprnt$="V"
		tmp$=tmp$,"Product",fdel$
		tmp$=tmp$,"Description",fdel$
		tmp$=tmp$,"Source",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	! purchase orders and debit memos not currently used
	if jsprnt$="P" or jsprnt$="Q"
		if jsprnt$="P" 
			let tmp$=tmp$,  "PO #",fdel$
		else
			let tmp$=tmp$,"D/M #",fdel$
		endif
		tmp$=tmp$,"Date",fdel$
		tmp$=tmp$,"Vend #",fdel$
		tmp$=tmp$,"Vendor Name ",fdel$
		tmp$=tmp$,"Amount",fdel$
	endif
	call addtostr(e$,rstr$,tmp$+rdel$)
endif ! end setting up browser heading

K2$ = " ",K2$
K2$[2,9] = SACCT Using "########"
Search #2,2,1;K2$,R[2],E 
If Not(E) Goto CHKACCT
SRCHGLM:
Search #2,3,1;K2$,R[2],E 
If E = 2 Goto ENDOFREPORT
CHKACCT: Rem check account range
ACCT = K2$[2,9] \ If Not(ACCT) Goto SRCHGLM
If ACCT > EACCT Goto ENDOFREPORT
Gosub READ_GLM
if m$[13,13]<>"0" goto srchglm: 
if s9[3]<>0 and profcent<>0
	If M$[14,14] = "A" Or M$[14,14] = "L" Or M$[14,14] = "C" goto srchglm:
	tmp3= k2$[S9[4],S9[5]] 
	for ctr=1 to profcent
		If tmp3=pc[CTR] goto foundpc:
	next ctr
	goto srchglm:
ENDIF
foundpc: ! found the profit center
For I = 0 To 5 \ H3[I] = 0 \ Next I
If M$[13,13] <> "0" Goto SRCHGLM ! 
Gosub GETDETAIL
Goto SRCHGLM

!
READ_GLM: Rem read gl master file
Read #2,R[2];M$;
Mat Read #2,R[2],70;M3;
Return 
!
PRNTPAGEHEAD: Rem print page heading
Rem {begin srcdevl/inc/rtn.printmsg.i}
if j8<>0  Let L = 9999 \ return ! browser option
L = L + 1
If L < L9 Return 
If L9 <> 23 Goto L_5820
If Not(V9) Goto L_5820
if v9>200 and pageflag=0
	Call addtostr(e$,rstr$,esdel$) !end section
	 Message$="Report is still processing.  Check myreports later. "
	 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	 call addToStr(e$,rstr$,webstr$)
	 call setoutput(e$,rstr$)
	let pageflag=99
endif

L_5820:
!
If V9 <> 0 If L9 <> 23 Print #0;"\14\";
PTAB = 40 
let keyacct$=""
let batchchk=-999
Print #0;""
Print #0;"-gl638-";
Print #0; Tab (PTAB);"CLIENT: ";C$[3,6];" ";
Print #0;C$[11,50]
Print #0;D1$;
Print #0; Tab (PTAB);"G/L Journal Source Detail for ";jsprnt$;
V9 = V9 + 1
Print #0; Tab 110;
Print #0;"PAGE ";V9
If S9[3]<>0 and profcent<>0
	if profcent=1
		Print #0; Using "########"; Tab (ptab);"CENTER: ";PC[1];" ";PCNAME$[1,30]
	else
		print #0;tab(ptab);"Centers: ";tmp98$
	endif
endif                                                                    
Print #0; Tab (PTAB);"GENERAL LEDGER HISTORY FROM ";
Print #0;CP1$[1,2];"/";CP1$[3,4];
Print #0;" TO ";
Print #0;CP2$[1,2];"/";CP2$[3,4]
Print #0;""
Print #0;"Account#";
PRINT #0;tab 13;"Acct Name";
Print #0;tab 34;"Post Date";
Print #0;tab 45;"Batch";
if jsprnt$="C" or jsprnt$="S" or jsprnt$="E" 
	if jsprnt$="C"	print #0;tab 55;"C/M #";
	if jsprnt$="S"	print #0;tab 55;"INV #";
	if jsprnt$="E"	print #0;tab 55;"Tran#";
	print #0; tab 64;"Tran Date";
	print #0; tab 75;"Cust #";
	print #0; tab 84;"Cust Name";	
endif
if jsprnt$="R"
	print #0; tab 55;"Entry#";
	print #0; tab 64;"  Date  ";
	print #0; tab 74;"Cust #";
	print #0; tab 84;"Customer Name";
	
endif
if jsprnt$="D"
	print #0; tab 55;"Check#";
	print #0; tab 63;"Bank";
	print #0; tab 68;"  Date";
	print #0; tab 78;"Vend #";
	print #0; tab 86;"Vend Name";
	
endif
if jsprnt$="A"
	print #0; tab 55;"Transaction";
	print #0; tab 69;"  Date";
	print #0; tab 79;"Vend #";
	print #0; tab 87;"Vendor Name ";
	
endif
if jsprnt$="M"
	print #0; tab 55;"Entry#";
	print #0; tab 67;"Product";
	print #0; tab 85;"Comment";
	print #0; tab 103;"Reas";
	print #0; tab 112;"Wh";
endif
if jsprnt$="W"       ! NOT USED               
	print #0; tab 4;"W.O.#";        
	print #0; tab 11;"Comp Date";   
	print #0; tab 22;"Product";     
	print #0; tab 37;"Description"; 
	      
endif  
print #0; tab 120;"Amount"
!Print #0;""
L = 7
return
!!! not currently used for po/gl interface
if jsprnt$="X"
	print #0;tab 5;"Cntrl#";
	print #0;tab 13;"PO/DM#";
	print #0;tab 20;"Product";
	print #0;tab 34;"Prod Description";
	print #0;tab 61;"Wh";
	print #0;tab 71;"Amount"
endif
! not currently used - po/gl variance
if jsprnt$="V"
	print #0;tab 4;"Product";
	print #0; tab 17;"Description";
	print #0; tab 37;"Source";
	print #0; tab 71;"Amount"
endif
! purchase orders and debit memos not currently used
if jsprnt$="P" or jsprnt$="Q"
	print #0; tab 7;
	if jsprnt$="P" print#0;  "PO #"; else print #0;"D/M #";
	print #0; tab 23;"Date";
	print #0; tab 30;"Vend #";
	print #0; tab 37;"Vendor Name ";
	print #0; tab 71;"Amount"
endif

Return 



!

!
GETDETAIL: Rem gotrhough detail record for an account
For I = 0 To 5 \ T3[I] = 0 \ U3[I] = 0 \ Next I
U3[0] = H3[0]
SUBPER[0] = 0;SUBDETFLAG = 0
DETFLAG = 0
GLTKEY$ = " ",GLTKEY$;GLTKEY$[1,12] = M$[1,12]
GLTKEY$[13,14] = CP1$[3,4];GLTKEY$[15,16] = CP1$[1,2]
GLTKEY$[17,17]=" "
GLTKEY$[18,18]=JSPRNT$[1,1]
If FYE = 0 And CP1$[3,4] = "99" Let GLTKEY$[13,14] = "  "
if j8<>0
	tmp1$=""
	if s9<>0 let tmp1$ = trim$(Client using "####"),fdel$! client
	let acctnum=m$[1,12]
	tmp1$ = tmp1$,trim$(acctnum using "########"),fdel$
	let desc$=trim$(m$[15,34])
	gosub chkcomma: 
	tmp1$ = tmp1$,rtrim$(desc$),fdel$ ! acct desc
endif 
let prevacct=-999
let keyacct$=""
let batchchk=-999
SRCHDETAIL: Rem search for detail
Search #3,3,1;GLTKEY$,R[3],E
If E = 2 Goto ENDSRCHDETAIL
!!If E Gosub ERR_SEARCH
If GLTKEY$[1,12] <> M$[1,12] Goto ENDSRCHDETAIL
Mat Read #3,R[3],0;GLT$;
Y = GLT$[67,70] \ GLT$[67,70] = Y Using "&&&&"
If FYE = 0 And GLT$[67,68] = "00" Let Y = Y + 10000
If Y < B1 Goto SRCHDETAIL
If Y > F1 Goto ENDSRCHDETAIL
if jsprnt$="A"
	IF Y<>PREVACCT
		CLEAR APBTH[]
		let prevacct=y
	ENDIF
	LET TMP3=GLT$[71,74]
	IF APBTH[TMP3]<>0 GOTO SRCHDETAIL: ! ALREADY PRINTED DETAIL
	LET APBTH[TMP3]=99
ENDIF
Mat Read #3,R[3],92;GLT0;
mat read #3,r[3],100;glt1;
for c9=1 to 12
	if glt$[2,2]=jscode$[c9,c9] goto chk2prnt:
next c9
goto endchkprnt:
chk2prnt: ! check if ok to print
if not(jscode[c9]) goto endchkprnt:
if j8<>0
		let tmp1$=""
		if s9<>0 let tmp1$ = trim$(Client using "####"),fdel$! client
		let acctnum=m$[1,12]
		tmp1$ = tmp1$,trim$(m$[1,12]),fdel$ ! ACCT #
		let desc$=trim$(m$[15,34])
		gosub chkcomma: 
		tmp1$ = tmp1$,rtrim$(desc$),fdel$ ! acct desc ! ACCT DESC
		tmp1$= tmp1$,glt$[69,70],"/",glt$[67,68],fdel$ ! POSTING PERIOD  GLT$[67,70]   YYMM  
		tmp1$=tmp1$,glt$[2,2],fdel$ ! js
		TMP1$=TMP1$,GLT$[61,62],"/",GLT$[63,64],"/",GLT$[65,66],fdel$ ! POSTING DATE GLT$[61,66]  YYMMDD 
 		tmp1$=tmp1$,trim$(glt$[71,74]),fdel$ ! BATCH NUMBER          C        GLT$[71,74]     4    70         
endif		
!Gosub PRNTPAGEHEAD
Gosub PRNTDETAIL
	
endchkprnt: ! end the check print

Goto SRCHDETAIL
ENDSRCHDETAIL: Rem end srchdetail
return ! stop


!
PRNTDETAIL: Rem PRINT DETAIL DATA
let jsprnt$=glt$[2,2]
let tmp$=""
for c9=1 to 12
	if jsprnt$[1,1]=jscode$[c9,c9]
		on c9 gosub getapdet:,getardet:,getcddet:,getardet:,getpodet:,getmrdet:
		on (c9-6) gosub getcrdet:,getardet:,getpodet:,getvrdet:, getmfgdet:, getxadet:
	endif
next c9
return 

prntaccthead: ! print account heading
if not(j8)
	if keyacct$<>m$[1,12]
		PRINT #0;"" \LET L=L+1
		Print #0;m$[1,12];
		PRINT #0;tab 13;m$[15,34];
		let keyacct$=m$[1,12]
		let batchchk=-999
	endif
	tmp3=glt$[71,74]
	if tmp3<>batchchk
		print #0;tab 34;GLT$[61,62];"/";GLT$[61,62];"/";GLT$[65,66]; ! posting date
		print #0;tab 45;glt$[71,74];
		let batchchk=tmp3
	endif
endif
return 
  

!
PRNTDETTOTAL: Rem PRINT TOTALS
if j8 return
!
!Print #0;""
!Print #0; Tab 22;"TOTAL";
!If T3[1] + T3[0] <> H3[1] Print #0; Tab 41;"****";
!Print #0; Using Ex$; Tab 50;T3[1];" ";T3[0];"-"
!Print #0;""
!L = L + 2
Return 

getapdet: ! get ap detail - jscode ="A"
! if glt$[33,33]="/" return ! already posted in detail
! let tmp3=glt$[71,74]
let prgnum=glt1[4] ! prgnum
if not (prgnum)
	if glt$[21,36]="PURCHASE JOURNAL" let prgnum=512
	if glt$[21,37]="RECURRING ENTRIES" let prgnum=519
	if glt$[21,36]="ADJUSTMENTS JRNL" LET prgnum=516
endif
let prntjsflag=0
let fname$="4/GLAPDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchapdet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
if prgnum
	mat read #90,rec_gld,116;srcprg;
	if srcprg<>prgnum goto srchapdet:
endif
mat read #90,rec_gld,82;trans$;
!If glt$[33,33]="/"
!	if trans$[1,12]<>glt$[21,32] goto srchapdet:
!endif
mat read #90,rec_gld,16;trandate;
mat read #90,rec_gld,8;vend;
mat read #90,rec_gld,52;vendname$;
mat read #90,rec_gld,106;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,rtrim$(trans$),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,x$[1,8],fdel$
	let tmp$=tmp$,str$(vend),fdel$
	let desc$=trim$(vendname$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; tab 55;trans$; 
	let x2=trandate\gosub isdunpack:
	print #0; tab 69;x$[1,8];
	print #0; using "######";tab 79; vend;
	print #0; tab 87;vendname$[1,28];
	print #0; using "---------.##";tab 117;gldamt
endif
goto srchapdet:


getardet: ! get ar detail  jscode ="C", "S", "E"
let prntjsflag=0
let fname$="4/GLARDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
let batchchk=-999
let keyacct$=""
srchardet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,82;srccode$;
if srccode$[1,2]<>glt$[1,2] goto srchardet:
mat read #90,rec_gld,96;artran;
mat read #90,rec_gld,16;trandate;
mat read #90,rec_gld,8;cust;
mat read #90,rec_gld,52;custname$;
mat read #90,rec_gld,84;gldamt;
gosub prntpagehead: 
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,str$(artran),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,x$[1,8],fdel$
	let tmp$=tmp$,str$(cust),fdel$
	let desc$=trim$(custname$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntaccthead:	
	print #0; using "########";tab 52;artran; 
	let x2=trandate\gosub isdunpack:
	print #0; tab 65;x$[1,8];
	print #0; using "######";tab 75; cust;
	print #0; tab 84;custname$[1,30];
	print #0; using "---------.##";gldamt
endif
goto srchardet:


getpodet: ! get po detail jscode="P" or "Q"
let prgnum=glt1[4]
let prntjsflag=0
let fname$="4/GLPODETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchpodet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,92;srcprg;
if prgnum<>0
	 if srcprg<>prgnum goto srchpodet:
else
	if glt$[2,2]="Q"
		if srcprg<>385 goto srchpodet:
	else
		if srcprg=385 goto srchpodet:
	endif
endif
mat read #90,rec_gld,96;potran;
mat read #90,rec_gld,16;trandate;
mat read #90,rec_gld,8;vend;
mat read #90,rec_gld,52;vendname$;
mat read #90,rec_gld,84;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,str$(potran),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,x$[1,8],fdel$
	let tmp$=tmp$,str$(vend),fdel$
	let desc$=trim$(vendname$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; using "########";tab 5;potran; 
	let x2=trandate\gosub isdunpack:
	print #0; tab 14;x$[1,8];
	print #0; using "######";tab 23; vend;
	print #0; tab 30;vendname$[1,30];
	print #0; using "---------.##";tab 65;gldamt
endif
goto srchpodet:

getcrdet: ! get cr detail jscode="R"
let prntjsflag=0
let fname$="4/GLCRDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchcrdet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,12;crtran;
mat read #90,rec_gld,16;trandate;
mat read #90,rec_gld,8;cust;
mat read #90,rec_gld,52;custname$;
mat read #90,rec_gld,84;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,str$(crtran),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,x$[1,8],fdel$
	let tmp$=tmp$,str$(cust),fdel$
	let desc$=trim$(custname$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; using "######";tab 55;crtran; 
	let x2=trandate\gosub isdunpack:
	print #0; tab 63;x$[1,8];
	print #0; using "######";tab 74;cust;
	print #0; tab 84 ;custname$[1,30];	
	print #0; using "---------.##";tab 117;gldamt
endif
goto srchcrdet:

getcddet: ! get cd detail - jscode "D"
let prntjsflag=0
let fname$="4/GLCDDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchcddet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,12;check;
mat read #90,rec_gld,94;bank;
mat read #90,rec_gld,16;trandate;
mat read #90,rec_gld,8;vend;
mat read #90,rec_gld,52;vendname$;
mat read #90,rec_gld,82;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,str$(check),fdel$
	let tmp$=tmp$,str$(bank),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,x$[1,8],fdel$
	let tmp$=tmp$,str$(vend),fdel$
	let desc$=trim$(vendname$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; using "######";tab 55;check; 
	print #0; using "##";tab 63;bank;
	let x2=trandate\gosub isdunpack:
	print #0; tab 68;x$[1,8];
	print #0; using "######";tab 78;vend;
	print #0; tab 86;vendname$[1,28];
	print #0; using "---------.##";tab 117;gldamt
endif
goto srchcddet:

getmrdet: ! get mr detail - jscode ="M"
let rcode=glt$[44,47]
let prntjsflag=0
let fname$="4/GLMRDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchmrdet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,102;rsncode;
if rcode<>0 and rsncode<>rcode goto srchmrdet:
mat read #90,rec_gld,130;entry;
mat read #90,rec_gld,32;prodcode$;
mat read #90,rec_gld,44;comment$;
mat read #90,rec_gld,102;reason;
mat read #90,rec_gld,104;whse;
mat read #90,rec_gld,160;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,str$(entry),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,rtrim$(prodcode$),fdel$
	let desc$=trim$(comment$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,str$(reason),fdel$
	let tmp$=tmp$,str$(whse),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; using "########";tab 55;entry; 
	print #0; tab 67;prodcode$;
	print #0; tab 85;comment$;
	print #0; using "####";tab 103;reason;
	print #0; using "##";tab 112;whse;
	print #0; using "---------.##";tab 117;gldamt
endif
goto srchmrdet:

getvrdet: ! get vr detail - jscode ="V"
let prntjsflag=0
let fname$="4/GLVRDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchvrdet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,82;prodcode$;
mat read #90,rec_gld,52;proddesc$;
mat read #90,rec_gld,114;whse;
mat read #90,rec_gld,120;vrsrc$;
mat read #90,rec_gld,106;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,trim$(prodcode$),fdel$
	let desc$=trim$(proddesc$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let desc$=trim$(vrsrc$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	 
	print #0; tab 4;prodcode$; 
	print #0; tab 17;proddesc$[1,19];
	print #0; tab 37;vrsrc$[1,27];
	print #0; using "---------.##";tab 65;gldamt
endif
goto srchvrdet:

getmfgdet: ! get mfg detail - jscode ="W"
let prntjsflag=0
let fname$="4/GLMFGDETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchmfgdet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
mat read #90,rec_gld,96;wo$;
mat read #90,rec_gld,16;trandate;
mat read #90,rec_gld,28;prodcode$;
mat read #90,rec_gld,52;proddesc$;
mat read #90,rec_gld,84;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,trim$(wo$),fdel$
	let x2=trandate\gosub isdunpack:
	let tmp$=tmp$,x$[1,8],fdel$
	let tmp$=tmp$,trim$(prodcode$),fdel$
	let desc$=trim$(proddesc$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; tab 4;wo$; 
	let x2=trandate\gosub isdunpack:
	print #0; tab 12;x$[1,8];
	print #0; tab 22;prodcode$[1,12];
	print #0; tab 37;proddesc$[1,27];
	print #0; using "---------.##";tab 65;gldamt
endif
goto srchmfgdet:

getxadet: ! get mr detail - jscode ="M"
let prntjsflag=0
let fname$="4/GLXADETL"+str$(GLT1[0])
Call FindF(fname$,a9)
if not (a9) return ! detail file is not avail
tRY
	close #90
else
	! channel not open
end try
ropen #90,fname$
let keygld$=" ",keygld$
let dacper=glt$[67,70]
let keygld$[1,4]=dacper using "&&&&"
let keygld$[5,16]=glt$[3,14]
let keygld$[17,22]=glt1[2] using "######"
let keychk$=" ",keychk$;keychk$[1,22]=keygld$[1,22]
srchxadet: ! 
search #90,3,1;keygld$,rec_gld,e
if e=2
	return
endif
if e gosub err_search:
if keygld$[1,22]<>keychk$[1,22]
	return
endif
!!!! adjust line here for print
mat read #90,rec_gld,20;ponum;
mat read #90,rec_gld,32;pocntrl;
mat read #90,rec_gld,52;prodcode$;
mat read #90,rec_gld,64;proddesc$;
mat read #90,rec_gld,182;whse;
mat read #90,rec_gld,244;gldamt;
if j8<>0
	let tmp$=tmp1$
	let tmp$=tmp$,str$(pocntrl),fdel$
	let tmp$=tmp$,str$(ponum),fdel$
	let tmp$=tmp$,rtrim$(prodcode$),fdel$
	let desc$=trim$(proddesc$)
	gosub chkcomma:
	let tmp$=tmp$,trim$(desc$),fdel$
	let tmp$=tmp$,str$(whse),fdel$
	let tmp$=tmp$,(gldamt using "---------.##"),fdel$
	call addtostr(e$,rstr$,tmp$+rdel$)
else
	gosub prntpagehead: 
	gosub prntaccthead:	
	print #0; using "######";tab 5;pocntrl; 
	print #0; using "######";tab 13;ponum;
	print #0; tab 20;prodcode$;
	print #0; tab 34;proddesc$[1,25];
	print #0; using "##";tab 61;whse;
	print #0; using "---------.##";tab 65;gldamt
endif
goto srchxadet:


!
CALCBEGBS: Rem....A,C,L TYPE ACCOUNTS OPENING BALANCE
For I = 0 To (C1[0] - 1)
  H3[0] = H3[0] + M3[I]
Next I
Return 
!
CALCBEGIS: Rem....E,I,O,R TYPE ACCOUNTS OPENING BALANCE
For I = C1[1] To (C1[0] - 1)
  H3[0] = H3[0] + M3[I]
Next I
Return 
!
CALCCURR: Rem CURRENT CALC
For I = C1[0] To C1[2]
  H3[1] = H3[1] + M3[I]
Next I
H3[2] = H3[0] + H3[1]
Return 
!
GETYTDINC: Rem....YTD  "N"  "NN" TYPE ACCOUNTS
For I = C1[1] To C1[2]
  H3[3] = H3[3] + M3[I]
Next I
Return 

CHKCOMMA: REM check for comma in description and change to 
FOR X=1 TO LEN(DESC$)                                      
  IF DESC$[X,X]="," LET DESC$[X,X]="'"                     
NEXT X                                                     
RETURN                                                     
!

VERIFYPERIOD: Rem entered account period
If PERIOD$[1,2] < "00" Or PERIOD$[1,2] > "99" Goto PRNTBADDATE
If PERIOD$[1,2] <> PERIOD$[3,4]
  If PERIOD$[3,4] < "00" Or PERIOD$[3,4] > "12" Goto PRNTBADDATE
End If 
N = Int(D3 / 100)
Q1 = PERIOD$
For X = 1 To D5
  If X <> 13 Or X <> 26 Or X <> 39
    If A3[X] = Q1 Goto PERIODFND
  End If 
Next X
comd = 2

Return 
!
PERIODFND: X1 = X
If X1 < N + 2 Let X3 = 0
If X1 > N + 1 Let X3 = N + 2
If X1 > (N * 2) + 2 Let X3 = (N * 2) + 3
!!Return 1
return !!add
!
PRNTBADDATE: Rem  print invalid date entered
!!Print @0,23;'CL RB';"Invalid Accounting Period "; \ Signal 3,15
!!Print @0,23;'CL';
comd = 1
Return 
!

!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end call.input.i}
ENDOFREPORT: Rem end of printing the report

If REPTYPE$ = "J" Gosub CLS_GLSRTMP
!!Goto SELOPT
GOTO OUTEND!!ADD
!
CREATE_GLSRTMP: Rem create sort file gl tmp for jscode                                    
TMPFNAME$ = "6/glsrtmp";TMPFNAME$[Len(TMPFNAME$) + 1] = rec_uac Using "&&&&&&"
CMD$ = "[1:50] files/",TMPFNAME$,"!"
glch = findchannel()
Build #glch,CMD$
REC_SRT = 20 \ Search #glch,0,1;K9$,REC_SRT,E !!\ If E Gosub ERR_SEARCH
REC_SRT = 1 \ Search #glch,0,0;K9$,REC_SRT,E !!\ If E Gosub ERR_SEARCH
tmp$ = "files/",TMPFNAME$," <666>"                                   
Modify tmp$                                                          
Try                                                                  
  Close #glch                                                 
Else    
  let eflag=eflag+1
  ReturnStatus = 0                                                   
  Message$ = "Error Creating SortFile "                 
  Goto outend                                                
End Try                               
Open #glch,TMPFNAME$
Return 
!
CLR_GLSRTMP: Rem clear glsrtmp
K9$ = " ",K9$
SRCHSRTMP: Search #glch,3,1;K9$,REC_SRT,E
If E = 2 Return 
Search #glch,5,1;K9$,REC_SRT,E 
If E Let e$ = "syserrorfile 638 sortfile mode (m)=5 keyno (k)=1 r=",REC_SRT," e=",e," keyval (k$)=",K9$ \error 10000
E = 3
Search #glch,1,0;K9$,REC_SRT,E 
Goto SRCHSRTMP
!
CLS_GLSRTMP: Rem close & remove file
!If Err 0 Rem
tRY Close #glch eLSE rEM
!!If Err 0 Gosub ERR_ESCAPE
TMPFNAME$ = "6/glsrtmp";TMPFNAME$[Len(TMPFNAME$) + 1] = rec_uac Using "&&&&&&"
Call FindF(TMPFNAME$,A9)
If A9<>0
	let tmp$="files/"+tmpfname$
	Kill TMP$
End If 
Return 
!
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("/tmp/638se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$   
Call Programdump()
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                               
OUTEND: Rem EXIT PROGRAM
! dx close
If j8 ! dx xml ! browser
	Call addtostr(e$,rstr$,esdel$) !end section
	Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If
if not (pageflag)
	if not(j8)
		Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
		let returnstatus=0
		If Eflag>0
			ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
			tmp$=""
		Endif
		if not(eflag)
			returnstatus=0
			if message$="" let message$="Complete "
		endif

		call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
		call AddToStr(e$,rstr$,WebStr$)
		call SetOutPut(e$,rstr$)
	! try Call dxclose() else rem
	endif
endif
ELSE
!
	GOTO ERR_TRAP:
end try
End ! the whole program


ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end

