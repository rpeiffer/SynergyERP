! >>> Program 443
!
! description NonStock Item Code & Commodity
!
! loadsave -w -n 100,10 -o prog/dxport/443.dl4 src/443.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 31, 2001  16:11:44
Rem /usr/acct/r97//usr/acct/kag/work/r97/mx/mx443.src (univ2) [kag] {06723}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX443 - NON STOCK SALES
Rem AUTHOR: DAVE  MAR 24, 1987
Rem LAST UPDATE: roman 06/13/1991.   extended costs and totals
!
Declare Intrinsic Sub InpBuf,String
! - Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
Dim 1%,F,X1,CNVTU[2]
Dim 2%,C,NSL7[2],X2,Q0[1]
Dim 3%,L8[4],J,X3,T9[20],CNVTA,AMOUNT,BASE_L8[4],l5[3]
!ROLNEW
DIM 1%,L3[3],UN[2],S2[1],EUN[2]
DIM 2%,L6[6]
DIM 3%,L7[12],UNF[6],CTWT[1]
!FAKE PROD
DIM 1%,PFU1[20]
DIM 2%,B[24]
DIM 3%,A[33],PFU2[6]
! GENERAL
dim 3%,max_l7[12]
Dim K1$[50],K2$[20],K3$[20],X$[10],T9$[26],SK$[40],K5$[50],k6$[100]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[40],ARDATE$[8],ROL1$[20]
Dim L$[30],L1$[30],L2$[16],P9$[50],PMASK$[12],COMM$[4],UNIT$[4]
For J = 2 To 5
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,Abs(J1);J$;
  If J1 <= 0 Ropen #J,J$ Else Open #J,J$
L_830: Next J
Data "2128","-1888","1728","1184"

Read #1,3;CNAME$;
Mat Read #1,0,100;ARDATE$;
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
J9 = 55 \ If J8 Let J9 = 18
!
!!!! dx add xport reporting code
Dim tmp$[500],tmp1$[300],tmp2$[50]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"443",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
ROPEN #6,"4/SORDFLEHHKEY"+STR$(intCO)
!
!!!  dx add xport reporting code
Call dxget("reportby",tmp$) \ C=tmp$ ! report by 1=item code 2=commodity code
!!!  dx end
!
K1$ = " ",K1$
J1 = 90 \ J2 = 0
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 

! - Gosub L_3000
! - If C = 3 Goto OUTEND
! - Print @0,22;"Printing...please wait";'CE'; \ Signal 3,0
! - If J8 Print 'CS';
! - If Err 0 Gosub ERR_ESCAPE
! 
! *** DX XML Headings
if j8 ! dx xml headings
  if C=1 ! item code
    tmp$="ITEM CODE",fdel$
  else ! commodity
    tmp$="COMM",fdel$,"ITEM CODE",fdel$
  endif
  tmp$=tmp$,"DESCRIPTION",fdel$,"CTGY",fdel$
  if C=1 let tmp$=tmp$,"COMM",fdel$
  tmp$=tmp$,"QUANTITY",fdel$,"QTY U/M",fdel$,"EXT COST",fdel$
  tmp$=tmp$,"PRICE",fdel$,"PRICE U/M",fdel$,"EXT PRICE",fdel$
  tmp$=tmp$,"BACKORDERED",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! *** Process by Item Code
If C = 2 Goto L_2050
L_1800: Search #2,3,1;K1$,R1,E
If E Goto L_9100
Gosub L_2300
If L2$[1,1] = "Z" Goto L_1800
For X = 0 To 12 \ L7[X] = 0 \ Next X
If NSL7[2] > 0 
	CH_LINE=3
	GOSUB READ_ROL
else
	GOSUB search_invl
	If NSL7[2] <= 0 GOTO L_1800:
	CH_LINE=5
	NSL7[2]=R5
	gosub read_rol
	IF ROL1$[1,12]<>L2$[1,12] GOTO L_2085:
endif
if ch_line=5 then l7[0] = l7[0] + l7[4]  !! prev ship + current ship in history
If NSL7[2] > 0 If Not(L7[0]) Goto L_1800
Gosub L_5800
! previous SHIP QTY TO un[0]
CNVTA = L7[0] \ CNVTU[0] = 0
Let CNVTU[1] = UN[0]
CNVTU[2] = 5
Gosub L_20000 \ max_l7[0]=cnvta \ BASE_L8[1] = l7[0]
! SHIP QTY TO BASE

! UNIT COST TO BASE

CNVTA = L5[1] \ CNVTU[0] = 0
Let CNVTU[1] = un[2]
CNVTU[2] = 2
Gosub L_20000 \ L8[2]= amount \ BASE_L8[2] = l5[1]
! UNIT PRICE TO BASE

CNVTA = L5[2] \ CNVTU[0] = 0
Let CNVTU[1] = un[1]
CNVTU[2] = 2
Gosub L_20000 \ L8[3]= amount \ BASE_L8[3] = l5[2]
Gosub L_5000
gosub l_2400 !If Not(L7[3]) Gosub L_2400
Goto L_1800
!
! *** Sort by Commodity Code/Description
L_2050: Rem "=================================== process sort by comm
Search #2,3,1;K1$,R1,E 
If E Goto L_2080
Gosub L_2300
SK$[1,4] = L2$[13,16]
SK$[5,34] = L$[1,30]
SK$[35,40] = R1 Using "######"
Search #9,4,1;SK$,R1,E
If E Let e$ = "syserrorfile 443 sortfile mode (m)=4 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",SK$ \error 10000
Goto L_2050
!
! *** Process by Commodity Code/Description
L_2080: K1$ = " ",K1$
L_2085: Search #9,3,1;K1$,R1,E
If E Goto L_9100
Gosub L_2300
If L2$[1,1] = "Z" Goto L_2085
For X = 0 To 12 \ L7[X] = 0 \ Next X
If NSL7[2] > 0 
	CH_LINE=3
	GOSUB READ_ROL
else
	GOSUB search_invl
	If NSL7[2] <= 0 GOTO L_2085:
	CH_LINE=5
	NSL7[2]=R5
	gosub read_rol
	IF ROL1$[1,12]<>L2$[1,12] GOTO L_2085:
endif
if ch_line=5 then l7[0] = l7[0] + l7[4]  !! prev ship + current ship in history
If NSL7[2] > 0 If Not(L7[0]) Goto L_2085
COMM$[1,4] = L2$[13,16]
L_2130: Gosub L_5800

! previous SHIP QTY TO un[0]
CNVTA = L7[0] \ CNVTU[0] = 0
Let CNVTU[1] = UN[0]
CNVTU[2] = 5
Gosub L_20000 \ max_l7[0]=cnvta \ BASE_L8[1] = l7[0]
! SHIP QTY TO BASE
!CNVTA = L8[1] \ CNVTU[0] = UN[0]
!Let CNVTU[1] = 0
!CNVTU[2] = 5
!Gosub L_20000 \ BASE_L8[1] = AMOUNT
! UNIT COST TO BASE
!CNVTA = L8[2] \ CNVTU[0] = UN[2]
!Let CNVTU[1] = 0
!CNVTU[2] = 2
!Gosub L_20000 \ BASE_L8[2] = AMOUNT
CNVTA = L5[1] \ CNVTU[0] = 0
Let CNVTU[1] = un[2]
CNVTU[2] = 2
Gosub L_20000 \ L8[2]= amount \ BASE_L8[2] = l5[1]
! UNIT PRICE TO BASE
!CNVTA = L8[3] \ CNVTU[0] = UN[1]
!Let CNVTU[1] = 0
!CNVTU[2] = 2
!Gosub L_20000 \ BASE_L8[3] = AMOUNT
CNVTA = L5[2] \ CNVTU[0] = 0
Let CNVTU[1] = un[1]
CNVTU[2] = 2
Gosub L_20000 \ L8[3]= amount \ BASE_L8[3] = l5[2]
! PRINT LINE
Gosub L_5000
Gosub L_2500 !If Not(L7[3]) Gosub L_2500
L_2145: Search #9,3,1;K1$,R1,E 
If E Gosub L_4200 \ Gosub L_2600 \ Goto L_9100
Gosub L_2300
If L2$[1,1] = "Z" Goto L_2145
For X = 0 To 12 \ L7[X] = 0 \ Next X
If NSL7[2] > 0 
	CH_LINE=3
	GOSUB READ_ROL
else
	GOSUB search_invl
	If NSL7[2] <= 0 GOTO L_2145:
	CH_LINE=5
	NSL7[2]=R5
	gosub read_rol
	IF ROL1$[1,12]<>L2$[1,12] GOTO L_2145:
endif
if ch_line=5 then l7[0] = l7[0] + l7[4]  !! prev ship + current ship in history
If NSL7[2] > 0 If Not(L7[0]) Goto L_2145
If L2$[13,16] = COMM$[1,4] Goto L_2130
Gosub L_4200
Gosub L_2600
Goto L_2130
!
L_2300: Rem "=================================== read record
Mat Read #2,R1,0;NSL7;
Mat Read #2,R1,12;L$;
Mat Read #2,R1,42;L1$;
Mat Read #2,R1,72;L8;
Mat Read #2,R1,102;L2$;
Return 

READ_ROL: REM "======== READ ROLNEW RECORD
Mat Read #CH_LINE,NSL7[2],8;L3;
Mat Read #CH_LINE,NSL7[2],32;L5;
Mat Read #CH_LINE,NSL7[2],56;L6;
Mat Read #CH_LINE,NSL7[2],140;ROL1$;
Mat Read #CH_LINE,NSL7[2],168;L7;
Mat Read #CH_LINE,NSL7[2],250;UN;
Mat Read #CH_LINE,NSL7[2],256;S2;
If S2[0] = 3 RETURN  ! MESSAGE
Mat Read #CH_LINE,NSL7[2],446;EUN;
Mat Read #CH_LINE,NSL7[2],452;UNF;
Mat Read #CH_LINE,NSL7[2],514;CTWT;
If L3[0]
  A[0] = 0;A[1] = 0;A[2] = 0;A[3] = 0
  Gosub L_30000 
End If 
RETURN
!
search_invl: rem try to find line in history
	max_r5=-2
	for i=0 to 12 \ max_l7[i]=0 \ next i
	k6$=" ",k6$
	k6$[1,6]=NSL7[0] USING "######"
invl_loop: SEARCH #6,3,3;K6$,R6,E 
	IF E>2 THEN If E Let e$ = "syserrorfile 443 sortfile mode (m)=3 keyno (k)=3  e=",e," keyval (k6$)=",k6$ \error 10000
	IF K6$[1,6]=(NSL7[0] USING "######") and not(e)
		K5$=" ",k5$
		k5$[1,10]=k6$[7,16]
		K5$[11,13]=NSL7[1] USING "###"
		search #5,2,1;k5$,r5,e
		IF E>2 THEN If E Let e$ = "syserrorfile 443 sortfile mode (m)=2 keyno (k)=1  e=",e," keyval (k5$)=",k5$ \error 10000
		if e
			NSL7[2]=-1
		else
			Mat Read #5,r5,168;L7;
			if max_r5=-2 then max_r5=R5
			l7[0] = l7[0] + l7[4]  !! prev ship + current ship in history
			if max_l7[0]<l7[0]
				for i=0 to 12 \ max_l7[i]=l7[i] \ next i
				max_r5=R5
			endif
		endif
		goto invl_loop
	else 
		if max_r5<>-2 then NSL7[2]=max_r5
	ENDIF
return
!
L_2400: Rem TOTALS CALC
T9[5] = T9[5] + max_l7[0]
T9[6] = T9[6] + BASE_L8[1] * Abs(BASE_L8[2])
T9[8] = T9[8] + Abs(BASE_L8[1] * BASE_L8[3])
Return 
!
L_2500: Rem "================================= subtotals for comm
T9[10] = T9[10] + max_l7[0]
T9[12] = T9[12] + BASE_L8[1] * Abs(BASE_L8[2])
T9[16] = T9[16] + Abs(BASE_L8[1] * BASE_L8[3])
Return 
!
L_2600: Rem "================================= cumm total and zero subtotals
T9[5] = T9[5] + T9[10]
T9[6] = T9[6] + T9[12]
T9[8] = T9[8] + T9[16]
T9[10] = 0
T9[12] = 0
T9[16] = 0
COMM$[1,4] = L2$[13,16]
Return 

!
L_4000: Rem "======================================== totals
if J8 return ! dx xml
!
Gosub L_5800
Print #0;"\15\TOTALS"; Tab 25;"(DOES NOT INCLUDE BACKORDERS)";
Print #0; Using "--------#.##"; Tab 60;T9[5];
Print #0; Using "--------#.##"; Tab 77;T9[6];
Print #0; Using "--------#.##"; Tab 105;T9[8]
Return 
!
L_4200: Rem "=================================== subtotal by comm
if J8 return ! dx xml
!
Gosub L_5800
Print #0;"\15\SUBTOTAL FOR ";
Print #0;COMM$[1,4];
Print #0; Tab 25;"(DOES NOT INCLUDE BACKORDERS)";
Print #0; Using "--------#.##"; Tab 60;T9[10];
Print #0; Using "--------#.##"; Tab 77;T9[12];
Print #0; Using "--------#.##"; Tab 105;T9[16];
J1 = J1 + 2
Print #0;"\15\"
Return 
!
L_5000: Rem PRINT LINE
!
if J8 ! dx mxl
  if C=1 ! item code
    tmp$=L2$[1,12],fdel$
  else ! commodity
    tmp$=L2$[13,16],fdel$,L2$[1,12],fdel$
  endif
  tmp$=tmp$,rtrim$(L$[1,30]),fdel$
  tmp$=tmp$,L8[0] using "###",fdel$
  if C=1 let tmp$=tmp$,L2$[13,16],fdel$
  !tmp$=tmp$,L8[1] Using "--------#.##",fdel$
  tmp$=tmp$,max_l7[0] Using "--------#.##",fdel$
  UML=UN[0] \ GOSUB L_8600 \ tmp$=tmp$,UNIT$,fdel$
  tmp$=tmp$,Abs(BASE_L8[1] * BASE_L8[2]) Using "--------#.##",fdel$
  tmp$=tmp$,L8[3] Using PMASK$,fdel$
  UML=UN[1] \ GOSUB L_8600 \ tmp$=tmp$,UNIT$,fdel$
  tmp$=tmp$,Abs(BASE_L8[1] * BASE_L8[3]) Using "--------#.##",fdel$
  If L7[3] let tmp$=tmp$,"BACKORDERED",fdel$ else tmp$=tmp$,"",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
endif  
!
If C = 2 Goto L_5200
Print #0; Tab 3;L2$[1,12];
Print #0; Tab 17;L$[1,30];
Print #0; Using "###"; Tab 50;L8[0];
Print #0; Tab 56;L2$[13,16];
!Print #0; Using "--------#.##"; Tab 60;L8[1];
Print #0; Using "--------#.##"; Tab 60;max_L7[0];
UML=UN[0] \ GOSUB L_8600 \ PRINT #0;"/";UNIT$;
Print #0; Using "--------#.##"; Tab 77;Abs(BASE_L8[1] * BASE_L8[2]);
Print #0; Using PMASK$; Tab 90;L8[3];
UML=UN[1] \ GOSUB L_8600 \ PRINT #0;"/";UNIT$;
Print #0; Using "--------#.##"; Tab 105;Abs(BASE_L8[1] * BASE_L8[3]); ! L8[4];
If L7[3] Print #0; Tab 121;"BACKORDERED";
Print #0;" "
If P9$[26,26] = "Y" Print #0; Tab 17;L1$ \ J1 = J1 + 1
Goto L_5790
L_5200: Print #0; Tab 3;L2$[13,16];
Print #0; Tab 11;L2$[1,12];
Print #0; Tab 25;L$[1,30];
Print #0; Using "###"; Tab 57;L8[0];
Print #0; Using "--------#.##"; Tab 60;max_l7[0];
UML=UN[0] \ GOSUB L_8600 \ PRINT #0;"/";UNIT$;
Print #0; Using "--------#.##"; Tab 77;Abs(BASE_L8[1] * BASE_L8[2]);
Print #0; Using PMASK$; Tab 90;L8[3];
UML=UN[1] \ GOSUB L_8600 \ PRINT #0;"/";UNIT$;
Print #0; Using "--------#.##"; Tab 105;Abs(BASE_L8[1] * BASE_L8[3]); ! L8[4];
If L7[3] Print #0; Tab 121;"BACKORDERED";
Print #0;" "
If P9$[26,26] = "Y" Print #0; Tab 25;L1$ \ J1 = J1 + 1
L_5790: Return 
!
L_5800: Rem "============================================ headings
if J8 return ! dx xml
!
J1 = J1 + 1 \ If J1 < J9 Return 
! - If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 5
If Not(J8) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;" - 443 - ";Msc$(3);
Print #0; Tab 51;"N O N - S T O C K   S A L E S"
Print #0;" "
If C = 2 Goto L_5910
Print #0; Tab 3;"ITEM CODE";
Print #0; Tab 17;"DESCRIPTION";
Print #0; Tab 49;"CTGY";
Print #0; Tab 56;"COMM";
Print #0; Tab 64;"QUANTITY";
Print #0; Tab 79;"EXT COST";
Print #0; Tab 95;"PRICE";
Print #0; Tab 108;"EXT PRICE"
Print #0;" "
Goto L_5990
L_5910: Print #0; Tab 3;"COMM";
Print #0; Tab 11;"ITEM CODE";
Print #0; Tab 25;"DESCRIPTION";
Print #0; Tab 56;"CTGY";
Print #0; Tab 64;"QUANTITY";
Print #0; Tab 79;"EXT COST";
Print #0; Tab 95;"PRICE";
Print #0; Tab 108;"EXT PRICE"
Print #0;" "
L_5990: Return 
!
L_8600: Rem LOAD DISPLAY UNITS
If UML = -1 Let UNIT$ = "CWT"
If UML = -2 Let UNIT$ = "LOT"
If UML = -3 Let UNIT$ = "LB  "
If UML > 0 Mat Read #4,uml,10;UNIT$;
RETURN
!
OUTEND: Rem EXIT PROGRAM
! dx close
If J8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  !!!!!!print rstr$
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
try call dxclose() else rem
End 
!
! - Print 'CS'
! - Close 
! - Chain "MX000"
! - Stop 
!
L_9100: Rem END OF THIS RANGE
Gosub L_4000
! - If Err 0 Rem
try Close #0 else rem
! - if Err 0 Gosub ERR_ESCAPE
! - If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
! - Stop 


L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120 ! - was If Spc(4) > 1280 Goto L_20120

L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

L_30000: Rem ===== set units for conversions (stock/nonstock version)
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
B[23] = L6[2]
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[15] = CTWT
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 

!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
