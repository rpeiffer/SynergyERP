! >>> Program 311
!
! description Current A/R Paid Transactions Purge
! loadsave -w -n 100,10 -o prog/dxport/311.dl4 src/311.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  3, 2008  09:17:17
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/xrev9/mx311.src (univ2) [jcs] {16196}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,StringSearch,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel 

! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem MX311 PAID A/R PURGE / TRANSFER
Rem PROGRAMMER: N. GRINBERG  OCT 1983
Rem LAST UPDATE  07/10/86  FOR A/R HISTORY
!If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Try
Dim 3%,arcomm[1]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim rstr$[5000],usr$[40]
dim 1%,SC,SR,Z9[9],PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10],J4$[50]
dim 2%,scust,ecust,purdate,jpurdate
dim 1%,IntCo,eflg,returnstatus
dim e$[500] ! 
dim 3%,SPREC,rec_uac,totar
Dim J$[40],J0$[10],J1$[40],J2$[20],C$[30],DU$[40],NAME$[50]
Dim J5$[75],J6$[40],J7$[75],J9$[75],PLAT$[20],ARCH$[40]
Dim K$[50],K1$[50],K2$[50],K3$[50],U5$[16],TYPE$[36],K7$[50],A3$[16]
Dim P9$[50],X$[10],P60$[50],B$[80],B1$[80],SYS$[80],D$[34],K22$[40],K24$[40]
Dim P61$[256],HEADER$[16],HEAD$[20],K4$[50]
Dim 1%,A,B,D,E,F,I,J0,L1,L2,L3,M,P,S,T9,W,X1,Y,Y9,Z,P0[1023],S0,SOME,CT[1]
Dim 1%,FLAG,2%,DT3[1],J9[2],4%,ARREC,AHREC,2%,D3[1]
Dim 3%,A3[13],J,J8,ARL2[3],J9[2],4%,FSIZE[1],ROOTSZ,FTMP
Dim 3%,K1,V1,ARREF[1],X3,X4,ARL3[1],C12[3]
Dim 2%,A2[5],PURDAT,F1,F2,R1,R2,I2,I3,ARR[25],INFO[128,1],H6[8]
Dim 2%,TIE,H0[12],ARL1[10],COMP,R[30],A1[2],X
Dim 2%,D1[1],ext$[7]
Dim KEYAR1$[40],KEYARD1$[40],KEYAR2$[40],KEYARD2$[40],NEWARKEY1$[40]
Dim KEYNEWARD1$[40],KEYNEWARD2$[40],NEWARKEY2$[40]
Dim KEYAR3$[40],NEWKEYAR3$[40],ORGARKEY1$[40]
Dim CHKKEY$[40],CHKKEYD2$[40]
Dim 2%,POSTDATE,3%,OLDREF,NEWREF,INVNUM
Dim 3%,R55,R56,R7,REC_ARD1
Dim 3%,REC_AR,REC_ARTMP,REC_ARH,REC_ARD,REC_ARDTMP,REC_ARDH,REC_CUST
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],Message$[600]
!Dim action$[30],options$[30],userid$[8]
!Dim rstr$[2000],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
!Call DXOpen() ! needed for testing
!Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

Comp=IntCo 
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COMP)
Open #1,J$
eflg=0
returnstatus=1
dim custom_customer$[30]
! ----------------------------------------------
mat read #1,115,60;custom_customer$;
custom_customer$=rtrim$(custom_customer$)
! ----------------------------------------------
! rec_uac = GetUIDRec(e$,IntCo,Userid$)
Read #1,19,50;P9$;
Mat Read #1,60,50;P60$; \ Mat Read #1,61,0;P61$;
PLAT$ = "PLATFORM" \ System 28,PLAT$
!X2 = Spc(5);COMP = Int((X2 - Int(X2 / 16384) * 16384) / 64)

For I = 2 To 8
  Read W \ If W = -1 Goto L_290
  Read #1,88,W;U5$;
  Open #I,U5$
L_290: Next I
Data "1504","-1","1408","1520","1456","1136","1808"
If P61$[3,3] = "Y"
  U5$ = COMP Using "2/SARDETL#" \ Open #22,U5$
  U5$ = COMP Using "4/SARDETLH#" \ Open #24,U5$
End If 
If Chf(302) <> Chf(304) Goto L_8900
X2 = Chf(302) - 1
CH_AR = 2;CH_ARH = 4;CH_ARD = 22;CH_ARDH = 24;CH_CUST = 8
Dim 1%,Z2[X2],Z9[X2],2%
Mat Read #1,61,0;P61$;
ARCHFILE = 0
If P61$[28,28] = "Y"
  U5$ = "4/invarchindx" + Str$(COMP)
  Call FindF(U5$,Y)
  If Y
    ARCHFILE = 1
    Ropen #55,U5$
  End If 
End If 
Read #5,0;F1;
if F1<>0
	eflg=eflg+1
	message$=Message$+" Direct A/R Entries Need to be Accepted. "
endif
!If Not(F1) Goto L_340
!J7$ = "YOU CANNOT PURGE UNTIL DIRECT ENTRIES ARE ACCEPTED!"
!Gosub L_7600 \ Goto L_9010
!L_340: If P9$[49,49] <> "Y" Goto L_345
if p9$[49,49]="Y"
	Read #1,20,20;S; !
	if S<>0 ! \ If Not(S) Goto L_345
		eflg=eflg+1
		message$=Message$+" Electronic C/R Lockbox Entries Need to be Accepted. "
	endif
Endif
!J7$ = "YOU CANNOT PURGE UNTIL ELECTRONIC LOCKBOX ENTRIES ARE ACCEPTED!"
!Gosub L_7600 \ Goto L_9010
L_345: T9 = 0 \ If P9$[7,7] = "Y" Let T9 = 9
 Call dxget("PURDATE",tmp$) \ PURDATE = tmp$                                 
 Call dxget("SCUST",tmp$) \ SCUST = tmp$                                   
 Call dxget("ECUST",tmp$) \ If tmp$ = "" Let ECUST = 999999 Else Let ECUST =tmp$                                                                          
 X$ = PURDATE Using "&&&&&&" \ tmp1$ = X$[5,6],X$[1,2],X$[3,4] \ PURDATE = tmP1$                                                                             
 Call DateToJulian(1,tmp1$,tmp1$,E)
 if not(e)
	let jpurdate=tmp1$
 endif
IF e<>0
	let eflg=eflg+1
	let message$=message$+" Invalid Purge Date Entered" 
endif
if scust<0 or scust>999999
	let eflg=eflg+1
	let message$=Message$+" Invalid Starting Customer Code Entered"
endif
if ecust<0 or ecust>999999
	let eflg=eflg+1
	let message$=Message$+" Invalid Ending Customer Code Entered "
endif
if ecust<scust
	let eflg=eflg+1
	let message$=message$+" Ending Customer Code Must Be Greater than Starting Customer Code "
endif
Gosub L_8300
!Goto L_380
!Goto L_500
if eflg <>0 goto l_9010:
!L_380: J7$ = "YOU CANNOT PURGE UNTIL CASH RECEIPTS ARE ACCEPTED!" \ Gosub L_7600 \ Goto L_9010
!L_500: Print 'CS';@0,0;"PAID ACCOUNTS RECEIVABLE PURGE";@50,0;"MX311 - REV 2.9";
!If T9 Print @30,0;" / TRANSFER";
!Print @10,3;'CL';@10,3;"FOR DATE ENDING"
LET K$=SCUST USING "######"

LET K1$=ECUST USING "######"
totar=0      

t9=99 ! FLAG FOR HISTORY
TYPE$ = "INV S/C NSF D/A LCHGC/M UNCRC/A PMT "
TIE = 32
L_1200: Rem "========================================= start here
L_1210: Search #2,3,2;K$,R1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_9100
If K$[1,6] > K1$[1,6] Goto L_9100
Mat Read #2,R1;A2
Mat Read #2,R1,24;A3
Mat Read #2,R1,108;A3$;
Mat Read #2,R1,190;A1
Mat Read #2,R1,316;ARREF
IF CUSTOM_CUSTOMER$="ETNA"
	MAT READ #2,R1,330;ARCOMM
endif
If A2[4] > jPURDATE Goto L_1400
If (A3 - A3[1] - A3[2]) Goto L_1400
TIE = 32
If K$[23,23] = "1" Or K$[23,23] = "6" Gosub L_3000
FAILED = 0
If T9 Gosub L_2000
If FAILED Goto L_1210
If P61$[3,3] = "Y" Gosub L_5000
Mat Write #2,R1;Z2;
let totar=totar+1
Search #2,5,2;K$,R1,E \ If E Gosub ERR_SEARCH
K2$ = " ",K2$ \ K2$[1,6] = K$[1,6]
K2$[7] = K$[13] \ K2$[18,18] = ""
Search #2,2,1;K2$,R2,E
! if e<>0 goto L_1200: ! mtg
If E Gosub ERR_SEARCH
If R1 <> R2 Let E = 1 \ Gosub ERR_SEARCH
Search #2,5,1;K2$,R2,E \ If E Gosub ERR_SEARCH
If Not(A1[1]) Gosub CHECK_POST_ACCT
K2$ = A1[1] Using "######";K2$[7,12] = K$[1,6]
K2$[13] = K$[7]
K2$[30] = ""
Search #2,2,3;K2$,R2,E \ If E Gosub ERR_SEARCH
If R1 <> R2 Let E = 1 \ Gosub ERR_SEARCH
Search #2,5,3;K2$,R2,E \ If E Gosub ERR_SEARCH
K4$ = " ",K4$;K4$[1,6] = K2$[1,6]
K4$[7,16] = K$[13,22];K4$[17,22] = K$[1,6]
K4$[23] = K$[23];K4$[24] = ""
Search #2,2,4;K4$,R2,E \ If E Gosub ERR_SEARCH
If R1 <> R2 Let E = 1 \ Gosub ERR_SEARCH
Search #2,5,4;K4$,R2,E \ If E Gosub ERR_SEARCH
K4$ = " ",K4$;K4$[1,6] = K2$[1,6]
K4$[7,22] = K$[7,22];K4$[23,28] = K$[1,6]
K4$[29] = K$[23];K4$[30] = ""
Search #2,2,5;K4$,R2,E \ If E Gosub ERR_SEARCH
If R1 <> R2 Let E = 1 \ Gosub ERR_SEARCH
Search #2,5,5;K4$,R2,E \ If E Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;K$,R1,E \ If E Gosub ERR_SEARCH
!Print @0,22;"Doing...";K$[1,6];
!Signal 3,0
Goto L_1200
L_1400: Rem "======================== don't purge
A3[1] = A3[1] + A3[2]
A3[2] = 0
Mat Write #2,R1,24;A3;
IF CUSTOM_CUSTOMER$="ETNA"
	LET ARCOMM[0]=ARCOMM[0]+ARCOMM[1]
	LET ARCOMM[1]=0
	MAT WRITE #2,R1,330;ARCOMM;
ENDIF

Goto L_1200

L_2000: Rem "============================ transfer to saracth
K2$ = " ",K2$
K2$[1,6] = A2[2] Using "######"
K2$[7,16] = ARREF[0] Using "##########"
K2$[17,17] = Int(Fra(A2[3]) * 100) Using "#"
K2$[18,18] = " "
ORGARKEY1$ = K2$
Search #4,2,1;K2$,K1,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  If P61$[3,3] = "Y"
    Gosub CHKARDETAILDUP
    If (FAILED) Return 
  Else 
    Gosub L_2500
  End If 
End If 
E = 2 \ Search #4,1,0;K2$,V1,E
If E Gosub ERR_SEARCH
Search #4,4,1;K2$,V1,E
If E Gosub ERR_SEARCH
K3$ = " ",K3$ \ K3$[1,6] = K$[1,6]
K3$[7,12] = A2[4] Using "######"
K3$[13] = K2$[7]
K3$[24,24] = " "
Search #4,4,2;K3$,V1,E
If E Gosub ERR_SEARCH
K1 = V1
Mat Read #2,R1,0;Z9
Mat Write #4,K1,0;Z9;
Mat Write #4,K1,0;A2;
Mat Write #4,K1,316;ARREF;
If P61$[3,3] = "Y" ! write desc for orig ref#
  Mat Write #4,K1,108;A3$;
End If 
Return 
L_2500: Rem "============================== try another key
!Print @6,12;'CE ER EB BB';"WARNING:";'EB'
!Print @18,12;"Customer:";@29,12;K2$[1,6]
!Print @17,13;"Reference:";@29,13;K2$[7,16]
!X2 = A2[4] \ Gosub L_7770 !\ !Print @22,14;"Date:";@29,14;X$
X2 = K2$[17,17]
!Print @22,15;"Type:";@29,15;TYPE$[X2 * 4 - 3,X2 * 4]
!Print @40,12;"Already exists in History... Please wait..."
If P61$[3,3] = "Y" 
	!Signal 3,0 \ 
	FAILED = 99 \ Return 
ENDIF
X2 = A2[4] \ Gosub L_7840
K2$[7,16] = DT3[0] Using "##########"
TIE = 31
L_2571: ARREF[0] = K2$[7,16]
Search #4,2,1;K2$,K1,E \ If E > 1 Gosub ERR_SEARCH
If E<>0 
	! Print @40,13;"CHANGING REF. # TO";ARREF[0] \ Pause 10 \
	Return 
ENDIF
TIE = TIE + 1 \ If TIE > 99 Goto L_2620
L_2600: K2$[15,16] = TIE Using "&&"
Goto L_2571
L_2620: X2 = K2$[13,13];X2 = X2 + 1
If K2$[14,14] = "1" Or K2$[14,14] = "2" Let X2 = X2 + 1
If X2 > 9 Goto L_2700
K2$[13,13] = X2 Using "#"
TIE = 1
Goto L_2600
L_2700: Rem "======================= failed to insert new reference numbers
E = 0 \ Gosub ERR_SEARCH
X2 = Spc(14) \ X2 = Spc(14)
FAILED = 99 \ Return 
Goto L_1210
L_3000: Rem update pay date to sales history inv/cm
If K$[23,23] = "1"
  K7$ = " ",K7$
  K7$[1,2] = "30"
  K7$[3] = ARREF[0] Using "##########"
End If 
If K$[23,23] = "6"
  K7$ = " ",K7$
  K7$[1,2] = "31"
  K7$[3] = A1[0] Using "##########"
End If 
Search #7,2,1;K7$,R7,E
If E And Not(ARCHFILE) Goto L_3160
If E And ARCHFILE Gosub CHECK_ARCHIVE \ Goto L_3160
Mat Read #7,R7,0;H0;
If H0[1] <> A2[2] And Not(ARCHFILE) Goto L_3160
Mat Read #7,R7,408;H6
H6[4] = A2[1]
Mat Write #7,R7,408;H6;
L_3160: Return 
CHECK_ARCHIVE: Rem update pay date to archive sales history inv/cm
HEAD = 0
If K$[23,23] = "1"
  ARCH$ = " ",ARCH$
  ARCH$[1,6] = A2[2] Using "######"
  ARCH$[7,8] = "30"
  ARCH$[9,18] = ARREF[0] Using "##########"
End If 
If K$[23,23] = "6"
  ARCH$ = " ",ARCH$
  ARCH$[1,6] = A2[2] Using "######"
  ARCH$[7,8] = "31"
  X3 = A3$[11,16]
  ARCH$[9,18] = X3 Using "##########"
End If 
DOARCHIVE: Search #55,3,3;ARCH$,R55,E \ If E > 2 Goto ERR_SEARCH
If E = 2 Goto GETOUT
CUSTNUM = ARCH$[1,6]
INVNUM = ARCH$[9,18]
If CUSTNUM = A2[2] And INVNUM > ARREF[0] Goto GETOUT
If CUSTNUM > A2[2] Goto GETOUT
Mat Read #55,R55,10;HEADER$;
If HEAD = 0 Open #56,HEADER$
HEAD = 1
If K$[23,23] = "1"
  HEAD$ = " ",HEAD$
  HEAD$[1,2] = "30"
  HEAD$[3] = ARREF[0] Using "##########"
End If 
If K$[23,23] = "6"
  HEAD$ = " ",HEAD$
  HEAD$[1,2] = "31"
  HEAD$[3] = A1[0] Using "##########"
End If 
Search #56,2,1;ARCH$,R56,E
If E Goto DOARCHIVE
Mat Read #56,R56,0;H0;
If H0[1] <> A2[2] Goto GETOUT
Mat Read #56,R56,408;H6
H6[4] = A2[1]
Mat Write #56,R56,408;H6;
GETOUT: Rem
If HEAD Close #56
Return 
L_5000: Rem ARDETL HISTORY PURGE
K22$ = ORGARKEY1$
L_5010: Search #22,3,1;K22$,ARREC,E \ If E = 2 Goto L_5095
If K22$[1,18] <> ORGARKEY1$[1,18] Goto L_5095
Mat Read #22,ARREC,0;ARL1; \ Mat Read #22,ARREC,44;ARL2;
Mat Read #22,ARREC,68;ARL3;
K24$ = K22$
E = 2 \ Search #24,1,0;K24$,AHREC,E \ If E Gosub ERR_SEARCH
Mat Write #24,AHREC,0;ARL1; \ Mat Write #24,AHREC,44;ARL2;
Mat Write #24,AHREC,68;ARL3;
Search #24,4,1;K24$,AHREC,E \ If E Gosub ERR_SEARCH
Search #22,5,1;K22$,ARREC,E \ If E Gosub ERR_SEARCH
E = 3 \ Search #22,1,0;K22$,ARREC,E \ If E Gosub ERR_SEARCH
Goto L_5010
L_5095: Return 
L_6000: Rem GET FILE SYSTEM
Eopen #99,"/tmp/dftmp"
L_6015: SYS$ = " ",SYS$
Read #99;SYS$;
CT = 0;CT[1] = 0
If SYS$ = "" Or SYS$[1,3] = "   " Goto L_6150
If PLAT$ = "aix" Or PLAT$ = "AIX" ! "ibm aix special handling
  CT[1] = Len(SYS$) * -1
  Call StringSearch(SYS$,CT[1]," ",CT) \ If Not(CT) Or CT = -1 Goto L_6015
  If SYS$[CT + 1,CT + 1] <> "/" Goto L_6015
  NAME$ = " ",NAME$;NAME$ = SYS$[CT + 1,Len(SYS$) - 1]
  Goto L_6050
End If 
Search SYS$,"(",CT \ If Not(CT) Goto L_6015
NAME$ = " ",NAME$;NAME$ = SYS$[1,CT - 1]
L_6050: For H = Len(NAME$) To 1 Step -1
  If NAME$[H,H] = " " Let NAME$[H] = ""
Next H
System 32,NAME$,FTMP
If NAME$ = "/" Let ROOTSZ = FTMP \ Goto L_6015
If B1$[1,Len(NAME$)] = NAME$ Let FSIZE[1] = FTMP \ Goto L_6190
Goto L_6015
L_6150: FSIZE[1] = ROOTSZ
L_6190: If Not(FSIZE[1]) Let E = 0 \ Gosub ERR_SEARCH
Kill "/tmp/dftmp" \ Return 
L_7000: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER

L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_7770: Rem DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
L_7840: Rem CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem BACKUP TO FROZEN A/R FILE
U5$ = " ",U5$;DU$ = " ",DU$
Read #1,88,1504;U5$;
Gosub L_8100
DU$ = U5$[1,Len(U5$)]," "
U5$[Len(U5$) + 1] = ".FROZ"
DU$[Len(DU$) + 1] = U5$[1,Len(U5$)]
!Print @0,23;'BB';"Now copying A/R file to frozen file -- this may take a while...";'EB CE';
!Print 'LK';
Duplicate DU$
!Print 'UK';
Return 
L_8080: !   BACKUP TO FROZEN A/R FILE WITH YEAR & MONTH EXTENSION
LET U5$=" ",U5$;DU$=" ",DU$;EXT$=" ",EXT$;EXT$[1,1]="."
READ #1,88,1504;U5$; ! "get original filename
U5$=RTrim$(U5$) ! trim any spaces!
MAT  READ #1,0,108;D1; ! "get current a/r date
LET EXT$[2,7]=D1[0] USING "&&&&&&"
B$ = " ",B$;B$ = U5$[1,Len(U5$)];B$[Len(B$) + 1] = Ext$[1,5]
! call FindF(B$,E) \ if not(E) return ! Only 1 copy a month? OR
Gosub L_8110: ! check / delete existing (Multiple runs a month?)
LET DU$=U5$[1,LEN(U5$)]," " ! "set copy string
LET U5$[LEN(U5$)+1]=EXT$[1,5] ! "set backup filename (DROP DAYS - .YYMM)
LET DU$[LEN(DU$)+1]=U5$[1,LEN(U5$)]
!PRINT @0,23;'BB';"Now copying A/R file to frozen file -- this may take a while...";'EBCE';
!PRINT 'LK'; ! "lock keyboard - be as safe as possible
DUPLICATE DU$ ! "make backup file
!PRINT 'UK';
RETURN  ! "should have been successfu
L_8100: Rem CHECK FOR SPACE TO COPY FILE
B$ = " ",B$;B$ = U5$[1,Len(U5$)];B$[Len(B$) + 1] = ".FROZ"
L_8110: Rem Check / delete if there
Call FindF(B$,E) \ If Not(E) Goto L_8120
Kill B$
L_8120: B$ = " ",B$;B$[1,Len(U5$)] = U5$
L_8295: Return 
L_8300: Read #1,20,8;S0;
If S0<>0 ! cash receipt process
	Let I = 0 \ Goto L_8610
endif
If P60$[6,6] = "Y" Goto L_8325
Read #1,20,34;F1;
Read #1,20,38;F2;
If F1 = F2 Goto L_8520
Return 
L_8325: SOME = 0
Mat Read #1,120;P0;
If P0[301] Let S0 = 1 \ Gosub L_8560
If P0[302] Let S0 = 2 \ Gosub L_8560
If P0[303] Let S0 = 1 \ Gosub L_8560
If P0[304] Let S0 = 3 \ Gosub L_8560
If P0[305] Let S0 = 5 \ Gosub L_8560
If P0[306] Let S0 = 3 \ Gosub L_8560
If P0[311] Let S0 = 5 \ Gosub L_8560
If P0[320] Let S0 = 5 \ Gosub L_8560
If P0[227] Let S0 = 5 \ Gosub L_8560
For BANK = 1 To Chf(6) - 1
  Mat Read #6,BANK,0;C$
  If Len(C$) = 0 Goto L_8510
  If C$[1,3] = "   " Goto L_8510
  Read #6,BANK,40;I2;
  Read #6,BANK,44;I3;
  Read #6,BANK,36;P0[0];
  If Not(P0[0]) If I2 <> I3
    SOME = 1
    Gosub L_8700
  End If 
  If P0[0] Goto L_8500
  Goto L_8510
L_8500: S0 = P0[0]
  Gosub L_8560
L_8510: Next BANK
L_8520: ! If SOME Return 
if some<>0
	IF eflg=0
		let eflg=1
		if message$=""
			Message$=Message$+"C/R In Process"
		endif
	endif
endif
if some<>0 return
IF eflg=0 
	S0 = 5
	Write #1,20,8;S0;
	!Call "getuidrec",UIDREC[1]
	UIDREC[1] = GetUIDRec(e$,IntCo,Userid$)
	Mat Read #1,120;P0
	P0[311] = UIDREC[1]
	Mat Write #1,120;P0;
endif
Return !  1
L_8560: Rem PROBLEM
SOME = 1
S0 = Int(S0 / 1000)
L_8610: Rem PRINT 'CRRB'" ";
On S0 Goto L_8640,L_8650,L_8660,L_8670,L_8680
L_8620: ! If BANK <> 0 Print " FOR BANK ";BANK;"  ";
!Print " - CANNOT RUN PURGE " \ Signal 3,20
If bank<>0
	let message$=message$+"Entries In Process For Bank "+str$(bank)+". "
	let eflg=eflg+1
endif
Return 
L_8640: !Print "ENTRY RUNNING(301 OR 303)";
let eflg=eflg+1
let message$=message$+" C/R Entry/Delete in Process "
If P0[301] Or P0[303]
  UIDREC = P0[301] \ If Not(UIDREC) Let UIDREC = P0[303]
  if uidrec>0
	USR$ = GetUIDInfo$(e$,IntCo,UIDRec) ! Call "getuidinfo",UIDREC,USR$
	message$=Message$+"By User "+Rtrim$(Usr$[21]) ! Print " BY USER ";USR$[21];
  endif
End If 
Goto L_8620
L_8650:!  Print "VERF.LIST(302)";
let eflg=eflg+1
Let message$=message$+" C/R Verif List "
If P60$[6,6] <> "Y"
	! Print " OR 306";
	let message$=message$+" Or C/R Monthly Report "
endif
let message$=message$+"in Process" ! Print " IN PROGRESS";
If P0[302] Or P0[306]
  UIDREC = P0[302] \ If Not(UIDREC) Let UIDREC = P0[306]
   if uidrec>0
	USR$ = GetUIDInfo$(e$,IntCo,UIDRec) ! Call "getuidinfo",UIDREC,USR$
	message$=Message$+"By User "+Rtrim$(Usr$[21]) ! Print " BY USER ";USR$[21];
  endif
  !Call "getuidinfo",UIDREC,USR$
  !Print " BY USER ";USR$[21];
End If 
Goto L_8620
L_8660: !Print "JOURNAL(304";
!If P60$[6,6] = "Y" Print " OR 306";
!Print ") IN PROGRESS";
let eflg=eflg+1
Let message$=message$+" C/R Journal "
If P60$[6,6] <> "Y"
	! Print " OR 306";
	let message$=message$+" Or C/R Monthly Report "
endif
let message$=message$+"in Process" ! Print " IN PROGRESS";
If P0[304] Or P0[306]
  UIDREC = P0[304] \ If Not(UIDREC) Let UIDREC = P0[306]
   if uidrec>0
	USR$ = GetUIDInfo$(e$,IntCo,UIDRec) ! Call "getuidinfo",UIDREC,USR$
	message$=Message$+"By User "+Rtrim$(Usr$[21]) ! Print " BY USER ";USR$[21];
  endif
  !Call "getuidinfo",UIDREC,USR$
  !Print " BY USER ";USR$[21];
End If 
Goto L_8620
L_8670: 
eflg=eflg+1
message$=message$+" C/R Journal needs to be Accepted "
!Print "JOURNAL(304) HAS BEEN RUN BUT NOT ACCEPTED"
!Print "THE JOURNAL AND ACCEPT(304 & 305) MUST BE RUN ";
!Print "BEFORE THE PURGE CAN BE RUN"
!Signal 3,30
Goto L_8620
L_8680: !Print "ACCEPT(305, 311, 320 OR 227) IN PROGRESS";
let eflg=eflg+1
let message$=message$+" Accept in Process by "
If P0[305] Or P0[311] Or P0[320] Or P0[227]
  UIDREC = P0[305] \ If Not(UIDREC) Let UIDREC = P0[311]
  If Not(UIDREC) Let UIDREC = P0[320]
  If Not(UIDREC) Let UIDREC = P0[227]
   if uidrec>0
	USR$ = GetUIDInfo$(e$,IntCo,UIDRec) ! Call "getuidinfo",UIDREC,USR$
	message$=Message$+"By User "+Rtrim$(Usr$[21]) ! Print " BY USER ";USR$[21];
  endif
  !Call "getuidinfo",UIDREC,USR$
  !Print " BY USER ";USR$[21];
End If 
Goto L_8620
L_8700: Rem ADDITIONAL ERROR MESSAGE
!Print 'RB'
!Print I3 - I2;"ENTRIES REMAIN IN CASH RECEIPTS..."
!If BANK Print "FOR BANK ";BANK
!Print "PLEASE RUN JOURNAL AND ACCEPT (304 & 305)."
!Signal 3,40
let eflg=eflg+1
let message$=message$+" "+str$(i3-i2)+" Entries in C/R Process "
if bank 
	let message$=message$+"For Bank "+str$(bank)+". "
endif
Return 
L_8800: Rem "===================== set cash receipt switch
S = 0
Write #1,20,8;S;
Mat Read #1,120;P0
P0[311] = 0
Mat Write #1,120;P0;
Return 
L_8900: Rem "=========================== saracth bad record length
eflg=eflg+1
message$=message$+"A/R History File Record Length <> to Current A/R File. Cannot perform purge."
goto L_9010:
!

L_9100: Rem CHECK FOR BACKUP TO FROZEN FILE
If P60$[8,8] = "Y" Gosub L_8000
IF P61$[20,20]="Y" GOSUB L_8080: ! "backup saract with ".yymm" extension
Goto OUTEND
Stop 
CHKARDETAILDUP: Rem check for duplicates
FAILED = 0
!Print @6,12;'CE ER EB BB';"WARNING:";'EB'
!Print @18,12;"Customer:";@29,12;K2$[1,6]
!Print @17,13;"Reference:";@29,13;K2$[7,18]
!X2 = A2[4] \ Gosub L_7770 \ Print @22,14;"Date:";@29,14;X$
!X2 = K2$[17,17]
!Print @22,15;"Type:";@29,15;TYPE$[X2 * 4 - 3,X2 * 4]
!Print @40,12;"Already exists in History... Please wait..."
KEYAR1$ = K2$;REC_AR = R1
NEWARKEY1$ = KEYAR1$
If A1
  NEWREF = A1
  NEWARKEY1$[7,16] = NEWREF Using "##########"
  Search #CH_ARH,2,1;NEWARKEY1$,REC_ARH,E \ If Not(E) Goto CHKAR2
  If E > 1 Gosub ERR_SEARCH
  Search #CH_AR,2,1;NEWARKEY1$,REC_ARTMP,E \ If Not(E) Goto CHKAR2
  If E > 1 Gosub ERR_SEARCH
  Goto UPDATEREF
End If 
CHKAR2: Rem SECOND TRY USE A/R DATE
X2 = A2[4] \ Gosub L_7840 \ X = DT3[0]

!!  *********************************************
!!  BUT FIRST, IF IT IS A C/M(TYPE=6) TRY TO DO C/M # + (YEAR*1000000)
!!  IE: PUT YEAR IN FRONT OF C/M #
 IF K$[23,23]="6" AND ARREF[0]<1000000 AND ARREF[0]>0 !C/M
   LET X3=INT(X/10000) !GET YY - YEAR
   IF X3>1 AND X3<100
     LET X4=X3*1000000
     LET X4=X4+ARREF[0]
     NEWREF = X4 
     NEWARKEY1$[7,16] = NEWREF Using "##########"
     Search #CH_ARH,2,1;NEWARKEY1$,REC_ARH,E \ If Not(E) Goto CHKAR3
     If E > 1 Gosub ERR_SEARCH
     Search #CH_AR,2,1;NEWARKEY1$,REC_ARTMP,E \ If Not(E) Goto CHKAR3
    If E > 1 Gosub ERR_SEARCH
    Goto UPDATEREF
  End If 
End If 
 CHKAR3: REM SECOND TRY USE A/R DATE

If X
  NEWREF = X
  NEWARKEY1$[7,16] = NEWREF Using "##########"
  Search #CH_ARH,2,1;NEWARKEY1$,REC_ARH,E \ If Not(E) Goto ENDARCHK
  If E > 1 Gosub ERR_SEARCH
  Search #CH_AR,2,1;NEWARKEY1$,REC_ARTMP,E \ If Not(E) Goto ENDARCHK
  If E > 1 Gosub ERR_SEARCH
  Goto UPDATEREF
End If 
ENDARCHK: Rem cannot get a new ref number
FAILED = 99 \ Return 
UPDATEREF: Rem a/r ref number
!Print @40,13;'CL';"CHANGING REF. # TO";NEWREF;
!Signal 3,10
OLDREF = ARREF[0]
TYPE = KEYAR1$[17,17]
KEYARD1$ = " ",KEYARD1$;KEYARD1$[1,17] = KEYAR1$[1,17]
CHKKEY$ = KEYARD1$
SEARCHARD: Search #CH_ARD,3,1;KEYARD1$,REC_ARD,E \ If E = 2 Goto UPDATEAR
If E Gosub ERR_SEARCH
If KEYARD1$[1,17] <> CHKKEY$[1,17] Goto UPDATEAR
Mat Read #CH_ARD,REC_ARD,0;ARL1;
Mat Read #CH_ARD,REC_ARD,44;ARL2;
Mat Read #CH_ARD,REC_ARD,68;ARL3;
If ARL3[0] <> OLDREF Stop 
If ARL1[2] <> TYPE Stop 
POSTDATE = ARL1[6]
ARL3[0] = NEWREF
KEYNEWARD1$ = KEYARD1$;KEYNEWARD1$[7,16] = NEWREF Using "##########"
CHKARDTIE: KEYNEWARD1$[31,36] = ARL1[10] Using "######"
Search #CH_ARD,2,1;KEYNEWARD1$,REC_ARDTMP,E
If Not(E)
  ARL1[10] = ARL1[10] + 1
  If ARL1[10] > 999999
    !Print @0,23;'CL RB';"A/R Detail Tie Breaker Exceeds Limit "; \ Signal 3,30
    Gosub ERR_SEARCH
  End If 
  Goto CHKARDTIE
End If 
If E > 1 Gosub ERR_SEARCH
CHKARDHTIE: KEYNEWARD1$[31,36] = ARL1[10] Using "######"
Search #CH_ARDH,2,1;KEYNEWARD1$,REC_ARDHTMP,E
If Not(E)
  ARL1[10] = ARL1[10] + 1
  If ARL1[10] > 999999
    !Print @0,23;'CL RB';"A/R Detail Tie Breaker Exceeds Limit "; \ Signal 3,30
    Gosub ERR_SEARCH
  End If 
  Goto CHKARDHTIE
End If 
If E > 1 Gosub ERR_SEARCH
E = 2 \ Search #CH_ARDH,1,0;KEYNEWARD1$,REC_ARDH,E \ If E Gosub ERR_SEARCH
Mat Write #CH_ARDH,REC_ARDH,0;ARL1;
Mat Write #CH_ARDH,REC_ARDH,44;ARL2;
Mat Write #CH_ARDH,REC_ARDH,68;ARL3;
Search #CH_ARDH,4,1;KEYNEWARD1$,REC_ARDH,E \ If E Gosub ERR_SEARCH
Search #CH_ARD,5,1;KEYARD1$,REC_ARD,E \ If E Gosub ERR_SEARCH
E = 3 \ Search #CH_ARD,1,0;KEYARD1$,REC_ARD,E \ If E Gosub ERR_SEARCH
KEYARD2$ = " ",KEYARD2$
If ARL2[2] Let KEYARD2$[1,6] = ARL2[2] Using "######"
If Not(ARL2[2]) Let KEYARD2$[1,6] = ARL1[0] Using "######"
KEYARD2$[7,16] = ARL3[1] Using "##########"
KEYARD2$[17,17] = ARL1[4] Using "#"
KEYARD2$[19,28] = OLDREF Using "##########"
KEYARD2$[29,29] = ARL1[2] Using "#"
CHKKEYD2$ = " ",CHKKEYD2$;CHKKEYD2$[1,29] = KEYARD2$[1,29]
CHKARDLINK: Search #CH_ARD,3,1;KEYARD2$,REC_ARD1,E \ If E = 2 Goto CHKARDH
If E Gosub ERR_SEARCH
If CHKKEYD2$[1,29] <> KEYARD2$[1,29] Goto CHKARDH
Mat Read #CH_ARD,REC_ARD1,0;ARL1;
Mat Read #CH_ARD,REC_ARD1,44;ARL2;
Mat Read #CH_ARD,REC_ARD1,68;ARL3;
If POSTDATE <> ARL1[6] Goto CHKARDLINK
If ARL3[1] <> OLDREF Or ARL1[4] <> TYPE
  !Print @0,23;'CL RB';"A/R Detail Data Error ";
  Gosub ERR_SEARCH
End If 
ARL3[1] = NEWREF
KEYNEWARD2$ = KEYARD2$;KEYNEWARD2$[19,28] = ARL3[1] Using "##########"
CHKARDLINKTIE: KEYNEWARD2$[31,36] = ARL1[10] Using "######"
Search #CH_ARD,2,1;KEYNEWARD2$,REC_ARDTMP,E
If Not(E)
  ARL1[10] = ARL1[10] + 1
  If ARL1[10] > 999999
    !Print @0,23;'CL RB';"A/R Detail Tie Breaker Exceeds Limits "; \ Signal 3,30
    Gosub ERR_SEARCH
  End If 
  Goto CHKARDLINKTIE
End If 
If E > 1 Gosub ERR_SEARCH
Mat Write #CH_ARD,REC_ARD1,0;ARL1;
Mat Write #CH_ARD,REC_ARD1,68;ARL3;
Search #CH_ARD,4,1;KEYNEWARD2$,REC_ARD1,E \ If E Gosub ERR_SEARCH
Search #CH_ARD,5,1;KEYARD2$,REC_ARD1,E \ If E Gosub ERR_SEARCH
Goto SEARCHARD
CHKARDH: Rem CHECK AR DETAIL HISTORY for links
KEYARD2$ = " ",KEYARD2$
KEYARD2$[1,29] = CHKKEYD2$[1,29]
SEARCHARDHLINK: Search #CH_ARDH,3,1;KEYARD2$,REC_ARDH,E \ If E = 2 Goto SEARCHARD
If E Gosub ERR_SEARCH
If CHKKEYD2$[1,29] <> KEYARD2$[1,29] Goto SEARCHARD
Mat Read #CH_ARDH,REC_ARDH,0;ARL1;
Mat Read #CH_ARDH,REC_ARDH,44;ARL2;
Mat Read #CH_ARDH,REC_ARDH,68;ARL3;
If POSTDATE <> ARL1[6] Goto SEARCHARDHLINK
If ARL3[1] <> OLDREF Or ARL1[4] <> TYPE
  !Print @0,23;'CL RB';"A/R Detail Data Error ";
  Gosub ERR_SEARCH
End If 
ARL3[1] = NEWREF
KEYNEWARD2$ = KEYARD2$;KEYNEWARD2$[19,28] = ARL3[1] Using "##########"
CHKARDHLINKTIE: KEYNEWARD2$[31,36] = ARL1[10] Using "######"
Search #CH_ARDH,2,1;KEYNEWARD2$,REC_ARDTMP,E
If Not(E)
  ARL1[10] = ARL1[10] + 1
  If ARL1[10] > 999999
    !Print @0,23;'CL RB';"A/R Detail Tie Breaker Exceeds Limits"; \ Signal 3,30
    Gosub ERR_SEARCH
  End If 
  Goto CHKARDHLINKTIE
End If 
If E > 1 Gosub ERR_SEARCH
Mat Write #CH_ARDH,REC_ARDH,0;ARL1;
Mat Write #CH_ARDH,REC_ARDH,68;ARL3;
Search #CH_ARDH,4,1;KEYNEWARD2$,REC_ARDH,E \ If E Gosub ERR_SEARCH
Search #CH_ARDH,5,1;KEYARD2$,REC_ARDH,E \ If E Gosub ERR_SEARCH
Goto SEARCHARD
UPDATEAR: Rem CHANGE SARACT KEY
ARREF[0] = NEWREF
If A3$ = "" Or A3$[1,5] = "     "
  A3$[1,15] = OLDREF Using "Orig Ref:######"
End If 
K2$ = NEWARKEY1$
FAILED = 0
Return 
CHECK_POST_ACCT: Rem see if we can difure out what posting account should be
K2$ = " ",K2$
K2$ = A2[2] Using "######"
Search #CH_CUST,2,1;K2$,REC_CUST,E
If E Gosub ERR_SEARCH
Mat Read #CH_CUST,REC_CUST,668;C12;
A1[1] = C12[1]
Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$
Call programdump("/tmp/311.se!","")
Call programdump()
Error 10000
Return ! End

OUTEND: Rem EXIT ROUTINE
Gosub L_8800
L_9010:! Print 'CS'
!Close 
!Chain "MX000"
!Stop 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
!if not(aok)
If Eflg>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflg)
	if not(totar)
		returnstatus=1
		let message$=message$+"There are no A/R Transactions to purge"
		
		message$=message$+"."
	else
		Let message$=message$+" "+str$(totar)+" A/R Transaction(s) Purged "
	endif
endif
!endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
outend9: ! everything has been written in called program
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
Rem {end rtn.error.s}
