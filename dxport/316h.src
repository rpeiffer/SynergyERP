! >>> Program 316h
!
! description A/R Trial Balance, Customer Activity Summary
!
! loadsave -w -n 100,10 -o prog/dxport/316h.dl4 src/316h.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB  9, 2005  13:59:51
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/mx/mx316h.src (univ2) [mary] {63339}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE! ****
Rem
Rem MX316H         Customer Activity Summary (aged tb)
Rem Author:        Roman Sawycky   (02/28/1991)
Rem                UNIVERSAL BUSINESS SYSTEMS
!
External Lib "ubsfunc.dl4"
Declare External Sub UTAge5
!
Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate,FindF
! - Option Default Dialect IRIS1
Com 2%,AGE[7],S9[3]
Com P9$[50]
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Rem {begin dim.rtn.input}
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
dim 3%,tmp3
!
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Dim 2%,CUST[1],DIV[1],SLSM[1],SORTOPT,SNAME$[14],ENAME$[14],W1[1]
Dim 1%,F,L,TYPE,BUCK,A0[10],FLAG,2%,D3[1],SRCPRT
Dim 1%,AGEBUCK[4],CUST2[2],DDAY
Dim 2%,A2[5],C1[12],D,D1,E,V9[4],ARDATE,A4[7],X2,H0[12],C5,R5,H5[8],E1[12]
Dim 2%,PRCNTAR[6],COID
Dim 4%,TOTAR
Dim 3%,A3[13],C3[5],T9[8,3],T[4],CRDTOT,T2[25],GNDTOT,SALESCRD
Dim 3%,ARREF[1]
Dim CNAME$[30],A1$[142],C3$[25],ARDATE$[8],ext$[5]
Dim F$[30],K1$[40],K2$[30],K3$[25],K4$[25],K9$[50],K5$[25]
Dim P$[20],P1$[20],SORT$[1],TEMPK1$[40],D2$[10]
Dim AGEBUCK$[120],AGEBUCKH$[48],P61$[256]
Def FNR(X) = Sgn(X) * Int((Abs(X) + .005) * 100) / 100
COID = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
Mat Read #1,20,130;AGEBUCK;
AGEBUCK[4] = AGEBUCK[3] + 30
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$
Read #1,18,30;D2$;
Read #1,0,108;ARDATE;
Read #1,0,100;ARDATE$;
Read #1,3,0;CNAME$;
Mat Read #1,19,50;P9$;
If S9[0]
  ARDATE = S9[1];X2 = ARDATE \ Gosub ISDUNPACK
  ARDATE$ = X$
endif
!
AGEBUCK$[1,20] = "CURRENT............:";AGEBUCKH$[1,8] = " CURRENT"
If P9$[50,50] = "M" ! age by month
  If P9$[25,25] = "Y" ! age by due date
    AGEBUCK$[21,40] = "PAST DUE...........:";AGEBUCKH$[9,16] = "PAST DUE"
    AGEBUCK$[41,60] = "OVER 1 MONTH.......:";AGEBUCKH$[17,24] = "OVER 1MO"
    AGEBUCK$[61,80] = "OVER 2 MONTHS......:";AGEBUCKH$[25,32] = "OVER 2MO"
    AGEBUCK$[81,100] = "OVER 3 MONTHS......:";AGEBUCKH$[33,40] = "OVER 3MO"
    AGEBUCK$[101,120] = "OVER 4 MONTHS......:";AGEBUCKH$[41,48] = "OVER 4MO"
  Else 
    AGEBUCK$[21,40] = "OVER 1 MONTH.......:";AGEBUCKH$[9,16] = "OVER 1MO"
    AGEBUCK$[41,60] = "OVER 2 MONTHS......:";AGEBUCKH$[17,24] = "OVER 2MO"
    AGEBUCK$[61,80] = "OVER 3 MONTHS......:";AGEBUCKH$[25,32] = "OVER 3MO"
    AGEBUCK$[81,100] = "OVER 4 MONTHS......:";AGEBUCKH$[33,40] = "OVER 4MO"
    AGEBUCK$[101,120] = "OVER 5 MONTHS......:";AGEBUCKH$[41,48] = "OVER 5MO"
  End If 
Else 
  If P61$[67,67] = "Y"
    AGEBUCK$ = " ",AGEBUCK$;AGEBUCKH$ = " ",AGEBUCKH$
    For X = 0 To 5
      AGEBUCK$[((X * 20) + 1),((X * 20) + 8)] = (X + 1) Using "PERIOD #"
      AGEBUCK$[((X * 20) + 9),((X * 20) + 20)] = "...........:"
      AGEBUCKH$[((X * 8) + 1),((X * 8) + 8)] = (X + 1) Using "PERIOD #"
    Next X
  Else 
    For X = 0 To 4
      AGEBUCK$[((X * 20) + 21),((X * 20) + 33)] = AGEBUCK[X] Using "OVER ### DAYS"
      AGEBUCK$[((X * 20) + 34),((X * 20) + 40)] = "......:"
      AGEBUCKH$[((X * 8) + 9),((X * 8) + 16)] = AGEBUCK[X] Using "OVER ###"
    Next X
    If P9$[25,25] = "Y" And AGEBUCK[0] = 0
      AGEBUCK$[21,40] = "PAST DUE...........:"
      AGEBUCKH$[9,16] = "PAST DUE"
    End If 
  End If 
End If 
P1$ = "------#.##"
P$ = "---,---,--#.##"
!
J8 = 0
If Err 0 Let J8 = Spc(8)
N = Chf(0)
If Err 0 Gosub ERR_TRAP
V9[3] = 55;SCRPRT = 0
If J8 let V9[3] = 22 \ SCRPRT = 99
!
! dx add xport reporting code
DXSetup:
Dim tmp$[800],tmp1$[500],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"316h",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("frozenacct",tmp$) \ S9[0]=tmp$  ! report option  0=current  1=frozen
if p61$[20,20]="Y" ! frozen by month
	call dxget("FRZMNTH",tmp$)
	if RTrim$(tmp$)<>"" let s9[0]=2
	x3=tmp$
	let x$=x3 using "&&&&"
	let ext$="."+x$
Endif
call dxget("frozendate",tmp$) \ S9[1]=tmp$ ! frozen aging date
call dxget("reportby",tmp$) \ SORTOPT=tmp$ ! report by  1=customer#  2=salesman
call dxget("begcust",tmp$) \ CUST[0]=tmp$ ! starting customer #
call dxget("endcust",tmp$) \ if tmp$="" let CUST[1]=999999 else CUST[1]=tmp$ ! ending customer#
call dxget("begslsm",tmp$) \ SLSM[0]=tmp$ ! starting salesman
call dxget("endslsm",tmp$) \ if tmp$="" let SLSM[1]=999 else SLSM[1]=tmp$ ! ending salesman
call dxget("begwhse",tmp$) \ if tmp$="" let W1[0]=0 else W1[0]=tmp$ ! beg warehouse
call dxget("endwhse",tmp$) \ if tmp$="" let W1[1]=99 else W1[1]=tmp$ ! end warehouse
call dxget("begdiv",tmp$) \ if tmp$="" let DIV[0]=0 else DIV[0]=tmp$ ! beg division
call dxget("enddiv",tmp$) \ if tmp$="" let DIV[1]=99 else DIV[1]=tmp$ ! end division
!  dx end
!
! frozen report
if S9[0] ! frozen
	if s9[1]<=0 let e$="Frozen Aging date is required" \ error 10000
  tmp$=S9[1] using "&&&&&&" \ S9[1]=tmp$[5,6],tmp$[1,4] ! mmddyy to yymmdd
  ARDATE = S9[1] \ X2 = ARDATE 
  Gosub ISDUNPACK \ ARDATE$ = X$
else
  S9[1]=0 ! current
endif
!
! customer
if SORTOPT=1 or SortOpt=2
  if CUST[0]<0 or CUST[0]>999999 let e$="Invalid starting customer, must be between 0 and 999999!" \ error 10000
  if CUST[1]<CUST[0] or CUST[1]>999999 let e$="Invalid ending customer, must be between starting customer and 999999!" \ error 10000
else
  CUST[0]=0 \ CUST[1]=999999 ! by salesman
endif
!
! salesman
if SORTOPT=2 or SortOpt=1
  if SLSM[0]<0 or SLSM[0]>999 let e$="Invalid starting salesman, must be between 0 and 999!" \ error 10000
  if SLSM[1]<SLSMN[0] or SLSM[1]>999 let e$="Invalid ending salesman, must be between starting salesman and 999!" \ error 10000
else
  SLSM[0]=0 \ SLSM[1]=999 ! by customer
endif
!
! warehouse
if W1[0]<0 or W1[0]>99 let e$="Invalid starting warehouse, must be between 0 and 99!" \ error 10000
if W1[1]<W1[0] or W1[1]>99 let e$="Invalid ending warehouse, must be between starting warehouse and 99!" \ error 10000
!
! division
if DIV[0]<0 or DIV[0]>99 let e$="Invalid starting division, must be between 0 and 99!" \ error 10000
if DIV[1]<DIV[0] or DIV[1]>99 let e$="Invalid ending division, must be between starting division and 99!" \ error 10000
!
if s9[0]=2
	read #1,88,1504;j$;
	j$=RTrim$(J$)+ext$
	call findf(j$,found)
	if not(found)
		e$="Frozen file for "+ext$+" not found" \ error 10000
	Endif
Endif
!
For I = 3 To 6
  Read L
  If Not(L) Goto L_845
  Read #1,88,L;J$;
  If I = 4 And S9[0] 
    if s9[0]=1 let J$[Len(J$) + 1] = ".FROZ" ! frozen a/r
	if s9[0]=2 let j$=RTrim$(J$)+ext$
  End If 
  Ropen #I,J$
L_845: Next I
Data "1808","1504","1840","1872" 
J$ = intCO Using "2/ARTERMCODE#" \ Ropen #50,J$
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
D1 = 1 ! dir #
!
! - D1 = 1
! - D1 = 1;D9 = 2;DIV[0] = 0;DIV[1] = 99;W1[0] = 0;W1[1] = 99
! - CUST[0] = 0;CUST[1] = 999999;SNAME$ = " ",SNAME$;ENAME$ = "z",ENAME$
! - SLSM[0] = 0;SLSM[1] = 999
! - SORTOPT = 1
! - L_1000: Rem SELECT RANGES
! - For X = 0 To 4 \ T[X] = 0 \ Next X
! - For X = 0 To 8
! -   For X1 = 0 To 3
! -     T9[X,X1] = 0
! -   Next X1
! - Next X
! - Gosub L_5600 \ Gosub L_5700
! - L_1070: Print @0,23;'CL';"Enter #:field to edit  R: reselect all  P: print  E: exit ";
! - Input Len (16384 + 1);""J$
! - Call String(1,J$)
! - If J$ = "E" Goto L_9040
! - If J$ = "P"
! -   If SORTOPT = 2 Goto L_1200
! -   Goto L_1900
! - End If 
! - If J$ = "R"
! -   For K = 1 To 5
! -     Gosub GETOPT
! -   Next K
! -   Goto L_1070
! - End If 
! - K = J$
! - Gosub GETOPT
! - Goto L_1070
! - GETOPT: Rem get options
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On K Gosub GETSORTOPT,GETCUSTRNG,GETWHSRNG,GETDIVRNG,GETSLSMRNG
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
!
L_1200: Rem
! - Print @0,22;'CE';"SORTING...please wait";
K1$ = ""
L_1515: Search #9,3,1;K1$,R3,E 
If E Goto L_1600
Search #9,5,1;K1$,R3,E 
If E Let e$ = "syserrorfile 316h sortfile mode (m)=5 keyno (k)=1 r=",R3," e=",e," keyval (k$)=",K1$ \ error 10000
Goto L_1515
L_1600: Rem "============ sort saract file by salesrep
PCTR = 0
K1$ = CUST[0] Using "######" \ K3$ = CUST[1] Using "######"
L_1620: Search #4,3,1;K1$,R3,E
If E = 2 Goto L_1900
If K1$[1,Len(K3$)] > K3$ Goto L_1900
Rem {begin src/inc/rtn.sortmsg.i}
PCTR = PCTR + 1
! - If Not(Fra(PCTR / 500)) Print Using "#######";@25,22;PCTR;" Records Processed";
Rem {end rtn.sortmsg.i}
Mat Read #4,R3,0;A2;
If A2[0] < SLSM[0] Goto L_1620
If A2[0] > SLSM[1] Goto L_1620
K4$ = A2[2] Using "######"
Search #3,2,1;K4$,R3,E
If E let e$="Customer ",K4$," in saract file but not is customer file!" \ error 10000
K4$ = " ",K4$ \ K4$[1,3] = A2[0] Using "###"
K4$[4,9] = A2[2] Using "######"
K4$[10] = ""
Search #9,4,1;K4$,R3,E
Goto L_1620
!
! process section
L_1900: Rem start print here
!
if J8 ! dx xml headings
  !
  if SORTOPT=2 let tmp$="SALESMAN",fdel$ else tmp$=""
  tmp$=tmp$,"CUST #",fdel$,"CUSTOMER NAME",fdel$
  tmp$=tmp$,"PHONE",fdel$,"TOTAL",fdel$
  tmp$=tmp$,"CURRENT",fdel$,"OVER 30",fdel$,"OVER 60",fdel$
  tmp$=tmp$,"OVER 90",fdel$,"OVER 120",fdel$
  tmp$=tmp$,"CURRENT PAYMENTS",fdel$,"CURRENT INVOICED",fdel$
  tmp$=tmp$,"PENDING CREDITS",fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
! - If Not(SCRPRT)
! -   Print @0,22;'CE';"Printing, please wait...";
! - End If 
! - If Err 0 Gosub ERR_ESCAPE
! - If V9[3] = 22 Print 'CS'
PCTR = 0
V9[1] = 100 \ V9[0] = 0
Gosub L_5800
If SORTOPT = 1
  K1$ = CUST[0] Using "######" \ K3$ = CUST[1] Using "######"
Else 
  K1$ = SLSM[0] Using "###" \ K3$ = SLSM[1] Using "###"
End If 
If SORTOPT = 2 Goto L_2070
Search #3,2,D1;K1$,R3,E
TEMPK1$ = " ",TEMPK1$ \ TEMPK1$ = K1$
If Not(E) Goto L_2120
L_2000: Rem "================================== main loop is here
If SORTOPT = 2 Goto L_2070
Search #3,3,D1;K1$,R3,E 
If E Goto L_4000
If K1$[1,Len(K3$)] > K3$ Goto L_4000
TEMPK1$ = " ",TEMPK1$ \ TEMPK1$ = K1$
Goto L_2120
L_2070: Rem "salesrep
Search #9,3,1;K1$,R3,E 
If E Goto L_4000
Z1 = K1$[1,3]
If SALESREP If SALESREP <> Z1 Gosub L_4500
TEMPK1$ = " ",TEMPK1$ \ TEMPK1$[1,6] = K1$[4,9]
L_2120: 
Search #3,2,D1;TEMPK1$,R3,E 
Mat Read #3,R3,0;A1$;
Mat Read #3,R3,194;CUST2;
Mat Read #3,R3,388;C3$;
Mat Read #3,R3,142;C1;
Mat Read #3,R3,210;C3;
If Not(S9[0]) And C3[0] + C3[2] + C3[3] + C3[4] + C3[5] - C3[1] = 0 If C3[1] = 0 Goto L_2000
Gosub L_2800
SALESCRD = SALESCRD + CRDTOT
GNDCRD = GNDCRD + CRDTOT
K9$ = C1[1] Using "######"
If V9[1] > V9[3] Gosub L_5800
If SORTOPT = 2 Let SALESREP = K1$[1,3] Else Let SALESREP = 0
If P9$[50,50] <> "M" And P61$[67,67] = "Y" ! not by month/by term code
  Mat Read #1,20,130;AGEBUCK;
  AGEBUCK[4] = AGEBUCK[3] + 30
  If CUST2[0] > 0 And CUST2[0] <= 99
    Read #50,(CUST2[0]),30;DDAY;
    If DDAY = 0 Let DDAY = 1
    If DDAY > 0
      AGEBUCK[0] = DDAY
      AGEBUCK[1] = DDAY * 2
      AGEBUCK[2] = DDAY * 3
      AGEBUCK[3] = DDAY * 4
      AGEBUCK[4] = DDAY * 5
    End If 
  End If 
End If 
Gosub L_2500
If T9[0,2] = 0 And T9[1,2] = 0 And T9[2,2] = 0 And T9[3,2] = 0 And T9[4,2] = 0 And T9[8,2] = 0 And T9[6,2] = 0 Goto L_2000
if J8=0 Print #0;K9$;" ";A1$[31,49];" ";A1$[20,30];
T[0] = 0
If T[2] Let T[0] = T[1] / T[2]
Goto L_5000
!
L_2500: Rem "=============================== accumulate ar for 1 cust!
K4$ = K9$
L_2520: 
Search #4,3,1;K4$,R4,E 
If E Return 
If K4$[1,6] > K9$ Return 
Mat Read #4,R4,0;A2;
Mat Read #4,R4,24;A3;
Mat Read #4,R4,124;A0;
Mat Read #4,R4,154;A4;
Mat Read #4,R4,316;ARREF;
if sortopt=1
	If A2[0] < SLSM[0] Goto L_2520
	If A2[0] > SLSM[1] Goto L_2520
endif
If SALESREP If SALESREP <> A2[0] Goto L_2520
If A0[3] < W1[0] Or A0[3] > W1[1] Goto L_2520
If A0[5] < DIV[0] Or A0[5] > DIV[1] Goto L_2520
TYPE = Int(100 * Fra(A2[3]))
If TYPE = 7 Let A3[2] = A3[0] - A3[1] - A3[2] \ Goto L_2670
AGE[1] = 0 \ Gosub L_3000
If TYPE > 5 Let A3 = - A3;A3[1] = - A3[1];A3[2] = - A3[2]
Gosub L_2700
T9[BUCK,2] = T9[BUCK,2] + (A3 - A3[1] - A3[2])
L_2670: 
X2 = Fra(A0[2] / 100) * 10000;X2 = X2 + Int(A0[2] / 100)
If (TYPE = 1 Or TYPE = 6) And Int(ARDATE / 100) = X2 Let T9[6,2] = T9[6,2] + A3[0]
If (TYPE = 7 Or TYPE = 9) And Int(ARDATE / 100) = X2 Let T9[8,2] = T9[8,2] + A3[0]
Goto L_2520
!
L_2700: Rem "============================== put in bucket
BUCK = (Fra(AGE[1]) * 10)
If BUCK > 4 Let BUCK = 4
If BUCK < 0 Let BUCK = 0
T[1] = T[1] + (Int(AGE[1]) * (A3 - A3[1] - A3[2]))
T[2] = T[2] + (A3 - A3[1] - A3[2])
T[3] = T[3] + (Int(AGE[1]) * (A3 - A3[1] - A3[2]))
T[4] = T[4] + (A3 - A3[1] - A3[2])
Return 
!
L_2800: K5$ = " ",K5$ \ CRDTOT = 0
K5$ = C1[1] Using "######"
L_2820: Search #5,3,2;K5$,R5,E 
If E Goto L_2910
C5 = K5$[1,6] \ If C5 <> C1[1] Goto L_2910
Mat Read #5,R5;H0; \ Mat Read #5,R5,104;H5;
If Fra(H0[3]) <> 0 Or H0[3] < 0 Or H0[3] > Chf(6) - 1 Goto L_2900
If SORTOPT = 2 If H0[11] <> Z1 Goto L_2900
If H5[8] < DIV[0] Or H5[8] > DIV[1] Goto L_2900
If H0 >= 9 And H0 <= 11
  Mat Read #6,H0[3],8;T2
  CRDTOT = CRDTOT + T2[0]
End If 
L_2900: Goto L_2820
L_2910: Return 
!
L_3000: Rem AGING ROUTINE
If Not(A2[4]) let e$="No date found for reference # ",str$(ARREF),"!" \ error 10000
If P9$[19,19] <> "Y" If Int(Fra(A2[3]) * 100) > 5 Goto L_3100
X2 = A2[4] \ Gosub L_7870 \ X = D3[0]
X2 = A4[3] \ Gosub L_7840 \ A4[3] = 0
If P9$[25,25] = "Y" If A4[3] Let X = A4[3]
If Int(Fra(A2[3]) * 100) > 5 And A4[3] = 0 Let X = D3[0]
AGE[1] = 0;AGE[2] = ARDATE;AGE[3] = X;AGE[4] = 0
If P61$[67,67] = "Y" And P9$[50,50] <> "M"
  AGE[7] = CUST2[0];AGE[6] = 50
Else 
  AGE[7] = 0;AGE[6] = 0
End If 
! - If Spc(4) > 1280 Goto L_3065
! - Swap 1,"UTAGE"
! - L_3055: Signal 2,X,AGE[0],AGE[1] \ If X <> Spc(6) Goto L_3055
! - Goto L_3070
! - L_3065: Call "UTAGE5",P9$,AGE[]
call UTAge5(e$,P9$,AGE[],1)
If AGE[0] = 1 Let E = 0 \ rem ! - Gosub ERR_SEARCH
If AGE[0] = 2 Goto L_3100
If P9$[50,50] = "M"
  If Int(AGE[1]) > 4 Let AGE[1] = (Int(AGE[1]) + .5)
Else 
  If Int(AGE[1]) > AGEBUCK[4]
    AGE[1] = (Int(AGE[1]) + .5)
  End If 
End If 
L_3100: Return 
!
! - GETSORTOPT: Rem INPUT FOR SCREEN
! - J0$ = "3000 13004"
! - J2$ = "#" \ J1 = SORTOPT
! - J5$ = "Enter Report Sort Option  1: Customer or  2: Salesperson"
! - Gosub ISINPUT
! - If J1 < 1 Or J1 > 2 Goto GETSORTOPT
! - If J1 <> SORTOPT
! -   If J1 = 1
! -     Print @0,14;'CL';
! -     SLSM[0] = 0;SLSM[1] = 999
! -   Else 
! -     Print @5,14;"5>";
! -     Print @8,14;"SALESPERSON";
! -     Print Using "###";@35,14;SLSM[0];@53,14;SLSM[1];
! -   End If 
! - End If 
! - SORTOPT = J1
! - Return 
! - L_3250: J0$ = "3000 12506"
! - D1 = 1
! - J2$ = "#" \ J1 = D1
! - J5$ = "Enter Print Option  1: Customer Code or  2: Customer Name"
! - Gosub ISINPUT
! - D1 = J1
! - If D1 < 1 Or D1 > 2 Goto L_3250
! - GETCUSTRNG: Rem get customer range
! - Print @24,8;'CL';
! - If D1 = 1
! - L_3300: J0$ = "3000 63208"
! -   J2$ = "######" \ J1 = CUST[0]
! -   J5$ = "Enter Starting Customer Code"
! -   Gosub ISINPUT
! -   CUST[0] = J1
! -   J0$ = "3000 65108"
! -   J2$ = "######" \ J1 = CUST[1]
! -   J5$ = "Enter Ending Customer Code"
! -   Gosub ISINPUT
! -   CUST[1] = J1
! -   If CUST[0] > CUST[1]
! -     Print @0,23;'CL RB';"Ending Customer Code Must Be Greater Than Starting";
! -     Signal 3,20 \ Goto GETCUSTRNG
! -   End If 
! - Else 
! - L_3367: J0$ = "2 00142408"
! -   J1$ = SNAME$[1,14]
! -   J5$ = "Enter Starting Customer Name"
! -   Gosub ISINPUT
! -   SNAME$[1,14] = J$
! -   J0$ = "2 00144208"
! -   J1$ = ENAME$[1,14]
! -   J5$ = "Enter Ending Customer Name"
! -   Gosub ISINPUT
! -   ENAME$[1,14] = J$
! -   If ENAME$ < SNAME$
! -     Print @0,23;'CL RB';"Ending Name Must Be Greater Than Starting Name";
! -     Signal 3,30 \ Goto L_3367
! -   End If 
! - End If 
! - Return 
! - GETWHSRNG: Rem warehouse #3
! - L_3405: J0$ = "3000 23610"
! - J2$ = "##" \ J1 = W1[0]
! - J5$ = "Enter Starting Warehouse"
! - Gosub ISINPUT
! - W1[0] = J1
! - J0$ = "3000 25410"
! - J2$ = "##" \ J1 = W1[1]
! - J5$ = "Enter Ending Warehouse"
! - Gosub ISINPUT
! - W1[1] = J1
! - If W1[0] > W1[1]
! -   Print @0,23;'CL RB';"Ending Warehouse Must Be Greater Than Starting";
! -   Signal 3,30 \ Goto GETWHSRNG
! - End If 
! - Return 
! - GETDIVRNG: Rem division #4
! - L_3505: J0$ = "3000 23612"
! - J2$ = "##" \ J1 = DIV[0]
! - J5$ = "Enter Starting Division"
! - Gosub ISINPUT
! - DIV[0] = J1
! - J0$ = "3000 25412"
! - J2$ = "##" \ J1 = DIV[1]
! - J5$ = "Enter Ending Division"
! - Gosub ISINPUT
! - DIV[1] = J1
! - If DIV[0] > DIV[1]
! -   Print @0,23;'CL RB';"Ending Division Must Be Greater Than Starting";
! -   Signal 3,25 \ Goto GETDIVRNG
! - End If 
! - Return 
! - GETSLSMRNG: Rem get slsm person
! - If SORTOPT <> 2 Return 
! - J0$ = "3000 33514"
! - J2$ = "###" \ J1 = SLSM[0]
! - J5$ = "Enter Starting Salesperson"
! - Gosub ISINPUT
! - SLSM[0] = J1
! - J0$ = "3000 35314"
! - J2$ = "###" \ J1 = SLSM[1]
! - J5$ = "Enter Ending Salesperson"
! - Gosub ISINPUT
! - SLSM[1] = J1
! - If SLSM[0] > SLSM[1]
! -   Print @0,23;'CL RB';"Ending Salesperson Must Be Greater Than Starting";
! -   Signal 3,20 \ Goto GETSLSMRNG
! - End If 
! - Return 
!
L_4000: Rem "=========================================== batch totals
if J8 goto OUTEND ! dx xml
!
If SORTOPT = 2 Gosub L_4500
TOTAR = T9[7,1]
For X = 0 To 4
  If TOTAR
    PRCNTAR[X] = FNR((T9[X,1] / TOTAR) * 100)
  Else 
    PRCNTAR[X] = 0
  End If 
Next X
Gosub L_5800
Print #0;"\15\\15\\15\\15\\15\"
Print #0; Tab 35;"**** ACCOUNTS RECEIVABLE TOTALS ****"
Print #0;"\15\\15\\15\"
P$ = "---,---,---.##"
Print #0; Tab 35;AGEBUCK$[81,100]; Tab 55;
Print #0; Using P$;T9[4,1];
Print #0; Using "   ----.##%";PRCNTAR[4]
Print #0; Tab 35;AGEBUCK$[61,80]; Tab 55;
Print #0; Using P$;T9[3,1];
Print #0; Using "   ----.##%";PRCNTAR[3]
Print #0; Tab 35;AGEBUCK$[41,60]; Tab 55;
Print #0; Using P$;T9[2,1];
Print #0; Using "   ----.##%";PRCNTAR[2]
Print #0; Tab 35;AGEBUCK$[21,40]; Tab 55;
Print #0; Using P$;T9[1,1];
Print #0; Using "   ----.##%";PRCNTAR[1]
Print #0; Tab 35;AGEBUCK$[1,20]; Tab 55;
Print #0; Using P$;T9[0,1];
Print #0; Using "   ----.##%";PRCNTAR[0]
Print #0; Tab 55;"--------------"
Print #0; Tab 35;"TOTAL A/R..........: "; Tab 55;
Print #0; Using P$;T9[7,1];
If TOTAR Let PRCNTAR[0] = FNR((TOTAR / TOTAR) * 100) Else Let PRCNTAR = 0
Print #0; Using "   ----.##%";PRCNTAR[0]
T[0] = 0 \ If T[4] Let T[0] = T[3] / T[4]
If P9$[50,50] <> "M" Print #0; Using "AVERAGE AGE (DAYS)----#.###"; Tab 35;T[0]
If P9$[50,50] = "M" Print #0; Using "AVERAGE AGE (MONTHS)----#.###"; Tab 35;T[0]
Print #0;""
Print #0; Tab 35;"TOTAL PAYMENTS..: "; Tab 55;
Print #0; Using P$;T9[8,1]
Print #0; Tab 35;"TOTAL INVOICED..: "; Tab 55;
Print #0; Using P$;T9[6,1]
Print #0; Tab 35;"TOTAL PENDING CREDIT"; Tab 55;
Print #0; Using P$;GNDCRD
For X0 = 0 To 3 \ For X1 = 0 To 8 \ T9[X1,X0] = 0 \ Next X1 \ Next X0
GNDCRD = 0
Goto OUTEND
!
L_4500: Rem  "=========================================== salesrep break
if J8 goto ExitSalesmanTotal ! dx xml
!
If Not(T9[7,0]) And Not(T9[0,0]) And Not(T9[1,0]) And Not(T9[2,0]) And Not(T9[3,0]) And Not(T9[4,0]) And Not(T9[6,0]) And Not(T9[8,0]) Return 
Print #0;" "
Print #0;"*** TOTALS FOR SALESREP ";SALESREP;
Print #0; Tab 40;
Print #0; Using "-------#.## ";T9[7,0];
For X1 = 0 To 4
  Print #0; Using P1$;T9[X1,0];
Next X1
Print #0; Using P1$;T9[8,0];
Print #0; Using P1$;T9[6,0];
Print #0; Using P1$;SALESCRD
!
ExitSalesmanTotal:
For X1 = 0 To 8 \ T9[X1,0] = 0 \ Next X1
SALESCRD = 0
V9[1] = 100
Return 
!
L_5000: Rem "=========================================== aging print line
if J8 ! dx xml
  if SORTOPT=2 let tmp$=SALESREP using "###",fdel$ else tmp$=""
  tmp$=tmp$,K9$,fdel$,rtrim$(A1$[31,60]),fdel$,A1$[20,30],fdel$
  T9[7,2] = T9[0,2] + T9[1,2] + T9[2,2] + T9[3,2] + T9[4,2]
  S2 = 5
  X2 = 0 \ T[1] = 0 \ T[2] = 0
  tmp$=tmp$,T9[7,2] Using "-------#.##",fdel$
  For X1 = 0 To 4
    tmp$=tmp$,T9[X1,2] Using P1$,fdel$
    T9[X1,0] = T9[X1,0] + T9[X1,2]
    T9[X1,1] = T9[X1,1] + T9[X1,2]
  Next X1
  tmp$=tmp$,T9[8,2] Using P1$,fdel$
  tmp$=tmp$,T9[6,2] Using P1$,fdel$
  tmp$=tmp$,CRDTOT Using P1$,fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  goto ExitDetailPrint
end if
!
Rem {begin src/inc/rtn.printmsg.i}
! - If Not(SCRPRT)
! -   PCTR = PCTR + 1
! -   If Not(Fra(PCTR / 500))
! -     Print Using "#######";@25,22;PCTR;" Records Printed";
! -     Print Using "   Page ####";V9[0];
! -   End If 
! - End If 
Rem {end rtn.printmsg.i}
Print #0; Tab 40;
T9[7,2] = T9[0,2] + T9[1,2] + T9[2,2] + T9[3,2] + T9[4,2]
S2 = 5
X2 = 0 \ T[1] = 0 \ T[2] = 0
Print #0; Tab 40;
Print #0; Using "-------#.## ";T9[7,2];
For X1 = 0 To 4
  Print #0; Using P1$;T9[X1,2];
  T9[X1,0] = T9[X1,0] + T9[X1,2]
  T9[X1,1] = T9[X1,1] + T9[X1,2]
Next X1
Print #0; Using P1$;T9[8,2];
Print #0; Using P1$;T9[6,2];
Print #0; Using P1$;CRDTOT
Print #0;""
V9[1] = V9[1] + 2
!
ExitDetailPrint:
For X1 = 0 To 1
  T9[8,X1] = T9[8,X1] + T9[8,2]
  T9[7,X1] = T9[7,X1] + T9[7,2]
  T9[6,X1] = T9[6,X1] + T9[6,2]
Next X1
For X1 = 0 To 8 \ T9[X1,2] = 0 \ Next X1
Goto L_2000
!
! - L_5600: Rem screen display
! - Print 'CS';@0,0;"-mx316h-"; Tab 27;"CUSTOMER ACTIVITY SUMMARY";
! - If Not(S9[0])
! -   Print @0,2;'BR';"CURRENT FILE";'ER';
! - Else 
! -   Print @0,2;'BR';"FROZEN FILE ";'ER'; Tab 15;"AGED AS OF: ";ARDATE$;
! - End If 
! - Print @8,4;"REPORT SORT OPTION: "; Tab 35;" 1: Customer or  2: Salesperson";
! - Print @29,7;'BR';"STARTING";'ER';@49,7;'BR';"ENDING";'ER';
! - Print @8,8;"CUSTOMER";
! - Print @8,10;"WAREHOUSE";
! - Print @8,12;"DIVISION";
! - If SORTOPT = 2
! -   Print @8,14;"SALESPERSON";
! - End If 
! - Print @5,4;"1>";@5,8;"2>";@5,10;"3>";@5,12;"4>";
! - If SORTOPT = 2
! -   Print @5,14;"5>";
! - End If 
! - Return 
! - L_5700: Rem DISPLAY SCREEN VARIABLES
! - Print Using "#";@30,4;SORTOPT;
! - If D1 = 1
! -   Print Using "######";@32,8;CUST[0];@51,8;CUST[1];
! - Else 
! -   Print @24,8;SNAME$[1,14];@42,8;ENAME$[1,14];
! - End If 
! - Print Using "##";@36,10;W1[0];@54,10;W1[1];
! - Print Using "##";@36,12;DIV[0];@54,12;DIV[1];
! - If SORTOPT = 2
! -   Print Using "###";@35,14;SLSM[0];@53,14;SLSM[1];
! - End If 
! - Return 
!
L_5800: Rem "================================================ heading
if J8 return ! dx xml
!
If V9[0] = 0 Goto L_5860
If V9[3] <> 22 Goto L_5850
HEADMORE: Rem check for more
! - Print @0,23;'CL';"Press  <CR>: continue  E: exit ";
! - Input Len 1;""J1$
! - Call String(1,J1$)
! - If J1$ = "E" Gosub L_9040
! - If J1$ <> "" Goto HEADMORE
! - Print 'CS'
L_5850: Print #0;"\14\"
L_5860: V9[0] = V9[0] + 1 \ V9[1] = 7
Print #0;"-mx316h-";
Print #0; Tab 10;ARDATE$; Tab (66 - Int(Len(CNAME$) / 2));CNAME$; Tab 120;"PAGE ";V9[0]
Print #0; Tab 2;Msc$(3);
Print #0; Tab 50;"CUSTOMER ACTIVITY SUMMARY"
If S9[0] Print #0; Tab 2;"FROZEN FILE"; Else Print #0; Tab 2;"CURRENT FILE";
Print #0; Tab 49;D2$;": ";
Print #0; Using "##";W1[0];" THRU ";W1[1];
Print #0;"   DIVISION: ";
Print #0; Using "###";DIV[0];" THRU ";DIV[1]
Print #0;" "
Print #0; Tab 58;"O U T S T A N D I N G  B A L A N C E S"; Tab 105;"CURRENT ACTIVITY"; Tab 124;"PENDING"
Print #0; Tab 1;"CODE     NAME                PHONE";
Print #0; Tab 40;
Print #0;"      TOTAL";
PTAB = 54
For X = 1 To 5
  Print #0; Tab (PTAB);AGEBUCKH$[((X * 8) - 7),(X * 8)];
  PTAB = PTAB + 10
Next X
Print #0;"  PAYMENTS";
Print #0;"  INVOICED";
Print #0;"    CREDIT"
Print #0;""
Return 
!
! - L_7000: Rem "======================================== check printer type
! - F = 0
! - If Err 0 Let F = Spc(8)
! - N = Chf(0)
! - If Err 0 Gosub ERR_ESCAPE
! - V9[3] = 55;SCRPRT = 0
! - If F
! -   V9[3] = 22
! -   SCRPRT = 99
! - End If 
! - Return 
!
! - Rem {begin call.input.i}
! - ISINPUT: Rem  Drop-in change to Call Input   G.Doscher  10/29/96
! - Call "Input",J1,J$,J0$,J1$,J4$,J5$
! - Return 
! - ISERRMSG: X1 = Len(J7$)
! - Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
! - Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
! - Print 'K1'; \ Window Close \ Return 
!
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
!
Rem {end call.input.i}
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6]
Return 
!
L_7840: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
!
L_7870: Rem CONVERT JULIAN TO YYMMDD
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
!
OUTEND: Rem OUT
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
try call dxclose() else rem
End 
!
! - If V9[3] <> 22 Goto L_9030
! - ENDMORE: Rem end ask to continue
! - Print @0,22;'CL';"End of Report Range.  Press  <CR>: continue  E: exit ";
! - Input Len 1;""J1$
! - Call String(1,J1$)
! - If J1$ = "E" Goto L_9040
! - If J1$ <> "" Goto ENDMORE
! - L_9030: Print #0;"\14\" \ Print 'CS'; \ Goto L_1000
! - L_9040: Print 'CS'
! - Chain "MX000C"
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
