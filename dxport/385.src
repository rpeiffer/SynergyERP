! >>> Program 385
!
! description Debit Memo Accept 
! loadsave -w -n 100,10 -o prog/dxport/385.dl4 src/385.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC 10, 2008  15:58:38
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/po385.src (univ2) [mary] {51836}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

!Declare Intrinsic Sub DateToJulian,FindF,InpBuf,Logic,String,Time,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$,OpenMySQLMirror
Include "src/inc/sql_prod.inc"
Include "src/inc/fileinvtrans.inc"
External Lib "invttrans.dl4"
Declare External Sub Maketrans
! Option Default Dialect IRIS1
Rem PO385   DEBIT MEMO RETURNS TO STOCK ACCEPT
Rem  AUTHOR: G.DOSCHER   2/19/81
Rem  LAST UPDATE:  G.DOSCHER  3/22/91 - REWRITTEN FOR XINDIST
Try
Com 1%,WAREHOUSE,SOURCE
!If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @80,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
dim 3%,plcurrfact,phcurrfact,1%,plcurrid,phcurrid
Dim 1%,FL1[2],FL1$[80],2%,FL2[3],3%,FL3[14],FL4[1]
Dim 1%,FT1[3],FT1$[72],2%,FT2[3],3%,FT3[3]
Dim P61$[256],FSKEY$[30],3%,FC2[1],SPCOST,PL[5],FCOST,P8$[7]
Dim 1%,MODE,WPF[1024],POMISC[2],FLAG,2%,D3[1],SCRATCH$[80]
Dim 2%,S9,FIFL,P60$[50],FLT$[50],3%,FQ9[2],FQTY,FLK$[50]
Dim 2%,QTY,S2[3],PH[4],1%,S1[3],S0$[36],3%,S3[5],OL2$[16]
Dim 2%,WHOS
Dim 1%,L1[5],LT1[3],X1[9],H4[3],E,NSD1[7],P1[1],P4,PFU1[20],TYPE,FLAGS[11]
Dim 1%,M0,SN1[2],SN9,W1[2],WHSE,CH_INVTR,2%,D9[5]
Dim 1%,SPO,PCT3[2],C0,2%,COMP,PCT1[5],POCNTRL,3%,R[50],PCT2[5],PCT4[1]
Dim K30$[30],PCT$[12],LETTER$[1]
Dim 2%,B[24],C1[6],DATE,H0[5],H3[4],H6[4],L2[2],Q2[1],S,S7,NSTAT
Dim 2%,WH7[3],U4[1],SN2[9],SN0[1],CURJDATE
Dim 2%,AV2[6],C4[8],P2[2],T1[4],T5,J,I1[2],NSD2[4],W2[9],W7[1],X2[9]
Dim 3%,A[33],C9[4],H5[2],L3[6],LT2[5],R0,R1[15],T2[17],T9[1],C2[7],V4[1]
Dim 3%,H8[4],P3[4],Q3[1],I3,V1[2],VP1[12,3],VP2[12,3],U1,W3[24],X3[9]
Dim 3%,WHLV[2],PLV[1],WHLBS[1],LBRECV,PRPARC[3]
Dim 3%,NSD3[9],A1[7],POL1[4],SN3[6],POCOST,POCOST1,A$[156],INVBAL
Dim 3%,TOTGLCOST,INVNO,UIDREC[1]
Dim 3%,PCT5[11],NEWCOST,PL4[23],POH7[2],FTRECA,FTRECB
Dim 3%,PCT6[1],PCT9[4],PCT8[12],1%,PCT7[2],PCT0[2]
Dim 3%,BPOCOST[1],EXTFREIGHT,EXTMISC,BFREIGHTCOST,BMISCCOST,BASEPOCOST
Dim 3%,POCMISC,POCFRGT
Dim A1$[20],A2$[20],A3$[20],F$[20],L1$[120],Q1$[18],T1$[12],U5$[50]
Dim AV1$[32],LT$[56],J$[90],J1$[90],P0$[66],P9$[50],W2$[16],USR$[40]
Dim LT1$[6],P1$[6],POL1$[38],K18$[60],SN$[224],SN1$[54],Z1$[60]
Dim SNK$[50],SNK1$[40],SNKE$[40],SNKE1$[50],K7$[50],DATE$[20]
Dim 1%,CNVTU[9]
Dim 3%,PFU2[6],CNVTA[4],GLCOST,urec
Dim 1%,FIFOSPECCH[10],FIFOSPEC1[10],FIFOSPEC$[150],2%,FIFOSPEC2[10],3%,FIFOSPEC3[16]
Dim 1%,POGLFLAG,WH
Dim 3%,TMPREC,CMD$[100],I$[50]
Dim 2%,ARDATE,POSTPER,S0[8],CLIENT
Rem dim for glpo temp file
Dim 2%,CLIENT,JRNL,GLT1[1],3%,GLT0[1],REC_GLT,GLACCT,GLAMT,GLTKEY$[50]
Rem dim for glpocntrl variables
Dim 1%,POTYPE
Dim 1%,PRODCAT,CH_GLC,GLC0[3],3%,GLC1[9],GLACCT,REC_GLC,GLCKEY$[50]
Rem dim for glpodetl variables
Dim 2%,GLD[6],GLD$[12],GLD1$[30],GLD2$[2],4%,GLD1,REC_GLD,1%,GLD2[1],3%,GLDTRN
Dim GLDKEY1$[50],GLDKEY2$[50],KEYVEND$[40],VENDNAME$[30]
Dim X$[20]
Dim 3%
dim groupid$[1]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
dim ITR. as invtrans
! call dxopen() ! needed?

! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

Comp=IntCo ! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(Comp)
Open #1,J$
! X2 = Spc(5)
COMP = Intco
let urec=getuidrec(e$,IntCo,Userid$)
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
!X2 = Spc(5)
!COMP = Int((X2 - Int(X2 / 16384) * 16384) / 64)
Mat Read #1,3,192;FIFL;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,19,50;P9$;
Mat Read #1,52,60;P8$;
Mat Read #1,51,76;SPO;
Mat Read #1,51,88;POGLFLAG;
Mat Read #1,52,0;S0;
Mat Read #1,0,108;ARDATE;
try close #9 else rem
X$ = ARDATE Using "&&&&&&" \ POSTPER = X$[1,4]
For X1 = 2 To 18
  Read J \ If J = -1 Goto L_840
  Read #1,88,J;F$; \ Open #X1,F$
L_840: Next X1
Data "-1","1792","-1","2400","2944","416","2416","2432","1744","-1","-1","1568","2448","2512","2336","2528","2320"
If P60$[9,9] = "F" Or P60$[9,9] = "L"
  For X1 = 19 To 20
    Read J
    Read #1,88,J;F$; \ Open #X1,F$
  Next X1
  Data "3008","3024"
  If P61$[60,60] = "Y"
    F$ = COMP Using "4/FIFOSPC#"
    Ropen #29,F$
  End If 
End If 
If SPO
  F$ = COMP Using "2/POCTFLE#" \ Open #30,F$
End If 
Read #1,88,2768;F$; \ Ropen #28,F$
Rem open gl files
If POGLFLAG <> 0 And P9$[17,17] = "Y" And SPO <> 0
  F$ = "6/GLPOCNTRL" + Str$(COMP) \ Open #51,F$
  CH_GLC = 51
  GLCKEY$ = " ",GLCKEY$;GLCKEY$[1,6] = "DFAULT"
  Search #51,2,1;GLCKEY$,REC_GLC,E \ If E > 1 Gosub ERR_SEARCH
  If E
  	eflg=eflg+1
	Message$=Message$+"G/L - P/O INTERFACE CONTROL NOT SETUP PROPERLY. No Update Performed."
	Goto OUTEND
    !Print @0,22;'CE RB';"G/L - P/O INTERFACE CONTROL NOT SETUP PROPERLY"
    !Signal 3,30
    !Goto OUTEND
  End If 
  F$ = "4/GLPODETL" + Str$(COMP) \ Open #52,F$
  CH_GLD = 52
End If
sqlChan = OpenMySQLMirror(e$,60)
DATE$ = Tim(8) Using "&&",Tim(9) Using "&&",Tim(10) Using "&&"
L_885: DATE = DATE$
X2 = DATE \ Gosub L_7820 \ X2 = 0
If X2 Let CURJDATE = X2 Else Gosub L_7600
TRUE = 1 \ FALSE = 0
Mat Read #1,115;D9;
L_1010: !Print @0,21;"DO YOU WANT TO ACCEPT DEBITS MEMOS?  (Y/N) ";'CE';
!Input Len (16384 + 1);""U5$
!Call String(1,U5$)
!!If U5$ = "N" Goto L_9010
!If U5$ <> "Y" Print 'RB'; \ Goto L_1010
U5$="Y"
!Gosub L_8300
Call DXGet("WHSE",tmp$)
LET whse=tmp$
if not(whse) and rtrim$(tmp$)<>"0"
	eflg=eflg+1
	Message$=Message$+"Invalid Warehouse Number Entered"
	goto outend:
endif
if whse<0 or whse>99
	eflg=eflg+1
	Message$=Message$+"Invalid Warehouse Number Entered"
	goto outend:
endif
Gosub L_8200
WAREHOUSE = WHSE;SOURCE = 385
If POGLFLAG <> 0 And P9$[17,17] = "Y" And SPO <> 0
	F$ = "6/GLDMTEMP" + Str$(WHSE) + Str$(COMP)
	Call FindF(F$,A9)
	If A9 And Not(RESTART)
		eflg=eflg+1
		Message$=Message$+"G/L - DM Interface File In Use Elsewhere. No Update Performed."
		goto outend:
		!Print @0,23;'CL RB';"G/L DM Interface in use elsewhere...";
		!Signal 3,30
		!Goto OUTEND
	End If 
	If RESTART And Not(A9)
		eflg=eflg+1
		Message$=Message$+"G/L - DM Interface File not found. No Update Performed."
		goto outend:
		!Print @0,23;"G/L - DM Interface Not Found "; \ Signal 3,30
		!Gosub ERR_SEARCH
	End If 
	If Not(A9)
		tmp$="FILES/",f$
		CMD$ = "[1:10] ",tmp$,"!"
		Build #50,CMD$
		TMPREC = 9 \ Search #50,0,1;I$,TMPREC,E \ If E Gosub ERR_SEARCH
		TMPREC = 1 \ Search #50,0,0;I$,TMPREC,E \ If E Gosub ERR_SEARCH
		Close #50
	End If 
	Open #50,F$
	CH_GLT = 50
ENDIF
TMP$="doing a lock"
call "proglock.dl4","385-"+(whse using "&&"),1,TMP$
!Print @0,23;"ACCEPTING DEBIT MEMOS.   PLEASE WAIT . . .  ";'CL';
!Signal 3,0
if eflg<>0 goto outend:
A1$ = "13"
L_2020: Search #8,3,1;A1$,R1[8],E \ If E > 2 Gosub ERR_SEARCH
If A1$[1,2] <> "13" Let E = 2
If Not(E)
  Mat Read #8,R1[8];H0
  Mat Read #8,R1[8],222;H3
  Mat Read #8,R1[8],242;H4
  Mat Read #8,R1[8],250;H8
  Mat Read #8,R1[8],310;PH
  Mat Read #8,R1[8],528;POH7
  JRNL = POH7[2]
  Mat Read #5,H0[1],0;VENDNAME$
  Mat Read #5,H0[1],264;C1
  Mat Read #5,H0[1],498;C2
  Mat Read #5,H0[1],448;V4
  T9[1] = 0
  TOTGLCOST = 0
  If H0[0] <> 13
	!Print "STATUS ERROR-- FILE DOESN'T MATCH INDEX!" \ Gosub ERR_SEARCH
	eflg=eflg+1
	Message$=Message$+"Bypass Debit Memo "+str$(h0[2])+" Status Error"
	goto l_2020:
  endif
  If WHSE<>0 and WHSE <> H4[1] Goto L_2020
  Z9 = Z9 + 1
  A2$ = H0[2] Using "######"
L_2160: Search #9,3,1;A2$,R9,E \ If E > 2 Gosub ERR_SEARCH
  X2 = A2$[1,6] \ If X2 <> H0[2] Let E = 2
  If Not(E)
    Gosub L_6000
    If FLAGS[2] Goto L_2160
     If R1[8] <> L3[0] 
	eflg=eflg+1
	Message$=Message$+"Bypass Debit Memo "+str$(h0[2])+" Header Record Pointer Error On Line "+a2$[7]
	goto l_2020:
	! Print "HEADER RECORD POINTER ERROR" \ Gosub ERR_SEARCH
	! goto L_2160: ! bypass the line
    endif
    
	
    Gosub L_2800
    POCOST = PL4[0]
    If L3[4] <> 0 And PL4[16] <> 0
      POCOST = (((L3[4]) * PL4[0]) / (L3[4]+pl4[16]))
    End If 
    POCOST1 = POCOST
    If (L3[4]+pl4[16]) Let BPOCOST[0] = (PL4[7] / (L3[4]+pl4[16])) Else Let BPOCOST[0] = 0
    BPOCOST[1] = BPOCOST[0]
    BASEPOCOST = BPOCOST[0]
    BFREIGHTCOST = 0
    If L2[1] <> 0 And L3[4] <> 0 and pl4[16]<>0
      If P60$[49,49] = "F" Or P60$[49,49] = "B" Or P60$[19,19] = "Y"
        If L1[5] = -2 ! lot cost
          BFREIGHTCOST = L2[1]
        Else 
          EXTFREIGHT = FNR((L3[4]+pl4[16]) * L2[1])
          If L1[5] = -1 Or L1[5] = -3
            If PL4[13]
              EXTFREIGHT = FNR((L3[4]+pl4[16]) * (L2[1] * (PL4[12] / PL4[13])))
            End If 
          End If 
          BFREIGHTCOST = (EXTFREIGHT / (L3[4]+pl4[16]))
        End If 
      End If 
    End If 
    If P60$[49,49] = "F" Or P60$[49,49] = "B"
      If L2[1]
        If L1[5] = -1 Or L1[5] = -3
          CNVTA = L2[1]
          If L1[5] = -1 Let CNVTA = L2[1] * 100
          CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
          Gosub L_20000
          POCOST1 = POCOST1 + AMOUNT
        Else 
          POCOST1 = POCOST1 + L2[1]
        End If 
      End If 
      BPOCOST[1] = BPOCOST[1] + BFREIGHTCOST
    End If 
    If P60$[49,49] = "M" Or P60$[49,49] = "B"
      If PL4[8]
        If L1[5] = -1 Or L1[5] = -3
          CNVTA = PL4[8]
          If L1[5] = -1 Let CNVTA = PL4[8] * 100
          CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
          Gosub L_20000
          POCOST1 = POCOST1 + AMOUNT
        Else 
          POCOST1 = POCOST1 + PL4[8]
        End If 
      End If 
      If PL4[8] <> 0 And L3[4] <> 0 and pl4[16]<>0
        If L1[5] = -2
          BMISCCOST = PL4[8]
        Else 
          EXTMISC = (L3[4]+pl4[16]) * PL4[8]
          If L1[5] = -1 Or L1[5] = -3
            If PL4[13]
              EXTMISC = FNR((L3[4]+pl4[16]) * (PL4[8] * (PL4[12] / PL4[13])))
            End If 
          End If 
          BMISCCOST = (EXTMISC / (L3[4]+pl4[16]))
        End If 
        BPOCOST[1] = BPOCOST[1] + BMISCCOST
      End If 
    End If 
    If P60$[19,19] = "Y"
      If L2[1]
        If L1[5] = -1 Or L1[5] = -3
          CNVTA = L2[1]
          If L1[5] = -1 Let CNVTA = L2[1] * 100
          CNVTU[0] = L1[5];CNVTU[1] = 0;CNVTU[2] = 2
          Gosub L_20000
          POCOST = POCOST + AMOUNT
        Else 
          POCOST = POCOST + L2[1]
        End If 
      End If 
      BPOCOST[0] = BPOCOST[0] + BFREIGHTCOST
    End If 
    T9 = BASEPOCOST * (L3[4]+pl4[16])
    T9[1] = T9[1] + T9[0]
   
    Call Logic(1,2 ^ 0,L1[3],NONSTOCK)
    Call Logic(1,2 ^ 1,L1[3],SHORT)
    Call Logic(1,2 ^ 2,L1[3],ZLINE)
    If Not(ZLINE) Gosub L_5000
    NEWCOST = FNR((L3[4]) * PL4[0])  ! - pl4[16]
    If (L1[5] = -1 Or L1[5] = -3) And PL4[13] !  cwt
      CNVTA = PL4[0];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
      Gosub L_20000 \ DSP_PL4 = AMOUNT
      If L1[5] = -1 Let NEWCOST = FNR(DSP_PL4 * (PL4[12] * (L3[4]) / PL4[13]) / 100)  ! -pl4[16]
      If L1[5] = -3 Let NEWCOST = FNR(DSP_PL4 * (PL4[12] * (L3[4]) / PL4[13]))
    End If 
    If L1[5] = -2 Let NEWCOST = PL4[7]
    H8[3] = H8[3] + NEWCOST
    L3[3] = L3[3] + (L3[4]+pl4[16]) \ L3[4] = 0
    L1[0] = 14
    Gosub L_6100
    Goto L_2160
  End If 
  POH7[0] = POH7[0] + H8[2]
  POH7[1] = POH7[1] + TOTGLCOST
  NSTAT = 14
  Gosub L_2600
  H3[0] = DATE
  Mat Write #8,R1[8];H0
  Mat Write #8,R1[8],222;H3
  Mat Write #8,R1[8],250;H8
  Mat Write #8,R1[8],310;PH
  Mat Write #8,R1[8],528;POH7;
  Mat Write #5,H0[1],498;C2;
  Mat Write #5,H0[1],448;V4;
  Goto L_2020
End If 
Goto L_8000
L_2600: Rem ORDER CHANGE STATUS TO NSTAT
X2 = A1$[1,2]
If H0[0] <> X2
	eflg=eflg+1
	Message$=Message$+"Status Error on Debit Memo "+str$(h0[2])
	return
endif
A3$ = A1$
A3$[1,2] = NSTAT Using "##"
If H0[0] <> NSTAT
  R0 = R1[8] \ Search #8,4,1;A3$,R0,E \ If E Gosub ERR_SEARCH
  A3$[1,2] = H0[0] Using "##"
  Search #8,5,1;A3$,R0,E \ If E Gosub ERR_SEARCH
  If R0 <> R1[8] Gosub ERR_SEARCH
  H0[0] = NSTAT
  PH[4] = NSTAT
End If 
Return 
L_2800: Rem GET PRODUCT
If Not(NONSTOCK)
  Gosub L_6200
Else 
  Gosub L_6500
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  PL4[12] = NSD3[6];PL4[13] = NSD3[7];PL4[14] = NSD3[2];PL4[15] = NSD3[8]
  PFU1[8] = NSD1[5];PFU1[10] = NSD1[4];PFU1[11] = NSD1[3]
  A[5] = NSD3[7];A[6] = NSD3[6];B[23] = NSD3[2];A1[3] = NSD3[8]
  B[11] = NSD1[1]
End If 
Return 
L_3000: Rem UPDATE LOT FILE*
If Not(L3[4]+pl4[16]) Goto L_3185
If Not(QTY) Goto L_3185
If P9$[9,9] <> "N" ! TRANS HIST
	clear itr.
	itr.ProdCode$ = L1$[81,92] 
	itr.LotNum$ = S0$[13,24] !  LT$[13,24] = S0$[13,24]
	!LT$[25,27] = "DM#" \ LT$[29,34] = H0[2] Using "######"
	itr.SrcCode$[1,3] = "DM#"
	itr.SrcCode$[4,9] = H0[2] Using "######" 
	!LT$[37,40] = "VEN#" \ LT$[42,47] = H3[3] Using "######"
	itr.Comment$[1,4]="VEN#" 
	itr.COmment$[5,10] = H3[3] Using "######"
	! LT1$ = " ",LT1$
	! LT1[0] = 31 \ LT1[1] = L1[1] \ LT1[2] = Spc(6) \ LT1[3] = 0
	itr.TrnsType=31
	itr.Whse = L1[1]                                       
	itr.EntBy = urec ! Spc(6) !!!! mtg lt1[2]
	itr.Tiebrkr = 0 
	! LT2[0] = DATE \ LT2[2] = QTY
	! LT2[1] = INVBAL
	itr.TrnsDate  = Date       
	itr.RunInvt  =INVBAL                    
	itr.Qty   = l3[4]+pl4[16] !     POL1[3] 
	itr.CostAvg  = B[21]  ! LT2[4] = B[21]
	If P60$[43,43] = "Y" ! RTS UPDATE NET P/O - S3
		itr.CostLoad = BPOCOST[1]
	Else 
		itr.CostLoad = BPOCOST[0]
	End If 
	!If P60$[43,43] = "Y" ! RTS UPDATE NET P/O - S3
	!  LT2[3] = BPOCOST[1]
	! Else 
	!  LT2[3] = BPOCOST[0]
	!End If 
	!LT2[5] = 0;CH_INVTR = 15
	!LT1$[1,6] = OL2$[11,16]
	If P9$[32,32] = "Y" And W3[15]<>0
		Let itr.CostAvg = W3[15]
	endif
	itr.NetPrice =0                    
	itr.Loc$ = OL2$[11,16] ! POL1$[23,28]              
	!If P9$[32,32] = "Y" And W3[15] Let LT2[4] = W3[15]
	CH_INVTR=15 ! CHANNEL FOR INVTRANS FILE
	!Call "MAKETRANS",LT$,LT1[],LT2[],LT1$,CH_INVTR
	Call MakeTrans(e$,IntCo,CH_INVTR,status,itr.) !  as invtrans)
End If 
L_3185: Return 

L_3200: Rem SPRODLOT*
If Not(L3[4]+pl4[16]) Goto L_3490
If Not(QTY) Goto L_3490
J$ = " ",J$ \ J$[1,2] = L1[1] Using "##" \ J$[3,8] = OL2$[11,16]
J$[9,32] = S0$[1,24] \ J$[33,42] = OL2$[1,10]
Search #17,2,3;J$,R17,E \ If E > 1 Gosub ERR_SEARCH
If E If Not(QTY) Return 
If E Gosub ERR_SEARCH
If Not(E) Goto L_3360
Stop ! WOULD NOT GET THIS FAR? (NEXT IS L_3360:)
P0$ = " ",P0$;P0$[1,12] = L1$[81,92];P0$[13,24] = S0$[13,24]
P0$[25,28] = "PO#:" \ P0$[30,35] = H0[2] Using "######"
P0$[55,64] = OL2$[1,10]
P1$[1,6] = OL2$[11,16]
P1[0] = L1[1] \ P1[1] = 1 \ P2[0] = DATE \ P2[1] = 0 \ P2[2] = 0
For X1 = 0 To 4 \ P3[X1] = 0 \ Next X1
P4 = 0
E = 2 \ Search #17,1,0;J$,R17,E \ If E Gosub ERR_SEARCH
R0 = R17 \ Search #17,4,1;J$,R0,E \ If E Gosub ERR_SEARCH
J$[1,12] = L1$[81,92] \ J$[13,14] = L1[1] Using "##" \ J$[15,20] = OL2$[11,16] \ J$[21,42] = POL1$[1,22]
R0 = R17 \ Search #17,4,2;J$,R0,E \ If E Gosub ERR_SEARCH
J$[1,2] = L1[1] Using "##" \ J$[3,8] = OL2$[11,16] \ J$[9,20] = L1$[81,92] \ J$[21,42] = POL1$[1,22]
R0 = R17 \ Search #17,4,3;J$,R0,E \ If E Gosub ERR_SEARCH
J$[1,12] = L1$[81,92] \ J$[13,14] = L1[1] Using "##" \ J$[15,36] = POL1$[1,22]
J$[37,42] = OL2$[11,16]
R0 = R17 \ Search #17,4,4;J$,R0,E \ If E Gosub ERR_SEARCH
L_3360: Mat Read #17,R17;P0$
Mat Read #17,R17,66;P1
Mat Read #17,R17,70;P2
Mat Read #17,R17,82;P3
Mat Read #17,R17,112;P4
Mat Read #17,R17,114;P1$
P2[0] = DATE
P3[1] = P3[1] + QTY \ P3[3] = P3[3] - QTY
INVBAL = INVBAL - QTY
If Not(P3[2]) Let P3[2] = POCOST
Mat Write #17,R17;P0$
Mat Write #17,R17,66;P1
Mat Write #17,R17,70;P2
Mat Write #17,R17,82;P3
Mat Write #17,R17,112;P4
Mat Write #17,R17,114;P1$;
L_3490: Return 
L_3500: Rem UPDATE PRODWHSE*
J$ = " ",J$ \ J$ = L1$[81,92] \ J$[13] = L1[1] Using "##"
Search #10,2,1;J$,R10,E \ If E Gosub ERR_SEARCH
Mat Read #10,R10,32;W1
Mat Read #10,R10,38;W2
Mat Read #10,R10,78;W3
Mat Read #10,R10,404;W2$
Mat Read #10,R10,428;WH7
Mat Read #10,R10,696;W7
Mat Read #10,R10,780;WHLV
Mat Read #10,R10,980;WHLBS
INVBAL = W3[0]
If Not(L3[4]+pl4[16]) Goto L_3665
If Not(L1[5]) = -2 Goto L_3660
If Not(PH[1]) And H3[4] <> 0 ! debit memo created from purchase order
  CURVAL = W3[0] * W3[15] \ If CURVAL <= 0 Goto L_3660
  If (W3[0] - (L3[4]+pl4[16])) <= 0 Goto L_3660
  If P60$[48,48] <> "N"
    If (CURVAL - (L3[4] * BPOCOST[0])) <= 0 Goto L_3660
    W3[15] = (CURVAL - (L3[4] * BPOCOST[0])) / (W3[0] - (L3[4]+pl4[16]))
  Else 
    If (CURVAL - (L3[4] * BPOCOST[1])) <= 0 Goto L_3660
    W3[15] = (CURVAL - (L3[4] * BPOCOST[1])) / (W3[0] - (L3[4]+pl4[16]))
  End If 
End If 
L_3660: W3[0] = W3[0] - (L3[4]+pl4[16])
W3[2] = W3[2] - (L3[4]+pl4[16])
WHLV[0] = WHLV[0] - (L3[4]+pl4[16])
If A$[127,127] = "Y" Let WHLBS[0] = WHLBS[0] - LBRECV
L_3665: Mat Write #10,R10,32;W1
Mat Write #10,R10,38;W2
Mat Write #10,R10,78;W3
Mat Write #10,R10,404;W2$
Mat Write #10,R10,428;WH7
Mat Write #10,R10,696;W7
Mat Write #10,R10,780;WHLV;
Mat Write #10,R10,980;WHLBS;
Return 
L_3700: Rem VENDOR LINE*
C2[2] = C2[2] - T9
C2[3] = C2[3] - T9
V4[0] = V4[0] - (L3[4]+pl4[16])
V4[1] = V4[1] - (L3[4]+pl4[16])
Return 
L_3800: Rem ALTVEND*
Return 
L_4000: Rem UPDATE PRODUCT FILE*
If Not(L3[4]+pl4[16]) Goto L_4100
If L5[1] = -2 Goto L_4100
CURVAL = A[0] * B[21] \ If CURVAL <= 0 Goto L_4100
If (A[0] - (L3[4]+pl4[16])) <= 0 Goto L_4100
If Not(PH[1]) And H3[4] <> 0 ! created from a purchase order recalc
  If P60$[48,48] <> "N"
    If (CURVAL - (L3[4] * BPOCOST[0])) <= 0 Goto L_4100
    B[21] = (CURVAL - (L3[4] * BPOCOST[0])) / (A[0] - (L3[4]+pl4[16]))
  Else 
    If (CURVAL - (L3[4] * BPOCOST[1])) <= 0 Goto L_4100
    B[21] = (CURVAL - (L3[4] * BPOCOST[1])) / (A[0] - (L3[4]+pl4[16]))
  End If 
End If 
If P9$[11,11] = "Y" And L1[5] <> -2 Let B[8] = B[21]
L_4100: A[0] = A[0] - (L3[4]+pl4[16])
A[17] = A[17] - (L3[4]+pl4[16])
A[3] = A[3] - (L3[4]+pl4[16]) \ If A[3] < 0 Let A[3] = 0
PLV[0] = PLV[0] - (L3[4]+pl4[16])
If A$[127,127] = "Y" Let PRPARC[3] = PRPARC[3] - LBRECV
Gosub L_6300
Return 
L_4400: Rem "=================================== vend/prod history *
If Not(L3[4]+pl4[16]) Goto L_4695
TYPE = H4[0]
J$[1,6] = H3[3] Using "######"
If NONSTOCK
  J$[7,18] = "000000000000"
Else 
  J$[7,18] = L1$[81,92]
End If 
J$[19,20] = TYPE Using "# "
Search #16,2,1;J$,R16,E \ If E > 1 Gosub ERR_SEARCH
If E ! NEW RECORD
  E = 2 \ Search #16,1,0;J$,R16,E \ If E Gosub ERR_SEARCH
  For X1 = 0 To 12 \ For X1[1] = 0 To 3
      VP1[X1,X1[1]] = 0;VP2[X1,X1[1]] = 0
    Next X1[1] \ Next X1
  Write #16,R16,0;J$[7,18]
  Write #16,R16,12;H3[3]
  Mat Write #16,R16,16;VP1
  Mat Write #16,R16,328;VP2
  Mat Write #16,R16,640;TYPE
  Search #16,4,1;J$,R16,E \ If E Gosub ERR_SEARCH
  J1$ = J$[7,18],J$[1,6]
  J1$[19,20] = TYPE Using "# "
  Search #16,4,2;J1$,R16,E \ If E Gosub ERR_SEARCH
Else 
  Mat Read #16,R16,16;VP1
End If 
Read #1,0,120;M0; \ X1 = M0
VP1[0,0] = VP1[0,0] - (L3[4]+pl4[16]);VP1[X1,0] = VP1[X1,0] - (L3[4]+pl4[16])
VP1[0,1] = VP1[0,1] - (BASEPOCOST * L3[4]);VP1[X1,1] = VP1[X1,1] - (BASEPOCOST * L3[4])
If A[5] Let VP1[0,2] = VP1[0,2] - (L3[4] * A[6] / A[5]);VP1[X1,2] = VP1[X1,2] - (L3[4] * A[6] / A[5])
If A1[3] Let VP1[0,3] = VP1[0,3] - (L3[4] * B[23] / A1[3]);VP1[X1,3] = VP1[X1,3] - (L3[4] * B[23] / A1[3])
Mat Write #16,R16,16;VP1;
L_4695: Return 
L_4700: Rem "=================================== serial numbers*
SNKE1$ = " ",SNKE1$;SNKE1$[1,6] = H0[2] Using "######";SNKE1$[7,9] = L1[2] Using "###"
L_4710: Search #6,3,1;SNKE1$,R6,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_4990
PO = SNKE1$[1,6] \ LN = SNKE1$[7,9]
If PO <> H0[2] Or LN <> L1[2] Goto L_4990
Mat Read #6,R6,0;SN1$;
Mat Read #6,R6,54;SN0;
Mat Read #6,R6,62;SN9;
If NONSTOCK Goto L_4955
If A$[8,8] <> "Y" Goto L_4955
If (L3[4]+pl4[16]) = 0 Goto L_4955
If Not(LOTCNT) Let SN1$[13,24] = "STOCK        "
If SN1$[13,17] = "STOCK" Let SN1$[13,24] = L1[1] Using "STOCK&&      "
If SN9 = 1 Goto L_4900
L_4775: SN$ = " ",SN$;SN$[1,24] = SN1$[1,24];SN$[35,64] = SN1$[25,54]
L_4780: SN$[85,144] = L1$[1,60]
Read #5,H0[1],0;SN$[175,204];
SN1[0] = L1[1];SN1[1] = PFU1[0];SN1[2] = 1
SN2[0] = H0[2];SN2[1] = DATE;SN2[2] = H3[3];SN3[0] = POCOST
INVNO = 0
Read #3,L3[1],632;SN$[65,84];
Read #3,L3[1],652;SN2[9];
If SN9 = 1 Goto L_4850
SNK$ = " ",SNK$;SNK$[1,30] = SN$[35,64]
SNK1$ = " ",SNK1$;SNK1$[1,24] = SN$[1,24]
E = 2;R7 = 0 \ Search #7,1,0;SNK$,R7,E \ If E Gosub ERR_SEARCH
SNK$[31] = R7 Using "##########";SNK1$[25] = SNK$[31];SN$[25,34] = SNK$[31,40]
Search #7,4,1;SNK$,R7,E \ If E Gosub ERR_SEARCH
Search #7,4,2;SNK1$,R7,E \ If E Gosub ERR_SEARCH
L_4850: Mat Write #7,R7,0;SN$;
Write #7,R7,284;INVNO;
Mat Write #7,R7,290;SN1;
Mat Write #7,R7,298;SN2;
Mat Write #7,R7,342;SN3;
Goto L_4955
L_4900: Rem FLAG SAYS EXISTING (USE SNO[1])
R7 = SN0[1] \ If R7 < 0 Let SN1 = 0 \ Goto L_4775
Mat Read #7,R7,0;SN$
If SN$[1,12] <> SN1$[1,12] Let SN9 = 0 \ Goto L_4775
Read #7,R7,284;INVNO
Mat Read #7,R7,290;SN1;
Mat Read #7,R7,298;SN2
Mat Read #7,R7,342;SN3;
If SN$[13,24] = SN1$[13,24] Goto L_4780
K7$ = " ",K7$;K7$[1,24] = SN$[1,24];K7$[25,34] = R7 Using "##########"
Search #7,5,2;K7$,R7,E \ If E Gosub ERR_SEARCH
K7$[13,24] = SN1$[13,24]
Search #7,4,2;K7$,R7,E \ If E Gosub ERR_SEARCH
Goto L_4780
L_4955: Rem DEL
SNKE$ = " ",SNKE$;SNKE$[1,30] = SN1$[25,54];SNKE$[31] = L3[1] Using "######"
Search #6,5,1;SNKE1$,R6,E \ If E Gosub ERR_SEARCH
Search #6,5,2;SNKE$,R6,E \ If E Gosub ERR_SEARCH
E = 3 \ Search #6,1,0;SNKE$,R6,E \ If E Gosub ERR_SEARCH
Goto L_4710
L_4990: Return 
L_5000: Rem U/D FILES
Gosub L_2800
Gosub L_4400
If POMISC[0]
  If Not(NONSTOCK)
    Gosub L_4000
    Gosub L_3500
    Gosub L_5300
    Gosub L_5500
    Gosub L_3800
  End If 
End If 
Gosub L_3700
Gosub L_4700
Gosub L_7700
PL[5] = PL[5] + GLCOST
TOTGLCOST = TOTGLCOST + GLCOST
If SPO Gosub UPPOCTFLE
Return 
L_5200: Rem "============================= check lot control*
LOTCNT = 0
If P9$[1,1] = "Y" Let LOTCNT = 1 \ Return 
If P9$[1,1] = "B" And A$[113,113] = "Y" Let LOTCNT = 1 \ Return 
POL1$[1,7] = L1[1] Using "STOCK&&"
Return 
L_5300: Rem UPDATE LOT FILES WITH SORDLOT*
Gosub L_5200
K18$ = " ",K18$ \ K18$[1,6] = H0[2] Using "######" \ K18$[7,9] = L1[2] Using "###"
K18$[10,11] = L1[1] Using "##"
L_5315: Search #18,3,3;K18$,R18,E \ If E = 2 Goto L_5490
If E Gosub ERR_SEARCH
PO = K18$[1,6] \ LN = K18$[7,9] \ WH = K18$[10,11]
If PO <> H0[2] Or LN <> L1[2] Or WH <> L1[1] Goto L_5490
If K18$[40,40] <> "4" Goto L_5315
Mat Read #18,R18,36;S1;
If S1[1] <> 4 Goto L_5315
Mat Read #18,R18,0;S0$;
Mat Read #18,R18,44;S2;
Mat Read #18,R18,60;S3;
Mat Read #18,R18,96;OL2$;
Rem IF P9$[1,1]="N" LET S3[1]=L3[4] \ LET S3[0]=L3[4]
QTY = S3[1]
POL1$[1,12] = S0$[13,24] \ POL1$[13,22] = OL2$[1,10]
Gosub L_3200
Gosub L_3000
Z1$ = K18$
K18$ = " ",K18$
K18$[1,22] = Z1$[18,39];K18$[23,39] = Z1$[1,17];K18$[40,51] = S0$[1,12]
K18$[52,52] = "4"
Search #18,5,2;K18$,R8,E \ If E Gosub ERR_SEARCH
K18$ = " ",K18$
K18$[1,12] = S0$[1,12];K18$[13,29] = Z1$[1,17];K18$[30,51] = Z1$[18,39]
K18$[52,52] = "4"
Search #18,5,1;K18$,R8,E \ If E Gosub ERR_SEARCH
K18$ = Z1$
Search #18,5,3;K18$,R8,E \ If E Gosub ERR_SEARCH
E = 3 \ Search #18,1,0;K18$,R8,E \ If E Gosub ERR_SEARCH
Goto L_5315
L_5490: Return 
L_5500: Rem UPDATE FIFOLOT & FIFOTRANS*
FCOST = 0;SPCOST = 0
If P60$[9,9] <> "F" And P60$[9,9] <> "L" Return 
If A$[127,127] = "Y" And P61$[73,73] = "Y"
  If Not(L3[5]) Return 
Else 
  If Not(L3[4]+pl4[16]) Return 
End If 
For CTR = 0 To 16
  If CTR < 11 Let FIFOSPECCH[CTR] = 0;FIFOSPEC1[CTR] = 0;FIFOSPEC2[CTR] = 0
  FIFOSPEC3[CTR] = 0
Next CTR
FIFOSPEC$ = " ",FIFOSPEC$
Rem set fifo spec variable for channel #
FIFOSPECCH[0] = 19
FIFOSPECCH[1] = 20
FIFOSPECCH[2] = 29
FIFOSPECCH[3] = 28
FIFOSPECCH[4] = 3
FIFOSPECCH[5] = 10
FIFOSPECCH[6] = 0
Rem set fifospec 1 variables
FIFOSPEC1[0] = 385
FIFOSPEC1[1] = L1[1]
FIFOSPEC1[2] = L1[1]
FIFOSPEC1[3] = L1[1]
FIFOSPEC1[4] = 0
Rem set fifospec 2 variables
FIFOSPEC2[0] = CURJDATE
FIFOSPEC2[1] = POSTPER
FIFOSPEC2[2] = POCNTRL
Rem set fifospec 3 variables
FIFOSPEC3[0] = - (L3[4]+pl4[16])
FIFOSPEC3[1] = H0[2]
FIFOSPEC3[2] = H3[3]
FIFOSPEC3[3] = BPOCOST[1]
FIFOSPEC3[4] = PL4[12]
FIFOSPEC3[5] = PL4[13]
FIFOSPEC3[6] = - (L3[4]+pl4[16])
FIFOSPEC3[7] = L3[5]
FIFOSPEC3[8] = 0
FIFOSPEC3[9] = 0
Rem set fifospec$ variable
FIFOSPEC$ = " ",FIFOSPEC$
FIFOSPEC$[1,12] = A$[140,151]
FIFOSPEC$[13,24] = S0$[13,24]
FIFOSPEC$[25,34] = OL2$[1,10]
FIFOSPEC$[35,40] = OL2$[11,16]
If A$[127,127] = "Y" And P61$[73,73] = "Y" ! catch weight item store fifo in lbs
  If Not(L3[5]) Return 
  FIFOSPEC3[0] = - L3[5]
  If L1[5] <> -3 ! costing um is not in lbs
    DISP_EXT = L3[4] * BPOCOST[1]
    FIFOSPEC3[3] = DISP_EXT / L3[5]
  Else 
    CNVTA = PL4[0]
    CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
    Gosub L_20000
    If L2[1] ! check to add in freight charges
      If P60$[49,49] = "F" Or P60$[49,49] = "B"
        AMOUNT = AMOUNT + L2[1]
      End If 
    End If 
    If PL4[8] ! check to add in misc charges
      If P60$[49,49] = "M" Or P60$[49,49] = "B"
        AMOUNT = AMOUNT + PL4[8]
      End If 
    End If 
    FIFOSPEC3[3] = AMOUNT
  End If 
End If 
Call "MXFIFO.DL4",FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$,e$,IntCo,rstr$ 
FCOST = FIFOSPEC3[8]
If P61$[60,60] = "Y" Let SPCOST = FIFOSPEC3[9]
Return 


L_6000: Rem READ LINE ITEM
Mat Read #9,R9;L1
Mat Read #9,R9,12;L2
Mat Read #9,R9,24;L3
Mat Read #9,R9,66;L1$
Mat Read #9,R9,186;PL
Mat Read #9,R9,232;PL4
Mat Read #9,R9,376;POMISC
Mat Read #9,R9,508;POCNTRL
mat read #9,r9,548;plcurrid;
mat read #9,r9,550;plcurrfact;
LBRECV = L3[5]
Gosub L_8400
Return 
L_6100: Rem WRITE LINE REC
Mat Write #9,R9;L1
Mat Write #9,R9,12;L2
Mat Write #9,R9,24;L3
Mat Write #9,R9,66;L1$
Mat Write #9,R9,186;PL
Mat Write #9,R9,232;PL4
Mat Write #9,R9,376;POMISC;
mat write #9,r9,548;plcurrid;
mat write #9,r9,550;plcurrfact;
Return 
L_6200: Rem READ PRODUCT FILE
Mat Read #3,L3[1],0;A$
Mat Read #3,L3[1],156;B
Mat Read #3,L3[1],256;A
Mat Read #3,L3[1],460;A1
Mat Read #3,L3[1],512;PFU1
Mat Read #3,L3[1],554;PFU2
Mat Read #3,L3[1],596;PRPARC
Mat Read #3,L3[1],670;U4
Mat Read #3,L3[1],894;C4
Mat Read #3,L3[1],990;PLV
Return 
L_6300: Rem WRITE PRODUCT FILE
Mat Write #3,L3[1],156;B
Mat Write #3,L3[1],256;A
Mat Write #3,L3[1],596;PRPARC
Mat Write #3,L3[1],894;C4
Mat Write #3,L3[1],990;PLV;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, a$[140,151], sqlChan, 3)
	if e <> 1 ! returns the number of records add/updated/deleted
		gosub ERR_SEARCH
	end if
end if
Return 
L_6500: Rem READ NSTKDESC
Mat Read #14,L3[1],96;NSD1
Mat Read #14,L3[1],112;NSD2
Mat Read #14,L3[1],132;NSD3
Return 
Mat Write #14,L3[1],96;NSD1
Mat Write #14,L3[1],112;NSD2
Mat Write #14,L3[1],132;NSD3;
Return 

L_7600: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
DATE = X$
Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
X2 = X$[1,5]
CURJDATE = X2
Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
D3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",D3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
D3[0] = X2;D3[1] = X2;FLAG = 0
Call "JULIANUTIL",D3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
D3[0] = X$[1,2];D3[1] = X$[3,4]
If D3[0] > 67 Let D3[0] = 1900 + D3[0]
If D3[0] < 68 Let D3[0] = 2000 + D3[0]
X$[1,4] = D3[0] Using "&&&&";X$[5,6] = D3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_7700: Rem
GLCOST = 0
If Not(POMISC[0])
  GLCOST = FNR(L3[4] * POCOST1)
  If L1[5] = -2 Let GLCOST = POCOST1
  If L1[5] = -1
    CNVTA = POCOST1;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
    Gosub L_20000
    If PL4[13]
      GLCOST = FNR(AMOUNT * (PL4[12] * (L3[4]) / PL4[13]) / 100)
    Else 
      GLCOST = FNR(AMOUNT * (L3[5] * (L3[4]) / L3[2]) / 100)
    End If 
  End If 
  Return 
End If 
If P8$[5,5] = "F" Or P8$[5,5] = "I"
  GLCOST = FCOST
  If P61$[60,60] = "Y" Let GLCOST = SPCOST
  Return 
End If 
If P9$[32,32] = "Y"
  If P8$[5,5] = "R" Let GLCOST = FNR(L3[4] * W3[16]) \ Goto L_7760
  If P8$[5,5] = "W" Let GLCOST = FNR(L3[4] * W3[17]) \ Goto L_7760
  If P8$[5,5] = "B" Let GLCOST = FNR(L3[4] * W3[18]) \ Goto L_7760
  GLCOST = FNR(L3[4] * W3[15])
L_7760: If GLCOST Return 
End If 
If P8$[5,5] = "R" Let GLCOST = FNR(L3[4] * B[10]) \ Goto L_7795
If P8$[5,5] = "W" Let GLCOST = FNR(L3[4] * B[8]) \ Goto L_7795
If P8$[5,5] = "B" Let GLCOST = FNR(L3[4] * C4[4]) \ Goto L_7795
GLCOST = FNR(L3[4] * B[21])
L_7795: Return 
UPPOCTFLE: Rem APPO CONTROL INTERFACE
If Not(SPO) Return 
If Not(L3[4]+pl4[16]) Return 
PCT0 = 0
For X = 0 To 11 \ PCT5[X] = 0 \ Next X
For X = 0 To 12
  If X < 6 Let PCT1[X] = 0;PCT2[X] = 0
  If X < 3 Let PCT3[X] = 0;PCT7[X] = 0;PCT0[X] = 0
  If X < 2 Let PCT4[X] = 0;PCT6[X] = 0
  If X < 5 Let PCT9[X] = 0
  PCT8[X] = 0
Next X
PCT$ = " ",PCT$
PCT1[0] = H0[2];PCT1[1] = L1[2];PCT1[2] = H3[3];PCT1[3] = POCNTRL
PCT1[4] = DATE;PCT1[5] = 0
PCT2[0] = L3[4]! - PL4[16];
PCT2[1] = PL4[0];PCT2[2] = GLCOST
If POMISC[0]
  If P60$[9,9] = "Y" Or P60$[9,9] = "L"
    If P61$[60,60] = "Y"
      If SPCOST <> FCOST
        If (L3[4]) > 0
          PCT2[1] = (GLCOST / (L3[4]))
        End If 
        If L5[1] = -2 Let PCT2[1] = GLCOST
        PCT7[0] = 99
      End If 
    End If 
  End If 
End If 
PCT3[1] = L1[1]
PCT$[1,12] = L1$[81,92]
If P60$[19,19] = "Y" Or P60$[49,49] = "B" Or P60$[49,49] = "F"
  PCT5[0] = L2[1]
End If 
If P60$[49,49] = "B" Or P60$[49,49] = "M"
  PCT5[1] = PL4[8]
End If 
PCT5[2] = L2[0] - PL4[0]
PCT5[3] = PL4[16]
PCT5[8] = BPOCOST[0]
PCT5[9] = BPOCOST[1]
PCT3[2] = 1
PCT6[0] = PL4[12]
PCT6[1] = PL4[13]
PCT7[1] = POMISC[0]
PCT7[2] = B[11]
PCT9[1] = L3[5]
If POMISC[0] And A$[127,127] = "Y" And P61$[73,73] = "Y" And L1[5] = -3
  PCT0 = 99
  PCT9[1] = PCT2[0]
  PCT2[0] = L3[5]
End If 
PCT9[3] = PL4[7]
POCFRGT = 0;POCMISC = 0
POCFRGT = ((L3[4]+pl4[16]) * PCT5[0])
POCMISC = ((L3[4]+pl4[16]) * PCT5[1])
If L1[5] = -1 Or L1[5] = -3 ! weighted cost items
  If PL4[13]
    POCFRGT = ((L3[4]+pl4[16]) * (PCT5[0] * (PL4[12] / PL4[13])))
    POCMISC = ((L3[4]+pl4[16]) * (PCT5[1] * (PL4[12] / PL4[13])))
  End If 
End If 
If L1[5] = -2
  POCFRGT = (L2[1])
  POCMISC = (PL4[8])
End If 
PCT9[4] = FNR(PL4[7] + POCFRGT + POCMISC)
If PCT7[0] ! special cost flag
  PCT9[3] = GLCOST
  PCT9[4] = FNR(GLCOST + POCFRGT + POCMISC)
End If 
PCT8[3] = POSTPER
PCT8[4] = JRNL
PCT8[5] = POCFRGT
PCT8[6] = POCMISC
if p61$[136,136]="Y" 
	PCT8[12]= plcurrfact! CURRENCY FACTOR
	pct0[2]=plcurrid ! currency id
else
	let pct8[12]=0
	let pct0[2]=0
endif
K30$ = " ",K30$;K30$[1,6] = PCT1[0] Using "######";K30$[7,12] = PCT1[3] Using "######"
K30$[13,16] = PCT1[1] Using "####";K30$[17,18] = PCT3[1] Using "##"
E = 2 \ Search #30,1,0;K30$,R[30],E \ If E Gosub ERR_SEARCH
Mat Write #30,R[30],0;PCT1
Mat Write #30,R[30],24;PCT2
Mat Write #30,R[30],60;PCT3
Mat Write #30,R[30],66;PCT$
Mat Write #30,R[30],78;PCT4
Mat Write #30,R[30],90;PCT5
Mat Write #30,R[30],162;PCT6
Mat Write #30,R[30],174;PCT7
Mat Write #30,R[30],180;PCT9
Mat Write #30,R[30],210;PCT8
Mat Write #30,R[30],288;PCT0;
Search #30,4,1;K30$,R[30],E \ If E Gosub ERR_SEARCH
K30$ = " ",K30$;K30$[1,6] = PCT1[3] Using "######";K30$[7,8] = PCT3[1] Using "##"
K30$[9,14] = PCT1[0] Using "######";K30$[15,18] = PCT1[1] Using "####"
Search #30,4,2;K30$,R[30],E \ If E Gosub ERR_SEARCH
GLCOST = - (PCT9[4])
Gosub UPDATEGL
Return 
L_8000: Rem ALL DONE
! Print @0,23;"COMPLETE!  ";Z9;"DEBIT MEMO(S) ACCEPTED  ";'CL';
Rem take tmp file and postit
If P9$[17,17] = "Y" And POGLFLAG <> 0 And SPO <> 0
	For X = 2 To 99 
		Try  Close #X Else Rem
	Next X
	Call DXGet("u_group",groupid$)
	Call "po385c.dl4",WAREHOUSE,SOURCE,e$,IntCo,rstr$,message$,eflg,groupid$
	!Print "Posting General Ledger";
	!Chain "po385c"
Else 
  !Input Len 1;"PRESS <CR> TO EXIT "U5$
End If 
Goto OUTEND
L_8200: Rem CHECK/SET WHSE PROC FLAGS
!If Err 0 Rem
Try Close #90 Else Rem 
! If Err 0 Gosub ERR_TRAP
Read #1,88,2768;X$[1,16]; \ Open #90,X$
! Print @0,23;'CL';"CHECKING WHSE FLAGS, PLEASE WAIT"; \ Signal 3,0
If WHSE Let WHREC = WHSE - 1 Else Let WHREC = 99
L_8225: Mat Read #90,WHREC,900;WPF;
!Call "getuidrec",UIDREC[1]
UIDRec[1] = GetUIDRec(e$,IntCo,Userid$)
If WPF[385] and WHREC <> 99
	E=3  ! CHECK with time check
	TMP$=" "
	call "proglock.dl4","385-"+(whse using "&&"),e,TMP$  !! no special flag for delete
	if e  !! found entry
		Let UIDREC = WPF[385] \ Goto L_8280
	else
		e=whse  ! pass in warehouse selected
		call "flagreset","385.DL4",e
	endif
endif
Mat Read #90,WHREC,900;WPF;
If WPF[384] <> 0 Let UIDREC = WPF[384] \ Goto L_8280
If WPF[385] <> 0 Let UIDREC = WPF[385] \ Goto L_8281
WPF[385] = UIDREC[1]
If WHSE If WHREC = 99 Let WPF[385] = 0 - WHSE
Mat Write #90,WHREC,900;WPF;
If WHSE If WHREC <> 99 Let WHREC = 99 \ Goto L_8225
If WHSE If WHREC = 99 Goto L_8277
For WHREC = 0 To 98
  Mat Read #90,WHREC,900;WPF;
  If WPF[384] <> 0 Let UIDREC = WPF[384] \ Goto L_8280
  If WPF[385] <> 0 Let UIDREC = WPF[385] \ Goto L_8281
L_8275: Next WHREC
L_8277: Try Close #90 Else Rem
Return 
L_8281: Rem aip  IF WPF[CPRT]=385
USR$ = " ",USR$
If UIDREC > 0
	!Call "getuidinfo",UIDREC,USR$
	 USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
endif
eflg=eflg+1
message$=message$+"Accept In Process By User "+rtrim$(usr$[21])
message$=message$+" - Please Try Again In 5 Minutes. "

!Call "getuidinfo",UIDREC,USR$
!Print @0,23;'RB CL';"ACCEPT IN PROCESS USER ";USR$[21];
!Print " -- PLEASE TRY LATER."; \ Signal 3,30
Goto L_9010
L_8280: Rem jip
USR$ = " ",USR$
!If UIDREC > 0 Call "getuidinfo",UIDREC,USR$
If UIDREC > 0
	!Call "getuidinfo",UIDREC,USR$
	 USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
endif
eflg=eflg+1
message$=message$+"Journal In Process By User "+rtrim$(usr$[21])
message$=message$+" - Please Try Later. "

!Print @0,23;'RB CL';"JOURNAL IN PROCESS USER ";USR$[21];
! Print " -- PLEASE TRY LATER."; \ Signal 3,30
Goto L_9010

L_8300: Rem CHECK WAREHOUSE
!Print @0,21;"Enter warehouse to use (1-";
!Print Using "##";D9[5];")   <CR>:  for all  E:  exit ";'CE';
!Input Len 16386;""X$ \ Call String(1,X$) \ If X$ = "E" Goto L_9010
!WHSE = X$
!If (Not(WHSE) And X$ <> "") Or WHSE < 0 Or WHSE > D9[5] Print 'RB'; \ Goto L_8310
L_8390: Return 

L_8400: Rem UNPACK L1[3] TO FLAGS[x]
NONSTOCK = 0
Call Logic(1,2 ^ 0,L1[3],NONSTOCK)
X2 = L1[3] \ For K = 0 To 11
  FLAGS[K] = Sgn(Fra(X2 / 2)) \ X2 = Int(X2 / 2)
Next K \ Return 
X2 = 0 \ For K = 0 To 11
  If FLAGS[K] Let X2 = X2 + 2 ^ K
Next K \ L1[3] = X2 \ Return 
WPFRESET: Rem reset wpf flags
!If Err 0 Rem
Try Close #90 Else Rem 
! If Err 0 Gosub ERR_ESCAPE
Read #1,88,2768;X$[1,16]; \ Open #90,X$
If WHSE Let WHREC = WHSE - 1 Else Let WHREC = 99
WP8225: Mat Read #90,WHREC,900;WPF;
WPF[385] = 0
If WHSE If WHREC = 99 Let WPF[385] = 0
Mat Write #90,WHREC,900;WPF;
If WHSE If WHREC <> 99 Let WHREC = 99 \ Goto WP8225
If WHSE If WHREC = 99 Goto WP8277
WP8277: Rem finito
Close #90
Return 
Rem! gl section !!!!
UPDATEGL: Rem update g/l section here
If P9$[17,17] <> "Y" Return 
If Not(POGLFLAG) Return 
If SPO = 0 Return
If P8$[7,7] = "W"
  WH = L1[1] - 1 \ If WH < 0 Let wh=h4[1]-1
  if wh<0 let wh=0 ! WHSE = 0
  Mat Read #28,WH,844;CLIENT;
  If Not(CLIENT) Let CLIENT = S0[0]
Else 
  CLIENT = S0[0]
End If 
PRODCAT = B[11]
Gosub GETGLCNTRL
Rem update gl inventory account +
If H4[0] = 0 Or H4[0] = 4 ! warehouse order types
  If Not(NONSTOCK)
    If POMISC[0] ! update stock yes
      GLACCT = GLC1[0]
    Else 
      GLACCT = GLC1[4]
    End If 
  Else ! nonstock items
    If P8$[4,4] = "Y"
      GLACCT = GLC1[6]
    Else 
      GLACCT = GLC1[8]
    End If 
  End If 
End If 
If H4[0] = 1 Or H4[0] = 5 ! direct order types
  If Not(NONSTOCK)
    GLACCT = GLC1[0]
  Else 
    GLACCT = GLC1[6]
  End If 
End If 
If H4[0] = 2 Or H4[0] = 6
  If Not(NONSTOCK) ! stock item
    If POMISC[0] ! update stock yes
      GLACCT = GLC1[0]
    Else 
      If P60$[22,22] = "N" ! indirect do not update stock
        GLACCT = GLC1[0]
      Else 
        GLACCT = GLC1[4]
      End If 
    End If 
  Else ! nonstock item
    If P8$[4,4] = "Y" ! nonstock update inventory is set ot "Y"
      GLACCT = GLC1[6]
    Else 
      GLACCT = GLC1[8]
    End If 
  End If 
End If 
GLAMT = GLCOST
Gosub UPGLTEMP
Rem update gl purchase account -
If Not(NONSTOCK)
  GLACCT = GLC1[1]
Else 
  GLACCT = GLC1[7]
End If 
GLAMT = - GLCOST
Gosub UPGLTEMP
Return 
GETGLCNTRL: Rem from glpocntrl
POTYPE = H4[0] \ If H4[0] < 3 Let POTYPE = H4[0] + 1
If P8$[3,3] <> "Y" Let PRODCAT = 0
If P8$[2,2] = "Y" !ORDER TYPE
  GLCKEY$ = " ",GLCKEY$ \ GLCKEY$[1,2] = L1[1] Using "##"
  GLCKEY$[5,6] = POTYPE Using "##"
  If PRODCAT Let GLCKEY$[7,8] = PRODCAT Using "##"
  Search #CH_GLC,2,1;GLCKEY$,REC_GLC,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E) Goto FNDGLCNTRL
  If PRODCAT ! find without cat
    GLCKEY$[7,8] = "  "
    Search #CH_GLC,2,1;GLCKEY$,REC_GLC,E \ If E > 1 Gosub ERR_SEARCH
    If Not(E) Goto FNDGLCNTRL
  End If 
End If 
GLCKEY$ = " ",GLCKEY$ \ GLCKEY$[1,2] = L1[1] Using "##"
If PRODCAT Let GLCKEY$[7,8] = PRODCAT Using "##"
Search #CH_GLC,2,1;GLCKEY$,REC_GLC,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto FNDGLCNTRL
If PRODCAT
  GLCKEY$[7,8] = "  "
  Search #CH_GLC,2,1;GLCKEY$,REC_GLC,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E) Goto FNDGLCNTRL
End If 
GLCKEY$ = "DFAULT"
If PRODCAT Let GLCKEY$[7,8] = PRODCAT Using "##"
Search #CH_GLC,2,1;GLCKEY$,REC_GLC,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto FNDGLCNTRL
GLCKEY$[7,8] = "  "
Search #CH_GLC,2,1;GLCKEY$,REC_GLC,E \ If E Gosub ERR_SEARCH
FNDGLCNTRL: Rem g/l control record found
Mat Read #CH_GLC,REC_GLC,0;GLC0;
Mat Read #CH_GLC,REC_GLC,32;GLC1;
Return 
UPGLTEMP: Rem update gl temp file
If POGLFLAG = 0 Return
If P9$[17,17] <> "Y" Return
if SPO<>0 return ! no gl update
GLTKEY$ = " ",GLTKEY$ \ GLTKEY$[1,4] = CLIENT Using "####"
GLTKEY$[5,12] = GLACCT Using "########" \ GLTKEY$[13,18] = JRNL Using "######"
Search #CH_GLT,2,1;GLTKEY$,REC_GLT,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  GLT0 = GLACCT \ GLT0[1] = 0 \ GLT1[0] = JRNL \ GLT1[1] = CLIENT
  E = 2 \ Search #CH_GLT,1,0;GLTKEY$,REC_GLT,E \ If E Gosub ERR_SEARCH
  Mat Write #CH_GLT,REC_GLT,0;GLT0
  Mat Write #CH_GLT,REC_GLT,12;GLT1;
  Search #CH_GLT,4,1;GLTKEY$,REC_GLT,E \ If E Gosub ERR_SEARCH
End If 
Mat Read #CH_GLT,REC_GLT,0;GLT0; \ Mat Read #CH_GLT,REC_GLT,12;GLT1
GLT0[1] = GLT0[1] + GLAMT
Mat Write #CH_GLT,REC_GLT,0;GLT0 \ Mat Write #CH_GLT,REC_GLT,12;GLT1;
Gosub UPGLDET
GLAMT = 0
Return 
UPGLDET: Rem up gl detail file
For X9 = 0 To 6 \ GLD[X9] = 0 \ Next X9
GLD$ = " ",GLD$;GLD1$ = " ",GLD1$;GLD2$ = " ",GLD2$
GLD1 = 0;GLD2[0] = 0;GLD2[1] = 0
GLD[0] = CLIENT
GLD[1] = POSTPER
GLD[2] = H3[3]
If POHR Let GLD[3] = 99 Else Let GLD[3] = 0
GLD[4] = DATE
GLD[5] = ARDATE
GLD[6] = JRNL
GLD$[1,9] = GLACCT Using "#########"
GLD1$[1,30] = VENDNAME$[1,30]
GLD2$ = " Q"
GLD2[0] = 385
GLD2[1] = 14
GLDTRN = H0[2]
GLDKEY1$ = " ",GLDKEY1$
GLDKEY1$[1,4] = GLD[1] Using "&&&&"
GLDKEY1$[5,16] = GLD$[1,12]
GLDKEY1$[17,22] = GLD[6] Using "######"
GLDKEY1$[23,30] = GLDTRN Using "########"
GLDKEY1$[31,36] = GLD[2] Using "######"
GLDKEY1$[37,38] = GLD2[1] Using "##"
Search #CH_GLD,2,1;GLDKEY1$,REC_GLD,E \ If E > 1 Gosub ERR_SEARCH
If E = 1
  E = 2 \ Search #CH_GLD,1,0;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  Mat Write #CH_GLD,REC_GLD,0;GLD;
  Mat Write #CH_GLD,REC_GLD,40;GLD$;
  Mat Write #CH_GLD,REC_GLD,52;GLD1$;
  Mat Write #CH_GLD,REC_GLD,82;GLD2$;
  Mat Write #CH_GLD,REC_GLD,84;GLD1;
  Mat Write #CH_GLD,REC_GLD,92;GLD2;
  Write #CH_GLD,REC_GLD,96;GLDTRN;
  Search #CH_GLD,4,1;GLDKEY1$,REC_GLD,E \ If E Gosub ERR_SEARCH
  GLDKEY2$ = " ",GLDKEY2$
  GLDKEY2$[1,6] = GLD[2] Using "######"
  GLDKEY2$[7,14] = GLDTRN Using "########"
  GLDKEY2$[15,16] = GLD2[1] Using "##"
  GLDKEY2$[17,28] = GLD$[1,12]
  GLDKEY2$[29,32] = GLD[1] Using "&&&&"
  GLDKEY2$[33,38] = GLD[6] Using "######"
  Search #CH_GLD,4,2;GLDKEY2$,REC_GLD,E \ If E Gosub ERR_SEARCH
End If 
Mat Read #CH_GLD,REC_GLD,84;GLD1
GLD1 = GLD1 + GLAMT
Mat Write #CH_GLD,REC_GLD,84;GLD1;
Return 

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120: ! If Spc(4) > 1280 Goto L_20120
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem EXIT PROGRAM
Gosub WPFRESET
TMP$="do an unlock"
call "proglock.dl4","385-"+(whse using "&&"),0,tmp$
L_9010: !Print 'CS' 
! Close 
! Chain "MX000"
! Stop 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
returnstatus=0
If Eflg>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	! tmp$=""
Endif
if not(z9)
	if not(eflg)
		returnstatus=1
		let message$=message$+"There are no debit memos available to accept"
		if whse<>0
			let message$=message$+" for warehouse "+str$(whse)
		endif
		message$=message$+"."
	endif
else
		Let message$=message$+" "+str$(Z9)+" Debit Memo(s) Accepted"
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
