Rem BEDIT Version: 2.3 OBJECT CODE     Created: MAY 21, 2013  12:35:48
Rem /w2/papermaster/r2005//usr/acct/dave/work/custom/xrev9/mkonshelfadj.src (univ2) [dave] {29021}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
rem  loadsave -w -n 100,10 -o prog/dxport/mkonshelfadj.dl4 src/mkonshelfadj.src
Declare Intrinsic Sub InpBuf,String
Option Default Dialect IRIS1
Rem Accumulate an adjustment to add to physical inventory for stock pulled from the shelf
If Err 0 Gosub ERR_TRAP
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8],HFAX[1]
Dim 2%,HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL,OREF[5]
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,INVNO,QPB,ROL0
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Dim F1$[16],K3$[50],K2$[50],P61$[256]
Enter SPECS[]
CH_ROH = SPECS[1]
CH_ROL = SPECS[2]
MAT  READ #1,61,0;P61$;
specs[0]=0
if P61$[113,113]="N" goto outend ! no adjustment
let STARTSTATUS=P61$[113,113]
if STARTSTATUS =0 goto outend
if STARTSTATUS >7 goto outend
K3$ = " ",K3$
K3$[1,6] = SPECS[3] Using "######"
ROL_LOOP: Rem
Search #CH_ROL,3,2;K3$,REC_ROL,E
If E > 2 Gosub ERR_SEARCH
If E = 2 Goto ROLEXIT
X2 = K3$[1,6]
If X2 <> SPECS[3] Goto ROLEXIT
Mat Read #CH_ROL,REC_ROL,0;L2
Mat Read #CH_ROL,REC_ROL,8;L3
Mat Read #CH_ROL,REC_ROL,16;L4
Mat Read #CH_ROL,REC_ROL,32;L5
Mat Read #CH_ROL,REC_ROL,56;L6
Mat Read #CH_ROL,REC_ROL,80;L6$
Mat Read #CH_ROL,REC_ROL,140;L1$
Mat Read #CH_ROL,REC_ROL,160;L9
Mat Read #CH_ROL,REC_ROL,168;L7
Mat Read #CH_ROL,REC_ROL,246;PL
Mat Read #CH_ROL,REC_ROL,250;UN
Mat Read #CH_ROL,REC_ROL,256;S2
Mat Read #CH_ROL,REC_ROL,260;S3
Mat Read #CH_ROL,REC_ROL,368;MT$
Mat Read #CH_ROL,REC_ROL,370;S3$
Mat Read #CH_ROL,REC_ROL,404;OLM
Mat Read #CH_ROL,REC_ROL,446;EUN
Mat Read #CH_ROL,REC_ROL,452;UNF
Mat Read #CH_ROL,REC_ROL,494;LCO
Mat Read #CH_ROL,REC_ROL,502;CST
Mat Read #CH_ROL,REC_ROL,508;LTAX1
Mat Read #CH_ROL,REC_ROL,514;CTWT
Mat Read #CH_ROL,REC_ROL,518;INVNO
Mat Read #CH_ROL,REC_ROL,538;LTAX2
Mat Read #CH_ROL,REC_ROL,542;QPB
Read #CH_ROL,REC_ROL,548;LPRINTED
Read #CH_ROL,REC_ROL,550;OWHS
Read #CH_ROL,REC_ROL,552;LP_DATE
Read #CH_ROL,REC_ROL,556;LP_TIME
Read #CH_ROL,REC_ROL,564;ROL0
If L3[0] = 1 Goto ROL_LOOP ! not a product
If L3[1] = 0 Goto ROL_LOOP ! not from inventory
K2$ = " ",K2$
For OS = 1 To 99
  K2$[1,2] = OS Using "##"
  K2$[3,8] = L2[1] Using "######"
  Search #CH_ROH,2,1;K2$,REC_ROH,E
  If E > 2 Gosub ERR_SEARCH
  If Not(E)
    Mat Read #CH_ROH,REC_ROH,0;H0
    Mat Read #CH_ROH,REC_ROH,52;H3
    Mat Read #CH_ROH,REC_ROH,56;TOT_SELL
    Mat Read #CH_ROH,REC_ROH,64;LOCKPORT
    Mat Read #CH_ROH,REC_ROH,66;V0$
    Mat Read #CH_ROH,REC_ROH,78;H4
    Mat Read #CH_ROH,REC_ROH,84;H0$
    Mat Read #CH_ROH,REC_ROH,104;H5
    Mat Read #CH_ROH,REC_ROH,172;ST3
    Mat Read #CH_ROH,REC_ROH,272;H1$
    Mat Read #CH_ROH,REC_ROH,278;SLSM
    Mat Read #CH_ROH,REC_ROH,318;SCOM
    Mat Read #CH_ROH,REC_ROH,348;SMER
    Mat Read #CH_ROH,REC_ROH,378;SCST
    Mat Read #CH_ROH,REC_ROH,408;H6
    Mat Read #CH_ROH,REC_ROH,444;HMAT$
    Mat Read #CH_ROH,REC_ROH,446;P0$
    Mat Read #CH_ROH,REC_ROH,466;HFAX
    Mat Read #CH_ROH,REC_ROH,474;HSTI
    Mat Read #CH_ROH,REC_ROH,482;H2
    Mat Read #CH_ROH,REC_ROH,486;OWHT
    Mat Read #CH_ROH,REC_ROH,490;OWHT1
    Mat Read #CH_ROH,REC_ROH,498;TOTGL
    Mat Read #CH_ROH,REC_ROH,504;PICKBY
    Mat Read #CH_ROH,REC_ROH,512;OREF
    IF L4[3]
	IF L4[3]<>SPECS[4] GOTO ROL_LOOP: ! WRONG WHSE
	ELSE
	IF H4[2]<> SPECS[4] GOTO ROL_LOOP: ! WRONG WHSE
	ENDIF
IF H5[7]=19  
REM PO COMPLETE LINE SHIPPED AND OUT OF ON HAND
IF L7[2]<>0 AND L7[0]=L7[2] GOTO ROL_LOOP:
ENDIF
    If H0[0] < STARTSTATUS Goto ROL_LOOP
    If H0[0] >= 9 And H0[0] <= 59 Goto ROL_LOOP
    If H0[0] = 90 Goto ROL_LOOP
    If H0[0] = 91
      If H6[2] < STARTSTATUS Goto ROL_LOOP
      If H6[2] >= 9 And H6[2] <= 59 Goto ROL_LOOP
    End If 
    ADJUSTMENT = ADJUSTMENT + L7[4]
    let OS = 100
  End If 
Next OS
Goto ROL_LOOP !
ROLEXIT: Rem DONE WITH LINES
OUTEND: Rem
SPECS[0] = ADJUSTMENT
End 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
If Spc(8) = 99 ! "escape hit/return back
  Print 'RB ML';" ";'ML';
  Return -1
End If 
If Spc(8) = 123 ! "record lock
  Escdis ! "disable the escape key
  Window Open @0,0; Size 30,3; Using ""
  Print @0,0;'RB BR';"RECORD LOCKED - PLEASE WAIT";'ER';
  Signal 3,50 ! "pause 5 seconds
  Window Close 
  Escclr ! "re-enable the escape key
  Return -1
End If 
Dim 2%
Window Off 
Print @0,Msc(34) - 1;'CR RB';"*********** BASIC ERROR ************";'CE RB'
ENUM = Spc(8);ELINE = Spc(10);CTERR = 0
If ENUM = 157 Let CTERR = Err(8) ! "indexed file error
Print 'UK RB';"ERROR ";(ENUM + (CTERR * .001));"HAS OCCURRED ";
Print "AT LINE";ELINE;'CL CR';"IN PROGRAM ";
Goto ERR_MAIN ! "finish off display
ERR_SEARCH: Rem *Error routine (search error)   V3.1 8/94 G.DOSCHER/REK
Dim 2%
Window Off 
Print @0,Msc(34) - 1;'CR RB';"*********** SEARCH  ERROR **********";'CE RB'
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8) ! "indexed file error
Print 'RB';"RETURN STATUS";(E + (CTERR * .001));
Print "/ STATEMENT";ELINE;'CL CR';"IN PROGRAM ";
Goto ERR_MAIN ! "use main error logic
ERR_ESCAPE: Rem *Error routine (escape abort)   V3.1 8/94 G.DOSCHER/REK
If Spc(8) <> 99 Goto ERR_TRAP ! "for all but escape
If Err 0 Rem
CNTRLB_ERR_ESCAPE: Dim ABREQ$[10]
If Err 0 Gosub ERR_TRAP
Print @0,Msc(34) - 1;"DO YOU WISH TO ABORT THIS PROGRAM (Y/N)?  ";'RB CL';
Input Len 16385;""ABREQ$
Call String(1,ABREQ$)
Print @0,Msc(34) - 1;'CL';
If Err 0 Gosub ERR_ESCAPE
If ABREQ$ <> "Y"
  Print 'ML';" ";'ML';
  Return -1 ! "go back
End If 
Goto OUTEND ! "out of the program
ERR_MAIN: Rem "main error handling logic
If Err 0 Rem
Dim PNAME$[50],PNAME1$[50],PNAME2$[80]
PNAME$ = Msc$(4) ! "program name
Call String(1,PNAME$) ! "convert to upper case
POS_ = 1;POS1 = 0
NAMEPARSE: Rem "get program name from path
Search PNAME$[POS_],"/",POS1 ! "just parse out name
If POS1
  POS_ = (POS_ + POS1)
  Goto NAMEPARSE
End If 
Print "NAME: ''";PNAME$[POS_];"''";'CL CR';
Print "PLEASE CALL UNIVERSAL FOR ASSISTANCE!";'CL'
Print "TRACE: ";'CL';
STACKLOOP: Rem "print nesting information
Print Using "<#####> ";Spc(16);
If Spc(14) Goto STACKLOOP ! "more to show
Print 'CR';"************************************"
Close #0 ! "make sure channel is closed
Open #0,"errorlog"
Write #0,Chf(0);PNAME$[POS_],ENUM,ELINE,Spc(5),Spc(6),Spc(2),Spc(3),CTERR;
Close #0
Input Tim 6000;'CR';"PLEASE HIT <CR> TO CONTINUE: ";PNAME1$
PNAME1$ = " ",PNAME1$;PNAME1$ = "HOME"
Call String(2,PNAME$) ! "convert back to lower case
System 28,PNAME1$ ! "get home directory
Call String(5,PNAME2$) ! "clear buffer
PNAME2$ = " ",PNAME2$
PNAME2$ = "CHAIN ''SAVE <00>",PNAME1$,"/",PNAME$[POS_],".save!''\15\"
Call InpBuf(PNAME2$) ! "load into buffer
Stop ! "the program
Rem {end rtn.error.s}
