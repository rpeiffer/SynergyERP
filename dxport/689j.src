! >>> Program 689j
!
! description INVENTORY VALUE REPORT Tab Delimited Spreadsheet Version
!
! loadsave -w -n 100,10 -o prog/dxport/689j.dl4 src/689j.src
!
! 
include "src/copyright.inc" ! dx
Rem BEDIT Version: 2.3 OBJECT CODE     Created: MAR  4, 2013  12:47:47
Rem /w2/papermaster/r2005//usr/acct/valerie/work/custom/xrev9/mx689j.src (univ2) [valerie] {20861}
Rem  Copyright (c) 2013 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
!Option Default Dialect IRIS1
Rem MX689j - INVENTORY VALUE to text file
Rem AUTHOR: DAVE  AUG 10, 1987
Rem LAST UPDATE:  roman 08/23/1993 clean-up. prep for fiber cct #55474
Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
If Err 0 Gosub ERR_TRAP
!
dim e$[500],buttonlist$[5,50],nextlist$[5,100],MSG$[500] ! dx error handling variables
! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Dim 1%,P1[1],F,X1,Y8,Y7,Y9,WHLM[1],LM[1],TABS,INCNEG,ZEROVL,W1[2]
Dim 2%,B1[24],A3,SELWHSE,WHSE,Q0[1],C4[8],X2,ECTR,ELN[11],I,W2[9],W7[14]
Dim 3%,A2[7],W3[24],P3[3],COST,CUNIT,UNITTYPE,J,X3,T9[20],W5[12]
Dim 3%,PRPARC[2],PF_LOAD2,WHMISC[2],A1[33]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[60],ARDATE$[8],A$[156]
Dim U5$[20],SUNIT$[4],CUNIT$[4],UNIT$[10],P9$[50],PMASK$[15],SCRATCH$[5000]
Dim K1$[50],K2$[20],K3$[20],X$[10],K5$[60],COST$[4]
Dim D1$[10],D2$[10],T$[1],PR_A2$[30],FLG$[10],BUYER$[30]
Dim CDTY$[36],CTY$[24],MTDESC$[36],VA$[264],KEY_$[50]
Dim OPC1$[1],OPC2$[1]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="z",EndParam$

!! dx add xport reporting code
DXSetup:
Dim tmp$[500],tmp1$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
For J = 2 To 11
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1792","2528 ","1728","1744","2288","1984","2272","-1","2400","-1"
Ropen #11,"2/buyers"
Mat Read #1,0,100;ARDATE$;
Mat Read #1,19,50;P9$;
Read #1,3;CNAME$;
Read #1,0,120;Y7; \ Read #1,51,72;Y8;
Y9 = Y7 - Y8 \ If Y9 <= 0 Let Y9 = Y9 + 12
Y8 = Y9
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2 ! "2 default
PMASK$ = "##########" ! "set std size mask
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
T$ = "\11\"
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 55 \ If J8 Let J9 = 18


!
COST$ = "ABWL";PAMU = 0;ZEROVL = 0;INCNEG = 0
SELWHSE = 0;UNITTYPE = 1
U5$ = "AVG. COST "
K2$ = " ",K2$;K3$ = "z",K3$

! - !  dx add xport reporting code
call dxget("begcode",tmp$) \ K2$=UCase$(tmp$),Blank$ ! starting product code
if rtrim$(tmp$)="" let k2$=" ",k2$
let k1$=k2$
call dxget("endcode",tmp$) \ K3$=UCase$(tmp$),EndParam$ ! ending product code
if rtrim$(tmp$)="" let k3$="z",k3$
call dxget("whse",tmp$) \ if tmp$="" let SELWHSE=0 else SELWHSE=tmp$ ! warehouse
Call dxget("unit",tmp$) \ unittype=tmp$ ! avg cost
Call dxget("zerovl",tmp$) \ if tmp$="" let ZEROVL=0 else ZEROVL=99! include zero on hand
call dxget("prntneg",tmp$) \ if tmp$="" let INCNEG=0 else INCNEG=99 ! include negative quantity
call dxget("CSV",tmp$)\if rtrim$(tmp$)<>"" let t$="," ! set as comma delimited! - !  dx end
!
! product code section
if K3$<K2$ let e$="Invalid ending code, must be greater than starting code!" \ error 10000
!
! warehouse
If WHSE<0 Or WHSE>99 let e$="Invalid  warehouse, must be between 0 and 99!" \ error 10000
if WHSE=0 let PAMU=0 ! all warehouses, no actual monthly usage
!
! average cost
U5$ = " ",U5$
If UnitType = 1 Let U5$ = "AVG. COST"
If UnitType = 2 Let U5$ = "BASE COST"
If UnitType = 3 Read #1,18,120;D1$; \ U5$[1,10] = D1$[1,10]
If UnitType = 4 Let U5$ = "LAST COST"
If UnitType = 5 Read #1,18,220;D1$; \ U5$ = rtrim$(D1$[1,10])
If UnitType = 6 Read #1,18,230;D1$; \ U5$ = rtrim$(D1$[1,10])
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  ! try call dxclose() else rem
End If 
STARTPRNT: Rem "and we're off
J1 = 90 \ J2 = 0
K5$=K2$
Gosub L_5800 ! "headings
!Print @20,17;"Processing... ";
! If J8 Print 'CS';

L_2000: Search #5,3,1;K5$,R5,E \ If E > 2 Gosub ERR_SEARCH !! run odd whse
If E Goto outend:
REC_NUM = REC_NUM + 1 ! \ If Not(Fra(REC_NUM / 50)) Print @35,17;'CL';REC_NUM
WHSE = K5$[13,14]
If Not(WHSE) Goto L_2000
If SELWHSE If SELWHSE <> WHSE Goto L_2000
If K5$[1,Len(K3$)] > K3$[1,Len(K3$)] Goto outend:
K1$[1,12] = K5$[1,12]
Search #2,2,1;K1$,R1,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_2000
Gosub L_6000 ! "read prod record
Gosub L_10300 ! "read whse record
Gosub GET_SUPPORTING !get all the descriptios
Gosub L_3000 !!GET LOT ON HAND,ETC
Gosub L_10200 ! "set common cost variable
FLG$ = " ",FLG$
If W0[0] = 0 Let FLG$ = "N"
If W0[0] = 1 Let FLG$ = "Y"
If W0[0] = 2 Let FLG$ = "O"
T9 = 0 \ T9[1] = 0 \ T9[2] = 0 \ T9[3] = 0
If A$[152,155] = "MACH" Let A[0] = 0
If A$[152,155] = "LABR" Let A[0] = 0
If A$[152,155] = "TIME" Let A[0] = 0
T9[2] = A[0] - A[1] - A[3]
If P9$[28,28] = "Y" Let T9[2] = T9[2] + W3[2]
If B1[20] = 0 Let B1[20] = 1
If INCNEG Goto L_2062
If W3[0] < 0 Goto L_2065
L_2062: T9[3] = FNR(A[0] * (COST))
L_2065: If Not(ZEROVL) If A[0] = 0 Goto L_2000
If Not(INCNEG) If A[0] < 0 Goto L_2000
Y9 = Y8;T9[4] = 0 \ If Not(PAMU) Goto L_2150 ! "AMU & MOH
T9[4] = W3[8] \ If T9[4] > 0 Let T9[0] = T9[4] \ Goto L_2100 ! "got amu
T9[4] = W3[9] ! " \ IF T9[4]<=0 LET T9[4]=W5[0]
T9 = T9[4] ! " FNR((T9[4])/Y9) "already monthly
L_2100: T9[1] = 0 \ If T9 Let T9[1] = FNR(W3[(12)] / T9)
If WHSE If T9 Let T9[1] = FNR(W3[0] / T9)
L_2150: Gosub L_10000 ! "converts
Gosub L_5000 ! "print line
Gosub L_2200 ! "totals
Goto L_2000 ! "next
L_2200: Rem TOTALS CALC
T9[10] = T9[10] + A[0]
T9[12] = T9[12] + T9[3]
Return 
L_3000: Rem GET ON HAND FROM SPRODLOT
A[0] = 0;A[1] = 0;A[3] = 0
J4$ = " ",J4$;J4$ = A$[140,151]
L_3010: Search #3,3,2;J4$,R4,E \ If E > 2 Gosub ERR_SEARCH
If E Return 
If J4$[1,12] <> A$[140,151] Return 
Mat Read #3,R4,66;P1;
Mat Read #3,R4,82;P3;
If WHSE If WHSE <> P1[0] Goto L_3010 !!WRONG WHSE
A[0] = A[0] + P3[0] - P3[1]
A[3] = A[3] + P3[3]
Goto L_3010
L_5000: Rem PRINT LINE
SCRATCH$ = " ",SCRATCH$ \ SCRATCH$ = ""
SCRATCH$ = A$[140,151] + T$ + A$[9,38] + T$ + A$[63,92] + T$ + A$[139,139] + T$ + A$[152,155] + T$
SCRATCH$ = SCRATCH$ + CDTY$[1,16] + T$ + CDTY$[17,32] + T$ + Str$(B1[11]) + T$ + CTY$[1,24] + T$ + A$[156,156] + T$
SCRATCH$ = SCRATCH$ + MTDESC$[1,24] + T$ + Str$(B1[24]) + T$ + VA$[1,30] + T$ + A$[93,112] + T$ + PR_A2$[13,25] + T$
SCRATCH$ = SCRATCH$ + Str$(W1[2]) + T$ + BUYER$ + T$ + Str$(W7[6]) + T$
X2 = C4[7] \ Gosub L_7700
SCRATCH$ = SCRATCH$ + X$ + T$
X2 = W2[6] \ Gosub L_7700
SCRATCH$ = SCRATCH$ + X$ + T$
SCRATCH$ = SCRATCH$ + Str$(WHSE) + T$ + FLG$ + T$ + Str$(A[0]) + T$ + SUNIT$ + T$
SCRATCH$ = SCRATCH$ + Str$(COST) + T$ + CUNIT$ + T$ + Str$(T9[3])
Print #0;SCRATCH$
Return 
L_5800: Rem HEADINGS ROUTINE
SCRATCH$ = " ",SCRATCH$ \ SCRATCH$ = ""
SCRATCH$ = "ITEM CODE" + T$ + "DESCRIPTION 1" + T$ + "DESCRIPTION 2" + T$ + "M/B" + T$ + "COMMODITY" + T$
SCRATCH$ = SCRATCH$ + "COMMOD DESC" + T$ + "COMMOD REMARKS" + T$ + "SALES CATEGORY" + T$
SCRATCH$ = SCRATCH$ + "CATEGORY DESC" + T$ + "MAT'L CODE" + T$ + "MAT'L DESC" + T$ + "VENDOR" + T$
SCRATCH$ = SCRATCH$ + "VENDOR NAME" + T$ + "VENDOR PART NUMBER" + T$ + "PACK SIZE" + T$
SCRATCH$ = SCRATCH$ + "BUYER" + T$ + "BUYER NAME" + T$ + "WHSE INVT CLASS" + T$
SCRATCH$ = SCRATCH$ + "ESTABLISHED DATE" + T$ + "LAST SOLD DATE" + T$ + "WHSE #" + T$ + "WHSE RERDER FLG" + T$
SCRATCH$ = SCRATCH$ + "ON HAND" + T$ + "STOCK U/M" + T$ + U5$ + T$ + "COST U/M" + T$ + "EXTENDED COST"
Print #0;SCRATCH$
Return 
L_6000: Rem "====================================== read product record
Mat Read #2,R1,0;A$;
Mat Read #2,R1,156;B1;
Mat Read #2,R1,256;A; \ Mat Read #2,R1,256;A1;
Mat Read #2,R1,460;A2;
Mat Read #2,R1,508;A3;
Mat Read #2,R1,512;PFU1;
Mat Read #2,R1,554;PFU2;
Mat Read #2,R1,894;C4;
Mat Read #2,R1,596;PRPARC;
Mat Read #2,R1,938;PF_LOAD2;
Mat Read #2,R1,944;PR_A2$;
Return 
GET_SUPPORTING: Rem get all the other decriptions
CDTY$ = " ",CDTY$ \ CDTY$[1,19] = "COMMODITY NOT FOUND"
KEY_$ = " ",KEY_$ \ KEY_$ = A$[152,155]
Search #6,2,1;KEY_$,R6,E
If Not(E)
  CDTY$ = " ",CDTY$
  Mat Read #6,R6;CDTY$
End If 
CTY$ = " ",CTY$
If B1[11]
  Mat Read #7,B1[11];CTY$
End If 
MTDESC$ = " ",MTDESC$ \ MTDESC$ = "MAT'L CODE NOT FOUND"
KEY_$ = " ",KEY_$
KEY_$ = A$[156,156]
Search #8,2,1;KEY_$,R8,E
If Not(E)
  Mat Read #8,R8;MTDESC$
End If 
VA$ = " ",VA$ \ VA$ = "VENDOR NOT FOUND"
If B1[24]
  KEY_$ = " ",KEY_$ \ KEY_$ = B1[24] Using "######"
  Search #10,2,1;KEY_$,R10,E
  If Not(E)
    Mat Read #10,R10;VA$
  End If 
End If 
BUYER$ = "NO BUYER"
If W1[2]
  Mat Read #11,W1[2];BUYER$
End If 
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 

L_10000: Rem
CNVTU[0] = 0
CNVTU[1] = PFU1[11]
CNVTU[2] = 2
CNVTA = COST \ Gosub L_20000 \ COST = AMOUNT
CNVTU[1] = PFU1[8]
CNVTU[2] = 1
For X = 0 To 2
  If X = 1 Goto L_10130 ! "convert MOH?
  If X = 0 Let CNVTU[2] = 5 ! "ALLOW FRACTION
  CNVTA = T9[X] \ Gosub L_20000 \ T9[X] = AMOUNT
  CNVTA = W3[X] \ Gosub L_20000 \ W3[X] = AMOUNT
  If X = 0 Let CNVTA = A[X] \ Gosub L_20000 \ A[X] = AMOUNT
L_10130: Next X
If PFU1[8] > 0 Mat Read #4,PFU1[8],10;SUNIT$;
If PFU1[8] = -1 Let SUNIT$ = "CWT "
If PFU1[8] = -3 Let SUNIT$ = "LB  "
If PFU1[11] > 0 Mat Read #4,PFU1[11],10;CUNIT$;
If PFU1[11] = -1 Let CUNIT$ = "CWT "
If PFU1[11] = -3 Let CUNIT$ = "LB  "
Return 
L_10200: Rem "============================================== SET COST
If UNITTYPE = 1 ! "average
  If W3[15] If P9$[32,32] = "Y" Let COST = W3[15] Else Let COST = B1[21]
End If 
If UNITTYPE = 2 ! "base
  If W3[18] If P9$[32,32] = "Y" Let COST = W3[18] Else Let COST = C4[4]
End If 
If UNITTYPE = 3 ! "warehouse
  If W3[17] If P9$[32,32] = "Y" Let COST = W3[17] Else Let COST = B1[8]
End If 
If UNITTYPE = 4 ! "last
  If W3[16] If P9$[32,32] = "Y" Let COST = W3[16] Else Let COST = B1[10]
End If 
If UNITTYPE = 5
  If W3[14] If P9$[32,32] = "Y" Let COST = W3[14] Else Let COST = PF_LOAD2
End If 
If UNITTYPE = 6
  If WHMISC[2] If P9$[32,32] = "Y" Let COST = WHMISC[2] Else Let COST = PRPARC[2]
End If 
Return 
L_10300: Rem WAREHOUSE
Mat Read #5,R5,32;W1
Mat Read #5,R5,38;W2
Mat Read #5,R5,78;W3;
Mat Read #5,R5,228;W5; \ Mat Read #5,R5,800;WHMISC;
Mat Read #5,R5,696;W7;
If P9$[32,32] = "Y" Gosub L_69000 ! "check warehouse data
Return 

L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050 ! "um window
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160 ! "going to same units
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160 ! "lot
If CNVTU[2] = 0 Goto L_20050 !!THIS TESTS IF VALID CONVERSION
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160 ! "none there
L_20050:! If Spc(4) > 1280 Goto L_20120 ! "unibasic 5+
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160 ! "um window
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160 !!TEST IF VALID CONVERSION
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160 !!TEST IF VALID CONVERSION
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0 ! "PR_C4[3]
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2] ! "default lists from main
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0] ! "load 1 mup
  If Not(W3[17]) Let W3[17] = B1[8] ! "load 1
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1] ! "load 2 mup
  If Not(W3[14]) Let W3[14] = PF_LOAD2 ! "load 2
  If Not(W3[15]) Let W3[15] = B1[21] ! "average cost
  If Not(W3[16]) Let W3[16] = B1[10] ! "last cost
  If Not(W3[18]) Let W3[18] = C4[4] ! "base cost (MAY BE PR_C4[4])
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2] ! "p/o cost
  If WHPARC[0] Let B1[22] = WHPARC[0] ! "break table to use
  If Not(W2[3]) Let W2[3] = B1[24] ! "vendor to use
End If 
Return 

ERR_SEARCH: Rem                                  
ENUM = e;ELINE = Spc(16);CTERR = 0               
If e = 5 Let CTERR = Err(8)                      
msg$ = "RETURN STATUS",(e + (CTERR * .001))      
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "   
e$ = msg$                                               
Call programdump()                               
e$ = msg$ \ Error 10000                          
Return ! End                                     


OUTEND: Rem EXIT ROUTINE
! dx close
If J8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
!
! try call dxclose() else rem
End 
!
ERR_TRAP:
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
