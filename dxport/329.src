! >>> Program 329
!
! description Sales Order Credit Card Report, Input 
!
! loadsave -w -n 100,10 -o prog/dxport/329.dl4 src/329.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!

!
External Lib "ubsfunc.dl4"
Declare External Sub GetCostLevels
Declare External Function GetUIDSalesrep
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,Time,VerifyDate
Declare Intrinsic sub programdump
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
If Err 0 Gosub ERR_TRAP
!

dim 1%,picklist
dim 2%,N1[13],1%,N2[6],N1$[42],V9[4],J8,TIME$[22],DATE$[8] ! old com line
dim SZONE$[2],EZONE$[2],CNAME$[30],ITEM_LAB$[10],INVAC,INCM,INCALL9! old com line
dim custom_customer$[30]
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim BegProd$[12],EndProd$[12]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim Z1$[50],F1$[16],F2$[26],A$[26],K$[130],3%
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim KEY27$[2]
Dim 1%,J0,J2,J3,J4,J5,J6,J9[2],X1,X$[40],PRODRANGE,URECFLAG,repSecurity
Dim 2%,X2,DT3[1],D9[5]
Dim 3%,TT,intco
Dim 4%,J1
dim 3%,chklev1, chklev2, chklev3
dim 2%,csh0[4],3%,csh1[2],csh0$[156],1%,bnk[1],2%,ch_ccn[9],ch_cca$[120],3%,csinvno,cc_tt$[4]
! order header                                     
dim 1%,h3[1],h4[2],LockPort                        
dim 2%,h0[12],h5[16],st3[24],slsm[9],h6[8],hfax[1] 
dim 3%,tot_sell,scom[4],smer[4],scst[4],OREF[5]           
dim v0$[12],h0$[20],h1$[6],hmat$[2],p0$[20]


! order file - ship to                             
dim 1%,s6[1]                                       
dim 2%,s5                                          
dim 3%,srn[5]                                      
dim s1$[118],s2$[20]                               
! order file - totals                              
dim 1%,dclvl,mctxbl[9]                             
dim 2%,mcode[9],jrnl                               
dim 3%,mcharge[9,1],t2[27],tot[4]                  
dim keycust$[30],3%,rec_cust,custname$[30],3%,invtot,cctype,payamt
dim repopt$[1],d$[25]
dim keysort$[75],keycash$[30],keyinvh$[30],keyroh$[30],message$[1000]
dim 2%,sdate,edate,sdiv,ediv,sbank,ebank,swhse,ewhse,sortopt,repopt,jsdate,jedate
dim 3%,tot1[9],tot2[9],tot3[9],rec_roh, rec_sort, rec_invh, rec_roc, rec_rot
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[5500],tmp1$[200],TMP2$[300],b$[200],blockid$[100],msg$[100],rstr$[5000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
dim 3%,tmp3
dim compname$[30]
dim ccdesc$[200]
ccdesc$[1,10]=  "UNKNOWN 1  "
ccdesc$[11,20]= "UNKNOWN 2  "
ccdesc$[21,30]= "AMEX       " ! #3
ccdesc$[31,40]= "VISA       " ! #4
ccdesc$[41,50]= "MASTERCARD " ! #5
ccdesc$[51,60]= "DISCOVER   " ! #6
ccdesc$[61,70]= "UNKNOWN 7  " ! #7
ccdesc$[71,80]= "UNKNOWN 8  " ! #8
ccdesc$[81,90]= "UNKNOWN 9  " ! #9
ccdesc$[91,100]="PAYPAL     " ! #10

Dim RETVAL$[256],Z2$[2]
Call Time(D$)

TT = Spc(5) \ COID = Int((TT - Int(TT / 16384) * 16384) / 64)
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
l9= 65 \ If J8 Let l9 = 1000
let l=99
Mat Read #1,3,0;CNAME$;
Read #1,18,50;ITEM_LAB$;
Read #1,0,100;DATE$;
Mat Read #1,115;D9;
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
!
TIME$ = "" \ Call Time(TIME$) \ TIME$ = TIME$[15]
N1$=" ",N1$
!
!!!! dx add xport reporting code
DXSetup:
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8<>0 ! dx xml, setup rstr$
  !<section>
  search rstr$,"<section>",e
  if e<>0
	tmp$=rstr$[1,e-1]
	rstr$=tmp$
  endif
  tmp$ = bsdel$,"329",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 

!

let eflag=0
message$=""
!!!  dx add xport reporting code
call dxget("REPOPT",tmp$) \ IF RTRIM$(TMP$)="" LET TMP$="O"
let tmp$=rtrim$(ucase$(tmp$))
if tmp$<>"O" and tmp$<>"H" 
	let message$=message$+"Invalid Report Option Selected. " \ eflag=eflag+1
endif
let repopt$=tmp$
! warehouse range 
Call dxget("SWHSE",tmp$) 
if rtrim$(tmp$)="" let tmp$="1"
let swhse=tmp$
if swhse<1 or swhse>99
	let message$=message$+"Invalid Starting Warehouse Must be between 1 and 99 " \ eflag=eflag+1
	goto getdiv:
endif
Call dxget("EWHSE",tmp$) 
if rtrim$(tmp$)="" let tmp$="99"
let ewhse=tmp$
if ewhse<1 or ewhse>99
	let message$=message$+"Invalid Ending Warehouse Must be between 1 and 99 " \ eflag=eflag+1
	goto getdiv:
endif
If ewhse<swhse
	let message$=message$+"Ending Warehouse Must be Greater than Starting " \ eflag=eflag+1
endif
getdiv: ! division range 
Call dxget("SDIV",tmp$) 
if rtrim$(tmp$)="" let tmp$="1"
let sdiv=tmp$
if sdiv<1 or sdiv>99
	let message$=message$+"Invalid Starting Division Must be between 1 and 99 " \ eflag=eflag+1
	goto getdate:
endif
Call dxget("EDIV",tmp$) 
if rtrim$(tmp$)="" let tmp$="99"
let ediv=tmp$
if ediv<1 or ediv>99
	let message$=message$+"Invalid Ending Division Must be between 1 and 99 " \ eflag=eflag+1
	goto getdate:
endif
If ediv<sdiv
	let message$=message$+"Ending Division Must be Greater than Starting " \ eflag=eflag+1
endif
getdate: ! date range
call dxget("SDATE",tmp$) \ IF RTRIM$(TMP$)="" let sdate=0 else sdate=tmp$ ! beg date
tmp$=sdate using "&&&&&&" \ X2=tmp$[5,6],tmp$[1,4] 
sdate=X2 ! yymmdd
if x2<>0
	gosub L_7820 ! conv to julian
	if E<>0
		let message$=message$+"Invalid starting date!" \ eflag=eflag+1
		goto getbank:
	endif
endif
jsdate=X2 ! beg  date, julian
Call dxget("EDATE",tmp$) \ IF RTRIM$(TMP$)="" let edate=123159 else edate=tmp$ ! end order datee
tmp$=edate using "&&&&&&" \ X2=tmp$[5,6],tmp$[1,4] 
Edate=X2 ! yymmdd
gosub L_7820 ! conv to julian
if E<>0
	let message$=message$+"Invalid ending date!" \ eflag=eflag+1
	goto getbank:
endif
let jedate=x2
if jedate<jsdate
	let message$=message$+"Ending date must be greater starting date!" \ eflag=eflag+1
endif
getbank: ! bank range 
Call dxget("SBANK",tmp$) 
if rtrim$(tmp$)="" let tmp$="0"
let sbank=tmp$
if sbank<0 or sbank>99
	let message$=message$+"Invalid Starting Bank Must be between 1 and 999 " \ eflag=eflag+1
	goto getcctype: 
endif
Call dxget("EBANK",tmp$) 
if rtrim$(tmp$)="" let tmp$="999"
let ebank=tmp$
if ebank<1 or ediv>999
	let message$=message$+"Invalid Ending Bank Must be between 1 and 999 " \ eflag=eflag+1
	goto getcctype:
endif
If ebank<sbank
	let message$=message$+"Invalid Ending Bank Must be Greater than Starting " \ eflag=eflag+1
endif
getcctype: ! Credit Card Type (Amex, Visa, etc)
Call dxget("CCTYPE",tmp$) 
if rtrim$(tmp$)="" let tmp$="0"
let CCTYPE=TMP$
if cctype<>10
	IF CCTYPE<0 or cctype>6
		let message$=message$+"Invalid Credit Card Type Selected " \ eflag=eflag+1
	endif
endif
! sort option
Call dxget("SORTOPT",tmp$) 
if rtrim$(tmp$)="" let tmp$="1"
let SORTOPT=TMP$
IF SORTOPT<1 or SORTOPT>5
	let message$=message$+"Invalid Sort Option Selected " \ eflag=eflag+1
endif
If eflag<>0 goto outend:


OpenFiles: ! 
Read #1,88,1808;F1$;
Ropen #2,F1$ ! customer

if repopt$="O"
	Read #1,88,1840;F1$;
	Ropen #3,F1$ ! roh
	ch_roh=3
	Read #1,88,1872;F1$;
	Ropen #4,F1$ ! rot
	ch_rot=4
	Read #1,88,2224;F1$;
	Ropen #5,F1$ ! sordcash
	ch_roc=5
else
	if repopt$="H"
		Read #1,88,1136;F1$;
		Ropen #3,F1$ ! INVH
		ch_roh=3
		Read #1,88,1168;F1$;
		Ropen #4,F1$ ! INVT
		ch_rot=4
		Read #1,88,2704;F1$;
		Ropen #5,F1$ ! sordcash	
		ch_roc=5
		let f1$="4/SORDFLEHHKEY"+str$(IntCO)
		ropen #6,f1$  ! invhkey
	else
		let e$="Report Option Error" \ error 10000
	endif
endif

!if j8=0 !if pdf or print, new method, after edits,setouput,dxclose
! Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
! try call dxclose() else rem
!end if
if j8<>0  ! browser option 

  tmp$ = "Bank",fdel$
  tmp$ = tmp$, "Order #",fdel$
  tmp$ = tmp$, "Invoice #",fdel$
  tmp$ = tmp$, "Date",fdel$
  tmp$ = tmp$, "Cust #",fdel$
  tmp$ = tmp$, "Customer Name",fdel$
  tmp$ = tmp$, "Invoice Amt",fdel$
  tmp$ = tmp$, "Payment Amt",fdel$
  tmp$ = tmp$, "CC Type",fdel$
  Call addtostr(e$,rstr$,tmp$+rdel$)
end if


! clear sort
let keysort$=" ",keysort$
clrsort: !
search #9,3,1;keysort$,rec_sort,e
if e=2 goto startsort:
if e<>0 gosub err_search:
search #9,5,1;keysort$,rec_sort,e
if e<>0 gosub err_search:
goto clrsort:

! startsort
startsort: ! 
if repopt$="O" goto ordsort: 
if repopt$="H" goto invsort:
let e$="Error in Report Option" \ error 10000
goto outend:


ordsort: ! sort orders
let keyroh$=" ",keyroh$
Do
	search #3,3,1;keyroh$,rec_roh,e
	if e=2 goto startprint:
	if e<>0 gosub err_search:
	mat read #3,rec_roh,0;H0;
	mat read #4,h0[3],8;T2;
	If not(t2[10]) goto nextordrec:
	if h0[9]<sdate goto nextordrec:
	if h0[9]>edate goto nextordrec:
	mat read #3,rec_roh,78;H4;
	IF H4[2]<SWHSE GOTO NEXTORDREC:
	IF H4[2]>EwHSE GOTO NEXTORDREC:
	mat read #3,rec_roh,104;h5;
	IF h5[8]<SDIV GOTO NEXTORDREC:
	IF h5[8]>EDIV GOTO NEXTORDREC:
	let keycash$=" ",keycash$
	let keycash$=H0[7] using "######"
	search #5,2,1;keycash$,rec_roc,e
	if e<>0 goto nextordrec:
	mat read #5,rec_roc,194;bnk;
	if bnk[1]<sbank goto nextordrec:
	if bnk[1]>ebank goto nextordrec:
	mat read #5,rec_roc,0;csh0;
	mat read #5,rec_roc,38;csh0$;
	If int(CSH0[2])=3 ! credit card
		let tmp3=csh0$[37,37]
		if not(tmp3) and rtrim$(ucase$(csh0$[37,42]))="PAYPAL" let tmp3=10
		if cctype=1 and tmp3=3 goto endordpay1: ! exclude amex
		if cctype>2 and tmp3<> cctype goto endordpay1: 
		let keysort$=" ",keysort$
		if sortopt=1
			let keysort$[1,6]=bnk[1] using "######" ! bank
		endif
		if sortopt=2
			let keysort$[1,6]=tmp3 using "######" ! credit card type
		endif
		if sortopt=3
			let keysort$[1,6]=h0[9] using "######" ! date
		endif
		if sortopt=4
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
		endif
		if sortopt=5
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
			let keysort$[13,18]=tmp3 using "######" ! credit card type
		endif
		let keysort$[19,28]=h0[7] using "##########" ! order #
		! let keysort$[29,30]=" 1" ! payment #
		search #9,2,1;keysort$,rec_sort,e
		if e=1
			search #9,4,1;keysort$,rec_roh,e
			if e<>0 gosub err_search:
		endif
        endordpay1: ! 
	endif
	if int(CSH0[3])=3 ! credit card
		let tmp3=csh0$[57,57]
		if not(tmp3) and rtrim$(ucase$(csh0$[57,62]))="PAYPAL" let tmp3=10
		if cctype=1 and tmp3=3 goto endordpay2: ! exclude amex
		if cctype>2 and tmp3<> cctype goto endordpay2: 
		let keysort$=" ",keysort$
		if sortopt=1
			let keysort$[1,6]=bnk[1] using "######" ! bank
		endif
		if sortopt=2
			let keysort$[1,6]=tmp3 using "######" ! credit card type
		endif
		if sortopt=3
			let keysort$[1,6]=h0[9] using "######" ! date
		endif
		if sortopt=4
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
		endif
		if sortopt=5
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
			let keysort$[13,18]=tmp3 using "######" ! credit card type
		endif
		let keysort$[19,28]=h0[7] using "##########" ! order #
		!let keysort$[29,30]=" 2" ! payment #
		search #9,2,1;keysort$,rec_sort,e
		if e=1
			search #9,4,1;keysort$,rec_roh,e
			if e<>0 gosub err_search:
		endif
        endordpay2: ! 
	endif
	nextordrec: 
Loop ! sort
goto startprint:

invsort: ! sort orders
let keyroh$=" ",keyroh$
let keyroh$[1,6]=jsdate using "######"
Do
	search #6,3,2;keyroh$,rec_roh,e
	if e=2 goto startprint:
	if e<>0 gosub err_search:
	let tmp3=keyroh$[1,6]
	if tmp3>jedate goto startprint:
	mat read #3,rec_roh,0;H0;
	mat read #3,rec_roh,512;OREF;
	mat read #4,OREF[5],8;T2;
	If not(t2[10]) goto nextinvrec:
	mat read #3,rec_roh,78;H4;
	IF H4[2]<SWHSE GOTO NEXTinvREC:
	IF H4[2]>EwHSE GOTO NEXTinvREC:
	mat read #3,rec_roh,104;h5;
	IF h5[8]<SDIV GOTO NEXTinvREC:
	IF h5[8]>EDIV GOTO NEXTinvREC:
	let keycash$=" ",keycash$
	let keycash$=oref[1] using "##########"
	search #5,2,1;keycash$,rec_roc,e
	if e<>0 goto nextinvrec:
	mat read #5,rec_roc,194;bnk;
	if bnk[1]<sbank goto nextinvrec:
	if bnk[1]>ebank goto nextinvrec:
	mat read #5,rec_roc,0;csh0;
	mat read #5,rec_roc,38;csh0$;
	If int(CSH0[2])=3 ! credit card
		let tmp3=csh0$[37,37]
		if not(tmp3) and rtrim$(ucase$(csh0$[37,42]))="PAYPAL" let tmp3=10
		if cctype=1 and tmp3=3 goto endinvpay1: ! exclude amex
		if cctype>2 and tmp3<> cctype goto endinvpay1: 
		let keysort$=" ",keysort$
		if sortopt=1
			let keysort$[1,6]=bnk[1] using "######" ! bank
		endif
		if sortopt=2
			let keysort$[1,6]=tmp3 using "######" ! credit card type
		endif
		if sortopt=3
			let keysort$[1,6]=h0[9] using "######" ! date
		endif
		if sortopt=4
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
		endif
		if sortopt=5
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
			let keysort$[13,18]=tmp3 using "######" ! credit card type
		endif
		let keysort$[19,28]=oref[1] using "##########" ! order #
		!let keysort$[29,30]=" 1" ! payment #
		search #9,2,1;keysort$,rec_sort,e
		if e=1
			search #9,4,1;keysort$,rec_roh,e
			if e<>0 gosub err_search:
		endif
        endinvpay1: ! 
	endif
	if int(CSH0[3])=3 ! credit card
		let tmp3=csh0$[57,57]
		if not(tmp3) and rtrim$(ucase$(csh0$[57,62]))="PAYPAL" let tmp3=10
		if cctype=1 and tmp3=3 goto endinvpay2: ! exclude amex
		if cctype>2 and tmp3<> cctype goto endinvpay2: 
		let keysort$=" ",keysort$
		if sortopt=1
			let keysort$[1,6]=bnk[1] using "######" ! bank
		endif
		if sortopt=2
			let keysort$[1,6]=tmp3 using "######" ! credit card type
		endif
		if sortopt=3
			let keysort$[1,6]=h0[9] using "######" ! date
		endif
		if sortopt=4
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
		endif
		if sortopt=5
			let keysort$[1,6]=bnk[1] using "######" ! bank
			let keysort$[7,12]=h0[9] using "######" ! date
			let keysort$[13,18]=tmp3 using "######" ! credit card type
		endif
		let keysort$[19,28]=oref[1] using "##########" ! order #
		!let keysort$[29,30]=" 2" ! payment #
		search #9,2,1;keysort$,rec_sort,e
		if e=1
			search #9,4,1;keysort$,rec_roh,e
			if e<>0 gosub err_search:
		endif
        endinvpay2: ! 
	endif
	nextinvrec: 
Loop ! sort invoice
goto startprint:

startprint: ! 
let chklev1=-1
let chklev2=-1
let chklev3=-1
let keysort$=" ",keysort$
do
	Search #9,3,1;keysort$,rec_roh,e
	if e=2 goto endreport
	if e<>0 gosub err_search:
	! Read order header                   
	Mat Read #CH_ROH,Rec_ROH,  0;H0       
	Mat Read #CH_ROH,Rec_ROH, 52;H3       
	Mat Read #CH_ROH,Rec_ROH,512;OREF    
	let rec_tot=h0[3]
	if repopt$="H" let rec_tot=oref[5]
	mat read #ch_rot,rec_tot,8;T2;
	If not(t2[10]) goto getnxtsort:
	let tmp3=keysort$[1,6]
	if chklev1<>-1 and chklev1<>tmp3
		if chklev3<>-1 and sortopt=5
			gosub L_4300: ! for option credit card type
			let chklev3=-1
		endif
		if chklev2<>-1 and sortopt>3
			gosub L_4200: ! date
			let chklev2=-1
		endif
		gosub L_4100: 
		let chklev1=-1
	endif
	let chklev1=keysort$[1,6]
	if sortopt>3
		let tmp3=keysort$[7,12] ! date
		if chklev2<>-1 and chklev2<>tmp3
			if chklev3<>-1 and sortopt=5
				gosub L_4300: ! for option credit card type
				let chklev3=-1
			endif
			gosub L_4200:
		endif
		let chklev2=keysort$[7,12]
	endif
	if sortopt=5
		let tmp3=keysort$[13,18]
		if chklev3<>-1 and chklev3<>tmp3
			gosub L_4300:
		endif
		let chklev3=keysort$[13,18]
	endif
	let keycash$=" ",keycash$
	let keycash$=H0[7] using "######"
	if repopt$="H" let keycash$[1,10]=oref[1] using "##########"
	search #ch_roc,2,1;keycash$,rec_roc,e
	if e<>0 goto getnxtsort:
	mat read #ch_roc,rec_roc,194;bnk;
	mat read #ch_roc,rec_roc,0;csh0;
	mat read #ch_roc,rec_roc,20;csh1;
	mat read #ch_roc,rec_roc,38;csh0$;
	let invtot=0;payamt=0
	if int(csh0[2])<>3 and int(csh0[3])<>3 goto getnxtsort:
	If int(CSH0[2])=3 ! credit card
		let tmp3=csh0$[37,37]
		if not(tmp3) and rtrim$(ucase$(csh0$[37,42]))="PAYPAL" let tmp3=10
		if cctype=1 and tmp3=3 goto endpay1: ! exclude amex
		if cctype>2 and tmp3<> cctype goto endpay1: 
		if sortopt=2 ! by credit card
			let cctmp3=keysort$[1,6]
			if cctmp3<>tmp3 goto endpay1:
		endif
		if sortopt=5
			let cctmp3=keysort$[13,18]
			if cctmp3<>tmp3 goto endpay1:
		endif
		let cardtype=csh0$[37,37]
		IF not(cardtype)
			if rtrim$(ucase$(csh0$[37,42]))="PAYPAL" let cardtype=10
		endif
		let invtot=t2[0]
		let payamt=CSH1[0]
		gosub L_5800:
		gosub L_5000:
		let t9[0]=t9[0]+invtot; tot1[0]=tot1[0]+invtot; tot2[0]=tot2[0]+invtot; tot3[0]=tot3[0]+invtot
		let t9[1]=t9[1]+payamt; tot1[1]=tot1[1]+payamt; tot2[1]=tot2[1]+payamt; tot3[1]=tot3[1]+payamt 
		
        endpay1: ! 
	endif
	if int(CSH0[3])=3 ! credit card
	    let payamt=0
		let tmp3=csh0$[57,57]
		if not(tmp3) and rtrim$(ucase$(csh0$[57,62]))="PAYPAL" let tmp3=10
		if cctype=1 and tmp3=3 goto endpay2: ! exclude amex
		if cctype>2 and tmp3<> cctype goto endpay2: 
		if sortopt=2 ! by credit card
			let cctmp3=keysort$[1,6]
			if cctmp3<>tmp3 goto endpay2:
		endif
		if sortopt=5
			let cctmp3=keysort$[13,18]
			if cctmp3<>tmp3 goto endpay2:
		endif
		let cardtype=csh0$[57,57]
		IF not(cardtype)
			if rtrim$(ucase$(csh0$[57,62]))="PAYPAL" let cardtype=10
		endif
		if invtot=0
			let invtot=t2[0]
		else
			let invtot=0
		endif
		let payamt=CSH1[1]
		gosub L_5800:
		gosub L_5000:
		let t9[0]=t9[0]+invtot; tot1[0]=tot1[0]+invtot; tot2[0]=tot2[0]+invtot; tot3[0]=tot3[0]+invtot
		let t9[1]=t9[1]+payamt; tot1[1]=tot1[1]+payamt; tot2[1]=tot2[1]+payamt; tot3[1]=tot3[1]+payamt 
        endpay2: ! 
	endif
	getnxtsort:  ! 
loop ! print
endreport: ! 
if sortopt=5 and chklev3<>-1 gosub L_4300:
if sortopt>3 and chklev2<>-1 gosub L_4200:
if chklev1<>-1 gosub L_4100:
gosub L_4000:
goto outend:
L_4000: Rem TOTAL PRINT
if j8 return
!
Print #0;"\15\** TOTALS **";
Gosub L_5800
Print #0; Using "--,---,---.##";Tab 79;t9[0];
print #0; Using "--,---,---.##";TAB 95;t9[1];
Print #0;""
For X = 0 To 4 \ t9[X] = 0 \ Next X
print #0;""
let l=l+1
Return 
!
L_4100: Rem Subtotals for Bank(sort opt 1, 4, 5), credit card (sort opt 2) or date (sort opt3)
if j8 return
if chklev1<0 return
!
Gosub L_5800
if sortopt=1 or sortopt=4 or sortopt=5 
	Print #0; using "##";"**Bank ";chklev1;" Totals **";
else
	if sortopt=2
		Print #0; "** Credit Card Totals for ";
		if chklev1>0 and chklev1<11
			print #0;ccdesc$[(chklev1*10)-9,(chklev1*10)-1];
		else
			Print #0;using "##";chklev1;
		endif
		Print #0;"**";
	else
		if sortopt=3
			print #0;"** Totals For ";
			let x$=chklev1 using "&&&&&&"
			print #0;x$[3,4];"/";x$[5,6];"/";x$[1,2];"**";
		endif
	endif
endif
Print #0; Using "--,---,---.##";Tab 79;tot1[0];
print #0; Using "--,---,---.##";TAB 95;tot1[1];
Print #0;""
For X = 0 To 4 \ tot1[X] = 0 \ Next X
print #0;""
let l=l+1
Return 

L_4200: Rem Subtotals for Date (Sort Option 4 or Sort Option 5)
if j8 return
if chklev2<0 return
if sortopt<4 return
!
Gosub L_5800
print #0;"** Totals For ";
let x$=chklev2 using "&&&&&&"
print #0;x$[3,4];"/";x$[5,6];"/";x$[1,2];"**";
Print #0; Using "--,---,---.##";Tab 79;tot2[0];
print #0; Using "--,---,---.##";TAB 95;tot2[1];
Print #0;""
For X = 0 To 4 \ tot2[X] = 0 \ Next X
print #0;""
let l=l+1
Return 

L_4300: Rem Subtotals for Credit Card (Sort Option 5)
if j8 return
if chklev3<0 return
if sortopt<5 return
!
Gosub L_5800
Print #0; "** Credit Card Totals for ";
if chklev3>0 and chklev3<11
	print #0;ccdesc$[(chklev3*10)-9,(chklev3*10)-1];
else
	Print #0;using "##";chklev3;
endif
Print #0;"**";
Print #0; Using "--,---,---.##";Tab 79;tot3[0];
print #0; Using "--,---,---.##";TAB 95;tot3[1];
Print #0;""
For X = 0 To 4 \ tot3[X] = 0 \ Next X
print #0;""
let l=l+1
Return 


!
L_5000: Rem PRINT LINE
let totrec=totrec+1
let keycust$=h0[4] using "######"
search #2,2,1;keycust$,rec_cust,e
if not(e)
	read #2,rec_cust,30;custname$;
else
	let custname$="Not On File "
endif
if j8 
  tmp$ = bnk[1] using "##",fdel$
  tmp$ = tmp$,h0[7] using "######",fdel$
  tmp$ = tmp$,oref[1] Using "########",fdel$
  !LET X$=H0[8] USING "&&&&&&" ! 
  !IF NOT(H0[8]) 
  LET X$=H0[9] using "&&&&&&"
  tmp$=tmp$,x$[3,4],"/",x$[5,6],"/",x$[1,2],fdel$ ! date
  tmp$ = tmp$,h0[4] using "######",fdel$
  tmp$ = tmp$,custname$,fdel$
  tmp$ = tmp$,invtot Using "----------.##",fdel$
  tmp$ = tmp$,payamt Using "----------.##",fdel$
  if cardtype>0 and cardtype<11
	let tmp$=tmp$,ccdesc$[(cardtype*10)-9,(cardtype*10)-1],fdel$
  else
	let tmp$=tmp$, cardtype using "##",fdel$
  endif
  Call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
Print #0; Using "####";Tab 3;bnk[1]; ! "Bank";
Print #0; using "######";Tab 9;H0[7]; ! "Order #";
Print #0; USING "########";Tab 17;OREF[1]; !"Invoice #";
LET X$=H0[8] USING "&&&&&&" ! 
IF NOT(H0[8]) LET X$=H0[9] using "&&&&&&"
print #0;tab 29;x$[3,4];"/";x$[5,6];"/";x$[1,2]; ! date
print #0;using "######";tab 39;h0[4]; ! cust#

Print #0; Tab 47;custname$;
Print #0; Using "--,---,---.##";Tab 79;INVTOT;
print #0; Using "--,---,---.##";TAB 95;PAYAMT;
if cardtype>0 and cardtype<11
	print #0;tab 109; ccdesc$[(cardtype*10)-9,(cardtype*10)-1];
else
	Print #0;using "##";tab 109;Cardtype;
endif
Print #0;" "
Return 
!

L_5800: rem heading
if j8 return
!
L = L + 1
If L < L9 Return 
If Not(P) Goto L_5815
If L9 <> 20 Goto L_5810
!!Input "\15\PRESS <CR> TO CONTINUE "J$
!!Print 'CS'
L_5810: If P Print #0;"\14\";
L_5815: Print #0;" "
Print #0;"-329-"; Tab 45;CName$[1,30] ! company name
P = P + 1
Print #0; Tab 10;D$;
Print #0; Tab 45;"Sales Order Credit Card Transactions ";
if repopt$="H"
	print #0;" From Invoice History ";
else
	print #0;" From Open Orders ";
endif
Print #0; Tab 110;"PAGE";P
If sdate=590101 and edate=591231
	Print #0;"All Dates ";
else
	Print #0;"For Date Range: ";
	let x$=sdate using "&&&&&&"
	Print #0;x$[3,4];"/";x$[5,6];"/";x$[1,2];
	print #0;" Thru ";
	let x$=edate using "&&&&&&"
	Print #0;x$[3,4];"/";x$[5,6];"/";x$[1,2];
endif

if swhse=1 and ewhse=99
	print #0;tab 40;"All Warehouses";
else
	if swhse=ewhse
		print #0;using "##";tab 40;"Warehouse: ";swhse;
	else
		print #0;using "##";tab 40;"Warehouses ";swhse;" - ";ewhse;
	endif
endif
if sdiv=1 and ediv=99
	print #0;tab 60;"All Divisions";
else
	if sdiv=ediv
		print #0;using "##";tab 60;"Division: ";sdiv;
	else
		print #0;using "##";tab 60;"Divisions ";sdiv;" - ";ediv;
	endif
endif
Print #0;" "
Print #0;""
Print #0; Tab 3;"Bank";
Print #0; Tab 9;"Order #";
Print #0; Tab 17;"Invoice#";
Print #0; Tab 32;"Date";
Print #0; Tab 39;"Cust #";
Print #0; Tab 47;"Customer Name";
Print #0; Tab 81;"Invoice Amt";
print #0; tab 97;"Payment Amt";
print #0; tab 109;"CC Type ";
Print #0;" "
Print #0;" "
let l=9
Return 


!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ E=0 \ Return ! good 
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
E=1
Return 


ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
E$=msg$
call programdump()
goto err_msg ! Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End

!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 


OUTEND: Rem EXIT ROUTINE
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		let message$=message$+"There are no transactions to print"
		message$=message$+"."
	else ! outend
		Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
!try Call dxclose() else rem

End ! the whole program