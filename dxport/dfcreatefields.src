!    dfcreatefields.dl4 - builds demo file definitions subsystem files
!  MODIFIED TO ONLY CREATE THE FIELDDEFS FILE!!!!!   OLD!!!!!!!!
!
!    "dfcreate.bas" 1.0 8/25/2006
!
!    All rights reserved.    (C) Copyright 2006 by:
!    Dynamic Concepts, Inc.   Aliso Viejo, California USA
!
!    "@(#) dfcreate.bas 1.0@(#)"
!
! loadsave -w -n 100,10 -o dfcreatefields.dl4 src/dfcreatefields.src
!
!This source code is free to use and duplicate with purchase of dynamicXport
!license
!
Declare Intrinsic Sub FindF
Declare Intrinsic Function findchannel
! *declare external libs & subs & functions
External Lib "dfgeneral.lib" !general routines
Declare External Sub suberr,mainerr,ReadSystemFile
Declare External Function getprogrampath$
!
!Include dffiles.bsh
!"dffiles.bsh" === Demo File Definitions Subsystem Database include file
!
!    "dffiles.bsh" 1.0 8/25/2006
!
!    All rights reserved.    (C) Copyright 2006 by:
!    Dynamic Concepts, Inc.   Aliso Viejo, California USA
!
!    "@(#) dffiles.bsh 1.0@(#)"
!
!
!This source code is free to use and duplicate with purchase of dynamicXport
!license
!
!
!DynamicXport Demo File Definitions Administration Application
!
!Data Base File Definitions
!
Def Struct config !dxsystem.txt parameters
  Member filetype$[2]
  Member drvr$[60]
  Member filedir$[80]
  Member filehdr$[60]
  Member filefields$[60]
  Member filekey$[60]
End Def 
!
Def Struct Key1 : Key "ID" + Unique
  Member filename$[20] : Key "filename"
  Member active$[1] : Key "active"
  Member version$[10] : Key "version"
End Def 
!
Def Struct Key2 : Key "group" + Unique
  Member groupname$[20] : Key "groupname"
  Member filename$[20] : Key "filename"
  Member active$[1] : Key "active"
  Member version$[10] : Key "version"
End Def 
!
Def Struct Key1seq : Key "ID" + Unique
  Member filename$[20] : Key "filename"
  Member version$[10] : Key "version"
  Member 1%,seq : Key "seq"
End Def 
!
Def Struct Key1seq2 : Key "ID" + Unique
  Member filename$[20] : Key "filename"
  Member version$[10] : Key "version"
  Member 1%,seq : Key "seq"
  Member 1%,keypart : Key "keypart"
End Def 
!
Def Struct FiledefHdr
  Member filename$[20] : Item "filename"
  Member groupname$[20] : Item "groupname"
  Member active$[1] : Item "active" !a=active,f=future,o=obsolete
  Member version$[10] : Item "version"
  Member desc$[60] : Item "desc"
  Member addeddate$[16] : Item "addeddate"
  Member addedby$[8] : Item "addedby"
  Member updateddate$[16] : Item "updateddate"
  Member updatedby$[8] : Item "updatedby"
  Member server$[20] : Item "server" !reserved
  Member db$[20] : Item "db" !reserved
  Member tablename$[20] : Item "tablename" !reserved
  Member sqloptions$[60] : Item "sqloptions" !reserved
  Member openas$[60] : Item "openas" !reserved
  Member bridge$[240] : Item "bridge" !reserved
End Def 
!
Def Struct FiledefFields
  Member filename$[20] : Item "filename"
  Member version$[10] : Item "version"
  Member 1%,seq : Item "seq"
  Member varname$[20] : Item "varname"
  Member shortdesc$[60] : Item "shortdesc"
  Member longdesc$[360] : Item "longdesc"
  Member 2%,position : Item "position"
  Member 2%,precision : Item "precision"
  Member droplist$[1] : Item "droplist"
  Member fieldlabel$[40] : Item "fieldlabel" !reserved
  Member active$[1] : Item "active" !reserved
  Member required$[1] : Item "required" !reserved
  Member default$[120] : Item "default" !reserved
  Member dbfieldname$[30] : Item "dbfieldname" !reserved
  Member align$[1] : Item "align" !reserved
  Member fillchar$[1] : Item "fillchar" !reserved
  Member opts$[240] : Item "opts" !reserved
End Def 
!
Def Struct FiledefKey
  Member filename$[20] : Item "filename"
  Member version$[10] : Item "version"
  Member 1%,seq : Item "seq"
  Member 1%,keypart : Item "keypart"
  Member desc$[120] : Item "desc"
  Member 2%,rcdposition : Item "rcdposition"
  Member 2%,precision : Item "precision"
  Member dbkeyname$[20] : Item "dbkeyname" !reserved
  Member dbkeypart$[20] : Item "dbkeypart" !reserved
  Member 2%,keypos : Item "keypos" !reserved
  Member prefix$[10] : Item "prefix" !reserved
  Member charset$[10] : Item "charset" !reserved
  Member opts$[240] : Item "opts" !reserved
  Member externalk$[60] : Item "externalk" !reserved
End Def 
!
!
!
Function createdir(dir$,type$)
  Dim 1%,found,itslen,ndir$[60]
  ndir$ = dir$
  itslen = Len(ndir$)
  If ndir$[itslen] = "/" Or ndir$[itslen] = "\\"
    ndir$[itslen] = ""
  End If 
  Call FindF(ndir$,found)
  If Not(found)
    ! We have to build the directory.
    Try 
      Build #0,ndir$ As "directory"
      Close #0
    Else 
      Print Msc$(2);" building ";ndir$;" directory for ";type$;" files!"
      Errclr 
      Error 10000
    End Try 
  End If 
End Function found ! CreateDir
!-----------------------------------------------------------------
!
External Sub backup(filedir$,backupdir$,Dataset$,filetype$)
  Dim 1%,foundit
  ! Backs up the dataset if it exists in Filesdir directory
  ! into "old"Filesdir directory after removing older backup copy
  !
  Dim Target$[93],Temp$[93]
  Target$ = backupdir$ + Dataset$
  If filetype$ = "F" Let Target$ = Target$ + ".dbf"
  Try 
    Kill Target$
  Else 
    If Spc(8) <> 42
      Print Msc$(2);" in clearing old ";Target$
      Error 10000
      Exit Sub 
    End If 
  End Try 
  Temp$ = Target$
  Target$ = filedir$ + Dataset$
  If filetype$ = "F" Let Target$ = Target$ + ".dbf"
  Call FindF(Target$,foundit)
  If Not(foundit) Exit Sub ! nothing to copy
  existed = createdir(backupdir$,"backup") !build dir if needed
  Target$ = Target$ + " " + Temp$
  Try 
    Duplicate Target$
    Print "Copying ";Target$
  Else 
    Print Msc$(2);" in making backup file ";Target$;" on line ";Spc(10)
    Error 10000
  End Try 
End Sub 
!
!
!
!    Name:     CreateFiledefHdr() - create a new blockhdr file
!    Synopsis: Call CreateFiledefHdr(E$,FileName$,Drvr$)
!              Creates a new Filedefhdr file using the Drvr$ class.
!    Return value:
!        Success: E$=""
!        Failure: E$<>"", Error 10000
!
External Sub CreateFiledefHdr(e$,filename$,drvr$)
  !
  Dim FiledefHdr. As FiledefHdr
  Dim Key1. As Key1,Key2. As Key2
  Dim tmp$[95]
  !
  Try 
    Chan = findchannel()
    Print "Building ";filename$
    tmp$ = filename$,"!"
    Build #Chan,tmp$ As drvr$
    Define Record #Chan;FiledefHdr.
    Add Index #Chan,1;Key1.
    Add Index #Chan,2;Key2.
    Close #Chan
  Else 
    If Spc(8) <> 10000
      Call suberr(e$,Spc(8),Spc(10),Msc$(2))
    End If 
    Error 10000
  End Try 
End Sub !CreateFiledefHdr
!
!    Name:     CreateFiledefFields() - create a new filedeffields file
!    Synopsis: Call CreateFiledefFields(E$,FileName$,Drvr$)
!              Creates a new filedeffields file using the Drvr$ class.
!    Return value:
!        Success: E$=""
!        Failure: E$<>"", Error 10000
!
External Sub CreateFiledefFields(e$,filename$,drvr$)
  !
  Dim FiledefFields. As FiledefFields
  Dim Key1. As Key1seq
  Dim tmp$[95]
  !
  Try 
    Chan = findchannel()
    Print "Building ";filename$
    tmp$ = filename$,"!"
    Build #Chan,tmp$ As drvr$
    Define Record #Chan;FiledefFields.
    Add Index #Chan,1;Key1.
    Close #Chan
  Else 
    If Spc(8) <> 10000
      Call suberr(e$,Spc(8),Spc(10),Msc$(2))
    End If 
    Error 10000
  End Try 
End Sub !CreateFiledefFields
!
!    Name:     CreateFiledefKey() - create a new filedefkey file
!    Synopsis: Call CreateFiledefKey(E$,FileName$,Drvr$)
!              Creates a new filedefkey file using the Drvr$ class.
!    Return value:
!        Success: E$=""
!        Failure: E$<>"", Error 10000
!
External Sub CreateFiledefKey(e$,filename$,drvr$)
  !
  Dim FiledefKey. As FiledefKey
  Dim Key1. As Key1seq2
  Dim tmp$[95]
  !
  Try 
    Chan = findchannel()
    Print "Building ";filename$
    tmp$ = filename$,"!"
    Build #Chan,tmp$ As drvr$
    Define Record #Chan;FiledefKey.
    Add Index #Chan,1;Key1.
    Close #Chan
  Else 
    If Spc(8) <> 10000
      Call suberr(e$,Spc(8),Spc(10),Msc$(2))
    End If 
    Error 10000
  End Try 
End Sub !CreateFiledefKey
!
!
External Function OpenSystemFile(e$)
  ! not used 
  ! returns channel #
  Dim path$[80],filename$[92]
  path$ = getprogrampath$() !current program path, where dxport resides
  syschan = findchannel()
  filename$ = path$,"dxsystem.txt"
  !open #syschan,filename$
End Function syschan
!
!
!
! **main procedure
!
!
Dim e$[500] !error
Try 
  Dim config. As config
  Dim filename$[93],backupdir$[80],ndir$[80]
  ! need to get filenames and drvr from dxsystem.txt
  !
  !read system file parameters
  Call ReadSystemFile(e$,config.)
  !
  !if any parameters not there, add defaults to dxsystem.txt
  !no, all the filenames are hardcoded,not stored in dxsystem.txt,only dir & type
  !
  !syschan=-1 !not open yet
  !if config.filehdr$=""
  ! if syschan<0 let syschan=opensystemfile(e$)
  ! config.filehdr$="dxblockhdr"
  ! write #syschan,-4;config.filehdr$,"=",config.filehdr$
  !end if 
  !if config.filefields$=""
  !if config.filekey$=""
  !
  !backup any existing files first
  ndir$ = config.filedir$
  If ndir$[Len(ndir$)] = "/" Or ndir$[Len(ndir$)] = "\\"
    ndir$[Len(ndir$)] = ""
  End If 
  pos1 = Pos(ndir$, = "/",-1)
  pos2 = Pos(ndir$, = "\\",-1)
  If pos1 = 0 Let pos1 = pos2
  backupdir$ = "old",config.filedir$
  If pos1 Let backupdir$ = config.filedir$[1,pos1],"old",config.filedir$[pos1 + 1]
  ! --- Call backup(config.filedir$,backupdir$,config.filehdr$,config.filetype$)
  Call backup(config.filedir$,backupdir$,config.filefields$,config.filetype$)
  ! --- Call backup(config.filedir$,backupdir$,config.filekey$,config.filetype$)
  !
  !build the files
  ! --- Call CreateFiledefHdr(e$,config.filedir$+config.filehdr$,config.drvr$)
  Call CreateFiledefFields(e$,config.filedir$ + config.filefields$,config.drvr$)
  ! --- Call CreateFiledefKey(e$,config.filedir$+config.filekey$,config.drvr$)
  If config.filetype$ = "F"
    ! --- filename$ = config.filedir$ + config.filehdr$ + ".dbf <666>"
    ! --- Modify filename$
    filename$ = config.filedir$ + config.filefields$ + ".dbf <666>"
    Modify filename$
    ! --- filename$ = config.filedir$ + config.filekey$ + ".dbf <666>"
    ! --- Modify filename$
  End If 
  !
  !
  Print "DynamicXport File Definitions database files created!"
Else 
  ! error routine
  If Spc(8) <> 10000
    Call suberr(e$,Spc(8),Spc(10),Msc$(2))
  End If 
  Print e$
End Try 
Chain ""
