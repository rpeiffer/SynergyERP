! 1.0 12/02/2009 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp355.dl4 src/serp355.src
!
! From the original code:
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 23, 2007  11:17:14
Rem /w2/papermaster/r2005//usr/acct/jcs/work/r2005/mx/mx355.src (univ2) [jcs] {35150}
Rem  Copyright (c) 2007 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX355 NON RASL LOCATION MAINT
Rem AUTHOR : DAVE D 01/26/93
Rem LAST UPDATE : 01/24/1994 - ADD RASL AS PRIMARY LOCATION FILE
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
include "src/inc/sql_prod.inc" ! SQL defintions
!
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"

!
! *declare additional dl4 intrinsic subs & functionsDeclare Intrinsic Sub InpBuf,String
! Option Default Dialect IRIS1
!
! *declare additional external libs & subs & functions
!External Lib "ubsfunc.dl4"
!Declare External Function openfile,pdate$,jdate$,Formatdate2$
External Lib "librasl.lib"
Declare External Sub chkwhrasl
!
External Lib "ubsfunc.dl4"
Declare External Function OpenMySQLMirror,PDate$,chkDteFrmt$ ! new function

dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[500],tmp1$[500],tmp2$[1000],b$[200]
b$=" ",b$
dim message$[150],webstr$[200]
!
! call dxopen()
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)

Dim 1%,WH,WHSE,PROD$[12]
Dim 1%,PL1[1],tmp_PL1[1]
Dim 2%,STK[2],SYS_DATE,CH_CNTRL,CH_WHI,PLDATE
Dim 3%,PL2[2]
Dim PLOC$[18],K2$[50],A$[156],F$[16],K3$[50]
Dim K33$[50],K4$[40],U5$[50],PASSWD$[20],BINM$[6]
Dim WHLOC_KEY$[8]
Dim 1%,WLA[7],2%,WHLOC_REC
Dim S_KEY$[42],DEF_LOT$[12],P0$[66]
Dim 1%,P1[1],P4
Dim 2%,S_REC,P2[2]
Dim 3%,P3[4]
Dim 1%,RASL[5],PFU1[20],STOCKING_UM$[4]
Dim PRWH_KEY$[14],2%,PRWH_REC,3%,WHMISC[6]
DIM K_WHLOC$[8],WL$[30],k_prodloc$[20]
Dim N1$[4],N2$[118],X$[20]
dim custom_customer$[30]

Read #1,3,172;SYS_DATE;
MAT  READ #1,115,60;CUSTOM_CUSTOMER$;  
CUSTOM_CUSTOMER$=RTRIM$(CUSTOM_CUSTOMER$)
! Mat Read #1,19,50;P9$;
! RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
! Mat Read #1,61,0;P61$;

! get default warehouse based on port defaults - not
! applicable in ERP
!
! Ropen #6,"cntrl/PRTDFLT"
! Ropen #7,"cntrl/USERPORT"
! Mat Read #7,Spc(6),10;A4; \ If Not(A4) Let A4 = Spc(6)
! Mat Read #6,A4,0;PD1;
! Close #6,#7
! If Not(PD1[2]) Let PD1[2] = 1 ! default warehouse
! PLOC$ = " ",PLOC$ \ PL1[0] = PD1[2] \ PL1[1] = 0
! If P9$[41,41] = "W" Call "CHKWRASL",PL1[0],RASL[]

! Gosub L_5500
! Print 'K0'; \ Window Open @23,10; Size 47,3; Using ""
! L_825: Input Len 1;@0,0;"(M)AINTAIN FILE (I)NQUIRE ONLY OR <CR> EXIT";U5$
! Call String(1,U5$)
! If U5$ = "" Window Close \ Print 'K1'; \ Goto OUTEND
! If U5$[1,1] = "M" Let INQ = 0
! If U5$[1,1] = "I" Let INQ = 99
! If U5$[1,1] <> "M" And U5$[1,1] <> "I" Goto L_825
! Window Close \ Print 'K1';
! If INQ
! 	Print @0,0;'BR BD';"INQUIRY MODE";'ED ER';
! Else
! 	Print @0,0;'BR BD';"MAINTENANCE MODE";'ED ER';
! End If

INQ = 0 \ if action2$ = "1" INQ=99
! call dxsave(0,"tmp/s355in.txt!")
! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
! F$ = COID Using "CNTRL#"
For I = 2 To 11
	Read F
	If F <> -1
		Read #1,88,Abs(F);F$;
		If INQ
			Ropen #I,F$
		else
			If F >= 0 Open #I,F$
			If F < 0 Ropen #I,F$
		end if
	end if
Next I
Data "1792","208","-2736","-2768","-1","-1","1744","-1","-1728","2528"
! #2-Product, #3-Prodloc,#4-WHLoc (RASL),#5-WHInfo
ch_cntrl = 1
ch_prodloc = 3
ch_whi = 5
!
sqlChan = OpenMySQLMirror(e$)
!
Returnstatus=1
message$="OK"
if action1$ <> "GETWHLIST"
	call dxget("ProductID", tmp$) \ tmp$ = ucase$(tmp$)
	ploc$[1,12] = tmp$,b$
	gosub ReadProduct
	if returnstatus=0 goto LEDone
	call dxget("WarehouseID", tmp$) \ PL1[0] = tmp$
	If PL1[0] <= 0 Or PL1[0] > 99
		returnstatus=0
		message$ = "Invalid warehouse entered!" !\ error 10000
		goto LEDone
	end if
	gosub ReadProductWarehouse
	Call ChkWhRasl(e$,intCO,ch_cntrl,ch_whi,PL1[0],RASL[])
	if RASL
		Gosub RASLCheckPrimary
		if INQ and not(RASLPriOnFile)
				message$ = "RASL primary location not found."
				returnstatus=0 ! Error 10000
				goto LEDone
		end if
	else
		Gosub GetBinMask
	end if
	if action1$ <> "GETLOCLIST"
		call dxget("LocationID", tmp$) \ tmp$ = ucase$(tmp$)
		PLOC$[13,18] = tmp$,b$
		IF RASL
			gosub ReadRASLLoc
			! if this is RASL and it's been defined - make sure
			! the entered location matches what we have on file
			if RASLPriOnFile
				if K3$[15,20] <> PLOC$[13,18]
					message$ = "RASL primary location entered does not match location on file!"
					returnstatus=0 ! error 10000
					goto LEDone
				end if
				
			else ! new record
				! RASL and no primary has been defined -
				! make sure location requested for primary
				! exists
				if WHLOC_REC = -1
					! new recrord - invalid loc
					message$ = "RASL warehouse location not defined!"
					returnstatus=0 ! error 10000
					goto LEDone
				end if
			end if
		end if
		! OK - got all the pieces.  find the record.  if not there
		! it must be a new one
		If not(RASL)
			call dxget("BLOVRRD",tmp$)
			blovrrd=0 \ if UCase$(rtrim$(tmp$))="Y" let blovrrd=1
			Gosub VerifyLocAgainstMask
		end if
		Gosub ReadProdloc
	end if
end if


!
! get wh list
!
select case action1$
	case "GETWHLIST"  !			doc=Location Edit - GETWHLIST - 355.doc
		gosub BuildWHDroplist
		! status section
		!Message$="OK"
	case "GETLOCLIST" !			doc=Location Edit - GETLOCLIST - 355.doc
		gosub BuildLocDroplist
		! status section
		!Message$="OK"
	case "GETDATA" !			doc=Location Edit - GETDATA - 355.doc
		gosub LoadData
		! status section
		!Message$=""
	case "SUBMITDATA"   !		doc=Location Edit - SUBMITDATA - 355.doc
		if not(INQ)
			gosub UnloadDataAndSave
			! status section
			if returnstatus=1 let Message$="Record updated."
		else
			message$ = "No update allowed on inquiry!"
			returnstatus=0 ! error 10000
			goto LEDone
		end if
	case "DELETE" !				doc=Location Edit - DELETE - 355.doc
		if not(INQ)
			gosub DeleteData
			! status section
			if returnstatus=1 let Message$="Record deleted."
		else
			message$ = "No delete allowed on inquiry!"
			returnstatus=0 ! error 10000
			goto LEDone
		end if
	case else
		message$ = "Unknown action1: "+action1$ !\ error 10000
		returnstatus=0
		goto LEDone
endselect
! message should be set.  if we got here - we've got a good status
! ReturnStatus=1
LEDone: ! done
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
goto OutEnd:


! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************

!----------------------------------------------------------------------------
! build initial drop list of existing warehouses
!----------------------------------------------------------------------------
BuildWHDroplist: !
	! Add section header and column defs
	tmp$=bsdel$+"WHDroplist"+fdel$+rdel$
	tmp$=tmp$+"ID"+fdel$+"Desc"+fdel$+rdel$
	call addToStr(e$,rstr$,tmp$)
	for i = 1 to 99
		Mat Read #ch_whi,i-1;N1$
		Mat Read #ch_whi,i-1,4;N2$
		If N1$ > "    " ! if there is a WH desginator we have a defined record
			tmp$=str$(i)+fdel$+str$(i)+" - "+rtrim$(n1$)+": "+rtrim$(n2$[1,30])+fdel$+rdel$
			call addToStr(e$, rstr$, tmp$)
		end if
	next i
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! build drop list of locations
!----------------------------------------------------------------------------
BuildLocDroplist: !
	! Add section header and column defs
	tmp$=bsdel$+"LocDroplist"+fdel$+rdel$
	tmp$=tmp$+"ID"+fdel$+"Desc"+fdel$+"DATE"+fdel$
	!if Not(Rasl) ! task 30011
	!	tmp$=tmp$+"DATE"+fdel$
	!Else
	!	tmp$=tmp$+"NotUsed"+fdel$
	!Endif
	tmp$=tmp$+rdel$
	call addToStr(e$,rstr$,tmp$)
	if RASL
		! this file is for primary location only
		if RASLPriOnFile
			! drop list is ONLY existing record - already on file
			tmp$=K3$[15,20]+fdel$+k3$[15,20]+fdel$
			x$="" \ if PLDate let x$=PDate$(PLDate)
			let tmp$=tmp$+RTrim$(X$)+fdel$
			call addToStr(e$,rstr$,tmp$+rdel$)
		else
			! no primary defined
			! drop list is all defined locations
			K_WHLOC$ = PL1[0] using "##"
			do
				Search #4,3,1;K_WHLOC$,V1,E ! \ if E>2 Error 42
				if E exit do
				if pl1[0] <> val(K_WHLOC$[1,2]) exit do
				! skip wh control records
				If K_WHLOC$[5,5] <> "@" and K_WHLOC$[6,6] <> "@"
					Read #4,V1,10;WL$; \ wl$ = ltrim$(wl$)
					tmp$ = k_whloc$[3,8]+fdel$+ltrim$(k_whloc$[3,8])
					if wl$ <> "" tmp$ = tmp$+" - "+wl$
					tmp$=tmp$+fdel$
					ploc$[13,18]=wl$[3,8] ! date is in prodloc!
					gosub readprodloc
					x$="" \ if pldate let x$=PDate$(plDate)
					tmp$=tmp$+RTrim$(X$)+fdel$+rdel$
					call addToStr(e$, rstr$, tmp$)
				end if
			loop
		end if
	else
		! non-rasl locations - get any existing defs
		k_prodloc$ = PLOC$[1,12],PL1[0] using "##"
		do
			Search #ch_prodloc,3,1;k_prodloc$,V1,E ! \ If E>2 Error 42
			If E exit do
			If k_prodloc$[1,12] <> PLOC$[1,12] exit do
			If val(k_prodloc$[13,14]) <> PL1[0] exit do
			Mat Read #ch_prodloc,V1,18;tmp_PL1;
			mat read #ch_prodloc,V1,48;PLDate;
			tmp$=k_prodloc$[15,20]+fdel$+ltrim$(k_prodloc$[15,20])
			if tmp_pl1[1] tmp$=tmp$+" P"
			tmp$=tmp$+fdel$
			x$="" \ if pldate>0 let x$=PDate$(pldate)
			tmp$=tmp$+RTrim$(x$)+fdel$
			tmp$=tmp$+rdel$
			call addToStr(e$, rstr$, tmp$)
		loop

	end if
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! Load data up on "GETDATA" call
!----------------------------------------------------------------------------
LoadData: !
	!
	! add section to indicate RASL Flag
	!
	tmp$=bsdel$+"RASLFlag"+fdel$+rdel$+"RASLFlag"+fdel$+rdel$
	tmp$=tmp$+str$(RASL)+fdel$+rdel$+esdel$
	call addToStr(e$, rstr$, tmp$)
	!
	! load header portion
	!
	tmp$=bsdel$+"TableData"+fdel$+rdel$
	tmp$=tmp$+"ProductID"+fdel$+"WarehouseID"+fdel$+"LocationID"+fdel$
	tmp$=tmp$+"ProductDesc"+fdel$+"ProductDesc2"+fdel$
	tmp$=tmp$+"PermanentFlag"+fdel$+"ProdTI"+fdel$+"ProdHI"+fdel$
	tmp$=tmp$+"MaxPallets"+fdel$+"ReplenPoint"+fdel$+"ReplenCapacity"+fdel$
	tmp$=tmp$+"ProdHeight"+fdel$+"ProdWidth"+fdel$+"ProdLength"+fdel$
	tmp$=tmp$+"StockUM"+fdel$+"ProdWHFlag"+fdel$+"LocWarning"+fdel$
	tmp$=tmp$+"LocDate"+fdel$
	call addToStr(e$,rstr$,tmp$+rdel$)
	!
	! load data portion
	!
	tmp$=PLOC$[1,12]+fdel$+str$(PL1[0])+fdel$+PLOC$[13,18]+fdel$
	tmp$=tmp$+a$[9,38]+fdel$+a$[63,92]+fdel$+str$(pl1[1])+fdel$
	tmp$=tmp$+str$(WHMISC[4])+fdel$+str$(WHMISC[5])+fdel$
	tmp$=tmp$+str$(PL2[0])+fdel$+str$(PL2[1])+fdel$+str$(PL2[2])+fdel$
	tmp$=tmp$+str$(STK[0])+fdel$+str$(STK[1])+fdel$+str$(STK[2])+fdel$
	tmp$=tmp$+STOCKING_UM$+fdel$
	if PRWH_REC = -1
		tmp$=tmp$+"N"+fdel$
	else
		tmp$=tmp$+"Y"+fdel$
	end if
	if RASL AND WHLOC_REC = -1
		tmp$=tmp$+"WARNING! RASL Warehouse location not defined!"+fdel$
	else
		tmp$=tmp$+fdel$
	end if
	x2=pldate;x$=" ",x$
	if not(x2)
		tmp1$=tim(4) using "&&&&&&"
		x$[1,6]=tmp1$[5,6]+tmp1$[1,4] \	x2=x$
	endif
	x$=PDate$(x2)
	tmp$=tmp$+Trim$(x$)+fdel$

	call addToStr(e$,rstr$,tmp$+rdel$+esdel$)
Return

!----------------------------------------------------------------------------
! Unload data and save on "SUBMITDATA" call
!----------------------------------------------------------------------------
UnloadDataAndSave: !
	if not(RASL)
		call dxget("PermanentFlag", tmp$) \ PL1[1] = tmp$
	end if
	if PRWH_REC <> -1
		call dxget("ProdTI",tmp$) \ WHMISC[4] = tmp$
		call dxget("ProdHI",tmp$) \ WHMISC[5] = tmp$
		Write #8,PRWH_REC,824;WHMISC[4];
		Write #8,PRWH_REC,830;WHMISC[5];
	end if
	if RASL
		call dxget("MaxPallets",tmp$) \ PL2[0] = tmp$
		call dxget("ReplenPoint",tmp$) \ PL2[1] = tmp$
		call dxget("ReplenCapacity",tmp$) \ PL2[2] = tmp$
	end if
	! these fields are located in the
	! product file
	call dxget("ProdHeight",tmp$) \ STK[0] = tmp$
	call dxget("ProdWidth",tmp$) \ STK[1] = tmp$
	call dxget("ProdLength",tmp$) \ STK[2] = tmp$
	call dxget("LocDate",tmp$)
	tmp1$=chkdtefrmt$(e$,tmp$) ! make sure MM/DD/YYYY
	let x$=tmp1$[9,10]+tmp1$[1,2]+tmp1$[4,5] ! to YYMMDD
	let PLDate=x$
	if pldate<101 or pldate>991231 or fra(pldate) let pldate=0
	Mat Write #2,R2,1030;STK;
	! inserting SQL update here
	if sqlChan >= 0 ! MySQL enabled and channel opened
		PRC=2
		e = prod_UpdateSQLFromDL4(e$, intCo, K2$, sqlChan, PRC)
		if e <> 1 ! returns the number of records add/updated/deleted
			error 11000 ! search error
		end if
	end if
	! done with SQL update
	if not(EDIT_)
		! new record - create
		E = 2
		Search #3,1,0;K3$,R3,E 
		If E ! Error 42
			returnstatus=0
			message$="Search Error "+Str$(E)+" getting new record"
			goto LSDone
		Endif
		Search #3,4,1;K3$,R3,E 
		If E ! Error 42
			returnstatus=0
			message$="Search Error "+Str$(E)+" adding new Index 1"
			goto LSDone
		Endif
		K33$ = " ",K33$
		K33$[1,2] = K3$[13,14]
		K33$[3,8] = K3$[15,20]
		K33$[9,20] = K3$[1,12]
		Search #3,4,2;K33$,R3,E
		If E ! Error 42
			returnstatus=0
			message$="Search Error "+Str$(E)+" adding new Index 2"
			goto LSdone
		Endif
		Mat Write #3,R3,0;PLOC$;
	end if
	Mat Write #3,R3,18;PL1 \ Mat Write #3,R3,22;PL2;
	Write #3,r3,48;pldate;
	if not(EDIT_) Gosub CreateSprodlot
	LSDone: ! finished
Return

!----------------------------------------------------------------------------
! Delete data
!----------------------------------------------------------------------------
DeleteData: !
	If Not(EDIT_) Return
	if not(RASL) ! if rasl it is primary?
		call dxget("PermanentFlag", tmp$) \ PL1[1] = tmp$
	end if
	If PL1[1] Gosub DeletePermPassword
	if returnstatus=0 goto DLDone ! fail password
	
	K33$ = " ",K33$
	K33$[1,2] = K3$[13,14]
	K33$[3,8] = K3$[15,20]
	K33$[9,20] = K3$[1,12]
	Unlock #3
	Search #3,5,1;K3$,R3,E
	If E ! Error 42
			returnstatus=0
			message$="Search Error "+Str$(E)+" deleting new Index 1"
			goto DLDone
	Endif
	Search #3,5,2;K33$,R3,E 
	If E ! Error 42
			returnstatus=0
			message$="Search Error "+Str$(E)+" deleting new Index 2"
			goto DLDone
	Endif
	E = 3
	Search #3,1,0;K3$,R3,E
	If E ! Error 42
			returnstatus=0
			message$="Search Error "+Str$(E)+" returning record"+Str$(R3)
	Endif
	DLDone: ! finished
Return

!----------------------------------------------------------------------------
! Verify permanent location delete password
!----------------------------------------------------------------------------
DeletePermPassword: !
	call DxGet("DeletePassword", tmp$) \ tmp$=tmp$,b$
	Mat Read #1,2,24;PASSWD$;
	If tmp$[1,20] <> PASSWD$[1,20]
		message$ = "Location not deleted.  Invalid password entered."
		returnstatus=0 ! error 10000
	end if
Return

!----------------------------------------------------------------------------
! Read product rec
!----------------------------------------------------------------------------
ReadProduct: !
	K2$ = " ",K2$
	K2$[1,12] = PLOC$[1,12]
	Search #2,2,1;K2$,R2,E ! \ if E>1 error 42
	If E
		message$ = "Product Not On File!"
		returnstatus=0 ! error 10000
		goto RPDone
	End If
	Mat Read #2,R2,0;A$;
	Mat Read #2,R2,512;PFU1;
	Mat Read #2,R2,1030;STK;
	STOCKING_UM$ = "????"
	If PFU1[8] = -1 Let STOCKING_UM$ = "CWT "
	If PFU1[8] = -3 Let STOCKING_UM$ = "LB  "
	If PFU1[8] > 0 Read #10,PFU1[8],10;STOCKING_UM$;
	! Print @30,4;'CL';@33,5;A$[9,38];@33,6;A$[63,92];
	RPDone: ! finished
Return

!----------------------------------------------------------------------------
! Read bin mask (used for non-RASL)
!----------------------------------------------------------------------------
GetBinMask: !
	R5 = PL1[0] - 1
	Mat Read #5,R5,862;BINM$;
	For X = 1 To 6
		If BINM$[X,X] = "" Or BINM$[X,X] = " " Let BINM$[X,X] = "A"
	Next X
	! Print @30,9;'CL';"MASK: ";BINM$;
Return

!----------------------------------------------------------------------------
! Verify bin location against mask
!----------------------------------------------------------------------------
VerifyLocAgainstMask: !
	tmp$ = PLOC$[13,18]
	If tmp$[1,5] = "STOCK" Return 1
	If INQ Or BINM$ = "AAAAAA" Return 1
	if blovrrd return 1 ! already checked and whatever entered is ok
	For X = 1 To 6
		If BINM$[X,X] = "" Or BINM$[X,X] = " " Let BINM$[X,X] = "A"
		select case BINM$[X,X]
			case "A"
				! everything good
			case "L"
				If tmp$[X,X] <= "@" OR tmp$[X,X] >= "["
					message$ = "Location does not match bin mask!"
					returnstatus=2 ! error 10000
				end if
			case "N"
				If tmp$[X,X] <= "/" OR tmp$[X,X] >= ":"
					message$ = "Location does not match bin mask!"
					returnstatus=2 ! error 10000
				end if
		endselect
	Next X
Return

!----------------------------------------------------------------------------
! Read Product Warehouse record
!----------------------------------------------------------------------------
ReadProductWarehouse: Rem
	PRWH_REC = -1
	PRWH_KEY$ = PLOC$[1,12],PL1[0] Using "##"
	Search #8,2,1;PRWH_KEY$,PRWH_REC,E ! \ If E > 1 Error 42
	If E Return
	Mat Read #8,PRWH_REC,800;WHMISC;
! 	If RASL
! 		Print @16,13;WHMISC[4] Using "##";"  ";STOCKING_UM$;"/TIER"
! 		Print @16,14;WHMISC[5] Using "##";"  TIERS/SKID"
! 	Else
! 		Print @16,12;WHMISC[4] Using "##";"  ";STOCKING_UM$;"/TIER"
! 		Print @16,13;WHMISC[5] Using "##";"  TIERS/SKID"
! 	End If
Return

!----------------------------------------------------------------------------
! RASL - Has primary been defined?
!----------------------------------------------------------------------------
RASLCheckPrimary: !
	RASLPriOnFile = 0
	K3$ = " ",K3$;K3$[1,12] = PLOC$[1,12];K3$[13] = PL1[0] Using "##"
	Search #3,2,1;K3$,R3,E ! \ If E>1 Error 42
	If E Return
	RASLPriOnFile = 1
	mat read #3,r3,48;pldate;
!	EDIT_ = 99
!	Print @17,11;"Y";
!	Gosub ReadRASLLoc
! 	If RASL And PL2 Print @16,12;"          ";@16,12;PL2;
! 	If RASL And Not(PL2) Print @17,12;"          ";@17,12;"NO LIMIT";
! 	If RASL Print @16,15;PL2[1] Using "######";
! 	If RASL Print @16,16;PL2[2] Using "######";
! 	PROD$[1,12] = PLOC$[1,12];WHSE = PL1[0];WH = WHSE
! 	Print @17,9;PLOC$[13,18];
	E = 0
Return

!----------------------------------------------------------------------------
! RASL - read RASL location record associated with primary
!----------------------------------------------------------------------------
ReadRASLLoc: !
	WHLOC_REC = -1
	WLA[6] = 1
	If Not(RASL) Return
	WHLOC_KEY$ = PL1[0] Using "##",PLOC$[13,18]
	Search #4,2,1;WHLOC_KEY$,WHLOC_REC,E ! \ If E>1 Error 42
	If E Return
	Mat Read #4,WHLOC_REC,76;WLA;
Return

!----------------------------------------------------------------------------
! RASL - Read the PRODLOC record
!----------------------------------------------------------------------------
ReadProdloc: !
	K3$ = " ",K3$
	K3$[1,12] = PLOC$[1,12]
	K3$[13,14] = PL1[0] Using "##"
	K3$[15,20] = PLOC$[13,18]
	Search #3,2,1;K3$,R3,E ! \ If E>1 Error 42
	If Not(E)
		EDIT_ = 99
		Mat Read #3,R3,18;PL1 \ Mat Read #3,R3,22;PL2
		READ #3,R3,48;PLDATE
	Else
		EDIT_ = 0
		! initialize
		PL1[1] = 0;PLDATE=0
		if custom_customer$="JPAPER"
			LET PL1[1]=1
		ENDIF
		for i = 0 to 2
			pl2[i] = 0
		next i
	End If
	If RASL Let PL1[1] = 1 ! force permanent flag
Return

!----------------------------------------------------------------------------
! RASL - Create new sprodlot record for RASL primary (for new records only)
!----------------------------------------------------------------------------
CreateSprodlot: !
	If Not(RASL) Return
	DEF_LOT$ = " ",DEF_LOT$
	DEF_LOT$[1,7] = "STOCK",PL1[0] Using "&&"
	S_KEY$ = PL1[0] Using "##",PLOC$[13,18],PLOC$[1,12],DEF_LOT$,"          "
	Search #11,2,3;S_KEY$,S_REC,E ! \ If E>1 Error 42
	If Not(E) Return
	E = 2 \ Search #11,1,0;S_KEY$,S_REC,E ! \ If E Error 42
	S_KEY$ = DEF_LOT$,"          ",PL1[0] Using "##",PLOC$[13,18],PLOC$[1,12]
	Search #11,4,1;S_KEY$,S_REC,E ! \ If E Error 42
	S_KEY$ = PLOC$[1,12],PL1[0] Using "##",PLOC$[13,18],DEF_LOT$,"          "
	Search #11,4,2;S_KEY$,S_REC,E ! \ If E Error 42
	S_KEY$ = PL1[0] Using "##",PLOC$[13,18],PLOC$[1,12],DEF_LOT$,"          "
	Search #11,4,3;S_KEY$,S_REC,E ! \ If E Error 42
	S_KEY$ = PLOC$[1,12],PL1[0] Using "##",DEF_LOT$,"          ",PLOC$[13,18]
	Search #11,4,4;S_KEY$,S_REC,E ! \ If E Error 42
	P0$ = " ",P0$
	P0$[1,12] = PLOC$[1,12]
	P0$[13,24] = DEF_LOT$
	P0$[25,46] = "PRIMARY ASSIGN - MX355"
	Write #11,S_REC;P0$
	P1[0] = PL1[0] \ P1[1] = 3
	Mat Write #11,S_REC,66;P1
	P2[0] = SYS_DATE \ P2[1] = 0 \ P2[2] = 0
	Mat Write #11,S_REC,70;P2
	P3[0] = 0 \ P3[1] = 0 \ P3[2] = 0 \ P3[3] = 0 \ P3[4] = 0
	P4 = 1
	Mat Write #11,S_REC,82;P3
	Write #11,S_REC,112;P4
	Mat Write #11,S_REC,114;PLOC$[13,18]
	Write #11,S_REC,120;P3[1];
Return


! L_2000: Rem
! ! reset product location, WH and permanent/primary key
! PLOC$ = " ",PLOC$ \ PL1[0] = PD1[2] \ PL1[1] = 0
! L_2010: PL1[1] = 0;PL2[0] = 0;PL2[1] = 0
! 
! Gosub L_3000 ! get the product
! Gosub L_6000 \ Goto L_2010 ! read the product
! Gosub L_3060 ! get the warehouse
! Gosub READ_PRWH
! 
! If RASL
! 	Gosub L_2400
! 	If Not(E) Goto L_2500
! End If
! 
! If RASL And INQ Let J7$ = "Location Not Found" \ Gosub L_7600 \ Goto L_2010
! 
! Gosub L_3200
! 
! If F9 Goto L_2010
! 
! L_2040: K3$ = " ",K3$
! K3$[1,12] = PLOC$[1,12]
! K3$[13,14] = PL1[0] Using "##"
! K3$[15,20] = PLOC$[13,18]
! Search #3,2,1;K3$,R3,E \ If E > 1 Gosub ERR_SEARCH
! If Not(E)
! 	EDIT_ = 99
! 	Mat Read #3,R3,18;PL1 \ Mat Read #3,R3,22;PL2
! Else
! 	EDIT_ = 0
! End If
! 
! Gosub READ_WHLOC
! 
! If RASL Let PL1[1] = 1
! 
! If PL1[1] = 1 Print @17,11;"Y"; Else Print @17,11;"N";
! 
! If RASL And PL2[0] Print @16,12;"          ";@16,12;PL2[0];
! If RASL And Not(PL2[0]) Print @17,12;"          ";@17,12;"NO LIMIT";
! If RASL Print @16,15;PL2[1] Using "######";
! If RASL Print @16,16;PL2[2] Using "######";
! 
! Goto L_2500
! 
! L_2400: Rem RASL BRING UP ITEM/WHSE
! 	K3$ = " ",K3$;K3$[1,12] = PLOC$[1,12];K3$[13] = PL1[0] Using "##"
! 	Search #3,2,1;K3$,R3,E \ If E > 1 Gosub ERR_SEARCH
! 	If E = 1 Return
! 	PLOC$[1,12] = K3$[1,12];PLOC$[13,18] = K3$[15,20]
! 	PL1[0] = K3$[13,14];PL1[1] = 1
! 	Mat Read #3,R3,22;PL2
! 	EDIT_ = 99
! 	Print @17,11;"Y";
! 	Gosub READ_WHLOC
! 	If RASL And PL2 Print @16,12;"          ";@16,12;PL2;
! 	If RASL And Not(PL2) Print @17,12;"          ";@17,12;"NO LIMIT";
! 	If RASL Print @16,15;PL2[1] Using "######";
! 	If RASL Print @16,16;PL2[2] Using "######";
! 	PROD$[1,12] = PLOC$[1,12];WHSE = PL1[0];WH = WHSE
! 	Print @17,9;PLOC$[13,18];
! 	E = 0
! Return
! 
! L_2500: Rem EDIT
! 	If EDIT_ Print @5,21;'BR BD';"LOCATION ON FILE ";'ER ED'; Else Print @5,20;'CL';
! 	If Not(INQ)
! 		Print @5,22;"Enter Field #, ";
! 		Print "DELETE or <CR> to continue";'CL'; \ Print @47,22;
! 	End If
! 	If INQ Print @5,22;"Enter <CR> to continue";'CL'; \ Print @28,22;
! 	Input ""U5$
! 	If Not(INQ) If U5$[1,6] = "DELETE" Gosub L_4000 \ Goto L_2000
! 	If U5$ = "" If EDIT_ Let PLOC$[13,18] = "      " \ Goto L_2010
! 	If Not(INQ) If U5$ = "" If Not(EDIT_) Gosub L_4500 \ PLOC$[13,18] = "      " \ Goto L_2010
! 	U5 = U5$
! 	If RASL And U5 < 2 Let U5 = 0
! 	MAX_IN = 0
! 	If Not(RASL) Let MAX_IN = 3
! 	If RASL Let MAX_IN = 4
! 	If RASL Let MAX_IN = 5
! 	If RASL Let MAX_IN = 6
! 	If INQ Or U5 <= 0 Or (U5 > MAX_IN And (U5 < 7 Or U5 > 9))
! 		J7$ = "Invalid Selection!" \ Gosub L_7600 \ Goto L_2500
! 	End If
! 	Print @0,22;'CL';
! 	If U5 = 1 Gosub L_3300
! 	If U5 = 2
! 		If RASL Gosub L_3400
! 		If Not(RASL) Gosub L_3500
! 	End If
! 	If U5 = 3
! 		If RASL Gosub L_3500
! 		If Not(RASL) Gosub L_3600
! 	End If
! 	If U5 = 4 Gosub L_3600
! 	If U5 = 5 Gosub L_3700
! 	If U5 = 6 Gosub L_3800
! 	If U5 = 7 Gosub GET_HEIGHT
! 	If U5 = 8 Gosub GET_WIDTH
! 	If U5 = 9 Gosub GET_LENGTH
! Goto L_2040
! 
! L_3000: Rem ENTER PRODUCT
! 	Print @16,5;'CL';@16,6;'CL';@16,7;'CL';@16,9;'CL';
! 	Print @17,11;" ";@56,11;"     ";@16,12;"                     ";@56,12;"     ";
! 	Print @16,13;"              ";@56,13;"     ";
! 	Print @16,14;'CL';@16,15;'CL';@16,16;'CL';@0,20;'CE'
! 	J5$ = "Enter a Valid Item Code, 'EXIT' to return to menu"
! 	J0$ = "2 003017 5" \ J1$ = PLOC$[1,12]
! 	Gosub L_7000 \ If J4$ = "EXIT" Goto OUTEND
! 	If J4$ = "" Let J4$ = J1$ \ If J4$ = "" Or J4$[1,1] = " " Goto OUTEND
! 	Gosub L_6600 \ Goto L_3000
! 	PLOC$[1,12] = J$
! Return
! 
! L_3060: Rem ENTER WAREHOUSE
! 	J0$ = "3000021707"
! 	J5$ = "Enter the Warehouse Number"
! 	J1 = PL1[0]
! 	Gosub L_7000
! 	If J1 <= 0 Or J1 > 99 Let J7$ = "Invalid Warehouse" \ Gosub L_7600 \ Goto L_3060
! 	PL1[0] = J1
! 	! If P9$[41,41] = "W" Call "CHKWRASL",PL1[0],RASL[]
! 	Call ChkWhRasl(e$,intCO,ch_cntrl,ch_whi,PL1[0],RASL[])
! 	Gosub L_5550
! 	If Not(RASL) Gosub L_6200
! 	Gosub L_6080
! Return
! 
! L_3200: Rem ENTER LOCATION
! 	Print @18,11;"      ";
! 	PROD$[1,12] = PLOC$[1,12];WHSE = PL1[0];WH = WHSE
! 	! If P9$[41,41] = "W" Call "CHKWRASL",WHSE,RASL[]
! 	Call ChkWhRasl(e$,intCO,ch_cntrl,ch_whi,WHSE,RASL[])
! 	L_3210: J0$ = "2 000617 9" \ J1$ = ""
! 	If Not(RASL) Let J5$ = "Enter Location, =:Selected locations, <CR> to end"
! 	If RASL Let J5$ = "Enter Location, -:Location selection, <CR> to end"
! 	J1$ = PLOC$[13,18]
! 	If INQ
! 		J$[1,1] = "="
! 	Else
! 		Gosub L_7000
! 		F9 = 0
! 		If J$[1,6] = "      " Let F9 = 99 \ Return
! 	End If
! 	If RASL And J$[1,1] = "-" Gosub L_6800 \ Goto L_3210
! 	If Not(RASL) And J$[1,1] = "=" Gosub L_6700
! 
! 	If F9 Goto L_3290
! 	If Not(RASL) Gosub L_8000 \ Goto L_3210
! 	PLOC$[13,18] = J$
! 	If RASL
! 		Gosub L_4200 \ Goto L_3200
! 	End If
! L_3290: Return
! 
! L_3300: Rem RERMANENT LOCATION / PRIMARY LOCATION
! 	J0$ = "6000021711"
! 	If Not(RASL) Let J5$ = "Enter Y If This is a Permanent Location for This Product"
! 	If RASL Let J5$ = "Enter Y if this is the primary location to store INVENTORY"
! 	J1 = PL1[1]
! 	Gosub L_7000
! 	PL1[1] = J1
! 	If EDIT_ Mat Write #3,R3,18;PL1
! Return
! 
! L_3400: Rem MAX PALLETS
! 	J0$ = "3000101612"
! 	J5$ = "Enter Maximum Number of Pallets for This Location or 0 for No Limit"
! 	J1 = PL2[0]
! 	Gosub L_7000
! 	PL2[0] = J1
! 	If EDIT_ Mat Write #3,R3,22;PL2
! Return
! 
! L_3500: Rem PRODUCT TI
! 	If PRWH_REC = -1
! 		Call "errmsg","Product warehouse record not on file!"
! 		Return
! 	End If
! 	If RASL Let J0$ = "3000021613"
! 	If Not(RASL) Let J0$ = "3000021612"
! 	J5$ = "Enter # of stocking units per tier on skid (product TI)"
! 	J1 = WHMISC[4]
! 	Gosub L_7000
! 	WHMISC[4] = J1
! 	Write #8,PRWH_REC,824;WHMISC[4];
! Return
! 
! L_3600: Rem PRODUCT HI
! 	If PRWH_REC = -1
! 		Call "errmsg","Product warehouse record not on file!"
! 		Return
! 	End If
! 	If RASL Let J0$ = "3000021614"
! 	If Not(RASL) Let J0$ = "3000021613"
! 	J5$ = "Enter # of tiers on skid (product HI)"
! 	J1 = WHMISC[5]
! 	Gosub L_7000
! 	WHMISC[5] = J1
! 	Write #8,PRWH_REC,830;WHMISC[5];
! Return
! 
! L_3700: Rem REPLEN POINT
! 	J0$ = "3000061615"
! 	J5$ = "If stock in this bin drops to this point, it needs replenishment."
! 	J1 = PL2[1]
! 	Gosub L_7000
! 	PL2[1] = J1
! 	If EDIT_ Mat Write #3,R3,22;PL2
! Return
! 
! L_3800: Rem REPLEN CAPACITY
! 	J0$ = "3000061616"
! 	J5$ = "What is the replenishment (bin) capacity for this bin."
! 	J1 = PL2[2]
! 	Gosub L_7000
! 	PL2[2] = J1
! 	If EDIT_ Mat Write #3,R3,22;PL2
! Return
! 
! GET_HEIGHT: Rem
! 	J0$ = "3200 55611"
! 	J5$ = "Enter product height."
! 	J1 = STK[0]
! 	Gosub L_7000
! 	STK[0] = J1
! 	Write #2,R2,1030;STK[0];
! Return
! 
! GET_WIDTH: Rem
! 	J0$ = "3200 55612"
! 	J5$ = "Enter product width."
! 	J1 = STK[1]
! 	Gosub L_7000
! 	STK[1] = J1
! 	Write #2,R2,1034;STK[1];
! Return
! 
! GET_LENGTH: Rem
! 	J0$ = "3200 55613"
! 	J5$ = "Enter product width."
! 	J1 = STK[2]
! 	Gosub L_7000
! 	STK[2] = J1
! 	Write #2,R2,1038;STK[2];
! Return
! 
! L_4000: Rem DELETE
! 	If Not(EDIT_) Return
! 	If PL1[1] Gosub L_4100 \ Return
! 	K33$ = " ",K33$
! 	K33$[1,2] = K3$[13,14]
! 	K33$[3,8] = K3$[15,20]
! 	K33$[9,20] = K3$[1,12]
! 	Unlock #3
! 	Search #3,5,1;K3$,R3,E
! 	If E Gosub ERR_SEARCH
! 	Search #3,5,2;K33$,R3,E
! 	If E Gosub ERR_SEARCH
! 	E = 3
! 	Search #3,1,0;K3$,R3,E
! 	If E Gosub ERR_SEARCH
! Return
! 
! L_4100: Rem permanet location delete password
! 	Mat Read #1,2,24;PASSWD$;
! 	Print @5,22;'CE RB';"ENTER PERMANENT LOCATION DELETE PASSWORD:";
! 	J0$ = "2 00204722" \ J1$ = "";J5$ = ""
! 	Gosub L_7000
! 	If J$[1,20] = PASSWD$[1,20] Return 1
! 	J7$ = "Location NOT Deleted!!!" \ Gosub L_7600
! Return
! 
! L_4200: Rem RASL CHECK FOR VALID LOCATION
! 	K4$ = " ",K4$;K4$ = PL1[0] Using "##";K4$[3] = PLOC$[13,18]
! 	Search #4,2,1;K4$,R4,E \ If E > 1 Gosub ERR_SEARCH
! 	If E = 1 Goto L_4260
! 	Return 1
! 	L_4260: Rem NOT A LOCATION!
! 	J7$ = "The Location Entered is Not Valid!"
! 	Gosub L_7600
! Return
! 
! L_4500: Rem WRITE OUT REC
! 	E = 2
! 	Search #3,1,0;K3$,R3,E
! 	If E Gosub ERR_SEARCH
! 	Search #3,4,1;K3$,R3,E
! 	If E Gosub ERR_SEARCH
! 	K33$ = " ",K33$
! 	K33$[1,2] = K3$[13,14]
! 	K33$[3,8] = K3$[15,20]
! 	K33$[9,20] = K3$[1,12]
! 	Search #3,4,2;K33$,R3,E
! 	If E Gosub ERR_SEARCH
! 	Mat Write #3,R3,0;PLOC$;
! 	Mat Write #3,R3,18;PL1 \ Mat Write #3,R3,22;PL2;
! 	Gosub CREATE_SPRODLOT
! Return
! 
! CREATE_SPRODLOT: Rem
! 	If Not(RASL) Return
! 	DEF_LOT$ = " ",DEF_LOT$
! 	DEF_LOT$[1,7] = "STOCK",PL1[0] Using "&&"
! 	S_KEY$ = PL1[0] Using "##",PLOC$[13,18],PLOC$[1,12],DEF_LOT$,"          "
! 	Search #11,2,3;S_KEY$,S_REC,E \ If E > 1 Gosub ERR_SEARCH
! 	If Not(E) Return
! 	E = 2 \ Search #11,1,0;S_KEY$,S_REC,E \ If E Gosub ERR_SEARCH
! 	S_KEY$ = DEF_LOT$,"          ",PL1[0] Using "##",PLOC$[13,18],PLOC$[1,12]
! 	Search #11,4,1;S_KEY$,S_REC,E \ If E Gosub ERR_SEARCH
! 	S_KEY$ = PLOC$[1,12],PL1[0] Using "##",PLOC$[13,18],DEF_LOT$,"          "
! 	Search #11,4,2;S_KEY$,S_REC,E \ If E Gosub ERR_SEARCH
! 	S_KEY$ = PL1[0] Using "##",PLOC$[13,18],PLOC$[1,12],DEF_LOT$,"          "
! 	Search #11,4,3;S_KEY$,S_REC,E \ If E Gosub ERR_SEARCH
! 	S_KEY$ = PLOC$[1,12],PL1[0] Using "##",DEF_LOT$,"          ",PLOC$[13,18]
! 	Search #11,4,4;S_KEY$,S_REC,E \ If E Gosub ERR_SEARCH
! 	P0$ = " ",P0$
! 	P0$[1,12] = PLOC$[1,12]
! 	P0$[13,24] = DEF_LOT$
! 	P0$[25,46] = "PRIMARY ASSIGN - MX355"
! 	Write #11,S_REC;P0$
! 	P1[0] = PL1[0] \ P1[1] = 3
! 	Mat Write #11,S_REC,66;P1
! 	P2[0] = SYS_DATE \ P2[1] = 0 \ P2[2] = 0
! 	Mat Write #11,S_REC,70;P2
! 	P3[0] = 0 \ P3[1] = 0 \ P3[2] = 0 \ P3[3] = 0 \ P3[4] = 0
! 	P4 = 1
! 	Mat Write #11,S_REC,82;P3
! 	Write #11,S_REC,112;P4
! 	Mat Write #11,S_REC,114;PLOC$[13,18]
! 	Write #11,S_REC,120;P3[1];
! Return
! 
! L_5500: Rem DRAW SCREEN ---------------------------------------------------
! 	Print 'CS';@0,0;"-MX355-";
! 	Print @34,1;"STOCK LOCATION";
! 	Print @1,5;"PRODUCT CODE..:";
! 	Print @1,7;"WAREHOUSE.....:";
! 	Print @1,9;"LOCATION......:";
! Return
! 
! L_5550: Rem "Determined by warehouse/RASL
! 	Print @0,10;'CE';@30,0;'CL';
! 	If RASL Print @35,0;"RASL PRIMARY"; Else Print @37,0;"NON RASL";
! 	If RASL
! 		Print @1,11;"1> PRIMARY....:";
! 		Print @1,12;"2> MAX PALLETS:";
! 		Print @1,13;"3> PRODUCT TI.:";
! 		Print @1,14;"4> PRODUCT HI.:";
! 		Print @1,15;"5> REPLEN PT..:";
! 		Print @1,16;"6> REPLEN CAP.:";@23,16;STOCKING_UM$;
! 		Print @40,11;"7> PROD HEIGHT:";
! 		Print @40,12;"8> PROD WIDTH.:";
! 		Print @40,13;"9> PROD LENGTH:";
! 	Else
! 		Print @1,11;"1> PERMANENT..:";
! 		Print @1,12;"2> PRODUCT TI.:";
! 		Print @1,13;"3> PRODUCT HI.:";
! 		Print @40,11;"7> PROD HEIGHT:";
! 		Print @40,12;"8> PROD WIDTH.:";
! 		Print @40,13;"9> PROD LENGTH:";
! 	End If
! Return
! 
! L_6000: Rem read prod file
! 	K2$ = " ",K2$
! 	K2$[1,12] = PLOC$[1,12]
! 	Search #2,2,1;K2$,R2,E
! 	If E
! 		J7$ = "Product Not On File!" \ Gosub L_7600
! 		Return
! 	End If
! 	Mat Read #2,R2,0;A$;
! 	Mat Read #2,R2,512;PFU1;
! 	Mat Read #2,R2,1030;STK;
! 	STOCKING_UM$ = "????"
! 	If PFU1[8] = -1 Let STOCKING_UM$ = "CWT "
! 	If PFU1[8] = -3 Let STOCKING_UM$ = "LB  "
! 	If PFU1[8] > 0 Read #10,PFU1[8],10;STOCKING_UM$;
! 	Print @30,4;'CL';@33,5;A$[9,38];@33,6;A$[63,92];
! Return 1
! 
! L_6080: Rem " Prod stuff
! 	Print Using "#&.&&";@56,11;STK[0];@56,12;STK[1];@56,13;STK[2];
! 	If RASL Print @23,15;STOCKING_UM$;@23,16;STOCKING_UM$;
! Return
! 
! L_6200: Rem GET MASK FROM WHINFO
! 	R5 = PL1[0] - 1 \ If R5 < 0 Goto L_6260
! 	Mat Read #5,R5,862;BINM$;
! 	For X = 1 To 6
! 		If BINM$[X,X] = "" Or BINM$[X,X] = " " Let BINM$[X,X] = "A"
! 	Next X
! 	Goto L_6280
! 	L_6260: Rem NG
! 	BINM$ = "AAAAAA"
! 
! 	L_6280: Print @30,9;'CL';"MASK: ";BINM$;
! Return
! 
! L_6600: Rem SWAP
! 	If J4$[1,1] >= "0" If J4$[1,1] <= "9" Return 1
! 	If J4$[1,1] >= "A" If J4$[1,1] <= "Z" Return 1
! 	Call "MXPROD5",J4$,WH,CUST
! Return
! 
! L_6700: Rem SWAP
! 	Swap 1,"MXLOC"
! 	Print @17,9; \ Signal 3,0
! 	Input ""J$ \ If J$ = "" Let F9 = 99 \ Return
! Return 1
! 
! L_6800: Rem LIST LOC
! 	Swap 1,"SW352"
! Return
! 
! L_8000: Rem CHECK LOCATION AGAINST MASK
! 	If J$[1,5] = "STOCK" Return 1
! 	If INQ Or BINM$ = "AAAAAA" Return 1
! 	For X = 1 To 6
! 		If BINM$[X,X] = "" Or BINM$[X,X] = " " Let BINM$[X,X] = "A"
! 		If BINM$[X,X] = "A" Goto L_8040
! 		If BINM$[X,X] = "L" If J$[X,X] > "@" If J$[X,X] < "[" Goto L_8040
! 		If BINM$[X,X] = "N" If J$[X,X] > "/" If J$[X,X] < ":" Goto L_8040
! 		Goto L_8050
! 	L_8040: Next X
! Return 1
! 
! L_8050: Rem NOT OKAY
! 	Print @0,22;'RB CE';"LOCATION DOES NOT MATCH MASK! ''O'' to override, or PRESS <CR>  ";
! 	Input Len 16385;""X$ \ Print @0,22;'CE';
! 	If X$ = "O" Return 1
! 	Print @0,22;'CE';
! Return
! 
! READ_PRWH: Rem
! 	PRWH_REC = -1
! 	PRWH_KEY$ = PLOC$[1,12],PL1[0] Using "##"
! 	Search #8,2,1;PRWH_KEY$,PRWH_REC,E \ If E > 1 Gosub ERR_SEARCH
! 	If E Return
! 	Mat Read #8,PRWH_REC,800;WHMISC;
! 	If RASL
! 		Print @16,13;WHMISC[4] Using "##";"  ";STOCKING_UM$;"/TIER"
! 		Print @16,14;WHMISC[5] Using "##";"  TIERS/SKID"
! 	Else
! 		Print @16,12;WHMISC[4] Using "##";"  ";STOCKING_UM$;"/TIER"
! 		Print @16,13;WHMISC[5] Using "##";"  TIERS/SKID"
! 	End If
! Return
! 
! READ_WHLOC: Rem
! 	WHLOC_REC = -1
! 	WLA[6] = 1
! 	If Not(RASL) Return
! 	WHLOC_KEY$ = PL1[0] Using "##",PLOC$[13,18]
! 	Search #4,2,1;WHLOC_KEY$,WHLOC_REC,E \ If E > 1 Gosub ERR_SEARCH
! 	If E
! 		Call "errmsg","WARNING! WHLOC record not on file!"
! 		Return
! 	End If
! 	Mat Read #4,WHLOC_REC,76;WLA;
! Return

! OUTEND: Rem EXIT
! Close 
! Chain "MX000"
! Stop

OUTEND: Rem EXIT ROUTINE
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end
