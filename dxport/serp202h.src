! >>> Program serp202h
!
! description Truck load (THIS IS NOT UT918!! diff file, etc)
!
! loadsave -w -n 100,10 -o prog/dxport/serp202h.dl4 src/serp202h.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem mx202h -  Entry of Truck Loading Info
Rem Create:  jliu 174928 - modified ut918c
Rem For Wanding in stuff from label/order
! This is not ut918c! - it seems to be just add/update w/no way to clear file?
! on native 202h - if not updated - records never cleared or used again?
! eventually file reaches limit of records (65536?) and blows up?
! we'll leave native as is - erp will use one-time file
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 21, 2009  13:58:21
Rem /w2/papermaster/r2005//usr/acct/jliu/work/r2005/mx2/mx202h.src (univ2) [jliu] {59053}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! ------------------- notes for rev10 upgrade for Jersey Paper ------------------
! used xrev9 program and added in custom code for:
! 06/28/10 rjs cct240883 - when updating, load the order information invwork
!                     file so customer doesn't have to go in to 233 to build it.
! ------------------------------------------------------------------------------
! ----------------  NOTES FOR REV10 UPGRADE FOR RUNGE PAPER ---------------------
! used xrev9 program & added in custom code for:
! 02/03/04 jcs cct174771 - add option for "!" in zone to mean "not used"
! ------------------------------------------------------------------------------


Declare Intrinsic function findchannel
External Lib "libgeneral.lib" !general routines
  Declare External Sub suberr,mainerr,getsession,setoutput,addtostr,CreateNetStatus
  Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
	declare external function PDate$,chkDteFrmt$,formatdate2$
Declare Intrinsic Sub FindF,FormatDate,InpBuf,String,Time,VerifyDate,programdump
Declare Intrinsic Sub DatetoJulian
!Option Default Dialect IRIS1
try
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Rem {begin src/inc/dim.roh.i}
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8],HFAX[1]
Dim 2%,HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL,OREF[5]
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Rem {end dim.roh.i}
Dim KEY_ROH$[30],ANS$[10],FILE$[30],CMD$[128],LFile$[30],K1$[60]
Dim TRUCK$[12],DATE$[8],SYSDATE$[8],ZONE$[2],S2$[20],K6$[50]
Dim LLINE$[80],TAB_$[80],S1$[118],TDate$[8],WFile$[40],K2$[60]
Dim 1%,LSEQ
Dim 2%,ORDER,H0[12],CUST,S5,DateCK
Dim 3%,REC_ROH,REC_WORK,RECS[6999]
dim 3%,X3[9],R[99],Truck
Dim Message$[400],WebStr$[600],k1$[60],Custom_customer$[30]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],msg$[100],ptmp$[30]
Dim action$[30],options$[30],userid$[8],bLANK$[200],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
Dim action1$[30],action2$[30],Zname$[24],whsename$[30]
Dim 3%,maxcnt \ maxcnt=100
Dim List$[maxcnt,100]

blank$=" ",blank$
! call dxopen() ! needed for standalone run
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
COID = IntCo
UPDATED = 0
STARTNUM = 0
! Call dxsave(0,"tmp/202hin.txt!")
! COID = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
FILE$ = "cntrl/CNTRL" + Str$(COID)
Close \ Open #1,FILE$
! we'll use a single use file on erp - see below in Submit action1
mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(Trim$(custom_customer$))
Read #1,88,1840;FILE$[1,16]; \ Open #2,FILE$
Read #1,88,1856;FILE$[1,16]; \ Open #3,FILE$
Read #1,88,1920;FILE$[1,16]; \ Open #6,FILE$
read #1,88,3056;file$[1,16]; \ Open #7,file$ ! invwork - for JPaper
CH_CNTRL = 1;CH_ROH = 2;CH_ROS = 3;CH_WORK = 5;CH_Zone=6;CH_Invw=7
CH_LOG = findchannel()
Gosub OPENLOG
Call Time(CMD$) \ CMD$[13] = ""
Call VerifyDate(CMD$,DATE$,E) ! converts to yymmdd
If E ! Stop ! no stopping on this line
	e$="Bad System date"
	goto err_msg
Endif
SysDate=date$ ! date in yymmdd format
Call FormatDate(DATE$,CMD$,E) ! converts to MM/dd/yy
If E ! Stop ! no stopping on this line
	e$="Bad System date"
	goto err_msg
Endif
DATE$ = CMD$[1,8];SYSDATE$ = CMD$[1,8] ! both MM/DD/YY
STARTHERE: Rem "Here we go!
!Gosub DISPLMAINSCRN
 action1$ = UCase$(action1$)
 action1$ = RTrim$(action1$) ! UPPERCASE & TRIMMED
returnstatus=-1
message$="Action1 not found"
select case action1$

case "GETLISTS" ! start it off								doc=TLD202-GetLists.doc
	! send zone list & system date
	returnstatus=1
	message$="OK"
	clear list$[]
	tmpcnt=maxcnt
	list$[0]=bsdel$,"DEFAULTS",fdel$
	list$[1]="SHIPDATE",fdel$
	tmp$="" \ if sysdate let tmp$=PDate$(sysdate)
	list$[2]=tmp$,fdel$
	list$[3]=esdel$
	call addtostr(e$,rstr$,list$[])
	clear list$[]
	list$[0]=bsdel$,"ZONELIST",fdel$
	list$[1]="ID",fdel$,"DESC",fdel$
	row=2
	if custom_customer$="RUNGE" ! add !
		let list$[2]="! ",fdel$,"not used",fdel$
		let row=3
	endif
	k1$=" ",k1$
	do
		search #ch_zone,3,1;k1$,R,e
		if e exit do
		mat read #ch_zone,r,0;zname$;
		webstr$=k1$,fdel$,RTrim$(zname$),fdel$
		list$[row]=webstr$
		row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	loop
	list$[row]=esdel$
	call addtostr(e$,rstr$,list$[])
	! done with getlists
case "SUBMIT"	! submitting a range?						doc=TLD202-SubmitData.doc
	! submit
	! Call dxsave(0,"tmp/202h1in.txt!")
	returnstatus=1
	message$="" ! start at null
	snglord=0
	gosub bld_work
	gosub ENT_MAINDATA
	gosub ENT_DETAIL
	if maxent>0 ! got at least 1
		Gosub UPDATEORDER ! update now - why not
	Endif
		close #ch_work
		Try kill WFile$ Else Rem
	
case "DELORDER" ! delete order from list (only for gotten)	doc=TLD202-DelOrder.doc
	! delete each order as checked delete?
	! yes - if on list & deleted - reset now
	! Call dxsave(0,"tmp/202h2in.txt!")
	returnstatus=1
	message$="OK" ! start at null
	gosub ENT_MAINDATA ! as a double check - get truck,date,zone
	snglord=1
	gosub edt_order ! does a dxget("Order",tmp$)
	if rec_roh<=0 ! no good
		returnstatus=0
		message$="Order "+Str$(Order)+" was not found"
	Else ! found order - zero stop/truck
		! has read h0,h4 - need ros
		Mat Read #CH_ROH,REC_ROH,0;H0;
		if order=h0[7] ! only if file order agrees
			Truck = TRUCK$ ! for the check to see if same as orders from "GetData"
			X$ = DATE$ \ Gosub ISDPACK \ DATECK = X2
			X$ = ZONE$[1,2]
			Mat Read #CH_ROS,H0[2],126;S2$;
			if X$[1,2]<>"! " AND s2$[19,20]<>x$[1,2] goto nsorder ! diff zone - skip
			if DateCK<>H0[10] goto nsorder ! diff ship date
			Mat Read #CH_ROS,H0[2],146;S5
			if s5<>truck goto nsorder ! diff truck
			s5=0
			h4[1]=0
			Truck$="DELETE"
			Gosub LOGME
			! leave zone / shipdate as is - no way to reset?
			NSOrder: ! diff from selection - not yet updated? (not from Getdata..)
			mat write #ch_ros,H0[2],146;s5;
			mat write #ch_roh,rec_roh,78;H4;
		Endif
	Endif
case "GETDATA" ! In case of wanting existing?				doc=TLD202-GetData.doc
	! match date, truck, zone? yep
	returnstatus=1
	message$="OK"
	gosub bld_work ! build workfile (sort)
	gosub ENT_MAINDATA ! get criteria - truck, date, zone
	clear list$[]
	list$=bsdel$,"ORDERS",fdel$
	List$[1]="ZSTOP",fdel$,"ORDERID",fdel$
	row=2
	! per spec - match zone,date,truck
	KEY_ROH$ = " ",KEY_ROH$
	do
		search #ch_roh,3,1;key_roh$,REC_ROH,E
		if e exit do
		x2=key_roh$[1,2]
		if x2>10 exit do
		Mat Read #CH_ROH,REC_ROH,0;H0;
		Mat Read #CH_ROH,REC_ROH,78;H4;
		Mat Read #CH_ROS,H0[2],126;S2$;
		Mat Read #CH_ROS,H0[2],146;S5;
		! do check
		ok2add=0
		X3 = TRUCK$
		if x3=s5 let ok2add=1 ! match 1 - truck
		X$ = DATE$ \ Gosub ISDPACK \ EDATE = X2 ! from mm/dd/yy to yymmdd
		if H0[10] = EDate let ok2add=ok2add+1 ! match 2 - ship date
		if zone$[1,2]="! "
			let ok2add=ok2add+1 ! all zones match
		Else
			if S2$[19,20] = ZONE$[1,2] let ok2add=ok2add+1 ! match 3 - zone
		endif
		If (x2=9 or x2=10) and H3[1] <> 6 let ok2add=ok2add-1 ! only pickup credits
		if x2=7 let ok2add=ok2add-1 ! we won't send invoice reg
		if ok2add=3 ! matched all 3 that user wanted
			k1$=" ",k1$
			k1$[1,4]=h4[1] using "####"
			k1$[5,10]=h0[7] using "######"
			Search #ch_work,4,1;k1$,Rec_roh,e \ if e>1 error 11000
		Endif ! not all match - no send
	loop
	k1$=" ",k1$ ! go thru and send in stop/order order
	do 
		search #ch_work,3,1;k1$,R,e
		if e exit do
		h4[1]=k1$[1,4];h0[7]=k1$[5,10]
		webstr$=Str$(H4[1]),fdel$,str$(H0[7]),fdel$
		list$[row]=webstr$
		row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	Loop
	list$[row]=esdel$
	call addtostr(e$,rstr$,List$[])
	close #ch_work
	Try kill WFile$ Else Rem
end select
 if returnstatus=-1 ! not valid option 
	e$=Message$
	goto err_Msg
 Endif
goto outend
! end of main - subs are below
ENT_MAINDATA: ! always need truck,date,zone
ENT_TRUCK: Rem "Enter the Truck Here
!J5$ = "Enter the Truck Code, <CR>:exit"
call dxget("TRUCK",tmp$)
x3=tmp$
if x3<0 or x3>999999 or fra(x3) or not(len(rtrim$(tmp$)))
	e$="INVALID TRUCK NUMBER"
	goto err_msg ! fail immediately
Endif
FOR I=1 TO len(rtrim$(tmp$))
	if tmp$[i,i]<"0" or tmp$[i,i]>"9" then e$="Invalid Truck" \ goto Err_Msg 
next i
j$=Str$(X3)
TRUCK$ = J$
X$ = SYSDATE$ \ Gosub ISDPACK
EDATE = X2
tdate$=PDate$(EDate) ! yymmdd to MM/DD/YYYY
ENT_DATE: Rem "Enter the Load Date
!J5$ = "Enter the shipping date, <CR>:Today"
call dxget("SHIPDATE",tmp$)
if trim$(tmp$)="" let tmp$=tDate$ ! have to have it!
tmp$=chkDteFrmt$(e$,tmp$) ! 
date$=tmp$[1,6],tmp$[9,10] ! only mm/dd/yy wanted
tmp1$=formatdate2$(tmp$) ! mm/dd/yyyy to yyyymmdd
EDATE = tmp1$[3,8] ! J$ native only yymmdd
tmp$=EDate using "&&&&&&"
Call DatetoJulian(1,tmp$,tmp1$,e)
if e
	e$="INVALID SHIP DATE"
	goto err_msg ! fail immediately
Endif
ENT_ZONE: Rem"Enter the zone
!J5$ = "Enter the Zone, -:for help, or <CR>:exit"
call dxget("ZONE",tmp$)
j$=Rtrim$(tmp$)+"  "
K6$ = J$[1,2]
if K6$[1,2]<>"! " ! ! is not used! 
	Search #CH_Zone,2,1;K6$,K6,E
	If E
	  E$ = "INVALID ZONE!" ! \ Gosub L_7600 \ Goto ENT_ZONE
	  goto err_msg ! fail immediately
	End If 
ENDIF
ZONE$ = J$
return ! rest is changeable
ENT_DETAIL: ! the user is submitting (we always add to work file!)
maxent=0
clear message$
Call dxget("NUMENTER",tmp$)
x3=tmp$
if x3<=0 ! none? ignore this whole call
	return
Endif
maxent=x3
for entno=1 to maxent
	snglord=0 ! NOT
	gosub edt_order
	if rec_roh>0 ! got order
		gosub edt_stop
	Else
		lseq=-2 ! no order - ignore seq
	endif
	!WorkRec = Chf(CH_WORK) ! will add a record
	!Write #CH_WORK,RECS[ENTNO];TRUCK$,DATE$,ZONE$,ORDER,CUST,LSEQ,REC_ROH;
	!Write #CH_WORK,WorkRec;TRUCK$,DATE$,ZONE$,ORDER,CUST,LSEQ,REC_ROH;
	!Recs[entno]=workrec ! track what we enter

	if rec_roh>0 and lseq>=0 ! both must be good
		k1$=" ",k1$
		k1$[1,6]=Order using "######"
		k1$[7]="" ! 1st see if order is already entered!
		search #ch_work,2,1;k1$,R,E \ if e>1 error 11000
		if not(e) ! it is - delete previous
			search #ch_work,5,1;k1$,R,E \ if e error 11000
		Endif
		Let k1$[7]=LSeq using "####" ! max 4 digits
		R=rec_roh
		search #ch_work,4,1;k1$,R,E \ if e error 11000
	Else ! bad data
		returnstatus=0 ! or leave it 1
		if rec_roh=0
			message$=message$+" Order "+Str$(Order)+" was not found"
		endif
		if lseq=-1 ! not in range
			message$=message$+" Order "+Str$(Order)+" was not added. Bad Stop."
		Endif
	Endif ! got an order
Next entno ! Goto ENT_ORDERS
return ! done with entry

EDT_STOP: Rem "enter stop
!J5$ = "ENTER THE STOP NUBMER WAS LOADED ONTO TRUCK"
!J0$ = "3000 4####";J0$[7,8] = EXPOS - 4 Using "##";J0$[9,10] = EYPOS Using "##"
!J1 = LSEQ
!Gosub ISINPUT
call dxget("ZSTOP"+Str$(entno),tmp$) ! so zstop1 for order1, zstop2 for order2, etc
j1=tmp$
If j1<0 or J1 > 6999 !Goto EDT_STOP
	!e$="Stop numbers are 0 to 6999"
	!goto err_msg ! we'll just report any errors after completion
	lseq=-1
	return
Endif
LSEQ = J1
return
EDT_ORDER: Rem "Edit Order
order=0
!J5$ = "ENTER THE ORDER NUMBER, 0:DELETE"
if not(snglord) ! batch update
	call dxget("ORDER"+Str$(entno),tmp$)
Else ! just check
	call dxget("ORDER",tmp$)
Endif
j1=tmp$
If J1 
	Let ORDER = J1
	Gosub GET_ORDER ! use e 0=ok, 1=ng
	if e ! \ Goto EDT_ORDER
		!e$="ORDER "+Str$(Order)+" WAS NOT FOUND!"
		!goto err_msg ! we'll just report any errors after completion
		rec_roh=0
		return
	Endif
Endif
If Not(J1) Let REC_ROH = 0
!Write #CH_WORK,REC_WORK;TRUCK$,DATE$,ZONE$,ORDER,CUST,LSEQ,REC_ROH;
Return 
GET_ORDER: Rem "Get & Update Order
KEY_ROH$ = " ",KEY_ROH$
KEY_ROH$[3,8] = ORDER Using "######"
For X1 = 1 To 10
  KEY_ROH$[1,2] = X1 Using "##"
  Search #CH_ROH,2,1;KEY_ROH$,REC_ROH,E
  if x1=7 let e=1 ! fail inv registered (allow printed?)
  If Not(E)
    Mat Read #CH_ROH,REC_ROH,52;H3;
    If X1 = 9 Or X1 = 10
      If H3[1] = 6 Goto GOT_ORDER
    Else 
      Goto GOT_ORDER
    End If 
  End If 
  If E > 1 error 11000
Next X1
!Print @0,22;'RB CE';"ORDER ";Str$(ORDER);" NOT FOUND!" \ Signal 3,15
!Print @0,22;'CE'; \ Return 
E=1;rec_roh=0
return
GOT_ORDER: Rem "Got the Order!
Rem {begin src/inc/read.roh.i}
Mat Read #CH_ROH,REC_ROH,0;H0;
Mat Read #CH_ROH,REC_ROH,52;H3;
!Mat Read #CH_ROH,REC_ROH,56;TOT_SELL
!Mat Read #CH_ROH,REC_ROH,64;LOCKPORT
!Mat Read #CH_ROH,REC_ROH,66;V0$
Mat Read #CH_ROH,REC_ROH,78;H4;
!Mat Read #CH_ROH,REC_ROH,84;H0$
Mat Read #CH_ROH,REC_ROH,104;H5
!Mat Read #CH_ROH,REC_ROH,172;ST3
!Mat Read #CH_ROH,REC_ROH,272;H1$
!Mat Read #CH_ROH,REC_ROH,278;SLSM
!Mat Read #CH_ROH,REC_ROH,318;SCOM
!Mat Read #CH_ROH,REC_ROH,348;SMER
!Mat Read #CH_ROH,REC_ROH,378;SCST
!Mat Read #CH_ROH,REC_ROH,408;H6
!Mat Read #CH_ROH,REC_ROH,444;HMAT$
!Mat Read #CH_ROH,REC_ROH,446;P0$
!Mat Read #CH_ROH,REC_ROH,466;HFAX
!Mat Read #CH_ROH,REC_ROH,474;HSTI
!Mat Read #CH_ROH,REC_ROH,482;H2
!Mat Read #CH_ROH,REC_ROH,486;OWHT
!Mat Read #CH_ROH,REC_ROH,490;OWHT1
!Mat Read #CH_ROH,REC_ROH,498;TOTGL
!Mat Read #CH_ROH,REC_ROH,504;PICKBY
!Mat Read #CH_ROH,REC_ROH,512;OREF
Rem {end read.roh.i}
Unlock #CH_ROH
CUST = H0[4]
E=0
Return
DISPLMAINSCRN: Rem "Main Screen
!Print 'CS ED';@0,0;"TRUCK LOAD ENTRY";@50,0;"UT918C"
!Print @0,2;'BD';@2,2;"TRUCK";@22,2;"SHIPPING DATE";@47,2;"ZONE";@60,2;"START STOP#"
!Print @5,4;"STOP ORDER";@25,4;"STOP ORDER";@45,4;"STOP ORDER";@65,4;"STOP ORDER";
!Print 'ED';
!X1 = 0;X2 = 5
!For X = 1 To 60
!  If X2 > 19 Let X1 = X1 + 20;X2 = 5
!  Print Using "####";@X1,X2;X + STARTNUM;".";
!  X2 = X2 + 1
!Next X
Return 
OPENLOG: Rem "log file
LFILE$ = "/tmp/mx202hlog." + Tim(4) Using "&&&&&&"
Call FindF(LFILE$,FOUND)
If Not(FOUND)
  CMD$ = "touch " + LFILE$ \ System CMD$
End If 
cmd$="chmod go+rw "+lcase$(Lfile$)
system cmd$ ! make sure native can read/write
!Open #CH_LOG,FILE$ ! don't need it opened
If Not(FOUND)
  !Print #CH_LOG;"***** mx202h Log ***** "
  System "echo ''***** mx202h Log ***** '' >> " + LFILE$
End If 
Return 
LOGME: Rem "let's streamline this! just append to text file
LFILE$ = "/tmp/mx202hlog." + Tim(4) Using "&&&&&&"
LOOPLOG: ! Read #CH_LOG;LLine$; \ If LLine$ Goto LOOPLOG ! no search for end every time!
LLine$ = " ",LLine$;TAB_$ = "\11\"
LLine$ = Msc$(3)
!Print #CH_LOG;LLine$
System "echo ''" + LLine$ + "'' >> " + LFILE$
LLine$ = " ",LLine$;TAB_$ = "  "
LLine$ = "truck [" + TRUCK$ + "]"
!Print #CH_LOG;LLine$
System "echo ''" + LLine$ + "'' >> " + LFILE$
LLine$ = " ",LLine$
LLine$ = "order [" + H0[7] Using "######" + "]"
LLine$ = LLine$ + TAB_$ + "ship date  [" + H0[10] Using "######" + "]"
LLine$ = LLine$ + TAB_$ + "zone  [" + ZONE$ + "]"
LLine$ = LLine$ + TAB_$ + "stop  [" + H4[1] Using "####" + "]"
!Print #CH_LOG;LLine$
System "echo ''" + LLine$ + "'' >> " + LFILE$
LLine$ = "-",LLine$
!Print #CH_LOG;LLine$
System "echo ''" + LLine$ + "'' >> " + LFILE$
Return 
UPDATEORDER: Rem Update the orders with truck#, shipping date, zone and stop#
K1$=" ",k1$
Do
	Search #ch_work,3,1;k1$,Rec_roh,e
	if e exit do
	order=k1$[1,6];lseq=k1$[7] ! rest are already entered/known
    If REC_ROH <> 0
      Mat Read #CH_ROH,REC_ROH,0;H0
	  if order<>h0[7] goto difforder
      Mat Read #CH_ROH,REC_ROH,52;H3
      !Mat Read #CH_ROH,REC_ROH,56;TOT_SELL
      !Mat Read #CH_ROH,REC_ROH,64;LOCKPORT
      !Mat Read #CH_ROH,REC_ROH,66;V0$
      Mat Read #CH_ROH,REC_ROH,78;H4
	  MAT  READ #CH_ROH,REC_ROH,104;H5
      Mat Read #CH_ROS,H0[2],8;S1$
      Mat Read #CH_ROS,H0[2],126;S2$
      Mat Read #CH_ROS,H0[2],146;S5
      S5 = TRUCK$
      X$ = DATE$ \ Gosub ISDPACK \ DATE = X2
      H0[10] = X2
      IF ZONE$[1,2]<>"! " LET S2$[19,20] = ZONE$[1,2]
      H4[1] = LSEQ
      Mat Write #CH_ROH,REC_ROH,0;H0;
      Mat Write #CH_ROH,REC_ROH,78;H4;
      Mat Write #CH_ROS,H0[2],8;S1$;
      Mat Write #CH_ROS,H0[2],126;S2$;
      Mat Write #CH_ROS,H0[2],146;S5;
	  if custom_customer$="JPAPER"
			let k2$=" ",k2$
			LET K2$[1,2]=H5[8] USING "&#"
			LET K2$[3,4]=H4[2] USING "&#"
			LET K2$[5,10]=h0[7] USING "######" ! FOR NUMERIC MASK
			SEARCH #ch_invw,4,1;K2$,rec_roh,E \ IF E>1 Error 11000  ! GOSUB Err_Search:
	  Endif
	  Gosub LOGME
	  difforder: ! could happen - old data entered was never updated!
      Unlock #CH_ROH
      Unlock #CH_ROS
      
	End If ! of recorded as no order (zero)

Loop
! as 202h has no purge or other way to reset(purge) records - do it now!

Return 
BLD_Work: ! build the workfile (a sortfile!)
tmp$=Str$(COID)+Str$(SPC(6)) ! co & port (as only used once!)
	WFILE$ = "6/TRUCKWRK" + tmp$ ! Str$(COID)  ! ut918 uses 3/TRUCKLOAD#
	Call FindF(WFILE$,H)
	If (H) ! "file's there already - kill it!
	  try kill Wfile$ else rem
	Endif
	! now build it on every submit
	  CMD$ = "<00> [10:256] " + WFILE$
	  Build #ch_work,CMD$ As "Universal Indexed-Contiguous"
	  r = 20 ! keylen words/40 chars
	Search #ch_work,0,1;k1$,r,e \ if e error 11000
	k1$="";r=0;e=0
    Search #ch_work,0,0;k1$,r,e \ if e error 11000
	  TRUCK$ = " ",TRUCK$;TDATE$ = " ",TDATE$;LSEQ = 0;ORDER = 0;REC_ROH = 0;CUST = 0
	  ZONE$ = " ",ZONE$
	 ! Write #5,0;TRUCK$[1,12],TDATE$[1,8],ZONE$[1,2],ORDER,CUST,LSEQ,REC_ROH;
	  Close #ch_work
	  cmd$="chmod go+rw files/"+LCase$(WFile$)+"*" ! for main & .idx
	  system cmd$ ! as setting <00> on build does not always work!
	!End If 
	Open #ch_work,WFILE$ ! open file for this specific run
RETURN ! done building workfile
! code below is not used
NXTPAGE: Rem "Continue on to Next Page?
!Print @0,22;'CE';"Enter ####:Entry No, N:New Screen, E:end  ";
!Input Len 16387;""ANS$ \ If ANS$ = "E" Goto WHATTODO
!Print @0,22;'CE';
!If ANS$ = "N"
!  Gosub DISPLMAINSCRN
!  Print @10,2;TRUCK$
!  PAGE = PAGE + 1;LINENO = 5;XPOS = 8;ENTNO = 0
!  For X = 0 To 6999 \ RECS[X] = 0 \ Next X
!  Goto ENT_ORDERS ! wow - this would lose all previous entries??!
!End If 
!SELNO = ANS$
!If SELNO > 0 Gosub EDT_WRKLINE
!Goto NXTPAGE
WHATTODO: Rem "What Now
!Print @0,22;'CE';"Enter ####:Entry No, A:add more, U:update, <CR>:New Truck    ";
!Input Len (16387);""ANS$
!If ANS$ = "" And Not(UPDATED)
!  Print @0,22;'CE';"The orders are not updating, enter new truck? (YES/N) ";
!  Input Len (16387);""ANS$
!  If ANS$ = "YES" Goto STARTHERE
!  If ANS$ = "N" Goto WHATTODO
!End If 
!If ANS$ = "" And UPDATED Goto STARTHERE
!Print @0,22;'CE';
!If ANS$ = "A"
!  If XPOS < 70 Goto ENT_ORDERS
!  Call String(5,CMD$)
!  ANS$ = "N\15\" \ Call InpBuf(ANS$)
!End If 
!If ANS$ = "U"
!  Gosub UPDATEORDER
!  UPDATED = 1
!  Print @0,22;'CE';"UPDATED...DONE!"
!  Signal 3,20
!  Print @0,22;'CE';
!  Goto STARTHERE
!End If 
!SELNO = ANS$
!If SELNO > 0 Gosub EDT_WRKLINE
!Goto WHATTODO
EDT_WRKLINE: Rem "Edit an Entry
!If SELNO > ENTNO Return 
!If SELNO > 6999 Return 
!!If RECS[SELNO] = 0 Return 
!REC_WORK = RECS[SELNO]
!Read #CH_WORK,REC_WORK;TRUCK$,DATE$,ZONE$,ORDER,CUST,LSEQ,REC_ROH;
!TPOS = SELNO - STARTNUM
!EXPOS = (Int((TPOS / 15) + .99) - 1) * 20 + 10
!EYPOS = ((TPOS - ((Int((TPOS / 15) + .99) - 1) * 15)) + 4)
Rem {begin rtn.input.s}
ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
Return 
ISERRMSG: Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end rtn.input.s}
L_7600: Return 
OUTEND: Rem "You're outta here
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
!Print 'CS'
!Close 
!Chain "MX000"
END 
ERR_MSG: ! send message
ReturnStatus=0 ! no good 
Message$=E$
  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
  call AddToStr(e$,rstr$,WebStr$)
  call SetOutPut(e$,rstr$)
end
else
	include "src/callmainerrnet.inc"
end try
end