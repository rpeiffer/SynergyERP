! GetSPPrice - Get the special price / cost for a determined record #
!
! loadsave -w -n 100,10 -o prog/dxport/getspprice.dl4 src/getspprice.src
! 
! taken from "PRICE" program
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG  4, 2004  14:14:44
Rem /w/papermaster/r2002//usr/acct/txc/work/r2002/misc/price.src (univ2) [txc] {26379}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc" ! dx
External Lib "librebates.lib"
Declare External Sub rebates
Declare Intrinsic Sub DateToJulian,InpBuf,String
!Option Default Dialect IRIS1
Rem PRICE - calculate system price/cost
Rem
Rem Last Update: nate 12/8/94 - store cost origin and rebate contract
Try
Enter FLEPTR[],SPECS[],MSGDESC$
dim e$[500],rstr$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
Dim 1%,AMALG,B3,BRACKET,C3[2],CH_BRKTBL,CH_CCODES
Dim 1%,CH_CMDTY,CH_CTRCT,CH_LASTPR,CH_LMARK,CH_PMARK,CH_PRODMARK,CH_PRWH
Dim 1%,CH_PROD
Dim 1%,CH_REBATEDTL,CH_RCONTRACTH,CH_SPRICE,CH_VENDTAG,CHANNEL_[10],COST2
Dim 1%,COST2RBT,CNVTU[2],CONVFLAG,CT,DFT_COST,EDII,END_,WHSE,I,I1
Dim 1%,LM1[37,5],LPDEPT,LTBL,MATPR,MODE,M5[3],NOCUST,NOPROD,P3,PERMPRICE
Dim 1%,PPBREAK,PROD,REBATE_TYPE,RECS[8],SC,SPCUM[1],SPNOTVALID,SPWH,SR
Dim 1%,START,STARTCHAN,STATUS,T0,UN[2],UNIT,UNITSEQUAL,WH,WHSEPR
Dim 1%,DEBUG,FUTURE,NOLOWER,PM5[5,4]
Dim 2%,CHAN,DATE,E,E1,FLAG,H0[12],H5[16],JUMP_,JUNK,L4[3],L6[5]
Dim 2%,L9[1],LCO[1],LM2[37,3],M6[3],Q0[1],RBASE_TYPE,RBSLCOST_TYPE
Dim 2%,SBASE_TYPE,SPC1[5],SPCOM,SPSLCOST_TYPE,TEMP_LCO,TYPE,VNUM,X1[9]
Dim 2%,CUSTCODE,ARDATE,JULARDATE,DT3[1],JDATE[9]
Dim 3%,AMOUNT,B1[9,2],BASE,BASEHOLD,BRKAMT,CMODE,CNVTA,COST,CST[1],CUNIT
Dim 3%,FIELD,L5[3],L7[12],M7,OLM[6],PPRICE,PREC[2],RB_BASECOST,RBCOST
Dim 3%,RBSLCOST,REC_BRKTBL,UNITPRICE,HLDCOST
Dim 3%,REC_CCODES,REC_CMDTY,REC_CTRCT,REC_LASTPR,REC_LMARK,REC_PMARK
Dim 3%,REC_PRODMARK,PM6[5,3]
Dim 3%,REC_PRWH,REC_PROD,REC_REBATEDTL,REC_RCONTRACTH,REC_SPRICE,S3[17]
Dim 3%,SPC4[6],SPC5[4],SPSLCOST,STOCK,UWORK[15],X2,X4,REBATE_ARGS[10,4]
Dim 3%,LEVEL,COSTHOLD
Dim 4%
Dim BRD$[100],CCODE$[14],DBASE$[10],DCOST$[10],DDESC$[75],DTYPE$[75],Msg$[200]
Dim F1$[16],I$[60],I1$[50],J4$[50],K9$[60],KCUST$[50],DBG$[70],P61$[256]
Dim L1$[20],MASK5$[5],P60$[50],P9$[50],PMASK$[12],UNIT$[4],X$[10],PCode$[12]
Rem {begin src/inc/dim.prod.i ! "product file dims}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1]
Rem {end dim.prod.i ! "product file dims}
Rem {begin src/inc/dim.prwh.i ! "prod whse file dims}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i ! "prod whse file dims}
Rem {begin src/inc/dim.lastpr.i ! "last price file dims}
Dim LP$[12],LP2$[84],LPMT$[2]
Dim 1%,LPC3[4],AI,LPEUN[2],LPWH,LPCPT
Dim 2%,LPDF,LPC1[2],LPR1[3],LPC5[3],LPPCDATE,LPCSDT
Dim 3%,LPC2[2],LPC4[3],LPR[4],LPUNF[6],PERM[1],LPLPERM,LPCURR[1]
Dim 3%,LPFPERM[1]
Rem {end dim.lastpr.i ! "last price file dims}
Rem {begin src/inc/dim.rcontracth.i !"rebate contract dims}
Dim 1%,RCN$[70]
Dim 3%,RCN3[3]
Rem {end dim.rcontracth.i !"rebate contract dims}
Rem {begin src/inc/dim.rebatedtl.i !"rebate detail dims}
Dim 1%,RB$[12],SPUDA2$[30]
Dim 1%,RBUM[1],RB[2],RBWH,RBL1[1]
Dim 2%,RB1[5],RBMIN,RBCOM
Dim 3%,RB3[6],RBN,RB5[2]
Rem {end dim.rebatedtl.i !"rebate detail dims}
Rem {begin src/inc/dim.commcode.i}
Dim 1%,CMDTYBRKFLAG[100],CMDTYBASE[100],CMDTYBRKTBL[100]
Dim 2%,CMDTYMULTI[100],CMDTY3[1],CMDTYUPCHG[100]
Dim CMDTY$[36],CMDTYUPCHG$[101],tmp$[100]
Rem {end dim.commcode.i}
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
Mat Read #1,3,172;DATE;
Mat Read #1,19,50;P9$; \ Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2
MASK5$ = "#####";PMASK$ = "-----#.",MASK5$[1,Q0[1]]
For X1 = 22 To 30
  SPECS[X1] = 0
Next X1
MAIN: Rem "main routine logic
DTYPE$ = " ",DTYPE$;DDESC$ = " ",DDESC$;DBASE$ = " ",DBASE$
DCOST$ = " ",DCOST$;BASEHOLD = 0
MODE = Int(SPECS[0])
If MODE = 5 Let MODE = 0;NOPROMO = 1 Else Let NOPROMO = 0
Gosub VALIDATE
If Not(SPECS[0]) ! "no errors
  Gosub SETVARS
  !If DEBUG Gosub OPEN_DBGWINDOW
  Gosub FILEOPEN
  Gosub READPROD
  If Not(REC_LASTPR) And Not(NOCUST) And Not(MODE) Gosub GETLP
  If REC_LASTPR And Not(MODE) Gosub READLP
  Gosub CONVORD
  If (Not(MODE) Or (MODE = 4 And Not(LEVEL))) And LM1[H5[7] - 1,4] <> 5
    Gosub SETCOST
  End If 
  If MODE ! "manual price edit
    If (MODE <> 4 Or (MODE = 4 And LEVEL))
      On MODE Gosub MANLP,MANLEVEL,MANBRACKET,ASENTERED
    End If 
  Else 
    If Not(AMALG)
      Gosub SP_CHKREBATE
      Gosub SP_GETIT ! SP_CHKSP
    End If 
    If Not(L9[0]) And PERMPRICE And Not(AMALG) And REC_LASTPR Gosub GETPERM
    If UNITPRICE = -2 Let UNITPRICE = 0;JUMP_ = C3[1]
    If MATPR And PR_C4[2] = 1 And Not(UNITPRICE) ! "matrix price
      Gosub MATPSETUP
      If DTYPE$[1,3] = "   " And UNITPRICE
        DTYPE$ = "Matrix price"
        If PR_C4[3] Let DTYPE$ = DTYPE$,PR_C4[3] Using " (table ###)"
      End If 
    End If 
    If PR_C4[2] = 2 And (Not(UNITPRICE) Or UNITPRICE = -1) ! "10b price
      Gosub GETTENBPRICE
      If DTYPE$[1,3] = "   " And UNITPRICE
        DTYPE$ = "10 bracket price"
        DTYPE$ = DTYPE$," (table ",PR_C4[3] Using "###"
        DTYPE$ = DTYPE$,", bracket",BRACKET Using "##"
        If BRD$[BRACKET * 10 - 9,BRACKET * 10 - 8] <> "  " Let DTYPE$ = DTYPE$,"-",BRD$[BRACKET * 10 - 9,BRACKET * 10]
        DTYPE$ = DTYPE$,")"
      End If 
    End If 
    If UNITPRICE <> -3 !not a special price/contract free good 
      Gosub CHECKBREAK
      If SPJUMP ! "Special Price Bracket Jump
        OLM[3] = UNITPRICE - L6[1]
        OLM[3] = OLM[3] - (OLM[3] * (L6[0] / 100))
        L6[1] = 0;L6[0] = 0;L9[0] = 2
        If SPC5[0] ! "Brkt Jump & Add'l MU/MD
          OLM[3] = (OLM[3] * ((100 + SPC5[0]) / 100))
        End If 
        UNITPRICE = OLM[3]
      End If 
      ! Gosub UPCHARGE    NO UPCHARGE
      ! If L7[8] Gosub UPTYPE ! NO COST UP
    End If 
  End If 
  Gosub SETVARS2
  Close #CH_REBATEDTL,#CH_RCONTRACTH,#CH_PMARK,#CH_PRODMARK,#CH_VENDTAG,#CH_LMARK
End If 
If SPECS[0] < 0 Let SPECS[0] = 0
Goto OUTEND
VALIDATE: Rem "check for required data sent
SPECS[0] = 0
If SPECS[8] = 8 Or SPECS[8] = 16 Let SPECS[0] = -1
If MODE And MODE <> 4 ! "price edit mode
  If MODE = 1
    If SPECS[11] < 1 Or SPECS[11] > 6 Let SPECS[0] = 23
  Else 
    If MODE = 2 Or MODE = 3
      If SPECS[11] < 1 Or SPECS[11] > 10 Let SPECS[0] = 23
    Else 
      SPECS[0] = 24
    End If 
  End If 
End If 
For X1 = 1 To 8
  If Not(FLEPTR[X1,0])
    SPECS[0] = X1
  End If 
Next X1
If Not(FLEPTR[1,1]) ! "no product record
  SPECS[0] = 13
End If 
If Not(FLEPTR[3,1]) ! "no commodity record
  SPECS[0] = 14
End If 
If Not(FLEPTR[5,1]) ! No special price record (The WHOLE POINT OF THIS PROGRAM!)
  Specs[0]=15
Endif
If Not(SPECS[3]) And Not(SPECS[7]) ! "no cust/price type
  SPECS[0] = 18
End If 
For X1 = 13 To 15
  If Not(SPECS[X1]) ! "unit of measure
    SPECS[0] = X1 + 6
  End If 
Next X1
Return 
FILEOPEN: Rem "open support files needed
!If DEBUG Print "Opening files..."
Read #1,88,320;F1$;
Ropen #CH_REBATEDTL,F1$
Read #1,88,304;F1$;
Ropen #CH_RCONTRACTH,F1$
Read #1,88,2720;F1$; ! ON REV9 uses pricemark - xrev9 uses Spricemark
Call DXGet("S_USER.AppID",tmp$) !company #
try let intCo=Val(tmp$) else let intCo=1 !company #
F1$="2/SPRICEMARK"+STR$(intCO)
Ropen #CH_PMARK,F1$
Read #1,88,1712;F1$;
Ropen #CH_PRODMARK,F1$
Read #1,88,1120;F1$;
Ropen #CH_VENDTAG,F1$
Read #1,150,32;F1$;
Ropen #CH_LMARK,F1$
Return 
SETVARS: Rem "set channels/variables
CH_PROD = FLEPTR[1,0];REC_PROD = FLEPTR[1,1]
CH_PRWH = FLEPTR[2,0];REC_PRWH = FLEPTR[2,1]
CH_CMDTY = FLEPTR[3,0];REC_CMDTY = FLEPTR[3,1]
CH_LASTPR = FLEPTR[4,0];REC_LASTPR = FLEPTR[4,1]
CH_SPRICE = FLEPTR[5,0];Rec_SPRICE=FlePtr[5,1]
CH_CTRCT = FLEPTR[6,0]
CH_CCODES = FLEPTR[7,0];CH_BRKTBL = FLEPTR[8,0]
X1 = 0;X2 = 0
For CT = 99 To 1 Step -1
  X1 = 0
  Try
  JUNK = Chf(CT)
  Else
	x1=49
  End try
  If X1
    If X1 = 49
      CHANNEL_[X2] = CT \ X2 = X2 + 1
    Else 
      Gosub ERR_TRAP
    End If 
  End If 
  If X2 = 6 Let CT = 1
Next CT
For CT = 0 To X2 - 1
  If Not(CHANNEL_[CT]) Let E = 0 \ Gosub ERR_SEARCH
Next CT
CH_RCONTRACTH = CHANNEL_[0]
CH_REBATEDTL = CHANNEL_[1]
CH_PMARK = CHANNEL_[2]
CH_PRODMARK = CHANNEL_[3]
CH_VENDTAG = CHANNEL_[4]
CH_LMARK = CHANNEL_[5]
L7[2] = SPECS[1]
S3[4] = SPECS[2]
CUSTCODE = SPECS[3]
NOCUST = 0 \ If Not(CUSTCODE) Let NOCUST = 1
WHSE = SPECS[4] \ If Not(WHSE) Let WHSE = 1
H0[9] = SPECS[5] ! \ If Not(H0[9]) Let H0[9] = DATE  ! DO FOR NO DATE!
FUTURE = 0;NOLOWER = 0
If H0[9] < 0 And (H0[9] <> -99 Or H0[9] <> -999999)
  FUTURE = 1;H0[9] = Abs(H0[9])
  NOLOWER = SPECS[12]
End If 
X2 = H0[9] \ If X2 <> 999999 Gosub YMD2JUL \ X2 = 0
JDATE[0] = X2
L9[1] = SPECS[6]
P3 = SPECS[7] \ If Not(P3) Let P3 = 1
H5[7] = SPECS[8] \ If Not(H5[7]) Let H5[7] = 1
DFT_COST = SPECS[9]
EDII = SPECS[10]
LEVEL = SPECS[11]
UN[0] = SPECS[13]
UN[1] = SPECS[14]
UN[2] = SPECS[15]
L7[8] = SPECS[16]
L5[1] = SPECS[17]
CST[0] = SPECS[18]
PPRICE = SPECS[20]
DEBUG = SPECS[21]
MATPR = 0 \ If P9$[10,10] = "Y" Let MATPR = 1
UNITSEQUAL = 0 \ If P60$[30,30] = "Y" Let UNITSEQUAL = 1
WHSEPR = 0 \ If P9$[32,32] = "Y" Let WHSEPR = 1
LPDEPT = 0 \ If P9$[44,44] = "Y" Let LPDEPT = 1
AMALG = 0 ! \ If P60$[12,12] = "Y" Let AMALG = 1 ! DO NOT CARE - this is get a price!
PERMPRICE = 0 \ If P60$[33,33] = "Y" Let PERMPRICE = 1
COST2 = Val(P60$[38,38])
COST2RBT = 0 \ If P60$[39,39] = "Y" Let COST2RBT = 1
NOPROD = 0 \ If REC_PROD < 0 Let NOPROD = 1;REC_PROD = Abs(REC_PROD)
Return 
SETVARS2: Rem "set to go back to main program
If UNITPRICE < 0
  UNITPRICE = 0;L6[0] = 0;L6[1] = 0;L7[8] = 0;UWORK[11] = 0
  DTYPE$ = " ",DTYPE$;DDESC$ = " ",DTYPE$
End If 
CNVTA = UNITPRICE;CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2
Gosub CONVERT
CNVTA = AMOUNT;CNVTU[0] = UN[1];CNVTU[1] = 0;CNVTU[2] = 2
Gosub CONVERT
UNITPRICE = AMOUNT
OLM[3] = UNITPRICE - L6[1]
OLM[3] = OLM[3] - (OLM[3] * (L6[0] / 100))
If L7[8] > 0
  OLM[3] = OLM[3] + (OLM[3] * (L7[8] / 100))
Else 
  OLM[3] = OLM[3] + Abs(L7[8])
End If 
CNVTA = OLM[3];CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2
Gosub CONVERT
CNVTA = AMOUNT;CNVTU[0] = UN[1];CNVTU[1] = 0;CNVTU[2] = 2
Gosub CONVERT
OLM[3] = AMOUNT
If Not(OLM[3]) Let DDESC$ = " ",DDESC$;DTYPE$ = " ",DTYPE$;DTYPE$ = "No price can be calculated."
If Not(OLM[3]) And C3[0] = 7
  DDESC$ = " ",DDESC$;DTYPE$ = " ",DTYPE$
  If OLM[2]
    DTYPE$ = OLM[2] Using "SP/Contract Free Goods (Contract #####)"
  Else 
    DTYPE$ = "SP/Contract Free Goods"
  End If 
End If 
If OLM[3] And OLM[2] Let DTYPE$ = DTYPE$,OLM[2] Using " (Contract #####)"
If Not(L9[0]) Let L9[0] = -7
MSGDESC$ = " ",MSGDESC$
MSGDESC$ = DTYPE$[1,75],"                                                                           "
MSGDESC$[76] = DDESC$[1,75],"                                                                           "
FLEPTR[4,1] = REC_LASTPR
FLEPTR[8,1] = REC_BRKTBL
If REC_CTRCT And OLM[2] Let FLEPTR[6,1] = REC_CTRCT
If REC_SPRICE And (L9[0] > 1 And L9[0] < 14 And L9[0] <> 5 And L9[0] <> 9 And L9[0] <> 10) Let FLEPTR[5,1] = REC_SPRICE
SPECS[0] = 0
SPECS[14] = UN[1]
SPECS[15] = UN[2]
SPECS[16] = L7[8]
SPECS[17] = L5[1]
SPECS[18] = CST[0]
SPECS[20] = UNITPRICE \ If Not(SPECS[20]) And MODE Let SPECS[20] = PPRICE
SPECS[21] = L6[1]
SPECS[22] = L6[0]
SPECS[23] = OLM[3]
SPECS[24] = LCO[1]
SPECS[25] = L9[0]
SPECS[26] = LCO[0]
SPECS[27] = OLM[2]
SPECS[28] = OLM[4]
SPECS[29] = L7[9]
SPECS[30] = UWORK[11]
Return 
OPEN_DBGWINDOW: Rem
!Window On 
!Window Open @5,5; Size 70,15; Using "PRICE TRACKING"
!Print 'CS';
Return 
DBG: Rem print debug message and hesitate just long enough for breakout option
!Print DBG$
!Input Tim 10;""DBG$
!Signal 6,-3,X,X
!If DBG$ = "S" Or DBG$ = "s" Stop 
Return 
READPROD: Rem "get prod/commodity and warehouse (if exists) record
Rem {begin src/inc/read.prod.i}
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Rem {end read.prod.i}
Unlock #CH_PROD
!If DEBUG Print "Reading product: ";A$[140,151]
If Not(A[5]) Let A[5] = 1
If L7[2] Let A[6] = Abs((S3[4] / L7[2]) * A[5])
If REC_PRWH ! "have whse record
  Rem {begin src/inc/read.prwh.i}
  Mat Read #CH_PRWH,REC_PRWH,0;W1$
  Mat Read #CH_PRWH,REC_PRWH,32;W1
  Mat Read #CH_PRWH,REC_PRWH,38;W2
  Mat Read #CH_PRWH,REC_PRWH,78;W3
  Mat Read #CH_PRWH,REC_PRWH,228;W5
  Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
  Read #CH_PRWH,REC_PRWH,396;WHLPOOL
  Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
  Read #CH_PRWH,REC_PRWH,404;FCWGT
  Mat Read #CH_PRWH,REC_PRWH,420;W0
  Mat Read #CH_PRWH,REC_PRWH,428;WH7
  Mat Read #CH_PRWH,REC_PRWH,444;WH8
  Mat Read #CH_PRWH,REC_PRWH,540;WH9
  Mat Read #CH_PRWH,REC_PRWH,696;W7
  Mat Read #CH_PRWH,REC_PRWH,756;WH3$
  Mat Read #CH_PRWH,REC_PRWH,780;WHLV
  Read #CH_PRWH,REC_PRWH,798;WHRPLN
  Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
  Mat Read #CH_PRWH,REC_PRWH,842;WHLM
  Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
  Read #CH_PRWH,REC_PRWH,894;RESTRICTED
  Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
  Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
  Read #CH_PRWH,REC_PRWH,922;VLIST
  Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
  Read #CH_PRWH,REC_PRWH,938;WHBASE
  Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
  Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
  Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
  Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
  Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
  Rem {end read.prwh.i}
End If 
Unlock #CH_PROD,#CH_PRWH
Gosub SETWHSE
If FUTURE Gosub SETPEND
PREC[0] = REC_PROD \ Gosub CALCLOAD
If UPCT And U2 ! "dollar up charge
  CNVTU[0] = PFU1[16];CNVTU[1] = 0;CNVTU[2] = 2
  CNVTA = U2 \ Gosub CONVERT
  U2 = 0 - AMOUNT
End If 
If REC_CMDTY
  Rem {begin src/inc/read.commcode.i}
  Mat Read #CH_CMDTY,REC_CMDTY,0;CMDTY$
  Mat Read #CH_CMDTY,REC_CMDTY,36;CMDTYMULTI
  Mat Read #CH_CMDTY,REC_CMDTY,440;CMDTYBASE
  Mat Read #CH_CMDTY,REC_CMDTY,642;CMDTYBRKFLAG
  Mat Read #CH_CMDTY,REC_CMDTY,844;CMDTY3
  Mat Read #CH_CMDTY,REC_CMDTY,852;CMDTYUPCHG$
  Mat Read #CH_CMDTY,REC_CMDTY,953;CMDTYUPCHG
  Mat Read #CH_CMDTY,REC_CMDTY,1357;CMDTYBRKTBL
  Rem {end read.commcode.i}
  Unlock #CH_CMDTY
  If Not(CMDTYBASE[P3]) And Not(CMDTYMULTI[P3]) Let CMDTYMULTI[P3] = 1
Else 
  CMDTYBASE[P3] = 0;CMDTYMULTI[P3] = 0
End If 
Return 
SETWHSE: Rem "check/set warehouse with valid data
If WHSEPR ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let PR_C4[3] = WHPARC[1] Else If X2 Let PR_C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = PR_C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If REC_PRWH Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
SETPEND: Rem "Set any pending (if needed)
If Not(FUTURE) Return 
If PRPARC[0] Let HLDCOST = B[8];B[8] = PRPARC[0]
If PFTB[0] Let B[22] = PFTB[0]
If PFTB[1] Let PR_C4[3] = PFTB[1]
X2 = PFCO[1] \ Gosub YMD2JUL \ X2 = 0
JDATE[1] = X2
If PFCO[0] And JDATE[1] <= JDATE[0] ! "Pending Base and within Eff Date
  HLDCOST = PR_C4[4];PR_C4[4] = PFCO[0]
End If 
X2 = PLC[1] \ Gosub YMD2JUL \ X2 = 0
JDATE[1] = X2
If PLC[0] And JDATE[1] <= JDATE[0] ! "Pending Last and within Eff Date
  HLDCOST = B[10];B[10] = PLC[0]
End If 
If WHSEPR
  If WHMISC[0] Let HLDCOST = W3[17];W3[17] = WHMISC[0]
  If WHPARC[4] Let WHPARC[0] = WHPARC[4]
  If WHPARC[5] Let WHPARC[1] = WHPARC[5]
  X2 = W7[3] \ Gosub YMD2JUL \ X2 = 0
  JDATE[1] = X2
  If W7[2] And JDATE[1] <= JDATE[0] Let HLDCOST = W3[18];W3[18] = W7[2]
  X2 = W7[13] \ Gosub YMD2JUL \ X2 = 0
  JDATE[1] = X2
  If W7[7] And JDATE[1] <= JDATE[0] Let HLDCOST = W3[16];W3[16] = W7[7]
End If 
Return 
GETLP: Rem "search for last price record
START = 0;END_ = 999
If L9[1] Let START = L9[1];END_ = L9[1]
If Not(LPDEPT) Let START = 0;END_ = 0
X2 = START
LOOPME: Rem "search next department
I1$ = " ",I1$;I1$[1,6] = CUSTCODE Using "######"
I1$[7,9] = X2 Using "###"
I1$[10] = A$[140,151]
Search #CH_LASTPR,2,1;I1$,REC_LASTPR,E \ If E > 1 Gosub ERR_SEARCH
If E Let REC_LASTPR = 0
X2 = X2 + 1
If Not(REC_LASTPR) And X2 <= END_ Goto LOOPME
Return 
READLP: Rem "get last price record
Rem {begin src/inc/read.lastpr.i}
Mat Read #CH_LASTPR,REC_LASTPR,0;LP$
Read #CH_LASTPR,REC_LASTPR,12;LPDF
Mat Read #CH_LASTPR,REC_LASTPR,16;LPC1
Mat Read #CH_LASTPR,REC_LASTPR,28;LPC2
Mat Read #CH_LASTPR,REC_LASTPR,46;LPC3
Mat Read #CH_LASTPR,REC_LASTPR,56;LP2$
Mat Read #CH_LASTPR,REC_LASTPR,140;LPC4
Mat Read #CH_LASTPR,REC_LASTPR,164;LPMT$
Read #CH_LASTPR,REC_LASTPR,166;AI
Mat Read #CH_LASTPR,REC_LASTPR,168;LPR
Mat Read #CH_LASTPR,REC_LASTPR,198;LPR1
Mat Read #CH_LASTPR,REC_LASTPR,214;LPEUN
Mat Read #CH_LASTPR,REC_LASTPR,220;LPUNF
Mat Read #CH_LASTPR,REC_LASTPR,262;PERM
Read #CH_LASTPR,REC_LASTPR,274;LPWH
Mat Read #CH_LASTPR,REC_LASTPR,276;LPC5
Read #CH_LASTPR,REC_LASTPR,292;LPPCDATE
Read #CH_LASTPR,REC_LASTPR,296;LPLPERM
Mat Read #CH_LASTPR,REC_LASTPR,302;LPCURR
Read #CH_LASTPR,REC_LASTPR,314;LPCPT
Read #CH_LASTPR,REC_LASTPR,316;LPCSDT
Mat Read #CH_LASTPR,REC_LASTPR,324;LPFPERM
Rem {end read.lastpr.i}
Unlock #CH_LASTPR
Return 
CONVORD: Rem "convert ordered quantity to sell unit
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1;CNVTA = L7[2]
Gosub CONVERT
UWORK[0] = AMOUNT
Return 
UPCHARGE: Rem "see if any up charges are warranted
If P61$[37,37] = "Y" Or (L9[0] = 0 Or L9[0] = 1 Or L9[0] = 9 Or (L9[0] <= -1 And L9[0] >= -7)) ! "valid.  added -7 perms
  If L7[8] Let U2 = L7[8]
  L7[8] = 0
  If UN[0] = PFU1[16] And Not(Fra(UWORK[0])) Return 
  CNVTU[0] = UN[0];CNVTU[1] = PFU1[16];CNVTU[2] = 5;CNVTA = Abs(UWORK[0])
  Gosub CONVERT
  If AMOUNT > 0 And AMOUNT < 1
    L7[8] = U2
    If P60$[50,50] = "Y"
      If CMDTYUPCHG$[P3,P3] = "$"
        L7[8] = - CMDTYUPCHG[P3]
      Else 
        If CMDTYUPCHG$[P3,P3] = "%"
          L7[8] = CMDTYUPCHG[P3]
        End If 
      End If 
    End If 
  Else 
    L7[8] = 0
  End If 
End If 
Return 
UPTYPE: Rem "get upcharge type
DTYPE$ = DTYPE$," with up-charge"
If L7[8] > 0
  DDESC$ = DDESC$," +",L7[8] Using "###% u/c"
Else 
  CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = L7[8]
  Gosub CONVERT
  DDESC$ = DDESC$," +",Abs(AMOUNT) Using "###.## u/c"
End If 
Return 
CALCLOAD: Rem "get loads
CNVTA = 0
If WHSEPR
  If WHLM[0]
    WH = WHSE;LTBL = WHLM[0];CNVTA = 0
    If PREC[0] And LTBL Gosub GETLOAD
    W3[17] = CNVTA
  End If 
  If WHLM[1]
    WH = WHSE;LTBL = WHLM[1];CNVTA = 0
    If PREC[0] And LTBL Gosub GETLOAD
    W3[14] = CNVTA
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    If PREC[0] And LTBL Gosub GETLOAD
    B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    If PREC[0] And LTBL Gosub GETLOAD
    PF_LOAD2 = CNVTA
  End If 
End If 
Return 
GETLOAD: Rem "calculated load costs
REC_LMARK = LTBL;COST = CNVTA
If REC_LMARK > 0 And REC_LMARK < Chf(CH_LMARK) ! "valid record
  Mat Read #CH_LMARK,REC_LMARK,24;LM1;
  Mat Read #CH_LMARK,REC_LMARK,480;LM2;
  If Not(LM1[H5[7] - 1,4]) Or (LM1[H5[7] - 1,4] = 5 And COST <= 0) Return 
  BASE = LM1[H5[7] - 1,4]
  If NOPROD And BASE <> 5 Return 
  If WHSEPR
    If BASE = 1 Let COST = W3[15]
    If BASE = 2 Let COST = W3[16]
    If BASE = 3 Let COST = W3[18]
    If BASE = 4 Let COST = WHMISC[2]
  Else 
    If BASE = 1 Let COST = B[21]
    If BASE = 2 Let COST = B[10]
    If BASE = 3 Let COST = PR_C4[4]
    If BASE = 4 Let COST = PRPARC[2]
  End If 
  CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = COST
  Gosub CONVERT
  M7 = AMOUNT
  For X1 = 0 To 3
    M6 = LM2[H5[7] - 1,X1];M5 = LM1[H5[7] - 1,X1]
    If M6
      If Not(M5) Let M7 = M7 + (M7 * (M6 / 100))
      If M5 = 1 Let M7 = M7 + M6
      If M5 = 2 Let M7 = (M7 / (100 - M6)) * 100
      If M5 = 3 ! "cwt
        CNVTU[0] = -1;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = M6
        Gosub CONVERT
        M7 = M7 + AMOUNT
      End If 
    End If 
  Next X1
  CNVTA = M7
  CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2
  Gosub CONVERT
  CNVTA = AMOUNT
End If 
Return 
SETCOST: Rem "get default cost
If WHSEPR ! "set loads
  L5[1] = W3[17];LCO = 2;DCOST$ = "load"
  If DFT_COST = 2
    L5[1] = W3[14];LCO = 5;DCOST$ = "redi"
  Else 
    If DFT_COST = 3
      L5[1] = W3[15];LCO = 4;DCOST$ = "average"
    Else 
      If DFT_COST = 4
        L5[1] = W3[16];LCO = 3;DCOST$ = "last"
      Else 
        If DFT_COST = 5
          L5[1] = W3[18];LCO = 1;DCOST$ = "base"
        End If 
      End If 
    End If 
  End If 
Else 
  L5[1] = B[8];LCO = 2;DCOST$ = "load"
  If DFT_COST = 2
    L5[1] = PF_LOAD2;LCO = 5;DCOST$ = "redi"
  Else 
    If DFT_COST = 3
      L5[1] = B[21];LCO = 4;DCOST$ = "average"
    Else 
      If DFT_COST = 4
        L5[1] = B[10];LCO = 3;DCOST$ = "last"
      Else 
        If DFT_COST = 5
          L5[1] = PR_C4[4];LCO = 1;DCOST$ = "base"
        End If 
      End If 
    End If 
  End If 
End If 
Gosub SET2NDLINECOST
Return 
SET2NDLINECOST: Rem "get specified cost for later use in reports
If WHSEPR
  If COST2 = 1 Let CST[0] = W3[17]
  If COST2 = 2 Let CST[0] = W3[14]
  If COST2 = 3 Let CST[0] = W3[15]
  If COST2 = 4 Let CST[0] = W3[16]
  If COST2 = 5 Let CST[0] = W3[18]
  If COST2 = 7 Let CST[0] = WHMISC[2]
Else !"product pricing
  If COST2 = 1 Let CST[0] = B[8]
  If COST2 = 2 Let CST[0] = PF_LOAD2
  If COST2 = 3 Let CST[0] = B[21]
  If COST2 = 4 Let CST[0] = B[10]
  If COST2 = 5 Let CST[0] = PR_C4[4]
  If COST2 = 7 Let CST[0] = PRPARC[2]
End If 
Return 
SETPENDCOST: Rem "set future permanent fixed price
If Not(FUTURE) Return 
If LPEUN[2] <> -7 Return 
If PERM[1] = 0 Or L5[1] = 0 Return 
If PERM[1] = L5[1] Return 
If NOLOWER And PERM[1] > L5[1] Return 
PERM[0] = L5[1] + (L5[1] * ((PERM[0] - PERM[1]) / PERM[1]))
Return 
GETPERM: Rem "check for permanent price
UNITPRICE = 0;L9[0] = 0
BASEHOLD = 0;DDESC$ = " ",DDESC$;DTYPE$ = " ",DTYPE$;DBASE$ = " ",DBASE$
If LPEUN[2] <= -1 And LPEUN[2] >= -6 ! "lp 1-6
  If MATPR And PR_C4[2] = 1 And (PERM[0] >= 1 And PERM[0] <= 6) ! "validate
    FIELD = PERM[0] ! + 1
    BASE = PR_C4[4]
    If WHSEPR Let BASE = W3[18]
    If PR_C4[3] ! "have a markup table?
      Gosub GETMATPRICE
      If WHSEPR Let W3[18 + FIELD] = X4 Else Let A[19 + FIELD] = X4
    End If 
    If WHSEPR Let UNITPRICE = W3[18 + FIELD] Else Let UNITPRICE = A[19 + FIELD]
    If UNITPRICE ! "last price type
      L9[0] = LPEUN[2]
      DTYPE$ = PERM[0] Using "Permanent list #"
      If PR_C4[3] Let DTYPE$ = DTYPE$,PR_C4[3] Using " (table ###)"
    End If 
  End If 
End If 
If LPEUN[2] <= -8 And LPEUN[2] >= -17 ! "bracket 1-10
  If PR_C4[2] = 2 And (PERM[0] >= 1 And PERM[0] <= 10) ! "validate
    C3[0] = 4;C3[1] = PERM[0]
    Gosub GETTENBPRICE
    If UNITPRICE
      L9[0] = LPEUN[2]
      DTYPE$ = PERM[0] Using "Permanent bracket ##"," (table "
      DTYPE$ = DTYPE$,PR_C4[3] Using "###)"
    End If 
  End If 
End If 
If LPEUN[2] = -7 ! "fixed price
  If FUTURE Gosub SETPENDCOST
  UNITPRICE = PERM[0]
  If UNITPRICE < 0
    UNITPRICE = 0
  Else 
    L9[0] = LPEUN[2]
    DTYPE$ = "Permanent fixed price"
  End If 
End If 
If LPEUN[2] = 9 ! "fixed break level
  If MATPR And PR_C4[2] = 1 And (PERM[0] >= 1 And PERM[0] <= 10) ! "validate
    UNITPRICE = 0;JUMP_ = - PERM[0];L7[9] = 0
    DTYPE$ = PERM[0] Using "Permanent break level ##"
    DTYPE$ = DTYPE$,B[22] Using " (table ###)"
  End If 
End If 
If LPEUN[2] = 10 ! "percent discount
  If PERM[0] >= 1 And PERM[0] <= 100 ! "validate
    L6[0] = PERM[0];L6[1] = 0;L9[0] = LPEUN[2];L7[9] = 0;UNITPRICE = 0
    DTYPE$ = PERM[0] Using "Permanent discount of ###%"
  End If 
End If 
If LPEUN[2] = 14 ! "gtm percent
  If PERM[0] >= 1 And PERM[0] <= 99.99 ! "validate
    UNITPRICE = (L5[1] / ((100 - PERM[0]) / 100))
    If UNITPRICE
      L9[0] = LPEUN[2]
      DTYPE$ = PERM[0] Using "Permanent margin of ###.##%"
      CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = L5[1]
      Gosub CONVERT
      DDESC$ = AMOUNT Using PMASK$," [",DCOST$," cost] + "
      DDESC$ = DDESC$,PERM[0] Using "###.##% margin"
    End If 
  End If 
End If 
If DTYPE$[1,3] = "   " Let DDESC$ = " ",DDESC$
Return 
GETMATPRICE: Rem "calculate matrix price from markup table
if field>0 and field<7 ! "don't do loads here 1-6 = LP 1-6
	let Rec_PMark=PR_C4[3] ! " (field*1000)-1000+pr_c4[3]
	if Rec_Pmark>0 ! "get table
		mat read #CH_PMark,Rec_PMark,18;pm5;
		mat read #CH_PMark,Rec_PMark,78;pm6;
		Let X1[5]=Field-1 ! "so ends as 0-5
		If PM5[x1[5],4]=1
		  Let Base=B[10] \ if WhsePr Let Base=W3[16] ! "last
		Endif
		If PM5[x1[5],4]=2 ! "load cost
		  Let Base=B[8] \ if WhsePr Let Base=W3[17]
		Endif
		If PM5[x1[5],4]=3 ! "load2 cost
		  Let Base=PF_Load2 \ if WHSEPR Let Base=W3[14]
		Endif
		If PM5[x1[5],4]=4 ! "average cost
		  Let Base=B[21] \ if WHSEPR Let Base=W3[15]
		Endif
		If PM5[x1[5],4]=5 ! "NET PO
		  Let Base=PRPARC[2] \ if WhsePr Let Base=WHMISC[2]
		Endif
		CNVTA = BASE;CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
		Gosub CONVERT
		M7 = AMOUNT
		CNVTA = BASE;CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2
		Gosub CONVERT
		BASEHOLD = AMOUNT
		!DDESC$ = "([",DBASE$,"] ",BASEHOLD Using PMASK$
		let ddesc$="([",dbase$,"] "
		if pm5[x1[5],4]=0 let ddesc$=ddesc$,"BSC "
		if pm5[x1[5],4]=1 let ddesc$=ddesc$,"POC "
		if pm5[x1[5],4]=2 let ddesc$=ddesc$,"LDC "
		if pm5[x1[5],4]=3 let ddesc$=ddesc$,"L2C "
		if pm5[x1[5],4]=4 let ddesc$=ddesc$,"AVC "
		if pm5[x1[5],4]=4 let ddesc$=ddesc$,"NPC "
		let ddesc$=ddesc$,basehold using pmask$
		X1 = 0
MARKLOOP1: Rem "calculate price
		let X1[5]=Field-1 ! "so ends as 0-5
        !"cct135153 "cct168744
		if (mode=0 or mode=1) and pm6[x1[5],0]=0 and pm6[x1[5],1]=0 and pm6[x1[5],2]=0 and pm6[x1[5],3]=0 
			let m7=0
		endif

		if pm6[x1[5],x1] ! "have a factor
			let cnvtu[0]=pfu1[11];cnvtu[1]=un[1];cnvtu[2]=2
			
			if not(pm5[X1[5],x1])
				let ddesc$=ddesc$,pm6[X1[5],x1] using " +###.##%"
				let m7=m7+(m7*(pm6[X1[5],x1]/100)) ! "%
			endif
			
			if pm5[X1[5],x1]=1
				let cnvta=pm6[X1[5],x1] \ gosub Convert:
				if pm6[X1[5],x1]>=0 let ddesc$=ddesc$," +" else let ddesc$=ddesc$," "
				let ddesc$=ddesc$,amount using pmask$
				let m7=m7+pm6[X1[5],x1] ! "$
			endif
			
			if pm5[X1[5],x1]=2
				let ddesc$=ddesc$,pm6[X1[5],x1] using " +###.##% g/p"
				let m7=(m7/(100-pm6[X1[5],x1]))*100 ! "margin
			endif
			If Debug Let DBG$="Val="+Str$(X1)+" NV="+Str$(M7) \ gosub dbg:
			if x1<3 let x1=x1+1 \ goto MarkLoop1: ! "next
		endif
		DDESC$ = DDESC$,")"
		CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = M7
		Gosub CONVERT
		X4 = AMOUNT
  End If ! of valid table
End If ! of valid field # (1-6)
Return 
GETTENBPRICE: Rem "calculate 10 bracket price from tables
UNITPRICE = 0
If (PR_C4[3] > 0 And B[22])
  BRACKET = 0
  If C3[0] = 4
    BRACKET = C3[1]
  Else 
    REC_BRKTBL = B[22]
    Mat Read #CH_BRKTBL,REC_BRKTBL,0;B1;
    Read #CH_BRKTBL,REC_BRKTBL,200;B3;
    Mat Read #CH_BRKTBL,REC_BRKTBL,202;BRD$;
    If B3 = 2 ! "right type
      CNVTA = Abs(UWORK[0]);CNVTU[0] = UN[0];CNVTU[1] = PFU1[8];CNVTU[2] = 1
      Gosub CONVERT
      UWORK[5] = AMOUNT
      For X1 = 9 To 0 Step -1
        X2 = Abs(B1[X1,0])
        If (B1[X1,0] < 0 And S3[4] >= X2) Or (B1[X1,0] >= 0 And UWORK[5] >= X2)
          BRACKET = X1 + 1;X1 = -99
        End If 
      Next X1
      If C3[0] = 5 Let BRACKET = BRACKET + C3[1]
    End If 
  End If 
  If BRACKET > 10 Let BRACKET = 10
  If BRACKET
GET_PRODMARK_REC: Rem "get record number
    REC_PRODMARK = (BRACKET * 1000) - 1000 + PR_C4[3]
    If REC_PRODMARK > 0 ! "get table
      Mat Read #CH_PRODMARK,REC_PRODMARK,0;M5;
      Mat Read #CH_PRODMARK,REC_PRODMARK,10;M6;
      If BRACKET > 1 And Not(M6[0]) Let BRACKET = BRACKET - 1 \ Goto GET_PRODMARK_REC
      CNVTA = PR_C4[4] \ If P9$[32,32] = "Y" Let CNVTA = W3[18]
      CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2
      Gosub CONVERT
      M7 = AMOUNT
      CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2
      CNVTA = PR_C4[4] \ If P9$[32,32] = "Y" Let CNVTA = W3[18]
      Gosub CONVERT
      BASEHOLD = AMOUNT
      DDESC$ = "(",BASEHOLD Using PMASK$
      X1 = 0
MARKLOOP2: Rem "calculate price
      If M6[X1] ! "have a factor
        CNVTU[0] = PFU1[11];CNVTU[1] = UN[1];CNVTU[2] = 2
        If Not(M5[X1])
          DDESC$ = DDESC$,M6[X1] Using " +###.##%"
          M7 = M7 + (M7 * (M6[X1] / 100))
        End If 
        If M5[X1] = 1
          CNVTA = M6[X1] \ Gosub CONVERT
          If M6[X1] >= 0 Let DDESC$ = DDESC$," +" Else Let DDESC$ = DDESC$," "
          DDESC$ = DDESC$,AMOUNT Using PMASK$
          M7 = M7 + M6[X1]
        End If 
        If M5[X1] = 2
          DDESC$ = DDESC$,M6[X1] Using " +###.##% g/p"
          M7 = (M7 / (100 - M6[X1])) * 100
        End If 
        If X1 < 3 Let X1 = X1 + 1 \ Goto MARKLOOP2
      End If 
      DDESC$ = DDESC$,")"
      If P60$[18,18] = "Y" And PFU1[11] = -1 Let M7 = FNF(M7)
      CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = M7
      Gosub CONVERT
      UNITPRICE = AMOUNT
    End If 
  End If 
End If 
If UNITPRICE And Not(L9[0]) Let L9[0] = 5;OLM[2] = 0
Return 
MATPSETUP: Rem "setup for matrix price calculation
DBASE$ = " ",DBASE$
If Not(CMDTYBASE[P3]) Let CMDTYBASE[P3] = CMDTYMULTI[P3] + 2;CMDTYMULTI[P3] = 1
If CMDTYBASE[P3] = 1 Let DBASE$ = "load cost"
If CMDTYBASE[P3] = 2 Let DBASE$ = "last cost"
If CMDTYBASE[P3] >= 3 And CMDTYBASE[P3] <= 8 Let FIELD = CMDTYBASE[P3] - 2;DBASE$ = CMDTYBASE[P3] - 2 Using "list #"
If CMDTYBASE[P3] = 9 Let DBASE$ = "base cost"
If CMDTYBASE[P3] = 10 Let DBASE$ = "redi cost"
If CMDTYBASE[P3] >= 3 And CMDTYBASE[P3] <= 8 And PR_C4[3] ! "get base to use
  If WHSEPR
    BASE = W3[18]
    Gosub GETMATPRICE
    If FIELD > 0 And FIELD < 7 Let W3[18 + FIELD] = X4
  Else 
    BASE = PR_C4[4]
    Gosub GETMATPRICE
    If FIELD > 0 And FIELD < 7 Let A[19 + FIELD] = X4
  End If 
End If 
If WHSEPR ! "set price now
  If CMDTYBASE[P3] = 1 Let UNITPRICE = W3[17]
  If CMDTYBASE[P3] = 2 Let UNITPRICE = W3[16]
  If CMDTYBASE[P3] >= 3 And CMDTYBASE[P3] <= 8 Let UNITPRICE = W3[16 + CMDTYBASE[P3]]
  If CMDTYBASE[P3] = 9 Let UNITPRICE = W3[18]
  If CMDTYBASE[P3] = 10 Let UNITPRICE = W3[14]
Else 
  If CMDTYBASE[P3] = 1 Let UNITPRICE = B[8]
  If CMDTYBASE[P3] = 2 Let UNITPRICE = B[10]
  If CMDTYBASE[P3] >= 3 And CMDTYBASE[P3] <= 8 Let UNITPRICE = A[17 + CMDTYBASE[P3]]
  If CMDTYBASE[P3] = 9 Let UNITPRICE = PR_C4[4]
  If CMDTYBASE[P3] = 10 Let UNITPRICE = PF_LOAD2
End If 
If UNITPRICE And (CMDTYBASE[P3] = 1 Or CMDTYBASE[P3] = 2 Or CMDTYBASE[P3] = 9 Or CMDTYBASE[P3] = 10 Or Not(PR_C4[3]))
  CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = UNITPRICE
  Gosub CONVERT
  DDESC$ = "([",DBASE$,"] ",AMOUNT Using PMASK$,")"
End If 
If Not(CMDTYMULTI[P3]) Let CMDTYMULTI[P3] = 1
UNITPRICE = UNITPRICE * CMDTYMULTI[P3]
If CMDTYMULTI[P3] <> 1 Let DDESC$ = DDESC$,CMDTYMULTI[P3] Using " x##.### factor"
If UNITPRICE And Not(L9[0]) Let L9[0] = 1;OLM[2] = 0
Return 
CHECKBREAK: Rem "check break table for discount
If AMALG Or L9[0] = 10 Or PR_C4[2] <> 1 Or (Not(CMDTYBRKFLAG[P3]) And MATPR) Return 
L6[0] = 0;L6[1] = 0;UWORK[11] = 0;PPBREAK = 0
If L9[0] = 1 Or L9[0] = 9 Or JUMP_ ! "check for break
  L7[9] = 0
  L5[0] = FNR(L7[2] * UNITPRICE)
  If UN[1] = -2 Let L5[0] = FNR(UNITPRICE)
  If P60$[50,50] = "Y" And CMDTYBRKTBL[P3] > 0 And CMDTYBRKTBL[P3] <= Chf(CH_BRKTBL)
    REC_BRKTBL = CMDTYBRKTBL[P3]
  Else 
    REC_BRKTBL = B[22]
    If REC_BRKTBL <= 0 Or REC_BRKTBL > Chf(CH_BRKTBL) Goto ENDBREAK
  End If 
  Mat Read #CH_BRKTBL,REC_BRKTBL,0;B1;
  Read #CH_BRKTBL,REC_BRKTBL,200;B3;
  Mat Read #CH_BRKTBL,REC_BRKTBL,202;BRD$;
  If (B3 = 1 Or B3 = 3) ! "valid type
    If JUMP_ < 0 ! "manual level
      L7[9] = REC_BRKTBL + (Abs(JUMP_) / 100)
      JUMP_ = 0
    End If 
    I = -1
    If L7[9] And Not(JUMP_)
      I = Int(Fra(L7[9]) * 100) - 1
      L7[9] = 0
    End If 
    If (I >= 0 And I <= 9) ! "fixed level
      X4 = B1[I,2];T0 = B1[I,1];PPBREAK = 1
    Else 
      X4 = 0;T0 = 99;I1 = 9
      CNVTU[0] = UN[0];CNVTU[1] = PFU1[8];CNVTU[2] = 5
      CNVTA = UWORK[0] \ Gosub CONVERT
      STOCK = AMOUNT
      If B3 = 1 Let BRKAMT = Abs(STOCK)
      If B3 = 3 Let BRKAMT = Abs(L5[0])
      For I = I1 To 0 Step -1
        If B1[I,0] < 0 Goto ENDBREAK
        If (B1[I,0] Or Not(I)) And BRKAMT >= B1[I,0] Goto GOTBREAK
      Next I
      If B3 = 1 If JUMP_ !if the qty is too low still use the special price
        I = -1
        Goto GOTBREAK
      End If 
      Goto ENDBREAK
GOTBREAK: Rem "found a valid level
      If JUMP_ Let I = I + JUMP_;PPBREAK = 1 \ If I > 9 Let I = 9
      X4 = B1[I,2];T0 = B1[I,1]
    End If 
CHECKVALID: Rem "see if any amount
    If Not(X4) And I > 0 ! "try again
      I = I - 1
      X4 = B1[I,2];T0 = B1[I,1]
      Goto CHECKVALID
    End If 
    If X4 ! "have one
      If Not(T0)
        L6[0] = X4
        If L6[0] Let DDESC$ = DDESC$," -",L6[0] Using "###.##% break"
      Else 
        L6[1] = X4
        CNVTU[0] = PFU1[8];CNVTU[1] = 0;CNVTU[2] = 2
        CNVTA = L6[1] \ Gosub CONVERT
        L6[1] = AMOUNT;X4 = AMOUNT
      End If 
      L7[9] = REC_BRKTBL + ((I + 1) / 100);JUMP_ = 0
    End If 
  End If 
ENDBREAK: Rem "continue on
  If L6[1] > UNITPRICE Let L6[1] = UNITPRICE;X4 = UNITPRICE
End If 
If L6[0] Or L6[1]
  L9[0] = 9
  If Not(PPBREAK)
    DTYPE$ = DTYPE$," less break (table",REC_BRKTBL Using "###",", level",I + 1 Using "##"
    If BRD$[(I + 1) * 10 - 9,(I + 1) * 10 - 8] <> "  " Let DTYPE$ = DTYPE$,"-",BRD$[(I + 1) * 10 - 9,(I + 1) * 10]
    DTYPE$ = DTYPE$,")"
  End If 
Else 
  L7[9] = 0
End If 
If L6[1]
  CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = L6[1]
  Gosub CONVERT
  UWORK[11] = AMOUNT
  DDESC$ = DDESC$," -",UWORK[11] Using "###.##"," break"
Else 
  UWORK[11] = 0
End If 
If L9[0] = 9 Let OLM[2] = 0
Return 
SP_CHKREBATE: Rem "check for any rebate
Mat REBATE_ARGS = Zer
REBATE_ARGS[1,0] = CH_PROD
REBATE_ARGS[2,0] = CH_PRWH
REBATE_ARGS[3,0] = CH_VENDTAG
REBATE_ARGS[4,0] = CH_RCONTRACTH
REBATE_ARGS[5,0] = CH_REBATEDTL
REBATE_ARGS[1,1] = REC_PROD
REBATE_ARGS[2,1] = REC_PRWH
REBATE_ARGS[1,2] = WHSE
REBATE_ARGS[2,2] = CUSTCODE
REBATE_ARGS[3,2] = 0
REBATE_ARGS[4,2] = H0[9]
REBATE_ARGS[5,2] = P3
!Call "rebates",REBATE_ARGS[],A$[140,151],STATUS
Call rebates(e$,REBATE_ARGS[],A$[140,151],status) ! ,debug,dlog$) ,rstr$)
If Not(STATUS) !"indicates call was successful in finding rebate
  RBCOST = REBATE_ARGS[1,3]
  RBSLCOST = REBATE_ARGS[2,3]
  RB_BASECOST = REBATE_ARGS[4,3]
  REBATE_TYPE = REBATE_ARGS[7,3]
  REC_REBATEDTL = REBATE_ARGS[5,1]
  Rem {begin src/inc/read.rebatedtl.i}
  Mat Read #CH_REBATEDTL,REC_REBATEDTL,12;RB1
  Mat Read #CH_REBATEDTL,REC_REBATEDTL,36;RBUM
  Mat Read #CH_REBATEDTL,REC_REBATEDTL,40;RB
  Mat Read #CH_REBATEDTL,REC_REBATEDTL,118;RBWH
  Mat Read #CH_REBATEDTL,REC_REBATEDTL,126;RBL1
  Mat Read #CH_REBATEDTL,REC_REBATEDTL,138;RB5
  Rem {end read.rebatedtl.i}
  LCO[1] = RB1[0]
  If COST2RBT !"use lower of default 2nd line cost and rebate cost
    If RBCOST And RBCOST < CST Let CST = RBCOST
  End If 
  If COST2 = 6 Let CST = RBCOST
  If RBSLCOST And (Not(L5[1]) Or RBSLCOST < L5[1])
    L5[1] = RBSLCOST;DCOST$ = "rebate"
    LCO = 10
  End If 
Else 
  RBCOST = 0;RBSLCOST = 0;LCO[1] = 0
End If 
Return 
SP_CHKCONTRACT: Rem "check for contract for particular SP type
I$ = " ",I$;I$[1,6] = CUSTCODE Using "######"
CT_HEADER: Rem "search header for match
Search #CH_CTRCT,3,2;I$,REC_CTRCT,E
If Not(E)
  X2 = I$[1,6]
  If X2 = CUSTCODE
    K9$[1,6] = I$[7,12]
    Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E1
    If Not(E1)
      Gosub SP_GETIT
      If Not(UNITPRICE) Goto CT_HEADER
      OLM[2] = I$[8,12]
    Else 
      Goto CT_HEADER
    End If 
  End If 
End If 
Return 
SP_CHKSP: Rem "check for a general special price
If DEBUG Let DBG$ = "Checking special price..." \ Gosub DBG
SPSLCOST = 0;UNITPRICE = 0;SBASE_TYPE = 0
PROD = 99;L9[0] = 2
K9$ = " ",K9$;K9$[1,6] = CUSTCODE Using "######"
K9$[7,18] = A$[140,151];K9$[19] = ""
Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
If E > 1 Gosub ERR_SEARCH
If Not(E)
  Gosub SP_GETIT
  If UNITPRICE And DEBUG Let DBG$ = "Got single cust/prod price" \ Gosub DBG
  If UNITPRICE Goto SP_END
End If 
Gosub SP_CHKCONTRACT
If UNITPRICE And DEBUG Let DBG$ = "Got contract price" \ Gosub DBG
If UNITPRICE Goto SP_END
If NOPROMO = 0 !  ok for promos
  If DEBUG Let DBG$ = "Checking single product promo..." \ Gosub DBG
  K9$[1,6] = "999999";L9[0] = 3
  Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
  If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Gosub SP_GETIT
    If UNITPRICE And DEBUG Let DBG$ = "Got single product promo" \ Gosub DBG
    If UNITPRICE Goto SP_END
  End If 
End If 
If Spc(6) = 49 Stop 
If DEBUG Let DBG$ = "Checking cust/commodity..." \ Gosub DBG
PROD = 0;L9[0] = 4
K9$ = " ",K9$;K9$[1,6] = CUSTCODE Using "######";K9$[7,7] = "*"
K9$[8,11] = A$[152,155];K9$[19] = ""
Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
If E > 1 Gosub ERR_SEARCH
If Not(E)
  Gosub SP_GETIT
  If UNITPRICE And DEBUG Let DBG$ = "Got cust/commodity price" \ Gosub DBG
  If UNITPRICE Goto SP_END
End If 
Gosub SP_CHKCONTRACT
If UNITPRICE And DEBUG Let DBG$ = "Got contract price" \ Gosub DBG
If UNITPRICE Goto SP_END
If NOPROMO = 0 !  ok for promos
  If DEBUG Let DBG$ = "Checking commodity promo..." \ Gosub DBG
  K9$[1,6] = "999999";L9[0] = 7
  Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
  If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Gosub SP_GETIT
    If UNITPRICE And DEBUG Let DBG$ = "Got commodity promo" \ Gosub DBG
    If UNITPRICE Goto SP_END
  End If 
End If 
If DEBUG Let DBG$ = "Checking customer/size..." \ Gosub DBG
L9[0] = 12
UNIT = PFU1[19];UNIT$ = " ",UNIT$
If UNIT > 0 Mat Read #CH_CCODES,UNIT,10;UNIT$;
K9$ = " ",K9$;K9$[1,6] = CUSTCODE Using "######";K9$[7,7] = "&"
K9$[8,11] = UNIT$[1,4];K9$[12,15] = UNIT Using "####";K9$[19] = ""
Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
If E > 1 Gosub ERR_SEARCH
If Not(E)
  Gosub SP_GETIT
  If UNITPRICE And DEBUG Let DBG$ = "Got customer/size price" \ Gosub DBG
  If UNITPRICE Goto SP_END
End If 
If UNITPRICE And DEBUG Let DBG$ = "Got contract price" \ Gosub DBG
Gosub SP_CHKCONTRACT
If UNITPRICE Goto SP_END
If NOPROMO = 0 ! ok for promos
  If DEBUG Let DBG$ = "Checking size promo..." \ Gosub DBG
  K9$[1,6] = "999999";L9[0] = 11
  Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
  If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Gosub SP_GETIT
    If UNITPRICE And DEBUG Let DBG$ = "Got size promotion" \ Gosub DBG
    If UNITPRICE Goto SP_END
  End If 
End If 
If DEBUG Let DBG$ = "Checking cust/all prod..." \ Gosub DBG
L9[0] = 6
K9$ = " ",K9$;K9$[1,6] = CUSTCODE Using "######"
K9$[7,7] = "#";K9$[19] = ""
Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
If E > 1 Gosub ERR_SEARCH
If Not(E)
  Gosub SP_GETIT
  If UNITPRICE And DEBUG Let DBG$ = "Got cust/all product price" \ Gosub DBG
  If UNITPRICE Goto SP_END
End If 
Gosub SP_CHKCONTRACT
If UNITPRICE Goto SP_END
If NOPROMO = 0 ! ok for promos
  If DEBUG Let DBG$ = "Checking all prod promo..." \ Gosub DBG
  K9$[1,6] = "999999";L9[0] = 8
  Search #CH_SPRICE,2,1;K9$,REC_SPRICE,E
  If E > 1 Gosub ERR_SEARCH
  If Not(E)
    Gosub SP_GETIT
    If UNITPRICE And DEBUG Let DBG$ = "Got all product promo" \ Gosub DBG
    If UNITPRICE Goto SP_END
  End If 
End If 
C3[0] = 0;C3[1] = 0;C3[2] = 0;UNITPRICE = 0;L9[0] = 0
DTYPE$ = " ",DTYPE$;DDESC$ = " ",DDESC$;DBASE$ = " ",DBASE$
SP_END: Rem "exit outta this routine
Return 
SP_GETIT: Rem "get any special price
Mat Read #CH_SPRICE,REC_SPRICE,0;PCode$;
Mat Read #CH_SPRICE,REC_SPRICE,12;SPC1;
Mat Read #CH_SPRICE,REC_SPRICE,36;SPCUM;
Mat Read #CH_SPRICE,REC_SPRICE,40;C3;
Mat Read #CH_SPRICE,REC_SPRICE,46;SPC4;
Read #CH_SPRICE,REC_SPRICE,118;SPWH;
Read #CH_SPRICE,REC_SPRICE,134;SPCOM;
Mat Read #CH_SPRICE,REC_SPRICE,138;SPC5;
Prod=99
if spc1[5]>1 let prod=0
if spc1[5]=1 and PCode$[1,3]="#  " let prod=0 ! ALL?
! any date!
!SPNOTVALID = 0
!X2 = SPC1[2] \ Gosub YMD2JUL \ X2 = 0
!JDATE[2] = X2
!If JDATE[2] > JDATE[0] Let SPNOTVALID = 1
!X2 = SPC1[4] \ Gosub YMD2JUL \ X2 = 0
!JDATE[2] = X2
!If SPC1[4] And JDATE[2] < JDATE[0] Let SPNOTVALID = 1
!If WHSEPR And SPWH And SPWH <> WHSE Let SPNOTVALID = 1
If (C3[0] = 4 Or C3[0] = 5) And PR_C4[2] <> 2 Let SPNOTVALID = 1
! ANY QUANTITY
!If C3[2]
!  UNIT = C3[2]
!  Gosub CHECKUNIT
!  If Not(UNIT) Let C3[2] = 0
!  If SPC4[0] > 0 And Not(C3[2]) Let SPNOTVALID = 1
!End If 
!If PROD And C3[2] And SPC4[0] > 0
!  CNVTU[0] = 0;CNVTU[1] = C3[2];CNVTU[2] = 1;CNVTA = L7[2]
!  Gosub CONVERT
!  If AMOUNT < SPC4[0] Let SPNOTVALID = 1
!End If 
!If (Not(PROD)) And (Not(C3[2]))
!  CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = L7[2]
!  Gosub CONVERT
!  If AMOUNT < SPC4[0] Let SPNOTVALID = 1
!End If 
If SPNOTVALID Goto SP_EXIT
UNITPRICE = 0
SPJUMP = 0
UNIT = SPCUM[0]
Gosub CHECKUNIT
If Not(UNIT) Let SPCUM[0] = UN[1]
If Not(PROD) Let SPCUM[0] = PFU1[12]
UNIT = SPCUM[1]
Gosub CHECKUNIT
If Not(UNIT) Let SPCUM[1] = UN[2]
If Not(PROD) Let SPCUM[1] = PFU1[11]
If WHSEPR ! "set cost to use
  If SPC5[4] = 1 Let BASE = W3[18]
  If SPC5[4] = 2 Let BASE = W3[17]
  If SPC5[4] = 3 Let BASE = W3[16]
  If SPC5[4] = 4 Let BASE = RBCOST
  If SPC5[4] = 5 Let BASE = W3[14]
Else 
  If SPC5[4] = 1 Let BASE = PR_C4[4]
  If SPC5[4] = 2 Let BASE = B[8]
  If SPC5[4] = 3 Let BASE = B[10]
  If SPC5[4] = 4 Let BASE = RBCOST
  If SPC5[4] = 5 Let BASE = PF_LOAD2
End If 
If SPC5[3] = 1 And BASE
  SPSLCOST = (BASE * ((100 + SPC5[1]) / 100))
End If 
If SPC5[3] = 2
  AMOUNT = 0
  If BASE
    CNVTU[0] = 0;CNVTU[1] = SPCUM[1];CNVTU[2] = 2;CNVTA = BASE
    Gosub CONVERT
  End If 
  If AMOUNT
    CNVTU[0] = SPCUM[1];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = (AMOUNT + SPC5[1])
    Gosub CONVERT
  End If 
  If AMOUNT Let SPSLCOST = AMOUNT
End If 
If SPC5[3] = 3 And SPC5[1]
  SPSLCOST = SPC5[1]
  If Not(PROD)
    CNVTU[0] = SPCUM[1];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = SPSLCOST
    Gosub CONVERT
    SPSLCOST = AMOUNT
  End If 
End If 
If SPSLCOST And (Not(L5[1]) Or SPSLCOST < L5[1] Or P61$[21,21] = "Y" Or SPC1[1] = 1)
  COSTHOLD = SPSLCOST
Else 
  COSTHOLD = L5[1]
End If 
If SPC5[3] = 5
  SPSLCOST = 0;COSTHOLD = 0;L5[1] = 0;LCO[0] = 11
End If 
If COST2RBT And SPC5[2] And SPC5[2] < CST Let CST = SPC5[2]
OLM[4] = SPCOM
UNITPRICE = SPC5[0];BASEHOLD = UNITPRICE;DTYPE$ = "S/P fixed price"
If PROD ! "single product s/p
  If Not(UNITSEQUAL)
    UN[1] = SPCUM[0];UNIT = UN[1]
  End If 
  UN[2] = SPCUM[1];UNIT = UN[2]
End If 
If Not(PROD) And C3[0] = 3 ! "fixed price for class
  CNVTU[0] = SPCUM[0];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = UNITPRICE
  Gosub CONVERT
  UNITPRICE = AMOUNT;BASEHOLD = UNITPRICE
End If 
If Not(SPC5[0]) And (C3[0] = 4 Or C3[0] = 5) ! "jump
  UNITPRICE = -1;BASEHOLD = 0
  DTYPE$ = "S/P 10 bracket/"
  If C3[0] = 4
    DTYPE$ = DTYPE$,C3[1] Using "fixed level ##"," (table"
    DTYPE$ = DTYPE$,PR_C4[3] Using "###",")"
  Else 
    DTYPE$ = DTYPE$,C3[1] Using "## level jump"," (table"
    DTYPE$ = DTYPE$,PR_C4[3] Using "###",")"
  End If 
  Goto SP_EXIT
End If 
If C3[0] = 6 ! "jump
  UNITPRICE = -2;BASEHOLD = 0;SPJUMP = 9
  DTYPE$ = "S/P matrix/",C3[1] Using "## level jump"
  DTYPE$ = DTYPE$," (table",B[22] Using "###",")"
  If SPC5[0] ! "plus markup/down
    DTYPE$ = DTYPE$,SPC5[0] Using " +###.###%"
  End If 
  Goto SP_EXIT
End If 
If (C3[0] = 1 Or C3[0] = 2) Gosub GETBASE
If C3[0] <> 3 If C3[0] <> 7 ! "not a fixed price or free good
  If SPC5[0] And (C3[0] = 4 Or C3[0] = 5)
    Gosub GETTENBPRICE
    BASE = UNITPRICE;BASEHOLD = BASE;UNITPRICE = (BASE * ((100 + SPC5[0]) / 100))
    If UNITPRICE
      DTYPE$ = "S/P 10 bracket with markup (table"
      DTYPE$ = DTYPE$,PR_C4[3] Using "###",", bracket",BRACKET Using "##",")"
      DDESC$ = DDESC$,SPC5[0] Using " +###%"
    End If 
  End If 
  If C3[0] = 1
    UNITPRICE = (BASE * ((100 + SPC5[0]) / 100))
    CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = BASEHOLD
    Gosub CONVERT
    DTYPE$ = "S/P with markup/markdown"
    If C3[1] <> 12
      DDESC$ = AMOUNT Using PMASK$," [",DBASE$,"]",SPC5[0] Using " +###.###%"
    Else 
      DDESC$ = DDESC$,SPC5[0] Using " +###.###%"
    End If 
  End If 
  If C3[0] = 2
    UNITPRICE = (BASE / ((100 - SPC5[0]) / 100))
    CNVTU[0] = 0;CNVTU[1] = UN[1];CNVTU[2] = 2;CNVTA = BASEHOLD
    Gosub CONVERT
    DTYPE$ = "S/P with margin"
    If C3[1] <> 12
      DDESC$ = AMOUNT Using PMASK$," [",DBASE$,"]",SPC5[0] Using " +###.###% g/p"
    Else 
      DDESC$ = DDESC$,SPC5[0] Using " +###.###% g/p"
    End If 
  End If 
End If 
If C3[0] = 7 Let UNITPRICE = -3
SP_EXIT: Rem get out, but check price and cost first so l5[1] gets assigned
If UNITPRICE ! "have a price
  If C3[0] = 3 And (L9[0] = 2 Or L9[0] = 4 Or L9[0] = 6 Or L9[0] = 12)
    L9[0] = 13
  End If 
  If SPSLCOST And (Not(L5[1]) Or SPSLCOST < L5[1] Or P61$[21,21] = "Y" Or SPC1[1] = 1)
    L5[1] = SPSLCOST
    DCOST$ = "spec."
    DBASE$ = "spec. cost"
    LCO = 11
  End If 
Else 
  SPC5[0] = 0;SPC5[1] = 0;BASEHOLD = 0
  DTYPE$ = " ",DTYPE$;DBASE$ = " ",DBASE$;DDESC$ = " ",DDESC$
End If 
Return 
CHECKUNIT: Rem "check if valid unit
For X1 = 0 To 7
  If UNIT = PFU1[X1] Return 
Next X1
UNIT = 0
Return 
GETBASE: Rem "get base to use for special price
If DEBUG Let DBG$ = " Getting base for special price..." \ Gosub DBG
BASE = 0;FIELD = 0
If C3[1] = 2 Let FIELD = 0
If C3[1] > 3 And C3[1] < 10 Let FIELD = C3[1] - 3
If C3[1] = 13 Let FIELD = 8
If WHSEPR
  !If FIELD And PR_C4[2] = 1 And PR_C4[3]
  If field and field<7 and pr_c4[2]=1 and pr_c4[3]
    BASE = W3[18]
    Gosub GETMATPRICE
    If FIELD > 0 And FIELD < 7 Let W3[18 + FIELD] = X4
  End If 
  If C3[1] = 1 Let BASE = W3[18];DBASE$ = "base cost"
  If C3[1] = 2 Let BASE = W3[17];DBASE$ = "load cost"
  If C3[1] = 3 Let BASE = W3[16];DBASE$ = "last cost"
  If C3[1] = 4 Let BASE = W3[19];DBASE$ = "list 1"
  If C3[1] = 5 Let BASE = W3[20];DBASE$ = "list 2"
  If C3[1] = 6 Let BASE = W3[21];DBASE$ = "list 3"
  If C3[1] = 7 Let BASE = W3[22];DBASE$ = "list 4"
  If C3[1] = 8 Let BASE = W3[23];DBASE$ = "list 5"
  If C3[1] = 9 Let BASE = W3[24];DBASE$ = "list 6"
  If C3[1] = 10 Let BASE = SPSLCOST;DBASE$ = "s/p cost"
  If C3[1] = 10 And SPC5[3] = 4 And L5[1]
    BASE = L5[1];DBASE$ = "std cost"
  End If 
  If C3[1] = 11 Let BASE = COSTHOLD;DBASE$ = DCOST$," cost"
  If C3[1] = 12
    If PERM[0]
      UNITPRICE = PERM[0]
      DDESC$ = " ",DDESC$ \ DDESC$ = "([Perm] "
      DDESC$ = DDESC$,UNITPRICE Using PMASK$ \ DDESC$ = DDESC$,") "
      Goto MOVE_ON1
    End If 
    If PR_C4[2] = 1 Gosub MATPSETUP
    If PR_C4[2] = 2 Gosub GETTENBPRICE
MOVE_ON1: BASE = UNITPRICE;UNITPRICE = 0;DBASE$ = "calc price"
  End If 
  If C3[1] = 13 Let BASE = W3[14];DBASE$ = "redi cost"
  If C3[1] = 14 Let BASE = RBCOST;DBASE$ = "rebate cst"
Else 
  !If FIELD And PR_C4[2] = 1 And PR_C4[3]
  if field and field<7 and pr_c4[2]=1 and pr_c4[3]
    BASE = PR_C4[4] \ Gosub GETMATPRICE
    if field>0 and field<7 let a[19+field]=x4
  End If 
  If C3[1] = 1 Let BASE = PR_C4[4];DBASE$ = "base cost"
  If C3[1] = 2 Let BASE = B[8];DBASE$ = "load cost"
  If C3[1] = 3 Let BASE = B[10];DBASE$ = "last cost"
  If C3[1] = 4 Let BASE = A[20];DBASE$ = "list 1"
  If C3[1] = 5 Let BASE = A[21];DBASE$ = "list 2"
  If C3[1] = 6 Let BASE = A[22];DBASE$ = "list 3"
  If C3[1] = 7 Let BASE = A[23];DBASE$ = "list 4"
  If C3[1] = 8 Let BASE = A[24];DBASE$ = "list 5"
  If C3[1] = 9 Let BASE = A[25];DBASE$ = "list 6"
  If C3[1] = 10 Let BASE = SPSLCOST;DBASE$ = "s/p cost"
  If C3[1] = 10 And SPC5[3] = 4 And L5[1]
    BASE = L5[1];DBASE$ = "std cost"
  End If 
  If C3[1] = 11 Let BASE = COSTHOLD;DBASE$ = DCOST$," cost"
  If C3[1] = 12
    If PERM[0]
      UNITPRICE = PERM[0]
      DDESC$ = " ",DDESC$ \ DDESC$ = "([Perm] "
      DDESC$ = DDESC$,UNITPRICE Using PMASK$ \ DDESC$ = DDESC$,") "
      Goto MOVE_ON2
    End If 
    If PR_C4[2] = 1 Gosub MATPSETUP
    If PR_C4[2] = 2 Gosub GETTENBPRICE
MOVE_ON2: BASE = UNITPRICE;UNITPRICE = 0;DBASE$ = "calc price"
  End If 
  If C3[1] = 13 Let BASE = PF_LOAD2;DBASE$ = "redi cost"
  If C3[1] = 14 Let BASE = RBCOST;DBASE$ = "rebate cst"
End If 
BASEHOLD = BASE
Return 
MANLP: Rem "manual list price
FIELD = LEVEL ! + 1
If MATPR And PR_C4[2] = 1 ! "validate
  BASE = PR_C4[4]
  If WHSEPR Let BASE = W3[18]
  if field and field<7 and pr_c4[3] ! "markup table?
    Gosub GETMATPRICE
    If WHSEPR Let W3[18 + FIELD] = X4 Else Let A[19 + FIELD] = X4
  End If 
End If 
If WHSEPR Let UNITPRICE = W3[18 + FIELD] Else Let UNITPRICE = A[19 + FIELD]
If UNITPRICE Let L9[0] = - LEVEL
DTYPE$ = " ",DTYPE$;DDESC$ = " ",DDESC$
Return 
MANLEVEL: Rem "manual break level
If MATPR And PR_C4[2] = 1
  JUMP_ = - LEVEL;L7[9] = 0;UNITPRICE = PPRICE
  Gosub CHECKBREAK
End If 
DTYPE$ = " ",DTYPE$;DDESC$ = " ",DDESC$
Return 
MANBRACKET: Rem "manual price bracket
If PR_C4[2] = 2
  C3[0] = 4;C3[1] = LEVEL
  Gosub GETTENBPRICE
  If UNITPRICE Let L9[0] = -7 - LEVEL
End If 
DTYPE$ = " ",DTYPE$;DDESC$ = " ",DDESC$
Return 
ASENTERED: Rem "get as-entered load table and apply to manual price
CNVTA = 0;PREC[0] = REC_PROD
If WHSEPR
  If WHLM[0] ! "have a table defined for load cost
    WH = WHSE;LTBL = WHLM[0];CNVTA = L5[1]
    If PREC[0] And LTBL Gosub GETLOAD
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = L5[1]
    If PREC[0] And LTBL Gosub GETLOAD
  End If 
End If 
L5[1] = CNVTA
Return 
OUTEND: Rem "get outta here
Else
	include "src/callmainerrnet_call.inc"
end try
End ! the whole program
Rem {begin src/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
If X2 <= 0 Let X$ = " ",X$ \ Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
If X2 <= 0 Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
Rem {end rtn.date.i}
Rem {begin src/inc/rtn.converti.i}
CONVERT: Rem "convert quantities, costs & prices
Mat Read #1,115,40;Q0;
Rem DEF FNR(H)=INT(ABS(H)*100+.5)*.01*SGN(H)
Rem DEF FNN(H)=INT(ABS(H)*10^Q0[1]+.5)*10^-Q0[1]*SGN(H)
Rem DEF FNT(H)=INT(ABS(H)*10^Q0[1])*10^-Q0[1]*SGN(H)
Rem DEF FNV(H)=INT(ABS(H)*10^Q0[1]+.9999999)*10^-Q0[1]*SGN(H)
Rem DEF FNU(H)=INT(ABS(H)+SGN(FRA(ABS(H))))*SGN(H)
If CNVTU[2] = 3 Gosub DISPVALIDUNITS \ Goto CONVEND
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] ! "qty units same
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[0] = -2 Or CNVTU[1] = -2 ! "lot price
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[2] ! "all but valid conversion test
  If Not(CNVTA) ! "nothing there
    AMOUNT = 0
    Goto CONVEND
  End If 
End If 
Gosub DOCONVERT
If CNVTU[2] <> 0 And CNVTU[2] <> 3 ! "conversion types
  If FLAG Let E = FLAG \ Gosub ERR_SEARCH
End If 
CONVEND: Rem "go back
Return 
DOCONVERT: Rem "go for it
CONVFLAG = 0;SR = 8;SC = 12
If CNVTU[2] = 5 ! "no rounding of quantity
  CONVFLAG = 1
  CNVTU[2] = 1
End If 
On CNVTU[2] + 1 Goto CHECKVALID1,DOCONVERT1,DOCONVERT1
E = 0 \ Gosub ERR_SEARCH
CHECKVALID1: Rem "see if valid conversion
For X1[1] = 0 To 1
  If CNVTU[X1[1]] > 0
    For X1[2] = 0 To 7
      If CNVTU[X1[1]] = PFU1[X1[2]] Goto VALID
    Next X1[2]
    FLAG = 1 \ Return 
  End If 
VALID: Rem "o.k.
Next X1[1]
FLAG = 0
Return 
DOCONVERT1: Rem "convert cost/price/quantity
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] <> 0 ! "not base
    If CNVTU[X1[1]] > 0 ! "not cwt
      For CUNIT = 0 To 7
        If PFU1[CUNIT] = CNVTU[X1[1]] Goto CONVVALID
      Next CUNIT
      FLAG = 0 \ Return 
CONVVALID: Rem "continue on
      If Not(CUNIT) Goto LOOPBACK
    End If 
    If CNVTU[2] = 2 Let CMODE = - CMODE
    If CNVTU[X1[1]] = -1 ! "cwt calculation
      If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
      If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Else 
      If CNVTU[X1[1]] = -3 ! "catch weight
        If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
        If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
      Else 
        If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
        If PFU2[CUNIT - 1] And CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
      End If 
    End If 
  End If 
LOOPBACK: Rem "get next x1[1]
Next X1[1]
If CNVTU[2] = 1 And Not(CONVFLAG) ! "convert quantity
  If CNVTU[1] And CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
  If Fra(AMOUNT) And (Not(CNVTU[1]) Or CNVTU[1] = PFU1[0]) Let AMOUNT = FNU(AMOUNT)
End If 
If CNVTU[2] = 2 And CNVTU[1] ! "cost/price (not base) to round
  If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
  If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
  If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
End If 
FLAG = 0
Return 
DISPVALIDUNITS: Rem "u/m list
FLAG = 0
Return 
!Window Open @SC,SR; Size 32,11; Using " VALID UNITS "
X1[1] = 1
For X1 = 0 To 7
  RECS[X1[1]] = 0
  If PFU1[X1] > 0 ! "have a unit
    Read #CH_CCODES,PFU1[X1];CCODE$;
    !Print Using "#. ";X1[1];CCODE$[11,14];" ";CCODE$[1,10];
    !If X1 Print Using "##########";PFU2[X1 - 1] Else Print 'BR BD';"     BASE ";'ER ED'
    RECS[X1[1]] = PFU1[X1];X1[1] = X1[1] + 1
  End If 
Next X1
!Print Using "#";@0,9;"SELECT 1-";X1[1] - 1;" : ";'CL';
!Input Len 16386;""J4$
If J4$ <> ""
  X1 = J4$
  If X1 > 0 And X1 < X1[1]
    Read #CH_CCODES,RECS[X1];CCODE$;
    J4$ = CCODE$[11],"\15\"
  Else 
    J4$ = "";X1 = 0
  End If 
End If 
Window Close 
If J4$ <> "" Call InpBuf(J4$)
FLAG = 0
Return 
Rem {end rtn.converti.i}
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
Stop 
Rem {end rtn.error.s}
