rem  utlogx - generic log program - should be easly to plug into other code

! loadsave -w -n 100,10 -o prog/dxport/utlogx.dl4 src/utlogx.src

include "src/copyright.inc"

External Lib "libgeneral.lib"                
Declare External Sub suberr,mainerr,searcherr

Declare Intrinsic function findchannel
Declare Intrinsic Sub String,Stringsearch,FindF
rem Declare Intrinsic Sub DateToJulian,JulianToDate
rem Declare Intrinsic Sub FindF,InpBuf,String,Time
rem Declare Intrinsic Sub Env,FormatDate,programdump,Stringsearch

enter filename$,ini$,mess$,ch_log

rem filename will be used to create/maintain a file called filename$.log
rem ini$ will contain a .ini file name to control where logs should live 
rem mess$ message to send to log file
rem ch_log=0 this will open and close the log file
rem ch_log=999 this will open the file AND LEAVE OPEN it will stay open
rem		so the parent should preserve the returned value
rem ch_log>=1 <=99  assumes file is open, does not need filename$ sent
rem ch_log=-number this assume the file is open on abs(ch_log), write to it, and then close it
rem		does not need filename$ sent

rem if there is a .ini file
rem prefix= if there will be a prefix for the filename, it should be here 
rem			ex:  prefix=ord
rem loc= if there is a location other then the default /tmp, it should be here
rem datetime=y if the date/time will be part if the log name.  It will be after the filename part
rem port=y if the port number will be part of the log name. It will be after the filename and date 
rem log file name prefix$filename$.yymmddhhmmss.port&&&&.log

IF ERR 0 GOSUB ERR_TRAP:

dim rstr$[5000],Message$[600]
dim 1%,no_ini,port_in_name
dim 3%
dim tmp$[100],linein$[180],prefx$[20],loc$[50],fle$[100],tmp1$[30],msg$[100]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables

prefx$=""
loc$=""
dt_in_name=0
let port_in_name=0

tch_log=ch_log
if ch_log<-99 or (ch_log>99 and not(ch_log=999)) goto outend:
CH_LOG=ABS(CH_LOG)
if not(ch_log) or ch_log=999
	if len(filename$)=0 goto outend:
	if filename$[1,1]=" " goto outend:
	if len(ini$)=0 goto outend:
	if ini$[1,1]=" " goto outend:
	gosub read_ini:
	gosub open_log:
endif

badfle=1
if err 0 goto flechk:
tmp$=chf(ch_log)   !! is 800_ch_log in classic
badfle=0
flechk: rem 
IF ERR 0 GOSUB ERR_TRAP:
if badfle goto outend:

gosub position_log:

tmp1$=(tim(8) using "&&")+(tim(9) using "&&")+(tim(10) using "&& ")+(tim(11) using "&&")+(tim(12) using "&&")+(tim(13) using "&&")
tmp1$=tmp1$+" PORT"+(spc(6) using "&&&& ")
linein$=" ",linein$
linein$=tmp1$+mess$
print #ch_log;linein$
goto outend:


read_ini: rem
prefx$=""
loc$="/tmp/"
call string(2,ini$)		!! convert to lower case
tmp$=""
for i=1 to len(ini$)
	if (ini$[i,i]>="." and ini$[i,i]<="9") or (ini$[i,i]>="a" and ini$[i,i]<="z") or ini$[i,i]="/"
		tmp$=tmp$+ini$[i,i]
	endif
next i
call stringsearch(ini$,".ini",e)
if not(e)
	tmp$=tmp$+".ini"
else
	tmp$=ini$
endif
!if tmp$[1,6]<>"cntrl/"
!	linein$="cntrl/"+tmp$
!	tmp$=linein$
!endif
Call FindF(tmp$,e)
if not(e)  	return   !! no ini$ string
CHnl = FindChannel()
if chnl<=0 gosub err_search:
ropen #chnl,tmp$
readini: read #chnl;linein$
Call string(2,linein$)		!! convert to lower case
if linein$
	if linein$[1,7]="prefix=" 
		for i=8 to len(linein$)
			if (linein$[i,i]>="." and linein$[i,i]<="9") or (linein$[i,i]>="a" and linein$[i,i]<="z")
				prefx$=+prefx$+linein$[i,i]
			endif
		next i
	endif
	if linein$[1,4]="loc=" 
		loc$=""
		for i=5 to len(linein$)
			if (linein$[i,i]>="." and linein$[i,i]<="9") or (linein$[i,i]>="a" and linein$[i,i]<="z") or linein$[i,i]="/"
				loc$=+loc$+linein$[i,i]
			endif
		next i
		if loc$[len(loc$),len(loc$)]<>"/" then loc$=loc$+"/"
	endif
	if linein$[1,10]="datetime=y" then dt_in_name=1
	if linein$[1,6]="port=y" then let port_in_name=1
	goto readini:
endif
close #chnl
return

open_log: rem open and create log
fle$=""
tmp$=""
call string(2,filename$)		!! convert to lower case
for i=1 to len(filename$)
	if (filename$[i,i]>="." and filename$[i,i]<="9") or (filename$[i,i]>="a" and filename$[i,i]<="z")
		tmp$=+tmp$+filename$[i,i]
	endif
next i
fle$=loc$+prefx$+tmp$
call string(2,fle$)		!! convert to lower case
if len(fle$)>5
	if fle$[len(fle$)-3,len(fle$)]=".log" then fle$=fle$[1,len(fle$)-4]
endif

tmp1$=" ",tmp1$
if dt_in_name=1
	tmp1$=(tim(8) using "&&")+(tim(9) using "&&")+(tim(10) using "&&")+(tim(11) using "&&")+(tim(12) using "&&")+(tim(13) using "&&")
	fle$=fle$+"."+tmp1$
endif
if port_in_name=1
	tmp1$=".PORT"+(spc(6) using "&&&&")
	fle$=fle$+tmp1$
endif

fle$=fle$+".log"
CHnl = FindChannel()
if chnl<=0 gosub err_search:
ch_log=chnl
Call FindF(fle$,e)
if not(e)
	build #ch_log,+"<666> "+fle$
	close #ch_log
endif
open #ch_log,fle$
return

position_log: rewind #ch_log \ rcount=0
position_log2: read #ch_log;linein$
if len(linein$)
	if linein$[len(linein$),len(linein$)]="\15\"
	rcount=rcount+1
		if linein$ goto position_log2:
	endif
endif
rewind #ch_log
if rcount
	for i=1 to rcount
		read #ch_log;linein$
	next i
endif
return

outend:  rem leave program
if tch_log<=0 and ch_log and not(badfle) 
	close #ch_log
	ch_log=0
endif
!if not(tch_log) then ch_log=0
end

ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Call programdump()
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
Call programdump("tmp/utlogx!","") 
Call programdump()
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
include "src/callmainerrnet.inc"
End 