! >>> Program mxlineqty
!
! description Fifo File update
!
! loadsave -w -n 100,10 -o prog/dxport/mxlineqty.dl4 src/mxlineqty.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem BEDIT Version: 2.3 OBJECT CODE     Created: SEP 17, 2012  10:12:49
Rem /w2/papermaster/r2005//usr/acct/valerie/work/custom/ruthford.r10/mxlineqty.src (univ2) [valerie] {44438}
Rem  Copyright (c) 2012 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
rem task 67063
!
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String
!Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
Try

! If Err 0 Gosub ERR_TRAP
Rem MXLINEQTY - Change the ware# for all Order Lines
Rem Last Update:
! variables passed:
!   CHAN[] = Channel #'s   was 2%,H0[12]  - Order header data(Let's read HERE!)
!   S9[] = S9[2] = Order Header Record #
!   WHSE
!   IntCo = Coid ID # - PASS IT!!
!
Enter CHAN[],rec_roh,WHSE,S9[],e$,intco,rstr$

!If Err 0 Gosub ERR_TRAP

Dim KEYLINE$[30],KEYSLOT$[70],KEYOLOT$[70],KEY_$[70]
Dim KEYPRWH$[40],L1$[20],USERID$[10],KEYPROD$[12]
Dim SPACES$[50],DIR$[75],USERA1$[40],LINE_$[200],A$[156]
Dim P9$[50],P60$[50],P61$[256],FILE$[40],CMD$[128],X$[10]
Dim 1%,CH_ROH,CH_ROL,CH_PRWH,CH_SLOT,CH_Sordlot
Dim 1%,CH_PROD,COID,CH_LOG,WHSE,PORTSCR,OWHS
Dim 1%,CH_USERCNTRL
Dim 1%,L3[3],S2[1],W0[3],W1[2],OL1[3]
Dim 1%,PFU1[20],CNVTU[2],UN[2],FLAG
Dim 3%,PFU2[6],CNVTA,AMOUNT,CTWTLB[1],qtyalloc
Dim 2%,H5[16],L4[3],W7[14],OL2[3],B[24],W2[9],WHBLD[2],H0[12]
Dim 2%,SHIPDATE,L6[5]
Dim 3%,A[33],W3[24],L7[12],OL7[12],REC[99],R[99],OLM[6]
Dim 3%,P3[4],OL3[5],PLV[1],WHLV[2],NETCOST[2],L5[3]
Dim 3%,AVAIL,DT3[1],JSHIPDATE,JOSDATE,S3[17],ROL0
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
COID=INTCO
!COID = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
!If Err 0 Let REC = Spc(8)
!REC = 0 \ FILE$ = Chf(1)
!If Err 0 Gosub ERR_TRAP
! openfiles 
! CHAN[0] = cntrl file
! CHAN[1] = roh
! CHAN[2] = rol
! CHAN[3] = SPRODLOT 
! CHAN[4] = SORDLOT
! CHAN[5] = product ch_prod
! CHAN[6] = sprodwh
! OPENFILES 
if not (chan[0]) ! cntrl file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
Mat Read #ctlc,61,0;P61$;
if p61$[110,110]<>"Y" goto outend: !
if not (chan[1]) ! order header 
	 Ch_Roh = openfile(1840,intCo) \ If Ch_Roh = -1 Error 42     !order  header file
else
	let ch_roh=chan[1]
endif
if not (chan[2]) ! order lines
	ch_rol=OpenFile(1888,intCo) \ If Ch_rol = -1 Error 42 ! order line
else
	let ch_rol=chan[2]
endif
If not (chan[3]) ! 
	! ch_sPRODlot -- not finding this used in this program (was ch_slot)
	ch_sprodlot=OpenFile(2528,intCo) \ If Ch_sprodlot = -1 Error 42 !sprodlot file
else
	let CH_SPRODLOT=chan[3]
endif
if not(chan[4])
	! ch_sordlot ! not looking like it is used in this program was ch_Olot
	ch_sordlot=OpenFile(2320,intCo) \ If Ch_sordlot = -1 Error 42 !sordlot file
ELSE
	let CH_Sordlot=chan[4]
endif
if not (chan[5]) ! product file 
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
else
	let ch_prod=chan[5]
endif
if not (chan[6]) ! product warehouse #65
	Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
else
	let ch_prwh=chan[6]
endif

Mat Read #ctlc,3,188;SHIPDATE;
Mat Read #ctlc,19,50;P9$;
Mat Read #ctlc,60,50;P60$;
 

SPACES$ = " ",SPACES$
! GET USERID$
uidrec[1] = GetUIDRec(e$,IntCo,Userid$)
LET REC[CH_ROH]=REC_ROH
Gosub READ_ROH
If H0[0] > 7 And H0[0] < 14 Goto OUTDONE ! credit memo status cannot change
! validate the order types - already done
!If H5[7] <> 1 And H5[7] <> 5 And H5[7] <> 9 And H5[7] <> 36 And H5[7] <> 37 And H5[7] = 38 Goto OUTDONE
!If H5[7] = 2 Or H5[7] = 7 Goto OUTDONE ! NOT STOCKING ITEMS
! creates a log file ... is this still needed
!DIR$ = "REPORTDIR"
!System 28,DIR$
!If DIR$ = "REPORTDIR" Or Len(DIR$) = 0
!  FILE$ = "/tmp/lineqtylog." + Tim(4) Using "&&&&&&"
!Else 
!  FILE$ = DIR$ + "/lineqtylog." + Tim(4) Using "&&&&&&"
!End If 
!Call FindF(FILE$,FOUND)
!If Not(FOUND)
!  CMD$ = "touch " + FILE$
!  System CMD$
!End If 
!Open #CH_LOG,FILE$
!If Not(FOUND)
!  Print #CH_LOG;"       Whse# change in order lines      ";Msc$(3)
!LOOP_LOG: Read #CH_LOG;LINE_$; \ If LINE_$ Goto LOOP_LOG
!  LINE_$ = " ",LINE_$
!  LINE_$ = "Order#" + "   " + "Line#" + "  " + "OWHSE" + "    " + "OQTY" + "     " + "NWHSE" + " " + "NQTY" + "    " + "USER ID"
!  Print #CH_LOG;LINE_$
!End If 
KEYLINE$ = " ",KEYLINE$
KEYLINE$[1,6] = H0[7] Using "######"
LINELOOP: Rem "thru all lines for Products
Search #CH_ROL,3,1;KEYLINE$,REC[CH_ROL],E \ If E = 2 Goto LINESDONE
If E Gosub ERR_SEARCH
X2 = KEYLINE$[1,6] \ If X2 <> H0[7] Goto LINESDONE
Gosub READ_ROL
If L4[3] = WHSE Goto LINELOOP ! 
If L3[0] = 1 Goto UpdateROL:  ! LINELOOP -- Not Inventory Item
If L3[1] = 0 Goto UpdateROL:  ! LINELOOP -- Stock Update is No
If S2[0] = 3 Goto LINELOOP    ! message  line
If L7[2] <= 0 Goto LINELOOP ! negative line qty ord
KEYPROD$ = " ",KEYPROD$
KEYPROD$ = L1$[1,12]
Search #CH_PROD,2,1;KEYPROD$,REC[CH_PROD],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto LINELOOP
If REC[CH_PROD] <> L4[0] Goto LINELOOP
AVAIL = 0
Gosub READ_PROD
A[3] = A[3] - L7[4]
If A$[127,127] = "Y" ! "catch wgt - Update LBS ordered
  X2 = X1 \ If L7[2] < 0 Let X2 = X2 * (-1)
  If H5[7] = 15 And H0[5] <> 0 Let X2 = 0
  CTWTLB[0] = CTWTLB[0] - (S3[4] * X2)
  CTWTLB[1] = CTWTLB[1] - (S3[4] * X2)
End If 
X2 = SHIPDATE \ Gosub L_7820 \ X2 = 0
JSHIPDATE = X2
X2 = H0[10] \ If H0[10] <> 999999 Gosub L_7820 \ X2 = 0
JOSDATE = X2
If JSHIPDATE >= JOSDATE
  PLV[0] = PLV[0] - L7[4]
Else 
  PLV[1] = PLV[1] - L7[4]
End If 
KEYPRWH$ = " ",KEYPRWH$
KEYPRWH$ = KEYPROD$[1,12];KEYPRWH$[13] = L4[3] Using "##"
Search #CH_PRWH,2,1;KEYPRWH$,REC[CH_PRWH],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto LINELOOP
Gosub READ_PRWH
W3[2] = W3[2] - L7[4]
If JSHIPDATE >= JOSDATE
  WHLV[0] = WHLV[0] - L7[4]
Else 
  WHLV[1] = WHLV[1] - L7[4]
End If 
Mat Write #CH_PROD,REC[CH_PROD],256;A;
Write #CH_PROD,REC[CH_PROD],664;CTWTLB[0];
Mat Write #CH_PROD,REC[CH_PROD],990;PLV;
Mat Write #CH_PRWH,REC[CH_PRWH],78;W3;
Mat Write #CH_PRWH,REC[CH_PRWH],780;WHLV;
Write #CH_PRWH,REC[CH_PRWH],986;CTWTLB[1];
KEYPRWH$ = " ",KEYPRWH$
KEYPRWH$ = KEYPROD$[1,12];KEYPRWH$[13] = WHSE Using "##"
Search #CH_PRWH,2,1;KEYPRWH$,REC[CH_PRWH],E \ If E > 1 Gosub ERR_SEARCH
If E !"not found - create a whse record
  WHBLD[0] = CH_PRWH;WHBLD[1] = WHSE;WHBLD[2] = B[24]
  KEYPRWH$[13] = ""
  Call "MXWHCREATE",KEYPRWH$,WHBLD[]
  REC[CH_PRWH] = WHBLD[2];WHBLD[2] = 0
End If 
Gosub READ_PRWH
AVAIL = W3[0] - W3[2]
QTYALLOC=L7[4]+L7[3] ! QTY ORDER + QTY B/0 ! WAS USING L7[2]
If QTYALLOC <> L7[4] And AVAIL >=QTYALLOC
  L7[4] = QTYALLOC ! 
  L7[3] = 0
else
	if p60$[27,27]="N" ! no backorder - set everything to ship
		let l7[4]=qtyalloc
		let l7[3]=0
	endif 
End If 
IF P60$[27,27]<>"N" ! b/o set to N - everything gets set to ship
	If (qtyalloc = L7[4] And AVAIL < L7[4]) Or (qtyalloc <> L7[4] And AVAIL < qtyalloc)
		CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
		CNVTA = AVAIL
		Gosub CVT_UNIT
		If AVAIL <= 0 Let CNVTA = 0
		TMPNUM = cnvta
		CNVTU[0] = UN[0];CNVTU[1] = 0;CNVTU[2] = 1
		CNVTA = Int(TMPNUM)
		Gosub CVT_UNIT
		L7[4] = AMOUNT
		L7[3] = qtyalloc - L7[4]
		If Not(A[5]) Let A[5] = 1
		S3[4] = FNR(Abs((L6[4] * L7[4]) / A[5]))
	endif
End If 
W3[2] = W3[2] + L7[4]
A[3] = A[3] + L7[4]
If A$[127,127] = "Y" ! "catch wgt - Update LBS ordered
  X2 = X1 \ If L7[2] < 0 Let X2 = X2 * (-1)
  If H5[7] = 15 And H0[5] <> 0 Let X2 = 0
  CTWTLB[0] = CTWTLB[0] + (S3[4] * X2)
  CTWTLB[1] = CTWTLB[1] + (S3[4] * X2)
End If 
If JSHIPDATE >= JOSDATE
  PLV[0] = PLV[0] + L7[4]
  WHLV[0] = WHLV[0] + L7[4]
Else 
  PLV[1] = PLV[1] + L7[4]
  WHLV[1] = WHLV[1] + L7[4]
End If 
Mat Write #CH_PROD,REC[CH_PROD],256;A;
Write #CH_PROD,REC[CH_PROD],664;CTWTLB[0];
Mat Write #CH_PROD,REC[CH_PROD],990;PLV;
Mat Write #CH_PRWH,REC[CH_PRWH],78;W3;
Mat Write #CH_PRWH,REC[CH_PRWH],780;WHLV;
Write #CH_PRWH,REC[CH_PRWH],986;CTWTLB[1];
NETCOST[0] = L5[1]
If ROL0
  If ROL0 < 0
    NETCOST[0] = NETCOST[0] + Abs(ROL0)
  Else 
    NETCOST[0] = NETCOST[0] + (NETCOST[0] * (ROL0 / 100))
  End If 
End If 
If S3[8] = -3 Let S3[9] = S3[0] Else Let S3[9] = FNR(S3[0] * L7[4])
If S3[11] = -3 Let S3[10] = S3[1] Else Let S3[10] = FNR(S3[1] * L7[4])
L5[3] = FNR(L7[4] * OLM[3])
S3[12] = FNR(L7[4] * NETCOST[0])
If UN[1] = -2
  L5[3] = FNR(OLM[3]) * Sgn(L7[4])
End If 
If UN[2] = -2
  S3[12] = FNR(NETCOST[0] * Sgn(L7[4]))
End If 
OWHS = L4[3]
UpdateROL: ! update rol with new whs
L4[3] = WHSE
Mat Write #CH_ROL,REC[CH_ROL],16;L4;
Mat Write #CH_ROL,REC[CH_ROL],32;L5;
Mat Write #CH_ROL,REC[CH_ROL],168;L7;
Mat Write #CH_ROL,REC[CH_ROL],260;S3;
Write #CH_ROL,REC[CH_ROL],550;OWHS;
LOOP_LOG2:!  Read #CH_LOG;LINE_$; \ If LINE_$ Goto LOOP_LOG2
!LINE_$ = " ",LINE_$
!LINE_$ = H0[7] Using "######" + "   " + L3[2] Using "###" + "    " + OWHS Using "##" + "      " + OL7[4] Using "######" + "   " + L4[3] Using "##" + "    " + L7[4] Using "######" + "  " + USERID$[1,10]
! Print #CH_LOG;LINE_$
Goto LINELOOP
READ_ROH: Rem "Header
Mat Read #CH_ROH,REC[CH_ROH],0;H0;
Mat Read #CH_ROH,REC[CH_ROH],104;H5;
Return 
READ_ROL: Rem "Order Line
Mat Read #CH_ROL,REC[CH_ROL],8;L3;
Mat Read #CH_ROL,REC[CH_ROL],16;L4;
Mat Read #CH_ROL,REC[CH_ROL],32;L5;
Mat Read #CH_ROL,REC[CH_ROL],56;L6;
Mat Read #CH_ROL,REC[CH_ROL],140;L1$;
Mat Read #CH_ROL,REC[CH_ROL],168;L7;
Mat Read #CH_ROL,REC[CH_ROL],168;OL7;
Mat Read #CH_ROL,REC[CH_ROL],250;UN;
Mat Read #CH_ROL,REC[CH_ROL],256;S2;
Mat Read #CH_ROL,REC[CH_ROL],260;S3;
Mat Read #CH_ROL,REC[CH_ROL],404;OLM;
Read #CH_ROL,REC[CH_ROL],550;OWHS;
Read #CH_ROL,REC[CH_ROL],564;ROL0;
Return 
READ_PROD: Rem "Product File
Mat Read #CH_PROD,REC[CH_PROD],0;A$;
Mat Read #CH_PROD,REC[CH_PROD],156;B;
Mat Read #CH_PROD,REC[CH_PROD],256;A;
Mat Read #CH_PROD,REC[CH_PROD],512;PFU1;
Mat Read #CH_PROD,REC[CH_PROD],554;PFU2;
Read #CH_PROD,REC[CH_PROD],664;CTWTLB[0];
Mat Read #CH_PROD,REC[CH_PROD],990;PLV;
Return 
READ_PRWH: Rem "ProdWhse File
Mat Read #CH_PRWH,REC[CH_PRWH],32;W1;
Mat Read #CH_PRWH,REC[CH_PRWH],38;W2;
Mat Read #CH_PRWH,REC[CH_PRWH],78;W3;
Mat Read #CH_PRWH,REC[CH_PRWH],420;W0;
Mat Read #CH_PRWH,REC[CH_PRWH],696;W7;
Mat Read #CH_PRWH,REC[CH_PRWH],780;WHLV;
Read #CH_PRWH,REC[CH_PRWH],986;CTWTLB[1];
Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
CVT_UNIT: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
!!!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
If CNVTU[2] = 3 Goto L_20120:
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20120:
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Goto outend:
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
goto Err_Msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Call programdump() 
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
LINESDONE: Rem "done
OUTDONE: Rem "done, cleanup anything
OUTEND: Rem "done
Else
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program



