! >>> Program LA525b
!
! description Accounts Payable Check Register - Update Monthly Files
!
! loadsave -w -n 100,10 -o prog/dxport/la525b.dl4 src/la525b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx

Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN  9, 2007  13:27:35
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/ap/la525b.src (univ2) [mary] {43873}
Rem  Copyright (c) 2007 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FileInfo,FindF,InpBuf,String,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Rem LA525B CHECK REGISTER PART 3
Rem UPDATE VENDOR FILE, MONTHLY CHECK REGISTER, OPEN ITEMS FILE
Rem UPDATE CHECK RECONCILIATION FILE


Try
  Enter spec[],message$,IntCo,rstr$,e$ 
  dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
  dim e$[500]!,message$[600]
	dIM GROUPID$[1]
	Dim 2%,C4[4],3%,Q[5],T[7],2%,jrnl
	Dim 1%,PRGNUM,EFLAG,RETURNSTATUS,bankid
	DIM 3%,REC_UAC
Comp = spec[0] ! company #                     
intCo = spec[0]                                
C4[0] = spec[1] ! CURRENT/NEXT MONTH
C4[1]= spec[2] ! POSTING PERIOD                              
C4[2] = spec[3]  ! POSTING date (mmddyy)                            
C4[3] = spec[4] !  LOGICAL UNIT NUMBER FOR A10IN
C4[4] = SPEC[5] ! POSTING DATE YYMMDD
JRNL = SPEC[6] !BATCH NUMBER /JRNL # IF NOT IN BATCH MODE

PRGNUM=SPEC[7] ! PROGRAM NUMBER
rec_uac = spec[8]                              
returnstatus = spec[9] 
eflag=spec[10]
for ctr=0 to 7
	let t[ctr]=spec[11+ctr]
next ctr 
bankid=spec[25]
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
dim 1%,currpass
	dim 1%,apbCURRID,3%,apbCURRFACT,keycurr$[30],currdesc$[30],2%,bnk_currid,3%,curr_rate
	dim 1%,a5currid,3%,a5currfact
	dim 1%,cnvcu[10],3%,cnvca[10]
	dim 1%,oiCURRID,3%,oicurrfact
	dim 1%,aph_CURRID,3%,aph_currfact
	dim 1%,a2ccurrid,3%,a2ccurrfact
	dim 3%,aphmerch,aphfreight,aphmisc,grossapamt,discapamt,netapamt,currvaramt,grosspayamt, discamt, checkamt,totcurrvaramt
	dim p61$[256],currdesc$[30],keybank$[20],3%,rec_bnk
	dim 3%,glexchamt,glexchacct
	rem dim apdett
	dim 1%,apt1[1],2%,apt2,3%,apt3[1],apt1$[12]
Dim KD$[34],KB$[80],2%,KA[25],KD[128,1],CRMKEYSIZE
Dim 1%,D1[2],D4[1],D8,D9,E,G2[1],G3,M1[1],M9,N1[2],N3[1],O1[2],O4[1],X1,Y8,Y9,H5
Dim 1%,C0[6],DEPT,2%,DT3[1],CKDATE,JCDATE
Dim 2%,A[1],D3[1],D[1],D5[3],G[2],M3[1],M[3],N2,N5,N[1],O2[6],O5,X,X2,VT0[1]
Dim 3%,R[50]
Dim 2%,JIDATE,JCDATE,V_CHK,V_DATE,P_CHK,P_DATE
Dim 3%,A1[9],A3[7],A6[1],D2[2],D7,G1,M2[2],O3[9],DIVTOT[3],BNKTOT[2],VT1[14]
Dim 3%,V_AMT,P_AMT,ZERO_AMT
Dim D$[130],D5$[8],F$[16],G2$[30],J$[4],K1$[30],K2$[30],K3$[30],N1$[12]
Dim K18$[12],DV1$[12],DV2$[12],DV3$[12],K49$[20],K50$[20],K9$[20]
Dim M$[130],O$[6],O1$[12],R$[63],X$[10]
Dim K0$[6]
Dim G8$[2],Q$[9],2%,G9[3]
Dim P9$[50]
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
RESTART = 0 \ PORTNUM = rec_uac
!G9[0] = Spc(5) \ G9[1] = Int(G9[0] / 16384) \ G9[2] = Int((G9[0] - G9[1] * 16384) / 64)
!G9[3] = G9[0] - (G9[1] * 16384 + G9[2] * 64) \ G8$[1,1] = G9[2] Using "#"
!G8$[2,2] = G9[3] Using "#"
G8$[1,1]=intco using "#"
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
g8$[2,2]=groupid$
IF NOT(RESTART)
	mat read #1,61,0;p61$;
endif
Goto L_1000
Rem RESTART SECTION
Rem LET C4[0]=CURRENT =0  OR NEXT MONTH =1
Rem LET C4[1]=POSTING PERIOD (YYMM)
Rem LET C4[2]=POSTING DATE (MMDDYY)
Rem LET C4[3]=LOGICAL UNIT NUMBER FOR A10IN
Rem LET C4[4]=POSTING DATE (YYMMDD)
Rem PORT=port where check register original occurred
Rem jrnl = jrnl number being run
Rem OPEN FILES
!X2 = Spc(5)
!F$ = Int((X2 - Int(X2 / 16384) * 16384) / 64) Using "CNTRL#"
F$ = COMP Using "cntrl/CNTRL#"
Open #1,F$
Mat Read #1,19,50;P9$;
mat read #1,61,0;p61$;
Mat Read #1,88,16;F$; \ Open #15,F$
Mat Read #1,88,48;F$; \ Open #16,F$
K2$ = " 0"
Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif
 Mat Read #15,R[15],2;R$;
F$ = R$[31,31],"/A80VM",G8$[1,2] \ Open #2,F$
F$ = R$[56,56],"/A20CR",G8$[1,2] \ Open #3,F$
F$ = R$[53,53],"/A20OI",G8$[1,2] \ Open #4,F$
F$ = R$[58,58],"/A10VL",G8$[1,2] \ Open #5,F$
F$ = R$[39,39],"/A50DB",G8$[1,2] \ Open #6,F$
F$ = R$[40,40],"/A50DD",G8$[1,2] \ Open #7,F$
F$ = R$[43,43],"/A50CR",G8$[1,2] \ Open #17,F$
R$[60,60] = C4[3] Using "#"
Mat Read #1,88,432;F$; \ Open #12,F$
Mat Read #1,88,448;F$; \ Open #13,F$
Mat Read #1,88,112;F$; \ Open #14,F$
X$ = C4[1] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G8$[1,2],X$[1,4] \ Open #8,F$
F$ = R$[42,42],"/AM0CD",G8$[1,2],X$[1,4] \ Open #9,F$
If P9$[17,17] <> "Y"
  F$ = R$[60,60],"/A10IN",G8$[1,2],X$[1,4] \ Open #11,F$
End If 
If Not(PORTNUM) Let PORTNUM = rec_uac
Rem check summary file
F$ = PORTNUM Using "2/APCDTEMP&&&&"
Open #47,F$
Mat Read #1,51,10;DEPT; \ Mat Read #1,51,18;C0;
If C0[6]<>0
  F$ = R$[1,1],"/APDIV",G8$[1,2] \ Open #18,F$
  F$ = R$[2,2],"/APVDV",G8$[1,2] \ Open #19,F$
  F$ = PORTNUM Using "2/APCRTEMP&&&&"
  Open #50,F$
  F$ = PORTNUM Using "2/APBNKTEMP&&&&"
  Open #49,F$
End If 
F$ = COMP Using "2/APDETT#"
Open #81,F$
L_1000: Rem start update
K2$ = "10" \ Search #15,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Read #15,R[15],6;Q$;
Q[0] = Q$
Read #15,R[15],24;Q$;
Q[1] = Q$
Read #15,R[15],132;Q$;
Q[2] = Q$
Read #15,R[15],96;Q$;
Q[3] = Q$
Read #15,R[15],114;Q$;
Q[4] = Q$
Read #15,R[15],150;Q$;
Q[5] = Q$
!Print 'CR CR';"UPDATING MONTHLY FILES....PLEASE WAIT....";
Mat Read #1,51,18;C0; \ Mat Read #1,51,10;DEPT;
Mat Read #1,19,50;P9$;
Rem! find key size of am0cr file
K2$ = " 0"
Search #15,2,1;K2$,R[15],E
if e<>0
	eflag=eflag+1
	Message$="RECORD '0' NOT FOUND IN A00AP" \ Gosub ERR_SEARCH
endif
Mat Read #15,R[15],2;R$;

X$ = C4[1] Using "&&&&"
F$ = R$[41,41],"/AM0CR",G8$[1,2],X$[1,4]
KB$ = F$
Call FileInfo(KD$,KA[],KB$,1,KD[])
CRMKEYSIZE = KD[1,0]
K1$ = " ",K1$
K1$ = " ",K1$
if bankid<>0 let k1$[1,2]=bankid using "##"
L_2020: E = 0
Search #3,3,1;K1$,R[3],E
If E = 2 Goto L_8700
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]
	if tmp3>bankid goto L_8700:
	if tmp3<>bankid goto L_2020:
endif
Mat Read #3,R[3],0;N; \ Mat Read #3,R[3],8;N1; \ Mat Read #3,R[3],14;N2;
Mat Read #3,R[3],18;N1$; \ Mat Read #3,R[3],30;N3; \ Mat Read #3,R[3],32;N5;
Mat Read #3,r[3],56; A2CCURRID;              
Mat Read #3,r[3],58; A2CCURRFACT;
LET CHECKAMT=0
If Not(N3) Let N3 = K1$[1,2]
If N1 = 9 Goto L_3440
If N1[1]<>0 Gosub L_5100
If Not(N1[1]) Gosub L_5000
If N1[1]<>0
	If D1[2] <> 4 goto L_2020: !  Stop 
	Goto L_3000
endif
E = 0 \ K2$ = N[1] Using "######"
Search #2,2,1;K2$,R[2],E
If E Gosub ERR_SEARCH
Read #2,R[2],148;D$[1,30]
Mat Read #2,R[2],280;A
Mat Read #2,R[2],304;A1
Mat Read #2,R[2],498;A3
Mat Read #2,R[2],276;V_CHK
Mat Read #2,R[2],288;V_DATE
let checkamt=O3[4]-O3[2]
If N1[1]<>0 Goto L_3000
let checkamt=O3[4]-O3[2]
currvaramt=0
If p61$[136,136]="Y" and oicurrfact<>0 and A2CCURRFACT<>0 	
	IF oicurrfact<>A2CCURRFACT
		let currvaramt=fnr(checkamt) ! keep for original checkamt in open item value
		let cnvcu[0]=1
		LET cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=oicurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring up to bank currency based on open item
		let checkamt=cnvca[0]
		let cnvcu[0]=2
		let cnvcu[1]=1
		let cnvca[0]=checkamt
		let cnvca[1]=a2ccurrfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$ ! bring down to base currency based upon check print rate
		let checkamt=FNR(cnvca[0])
		let currvaramt=currvaramt-checkamt
	endif
endif
A1[0] = A1[0] - O3[4]
If C4 Goto L_2290
A1[2] = A1[2] + O3[2]
A1[4] = A1[4] + O3[2]
A1[7] = A1[7] + O3[4]-O3[2] ! CHECKAMT  -for balancing payables on 533 ap ledger 
A1[8] = A1[8] + O3[4]-O3[2] !CHECKAMT
A3[6] = A3[6] + O3[4]-O3[2] ! CHECKAMT
Goto L_2305
L_2290: A1[6] = A1[6] + O3[2]
A1[9] = A1[9] + O3[4]-O3[2] ! CHECKAMT  -for balancing payables on 533 ap ledger  CHECKAMT
L_2305: If C0[6] Gosub L_6500
If N1[0] = 2 Goto L_2350
If Not(O2[1]) Goto L_2350
X2 = O2[1] \ Gosub L_7870
Goto L_2350
JCDATE = X2
If Not(O2[2]) Goto L_2350
X2 = O2[2] \ Gosub L_7870
Goto L_2350
JIDATE = X2
A = A + 1
D5 = JCDATE - JIDATE
If A <> 0 Let A[1] = FNR(((A[1] * (A - 1)) + D5) / A)
L_2350: Mat Write #2,R[2],280;A
Mat Write #2,R[2],304;A1 \ Mat Write #2,R[2],498;A3;
If (V_CHK <> O2[6]) Or (V_DATE <> O2[1])
  ZERO_AMT = 0
  Write #2,R[2],292;ZERO_AMT;
End If 
If O2[1] Write #2,R[2],288;O2[1];
If O2[6] Write #2,R[2],276;O2[6];
If O5 <> O2[0] ! pay-to vendor <> vendor
  K0$ = O5 Using "######" \ Search #2,2,1;K0$,R[0],E \ If E Gosub ERR_SEARCH
  Mat Read #2,R[0],280;A
  Mat Read #2,R[0],276;P_CHK
  Mat Read #2,R[0],288;P_DATE
!! PAY-TO VENDOR NAME -DO SAME AS CK PRINT-WMB 11/16-task 61069         
READ #2,R[0],148;M$[1,30]                                               
LET D$[1,30]=M$[1,30] !PAY-TO VENDOR NAME -DO SAME AS CK PRINT-WMB 11/16
  If O2[1] If O2[6]
    A = A + 1 \ D5 = JCDATE - JIDATE
    If A <> 0 Let A[1] = FNR(((A[1] * (A - 1)) + D5) / A)
    Mat Write #2,R[0],280;A;
    If (P_CHK <> O2[6]) Or (P_DATE <> O2[1])
      ZERO_AMT = 0
      Write #2,R[0],292;ZERO_AMT;
    End If 
    If O2[1] Write #2,R[0],288;O2[1];
    If O2[6] Write #2,R[0],276;O2[6];
  End If 
End If 
Gosub L_8000 ! update a50cr
Gosub L_8400
M2[0] = O3[4] \ M2[1] = O3[2] \ M2[2] = CHECKAMT ! amocr file
Mat Write #8,R[8],62;M2;
D7 = O3[4]
H5 = O4[1]
If Not(C0[6]) Goto L_2435
Gosub L_7700
D5$[1,8] = DV1$[2,9] \ If O1 = 2 Let D5$[1,8] = DV2$[2,9]
Goto L_2445
L_2435: D5$[1,8] = Q[0] Using "########"
If O1 = 2 Let D5$[1,8] = Q[1] Using "########"
L_2445: H5 = O4[1]
Gosub L_8300 ! 
IF P61$[136,136]="Y" and currvaramt<>0
	Keybank$ = " ",Keybank$
	keybank$[1,2]=N3 using "##"
	Search #14,2,1;Keybank$,R[14],E
	If not(e)
		mat read #14,r[14],116;GLEXCHACCT;
		if glexchacct<>0
			let d7=-currvaramt
			let d5$[1,8]=GLEXCHACCT Using "########"
			let h5=o4[1]
			Gosub L_8300
		endif
	endif
endif
If Not(C4) Let O3[5] = O3[5] + O3[4]
If C4 Let O3[7] = O3[7] + O3[4]
If O3 <> (O3[5] + O3[7]) Goto L_2630
If O$[5,5] = "1" If Not(C4) Goto L_2630
If C4 Goto L_2630
K2$ = " ",K2$ \ K2$[1,6] = O2 Using "######"
K2$[7,18] = O1$[1,12] \ K2$[19,20] = O1 Using "##"
R[4] = N2 \ Search #4,5,1;K2$,R[4],E
If E Gosub ERR_SEARCH
E = 3 \ Search #4,1,0;K2$,R[4],E
If E Gosub ERR_SEARCH
Goto L_2650
L_2630: O3[4] = 0 \ O3[2] = 0 \ O$[1,1] = "1" \ O$[3,3] = "0"
If O3 = (O3[5] + O3[7]) Let O$[1,1] = "6"
If O1 = 3 Let O$[3,3] = O1 Using "#"
Mat Write #4,N2,0;O$; \ Mat Write #4,N2,40;O3;
L_2650: Gosub L_8200
Goto L_2020
L_3000: Rem DIRECT DISBURSEMENT UPDATE
if not(checkamt) let checkamt=o3[4]-o3[2]
Gosub L_8000 ! update a50cr
Gosub L_8400
Mat Write #8,R[8],62;D2;
L_3040: K3$ = " ",K3$
K3$[1,5] = N2 Using "#####"
E = 0
Search #7,3,1;K3$,R[7],E
If E = 2 Goto L_3300
If E Gosub ERR_SEARCH
X = K3$[1,5]
If X <> N2 Goto L_3300
Mat Read #7,R[7],38;D5$;
Mat Read #7,R[7],46;D7;
Mat Read #7,R[7],52;D8;
Gosub L_8300
E = 0
Search #7,5,1;K3$,R[7],E
If E Gosub ERR_SEARCH
K3$ = " ",K3$
K3$[1,8] = D5$[1,8]
K3$[9,13] = N2 Using "#####"
K3$[14,16] = D8 Using "###"
E = 0
Search #7,5,2;K3$,R[7],E
If E Gosub ERR_SEARCH
E = 3
Search #7,1,0;K3$,R[7],E
If E Gosub ERR_SEARCH
Goto L_3040
L_3300: K3$ = " ",K3$
K3$[1,6] = N[1] Using "######"
K3$[7,18] = N1$[1,12]
E = 0
Search #6,2,1;K3$,R[6],E
If E Gosub ERR_SEARCH
If R[6] <> N2 Stop 
Search #6,5,1;K3$,R[6],E
If E Gosub ERR_SEARCH
E = 3
Search #6,1,0;K3$,R[6],E
If E Gosub ERR_SEARCH
Gosub L_8200
Goto L_2020
L_3440: D$ = " ",D$
D$[1,16] = "***VOID CHECK***"
O2[1] = N2
Gosub L_8400
Gosub L_8200
Goto L_2020
L_5000: Rem READ OPEN ITEMS
Mat Read #4,N2,0;O$;
Mat Read #4,N2,6;O1;
Mat Read #4,N2,12;O2;
Mat Read #4,N2,40;O3;
Mat Read #4,N2,100;O1$; \ Mat Read #4,N2,112;O4; \ Mat Read #4,N2,118;O5;
Mat Read #4,N2,116;oiCURRID;
Mat Read #4,N2,122;oiCURRFACT;
If Not(O4) Let O4 = K1$[1,2]
Return 
L_5100: Rem READ DIRECT DISBURSEMENTS
Mat Read #6,N2,0;D; \ Mat Read #6,N2,8;D1;
Mat Read #6,N2,14;D$; \ Mat Read #6,N2,144;D2;
Mat Read #6,N2,162;D3; \ Mat Read #6,N2,212;D4;
If Not(D4) Let D4 = K1$[1,2]
O2[1] = D3[1] \ O2[2] = D3[0]
O3[4] = D2 \ O3[2] = D2[1] \ O4 = D4 \ O4[1] = D4[1]
oiCURRID = 0 
oiCURRFACT = 0
Return 
L_6000: Rem CHANGE HOLD CURR ITEMS
! need to check if other banks are in process
if bankid<>0
	let k1$=" ",k1$
	search #3,3,1;k1$,r[3],e
	if e<>2 return
endif
K2$ = " ",K2$
L_6010: E = 0
Search #4,3,1;K2$,N2,E
If E = 2 Return 
If E Gosub ERR_SEARCH
Gosub L_5000
If O$[3,3] <> "9" Goto L_6010
If O3[5] Let O$[3,3] = "0"
If Not(O3[5]) Let O$[3,3] = O1 Using "#"
If O1 = 3 Let O$[3,3] = O1 Using "#"
Mat Write #4,N2,0;O$;
Goto L_6010
L_6300: Rem REORG CHECK RECONCIL FILE
F$ = " ",F$
R[19] = 0
Search #17,7,1;F$,R[19],E
If E <> 0 Gosub ERR_SEARCH
Search #17,7,2;F$,R[19],E
If E <> 0 Gosub ERR_SEARCH
R[20] = 1
Return 
L_6360: F$ = " ",F$
R[19] = 0
Search #8,7,1;F$,R[19],E
If E Gosub ERR_SEARCH
R[20] = 1
Return 
L_6410: F$ = " ",F$
R[19] = 0
Search #9,7,1;F$,R[19],E
If E Gosub ERR_SEARCH
Search #9,7,2;F$,R[19],E
If E Gosub ERR_SEARCH
R[20] = 1
Return 
L_6500: Rem VENDOR DIVISION TOTALS
If Not(C0[6]) Goto L_6595
K9$ = " ",K9$ \ K9$[1,6] = O2 Using "######"
K9$[7,8] = O4[1] Using "##"
Search #19,2,1;K9$,R[19],E \ If Not(E) Goto L_6555
If E > 1 Gosub ERR_SEARCH
E = 2 \ Search #19,1,0;K9$,R[19],E \ If E Gosub ERR_SEARCH
VT0[0] = O5 \ VT0[1] = O4[1] \ Mat Write #19,R[19],0;VT0
For I = 0 To 14 \ VT1[I] = 0 \ Next I
Search #19,4,1;K9$,R[19],E \ If E Gosub ERR_SEARCH
Goto L_6560
L_6555: Mat Read #19,R[19],8;VT1
L_6560: VT1[14] = VT1[14] - O3[4]
If C4 Goto L_6585
VT1[4] = VT1[4] + O3[2] \ VT1[6] = VT1[6] + O3[2]
VT1[8] = VT1[8] + CHECKAMT \ VT1[10] = VT1[10] + CHECKAMT
VT1[12] = VT1[12] + (CHECKAMT)
Goto L_6590
L_6585: VT1[5] = VT1[5] + O3[2] \ VT1[9] = VT1[9] + CHECKAMT
L_6590: Mat Write #19,R[19],8;VT1;
L_6595: Return 
L_7700: Rem DIVISION LOOKUP
K18$ = " ",K18$ \ K18$[1,2] = H5 Using "##"
Search #18,2,1;K18$,R[18],E \ If E Goto L_7725
Mat Read #18,R[18],42;DV1$; \ Mat Read #18,R[18],54;DV2$;
Mat Read #18,R[18],66;DV3$; \ Goto L_7750
L_7725: DV1$[1,9] = Q[0] Using "#########"
DV2$[1,9] = Q[1] Using "#########"
DV3$[1,9] = Q[3] Using "#########"
L_7750: Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7870: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
L_7890: Rem CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem UPDATE A50CR-CHECK REC
if not(checkamt) let checkamt=o3[4]-o3[2]
K2$ = " ",K2$ \ G[1] = N[0] \ G2[0] = 1 \ G3 = N3
CKDATE = O2[1];X2 = O2[1]
Gosub L_7870 \ X2 = 0
If X2 Let JCDATE = X2 Else Let JCDATE = Tim(6)
G[2] = JCDATE
K2$ = " ",K2$ \ K2$[1,2] = G3 Using "##"
K2$[3,8] = G[1] Using "######"
L_8040: K2$[9,10] = G2[0] Using "##"
E = 0 \ Search #17,2,1;K2$,R[17],E
If E = 1 Goto L_8115
If E Gosub ERR_SEARCH
Mat Read #17,R[17],0;G;
Mat Read #17,R[17],12;G1;
Mat Read #17,R[17],18;G2;
Mat Read #17,R[17],22;G2$; \ Mat Read #17,R[17],52;G3;
mat read #17,r[17],54;A5CURRID;
MAT READ #17,R[17],56;A5CURRFACT;
If G3 <> O4 Goto L_8105
If G[0] <> N5 Goto L_8105
X2 = G[2] \ Gosub L_7890 \ CKDATE = DT3[0]
If CKDATE <> O2[1] Goto L_8105
If G2$[1,30] <> D$[1,30] Goto L_8105
IF NOT(CHECKAMT) LET CHECKAMT=O3[4]-O3[2]
G1 = G1 + CHECKAMT
Goto L_8160
L_8105: G2[0] = G2[0] + 1
Goto L_8040
L_8115: G[0] = N5 \ G1 = CHECKAMT \ G2[1] = 0 \ G2$[1,30] = D$[1,30]
G[2] = O2[1] \ G3 = N3
LET A5CURRID=A2CCURRID
LET A5CURRFACT=A2CCURRFACT
X2 = G[2] \ Gosub L_7870 \ X2 = 0
If X2 Let G[2] = X2 Else Let G[2] = Tim(6)
E = 2 \ Search #17,1,0;K2$,R[17],E
If E Gosub ERR_SEARCH
R[20] = 0
L_8130: E = 0 \ Search #17,4,1;K2$,R[17],E
If E = 2 If R[20] = 0 Gosub L_6300 \ Goto L_8130
If E Gosub ERR_SEARCH
K2$ = " ",K2$ \ K2$[1,2] = G3 Using "##" \ K2$[3,8] = G[2] Using "######"
K2$[9,14] = G[1] Using "######" \ K2$[15,16] = G2[0] Using "##"
R[20] = 0
L_8150: E = 0 \ Search #17,4,2;K2$,R[17],E
If E = 2 If R[20] = 0 Gosub L_6300 \ Goto L_8150
If E Gosub ERR_SEARCH
L_8160: Mat Write #17,R[17],0;G;
Mat Write #17,R[17],12;G1;
Mat Write #17,R[17],18;G2;
Mat Write #17,R[17],22;G2$; \ Mat Write #17,R[17],52;G3;
mat Write #17,r[17],54;A5CURRID;
MAT Write #17,R[17],56;A5CURRFACT;
If Not(G) Return 
K2$ = " ",K2$ \ K2$[1,6] = N[1] Using "######"
Search #2,2,1;K2$,R[2],E
If E Return 
Read #2,R[2],292;V_AMT
V_AMT = V_AMT + CHECKAMT
Write #2,R[2],292;V_AMT;
If G[0] <> N[1]
  K2$ = " ",K2$ \ K2$[1,6] = G[0] Using "######"
  Search #2,2,1;K2$,R[0],E
  If E Return 
  Read #2,R[0],292;P_AMT
  P_AMT = P_AMT + CHECKAMT
  Write #2,R[0],292;P_AMT;
End If 
Return 
L_8200: Rem DELETE A20CR KEY\E=0
Search #3,5,1;K1$,R[3],E
If E Gosub ERR_SEARCH
E = 3
Search #3,1,0;K1$,R[3],E
If E Gosub ERR_SEARCH
Return 
L_8300: Rem AM0CD
E = 2
K2$ = " ",K2$
Search #9,1,0;K2$,R[9],E
If E Gosub ERR_SEARCH
Mat Write #9,R[9],0;M3;
Mat Write #9,R[9],8;N1$;
Mat Write #9,R[9],20;D5$;
Mat Write #9,R[9],28;D7; \ Mat Write #9,R[9],34;H5;
K2$[1,6] = R[8] Using "######"
K2$[7,12] = M3[1] Using "######"
K2$[13,18] = R[9] Using "######"
R[20] = 0
L_8360: Search #9,4,1;K2$,R[9],E
If E = 2 If R[20] = 0 Gosub L_6410 \ Goto L_8360
If E Gosub ERR_SEARCH
K2$ = " ",K2$ \ K2$[1,8] = D5$[1,8]
K2$[9,14] = M3[1] Using "######"
K2$[15,20] = R[9] Using "######"
R[20] = 0
L_8385: Search #9,4,2;K2$,R[9],E
If E = 2 If R[20] = 0 Gosub L_6410 \ Goto L_8385
If E Gosub ERR_SEARCH
Return 
L_8400: D5$ = " ",D5$ \ M3[1] = N[1]
M2[0] = 0 \ M2[1] = 0 \ M2[2] = 0 \ D7 = 0
M[0] = N[0] \ M[1] = N[1] \ M[2] = O2[1] \ M[3] = O2[2]
M1[0] = N1[0] \ M1[1] = N1[1]
If N3<>0
	If O4 <> N3 Let O4 = N3
ENDIF
N3[1] = O4[1]
K2$ = " ",K2$
E = 2
Search #8,1,0;K2$,R[8],E
If E Gosub ERR_SEARCH
K2$[1,2] = N3 Using "##" \ K2$[3,8] = N[0] Using "######" \ K2$[9,14] = N[1] Using "######"
If CRMKEYSIZE <> 20
  K2$[15,18] = R[8] Using "####"
Else 
  K2$[15,20] = R[8] Using "######"
End If 
R[20] = 0
L_8500: Search #8,4,1;K2$,R[8],E
If E = 2 If R[20] = 0 Gosub L_6360 \ Goto L_8500
If E Gosub ERR_SEARCH
Mat Write #8,R[8];M;
Mat Write #8,R[8],16;M1;
Write #8,R[8],20;D$[1,30];
Mat Write #8,R[8],50;N1$ \ Mat Write #8,R[8],80;N3
Mat Write #8,R[8],86;N5;
Write #8,R[8],90;JRNL;
M3[0] = R[8]
Return 
L_8700: Rem END
Gosub L_6000
If C0[6] Goto L_8800
M3[0] = 0 \ M3[1] = C4[4] \ R[8] = 0 \ N1$ = " ",N1$ \ H5 = 0
For X = 4 To 5
  If Not(T[X]) Goto L_8745
  D7 = T[X]
  D5$[1,8] = Q[X] Using "########"
  Gosub L_8300
L_8745: Next X
K1$ = " ",K1$
if bankid>0 let k1$[1,2]=(bankid-1) using "##"
L_8760: Search #14,3,1;K1$,R[14],E \ If E = 2 Goto OUTEND
If E Gosub ERR_SEARCH
if bankid<>0
	let tmp3=k1$[1,2]\if tmp3>bankid goto outend:
	if tmp3<>bankid goto L_8760:
endif
Mat Read #14,R[14],32;A6; \ If Not(A6[1]) Goto L_8760
D7 = A6[1] \ D5$[1,8] = A6 Using "########"
Gosub L_8300
A6[1] = 0 \ Mat Write #14,R[14],32;A6;
Goto L_8760
L_8800: Rem UPDATE SECTION FOR MULTIPLE DIVISION
M3[0] = 0 \ M3[1] = C4[4] \ R[8] = 0 \ N1$ = " ",N1$ \ H5 = 0 \ K50$ = " ",K50$
L_8810: Search #50,3,1;K50$,R[50],E \ If E = 2 Goto L_8900
If E Gosub ERR_SEARCH
Mat Read #50,R[50],0;DIVTOT;
N1$ = "DIVISION-",K50$[1,2],"  " \ H5 = K50$[1,2]
Gosub L_7700
Goto L_8845
If Not(DIVTOT[0]) Goto L_8845
D7 = DIVTOT[0] \ D5$[1,8] = DV1$[2,9] \ Gosub L_8300
L_8845: If Not(DIVTOT[1]) Goto L_8855
Goto L_8855
D7 = DIVTOT[1] \ D5$[1,8] = DV2$[2,9] \ Gosub L_8300
L_8855: If Not(DIVTOT[2]) Goto L_8865
D7 = DIVTOT[2] \ D5$[1,8] = DV3$[2,9] \ Gosub L_8300
L_8865: Goto L_8810
L_8900: Rem BANKS AMOUNTS BY DIVISION
K49$ = " ",K49$
L_8910: Search #49,3,1;K49$,R[49],E \ If E = 2 Goto L_8950
If E Gosub ERR_SEARCH
N1$ = "DIVISION-",K49$[3,4],"  " \ H5 = K49$[3,4]
Mat Read #49,R[49],0;BNKTOT;
If Not(BNKTOT[0]) Goto L_8910
D7 = BNKTOT[0] \ D5$[1,8] = BNKTOT[1] Using "########" \ Gosub L_8300
Goto L_8910
L_8950: Rem CLEAR OUT APCASH FILE
K1$ = " ",K1$
L_8960: Search #14,3,1;K1$,R[14],E \ If E = 2 Goto OUTEND
If E Gosub ERR_SEARCH
Mat Read #14,R[14],32;A6 \ A6[1] = 0 \ Mat Write #14,R[14],32;A6;
Goto L_8960
Goto OUTEND


ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$ = msg$
call programdump("/tmp/la525b!","")
call programdump()
ReturnStatus=0! need report to print still
Message$=E$
Error 10000                      
Return ! End  

If Msg$<>"" let e$=msg$ !  Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump("/tmp/la525b!","")
call programdump()
ReturnStatus=0! need report to print still
Message$=E$
Error 10000
Return ! End

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
Message$=E$
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
!call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
!call AddToStr(e$,rstr$,WebStr$)
!call SetOutPut(e$,rstr$)





OUTEND: Rem END
if bankid<>0
	let k1$=" ",k1$
	search #3,3,1;k1$,r[3],e
	if e<>2  goto outend1: ! bypass check run flag if other checks exist
endif
K1$ = "20"
Search #15,2,1;K1$,R[15],E
If E Gosub ERR_SEARCH
Read #15,R[15],10;J$[1,4];
J$[3,3] = "0"
Write #15,R[15],10;J$[1,4];
Outend1:! 
K1$ = " 0" \ Search #15,2,1;K1$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15],2;R$;
If P9$[17,17] <> "Y"
  R$[60,60] = C4[3] Using "#"
End If 
R$[51,51] = "1" \ Mat Write #15,R[15],2;R$;
Try Close Else Rem
Rem check summary file
F$ = PORTNUM Using "2/APCDTEMP&&&&"
Call FindF(F$,X2)
If X2<>0
  Kill F$
End If 
If C0[6]<>0
  F$ = PORTNUM Using "2/APCRTEMP&&&&"
  Call FindF(F$,X2)
  If X2<>0
    Kill F$
  End If 
  F$ = PORTNUM Using "2/APBNKTEMP&&&&"
  Call FindF(F$,X2)
  If X2<>0
    Kill F$
  End If 
End If 
L_9095: Try Close Else Rem
PRGNUM = 525
SPEC[7]=prgnum! PROGRAM NUMBER
if eflag
	let returnstatus=0
	let spec[9]=returnstatus
endif
Call "GLCDPOST.dl4",spec[],message$,IntCo,rstr$,e$
 
Else
	ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program
