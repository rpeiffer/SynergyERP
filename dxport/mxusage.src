! >>> Program mxusage
!
! description Calculate Review Cycles
!
! loadsave -w -n 100,10 -o prog/dxport/mxusage.dl4 src/mxusage.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  5, 2003  14:05:16
Rem /w/papermaster/r2002//usr/acct/txc/work/r2002/misc/mxusage.src (univ2) [txc] {25218}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,String
Declare Intrinsic Sub FindF
!Option Default Dialect IRIS1
! Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr
! declare Externam Sub GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenMySQLChan,openfile
Try
	! Enter FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$,e$,IntCo,rstr$ ! need 
	Enter Intco, StatChan
	! intco = company #
	! statchan=channel number for status text file
Rem MXUSAGE  CALC AVG USAGE, ORDER POINT AND LINE POINT
Rem
Rem AUTHOR: DD
!If Err 0 Gosub ERR_TRAP
Dim ReportDir$[75],BaseName1$[75],StatusFile$[150] ! ,1%,statchan,3% 

Dim 1%,PFU1[20],BOYMONTH,ARMONTH,W1[2],W0[3],OL1[3],TRL1[10],TR1[13],ch[99]
Dim 2%,WH7[3],oldWH7[3],FIXPO,B[24],W2[9],W7[14],PR_C4[10],OL2[3],H5[16],OLL2[1]
Dim 1%,FCWGT,TYEAR,LYEAR,2%,BDAYS[24],FWGHT[23],3%,FORECAST
Dim 1%,COID,DMONTH,CMNTHDAYS,X7,MTH,EX_CODE,UNT,cnvtu[2]
Dim 2%,X2,COMP,CHKYEAR,I,E,J1,YEAR_,YEAR1
Dim 3%,W3[24],oldW3[24],W5[25],WH9[25],TRL3[21],R[12],OL3[5],TOTWGT
Dim 3%,MUSED[9],R2,R3,R6,R8,MINQTY,MAXQTY,X,AMOUNT,DmndDay,cnvta,a[33]
Dim 3%,COST,PFU2[6],P3[4],A1[7],QBO,QTYTR,FACTOR,WHFUT[2],passinfo[99]
Dim K1$[50],K2$[50],K3$[50],K4$[50],F$[50],P9$[50],K8$[50],J$[50]
Dim K10$[60],K12$[50],K6$[40],DATE$[8],WH3$[24],SPACE$[24],p61$[256]
Dim Custom_Customer$[30],passinfoStr$[1,12],a$[156],msg$[100]

Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim e$[1000],rstr$[5000]
dim 3%
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
! channel 88 reserved for status text file
!statchan=88
for ctr=1 to 87
	Try Close #ctr Else Rem
next ctr

!E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
coid=intco
F$ = "cntrl/CNTRL" + Str$(COID)
Open #1,F$
For X = 2 To 12
  Read J1 \ If J1 = -1 Goto L_850
  Mat Read #1,88,Abs(J1);F$;
  If J1 >= 0 Open #X,F$ Else Ropen #X,F$
L_850: Next X
Data "1744","-1792","-1","-2528","-1","-1","-1840","-1","-2320","-848","-1360"
F$ = "3/SFDFRCST" + Str$(COID)
Ropen #6,F$
F$ = "3/FRCSTWGT" + Str$(COID)
Ropen #7,F$
If not(statchan)
	try close #88 else rem
	ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	BaseName1$ = "revcyc_stat"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
	StatusFile$ = ReportDir$ + "/"+BaseName1$
	Call FindF(StatusFile$,tmp)
	If tmp<> 0
		Try Kill StatusFile$ Else Rem
	endif
	StatChan = 88 ! FindChannel() ! channel to build text file need fixed channel
	Try Close #88 Else Rem
	Try
		Build #StatChan,StatusFile$ As "TEXT"
	Else
		
		let e$="Error in Building Status File " + StatusFile$
		error 10000
	end TRY
	Try Close #StatChan Else Rem
	Try
		Open #StatChan,StatusFile$
	else
		e$="Error in Opening Status File "+StatusFile$
		error 10000
	end TRY
endif

SPACE$ = " ",SPACE$
Mat Read #1,19,50;P9$;
Mat read #1,61,0;P61$;
mat read #1,115,60;custom_customer$;
Custom_customer$=UCASE$(Trim$(custom_customer$))
Mat Read #1,0,120;ARMONTH;
Mat Read #1,3,184;FIXPO;
Mat Read #1,11,0;BDAYS;
Mat Read #1,0,100;DATE$;
if p61$[111,111]="Y" ! CPI - possible alerts - set up channels
	ch[1] = 1 ! cntrl file
	ch[2] = 3 ! product
	ch[3] = 2 ! product wh
	ch[4] = openfile(-2400, intco) \ if ch[4]=-1 error 42 ! vendor
	ch[5] = openfile(-1936, intco) \ if ch[5]=-1 error 42 ! contract detail
	ch[6] = openfile(-9929, intco) \ if ch[6]=-1 error 42 ! cpi header
	ch[7] = openfile(-9928, intco) \ if ch[7]=-1 error 42 ! cpi detail
	ch[8] = openfile(-9927, intco) \ if ch[8]=-1 error 42 ! cpi cust
	ch[9] = openfile(-1824, intco) \ if ch[9]=-1 error 42 ! salesman
	ch[10] = openfile(-1808, intco) \ if ch[10]=-1 error 42 ! cust
	ch[11] = openfile(-2880, intco) \ if ch[11]=-1 error 42 ! contract header
	ch[12] = OpenMySQLChan(e$) \ If ch[12]=-1 error 42 ! sql database
end if

YEAR_ = DATE$[7,8] \ If YEAR_ > 99 Let YEAR_ = YEAR_ - 100
DMONTH = DATE$[1,2]
If YEAR_ > 67 Let YEAR_ = YEAR_ + 1900
If YEAR_ < 68 Let YEAR_ = YEAR_ + 2000
If ARMONTH = 1 And DMONTH > 1 Let YEAR_ = YEAR_ + 1
YEAR1 = YEAR_ - 1
CMNTHDAYS = BDAYS[ARMONTH]
if statchan<>0
	print #statchan;"Processing Product Usage "
endif
K2$ = " ",K2$
let xx=0
L_2000: Search #2,3,1;K2$,R2,E \ If E > 2 error 11000
If E<>0
	if statchan<>0
		Print #statchan;"Completed Product Usage "
	endif
	Goto OUTEND
endif
XX = XX + 1
If Not(Fra(XX / 500))
	if statchan<>0
		Print #StatChan;xx;" Records Processed ";" Current ";k2$
	endif
endif	
Mat Read #2,R2,32;W1
Mat Read #2,R2,38;W2
Mat Read #2,R2,78;W3
Mat Read #2,R2,78;oldW3
Mat Read #2,R2,228;W5
Read #2,R2,404;FCWGT
Mat Read #2,R2,420;W0
Mat Read #2,R2,428;WH7
Mat Read #2,R2,428;oldWH7
Mat Read #2,R2,540;WH9
Mat Read #2,R2,696;W7
Mat Read #2,R2,756;WH3$
MAT  READ #2,r2,896;whfut
If Len(WH3$) < 24 Let WH3$[Len(WH3$) + 1,24] = SPACE$[1,24]
Gosub L_4600 \ Goto L_2000
If W0[1] Let W7[12] = 3
Gosub L_4000
Gosub L_4200
Write #2,R2,38;W2[0]
Mat Write #2,R2,78;W3
Mat Write #2,R2,428;WH7
Mat Write #2,R2,696;W7
MAT  WRITE #2,R2,896;WHFUT;
if p61$[111,111]="Y" ! CPI - possible alerts
	if w3[3] <> oldW3[3] or WH7[2] <> oldWH7[2]
		passinfo[0]=55
		passinfo[1]=R3
		passinfo[2]=R2
		passinfo[3]=oldW3[3]
		passinfoStr$[1]=a$[9,38]
		passinfo[4]=w1[0]
		passinfo[5]=oldWH7[2]
		call "libalertproc.lib",passinfo[],ch[],msg$,0,passinfoStr$[]
	end if
end if
Goto L_2000
L_4000: Rem "===================================== Trend Calc
If FCWGT Gosub EIMUSAGECALC
For X = 0 To 9 \ MUSED[X] = 0 \ Next X
If Not(W2[2]) Goto L_4070
WH7[1] = 0
If W2[2] > 11 Let W2[2] = 11
X7 = ARMONTH - 1 \ If Not(X7) Let X7 = 12
For I = W2[2] To 1 Step -1
  If (W2[2] > 11 And I > W2[2] - 11) Or W2[2] < 12 ! "(more than 11, but in the 1st 11) or (11 or less only)
    If WH9[X7] Or WH3$[X7,X7] <> " "
      MUSED[0] = MUSED[0] + WH9[X7]
    Else 
      MUSED[0] = MUSED[0] + W5[X7]
    End If 
    If WH9[X7 + 13] Or WH3$[X7 + 12,X7 + 12] <> " "
      MUSED[1] = MUSED[1] + WH9[X7 + 13]
    Else 
      MUSED[1] = MUSED[1] + W5[X7 + 13]
    End If 
  End If 
  X7 = X7 - 1 \ If Not(X7) Let X7 = 12
Next I
If MUSED[0] And MUSED[1] ! "Only if numbers are there
  MUSED[2] = FNR((MUSED[0] - MUSED[1]) * 100 / MUSED[1])
  WH7[1] = MUSED[2]
End If 
L_4070: Return 
EIMUSAGECALC: Rem " Jon Schreibfeder's way of getting forecast
W3[8] = 0
W3[9] = 0
TOTWGT = 0
For X = 0 To 23 \ FWGHT[X] = 0 \ Next X
For X = 0 To 9 \ MUSED[X] = 0 \ Next X
If FCWGT > 0 And FCWGT < 1000 Mat Read #7,FCWGT,0;FWGHT;
For MTH = 0 To 22
  If FWGHT[MTH] ! "it's got a weight - otherwise Bypass
    X7 = ARMONTH - (MTH + 1)
    If X7 < 1 Let X7 = X7 + 12
    If X7 < 1 Let X7 = X7 + 12
    If MTH > 10 Let X7 = X7 + 12
    BDAYS = BDAYS[X7] \ If BDAYS = 0 Let BDAYS = 21
    X7 = ARMONTH - (MTH + 1)
    If X7 <= (-12) Let X7 = X7 + 12
    If MTH > 10 Let X7 = X7 + 25
    If X7 < 1 Let X7 = X7 + 12
    If X7 > 25 Let X7 = X7 - 24
    If X7 = 0 Let X7 = 1
    If X7 = 13 Let X7 = X7 + 12
    MUSED[0] = W5[X7]
    If X7 >= 13 Let REASON = X7 - 1 Else Let REASON = X7
    If WH9[X7] Or WH3$[REASON,REASON] <> " "
      MUSED[1] = WH9[X7]
    Else 
      MUSED[1] = W5[X7]
    End If 
    MUSED[2] = MUSED[1] / BDAYS
    MUSED[3] = FWGHT[MTH] * MUSED[2]
    MUSED[4] = MUSED[4] + MUSED[3]
    MUSED[6] = MUSED[0] / BDAYS
    MUSED[7] = MUSED[7] + ((MUSED[6] * FWGHT[MTH]))
    TOTWGT = TOTWGT + FWGHT[MTH]
  End If 
Next MTH
If TOTWGT = 0 Return 
MUSED[5] = MUSED[4] / TOTWGT
MUSED[6] = MUSED[7] / TOTWGT
W3[9] = MUSED[5] * CMNTHDAYS
W3[9] = W3[9] + (W3[9] * (WH7[1] / 100))
Gosub GET_EXTRAFORECAST
W3[9] = W3[9] + MUSED[9]
MUSED[0] = MUSED[6] * CMNTHDAYS
W3[8] = MUSED[0] + (MUSED[0] * (WH7[1] / 100))
If WH7[2] ! "got mths demand for Min/Max
  MINQTY = WH7[2]
  If MINQTY < 1 ! it's in days (none <0!) (ie: .25 = 1/4 month about 5 days)
    !MINQTY = Abs(WH7[2]) / CMNTHDAYS
  !End If
  ! as per txc change on r9 - convert & use as purchasing units if min=days
	  Cnvta=w3[9] ! usage rate
	  cnvtu[0]=0;cnvtu[1]=pfu1[10];cnvtu[2]=5  !! to go purch unit 
	  gosub convert:
	  if custom_customer$="HTBERRY"
			If MinQty Let W3[3]=W3[9]*(MinQty+w2[0]) !add min days & avg lead time
			whfut[2]=w2[0] ! save avg lead time at time of calc
	  else
			w3[3]=amount*minqty
	  Endif
	  cnvta=w3[3]
	  cnvtu[0]=pfu1[10];cnvtu[1]=0;cnvtu[2]=5
	  gosub l_6900:   !! round to purch unit
	  cnvtu[0]=pfu1[10];cnvtu[1]=0;cnvtu[2]=1
	  gosub convert:
	  w3[3]=cnvta
  Else ! it's months so no convert?
	  if custom_customer$="HTBERRY"
			If MinQty Let W3[3]=W3[9]*(MinQty+w2[0]) !add min days & avg lead time
			whfut[2]=w2[0] ! save avg lead time at time of calc
	  else
		If MinQty Let W3[3]=W3[9]*MinQty
	  Endif
  Endif
  if w3[3]<0 let W3[3]=0
End If 
If WH7[3]
  MAXQTY = WH7[3]
  If MAXQTY < 1 ! "it's in days (none <0!) (ie: .25 = 1/4 month about 5 days)
    !MAXQTY = Abs(WH7[3]) / CMNTHDAYS
  !End If 
  !If MAXQTY Let W3[4] = W3[9] * MAXQTY
    ! as per txc change on r9 - convert & use as purchasing units if max=days
	Cnvta=w3[9]                                                  
	cnvtu[0]=0;cnvtu[1]=pfu1[10];cnvtu[2]=5  !! to go purch unit 
	gosub convert:                                               
	w3[4]=amount*maxqty                                          
	cnvta=w3[4]                                                  
	cnvtu[0]=pfu1[10];cnvtu[1]=0;cnvtu[2]=5                      
	gosub l_6900:   !! round to purch unit                       
	cnvtu[0]=pfu1[10];cnvtu[1]=0;cnvtu[2]=1                      
	gosub convert:                                               
	w3[4]=cnvta 
  Else ! it's months so no convert?
  	If MaxQty Let W3[4]=W3[9]*MaxQty
  endif
  if w3[4]<0 let W3[4]=0
End If 
if W3[8]>0 let W3[8] = Int(W3[8] + .5) ! do not add .5 to zero!!!
if W3[9]>0 let W3[9] = Int(W3[9] + .5) ! do not add .5 to zero!!!
If Int(W3[3] + .5) = 0 And W3[3] > 0
  W3[3] = 1
Else 
  If W3[3]>0 let W3[3] = Int(W3[3] + .5) ! only add if not zero!!!
End If 
If Int(W3[4] + .5) = 0 And W3[4] > 0
  W3[4] = 1
Else 
  If W3[4]>0 let W3[4] = Int(W3[4] + .5) ! do not add .5 to zero!!!
End If 
AMOUNT = W3[3] \ Gosub L_6910 \ W3[3] = AMOUNT
AMOUNT = W3[4] \ Gosub L_6910 \ W3[4] = AMOUNT
Return 
GET_EXTRAFORECAST: Rem "Any planned Extraordinary for this month
K6$ = " ",K6$;K6$[1,14] = K2$[1,14]
K6$[15,18] = YEAR_ Using "&&&&"
K6$[19,20] = ARMONTH Using "&&"
J$ = K6$
FORECASTLOOP: Rem "All for prod/wh/yyyymm
Search #6,3,1;K6$,R6,E \ If E = 2 Return 
If K6$[1,20] <> J$[1,20] Return 
Read #6,R6,22;FORECAST;
MUSED[9] = MUSED[9] + FORECAST
Goto FORECASTLOOP
Return 
L_4200: Rem "======================================== ORDER POINT AND LINE POINT
COST = 0
If Not(W2[0]) Let W2[0] = B[0]
If W2[0] < 0 Let W2[0] = 0
W3[7] = (W3[9] * W2[0]) * (W2[5] / 100)
If W3[7] If W3[7] < 1 Let W3[7] = 1
W3[6] = (W3[9] * W2[0]) + ((W3[9] * W2[0]) * (W2[5] / 100))
If Fra(W3[6]) * 10 >= 1 Let W3[6] = Int(W3[6]) + 1
If W2[1] Let W3[5] = W3[6] + (W3[9] * (W2[1]))
If Fra(W3[5]) * 10 >= 1 Let W3[5] = Int(W3[5]) + 1
If Not(W2[1]) Let W3[5] = W3[6]
W3[6] = Int(W3[6])
W3[5] = Int(W3[5])
If Not(W3[13]) Or W3[13] > 1 Let W3[13] = .35
If P9$[32,32] = "Y"
  If W3[16] Let COST = W3[16] Else Let COST = W3[15]
End If 
If P9$[32,32] <> "Y" Or Not(COST)
  If B[10] Let COST = B[10] Else Let COST = B[21]
End If 
If COST < 0 Let COST = 0
Gosub L_5500
Gosub L_4700
Gosub L_6500
Return 
L_4600: Rem "=================================== READ PROD FILE
K3$ = " ",K3$;K3$[1,12] = K2$[1,12]
Search #3,2,1;K3$,R3,E \ If E > 1 error 11000
If E Return 

Mat Read #3,R3,0;a$;
Mat Read #3,R3,156;B;
mat  read #3,r3,256;a;
Mat Read #3,R3,460;A1;
Mat Read #3,R3,512;PFU1;
Mat Read #3,R3,554;PFU2;
Mat Read #3,R3,894;PR_C4;
Return 1
L_4700: Rem on transfer
K10$ = " ",K10$ \ QTYTR = 0
! GOTO L_4795 ! per txc - adding twice? to keep functioning same as r9 - bypass
K10$[1,12] = K3$[1,12]
L_4715: Search #10,3,1;K10$,R[10],E \ If E = 2 Goto L_4795
If E error 11000
If K10$[1,12] <> K3$[1,12] Goto L_4795
Mat Read #10,R[10],36;OL1;
If OL1[2] <> W1 Goto L_4715
If OL1[1] <> 2 Goto L_4715
Mat Read #10,R[10],60;OL3; \ If Not(OL3[4]) Goto L_4715
Mat Read #10,R[10],44;OL2;
K8$ = " ",K8$ \ K8$[1,6] = OL2[2] Using "######"
K8$[7,12] = OL2[0] Using "######"
Search #8,2,2;K8$,R[8],E \ If E Goto L_4715
Mat Read #8,R[8],104;H5; \ If H5[7] <> 16 Goto L_4715
QTYTR = QTYTR + OL3[4]
Goto L_4715
L_4795: Rem
COMP = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
K12$ = " ",K12$ \ K12$[1,12] = K3$[1,12]
L_4810: Search #12,3,2;K12$,R[12],E \ If E = 2 Goto L_4895
If E error 11000
If K12$[1,12] <> K3$[1,12] Goto L_4895
Mat Read #12,R[12],0;TRL1;
If TRL1[0] = 2 Goto L_4810
If TRL1[7] <> 0 Goto L_4810
Mat Read #12,R[12],22;TRL3;
Mat Read #11,TRL3[1],0;TR1;
If COMP <> TR1[4] Goto L_4810
If W1 <> TR1[5] Goto L_4810
If TR1[1] <> 2 Goto L_4810
QTYTR = QTYTR + TRL3[3]
Goto L_4810
L_4895: Return 
L_5000: Rem "===================================== seasonal usage rate
Goto L_4000
W3[8] = 0
W3[9] = 0
If Not(W2[2]) Goto L_5070
If W2[2] > 11 Let W2[2] = 11
X7 = ARMONTH + 1 \ If X7 = 13 Let X7 = 1
For I = W2[2] To 1 Step -1
  W3[8] = W3[8] + W5[X7]
  If WH9[X7] Let W3[9] = W3[9] + WH9[X7] Else Let W3[9] = W3[9] + W5[X7]
  X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
W3[8] = W3[8] / W2[2];W3[8] = W3[8] + (W3[8] * (WH7[1] / 100))
W3[9] = W3[9] / W2[2];W3[9] = W3[9] + (W3[9] * (WH7[1] / 100))
L_5070: Return 
L_5500: Rem "=================================== calc qty back-ordered
QBO = 0
K8$ = " ",K8$;K8$[1,12] = K2$[1,12];K8$[13,14] = W1[0] Using "##"
J$ = K8$
L_5515: Search #5,3,4;K8$,R8,E \ If E > 2 error 11000
If E Goto L_5545
If J$[1,14] <> K8$[1,14] Goto L_5545
Mat Read #5,R8,82;P3;
QBO = QBO + P3[4]
Goto L_5515
L_5545: Return 
L_6500: Rem ADD CALCULATION SOURCE DD 04/12/93
If W0[0] = 2
  W3[11] = - (W3[0] + W3[1] - W3[2] - QBO) + QTYTR
  AMOUNT = W3[11] \ Gosub L_6900
  W3[11] = AMOUNT
  If W3[11] < 0 Let W3[11] = 0
  Goto L_6535
End If 
If W0[1] Let W7[12] = 3
If Not(W7[12]) Let W7[12] = 1
If W7[12] = 1 Gosub L_6600
If W7[12] = 2 Gosub L_6700
If W7[12] = 3 Gosub L_6800
If W7[12] = 6 Gosub L_6850
AMOUNT = W3[11] \ Gosub L_6900
W3[11] = AMOUNT
L_6535: Return 
L_6600: W3[11] = 0
If W3[9] > 0 If (W3[13] * COST) <> 0 Let W3[11] = FNR(Sqr((24 * FIXPO * W3[9]) / (W3[13] * COST))) \ W3[10] = W3[11]
If W3[11] > (W3[9] * 12) Let W3[11] = W3[9] * 12;EX_CODE = 1
If W3[11] < (W3[9] * .25) Let W3[11] = W3[9] * .25;EX_CODE = 2
If W3[11] < (W2[1] * W3[9])
  W3[11] = (W2[1] * W3[9]) \ EX_CODE = 4
End If 
If (PR_C4[9]) <> 0 And (W3[11] > (PR_C4[9] * W3[9]))
  W3[11] = (PR_C4[9] * W3[9]) \ EX_CODE = 5
End If 
If W7[6] > 0 And W7[6] <= 3
  If ((W3[0] - W3[2] - QBO) + (W3[1] + QTYTR)) < W3[6]
    W3[11] = W3[11] + W3[6] - ((W3[0] - W3[2] - QBO) + (W3[1] + QTYTR))
    If (W3[5] - W3[6]) > 0 Let W3[11] = W3[11] + ((W3[5] - W3[6]) / 2)
    EX_CODE = 7
  End If 
End If 
Return 
L_6700: Rem "========================== order qty using INV CLASS (#2)
If W7[6] = 13 Let W3[11] = 0 \ Goto L_6730
W3[11] = W3[9] * W7[6]
L_6730: Return 
L_6800: Rem "========================== order qty using SEASONAL (#3)
Goto L_6600
X7 = ARMONTH + 1;X2 = 1;W3[11] = 0;EX_CODE = 3
L_6815: If X7 > 12 Let X7 = 1
If X2 > 3 Goto L_6840
If WH9[X7] Let W3[11] = W3[11] + WH9[X7] Else Let W3[11] = W3[11] + W5[X7]
X7 = X7 + 1;X2 = X2 + 1
Goto L_6815
L_6840: W3[11] = W3[11] + (W3[11] * WH7[1] / 100)
Return 
L_6850: Rem "========================== order qty using MIN/MAX (#6)
If W3[3] < (W3[0] + W3[1] - W3[2] - QBO) + QTYTR Let W3[11] = 0 \ Goto L_6875
W3[11] = W3[4] - (W3[0] + W3[1] - W3[2] - QBO) + QTYTR
L_6875: If W3[11] < 0 Let W3[11] = 0
Return 
L_6900: Rem ROUND UP TO QTY IN Vendor Ordering / PURCHASING UM
For UNT = 1 To 7
  If PFU1[20] And PFU1[UNT] = PFU1[20] Goto L_6925
Next UNT
L_6910: Rem "only purchasing unit for Min/Max
For UNT = 1 To 7
  If PFU1[UNT] = PFU1[10] Goto L_6925
Next UNT
FACTOR = 1 \ Goto L_6935
L_6925: If PFU1[UNT] < 0 Let FACTOR = 1 \ Goto L_6935
FACTOR = PFU2[UNT - 1] \ If FACTOR <= 0 Let FACTOR = 1
L_6935: If Fra(AMOUNT / FACTOR) ! "round up any fraction "  >=.5
  AMOUNT = Int(1 + (AMOUNT / FACTOR)) * FACTOR
End If 
Return 
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: !
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG !!\ error 11000
AMOUNT = CNVTA
CVTDONE: Return 
!
Rem {end rtn.convert.s}


OUTEND: Rem EXIT ROUTINE
	 
ELSE
	include "src/callmainerrnet.inc"
end try
End ! the whole program