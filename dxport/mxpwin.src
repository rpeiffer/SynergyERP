! --- mxpwin
! description Price Window Display
!
! 1.0 mm/dd/yyyy change??
!
! loadsave -w -n 100,10 -o prog/dxport/mxpwin.dl4 src/mxpwin.src
!
include "src/copyright.inc"
Rem mxpwin        global display window for matrix & ten bracket prices
Rem Author:       rek (07/20/95) to (10/19/95) [thanks to lottrans-->invtrans]
Rem tc 12/4/98 cct118090 set specs[21] to 0 to avoid price's debug mode
! jlp 12/15/98 cct113752 fix display for ten bracket prices
! jlp 3/17/99 cct113752 fix previous fix, it wasn't quite right
! tc 4/20/99 cct122125 fix so list price will not default to prev list price
! zyc 10/15/03 cct172432 don't show list price 6
! vst 10/19/05 cct196350 because of add'l price types, program now needs to
!                        read from the new 'commodity file.
!This program will open a display window to show the pricing for a chosen
!item.  Matrix products will show current price (if available), list prices
!and break table information.  Ten bracket products will show current price
!(if available), pricing for each level and list prices.  There is an option
!to change the unit that prices are displayed in.  See the document
!/usr/acct/xindist/progdoc/mxpwin for detailed information on what must
!be sent to this program.

Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR 13, 2006  10:36:42
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/misc/mxpwin.src (univ2) [txc] {55792}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetDelimiters
External Lib "libprice.lib"
Declare External Sub SysPriceCalc
Declare Intrinsic Sub InpBuf,String
Declare Intrinsic Function findchannel
!Option Default Dialect IRIS1

Enter PFLEPTR[],PSPECS[],IntCo,e$,List$[],maxcnt
Errstm Gosub ERR_TRAP
Dim 1%,B3,CHANNEL_[2],CH_BRKTBL,CH_CCODES,CH_CMDTY
Dim 1%,CH_CTRCT,CH_LASTPR,CH_PROD,CH_PRWH,CH_SPRICE,CNVTU[2],CT
Dim 1%,DFT_COST,MATPR,PUNIT,SC,SHOWLISTS,SR,WHSE,WHSEPR,LARGESTUM
Dim 2%,E,FLAG,JUNK,PTYPE,Q0[1],X1,X2[9]
Dim 3%,AMOUNT,B1[9,2],BLEVEL[10],CNVTA,FACTOR,FLEPTR[20,1],LEVEL[10,1]
Dim 3%,LIST[6],LISTC[6],PACK,REC_CCODES,REC_CMDTY,REC_PROD,REC_PRWH
Dim 3%,SPECS[50],SPRICE,SPRICEC,REC_BRKTBL
Dim BASEUNIT$[4],BLEVEL$[130],BPMASK$[12],BRD$[100],BRKDTL$[120],CUBUNIT$[6]
Dim F1$[16],INP$[20],LINE_$[78],MASK5$[5],MSGDESC$[150],P60$[50]
Dim P9$[50],PACKUNIT$[4],PMASK$[12],PUNIT$[4],STKUNIT$[4],UNIT$[4]
Dim SPACE$[12],WTUNIT$[6],Msg$[200],X$[20],WebStr$[1000]
dim buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
Rem {begin src/inc/dim.prod.i ! "product file dims}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i ! "product file dims}
Rem {begin src/inc/dim.prwh.i ! "prod whse file dims}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i ! "prod whse file dims}
Rem {begin src/inc/dim.commodity.i  ! "commodity file - was #}
Dim CCODE$[4],CCPT$[3],CMDTYUPCHG$[1],CMDTY$[36],CCOPEN$[72]
Dim 1%,CMDTYBASE,CMDTYBRKTBL,CMDTYBRKFLAG,PRFAC
Dim 2%,CMDTYMULTI,CMDTYUPCHG,CCOMMISSION
Rem {end dim.commodity.i  ! "commodity file - was #include }
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
Mat Read #1,19,50;P9$; \ Mat Read #1,60,50;P60$;
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2
LINE_$ = "_",LINE_$;SPACE$ = " ",SPACE$
MASK5$ = "#####";PMASK$ = "$$$$$$.",MASK5$[1,Q0[1]]
JUNK = Len(PMASK$)
If JUNK < 12
  BPMASK$ = SPACE$[1,12 - JUNK],PMASK$
Else 
  BPMASK$ = PMASK$
End If 
MAIN: Rem "let's get started
Gosub VERIFY
If Not(PSPECS[0]) ! "everything o.k.
  !Window Open @0,2; Size 80,22; Using " PRICE DISPLAY "
  !Print 'CS';@0,15;"Please wait... retrieving pricing...";
  Gosub SETVARS
  Gosub FILEOPEN
  Gosub GETITEM
  Gosub GETUNIT
  Gosub SETLABELS
  Gosub CALCDATA
  Gosub CONVDATA
  Gosub DISPDATA
  ! Window Close 
  
End If 
Try Close #CH_LASTPR Else REM
Try Close #CH_SPRICE Else Rem
Try Close #CH_CTRCT Else REM
Goto OUTEND
E = 0 \ Gosub ERR_SEARCH
VERIFY: Rem "verify that we have what we need
PSPECS[0] = 0
For X2 = 1 To 5
  If Not(PFLEPTR[X2,0])
    PSPECS[0] = X2
  End If 
Next X2
If Not(PFLEPTR[1,1]) ! "no product record
  PSPECS[0] = 10
End If 
If Not(PFLEPTR[3,1]) ! "no commodity record
  PSPECS[0] = 11
End If 
If Not(PSPECS[2]) ! "no price unit
  PSPECS[0] = 15
End If 
If Not(PSPECS[4]) ! "no default cost
  PSPECS[0] = 16
End If 
Return 
SETVARS: Rem "set channels/variables
CH_PROD = PFLEPTR[1,0];REC_PROD = PFLEPTR[1,1]
CH_PRWH = PFLEPTR[2,0];REC_PRWH = PFLEPTR[2,1]
CH_CMDTY = PFLEPTR[3,0];REC_CMDTY = PFLEPTR[3,1]
CH_CCODES = PFLEPTR[4,0];CH_BRKTBL = PFLEPTR[5,0]
X1 = 0;X2 = 0
For CT = 90 To 1 Step -1
  X1 = 0
  !Errstm Let X1 = Spc(8)
  Try JUNK = Chf(CT) ELSE X1=49
  !Errstm Gosub ERR_TRAP
  If X1
    If X1 = 49
      CHANNEL_[X2] = CT \ X2 = X2 + 1
    Else 
      Gosub ERR_TRAP
    End If 
  End If 
  If X2 = 3 Let CT = 1
Next CT
For CT = 0 To X2 - 1
  If Not(CHANNEL_[CT]) Let E = 0 \ Gosub ERR_SEARCH
Next CT
CH_LASTPR = CHANNEL_[0]
CH_SPRICE = CHANNEL_[1]
CH_CTRCT = CHANNEL_[2]
WHSE = PSPECS[1]
PUNIT = PSPECS[2]
SPRICE = PSPECS[3]
DFT_COST = PSPECS[4]
PTYPE = PSPECS[5]
MATPR = 0 \ If P9$[10,10] = "Y" Let MATPR = 1
WHSEPR = 0 \ If P9$[32,32] = "Y" Let WHSEPR = 1
Return 
FILEOPEN: Rem "open support files needed
Read #1,88,1376;F1$;
Ropen #CH_LASTPR,F1$
Read #1,88,1936;F1$;
Ropen #CH_SPRICE,F1$
Read #1,88,2880;F1$;
Ropen #CH_CTRCT,F1$
Return 
GETITEM: Rem "get prod/prod whse data
Rem {begin src/inc/read.prod.i}
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Mat Read #CH_PROD,REC_PROD,628;AGEDAY
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Mat Read #CH_PROD,REC_PROD,1270;PRD0
Mat Read #CH_PROD,REC_PROD,1282;PRIML$
Mat Read #CH_PROD,REC_PROD,1294;PRD1
Mat Read #CH_PROD,REC_PROD,1304;PRD2
Rem {end read.prod.i}
If Not(A[5]) Let A[5] = 1
If Not(A1[3]) Let A1[3] = 1
LARGESTUM = PFU1[0]
X1 = 1
For X2 = 0 To 6
  If X1 < PFU2[X2] And PFU1[X2 + 1] >= 0 ! assuming no u/m zero record
    X1 = PFU2[X2]
    LARGESTUM = PFU1[X2 + 1]
  End If 
Next X2
If REC_PRWH ! "have whse record
  Rem {begin src/inc/read.prwh.i}
  Mat Read #CH_PRWH,REC_PRWH,0;W1$
  Mat Read #CH_PRWH,REC_PRWH,32;W1
  Mat Read #CH_PRWH,REC_PRWH,38;W2
  Mat Read #CH_PRWH,REC_PRWH,78;W3
  Mat Read #CH_PRWH,REC_PRWH,228;W5
  Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
  Read #CH_PRWH,REC_PRWH,396;WHLPOOL
  Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
  Read #CH_PRWH,REC_PRWH,404;FCWGT
  Mat Read #CH_PRWH,REC_PRWH,420;W0
  Mat Read #CH_PRWH,REC_PRWH,428;WH7
  Mat Read #CH_PRWH,REC_PRWH,444;WH8
  Mat Read #CH_PRWH,REC_PRWH,540;WH9
  Mat Read #CH_PRWH,REC_PRWH,696;W7
  Mat Read #CH_PRWH,REC_PRWH,756;WH3$
  Mat Read #CH_PRWH,REC_PRWH,780;WHLV
  Read #CH_PRWH,REC_PRWH,798;WHRPLN
  Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
  Mat Read #CH_PRWH,REC_PRWH,842;WHLM
  Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
  Read #CH_PRWH,REC_PRWH,894;RESTRICTED
  Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
  Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
  Read #CH_PRWH,REC_PRWH,922;VLIST
  Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
  Read #CH_PRWH,REC_PRWH,938;WHBASE
  Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
  Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
  Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
  Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
  Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
  Rem {end read.prwh.i}
End If 
Unlock #CH_PROD,#CH_PRWH
If WHSEPR Gosub SETWHSE
If REC_CMDTY ! THIS IS THE COMMHEAD REC - NOT COMMODITY!
  ! the following taken from call "price"
  CH_COMMODITY = FindChannel()
  Let F1$ ="2/COMMODITY"+Str$(IntCo)
  
  Ropen #CH_COMMODITY,"files/" + F1$
  Mat Read #CH_CMDTY,REC_CMDTY,0;CMDTY$;
  X$[1,4] = CMDTY$[32,35]
  X$[5] = PTYPE Using "### "
  Search #CH_COMMODITY,2,1;X$,REC_TCMDTY,E
  If E
    CMDTYBASE = 0;CMDTYMULTI = 0;CMDTYUPCHG = 0;CMDTYBRKTBL = 0
  Else 
    CH_TCMDTY = CH_COMMODITY
    Rem
	  Rem {begin src/inc/read.commodity.i  ! " was:   #include read}
	  Mat Read #CH_TCMDTY,REC_TCMDTY,0;CCODE$
	  Mat Read #CH_TCMDTY,REC_TCMDTY,25;CCPT$
	  Mat Read #CH_TCMDTY,REC_TCMDTY,40;CMDTYBASE
	  Mat Read #CH_TCMDTY,REC_TCMDTY,42;CMDTYMULTI
	  Mat Read #CH_TCMDTY,REC_TCMDTY,46;CMDTYBRKTBL
	  Mat Read #CH_TCMDTY,REC_TCMDTY,48;CMDTYUPCHG$
	  Mat Read #CH_TCMDTY,REC_TCMDTY,49;CMDTYUPCHG
	  Mat Read #CH_TCMDTY,REC_TCMDTY,53;CMDTYBRKFLAG
	  Mat Read #CH_TCMDTY,REC_TCMDTY,55;CCOPEN$
	  Rem {end read.commodity.i  ! " was:   #include read.commcod}
	Unlock #CH_TCMDTY
  Endif
  If Not(CMDTYBASE) And Not(CMDTYMULTI) Let CMDTYMULTI = 1
  Try Close #CH_COMMODITY ELSE REM
Else 
  CMDTYBASE = 0;CMDTYMULTI = 0
End If 
If P60$[50,50] = "Y" And CMDTYBRKTBL > 0 And CMDTYBRKTBL <= Chf(CH_BRKTBL)
  REC_BRKTBL = CMDTYBRKTBL
Else 
  REC_BRKTBL = B[22]
End If 
If REC_BRKTBL
  Mat Read #CH_BRKTBL,REC_BRKTBL,0;B1;
  Mat Read #CH_BRKTBL,REC_BRKTBL,200;B3;
  Mat Read #CH_BRKTBL,REC_BRKTBL,202;BRD$;
  If PR_C4[2] = 1 And (B3 <> 1 And B3 <> 3) Let REC_BRKTBL = 0
  If PR_C4[2] <> 1 And B3 <> 2 Let REC_BRKTBL = 0
End If 
Return 
SETWHSE: Rem "check/set warehouse with valid data
If WHSEPR ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let PR_C4[3] = WHPARC[1] Else If X2 Let PR_C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = PR_C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If REC_PRWH Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
GETUNIT: Rem "get unit codes
PUNIT$ = " ",PUNIT$;STKUNIT$ = " ",STKUNIT$
WTUNIT$ = " ",WTUNIT$;CUBUNIT$ = " ",CUBUNIT$
PACKUNIT$ = " ",PACKUNIT$;BASEUNIT$ = " ",BASEUNIT$
REC_CCODES = PUNIT \ Gosub READUNIT
PUNIT$ = UNIT$
REC_CCODES = PFU1[8] \ Gosub READUNIT
STKUNIT$ = UNIT$
FACTOR = A[5]
If FACTOR = 1
  REC_CCODES = PFU1[0]
  Gosub READUNIT \ WTUNIT$ = UNIT$
Else 
  For X1 = 0 To 6
    If FACTOR = PFU2[X1]
      REC_CCODES = PFU1[X1 + 1]
      Gosub READUNIT \ WTUNIT$ = UNIT$
      Goto ENDLOOP
    End If 
  Next X1
  WTUNIT$ = Str$(FACTOR)
ENDLOOP: Rem "continue on
End If 
FACTOR = A1[3]
If FACTOR = 1
  REC_CCODES = PFU1[0]
  Gosub READUNIT \ CUBUNIT$ = UNIT$
Else 
  For X1 = 0 To 6
    If FACTOR = PFU2[X1]
      REC_CCODES = PFU1[X1 + 1]
      Gosub READUNIT \ CUBUNIT$ = UNIT$
      Goto ENDLOOP1
    End If 
  Next X1
  CUBUNIT$ = Str$(FACTOR)
ENDLOOP1: Rem "continue on
End If 
REC_CCODES = PFU1[18] \ Gosub READUNIT
PACKUNIT$ = UNIT$
CNVTU[0] = PFU1[18];CNVTU[1] = 0;CNVTU[2] = 1;CNVTA = 1
Gosub CONVERT \ PACK = AMOUNT
REC_CCODES = PFU1[0] \ Gosub READUNIT
BASEUNIT$ = UNIT$
Return 
READUNIT: Rem "get unit code
UNIT$ = "Err "
If REC_CCODES > 0 Mat Read #CH_CCODES,REC_CCODES,10;UNIT$;
If REC_CCODES = -1 Let UNIT$ = "CWT "
If REC_CCODES = -2 Let UNIT$ = "LOT "
If REC_CCODES = -3 Let UNIT$ = "LB  "
Return 
PRICEDATA: Rem "set standard price info
FLEPTR[1,0] = CH_PROD;FLEPTR[1,1] = REC_PROD
FLEPTR[2,0] = CH_PRWH;FLEPTR[2,1] = REC_PRWH
FLEPTR[3,0] = CH_CMDTY;FLEPTR[3,1] = REC_CMDTY
FLEPTR[4,0] = CH_LASTPR;FLEPTR[4,1] = 0
FLEPTR[5,0] = CH_SPRICE;FLEPTR[5,1] = 0
FLEPTR[6,0] = CH_CTRCT;FLEPTR[6,1] = 0
FLEPTR[7,0] = CH_CCODES;FLEPTR[7,1] = 0
FLEPTR[8,0] = CH_BRKTBL;FLEPTR[8,1] = 0
SPECS[1] = 0;SPECS[2] = 0;SPECS[3] = 0
SPECS[4] = WHSE;SPECS[5] = 0;SPECS[6] = 0;SPECS[7] = PTYPE
SPECS[8] = 1;SPECS[9] = DFT_COST;SPECS[10] = 0
SPECS[12] = 0;SPECS[13] = PFU1[9]
SPECS[14] = LARGESTUM;SPECS[15] = PFU1[11];SPECS[16] = 0
SPECS[17] = 0;SPECS[18] = 0;SPECS[19] = 0;SPECS[20] = 0
SPECS[21] = 0
Return 
CALCDATA: Rem "calculate prices
Gosub PRICEDATA
SHOWLISTS = 0
If PR_C4[2] = 1 ! "matrix
  SHOWLISTS = 1
Else 
  If WHSEPR
    X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  Else 
    X2 = A[20] + A[21] + A[22] + A[23] + A[24] + A[25]
  End If 
  If MATPR And X2 Let SHOWLISTS = 1
End If 
Mat LIST = Zer \ LIST[0] = 0
If SHOWLISTS ! "we're gonna display the lists
  For X2 = 1 To 6
    If PR_C4[2] = 1
      SPECS[0] = 1;SPECS[11] = X2
      SPECS[20] = 0
      SPECS[21] = 0
      ! Call "price",FLEPTR[],SPECS[],MSGDESC$
	  Call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,0,"")
      If SPECS[0] Let E = SPECS[0] \ Gosub ERR_SEARCH
      LIST[X2] = SPECS[20]
    Else 
      If WHSEPR Let LIST[X2] = W3[18 + X2] Else Let LIST[X2] = A[19 + X2]
    End If 
    LIST[0] = LIST[0] + LIST[X2]
  Next X2
End If 
If REC_BRKTBL > 0
  For X2 = 1 To 10
    If MATPR And PR_C4[2] = 1
      Gosub PRICEDATA
      SPECS[0] = 2;SPECS[11] = X2;SPECS[20] = SPRICE
      If PTYPE <= 0 Or PTYPE = 14 Let SPECS[20] = 0
      If SPECS[20]
        !Call "price",FLEPTR[],SPECS[],MSGDESC$
		Call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,0,"")
        If SPECS[0] Let E = SPECS[0] \ Gosub ERR_SEARCH
        LEVEL[X2,0] = SPECS[23]
      Else 
        If B1[X2 - 1,1] = 0 ! "%
          LEVEL[X2,1] = - (B1[X2 - 1,2])
        Else 
          LEVEL[X2,1] = B1[X2 - 1,2]
        End If 
      End If 
    Else 
      Gosub PRICEDATA
      SPECS[0] = 3;SPECS[11] = X2
      !Call "price",FLEPTR[],SPECS[],MSGDESC$
	  Call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,0,"")
      If SPECS[0] Let E = SPECS[0] \ Gosub ERR_SEARCH
      LEVEL[X2,0] = SPECS[23]
    End If 
  Next X2
End If 
Return 
CONVDATA: Rem "convert to price unit
Mat LISTC = Zer \ LISTC[0] = 0
If LIST[0] ! "do lists first
  For X2 = 1 To 6
    CNVTU[0] = 0;CNVTU[1] = PUNIT;CNVTU[2] = 2;CNVTA = LIST[X2]
    If CNVTA Gosub CONVERT Else Let AMOUNT = 0
    LISTC[X2] = AMOUNT
  Next X2
End If 
SPRICEC = 0
If SPRICE ! "convert calculated price
  CNVTU[0] = 0;CNVTU[1] = PUNIT;CNVTU[2] = 2;CNVTA = SPRICE
  Gosub CONVERT
  SPRICEC = AMOUNT
End If 
BRKDTL$ = " ",BRKDTL$
If REC_BRKTBL > 0 ! "do levels now
  For X2 = 1 To 10
    If LEVEL[X2,0]
      CNVTU[0] = 0;CNVTU[1] = PUNIT;CNVTU[2] = 2;CNVTA = LEVEL[X2,0]
      Gosub CONVERT
      BRKDTL$[X2 * 12 - 11,X2 * 12] = AMOUNT Using BPMASK$
    Else 
      If LEVEL[X2,1] > 0
        CNVTU[0] = PFU1[8];CNVTU[1] = PUNIT;CNVTU[2] = 2;CNVTA = LEVEL[X2,1]
        Gosub CONVERT
        BRKDTL$[X2 * 12 - 11,X2 * 12] = AMOUNT Using BPMASK$
      Else 
        If LEVEL[X2,1] < 0
          BRKDTL$[X2 * 12 - 11,X2 * 12] = Abs(LEVEL[X2,1]) Using "     ###.##%"
        Else 
          BRKDTL$[X2 * 12 - 11,X2 * 12] = 0 Using "############"
        End If 
      End If 
    End If 
  Next X2
End If 
Return 
SETLABELS: Rem "set descriptions for break levels
BLEVEL$ = " ",BLEVEL$
Mat BLEVEL = Zer \ BLEVEL[0] = 0
If REC_BRKTBL > 0
  If (PR_C4[2] = 1 And (B3 = 1 Or B3 = 3)) Or (PR_C4[2] = 2 And B3 = 2)
    For X2 = 1 To 10
      If BRD$[X2 * 10 - 9,X2 * 10 - 8] <> "  "
        BLEVEL[X2] = B1[X2 - 1,0]
        BLEVEL$[X2 * 13 - 12,X2 * 13] = BRD$[X2 * 10 - 9,X2 * 10],"   "
      Else 
        BLEVEL[X2] = B1[X2 - 1,0]
        If BLEVEL[X2] >= 0
          If B3 <> 3 ! table type 3 is matrix $
            BLEVEL$[X2 * 13 - 12,X2 * 13 - 4] = BLEVEL[X2] Using " ####### "
            BLEVEL$[X2 * 13 - 3,X2 * 13] = STKUNIT$
          Else 
            BLEVEL$[X2 * 13 - 12,X2 * 13] = BLEVEL[X2] Using "     $$$$$$$#"
          End If 
        Else 
          BLEVEL$[X2 * 13 - 12,X2 * 13] = Abs(BLEVEL[X2]) Using " ####### LBS "
        End If 
      End If 
    Next X2
  End If 
End If 
Return 
DISPLABELS: Rem "show window labels
!Print 'CS';@1,1;"All prices per";
Clear List$[]
tmpcnt=maxcnt
List$[0]=bsdel$,"PRICEWINDOW",fdel$
WebStr$="UM",fdel$,"TYPE",fdel$,"BASEPRC",fdel$
WebStr$=WebStr$,"TBL",fdel$,"LVL1D",FDEL$,"LVL1PRC",fdel$,"LVL2D",FDEL$
WebStr$=WebStr$,"LVL2PRC",fdel$,"LVL3D",fdel$,"LVL3PRC",fdel$,"LVL4D",fdel$
WebStr$=WebStr$,"LVL4PRC",fdel$,"LVL5D",fdel$,"LVL5PRC",fdel$,"LVL6D",fdel$
WebStr$=WebStr$,"LVL6PRC",fdel$,"LVL7D",fdel$,"LVL7PRC",fdel$,"LVL8D",fdel$
WebStr$=WebStr$,"LVL8PRC",fdel$,"LVL9D",fdel$,"LVL9PRC",fdel$,"LVL10D",fdel$
WebStr$=WebStr$,"LVL10PRC",fdel$,"LPRC1",fdel$,"LPRC2",fdel$,"LPRC3",fdel$
WebStr$=WebStr$,"LPRC4",fdel$,"LPRC5",fdel$,"WGT",fdel$,"CUBE",fdel$,"PACK",fdel$
WebStr$=WebStr$,"PKUM",fdel$
List$[1]=WebStr$
WebStr$=PUNIT$,fdel$
If PR_C4[2] = 1
  WebStr$=WebStr$,"Matrix",fdel$
Else 
  WebStr$=WebStr$,"10 Bracket",fdel$
End If 
If SPRICE WebStr$=WebStr$,LTrim$(SPRICEC Using PMASK$),fdel$ Else WebStr$=Webstr$,"0",fdel$
If REC_BRKTBL WebStr$=WebStr$,"Break Table # ",Str$(REC_BRKTBL),fdel$  ELSE WebStr$=WebStr$,fdel$
!If SPRICE Print @53 + (5 - Q0[1]),1;"Base price:";
If REC_BRKTBL > 0
  For X2 = 1 To 10
    WebStr$=WebStr$,LTrim$(BLEVEL$[(X2 * 13 - 12),(X2 * 13)]),fdel$
	WebStr$=WebStr$,LTrim$(BRKDTL$[(X2 * 12 - 11),(X2 * 12)]),fdel$
    !Print @3 + (X2 * 14 - 13),6;'BR';BLEVEL$[65 + (X2 * 13 - 12),65 + (X2 * 13)];'ER';
	!Print @4 + (X2 * 14 - 13),7;BRKDTL$[(60 + (X2 * 12) - 11),(60 + (X2 * 12))];
  Next X2
Else ! no brks
	For X2=1 to 10 ! 5
		WebStr$=WebStr$," ",fdel$,"0",fdel$
	Next X2
End If 
If LIST[0] ! "show list prices
  For X2 = 1 To 5
    !Print Using "List  #";@4 + (X2 * 13 - 12),10;'BR';X2;'ER';
	WebStr$=WebStr$,LTrim$(LISTC[X2] Using PMASK$),fdel$
  Next X2
Else ! no lists
	Webstr$=wEBsTR$,FDEL$,fdel$,fdel$,fdel$,fdel$
End If 
! Print @0,12;LINE_$[1,78];
WebStr$=WebStr$,LTrim$(A[6] Using "######.##")," /",WTUNIT$,fdel$
WebStr$=WebStr$,LTrim$(B[23] Using "######.##")," /",CUBUNIT$,fdel$
WebStr$=WebStr$,LTrim$(PACK Using "############")," ",BASEUNIT$,fdel$
WebStr$=WebStr$,PACKUNIT$,fdel$
List$[2]=WebStr$
List$[3]=esdel$
Return 
DISPDATA: Rem "redisplay data for window
Gosub DISPLABELS
!Print @16,1;PUNIT$;
!If SPRICE Print Using PMASK$;@65 + (5 - Q0[1]),1;SPRICEC;
!If REC_BRKTBL > 0
!  For X2 = 1 To 5
!    Print @4 + (X2 * 14 - 13),4;BRKDTL$[(X2 * 12 - 11),(X2 * 12)];
!    Print @4 + (X2 * 14 - 13),7;BRKDTL$[(60 + (X2 * 12) - 11),(60 + (X2 * 12))];
!  Next X2
!Else 
  !Print @13,5;"N O  L E V E L S  C A N  B E  C A L C U L A T E D";
!End If 
!If LIST[0] ! "show lists
!  For X2 = 1 To 5
!    Print Using PMASK$;@((X2 * 13 - 13) + (5 - Q0[1])),11;LISTC[X2];
!  Next X2
!End If 
!Print Using "####.##";@14,16;A[6];" /";WTUNIT$;
!Print Using "####.##";@31,16;B[23];" /";CUBUNIT$;
!Print Using "##########";@48,16;PACK;" ";BASEUNIT$;
PROMPT: Rem "get option
Return ! cannot chg um
!Print @1,18;"Enter   -: to change pricing unit, or <CR> to continue _";'CL ML';
!Input Len 16385;""INP$
!If INP$ = "" Return 
!If INP$ = "-"
!  Gosub UNITCHANGE
!  Gosub CONVDATA
!  Goto DISPDATA
!End If 
Goto PROMPT ! Print 'RB'; \ Goto PROMPT
UNITCHANGE: Rem "change pricing unit/recalc
Return ! cannot do on web
!CNVTU[0] = 0;CNVTU[1] = 0;CNVTU[2] = 3;CNVTA = 0
!Gosub CONVERT
!Input ""INP$
!If INP$ <> ""
!  If INP$[1,3] = "CWT"
!    PUNIT = -1
!  Else 
!    If INP$[1,2] = "LB" And A$[127,127] = "Y"
!      PUNIT = -3
!    Else 
!      Search #CH_CCODES,2,1;INP$,PUNIT,E
 !     If E > 1 Gosub ERR_SEARCH
!    End If 
!  End If 
!!  REC_CCODES = PUNIT \ Gosub READUNIT
!  PUNIT$ = UNIT$
!End If 
!Return 
OUTEND: Rem "go back
End 
E = 0 \ Gosub ERR_SEARCH
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: !
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM ",MSC$(4)
call programdump("tmp/mx234ase!","")
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
Stop