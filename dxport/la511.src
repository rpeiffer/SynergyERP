! >>> Program La511
!
! description Data Entry List
! loadsave -w -n 100,10 -o prog/dxport/la511.dl4 src/la511.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"

Rem BEDIT Version: 2.2 OBJECT CODE     Created: DEC 10, 2008  10:09:03
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/la511.src (univ2) [mary] {26775}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

Declare Intrinsic Sub DateToJulian,FindF,InpBuf,Logic,String,Time,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub FindF,InpBuf,String
! Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort
 
Rem LA511 ACCOUNT PAYABLE DATA ENTRY LIST
Rem AUTHOR: MTK   APR  1991
Rem     UNIVERSAL BUSINESS SYSTEMS
!If Err 0 Gosub ERR_TRAP
Try
	Enter CH_AP[],SPEC[],MESSAGE$,rstr$ 
	dim e$[500],buttonlist$[5,50],nextlist$[5,100],msg$[100],TMP$[50] ! error 
	dim 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33]
!If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
dim 1%,apbCURRID,3%,apbCURRFACT,keycurr$[30],currdesc$[30]
dim 1%,cnvcu[10],3%,cnvca[10]
dim 1%,oi_CURRID,3%,oi_currfact
dim 1%,aph_CURRID,3%,aph_currfact
dim 3%,aphmerch,aphfreight,aphmisc,grossapamt,discapamt,netapamt
dim 1%,poh_currid,3%,poh_currfact,pohfrtappl,pohmiscamt,pohmiscappl,pohfrtamt
dim 1%,pol_CURRID,3%,pol_CURRFACT 
dim 1%,poc_currid,3%,poc_currfact
dim 1%,apl_currid,3%,apl_currfact
dim p61$[256]


Dim 1%,ERRFLAG[10],POPRTFLAG,PCT0
Dim 1%,B5[1],C0[6],E,F9[1],I,L[2],O1[2],P,X,X1,O4[1],TOTFLAG,SPO,CHAN
Dim 2%,A1,B4[1],C3[1],C4,D0,G9[3],SCRPRT
Dim 2%,O2[6],X2,PONUM,3%,R[50]
Dim 3%,PENDQTY,PRODLBS,PRODFACT,POLBS,POFACT
Dim 3%,A2[11],B6[3],D1[1],O3[11],Q[2]
Dim 3%,T2[3],T9[3],T[3],PCTR,POH7
Dim A$[30],D$[25],F$[16],G8$[2],G9$[40],J$[48]
Dim K1$[30],K2$[30],K4$[30],K9$[50],O$[6],O1$[12],tmpkey$[50]
Dim P$[8],Q$[9],R$[63],R2$[4],T$[9],U1$[2],U5$[10]
Dim X$[10],Z1$[220],2%
Dim 1%,ch_apdm,msgflg,distflag,3%,rec_apdm,keyapdm$[50]
dim apmsg$[50],chkmsg$[50]
Dim 1%,H4[3],L1[5],PL0[4],NSD1[7],APH1[2],APL1[5],X0[9]
Dim 1%,MULTIPOLINE,MULTPO,POS_
Dim 2%,H0[5],H3[4],PH[4],L2[2],B[24],NSD2[4],PH0[2],APL0[2]
Dim 2%,Q0[1],APH0[2],VENDCODE
Dim 3%,H8[9],PL[5],L3[6],A3[7],NSD3[9],APH2[2],APL2[3],PO3[12],PL4[19]
Dim 3%,POCOST,POQTY,CURRQTY,POFREIGHT,POMISC,T7[2,1],T8[1],T6[2,1]
Dim 3%,CWT_WT_ADJ,PROD_WT_BASE,PO_WT_BASE,TMP_A_6
Dim 3%,TOTAPPLD,APQTY,POQTY,BAPQTY,BPOQTY,AMOUNT,POTOT,CURRCOST
Dim 3%,DISP_QTY,DISP_COST,DISP_EXT,APAMT[1],tmp
Dim 1%,PCT3[2]
Dim 2%,PCT1[5]
Dim 3%,PCT2[5],PCT4[1],PCT5[9],PCT6[1],LBSUNIT,LBSFACTOR,PCT9[4]
Dim PCT$[12],KEYPOCT$[30]
Dim H$[82],H1$[116],L1$[104],A1$[156],NSD$[96],APH$[12],APL$[12]
Dim U9$[131],PMASK$[12],M1$[14],K22$[40],K21$[40],K32$[40],K31$[40],PMASK1$[12]
Dim K14$[20],K3$[30],KEY21$[40],KEYAP$[50],KEYAPL$[50],POLINE$[132]
Dim 3%

Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
!L_400: Print 'CS'; Tab 10;"DATA ENTRY LIST";
!Print @0,23;'CL';"Enter Report Option,  1: Vendor Code Order   2: Entered Order   <CR>: end ";
!Input Len (16384 + 1);""J$
!Call String(1,J$)
!If J$ = "" Goto L_9040
!If J$ < "1" Or J$ > "2" Goto L_400
!If J$ = "1" Let CHAN = 3 Else Let CHAN = 9

!Gosub L_7000
L9 = 58;SCRPRT = 0
Comp=spec[0] ! company #
intco=spec[0]
RepOpt=spec[1] ! 1= vendor Code, 2 = entered, 3 = vendor trans page break
let pagebreak=0
If RepOpt=3
	let pagebreak=99
endif
Audonly=spec[2]
BatchId=spec[3]
Acper=spec[4]
PrintType=spec[5] ! 99=browser
rec_uac=spec[8]
returnstatus=spec[9]
message$=""

Rem open files    
if not (ch_ap[20]) ! cntrl file
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=ch_ap[20]
endif
Try Close #9 Else Rem
let onchannelno=9
sortchan = blockbuildsort(e$,25,0,onchannelno)
Mat Read #ctlc,115,40;Q0;
Mat Read #ctlc,51,18;C0;
Mat Read #ctlc,51,76;SPO;
Mat Read #ctlc,115,40;Q0;
mat read #ctlc,61,0;p61$;
PMASK1$ = "#####.####"
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
if c0[4]<>0 ! appo inteface
	if not(Ch_ap[0]) ! appoh file
		ch_aph=OpenFile(9802,intCo) \ If Ch_aph = -1 Error 42!
	else
		let ch_aph=ch_ap[0]
	endif
	! mtg
	if not(ch_ap[1])
		ch_apl=OpenFile(9803,intCo) \ If Ch_apl = -1 Error 42!
	else
		let ch_apl=ch_ap[1]
	endif
	If spo<>0
		if not(Ch_ap[2])
			ch_poc=OpenFile(9944,intCo) \ If Ch_poc = -1 Error 42!
		else
			let ch_poc=ch_ap[2]
		endif
	endif
	if not (ch_ap[3]) ! purchase order header  #8
		Ch_Poh = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
	else
		ch_poh=ch_ap[3]
	endif
	if not (ch_ap[4]) ! po lines #9
		Ch_PoL = openfile(2432,intCo) \ If Ch_Pol = -1 Error 42     !"po lines file
	else
		let ch_pol=ch_ap[4]
	endif
	if not (ch_ap[9]) ! product file #3
		Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
	else
		let ch_prod=ch_ap[9]
	endif
	If not (ch_ap[10]) ! warehouse file #12 
		Ch_Wh = OpenFile(2768,intCo) \ If Ch_Wh = -1 Error 42  !" warehouse file
	else
		let ch_wh=ch_ap[10]
	endif
	if not (ch_ap[12]) !  nonstock #14
		ch_nstk=OpenFile(2448,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
	else
		let ch_nstk=ch_ap[12]
	endif
	if not(ch_ap[18])
		Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file
	else
		let ch_ccode=ch_ap[18]
	endif
endif !
if not(ch_ap[5]) ! a20di
	ch_di=OpenFile(9806,intCo) \ If Ch_di = -1 Error 42 ! ap dist file
else
	let ch_di=ch_ap[5]
endif
if not (ch_ap[6]) ! a20oi =CH_OI
	ch_oi=OpenFile( 9801,intCo) \ If Ch_oi = -1 Error 42 ! open item file
else
	ch_oi=ch_ap[6]
endif
if not(ch_ap[7]) ! apdeth=CH_APDH
    ch_apdh=OpenFile(432,intCo) \ If Ch_apdh = -1 Error 42 ! ap detail header file  
else
    ch_apdh=ch_ap[7]
endif
if not(ch_ap[8])
	 ch_bth=OpenFile(9804,intCo) \ If Ch_bth = -1 Error 42 ! ap batch file 
else
	ch_bth=ch_ap[8]
endif
if not(ch_ap[11]) ! pomisc
	ch_misc = OpenFile(-9949,intCo) \ If ch_misc = -1 Error 42 !po misc charge 
else
	CH_MISC=ch_ap[11]
			
endif
if not (ch_ap[14]) !  vendor
	ch_vend=OpenFile(2400,intCo) \ If Ch_vend = -1 Error 42 ! vendor
else
	let ch_vend=ch_ap[14]
endif
if not (ch_ap[15]) ! aooap file
	ch_apc=OpenFile( 16,intCo) \ If Ch_apc = -1 Error 42 ! ap control file
else
	let ch_apc=ch_ap[15]
endif
if not(ch_ap[17])
	 ch_vl=OpenFile( 32,intCo) \ If Ch_vl = -1 Error 42 ! ap /gl validation file
else
	let ch_vl=ch_ap[17]
endif
if c0[6]<>0
	if not(ch_ap[19])
		 ch_apdiv=OpenFile(9805,intCo) \ If Ch_apdiv = -1 Error 42 
	else
		ch_apdiv=ch_ap[19]
	endif
endif
if not(ch_ap[21])
	ch_acf=OpenFile(48,intCo) \ If Ch_acf = -1 Error 42 ! acf file 
else
	ch_acf=ch_ap[21]
endif
if not(ch_ap[22]) ! apdeth=CH_APDH
    ch_apda=OpenFile(-144,intCo) \ If Ch_apda = -1 Error 42 ! ap detail header file  
else
    ch_apda=ch_ap[22]
endif
ch_roi=OpenFile(-9801,intCo) \ If Ch_roi = -1 Error 42 ! open item file
ch_apdm=OpenFile(9820,intCo) \ If Ch_apdm = -1 Error 42 ! ap detail header file
if p61$[136,136]="Y"
	ch_curr=OpenFile(9712,intCo) \ If Ch_curr = -1 Error 42 ! ap detail header file
endif
if repopt=1 let chan=ch_oi else let chan=9

L_900: K2$ = "10" \ Search #ch_apc,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #ch_apc,R[15],2;R2$;
Mat Read #ch_apc,R[15],168;U1$;
K2$ = " ",K2$ \ K2$[3,6] = R2$
Search #ch_acf,2,1;K2$,R[16],E
If E Gosub ERR_SEARCH
Mat Read #ch_acf,R[16],10;G9$;
K2$ = "10" \ Search #ch_apc,2,1;K2$,R[15],E
If E Gosub ERR_SEARCH
Read #ch_apc,R[15],6;Q$;
Q[0] = Q$
Read #ch_apc,R[15],24;Q$;
Q[1] = Q$
Read #ch_apc,R[15],150;Q$;
Q[2] = Q$

b4[0]=acper
B4[1]=batchid
K14$ = " ",K14$ \ K14$[1,4] = B4[0] Using "####"
K14$[5,10] = B4[1] Using "######"
Search #ch_bth,2,1;K14$,R[14],E 
If E <>0
	let eflag=eflag+1
	message$=message$+"BATCH NUMBER "+Str$(B4[1])+"IS NOT ON FILE!!!"
	goto outend:
endif
Gosub L_6000
if b5<>2
	let eflag=eflag+1
	message$=message$+"Incorrect Data Entry List Process Flag for Batch Number "+str$(b4[1])
	goto outend:
endif
if p61$[136,136]="Y" and apbcurrid<>0 and apbcurrfact<>0
	let currpass=1 ! for conversions
	let keycurr$=" ",keycurr$
	let keycurr$[1,4]=apbcurrid using "####"
	search #ch_curr,2,1;keycurr$,rec_curr,e
	if e<>0
		let currdesc$="Currency Not On File "
	else
		mat read #ch_curr,rec_curr,2;currdesc$;
	endif
endif

L_1700: Rem rem sort routine
PCTR = 0
If CHAN <> 9 Goto L_1900
!If Err 0 Gosub ERR_ESCAPE
!Print @0,22;'CE';"Sorting... Please Wait";
K9$ = " ",K9$
L_1720: Search #9,3,1;K9$,R[9],E \ If E = 2 Goto L_1750
If E Gosub ERR_SEARCH
Search #9,5,1;K9$,R[9],E \ If E Gosub ERR_SEARCH
Goto L_1720
L_1750: Rem start sort here
K1$ = " ",K1$
L_1800: Search #ch_oi,3,1;K1$,R[3],E
If E = 2 Goto L_1900
Mat Read #ch_roi,R[3],0;O$;
Mat Read #ch_roi,R[3],40;O3;
If Not(C0[3]) Goto L_1835
If O3[9] <> B4[1] Goto L_1800
If O3[8] <> B4[0] Goto L_1800
Goto L_1840
L_1835: If O$[2,2] <> "1" Goto L_1800
L_1840: If O$[1,1] <> "0" If O$[1,1] <> "9" Goto L_1800
Gosub L_7100
K9$[1,1] = "#"
K9$[2,8] = O3[6] Using "#######"
K9$[9] = K1$
Search #9,4,1;K9$,R[3],E \ If E Gosub ERR_SEARCH
Goto L_1800
L_1900: ! If Err 0 Gosub ERR_ESCAPE
PCTR = 0
L = 99 \ L[1] = 1 \ F9[1] = 0 \ V9 = 0
Call Time(D$)
T$ = "INVC/MM/C"
K1$ = " ",K1$
If CHAN = 9 Let K1$ = "#"
L_2000: Search #CHAN,3,1;K1$,R[3],E
If E = 2 Goto L_4000
If CHAN = 9 If K1$[1,1] <> "#" Goto L_4000
Mat Read #ch_roi,R[3],0;O$;
Mat Read #ch_roi,R[3],40;O3;
If Not(C0[3]) Goto L_2035
If O3[9] <> B4[1] Goto L_2000
If O3[8] <> B4[0] Goto L_2000
Goto L_2040
L_2035: If O$[2,2] <> "1" Goto L_2000
L_2040: If O$[1,1] <> "0" If O$[1,1] <> "9" Goto L_2000
Gosub L_7100
If O$[1,1] = "9" Gosub L_3200
IF NOT(PAGEBREAK)
	If O2[0] = A1 Goto L_2090
	Gosub L_3000
endif
VENDCODE = O2[0]
Gosub L_7160
Gosub L_3100
TOTFLAG = 0
L_2090: Rem GOSUB L_5800:
let keyapdm$=" ",keyapdm$
let msgflg=0
let keyapdm$[1,6]=O2[0] using "######"
let keyapdm$[7,18]=O1$[1,12]
let keyapdm$[19,20]=O1 USING "##"
do
	search #ch_apdm,3,1;keyapdm$,rec_apdm,e
	if e<>0 exit do
	if keyapdm$[7,18]<>o1$[1,12] exit do
	let tmp3=keyapdm$[1,6]\if tmp3<>o2[0] exit do
	let tmp3=keyapdm$[19,20]\if tmp3<>o1 exit do
	mat read #ch_apdm,rec_apdm,48;APMSG$;
	mat read #ch_apdm,rec_apdm,98;CHKMSG$;
	If rtrim$(apmsg$)<>"" let msgflg=msgflg+1
	if rtrim$(chkmsg$)<>"" let msgflg=msgflg+1
	exit do
loop
Gosub L_5000
TOTFLAG = 99
If C0[4]
  POLINE$ = "";POS_ = 0
  K9$ = " ",K9$ \ K9$[1,6] = O2[0] Using "######"
  K9$[7,18] = O1$[1,12] \ K9$[19,20] = O1 Using "##"
  KEY21$ = " ",KEY21$;KEY21$[1,20] = K9$[1,20]
SEARCHAPPOH: Rem search for all po's applied
  Search #ch_aph,3,1;K9$,R[21],E \ If E = 2 Goto L_2200
  If E Gosub ERR_SEARCH
  If K9$[1,20] <> KEY21$[1,20] Goto L_2200
  Search #9,4,1;K9$,R[21],E \ If E Gosub ERR_SEARCH
  PONUM = K9$[21,26]
  If PONUM <> O2[5] ! po number different
    If POLINE$ = "" Or POS_ > 121
      If POS_ > 121 Gosub PRNTPOLINE
      POLINE$ = " ",POLINE$
      If O1 <> 2
        POLINE$[33] = PONUM Using "Purchase Order(s): ######"
      Else 
        POLINE$[33] = PONUM Using "Debit Memo(s)    : ######"
      End If 
      POS_ = 58
    Else 
      POLINE$[POS_,POS_] = ","
      POLINE$[POS_ + 1,POS_ + 7] = PONUM Using " ######"
      POS_ = POS_ + 8
    End If 
  End If 
  Goto SEARCHAPPOH
End If 
L_2200: Rem TOTALS CALC
T9[0] = T9[0] + grossapamt
T9[1] = T9[1] + discapamt
T9[2] = T9[2] + netapamt
T[0] = T[0] + grossapamt
T[1] = T[1] + discapamt
T[2] = T[2] + netapamt
If O1 <> 2 Let T2[0] = T2[0] - grossapamt
If O1 = 2 Let T2[1] = T2[1] - grossapamt
let distflag=0
K4$ = R[3] Using "#####"
Search #ch_di,3,1;K4$,R[4],E \ If E Goto L_2280
X = K4$[1,5] \ If X = R[3] Goto L_2309
L_2280: Print #0; Tab 112;"DISTRIBUTIONS NOT FOUND"
Gosub L_5800
If grossapamt <> 0
  F9[1] = 99;ERRFLAG[1] = 99
End If
Try Unlock #ch_oi Else Rem
! Verify in apdeth file
If o$[1,1]<>"9" ! not a delete
	let tmpkey$=k1$
	if chan=9 let tmpkey$=k1$[9]
	search #ch_apdh,2,1;tmpkey$,r[10],e
	if e<>0
		print #0; tab 25;"*Above Transaction is Missing in A/P History File. Please Delete and Re-enter.*"
		let l=l+1
		let f9[1]=99
		let errflag[6]=99
		goto prntmsg: 
	endif
	if grossapamt<>0 ! check for apdeta distributions
		let tmpkey$=" ",tmpkey$
		let tmpkey$[1,6]=r[10] using "######" 
		search #ch_apda,3,1;tmpkey$,r[0],e
		if e<>0
			print #0; tab 25;"*Above Transaction is Missing in A/P History G/L File. Please Delete and Re-enter.*"
			let l=l+1
			let f9[1]=99
			let errflag[6]=99
			goto prntmsg:
		else
			let tmp3=tmpkey$[1,6]
			if tmp3<>r[10]
				print #0; tab 25;"*Above Transaction is Missing in A/P History G/L File. Please Delete and Re-enter.*"
				let l=l+1
				let f9[1]=99
				let errflag[6]=99
				goto prntmsg:
			endif
		endif
	endif
endif
prntmsg: ! 
If msgflg<>0
	if rtrim$(apmsg$)<>"" 
		print #0;tab 25;"Message: ";apmsg$
		let l=l+1
	endif
	if rtrim$(chkmsg$)<>""
		print #0;tab 25;"Chk Msg: ";chkmsg$
		let l=l+1
	endif
endif
if pagebreak<>0 let l=999
Goto L_2000
L_2305: Search #ch_di,3,1;K4$,R[4],E !\ If E = 2 Goto L_2400
If E<>0
	if e<>2 Gosub ERR_SEARCH
endif
X = K4$[1,5] 
If X <> R[3] or e=2
	if msgflg<>0
		if rtrim$(apmsg$)<>""
			print #0;tab 25;"Message: ";apmsg$
			let l=l+1
		endif
		if rtrim$(chkmsg$)<>""
			print #0;tab 25;"Chk Msg: ";chkmsg$
			let l=l+1
		endif
	endif
	let msgflg=0
	let apmsg$=" ",apmsg$
	let chkmsg$=" ",chkmsg$
	Goto L_2400
endif
L_2309: Mat Read #ch_di,R[4],20;D1;
let gldistamt=d1[1]
if p61$[136,136]="Y" and currpass<>0 and oi_currfact<>0
	if gldistamt<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=gldistamt
		let cnvca[1]=oi_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let gldistamt=fnr(cnvca[0])
	endif
endif
if msgflg<>0 and distflag<>0
		if rtrim$(apmsg$)<>""
			print #0;tab 25;"Message: ";apmsg$;
			let apmsg$=" ",apmsg$
		else
			if rtrim$(chkmsg$)<>""
				print #0;tab 25;"Chk Msg: ";chkmsg$;
				let chkmsg$=" ",chkmsg$
			endif
		endif
	if rtrim$(apmsg$)="" and rtrim$(chkmsg$)="" let msgflg=0
endif
Print #0; Using "########"; Tab 112;D1;
Print #0; Using "--------.##"; Tab 120;gldistamt
let distflag=99
Gosub L_5800
T[3] = T[3] + gldistamt
T9[3] = T9[3] + gldistamt
T2[3] = T2[3] + gldistamt

Goto L_2305
L_2400: Mat Read #ch_oi,R[3],0;O$ \ O$[2,2] = "2" \ Mat Write #ch_oi,R[3],0;O$;
distflag=0
If C0[4] And POLINE$ <> "" Gosub PRNTPOLINE
If o$[1,1]<>"9" ! not a delete
	let tmpkey$=k1$
	if chan=9 let tmpkey$=k1$[9]
	search #ch_apdh,2,1;tmpkey$,r[10],e
	if e<>0
		print #0; tab 25;"*Above Transaction is Missing in A/P History File. Please Delete and Re-enter.*"
		let l=l+1
		let f9[1]=99
		let errflag[6]=99
	endif
endif
if pagebreak<>0 let l=999
Goto L_2000
L_2600: Rem START PURCHASE ORDER SECTION
K9$ = " ",K9$;KEYAP$ = "";MULTPO = 0;POPRTFLAG = 0
L_2610: Search #9,3,1;K9$,R[9],E
Unlock #ch_oi
If E = 2 Goto L_4900
If E Gosub ERR_SEARCH
If CHAN = 9 If K9$[1,1] = "#" Goto L_2610
R[21] = R[9] \ Gosub L_7200
! verify data  with key flag
let tmp=k9$[1,6] ! ap vendor code
if tmp<>aph0[0]
	goto printpoerr:
endif
if k9$[7,18]<>aph$[1,12]
	goto printpoerr:
endif
let tmp=k9$[19,20]
if tmp<>aph1[0]
	goto printpoerr:
endif
let tmp=k9$[21,26]
if tmp<>aph0[1]
	goto printpoerr:
endif
If Not(APH0[1]) Goto L_2610
If KEYAP$[1,20] <> K9$[1,20] Gosub PRTPOSUB
K3$ = K9$[1,20]
Search #ch_oi,2,1;K3$,R[3],E \ If E Gosub ERR_SEARCH
Gosub L_7100
If O$[1,1] = "9" Gosub L_3200
VENDCODE = APH0[0] \ Gosub L_7160
K31$ = " ",K31$ \ K31$[1,6] = APH0[2] Using "######"
K31$[7,12] = APH0[1] Using "######"
Search #ch_poh,2,2;K31$,R[31],E
If E
  If Not(aphmerch) And Not(aphfreight) And Not(aphmisc) Goto L_2610
  If E Gosub ERR_SEARCH
End If 
PFLAG = 99 \ POPRTFLAG = 99
Gosub L_7400
Gosub L_5800 \ Gosub L_5700
Gosub L_5100
K22$ = " ",K22$ \ K22$[1,26] = K9$[1,26];KEYAPL$ = "";MULTIPOLINE = 0
L_2665: Search #ch_apl,3,1;K22$,R[22],E
If E = 2
  KEYAP$ = "" \ Goto L_2800
End If 
If E Gosub ERR_SEARCH
If K22$[1,26] <> K9$[1,26] Goto L_2800
If KEYAPL$ <> ""
  KEYAPL$ = K22$[1,26];MULTIPOLINE = 0
Else 
  MULTIPOLINE = 99
End If 
Gosub L_7250
If Not(APL2[0]) And Not(APL2[2]) Goto L_2665
K32$ = " ",K32$ \ K32$[1,6] = APH0[1] Using "######"
K32$[7] = APL1[3] Using "###"
Search #ch_pol,2,1;K32$,R[32],E \ If E Gosub ERR_SEARCH
PCT6[0] = 0;PCT6[1] = 0
Gosub L_7450 \ Gosub L_7500
PFLAG = 98
BAPQTY = APL2[0]
If Not(SPO)
  BPOQTY = L3[3] - PL[3]
  If O$[1,1] = "9" Let BPOQTY = BPOQTY - APL2[0]
  If BPOQTY < 0 Let BPOQTY = 0
  If Not(APL1[4]) And Abs(BAPQTY) < Abs(BPOQTY) ! not close and qty<received
    BPOQTY = BAPQTY
  Else 
    If O$[1,1] = "9" Let BPOQTY = BPOQTY * (-1)
  End If 
Else 
  KEYPOCT$ = " ",KEYPOCT$
  KEYPOCT$[1,6] = APL0[1] Using "######"
  KEYPOCT$[7,12] = APL0[2] Using "######"
  KEYPOCT$[13,16] = APL1[3] Using "####"
  KEYPOCT$[17,18] = APL1[5] Using "##"
  Search #ch_poc,2,1;KEYPOCT$,R[38],E !\ If E Gosub ERR_SEARCH
  if e<>0
	If Not(aphmerch) And Not(aphfreight) And Not(aphmisc) Goto ENDPOCUPDATE:
	if o$[1,1]="9" goto endpocupdate:
	gosub err_search:
  endif
  Mat Read #ch_poc,R[38],0;PCT1;
  Mat Read #ch_poc,R[38],24;PCT2;
  Mat Read #ch_poc,R[38],60;PCT3;
  Mat Read #ch_poc,R[38],66;PCT$;
  Mat Read #ch_poc,R[38],78;PCT4;
  Mat Read #ch_poc,R[38],90;PCT5;
  Mat Read #ch_poc,R[38],162;PCT6;
  Mat Read #ch_poc,R[38],180;PCT9;
  Mat Read #ch_poc,R[38],288;PCT0;
  mat read #ch_poc,r[38],548;poc_currid;
  mat read #ch_poc,r[38],550;poc_currfact;

  Gosub L_7500
  PENDQTY = PCT2[5] - APL2[0] \ If PENDQTY < 0 Let PENDQTY = 0
  BPOQTY = PCT2[0] - PCT2[3]
  If PENDQTY Let BPOQTY = BPOQTY - PENDQTY
  If O$[1,1] = "9" Let BPOQTY = BPOQTY - APL2[0]
  If BPOQTY < 0 Let BPOQTY = 0
  If Not(APL1[4]) And Abs(BAPQTY) < Abs(BPOQTY)
    BPOQTY = BAPQTY
  Else 
    If O$[1,1] = "9" Let BPOQTY = BPOQTY * (-1)
  End If 
End If 
!!!! PO COST
LET CURRFACT=0
If SPO
	CURRFACT=POC_CURRFACT
	CNVTA = PCT2[1]
Else 
	CURRFACT=POL_CURRFACT
	CNVTA = PCT4[0]
End If 
CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
Gosub L_20000 \ POCOST = AMOUNT
If (L1[5] = -1 Or L1[5] = -3) ! "wgt items
  If SPO
    POTOT = FNR(BPOQTY * PCT2[1] * CWT_WT_ADJ)
  Else 
    POTOT = FNR(BPOQTY * PL4[0] * CWT_WT_ADJ)
  End If 
Else 
  If L1[5] = -2
    If SPO Let POTOT = PCT2[1] Else Let POTOT = PL4[0]
  Else 
    DISP_QTY = BPOQTY
    If SPO
      DISP_COST = PCT2[1]
    Else 
      DISP_COST = PL4[0]
    End If 
    Gosub CALC_DISP_EXT
    POTOT = DISP_EXT
  End If 
End If 
If PCT0
  CNVTA = PL4[0];CNVTU[0] = 0;CNVTU[1] = -3;CNVTU[2] = 2
  Gosub L_20000
  POTOT = FNR(BPOQTY * AMOUNT)
End If 
!!!! QUANTITY 
If Not(PCT0)
  CNVTA = APL2[0];CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
  Gosub L_20000 \ CURRQTY = AMOUNT
  CNVTA = BPOQTY;CNVTU[0] = 0;CNVTU[1] = L1[4];CNVTU[2] = 1
  Gosub L_20000 \ POQTY = AMOUNT
Else 
  L1[4] = -3
  CURRQTY = APL2[0]
  POQTY = BPOQTY
End If 
!!!!  CURRENT COST 
A[5] = POFACT;A[6] = POLBS
CNVTA = APL2[1];CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2
Gosub L_20000 \ CURRCOST = AMOUNT  
A[5] = PRODFACT;A[6] = PRODFACT
If PCT0 Let CURRCOST = APL2[1]
If (L1[5] = -1 Or L1[5] = -3) ! "wgt items
  APL2[2] = FNR(APL2[0] * APL2[1])
Else 
  If L1[5] = -2
    APL2[2] = APL2[1]
  Else 
    DISP_QTY = APL2[0];DISP_COST = APL2[1]
    Gosub CALC_DISP_EXT
    APL2[2] = DISP_EXT
  End If 
End If 
If PCT0
  APL2[2] = FNR(APL2[0] * CURRCOST)
End If 
IF P61$[136,136]="Y" and CURRPASS<>0
	LET AMOUNT=APL2[2]
	if Apl_currfact <>0 and amount<>0  ! going for base to costing um
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=amount
		let cnvca[1]=apl_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let apl2[2]=fnr(cnvca[0])
	endif
	LET AMOUNT=CURRCOST
	if Apl_currfact <>0 and amount<>0  ! going for base to costing um
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=amount
		let cnvca[1]=apl_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let CURRCOST=fnr(cnvca[0])
	endif
	LET AMOUNT=potot
	LET CURRFACT=0
	if POH_currid<>0 let currfact=poh_currfact
	if currfact <>0 and amount<>0  ! going for base to costing um
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=amount
		let cnvca[1]=currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let potot=fnr(cnvca[0])
	endif
	LET AMOUNT=poCOST
	LET CURRFACT=0
	if POl_currid<>0 let currfact=pol_currfact
	if currfact <>0 and amount<>0  ! going for base to costing um
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=amount
		let cnvca[1]=currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let poCOST=fnr(cnvca[0])
	endif
endif
If O1 = 2 Let APL2[2] = - APL2[2];POTOT = - POTOT

Gosub L_5200
T8[0] = T8[0] + POTOT
T8[1] = T8[1] + APL2[2]
ENDPOCUPDATE: ! end purchase order update 
Goto L_2665
L_2800: Gosub L_4700
Goto L_2610

printpoerr: ! print error on purchase order
print #0; tab 10;"*AP-PO Error. Vendor: ";k9$[1,6];" Transaction: ";k9$[7,18];" Please Delete and Re-enter.*"
let l=l+1
let f9[1]=99
let errflag[7]=99
goto L_2610: ! get next ap po transaction


L_3000: Rem PRINT VENDOR TOTALS
IF PAGEBREAK<>0 RETURN
If Not(TOTFLAG) Return 
Gosub L_5800
Print #0;"** VENDOR TOTALS **";
Print #0; Using "--,---,---.##"; Tab 74;T[0];
Print #0; Using "---,---.##"; Tab 88;T[1];
Print #0; Using "-----,---.##"; Tab 99;T[2];
Print #0; Using "--------.##"; Tab 120;T[3]
Print #0;" "
L = L + 1
For I = 0 To 3
  T[I] = 0
Next I
Return 
L_3100: Rem PRINT VENDOR NAME & ADDRESS
Gosub L_5800
Print #0; Using "######";A1;"  ";A$[1,30]
Return 
L_3200: Rem REVERSE TOTALS FOR DELETE
For I = 0 To 8
  If I <> 6 Let O3[I] = - O3[I]
  
Next I
let grossapamt=-grossapamt
let discapamt=-discapamt
let netapamt=-netapamt
Return 
L_4000: Rem TOTAL PRINT
Gosub L_3000
Gosub L_5800
Print #0;"** GRAND TOTALS **";
Print #0; Using "--,---,---.##"; Tab 74;T9[0];
Print #0; Using "---,---.##"; Tab 88;T9[1];
Print #0; Using "-----,---.##"; Tab 99;T9[2];
Print #0; Using "--------.##"; Tab 120;T9[3]
For I = 0 To 3
  T9[I] = 0
Next I
L = 99
If Not(C0[4]) Goto L_4500
Goto L_2600
L_4500: Rem END
If F9[1] Goto L_8950
!If Err 0 Rem
!Close #0
!If Err 0 Gosub ERR_TRAP
!Unlock #3
!L_4525: Print @0,23;'CL';"DATA ENTRY LIST OK (Y/N) ";
!Input Len (16384 + 1);""X$
!Call String(1,X$)
!F9 = 0
!If C0[3] If X$ = "N" Gosub L_8700
!If X$ = "N" Goto OUTEND
!If X$ <> "Y" Goto L_4525
if c0[3]<>0 and audonly<>0
	gosub L_8700:
	GOTO OUTEND:
endif
K2$ = " 0" \ Search #ch_apc,2,1;K2$,R[15],E \ If E Gosub ERR_SEARCH
Mat Read #ch_apc,R[15],2;R$; 
If R$[61,61] = " " 
	let eflag=eflag+1
	message$=message$+"PURCHASE JOURNAL IS IN PROCESS ELSEWHERE .. NO UPDATE PERFORMED "
	goto outend:
endif
L_4580: R$[61,61] = " " \ Mat Write #ch_apc,R[15],2;R$;
F9 = 99
Goto OUTEND
L_4600: Rem GET UNITS
If X0 = -1 Let M1$ = "CWT " \ Goto L_4615
If X0 = -2 Let M1$ = "LOT " \ Goto L_4615
If X0 = -3 Let M1$ = "LB  " \ Goto L_4615
Read #ch_ccode,X0,10;M1$;
L_4615: Return 
L_4700: Rem PRINT POTOT
POFREIGHT = 0 \ POMISC = 0
If MULTIPOLINE
  If aphfreight <> 0 Or aphmisc <> 0
    If T8[0] <> 0 Or T8[1] <> 0
      Gosub L_5800
      Print #0; Tab 55;"SUBTOTAL: ";
      Print #0; Using "--------.##"; Tab 70;T8[0]; Tab 110;T8[1];
      Print #0; Using "-------.##"; Tab 121;(T8[1] - T8[0]);
      Print #0;""
    End If 
  End If 
End If 
If aphfreight
  POFREIGHT = 0
  If pohfrtamt Let POFREIGHT = pohfrtamt - pohfrtappl
  If O$[1,1] = "9" Let POFREIGHT = pohfrtamt + pohfrtappl + aphfreight \ POFREIGHT = - POFREIGHT
  If O1 = 2 Let POFREIGHT = - POFREIGHT;aphfreight = - aphfreight
  Gosub L_5800
  Print #0; Tab 55;"FREIGHT";
  Print #0; Using "--------.##"; Tab 70;POFREIGHT;
  Print #0; Using "--------.##"; Tab 110;aphfreight;
  Print #0; Using "-------.##"; Tab 121;(aphfreight - POFREIGHT);
  Print #0;""
End If 
If aphmisc
  POMISC = 0
  If pohmiscamt Let POMISC = pohmiscamt - pohmiscappl
  If O$[1,1] = "9" Let POMISC = pohmiscamt + pohmiscappl + aphmisc \ POMISC = - POMISC
  If O1 = 2 Let POMISC = - POMISC;aphmisc = - aphmisc
  Gosub L_5800
  Print #0; Tab 55;"MISC CHARGES";
  Print #0; Using "--------.##"; Tab 70;POMISC;
  Print #0; Using "--------.##"; Tab 110;aphmisc;
  Print #0; Using "-------.##"; Tab 121;(aphmisc - POMISC);
  Print #0;""
End If 
Gosub L_5800
If O1 = 2 Let aphmerch = - aphmerch
U9$ = "=",U9$
If Not(MULTPO)
  If K22$[1,20] <> KEYAP$[1,20]
    If Abs(grossapamt) > Abs(aphmerch + aphfreight + aphmisc)
      Print #0;"*A/P amount is greater than amount applied*";
    End If 
    If Abs(grossapamt) < Abs(aphmerch + aphfreight + aphmisc)
      Print #0;"*A/P amount is less than amount applied*";
    End If 
    APAMT[0] = APAMT[0] + grossapamt;APAMT[1] = APAMT[1] + (aphmerch + aphfreight + aphmisc)
  Else 
    U9$ = "-",U9$
  End If 
Else 
  U9$ = "-",U9$
End If 
Print #0; Tab 55;"TOTAL: ";
Print #0; Using "--------.##"; Tab 70;(T8[0] + POFREIGHT + POMISC); Tab 110;(T8[1] + aphfreight + aphmisc);
Print #0; Using "-------.##"; Tab 121;((T8[1] + aphfreight + aphmisc) - (T8[0] + POFREIGHT + POMISC));
Print #0;""
POFLAG = 99
T7[1,0] = T7[1,0] + POFREIGHT \ T7[2,0] = T7[2,0] + POMISC
T7[1,1] = T7[1,1] + aphfreight \ T7[2,1] = T7[2,1] + aphmisc
T7[0,0] = T7[0,0] + T8[0] \ T7[0,1] = T7[0,1] + T8[1]
T6[1,0] = T6[1,0] + POFREIGHT \ T6[2,0] = T6[2,0] + POMISC
T6[1,1] = T6[1,1] + aphfreight \ T6[2,1] = T6[2,1] + aphmisc
T6[0,0] = T6[0,0] + T8[0] \ T6[0,1] = T6[0,1] + T8[1]
T8[0] = 0 \ T8[1] = 0
Print #0;U9$;
Print #0;""
L = L + 1
Return 
PRTPOSUB: Rem print multi po subtotals
If MULTPO
  Gosub L_5800
  If Abs(grossapamt) > Abs(T6[0,1] + T6[1,1] + T6[2,1])
    Print #0;"*A/P amt greater than amt applied*";
  End If 
  If Abs(grossapamt) < Abs(T6[0,1] + T6[1,1] + T6[2,1])
    Print #0;"*A/P amt less than amt applied*";
  End If 
  APAMT[0] = APAMT[0] + grossapamt;APAMT[1] = APAMT[1] + (T6[0,1] + T6[1,1] + T6[2,1])
  Print #0; Tab 40;"  A/P TOTAL - MERCHANDISE:";
  Print #0; Using "--------.##"; Tab 70;T6[0,0]; Tab 110;T6[0,1];
  Print #0; Using "-------.##"; Tab 121;(T6[0,1] - T6[0,0])
  If T6[1,0] <> 0 Or T6[1,1] <> 0
    Gosub L_5800
    Print #0; Tab 40;"      TOTAL - FREIGHT    :";
    Print #0; Using "--------.##"; Tab 70;T6[1,0]; Tab 110;T6[1,1];
    Print #0; Using "-------.##"; Tab 121;(T6[1,1] - T6[1,0]);
    Print #0;""
  End If 
  If T6[2,0] <> 0 Or T6[2,1] <> 0
    Gosub L_5800
    Print #0; Tab 40;"      TOTAL - MISC CHARGE:";
    Print #0; Using "--------.##"; Tab 70;T6[2,0]; Tab 110;T6[2,1];
    Print #0; Using "-------.##"; Tab 121;(T6[2,1] - T6[2,0]);
    Print #0;""
  End If 
  If T6[1,0] <> 0 Or T6[1,1] <> 0 Or T6[2,0] <> 0 Or T6[2,1] <> 0
    Gosub L_5800
    Print #0; Tab 70;"-----------"; Tab 110;"-----------"; Tab 121;"----------"
    Print #0; Tab 40;"      TOTAL              :";
    Print #0; Using "--------.##"; Tab 70;(T6[0,0] + T6[1,0] + T6[2,0]); Tab 110;(T6[0,1] + T6[1,1]) + T6[2,1];
    Print #0; Using "-------.##"; Tab 121;((T6[0,1] + T6[1,1] + T6[2,1]) - (T6[0,0] + T6[1,0] + T6[2,0]))
    L = L + 1
  End If 
  U9$ = "=",U9$
  Print #0;U9$[1,131]
  Print #0;""
End If 
For X = 0 To 2
  For I = 0 To 1 \ T6[X,I] = 0 \ Next I
Next X
MULTPO = 0
L = L + 1
Return 
L_4900: Rem POGRAND TOTALS
If Not(POPRTFLAG) Goto L_4500
Gosub PRTPOSUB
POFLAG = 98
Gosub L_5800
Print #0; Tab 20;"GRAND TOTAL - MERCHANDISE:";
Print #0; Using "--------.##"; Tab 70;T7[0,0]; Tab 110;T7[0,1];
Print #0; Using "-------.##"; Tab 121;(T7[0,1] - T7[0,0])
Gosub L_5800
Print #0; Tab 20;"GRAND TOTAL - FREIGHT    :";
Print #0; Using "--------.##"; Tab 70;T7[1,0]; Tab 110;T7[1,1];
Print #0; Using "-------.##"; Tab 121;(T7[1,1] - T7[1,0]);
Print #0;""
Gosub L_5800
Print #0; Tab 20;"GRAND TOTAL - MISC CHARGE:";
Print #0; Using "--------.##"; Tab 70;T7[2,0]; Tab 110;T7[2,1];
Print #0; Using "-------.##"; Tab 121;(T7[2,1] - T7[2,0]);
Print #0;""
Gosub L_5800
Print #0; Tab 70;"-----------"; Tab 110;"-----------"; Tab 121;"----------"
Print #0; Tab 20;"GRAND TOTAL              :";
Print #0; Using "--------.##"; Tab 70;(T7[0,0] + T7[1,0] + T7[2,0]); Tab 110;(T7[0,1] + T7[1,1]) + T7[2,1];
Print #0; Using "-------.##"; Tab 121;((T7[0,1] + T7[1,1] + T7[2,1]) - (T7[0,0] + T7[1,0] + T7[2,0]))
L = L + 1
For X = 0 To 2
  For I = 0 To 1 \ T7[X,I] = 0 \ T6[X,I] = 0 \ Next I
Next X
If APAMT[0] <> 0 And APAMT[1] <> 0 And (Abs(APAMT[0]) - Abs(APAMT[1])) <> 0
  Print #0; Tab 70;"==========="; Tab 110;"==========="; Tab 121;"=========="
  L = L + 1
  Gosub L_5800
  Print #0;" " \ L = L + 1
  Print #0; Using "--------.##"; Tab 50;"A/P Amount"; Tab 70;APAMT[0];
  Print #0; Using "--------.##"; Tab 90;"A/P Applied"; Tab 110;APAMT[1];
  Print #0; Using "-------.##"; Tab 121;(Abs(APAMT[0]) - Abs(APAMT[1]))
End If 
Goto L_4500
L_5000: Rem PRINT LINE
if pagebreak<>0 and l=999 gosub L_5800:
If O1 < 1 Goto L_5005
If O1 > 3 Goto L_5005
L_5005: Print #0;O1$[1,12]; \ If C0[6] Print #0; Using "###"; Tab 14;O4[1];
If O1 > 0 If O1 < 4 Goto L_5010
Print #0;"  INVALID INVOICE!!!"
Return 
L_5010: If O$[1,1] = "9" Print #0; Tab 19;"DEL";
If O$[1,1] = "9" Goto L_5019
Print #0; Tab 19;T$[O1 * 3 - 2,O1 * 3];
L_5019: X2 = O2[2] \ Gosub L_8900
Print #0; Tab 24;P$;
X2 = O2[3] \ Gosub L_8900
Print #0; Tab 33;P$;
X2 = O2[4] \ Gosub L_8900
Print #0; Tab 42;P$;
If O2[5] Print #0; Using "######"; Tab 51;O2[5];
If O2[6] Print #0; Using "######"; Tab 59;O2[6];
If Not(O2[1]) Goto L_5050
X2 = O2[1] \ Gosub L_8900
Print #0; Tab 67;P$;
L_5050: Print #0; Using "-----,---.##"; Tab 75;grossapamt;
Print #0; Using "---,---.##"; Tab 88;discapamt;
Print #0; Using "-----,---.##"; Tab 99;netapamt;
Return 
L_5100: Rem PO LINE HEADING
Gosub L_5800
L_5110: Print #0;"LN#";
Print #0; Tab 4;"PRODUCT";
Print #0; Tab 16;"DESCRIPTION/SIZE";
Print #0; Tab 45;"PO QTY";
Print #0; Tab 59;"PO COST";
Print #0; Tab 75;"EXT PO";
Print #0; Tab 85;"AP QTY";
Print #0; Tab 99;"AP COST";
Print #0; Tab 115;"EXT AP";
Print #0; Tab 123;"VARIANCE";
Print #0;""
Return 
L_5200: Rem PRINT PO LINE #1
Gosub L_5800
Print #0; Using "###";APL1[3];
Print #0; Tab 4;L1$[81,92];
Print #0; Tab 16;L1$[1,25];
X0 = L1[4] \ Gosub L_4600
Print #0; Using PMASK$; Tab 41;POQTY;M1$[1,3];
X0 = L1[5] \ Gosub L_4600
If L1[5] <> -3
  Print #0; Using PMASK$; Tab 56;POCOST;M1$[1,3];
Else 
  Print #0; Using PMASK1$; Tab 56;POCOST;M1$[1,3];
End If 
If POTOT >= 0
  Print #0; Using "#######.##"; Tab 71;POTOT;
Else 
  Print #0; Using "-------.##"; Tab 71;POTOT;
End If 
X0 = L1[4] \ Gosub L_4600
Print #0; Using PMASK$; Tab 81;CURRQTY;M1$[1,3];
X0 = L1[5] \ Gosub L_4600
If L1[5] <> -3
  Print #0; Using PMASK$; Tab 96;CURRCOST;M1$[1,3];
Else 
  Print #0; Using PMASK1$; Tab 96;CURRCOST;M1$[1,3];
End If 
If APL2[2] >= 0
  Print #0; Using "#######.##"; Tab 111;APL2[2];
Else 
  Print #0; Using "-------.##"; Tab 111;APL2[2];
End If 
Print #0; Using "-------.##"; Tab 121;(APL2[2] - POTOT);
Print #0;""
If SPO Print #0; Using "CNTRL######";APL0[2];
Print #0; Tab 16;L1$[31,60];
If L1$[61,63] <> "   " Print #0; Tab 51;"VENDOR ITEM # ";L1$[61,80];
If APL1[4] Print #0; Tab 100;"-LINE CLOSED-";
Print #0;""
L = L + 1
Return 
L_5700: Rem PO HEADING
If PFLAG <> 99 Return 
If KEYAP$ <> K3$ ! check if po is different invoice
  Print #0;"" \ L = L + 1
  Print #0; Using "###### ";"Vendor: ";APH0[0];A$[1,30];
  Print #0; Tab 50;"A/P TRANS: ";APH$[1,12];
  X2 = O2[2] \ Gosub L_8900
  Print #0; Tab 75;"A/P DATE: ";P$[1,8];
  Print #0; Using "---,---,---.##"; Tab 100;"A/P AMOUNT: ";grossapamt;
  Print #0;""
  KEYAP$ = K3$
  MULTPO = 0
  U9$ = "=",U9$ \ Print #0;U9$[1,131]
  L = L + 2
Else 
  MULTPO = 99
End If 
If APH0[0] <> APH0[2]
  VENDCODE = APH0[2]
  Gosub L_7160
  If APH1[0] = 2
    Print #0; Tab 15;"DM ";
  Else 
    Print #0; Tab 15;"PO ";
  End If 
  Print #0; Using "######  ";"Vendor: ";APH0[2];A$[1,30]
  L = L + 1
End If 
If APH1[0] = 2 Print #0; Tab 4;"DM#"; Else Print #0; Tab 4;"PO#";
Print #0; Using " ######";APH0[1];
Print #0; Tab 16;"VENDOR REF#: ";H$[1,14];
Print #0; Tab 34;"TYPE: ";
If H4[0] > 3 Print #0;"IMPORT ";
If H4[0] = 0 Or H4[0] = 4 Print #0;"WAREHOUSE ";
If H4[0] = 1 Or H4[0] = 5 Print #0;"DIRECT";
If H4[0] = 2 Or H4[0] = 6 Print #0;"INDIRECT";
If H4[0] = 3 Or H4[0] = 7 Print #0;"??????";
Print #0; Using "##"; Tab 56;"WHS: ";H4[1];
TOTAPPLD = aphmerch + aphfreight + aphmisc
If O1 = 2 Let TOTAPPLD = - TOTAPPLD
Print #0; Using "---,---,---.##"; Tab 100;"APPLIED AMT:";TOTAPPLD;
Print #0;""
U9$ = "-",U9$ \ Print #0;U9$
L = L + 2
PFLAG = 0
Return 
PRNTPOLINE: Rem print poline for multiple po's
If POLINE$ = "" Return 
Gosub L_5800
Print #0;POLINE$
POLINE$ = "";POS_ = 0
Return 
L_5800: Rem heading
Rem {begin src/inc/rtn.printmsg.i}
!If Not(SCRPRT)
  !PCTR = PCTR + 1
 ! If Not(Fra(PCTR / 500))
  !  Print Using "#######";@25,22;PCTR;" Records Printed";
  !  Print Using "   Page ####";V9[0];
  !End If 
!End If 
Rem {end rtn.printmsg.i}
L = L + 1
If L < L9 Return 
If Not(V9) Goto L_5815
If L9 <> 21 Goto L_5810
HEADMORE: Rem check for more
!Print @0,23;'CL';"Press  <CR>: continue  ";
!Input Len 1;""J$
!Call String(1,J$)
!If J$ <> "" Goto HEADMORE
!Print 'CS'
L_5810: If V9 Print #0;"\14\";
L_5815: Print #0;"\15\"; Tab 10;"-la511-"; Tab 50;G9$[1,40]
V9 = V9 + 1
Print #0; Tab 10;D$;
Print #0; Tab 50;"ACCOUNTS PAYABLE DATA ENTRY LIST";
If PFLAG Print #0;"  (PURCHASE ORDERS)";
if audonly<>0 print #0;tab 100;"*PREVIEW*";
Print #0; Tab 110;"PAGE";V9
If Not(C0[3]) Goto L_5855
Print #0; Using "######"; Tab 5;"BATCH# ";B4[1];"  FOR THE PERIOD OF: ";
X$ = B4[0] Using "&&&&" \ Print #0;X$[3,4];"/";X$[1,2];
if currpass<>0
	print #0; tab 75;rtrim$(currdesc$);
endif
print #0;""
L_5855: If PFLAG Goto L_5930
Print #0;" "
Print #0;"INVOICE#";
If C0[6] Print #0; Tab 14;"DIV";
Print #0; Tab 19;"TYPE";
Print #0; Tab 24;"INV DATE";
Print #0; Tab 33;"DUE DATE";
Print #0; Tab 42;"DIS DATE";
Print #0; Tab 54;"PO#";
Print #0; Tab 59;"CHECK#";
Print #0; Tab 67;"CHK DATE";
Print #0; Tab 78;"GROSS AMT";
Print #0; Tab 91;"DISC AMT";
Print #0; Tab 102;"      NET";
Print #0; Tab 114;"ACCT#";
Print #0; Tab 125;"AMOUNT"
L_5930: If PFLAG = 99
  Gosub L_5700
End If 
If PFLAG = 98 Gosub L_5110
L = 6
If C0[3] Let L = L + 1
If C0[4] Let L = L + 2
Return 
L_6000: Rem READ BATCH FILE
Mat Read #ch_bth,R[14],0;B4;
Mat Read #ch_bth,R[14],8;B5;
Mat Read #ch_bth,R[14],12;B6;
mat read #ch_bth,r[14],52; apbcurrid;
mat read #ch_bth,r[14],54; apbcurrfact;
Return 

L_6050: Rem WRITE BATCH FILE
Mat Write #ch_bth,R[14],0;B4;
Mat Write #ch_bth,R[14],8;B5;
Mat Write #ch_bth,R[14],12;B6;
Return 
L_6100: Rem LIST ALL DISPLAY SCREEN
!Print @0,7;'CL';@3,7;"BATCH #";@17,7;"ENTRIES";@32,7;"BATCH TOTALS";@53,7;"STATUS";
!L_6110: For I = 23 To 8 Step -1
!  Print @0,I;'CL';
!Next I
!L = 9
Return 
!L_6200: Rem CONTINUE SECTION
!L_6205: !Print @0,23;'CL';"Enter  <CR>: Continue Listing   E: end list ";
!Input Len (16384 + 1);""J$
!Call String(1,J$)
!If J$ = "" Goto L_6110
!If J$ = "E" Return 
!Goto L_6205
!L_7000: Rem CHECK PRINTER TYPE
!F = 0
!If Err 0 Let F = Spc(8)
!N = Chf(0)
!If Err 0 Gosub ERR_TRAP
!L9 = 58;SCRPRT = 0
!If F
!  L9 = 21
!  SCRPRT = 99
!End If 
!F = 0
!Return 
L_7100: Rem READ OPEN ITEM FILE
Mat Read #ch_oi,R[3],0;O$; \ Mat Read #ch_oi,R[3],6;O1;
Mat Read #ch_oi,R[3],12;O2; \ Mat Read #ch_oi,R[3],40;O3;
Mat Read #ch_oi,R[3],100;O1$; \ Mat Read #ch_oi,R[3],112;O4
Mat Read #ch_oi,R[3],116;oi_currid;
Mat Read #ch_oi,R[3],122;oi_currfact;
let grossapamt=o3[0]
let discapamt=o3[2]
let netapamt=o3[3]
if p61$[136,136]="Y" and currpass<>0 and oi_currfact<>0
	if grossapamt<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=grossapamt
		let cnvca[1]=oi_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let grossapamt=fnr(cnvca[0])
	endif
	if discapamt<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=discapamt
		let cnvca[1]=oi_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let discapamt=fnr(cnvca[0])
	endif
	if netapamt<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=netapamt
		let cnvca[1]=oi_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let netapamt=cnvca[0]
	endif

endif
Return 
L_7160: Rem READ VENDOR FILE
A$ = "VENDOR NOT ON FILE!!!" \ K2$ = VENDCODE Using "######"
Search #ch_vend,2,1;K2$,R[2],E
If E = 1
  ERRFLAG[4] = 99
  F9[1] = 99
  Return 
End If 
If E Gosub ERR_SEARCH
Mat Read #ch_vend,R[2],0;A$; \ Mat Read #ch_vend,R[2],268;A1;
Mat Read #ch_vend,R[2],292;A2;
Return 
L_7200: Rem read appo head file
Mat Read #ch_aph,R[21],0;APH0;
Mat Read #ch_aph,R[21],12;APH$;
Mat Read #ch_aph,R[21],24;APH1;
Mat Read #ch_aph,r[21],28;aph_currid;
Mat Read #ch_aph,R[21],30;APH2;
mat read #ch_aph,r[21],88;aph_currfact;

let aphmerch=aph2[0]
let aphfreight=aph2[1]
let aphmisc=aph2[2]
if p61$[136,136]="Y" and currpass<>0 and aph_currfact<>0
	if aphmerch<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=aphmerch
		let cnvca[1]=aph_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let aphmerch=fnr(cnvca[0])
	endif
	if aphfreight<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=aphfreight
		let cnvca[1]=aph_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let aphfreight=fnr(cnvca[0])
	endif
	if aphmisc<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=aphmisc
		let cnvca[1]=aph_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let aphmisc=fnr(cnvca[0])
	endif
endif
Return 
L_7250: Rem read appo line file
Mat Read #ch_apl,R[22],0;APL0;
Mat Read #ch_apl,R[22],12;APL$;
Mat Read #ch_apl,R[22],24;APL1;
Mat Read #ch_apl,R[22],36;APL2;
Mat Read #ch_apl,R[22],82;apl_currid;
Mat Read #ch_apl,R[22],110;apl_currfact;
Return 

L_7300: Rem READ PRODUCT FILE
Mat Read #ch_prod,L3[1];A1$;
Mat Read #ch_prod,L3[1],156;B;
Mat Read #ch_prod,L3[1],256;A; \ Mat Read #ch_prod,L3[1],460;A3;
Mat Read #ch_prod,L3[1],512;PFU1;
Mat Read #ch_prod,L3[1],554;PFU2;
PRODLBS = A[6];PRODFACT = A[5]
Return 
L_7350: Rem READ NSTKDESC
Mat Read #ch_nstk,L3[1];NSD$;
Mat Read #ch_nstk,L3[1],96;NSD1;
Mat Read #ch_nstk,L3[1],112;NSD2;
Mat Read #ch_nstk,L3[1],132;NSD3;
PRODLBS = NSD3[6];PRODFACT = NSD3[7]
Return 
L_7400: Rem READ HEADER FILE
Mat Read #ch_poh,R[31];H0;
Mat Read #ch_poh,R[31],24;H$;
Mat Read #ch_poh,R[31],106;H1$;
Mat Read #ch_poh,R[31],222;H3;
Mat Read #ch_poh,R[31],242;H4;
Mat Read #ch_poh,R[31],250;H8;
Mat Read #ch_poh,R[31],310;PH;
Mat Read #ch_poh,R[31],350;PO3;
Mat Read #ch_poh,R[31],528;POH7;
Mat Read #ch_poh,R[31],612;POH_currid;
Mat Read #ch_poh,R[31],614;POH_currfact;
let pohfrtappl=h8[6]
let pohmiscamt=po3[5]
let pohmiscappl=po3[11]
let pohfrtamt=poh7
if p61$[136,136]="Y" and currpass<>0 and poh_currfact<>0
	if pohfrtappl<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=pohfrtappl
		let cnvca[1]=poh_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let pohfrtappl=fnr(cnvca[0])
	endif
	if pohmiscamt<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=pohmiscamt
		let cnvca[1]=poh_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let pohmiscamt=fnr(cnvca[0])
	endif
	if pohmiscappl<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=pohmiscappl
		let cnvca[1]=poh_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let pohmiscappl=fnr(cnvca[0])
	endif
	if pohfrtamt<>0
		let cnvcu[0]=1
		let cnvcu[1]=1
		let cnvca[0]=pohfrtamt
		let cnvca[1]=poh_currfact
		call "mxcurrconv.dl4",cnvcu[],cnvca[],e$,rstr$
		let pohfrtamt=fnr(cnvca[0])
	endif
endif 
Return 
L_7450: Rem READ POLINE
Mat Read #ch_pol,R[32];L1;
Mat Read #ch_pol,R[32],12;L2;
Mat Read #ch_pol,R[32],24;L3;
Mat Read #ch_pol,R[32],66;L1$;
Mat Read #ch_pol,R[32],186;PL;
Mat Read #ch_pol,R[32],222;PL0;
Mat Read #ch_pol,R[32],232;PL4;
Mat Read #ch_pol,R[32],548;pol_CURRId;
Mat Read #ch_pol,R[32],550;pol_CURRFACT;

Return 
L_7500: Rem "================================ get product
Call Logic(1,2 ^ 0,L1[3],X0)
CWT_WT_ADJ = 1
POLBS = PCT6[0];POFACT = PCT6[1]
If Not(PCT6[0])
  POLBS = PL4[12];POFACT = PL4[13]
End If 
If Not(X0)
  Gosub L_7300
  If (L1[5] = -1 Or L1[5] = -3)
    If PCT6[0] <> 0 And PCT6[1] <> 0
      If (A[6] <> PCT6[0] Or A[5] <> PCT6[1]) ! do in diff units or unit/amts
        PROD_WT_BASE = A[6] / A[5]
        PO_WT_BASE = PCT6[0] / PCT6[1]
        If PROD_WT_BASE Let CWT_WT_ADJ = PO_WT_BASE / PROD_WT_BASE
      End If 
    Else 
      If (A[6] <> PL4[12] Or A[5] <> PL4[13]) ! do in diff units or unit/amts
        PROD_WT_BASE = A[6] / A[5]
        PO_WT_BASE = PL4[12] / PL4[13]
        If PROD_WT_BASE Let CWT_WT_ADJ = PO_WT_BASE / PROD_WT_BASE
      End If 
    End If 
  End If 
Else 
  Gosub L_7350
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  A[5] = NSD3[7] \ A[6] = NSD3[6] \ B[23] = NSD3[2] \ A3[3] = NSD3[8]
  PFU1[8] = NSD1[5];PFU1[10] = NSD1[4];PFU1[11] = NSD1[3];PFU1[15] = NSD1[7]
  A1$[9,38] = NSD$[13,42] \ A1$[63,92] = NSD$[43,72]
  A1$[140,151] = NSD$[1,12]
  If PFU1[15] = -3 Let A1$[127,127] = "Y"
End If 
Return 
L_8000: Rem CHANGE STATUS FLAG
!Print @0,23;'CL';"RESETTING STATUS ... PLEASE WAIT....";
K1$ = " ",K1$
L_8015: Search #ch_oi,3,1;K1$,R[3],E \ If E = 2 Goto L_8080
If E Gosub ERR_SEARCH
Mat Read #ch_roi,R[3],0;O$;
Mat Read #ch_roi,R[3],40;O3;
If Not(C0[3]) Goto L_8050
If O3[9] <> B4[1] Goto L_8015
If O3[8] <> B4[0] Goto L_8015
Goto L_8055
L_8050: If O$[2,2] <> "2" Goto L_8015
Gosub L_7100
L_8055: If O$[1,1] = "9" Goto L_8065
If O$[1,1] <> "0" Goto L_8015
L_8065: O$[2,2] = "1" \ If F9 = 99 Let O$[2,2] = "3"
Mat Write #ch_oi,R[3],0;O$;
Goto L_8015
L_8080: If Not(C0[3]) Goto L_8100
Gosub L_6000 \ B5 = 1
If F9 = 99 Let B5 = 3
Gosub L_6050
L_8100: If F9 <> 99 Return 
K2$ = " 0" \ Search #ch_apc,2,1;K2$,R[15],E \ If E Gosub ERR_SEARCH
Mat Read #ch_apc,R[15],2;R$; \ R$[61,61] = "1" \ Mat Write #ch_apc,R[15],2;R$;
Return 
If O$[1,1] <> "0" Goto L_8015
L_8700: Rem RESET BATCH ON EXIT
Gosub L_6000
B5[0] = 1
Gosub L_6050
Return 
L_8900: Rem PUT DATE FROM X2 INTO P$
U5$ = X2 Using "&&&&&&&"
P$[1,2] = U5$[4,5]
P$[3,3] = "/"
P$[4,5] = U5$[6,7]
P$[6,6] = "/"
P$[7,8] = U5$[2,3]
Return 
L_8950: Rem ERROR IN DATA ENTRY LIST
!Print @0,0;'CS'; Tab 10;"ACCOUNTS PAYABLE DATA ENTRY LIST ";
!Print @0,10;'CE BR'; Tab 10;"WARNING: *Data Entry List Not Updated*";'ER';
!Print #0;""

If ERRFLAG[1]
	LET EFLAG=EFLAG+1
	MESSAGE$=MESSAGE$+"ACCOUNT DISTRIBUTIONS NOT FOUND FOR AN OPEN ITEM. "
End If 
If ERRFLAG[4]
	LET EFLAG=EFLAG+1
	mESSAGE$=MESSAGE$+"AP OPEN ITEM ASSIGN TO VENDOR NOT IN MASTER FILE. "
endif
If ERRFLAG[6]
	let eflag=eflag+1
	!Message$=Message$+"A/P History Record Not Found for an open item"
	Let Message$=Message$+" There is a problem with a transaction. "
endif
if errflag[7]
	let eflag=eflag+1
	Message$=Message$+" A/P-P/O Error for an open item. "
endif
if (errflag[1]+errflag[4]+errflag[6]+errflag[7])<>0 
	If printtype<>0
		let message$=message$+" Run Report to Printer/Disk and Review. "
	else
		let message$=message$+" Please Review Report. "
	endif
endif
if errflag[1]
	print #0;"**Account Distribution Not Found For An Open Item**"
endif
if errflag[4]
	print #0;"**AP Open Item Assign to Vendor Not In Master File"
endif
If ERRFLAG[6]
	!Print #0;"A/P History Record Not Found for an open item"
	Print #0;"There is a problem with a transaction"
endif
if errflag[7]
	Print #0;"A/P-P/O Error for an open item "
endif

print #0;"******** Data Entry List Not Updated ********"
If C0[3] Gosub L_8700
goto outend:


CALC_DISP_EXT: Rem convert qty and cost to cost um, then calc ext cost
DISP_EXT = FNR(DISP_QTY * DISP_COST)
CNVTA = DISP_COST;CNVTU[0] = 0;CNVTU[1] = L1[5];CNVTU[2] = 2 \ Gosub L_20000
DISP_COST = AMOUNT
If L1[5] = -1 Or L1[5] = -3
  If PCT6[0] <> 0 And PCT6[1] <> 0
    LBSUNIT = PCT6[0];LBSFACTOR = PCT6[1]
  Else 
    LBSUNIT = PL4[12];LBSFACTOR = PL4[13]
  End If 
  If LBSFACTOR <= 0 Let LBSFACTOR = 1
  If L1[5] = -1 Let DISP_EXT = FNR(DISP_COST * (LBSUNIT * DISP_QTY) / LBSFACTOR / 100)
  If L1[5] = -3 Let DISP_EXT = FNR(DISP_COST * (LBSUNIT * DISP_QTY) / LBSFACTOR)
ELSE
	IF PFU1[0]<>L1[5] ! base um<>costing um - bring to costing um to prevent rounding issues
		!CNVTU[2]=5 no rounding of qty -- qty rounded set CNVTU[1]=1
		LET CNVTA=DISP_QTY;CNVTU[0]=0;CNVTU[1]=L1[5];CNVTU[2]=5 \ GOSUB L_20000:
		LET DISP_QTY=AMOUNT 
		LET DISP_EXT=FNR(DISP_QTY*DISP_COST) ! in costing unit of measure
	endif
End If 
If L1[5] = -2 Let DISP_EXT = DISP_COST
Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: ! If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
!Call "MXPRCONV5AP",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
Call "MXPRCONV5AP.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$ 
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
e$=msg$
call programdump("/tmp/la511se!","")
call programdump()
E$=msg$ \ Error 10000
Return !

OUTEND: Rem EXIT ROUTINE
Gosub L_8000


if not(ch_ap[20])
	 Try Close #ctlc Else Rem
endif
if c0[4]
	if not(ch_ap[0])
		Try close #ch_aph Else Rem
	endif
	if not(ch_ap[1])
		Try close #ch_apl  Else Rem
	endif
	if spo<>0
		if not(ch_ap[2])
			Try close #ch_poc  Else Rem 
		endif
	endif
	if not(ch_ap[3])
		Try close #ch_poh  Else Rem
	endif
	if not(ch_ap[4])
		Try close #ch_pol  Else Rem
	endif
	if not (ch_ap[9])
		Try close #ch_prod  Else Rem
	endif
	if not (ch_ap[10])
		Try close #ch_wh  Else Rem
	endif
	if not (ch_ap[12])
		Try close #ch_nstk  Else Rem
	endif
	if not(ch_ap[18])
		Try Close #Ch_Ccode Else Rem
	endif
endif
if not(ch_ap[5]) ! a20di
	Try Close #ch_di Else Rem
endif
if not (ch_ap[6]) ! a20oi =CH_OI
	Try Close #ch_oi Else Rem
endif
if not(ch_ap[7]) ! apdeth=CH_APDH
        Try Close #ch_apdh Else Rem  
endif
if not(ch_ap[8]) ! ap batch file
	try close #ch_bth Else Rem
endif
if not(ch_ap[11]) ! pomisc
	Try Close #ch_misc Else Rem

endif
if not (ch_ap[14]) !  vendor
	Try Close #ch_vend Else Rem
endif
if not (ch_ap[15]) ! aooap file
	Try Close #ch_apc Else Rem

endif
if not(ch_ap[17])
	 Try Close #ch_vl Else Rem

endif
if c0[6]<>0
	if not(ch_ap[19])
		Try Close # ch_apdiv Else Rem
	endif
endif
if not(ch_ap[21])
	Try Close #ch_acf Else Rem
endif
Try Close #ch_roi Else Rem
if p61$[136,136]="Y"
	Try Close #ch_curr Else Rem
endif
if eflag>0 let returnstatus=0
let spec[9]=returnstatus
if rtrim$(message$)="" let message$="Report Complete"

else
	include "src/callmainerrnet.inc"
end try
End ! the whole program




