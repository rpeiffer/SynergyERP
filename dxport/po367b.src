Rem PO367B   P.O. AUTO-GENERATE PART 3 - LINE SELECT
Rem AUTHOR: G.DOSCHER   AUG 10, 1988
Rem LAST UPDATE:
!
! loadsave -w -n 100,10 -o prog/dxport/po367b.dl4 src/po367b.src
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG 25, 2005  10:04:04
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/po/po367b.src (univ2) [txc] {13280}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc" ! dx
!Include "src/inc/fileprtdefault.inc" ! port defaults
Include "src/inc/fileprod.inc" ! Prodfile
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Sub UserCntrl,GetPortDefault,GetCostLevels
External Lib "libprod.lib"
Declare External Sub UMDList
External Lib "mxprodusage.dl4"
Declare External Sub mxprodusage
Declare Intrinsic Sub DateToJulian,Echo,FindF,InpBuf,String
Declare Intrinsic sub programdump
! Declare Intrinsic Function Tim#
! Option Default Dialect IRIS1
OPTION GOSUB NESTING 12  ! Default is 8
Try

Com 1%,PFU1[20],CNVTU[9],COST_LEV[3],MAIN,DIR,WH,Z9[9],PN_CHAN
Com 2%,S9[9],PF_B[24],VENDOR,ORDER
Com 3%,PFU2[6],CNVTA[4],A[33],AMOUNT,FIELD,BASE,PO_COST,SUG_QTY,DSP_UNIT
Com 3%,R2,PF_A1[7],POLREC
Com VEN_ITEM$[20],KEY_$[50],K22$[50]
Com PROD$[12],J4$[50],PF_A$[156],VEN$[264],VEND_C2$[44],UNT$[4]
Dim Pr. as prod

Dim tmp$[200],UserId$[10],WebStr$[1000],Blank$[128],Message$[200]
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim action$[30],options$[30],action1$[30],msg$[256],action2$[30]
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
Dim StFld$[30],bcdata$[5],sfld$[30], Key1$[64],typ$[10]
Dim 1%,UREC,IntCo,Ctlc,Chan[30]
Dim 2%,maxcnt \ maxcnt=50 ! init max records in arrays for list
dim List$[maxcnt,1000] ! for .net (larger size - ZLines)
Dim P1$[156],A$[20],PR_A2$[30],F1$[30],F2$[30],K$[50],PW_W1$[32]
Dim 1%,H4[3],A2[2],EUN[2],DL1[6],ARMONTH,MORLINES[1],SHOMINS,TARGETI,VUEP
Dim 2%,H0[5],H3[4],PC_DATE,DL2[4],BDAYS[24],W2[9],DAYI,TPRCT,A4[1],Q0[1],PODDATE
Dim 3%,R2,PF_A1[7],A1[5],W3[24],AMOUNT,UNF[6],DW3[24],DA[33],A3[4],DL3[3]
Dim 3%,M1[17],OLL5[3],TOT_QTY[999],TOT_WEIGHT[999],TOT_CUBE[999],TOT_COST[999]
Dim 3%,DMNDDAY[2],DAYSUPPLY[2],TARGETQ,X9[5],M_COST,M_QTY,M_WGHT,M_CUBE
Dim J$[40],J1$[40],J2$[20],J3$[40],J8$[8],C$[30],PUNIT$[4]
Dim OLS3$[33],OLL2$[12],OLL6$[60],K16$[50]
Dim 1%,OLL3[3],OLUN[2],CTWT,W0[3]
Dim 2%,OLL6[5],OLL2[1]
dim 3%,Maxtm,currtm#,strttm#
Dim 1%,OVUN,F,X1[9],PO1[9]
Dim 2%,X2[9],DT3[1],JDATE[5],PH[4]
Dim 3%,J,X3[9],X0[9],Specs[20],TLines[9]
Dim K1$[50],K2$[50],K3$[20],K6$[50],V$[30],U5$[50],S$[20],X$[10],I$[10]
Dim UNIT$[4],UNIT,K12$[50],P9$[50],VEND$[50],T2$[50],P61$[256]
Dim 3%,WHMISC[6],TIEHI,PALLET,M_PLT,T_PLT,OLL7[12],f$[16]
Dim CALCSRC$[36],EXCTYPE$[16],CCODE$[14],TOSSCR$[20]
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Blank$=" ",Blank$
! call dxopen() - done in pomenu
call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
! OPTIONS$ & ACTION$ used in POMENU.dl4 for routing
COID = IntCo
UserId$=UCase$(Userid$)+Blank$
call GetCostLevels(e$,Cost_Lev[],IntCO,UserID$) ! get cost levels
For K1 = 2 To 26 \ Read J \ If J = -1 Goto L_820
  Read #1,88,J;F$; \ Open #K1,F$
L_820: Next K1
Data "2752","1792","1840","2400","1808","-1","2416","2432","1744","2464","2768","1728","2448","1120"
Data "1888","2128","2032","864","1552","-1","-1","-1","-1","-1","-1"
Open #24,"6/POWORK"
F$ = "3/POSHPVIA" + Str$(COID) \ Ropen #26,F$
F$ = "3/POBROKER" + Str$(COID) \ Ropen #27,F$
Try
	Close #7 ! channel for sortfile
Else
	Rem
End Try
Close #1 ! getsession does ropen of contrl file
CTLC=OpenFile(9999,Intco) \ if ctlc=-1 Error 42 ! need open to Read & Write
Read #1,0,120;ARMONTH;
Read #1,3,172;PC_DATE;
Read #1,11,108;DAYI; \ If DAYI <1 Let DAYI = 5
Read #1,11,112;TPRCT; \ If TPRCT < 1 Let TPRCT = 10
Read #1,11,116;OVUN; \ If OVUN < 0 Or OVUN > 2 Let OVUN = 0
Mat Read #1,11,0;BDAYS;
BDAYS[0] = BDAYS[ARMONTH]
If BDAYS[0] <= 0 Let BDAYS[0] = 21
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
EXCTYPE$ = "Y TWS RCSLLBX FZ"
CALCSRC$ = "EOQI/CSEAS/UARBM/M"
maxtm=90 ! seconds = 1.5 minutes) (front end = 1min 40 secs)
strttm#=tim#(0) ! start
VUEP = 1
X2 = PC_DATE \ Gosub L_7820 \ X2 = Tim(6)
JDATE[0] = X2
Gosub BLDSORTFLE ! on channel 7?
CH_SORT = 7;CH_CCODES = 13
maxrows=2000 ! needs a maximum!!! (due to United autoload! 41661=41,950,400!)
!if userid$[1,4]="JIMS" ! track EVERY WEB CALL!
!	x=0
!	getnxtsv: ! loop til not found
!	tmp$="tmp/367bin"+Str$(x)+".txt"
!	Call FindF(tmp$,FOUND)
!	if found let x=x+1 \ goto getnxtsv ! til new one to save all web submits
!	call dxsave(0,tmp$)
!Endif
	! files opened - now process 
	Action2$=UCase$(Action2$)
	ACtion2$=RTrim$(Action2$) ! make sure UPPERCASE and No blanks at end
	Action1$=UCase$(action1$)
	Action1$=RTrim$(action1$) ! UC and trimmed
	If Action1$="MARKLINE" Goto StrtSelct ! no need for po,buyer, etc
	if action1$="GETTARGT" goto StrtSelct ! ditto
	If action1$="UPDTTARGET" goto StrtSelct ! ditto
	Call DXGet("PONUM",tmp$)
	PoNum=tmp$
	CHK_PO_LOOP: X = X + 1
	If X >= 8 And X <= 90 Goto CHK_PO_LOOP
	If X <= 99
		U5$[1,2] = X Using "##"
		U5$[3] = PONum Using "######"
		Search #8,2,1;U5$,V1,E \ If E > 1 Gosub ERR_SEARCH
		If E Goto CHK_PO_LOOP
	End If
	If V1
		let S9[0]=V1
	Else
		ReturnStatus=0
		Message$="PO NUMBER NOT FOUND!"
		Goto OutDone
	Endif
	Call DXGet("SBUYER",tmp$)
	Let S9[7]=tmp$
	Call DXGet("EBUYER",tmp$)
	Let S9[8]=tmp$
	Call DXGet("NSTKS",tmp$)
	let S9[9]=tmp$
	Gosub L_6350 \ Gosub L_12000 ! read poh, get pomins (every time)
	StrtSelct: ! can bypass poinfo for certain actions ("MARKLINE")
Select case action1$
	case "SCRNHELP"   !		Show text for columns   doc=APOL-GetScrnHelp.doc
		ReturnStatus=1
		Message$="OK"
		Gosub Sho_Help
		call AddToStr(e$,rstr$,List$[]) 
		! end of help
	case "VENDDATA"  !  main screen header			doc=APOL-GetVendData.doc
		ReturnStatus=1
		Message$="OK"
		Gosub L_5100 ! load main header
		call AddToStr(e$,rstr$,List$[]) 
		! end of vend head
	case "GETLINES" ! display all lines				doc=APOL-GetWorkData.doc
		ReturnStatus=1
		Message$="OK"
		Clear List$[]
		tmpcnt=maxcnt
		
		List$[0]=bsdel$,"PRODLINE",fdel$
		WebStr$="RECID",fdel$,"PRODID",fdel$,"DESC1",fdel$,"DESC2",fdel$
		WebStr$=WebStr$,"VENDITM",fdel$,"MRKD",fdel$,"UM",fdel$
		WebStr$=WebStr$,"AVAIL",fdel$,"ONPO",fdel$,"DAYMIN",fdel$
		WebStr$=WebStr$,"DAYORD",fdel$,"REORD",fdel$
		WebStr$=WebStr$,"FREE",fdel$,"LQTY",fdel$,"LWGT",fdel$
		WebStr$=WebStr$,"LCUBE",fdel$,"LCOST",fdel$
		Webstr$=webstr$,"DEALS",fdel$
		List$[1]=WebStr$
		Row=2
		Gosub L_990 ! reload all
		List$[row]=esdel$
		call AddToStr(e$,rstr$,List$[]) 
		! end of redisplay lines
	case "GETDEALS" ! show deals for vend/prod		doc=APOL-GetDeals.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGet("RECID",tmp$)
		let X2=tmp$
		If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="BAD RECORD NUMBER"
			Goto OutDone
		Else
			R2=X2
		Endif
		Gosub L_6000 ! read rec/
		IF A2[2] ! NON-STOCK
			returnstatus=0
			message$="No deals on non-stocks"
			goto outDone
		Endif
		Gosub L_11650 
		call AddToStr(e$,rstr$,List$[]) 
		! end of Show deals
	case "SHOEMERBUY" ! show ttl/mins				doc=APOL-GetEmergBuy.doc
		ReturnStatus=1
		Message$="OK"
		ShowMins=1 ! marked
		Gosub L_4400 \ Gosub L_4475 ! total / show
		call AddToStr(e$,rstr$,List$[]) 
		! end of Show EmerBuy
	case "CALCEMERBUY" ! do calc					doc=APOL-CalcEmergBuy.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGET("EBPCT",tmp$)
		E_Buy=tmp$
		if E_Buy=0 goto OutDone
		Call DXGET("ADJOPT",tmp$)
		tmp$=UCase$(tmp$) ! A or M (ALL or Marked only)
		MrkO=0 \ if tmp$="M" let MrkO=1
		If E_BUY>0
			gosub L_4595 ! do the calc
		Else ! no less than zero
			ReturnStatus=0
			Message$="PERCENT INVALID"
		Endif
		! end of calcemergency buy
	case "CRTPOLINES" ! create pol from marked		doc=APOL-SubmitPOLines.doc
		ReturnStatus=1
		Message$="OK"
		gosub L_8000 ! checks/chains
		! end of create lines
	case "CANCLINES" ! cancel the whole thing		doc=APOL-CancelWorkLines.doc
		ReturnStatus=1
		Message$="OK"
		a$=H4[1] using "##";a$[3,8]=h3[3] Using "######" ! need for reset
		Gosub L_8070
		! end of cancel/delete po
	case "RESTRTPROG" ! abort - leave as is			doc=APOL.StartOver.doc
		ReturnStatus=1
		Message$="OK"
		Gosub RSetAll
		! end of cancel/reset po
	case "GETTARGT" ! get target vars				doc=APOL-GetTargetBuy.doc
		ReturnStatus=1
		Message$="OK"
		Gosub WANTTARGET
		call AddToStr(e$,rstr$,List$[]) 
		! end of get target info
	case "UPDTTARGET" ! save target vars			doc=APOL-SubmitTargetBuy.doc
		ReturnStatus=1
		Message$="OK"
		Gosub REQUPDT
		! end of update target info
	case "DOTARGET" ! do target buy calc			doc=APOL-DoTargetBuy.doc
		ReturnStatus=1
		Message$="OK"
		Gosub BEGNTARGADJ
		! end of do target
	case "VENDMINS" ! show reord ttls/mins			doc=APOL-GetVendorMins.doc
		ReturnStatus=1
		Message$="OK"
		Gosub SHOMINSONLY
		call AddToStr(e$,rstr$,List$[]) 
		! end of show mins
	case "PRODINFO" ! show extra prod detail		doc=APOL-GetProdInfo.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGet("RECID",tmp$)
		let X2=tmp$
		If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="BAD RECORD NUMBER"
			Goto OutDone
		Else
			R2=X2
		Endif
		Gosub L_6000 ! read rec/
		Gosub L_5200 ! load it
		call AddToStr(e$,rstr$,List$[]) 
		! end of get prod info
	case "RESETREORD" ! reset reords to original	doc=APOL-ResetReorder.doc
		ReturnStatus=1
		Message$="OK"
		Gosub L_2900
		! end of reset
	case "CHGREORD" ! manually enter reorder		doc=APOL-SubmitReorder.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGet("RECID",tmp$)
		let X2=tmp$
		If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="BAD RECORD NUMBER"
			Goto OutDone
		Else
			R2=X2
		Endif
		! call dxsave(0,"tmp/apoc.txt!")
		Gosub L_6000 ! read data
		Gosub L_3065 ! get qty/um & recalc (does dxget)
		if returnstatus=0 goto OutDone ! a problem occurred
		gosub L_6000 ! re-read / re-calc data
		Clear List$[]
		tmpcnt=maxcnt
		List$[0]=bsdel$,"PRODLINE",fdel$
		WebStr$="RECID",fdel$,"PRODID",fdel$,"DESC1",fdel$,"DESC2",fdel$
		WebStr$=WebStr$,"VENDITM",fdel$,"MRKD",fdel$,"UM",fdel$
		WebStr$=WebStr$,"AVAIL",fdel$,"ONPO",fdel$,"DAYMIN",fdel$
		WebStr$=WebStr$,"DAYORD",fdel$,"REORD",fdel$
		WebStr$=WebStr$,"FREE",fdel$,"LQTY",fdel$,"LWGT",fdel$
		WebStr$=WebStr$,"LCUBE",fdel$,"LCOST",fdel$
		List$[1]=WebStr$
		Row=2
		Gosub L_5000 ! resend line
		List$[row]=esdel$
		call AddToStr(e$,rstr$,List$[])
		! end of chg reord
	case "CHGUM" ! manually change UM (NOT USED!)			doc=APOL-SubmitUofM.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGet("RECID",tmp$)
		let X2=tmp$
		If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="BAD RECORD NUMBER"
			Goto OutDone
		Else
			R2=X2
		Endif
		Gosub L_6000 ! read data
		!Call DXGet("APOUM",tmp$)
		!U5$=UCase$(tmp$)+Blank$
		!U5$[5]=""
		
		!Gosub L_4000 ! check it and recalc base
		if returnstatus=0 goto OutDone ! a problem occurred
		!PFU1[10]=UNIT ! switch to new unit
		Clear List$[]
		tmpcnt=maxcnt
		List$[0]=bsdel$,"PRODLINE",fdel$
		WebStr$="RECID",fdel$,"PRODID",fdel$,"DESC1",fdel$,"DESC2",fdel$
		WebStr$=WebStr$,"VENDITM",fdel$,"MRKD",fdel$,"UM",fdel$
		WebStr$=WebStr$,"AVAIL",fdel$,"ONPO",fdel$,"DAYMIN",fdel$
		WebStr$=WebStr$,"DAYORD",fdel$,"REORD",fdel$
		WebStr$=WebStr$,"FREE",fdel$,"LQTY",fdel$,"LWGT",fdel$
		WebStr$=WebStr$,"LCUBE",fdel$,"LCOST",fdel$
		List$[1]=WebStr$
		Row=2
		Gosub L_5000 ! resend line
		List$[row]=esdel$
		call AddToStr(e$,rstr$,List$[])
		! end of chg unit of measure
	case "UMLIST" ! send a list of UMs				doc=APOL-GetUMList.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGet("RECID",tmp$)
		let X2=tmp$
		If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="BAD RECORD NUMBER"
			Goto OutDone
		Else
			R2=X2
		Endif
		Gosub L_6000 ! read data
		typ$="QTY" ! ALWAYS QTY
		prc=3;prr=0
		if not(a2[2]) let prr=A1[0] ! need rec
		Clear pr. ! only looks at um & factor!
		Let Pr.BaseUM=PFU1[0]! =Prod.BaseUM;PFU2[0]=1
		Let Pr.UM2=PFU1[1];Pr.UM2Fact=PFU2[0]
		Let Pr.UM3=PFU1[2];Pr.UM3Fact=PFU2[1]
		Let Pr.UM4=PFU1[3];Pr.UM4Fact=PFU2[2]
		Let Pr.UM5=PFU1[4];Pr.UM5Fact=PFU2[3]
		Let Pr.UM6=PFU1[5];Pr.UM6Fact=PFU2[4]
		Let Pr.UM7=PFU1[6];pr.UM7Fact=PFU2[5]
		Let Pr.UM8=PFU1[7];Pr.UM8Fact=PFU2[6]
		Let pr.UMPurchDefault=PFU1[10]
		let pr.UMSellDefault=PFU1[9]
		!If a2[2] ! nonstock ! use same (loaded pfu1[] in L_6000/L_30000)
		!Else
			Call UMDList(e$,typ$,PRC,PRR,List$[],IntCo,Pr.)
		!Endif
		call AddToStr(e$,rstr$,List$[])
		! end of Show unit of measure
	case "MARKLINE" ! Mark/unmark line(s)			doc=APOL-ChangeLineMark.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGET("TTLMRKD",tmp$)
		Let X3=tmp$
		If X3<=0 
			ReturnStatus=0
			Message$="MISSING NUMBER MARKED"
			Goto OutDone
		Endif
		For X1=1 to X3
		  Call DXGet("RECID"+Str$(X1),tmp$)
		  let X2=tmp$
		  If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="RECID"+STR$(X1)+" - BAD RECORD NUMBER"
			Goto BadRec
		  Else
			R2=X2
		  Endif
		  ! Gosub L_6000 ! read pogenwrk
		  Mat Read #2,R2,0;A$;
		  Mat Read #2,R2,20;A1;
		  Mat Read #2,R2,56;A2;
		  Mat Read #2,R2,62;A3;
		  !If X$="A" or X$="R" Gosub L_2800 ! range mark
		  !call programdump("/tmp/apollog1!","")
		  !If X$="S" Gosub L_2700 ! single mark
		  Gosub L_2700 ! switch (always single Record)
		  !call programdump("/tmp/apollog2!","")
		BadRec: ! incase 
		Next X1
		!end of mark line(s)
	case "DAYSSUPP" ! do a days supply calc			doc=APOL-DoDaysSuppBuy.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGET("ADJOPT",tmp$)
		tmp$=UCase$(tmp$) ! A or M (ALL or Marked only)
		MrkO=0 \ if tmp$="M" let MrkO=1
		Call DXGet("DAYS",tmp$)
		X2=tmp$
		If x2 = 0 Goto OutDone
		If x2 < 0 Or x2 > 200 OR Fra(x2 * 100)
			ReturnStatus=0
			Message$="INVALID DAYS"
			Goto OutDone
		Endif
		DayWnt=X2
		Gosub EDT_DAYSUPPLY
		!end of Days supply buy
	case "USAGE" ! show Usage Screen				doc=APOL-GetProdUsage.doc
		ReturnStatus=1
		Message$="OK"
		Call DXGet("RECID",tmp$)
		let X2=tmp$
		If X2<=0 or X2>CHF(2)-1 or FRA(X2)
			Let ReturnStatus=0
			Message$="BAD RECORD NUMBER"
			Goto OutDone
		Else
			R2=X2
		Endif
		Gosub L_6000 ! read data
		If Not(A2[2]) ! only products!
			Gosub L_6500
		Else
			returnstatus=0
			Message$="No Usage for Non-Stock"
		Endif
		! end of usage
End Select
	OutDone: ! finished
	! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
Else
	include "src/callmainerrnet.inc"
end try
End ! the whole program

! start of subroutines

!Print 'K0'; \ X0 = 0 \ Call Echo(X0)

DISP_VALUE = 4
!Gosub L_5400 ! header screen
Read #5,H0[1];C$;
!Gosub L_5100 ! vend+mins
L_990: Rem "Redisplay all ! WEB - action1 case "GETLINES"
Gosub RESORTLNS

MORLINES[0] = 0;MORLINES[1] = 0;HOLD_R2 = 0;X3[4] = 0
For X2 = 0 To 24
  TOT_WEIGHT[X2] = 0;TOT_CUBE[X2] = 0;TOT_COST[X2] = 0;TOT_QTY[X2] = 0
Next X2
K2$ = H4[1] Using "##";K2$[3] = H3[3] Using "######";K$ = K2$
POGLOOP: Rem "
Search #2,3,1;K2$,R2,E \ If E = 2 Goto L_1400
If E Gosub ERR_SEARCH
If K2$[13,13] = "@" Goto POGLOOP
If K2$[1,8] <> K$[1,8] Return
Mat Read #2,R2,56;A2;
X2 = K2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto POGLOOP
Gosub CHECK_LINE_VALIDITY
If NS_BAD Goto POGLOOP
If Not(S9[9]) And A2[2] = 1 Goto POGLOOP
If S9[9] And A2[2] = 1 Goto CONTPOG
CONTPOG: Rem "
X3[5] = R2
L_1060: Gosub L_6000 ! read genwrk
MORLINES[0] = 0 \ If A3[0] Let MORLINES[0] = 1
!J1 = J1 + 1 ! no line track
Gosub L_5000 ! add line
if row>maxrows ! too many - avoid bomb
  returnstatus=1 ! or do a =5? with chance for more?
  message$="Maximum of "+Str$(Maxrows)+" was reached"
  goto L_1400
Endif
! If J1 > 19 Goto L_1200
RECNIR: Rem "not in range loop
Read #2,R2,62;X3;
If X3
  R2 = X3
  Mat Read #2,R2,56;A2;
  Mat Read #2,R2,92;A4;
  If A4[0] < S9[7] Or A4[0] > S9[8] Goto RECNIR
  If Not(S9[9]) And A2[2] = 1 Goto RECNIR
  Gosub CHECK_LINE_VALIDITY
  If NS_BAD Goto RECNIR
  If S9[9] And A2[2] = 1 Goto CONTRECD
CONTRECD: Rem "
  R2 = X3 \ Goto L_1060
End If 
L_1200: J1 = 8 \ R2 = X3[5] \ Gosub L_6000 ! read genwrk
Return
L_1400: Rem NO ITEMS LEFT
!Print @0,23; Tab 18;"NO LINES IN WORK FILE.   SKIPPING LINE SELECT";'CL RB';
!Signal 3,30 \ 
If Not(X3[5]) ! no start
	ReturnStatus=0
	Message$="NO LINES IN WORK FILE."
Goto L_8070
Else
	Return
Endif

L_2000: Rem END OF LINES (This and sho_options and cursor up/down just for reference on orig program)
Return ! the web handles this
!Print @0,22;"        Use Up and Down arrow to move around, <space> to mark or unmark";
L_2200: !
Return ! the web handles this
!Print @0,23;" H: help  O: options ";
!If Not(X0[2]) Print " U: usage  V: view prod  R: reset  S: switch  E: end";'CL';
!If X0[2] Print " C: chg qty  S: switch  B: line Buy  Y: days buy  E: end";'CL';
If CHGQTY And HOLD_R2 And X3[4] Let R2 = HOLD_R2;J1 = X3[4] \ Gosub L_6000 ! read genwrk
Gosub L_5200
!Print @0,J1;"=>";@78,23; \ Input Len 1;'BCTRACK'S$
!Call String(1,S$)
!Input Tim 1;""TOSSCR$
Signal 6,-3,CHGQTY,CHGQTY
!Print @0,23;'CE';
CHGQTY = 0
If S$ = "\170252\" Goto L_2400
If S$ = "\170253\" Goto L_2600
If S$ = "" Goto L_2400
If S$ = " " Goto L_2700
If S$ = "A" Goto L_2800
If S$ = "B" Let HOLD_REC = R2 \ Gosub L_4400 \ Gosub L_4475 ! total / show
If S$ = "B" If E_BUY Let J1 = 7 \ Print @0,8;'CE'; \ Goto L_990
If S$ = "B" If E_BUY = 0 Let R2 = HOLD_REC \ Gosub L_6000 ! read genwrk
If S$ = "C" Goto L_3000
If S$ = "D" Gosub L_11650 \ Goto L_2200
If S$ = "E" Goto L_8000
If S$ = "G" Goto WANTTARGET
If S$ = "H" Gosub SHO_HELP \ Goto L_2200
If S$ = "L" ! "redisplay all lines
  !Print @0,8;'CE';
  J1 = 7
  Goto L_990
End If 
If S$ = "M" Goto SHOMINSONLY
If S$ = "O" Gosub SHOOPTIONS \ Goto L_2000
If S$ = "R" Goto L_2900
If S$ = "S" Let X0[2] = Not(X0[2]) \ Goto L_2200
If S$ = "T" Goto L_2300
If S$ = "U" If Not(A2[2]) Gosub L_6500 \ Goto L_2200
If S$ = "V" Let VUEP = Not(VUEP) \ Goto L_2200
If S$ = "Y" Goto EDT_DAYSUPPLY
L_2255: Print 'RB'; \ Goto L_2200
SHOOPTIONS: Rem "ALL Options Window
RETURN ! for reference only
!Window Open @0,8; Size 75,14; Using "AUTO PO LINE OPTIONS"
!Print 'CS';
!Print @0,1;" A = Mark All Lines Above Curr Line";
!Print @0,2;" B = Emergency Buy Percent";
!Print @0,3;" C = Change ReOrder Qty";
!Print @0,4;" D = Show Deals";
!Print @0,5;" E = End Line Edits";
!Print @0,6;" G = Target Buy";
!Print @0,7;" H = Show Help";
!Print @0,8;" L = Redisplay All Lines";
!Print @0,9;" M = Show PO Ttl/Minimums";
!Print @37,1;"O = Show Options (this Screen)";
!Print @37,2;"R = Reset ReOrder to Original";
!Print @37,3;"S = Switch Option Line";
!Print @37,4;"T = Change Running Total";
!Print @37,5;"U = Show Usage Screen";
!Print @37,6;"V = View Product Info";
!Print @37,7;"Y = Days Supply Buy";
!Print @37,8;"<SPACEBAR> = Mark/UnMark Line";
!Print @37,9;"UP or DOWN ARROW - Move that way"
!Print @1,Msc(34) - 1;"Press <CR> to exit  ";
!Input Len 16384 + 1;""S$
!Window Close 
Return 
L_2300: Rem CHANGE RUN TOTAL UNIT
Return ! the web side will handle this
Gosub L_10000 ! change run totals?
! Gosub L_5400 \ Gosub L_5100
For X2 = 0 To 24
  TOT_WEIGHT[X2] = 0;TOT_CUBE[X2] = 0;TOT_COST[X2] = 0
Next X2
R2 = X3[5] \ Goto L_990
L_2400: Rem CURSOR DN
Return
!Print @0,J1;"  ";
RECNDWN: Rem "
Return ! the web side handles screen
If Not(A3[0]) Print 'RB'; \ Goto L_2200
Mat Read #2,A3[0],56;A2;
Mat Read #2,A3[0],92;A4;
Read #2,A3[0],62;X9;
If A4[0] < S9[7] Or A4[0] > S9[8] Let A3[0] = X9 \ Goto RECNDWN
If Not(S9[9]) And A2[2] = 1 Let A3[0] = X9 \ Goto RECNDWN
R2 = A3[0] \ Gosub CHECK_LINE_VALIDITY
If NS_BAD Let A3[0] = X9 \ Goto RECNDWN
If S9[9] And A2[2] = 1 Goto CONTCURD
CONTCURD: Rem "
R2 = A3[0] \ Gosub L_6000 ! read genwrk
!Gosub CLRPRODINFO
J1 = J1 + 1 \ If J1 < 21 Goto L_2200
For X2 = 8 To 20
  TOT_WEIGHT[X2] = TOT_WEIGHT[X2 + 1];TOT_CUBE[X2] = TOT_CUBE[X2 + 1]
  TOT_COST[X2] = TOT_COST[X2 + 1];TOT_QTY[X2] = TOT_QTY[X2 + 1]
Next X2
!Print @0,8;'DL';@0,21;'IL'; \ J1 = 20
MORLINES[0] = 0 \ If A3[0] Let MORLINES[0] = 1
Gosub L_5000 ! add line ! \ Goto L_2200
Return
L_2600: Rem CURSOR UP
Return ! the web side handles screen
!Print @0,J1;"  ";
RECNUP: Rem "
If Not(A3[1]) Print 'RB'; \ Goto L_2200
Mat Read #2,A3[1],56;A2;
Mat Read #2,A3[1],92;A4;
Read #2,A3[1],68;X9;
If A4[0] < S9[7] Or A4[0] > S9[8] Let A3[1] = X9 \ Goto RECNUP
If Not(S9[9]) And A2[2] = 1 Let A3[1] = X9 \ Goto RECNUP
R2 = A3[1] \ Gosub CHECK_LINE_VALIDITY
If NS_BAD Let A3[1] = X9 \ Goto RECNUP
If S9[9] And A2[2] = 1 Goto CONTCURU
CONTCURU: Rem "
R2 = A3[1] \ Gosub L_6000 ! read genwrk
!Gosub CLRPRODINFO
J1 = J1 - 1 \ If J1 > 7 Goto L_2200
For X2 = 20 To 8 Step -1
  TOT_WEIGHT[X2] = TOT_WEIGHT[X2 - 1];TOT_CUBE[X2] = TOT_CUBE[X2 - 1]
  TOT_COST[X2] = TOT_COST[X2 - 1];TOT_QTY[X2] = TOT_QTY[X2 - 1]
Next X2
!For X0 = 7 To 21 \ Print @62,X0;'CL'; \ Next X0
!Print @0,21;'DL';@0,8;'IL'; \ J1 = 8
MORLINES[1] = 0 \ If A3[1] Let MORLINES[1] = 1
DISP_VALUE = 4
Gosub L_5000 ! add line ! \ Goto L_2200
Return
L_2700: Rem TOGGLE MARK   WEB - Action1 case "MARKLINE" (range or single line)
MARK = 99
A3[2] = Not(A3[2])! \ Write #2,R2,74;A3[2];
Mat Write #2,R2,62;A3;
! L_2720:  Gosub L_5000 ! add line
MARK = 0
Return ! Goto L_2200
L_2800: Rem ALL ABOVE
Return ! the web handles marking/unmarking and passes lines to do (L_2700)
! web holds lines - so maynot be in order expected - ALWAYS THEY TELL LINES MARKED
! Print @0,23;'CL';"MARK ALL LINES:  A: above  or  R: with reorder  ";
!X0 = 1 \ Call Echo(X0) \ Print 'K1';
!Input Len 16384 + 1;""X$ \ Call String(1,X$)
!Print @0,23;'K0';'CL'; \ X0 = 0 \ Call Echo(X0)
If X$ <> "A" And X$ <> "R" !Goto L_2800
	ReturnStatus=0
	Message$="INVALID SELECTION"
	Return
Endif
For X2 = 0 To 24
  TOT_WEIGHT[X2] = 0;TOT_CUBE[X2] = 0;TOT_COST[X2] = 0;TOT_QTY[X2] = 0
Next X2
If X$ = "R" ! "lines with reorder qty
  K2$ = H4[1] Using "##";K2$[3] = H3[3] Using "######";K$ = K2$
POGMLOOP: Rem "
  Search #2,3,1;K2$,R2,E \ If E = 2 Goto RMKDONE
  If E Gosub ERR_SEARCH
  If K2$[13,13] = "@" Goto POGMLOOP
  If K2$[1,8] <> K$[1,8] Goto RMKDONE
  Gosub CHECK_LINE_VALIDITY
  If NS_BAD Goto POGMLOOP
  Mat Read #2,R2,56;A2;
  X2 = K2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto POGMLOOP
  If Not(S9[9]) And A2[2] = 1 Goto POGMLOOP
  If S9[9] And A2[2] = 1 Goto CONTPOGM
CONTPOGM: Rem "
  Mat Read #2,R2,20;A1;
  If Not(A1[3]) Goto POGMLOOP
  Mat Read #2,R2,62;A3
  A3[2] = 1
  Mat Write #2,R2,62;A3;
  Goto POGMLOOP
RMKDONE: Rem "done
Else ! "all lines above
  X0 = 1 \ X3 = R2
L_2830: Rem "
  Mat Read #2,X3,56;A2;
  Mat Read #2,X3,92;A4;
  If A4[0] < S9[7] Or A4[0] > S9[8] Goto CONTMRKG
  If Not(S9[9]) And A2[2] = 1 Goto CONTMRKG
  If S9[9] And A2[2] = 1 Goto DOMARKIT
DOMARKIT: Rem "
  Write #2,X3,74;X0;
CONTMRKG: Rem "
  Read #2,X3,68;X3; \ If X3 Goto L_2830
End If 
!Print @0,8;'CE'; \ J1 = 7 \ R2 = X3[5] \ Goto L_990
Return

L_2900: Rem RESET ALL BACK TO ORIG  WEB - Action1 case "RESETREORD"
K2$ = H4[1] Using "##";K2$[3] = H3[3] Using "######";K$ = K2$
POGRLOOP: Rem "
Search #2,3,1;K2$,R2,E \ If E = 2 Return
If E Gosub ERR_SEARCH
If K2$[13,13] = "@" Goto POGRLOOP
If K2$[1,8] <> K$[1,8] Return
Mat Read #2,R2,56;A2;
X2 = K2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto POGRLOOP
Gosub CHECK_LINE_VALIDITY
If NS_BAD Goto POGRLOOP
If Not(S9[9]) And A2[2] = 1 Goto POGRLOOP
If S9[9] And A2[2] = 1 Goto CONTPOGR
CONTPOGR: Rem "
X3[5] = R2
X0 = 0 \ X3 = X3[5] ! set rec to start
L_2930: Rem "
Mat Read #2,X3,56;A2;
Mat Read #2,X3,92;A4;
If A4[0] < S9[7] Or A4[0] > S9[8] Goto CONTRESET
If Not(S9[9]) And A2[2] = 1 Goto CONTRESET
If S9[9] And A2[2] = 1 Goto L_2935
L_2935: Rem "
Write #2,X3,74;X0; \ Mat Read #2,X3,62;A3;
A2[1] = A3[4]
Write #2,X3,58;A2[1];
Write #2,X3,38;A3[3];
CONTRESET: Rem "
Mat Read #2,X3,62;A3;
X3 = A3[0]
If X3 Goto L_2930
!Print @0,8;'CE'; \ J1 = 7 \ R2 = X3[5] \ Goto L_990
Return
L_3000: Rem CHANGE QTY
! WEB PASSES QTY (line L_3065 + )
CHGQTY = 0
L_3010: !X0 = 1 \ Call Echo(X0)
RETURN ! web passes it
!Print @0,21;"ENTER REORDER QUANTITY, <CR>: no change  ";'CL';
!Input Len 16384 + 12;'K1';""U5$ \ X0 = 0 \ Call Echo(X0)
!Print @0,21;'K0';'CL';
If U5$ = "" Goto L_2200
HOLD_R2 = R2;X3[4] = J1
Signal 3,0
X3 = U5$ \ If X3 >= 0 If X3 < 99999999 If Not(Fra(X3)) Goto L_3065
!Print 'RB'; \ Goto L_3010
L_3065: Rem "gotta qty   WEB - Action1 case "CHGREORD"
Call DXGET("ROQTY",tmp$)
X3=tmp$
If X3<0 or X3>99999999 or FRA(X3) ! opposite check of above
	ReturnStatus=0
	Message$="INVALID QUANTITY ENTERED"
	Return
Endif
U5$=PUnit$ ! same um
Gosub L_4000 ! recalc base 
CHGQTY = 1
Write #2,R2,38;A1[3];
A2[1] = 8
Write #2,R2,58;A2[1];
DISP_VALUE = 4
!For X0 = 7 To 20 \ Print @62,X0;'CL'; \ Next X0
!Print @0,21;'CL'; \ Gosub L_5000 ! add line
Return ! Goto L_2200
If MORLINES[1] ! "more lines up - so no redisplay all
  !Print @0,21;'CL'; \ Gosub L_5000 \ Gosub RESORTLNS
  Return ! Goto L_2200
Else ! "no lines hidden up - redisplay all of it
  !Print @0,8;'CE'; \ J1 = 7
End If 
Goto L_990
EDT_DAYSUPPLY: Rem "  WEB - Action1 case "DAYSSUPP"
!Print @0,22;'CE';"CALCULATE ORDER QUANTITY TO A DAYS SUPPLY"
!Print @0,23;'CL';"  A: ADJUST ALL Lines or  M: Marked ones only? (  E: Exit)   ";
!X0 = 1 \ Call Echo(X0) \ Print 'K1';
!Input Len 16384 + 1;""U5$ \ Call String(1,U5$)
!Print @0,23;'K0';'CL'; \ X0 = 0 \ Call Echo(X0)
!If U5$ = "" Let U5$ = "E"
!If U5$ = "E" Goto L_2000
!If U5$ <> "A" And U5$ <> "M" Goto EDT_DAYSUPPLY
!MRKO = 0 \ If U5$ = "M" Let MRKO = 1
! MRKO AND DAYWNT SENT FROM WEB!!
ENT_DAYWANTED: Rem "
!Print @0,23;'CL';'K1'; \ X0 = 1 \ Call Echo(X0)
!If MRKO Print "For these Marked lines: ";
!Print "Enter the Days Supply Wanted (1-200)  ";
!Input Len 16384 + 5;""U5$ \ X0 = 0 \ Call Echo(X0)
!Print @0,23;'CL';'K0';
!DAYWNT = U5$ \ If DAYWNT = 0 Goto EDT_DAYSUPPLY
!If DAYWNT < 0 Or DAYWNT > 200 Goto ENT_DAYWANTED
!If Fra(DAYWNT * 100) Goto ENT_DAYWANTED
TLines[0]=0;TLines[1]=0;tlines[2]=0 ! scanned - adjust - nodemand
T2$ = " ",T2$;T_WEIGHT = 0;T_CUBE = 0;T_COST = 0;T_UNITS = 0;T_FREE = 0
T2$ = H4[1] Using "##" \ T2$[3] = H3[3] Using "######"
EDYLOOP: Search #2,3,1;T2$,R2,E \ If E = 2 Goto DADJDONE
If E Gosub ERR_SEARCH
X2 = T2$[1,2] \ If X2 <> H4[1] Goto DADJDONE
X2 = T2$[3,8] \ If X2 <> H3[3] Goto DADJDONE
If T2$[13,13] = "@" Goto EDYLOOP
Gosub CHECK_LINE_VALIDITY
If NS_BAD Goto EDYLOOP
Mat Read #2,R2,56;A2;
X2 = T2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto EDYLOOP
If Not(S9[9]) And A2[2] = 1 Goto EDYLOOP
If S9[9] And A2[2] = 1 Goto CONTEDY
CONTEDY: Rem "
Gosub L_6000 ! read genwrk
If A2[2] Goto EDYLOOP
If MRKO And Not(A3[2]) Goto EDYLOOP
tlines[0]=tlines[0]+1 ! scanned 1
DAYSUPPLY[2] = 0
If DMNDDAY
  If A2[0] = 6 Let DAYSUPPLY[2] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2] + A3[3]) / DMNDDAY)
  If A2[0] <> 6 Let DAYSUPPLY[2] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1] + A3[3]) / DMNDDAY)
Else ! no demand
	tlines[2]=tlines[2]+1 ! none
End If 
If DAYSUPPLY[2] = 0 Goto EDYLOOP
If DAYSUPPLY[2] < 0 Let DAYSUPPLY[2] = 0
X3 = DAYWNT - DAYSUPPLY[2]
X3[1] = X3
X3[2] = A1[3]
A1[3] = A3[3] + (DMNDDAY * X3)
If A1[3] < 0 Let A1[3] = 0 \ Goto ADDDAYS_DONE
Gosub RNDTOPURCH
let tlines[1]=tlines[1]+1 ! adjusted 1
WRKCHKD = 0
CHKWORK: Rem "check to see how close to requested we are
DAYSUPPLY[2] = 0
If DMNDDAY
  If A2[0] = 6 Let DAYSUPPLY[2] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2] + A1[3]) / DMNDDAY)
  If A2[0] <> 6 Let DAYSUPPLY[2] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1] + A1[3]) / DMNDDAY)
End If 
X3[3] = DAYWNT - DAYSUPPLY[2]
If WRKCHKD And X3[3] > 0 Let X3[3] = 0 - X3[3]
If X3[3] < 0 ! "more supply than wanted
  WRKCHKD = 1
  X3[2] = A1[3]
  X3[2] = X3[2] - FACTOR
  DAYSUPPLY[2] = 0
  If DMNDDAY
    If A2[0] = 6 Let DAYSUPPLY[2] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2] + A1[3]) / DMNDDAY)
    If A2[0] <> 6 Let DAYSUPPLY[2] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1] + A1[3]) / DMNDDAY)
  End If 
  X3 = DAYWNT - DAYSUPPLY[2]
  If Abs(X3) < Abs(X3[3]) ! "new calc closer
    A1[3] = X3[2]
    Goto CHKWORK
  End If 
End If 
ADDDAYS_DONE: Rem "
Mat Write #2,R2,20;A1;
A2[1] = 7
Mat Write #2,R2,56;A2;
WRKCHKD = 0
Goto EDYLOOP
DADJDONE: Rem "Done with it - redisplay ALL
if tlines[0]=tlines[2] ! ALL NO DEMAND
	returnstatus=0
	if tlines[0]>0
		message$="All lines are zero demand - no change made"
	Else
		message$="No lines match selection Or Target already met - no change made"
	endif
Endif
!Print @0,8;'CE'; \ J1 = 7
Return ! Goto L_990 ! WEB TO CALL REDISPLAY
WANTTARGET: Rem "Want to meet a target   WEB - action1 case "GETTARGT"
Read #1,11,108;DAYI; \ If DAYI <1 Let DAYI = 5
If DAYI > 99.99 Let DAYI = 5
Read #1,11,112;TPRCT; \ If TPRCT < 1 Let TPRCT = 10
If TPRCT > 100 Let TPRCT = 5
If OVUN < 0 Let OVUN = 0
If OVUN > 2 Let OVUN = 0
!Window Open @0,3; Size 77,17; Using "MEET TARGET"
!Print 'K1'; \ X0 = 1 \ Call Echo(X0)
!Print 'CS';
Clear List$[]
List$[0]=bsdel$,"TARGETDATA",fdel$
WebStr$="DAYINCR",fdel$,"TRGTPCT",fdel$,"RNDID",fdel$,"RNDDESC",fdel$
List$[1]=WebStr$
WebStr$=Str$(DAYI),fdel$,Str$(TPRCT),fdel$
WebStr$=WebStr$,Str$(OVUN),fdel$
tmp$=""
If OVUN = 0 tmp$=" NORMAL TARGET +/-"
If OVUN = 1 tmp$=" END OVER TARGET"
If OVUN = 2 tmp$=" END UNDER TARGET"
WebStr$=WebStr$,tmp$,fdel$
List$[2]=Webstr$
List$[3]=esdel$
Return

REQUPDT: Rem "request to update   WEB - Action1 case "UPDTTARGET"
!Print @0,Msc(34) - 3;"Do you want to Update Day & Percent? (Y/N)  ";
!Input Len 16384 + 1;""S$ \ Call String(1,S$)
!If S$ <> "Y" And S$ <> "N" Goto REQUPDT
!If S$ = "N" Goto TRGTWHATTODO
Call DXGet("DAYINCR",tmp$)
X2=tmp$
If X2 <1 Or X2 > 99.99 Let ReturnStatus=0;Message$="BAD DAYS PASSED" \ return
If Fra(X2 * 100) Let ReturnStatus=0;Message$="BAD DAYS PASSED" \ return
DAYI = X2
Call DXGET("TRGTPCT",tmp$)
X2=tmp$
If X2 < 1 Or X2 > 100 Let ReturnStatus=0;Message$="BAD PERCENT PASSED" \ return
If Fra(X2 * 100) Let ReturnStatus=0;Message$="BAD PERCENT PASSED" \ return
TPRCT = X2 \ if tprct<1 let tprct=10
Call DXGET("RNDID",tmp$)
X2=tmp$
If X2 < 0 Or X2 > 2 Let ReturnStatus=0;Message$="BAD ROUND PASSED" \ return
OVUN = Int(X2)
Write #1,11,108;DAYI;
Write #1,11,112;TPRCT;
Write #1,11,116;OVUN;
!Print @0,Msc(34) - 3;'CE';
!Print @0,Msc(34) - 1;"UPDATED! ";
!Signal 3,30
Return ! Goto TRGTWHATTODO

BegnTargAdj: ! get target info  WEB - Action1 case "DOTARGET"
Call DXGet("DAYINCR",tmp$)
X2=tmp$
If X2 <1 Or X2 > 99.99 Let ReturnStatus=0;Message$="BAD DAYS PASSED" \ return
If Fra(X2 * 100) Let ReturnStatus=0;Message$="BAD DAYS PASSED" \ return
DAYI = X2
Call DXGET("TRGTPCT",tmp$)
X2=tmp$
If X2 < 1 Or X2 > 100 Let ReturnStatus=0;Message$="BAD PERCENT PASSED (1-100)" \ return
If Fra(X2 * 100) Let ReturnStatus=0;Message$="BAD PERCENT PASSED" \ return
TPRCT = X2 \ if tprct<1 let tprct=10
Call DXGET("RNDID",tmp$)
X2=tmp$
If X2 < 0 Or X2 > 2 Let ReturnStatus=0;Message$="BAD ROUND PASSED" \ return
OVUN = Int(X2)
Call DXGet("TRGTQTY",tmp$)
X3[1]=tmp$
If X3[1] <= 0 Or X3[1] > 999999.99 Let ReturnStatus=0;Message$="BAD QUANTITY PASSED" \ return
If Fra(X3[1] * 100) Let ReturnStatus=0;Message$="BAD QUANTITY PASSED" \ return
TARGETQ = X3[1]
Call DXGET("TRGTFLD",tmp$)
X2=tmp$
If X2 < 1 Or X2 > 4 Let ReturnStatus=0;Message$="BAD TARGET FIELD PASSED" \ return
TARGETI = X2
Call DXGET("ADJOPT",tmp$)
tmp$=UCase$(tmp$) ! A or M (ALL or Marked only)
MrkO=0 \ if tmp$="M" let MrkO=1
! call dxsave(0,"tmp/367bta.txt!")
TLines[0]=0;TLines[1]=0;tlines[2]=0 ! scanned - adjust - nodemand
rtrgloop=0;strgloop=0;TRGTB=9 ! how many times we resorted the lines
STRTTARGADJ: Rem "And we're off!
TRGLOOP = TRGLOOP + 1
Gosub GETCURRTARGET
If CTARGET = TARGETQ Goto TRGTDONE
ADDQTY = TARGETQ - CTARGET
If Not(OVUN) And Abs(ADDQTY) <= FNR(TARGETQ * TPRCT / 100) Goto TRGTDONE
If OVUN = 1 And ADDQTY < 0 And Abs(ADDQTY) <= FNR(TARGETQ * TPRCT / 100) Goto TRGTDONE
If OVUN = 2 And ADDQTY > 0 And Abs(ADDQTY) <= FNR(TARGETQ * TPRCT / 100) Goto TRGTDONE
If TrgLoop>5 ! try ten - 10 is too long on big vendors
	ReturnStatus=3
	if tlines[0]>0 
		if tlines[0]<>tlines[2]
		Message$="The target parameters are causing too many loops. Please adjust & try again!"
		else ! all zero demand
		Message$="The lines selected have no demand, no target can be calculated"
		Endif
	Else ! no lines
		message$="No lines match selection OR Target already met"
	Endif
	Goto OutDone ! Return
Endif
!If TRGLOOP > 5 ! "over five loops ! HOW TO DO THIS? (ALLOW LOOPS & DEPEND ON PRODCHK 99?)
!  Print @0,Msc(34) - 4;'CE';"There must have been a big difference in the beginning!"
!  Print @0,Msc(34) - 3;"And/or a small day increment. Loop Number ";Str$(TRGLOOP);" Starting now."
!  Print @0,Msc(34) - 2;'CL';"TARGET:";TARGETQ;"QTY TO ADJUST=";ADDQTY
!QTARGCONT: Rem "
!  Print @0,Msc(34) - 1;"DO YOU WANT TO CONTINUE ANOTHER ";Str$(TRGLOOP - 1);" LOOPS? (Y/N)  ";
!  Input Len 16384 + 1;""S$ \ Call String(1,S$)
!  If S$ <> "Y" And S$ <> "N" Goto QTARGCONT
!  Print @0,Msc(34) - 4;'CE';
!  If S$ = "Y" Let TRGLOOP = 1
!  If S$ = "N" Goto TRGTDONE
!End If 
K1$ = " ",K1$
!Print @0,Msc(34) - 3;'CL';"IF Stuck you can do a CONTROL B (Ctrl and B)";
!Print @0,Msc(34) - 2;'CL';"TARGET:";TARGETQ;"QTY TO ADJUST=";ADDQTY
!Print @0,Msc(34) - 1;'CL';TRGLOOP;
K1$ = H4[1] Using "##";K1$[3] = H3[3] Using "######";K$ = K1$
SMLONO = 0;R2 = 0;USEVORD = 0
!Signal 6,-3,X,Y
SORTFLOOP: Rem " start over after adjustment
currtm#=tim#(0)
if currtm#-strttm#>maxtm ! time limit reached (100 secs MAX)
	returnstatus=3 !  - 1 will say complete successfully?
	message$="While calculating, maximum time reached - please change parameters and try again"
	goto outdone
endif
If CTARGET < TARGETQ ! "we're less so add to lowest Days
  MODE = 3;K1$[9] = " "
Else ! "we're over - reduce highest Days
  MODE = 6;K1$[9] = "}";USEVORD = 1
End If 
SORTFLELOOP: Rem "in case = !
!Signal 2,P,X,Y \ If P = Spc(6) Goto ATRGTDONE
Search #CH_SORT,MODE,1;K1$,REC,E \ If E Goto NOMORESRTD
Mat Read #2,REC,20;A1;
If MODE = 6 And Not(A1[3]) Goto SORTFLELOOP ! only adjust down if reordqty
SMLONO = SMLONO + 1 \ If SMLONO > 99 Goto SMLOOPBIG
SMLOOPCONT: Rem "Continue
If R2 <> REC ! "same as last time - speed up processing
  R2 = REC;SMLONO = 0
  Gosub L_6000 ! read genwrk
End If 
If MRKO And Not(A3[2]) Goto SORTFLELOOP ! wants marked ONLY
If W0[0] > 0 Goto SORTFLELOOP
tlines[0]=tlines[0]+1 ! scanned 1
If DMNDDAY <= 0 
	tlines[2]=tlines[2]+1 ! nodmnd
	Goto SORTFLELOOP
Endif
! let the calc begin
ORIGA1 = A1[3]
If A[5] Let WEIGHT = (A1[3] + PL4[0]) * A[6] / A[5] Else Let WEIGHT = 0
If PF_A1[3] Let CUBE = (A1[3] + PL4[1]) * PF_B[23] / PF_A1[3] Else Let CUBE = 0
COST = DA1[3] * NET_COST
QTY = DA1[3] + FREE_QTY
ADDQTY = FNR(DMNDDAY * DAYI)
If PFU1[20] = 0 Let PFU1[20] = PFU1[10]
CNVTU[0] = PFU1[20];CNVTU[1] = 0;CNVTU[2] = 1;CNVTA = 1
Gosub convert \ VNDORD = AMOUNT
If USEVORD Let ADDQTY = VNDORD
If MODE = 6 And A1[3] <= ADDQTY Let ADDQTY = VNDORD
If MODE = 6 And A1[3] <= VNDORD Goto SORTFLELOOP
If MODE = 3 And ADDQTY > 0 And ADDQTY < VNDORD Let ADDQTY = VNDORD
If MODE = 3
  A1[3] = A1[3] + ADDQTY
Else 
  If A1[3] > ADDQTY ! "only if doesn't reduce to zero
    A1[3] = A1[3] - ADDQTY
  Else ! "std reduce too much
    If A1[3] > VNDORD ! "only if not 2 zero
      ADDQTY = VNDORD
      A1[3] = A1[3] - ADDQTY
    End If 
  End If 
End If 
tlines[1]=tlines[1]+1 ! adj one
If MRKO=0 ! all
T_WEIGHT = T_WEIGHT - WEIGHT
T_CUBE = T_CUBE - CUBE
T_COST = T_COST - COST
T_UNITS = T_UNITS - QTY
Else ! marked only
	M_WGHT = M_WGHT - WEIGHT
	M_CUBE = M_CUBE - CUBE
	M_COST = M_COST - COST
	M_QTY = M_Qty - QTY
Endif
NEWA1 = A1[3]
Gosub RNDTOPURCH2
Write #2,R2,38;A1[3];
Write #2,R2,74;A3[2];
CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
CNVTA = A1[3] \ Gosub convert \ DA1[3] = AMOUNT
If A[5] Let WEIGHT = (A1[3] + PL4[0]) * A[6] / A[5] Else Let WEIGHT = 0
If PF_A1[3] Let CUBE = (A1[3] + PL4[1]) * PF_B[23] / PF_A1[3] Else Let CUBE = 0
COST = DA1[3] * NET_COST
QTY = DA1[3] + FREE_QTY
If MRKO=0 ! all
T_WEIGHT = T_WEIGHT + WEIGHT
T_CUBE = T_CUBE + CUBE
T_COST = T_COST + COST
T_UNITS = T_UNITS + QTY
If TARGETI = 1 Let CTARGET = T_COST
If TARGETI = 2 Let CTARGET = T_WEIGHT
If TARGETI = 3 Let CTARGET = T_CUBE
If TARGETI = 4 Let CTARGET = T_UNITS
Else ! marked ONLY
	M_WGHT = M_WGHT + WEIGHT
M_CUBE = M_CUBE + CUBE
M_COST = M_COST + COST
M_QTY = M_Qty + QTY
If TARGETI = 1 Let CTARGET = M_COST
If TARGETI = 2 Let CTARGET = M_WGHT
If TARGETI = 3 Let CTARGET = M_CUBE
If TARGETI = 4 Let CTARGET = M_QTY
Endif
SORTFLDNE: Rem "done - change Key
DAYSUPPLY[0] = 0;DAYSUPPLY[1] = 0
If DMNDDAY
  If A2[0] = 6 Let DAYSUPPLY[1] = FNR(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2] + A1[3]) / DMNDDAY)
  If A2[0] <> 6 Let DAYSUPPLY[1] = FNR(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1] + A1[3]) / DMNDDAY)
End If 
If DAYSUPPLY[1] < 0 Let DAYSUPPLY[1] = 0
K$ = K1$
Search #CH_SORT,5,1;K$,REC,E \ If E Gosub ERR_SEARCH
K$[9,15] = DAYSUPPLY[1] Using "####.##"
Search #CH_SORT,4,1;K$,REC,E \ If E Gosub ERR_SEARCH
If CTARGET = TARGETQ Goto TRGTDONE
ADDQTY = TARGETQ - CTARGET
! Print @0,Msc(34) - 2;'CL';"TARGET:";TARGETQ;"QTY TO ADJUST=";ADDQTY
If Not(OVUN) And Abs(ADDQTY) <= FNR(TARGETQ * TPRCT / 100) Goto TRGTDONE
If OVUN = 1 And ADDQTY < 0 And Abs(ADDQTY) <= FNR(TARGETQ * TPRCT / 100) Goto TRGTDONE
If OVUN = 2 And ADDQTY > 0 And Abs(ADDQTY) <= FNR(TARGETQ * TPRCT / 100) Goto TRGTDONE
If Abs(ADDQTY) <= FNR(TARGETQ * .25) Let USEVORD = 1
Goto SORTFLOOP ! will reset k1$? could loop same prod over and over!
NOMORESRTD: Rem "
Gosub RESORTLNS
Goto STRTTARGADJ
GETCURRTARGET: Rem "Currently Target is?
SHOMINS = 1
Gosub L_4400 ! total  
SHOMINS = 0
If Mrko=0 ! wants all
If TARGETI = 1 Let CTARGET = T_COST
If TARGETI = 2 Let CTARGET = T_WEIGHT
If TARGETI = 3 Let CTARGET = T_CUBE
If TARGETI = 4 Let CTARGET = T_UNITS
Else ! marked
If TARGETI = 1 Let CTARGET = M_COST
If TARGETI = 2 Let CTARGET = M_WGHT
If TARGETI = 3 Let CTARGET = M_CUBE
If TARGETI = 4 Let CTARGET = M_QTY
Endif
Return 
SMLOOPBIG: Rem "Abort due to loop same prod 100+ times
! Signal 6,-3,X,Y
! Print @0,Msc(34) - 3;'CL';"IT HAS LOOPED >99 times on "+PF_A$[140,151]
! Print @0,Msc(34) - 2;'CE RB';"ABORT THIS TARGET? (Y/N)  ";
! Input Len 16384 + 1;""X$ \ Call String(1,X$)
ReturnStatus=3
Message$="IT HAS LOOPED >99 times on "+PF_A$[140,151]
GOTO OutDone ! TRGTDONE ! If X$ = "Y" Goto TRGTDONE
!If X$ <> "N" Goto SMLOOPBIG
!SMLONO = 1
!Goto SMLOOPCONT
ATRGTDONE: Rem "Abort by CntrlB
Return ! can't do on web!
Signal 6,-3,X,Y
!Print @0,Msc(34) - 2;'CE RB';"ABORT THIS TARGET? (Y/N)  ";
!Input Len 16384 + 1;""X$ \ Call String(1,X$)
!If X$ = "Y" Goto TRGTDONE
!If X$ <> "N" Goto ATRGTDONE
Goto SORTFLELOOP
TRGTDONE: Rem "Done
! Window Close 
! Print 'K0'; \ X0 = 0 \ Call Echo(X0)
Goto DADJDONE
L_4000: Rem unit of measure for chg qty   WEB - Action1 case "CHGUM" (ALSO RECALCS case "CHGREORD")
!Print 'K1'; \ X0 = 1 \ Call Echo(X0)    ! misunderstand ONLY ONE UM - ONLY USED IN CHGREORD NOT CHGUM
Call DXGet("APOUM",tmp$) ! as part of chgreorder
tmp$=Trim$(tmp$)
If tmp$="" let tmp$=PUnit$
U5$=UCase$(tmp$)+Blank$
U5$[5]=""
!ASK_UM: Print @0,21;"IS ORDER QTY A DIFFERENT UNIT OF MEASURE?(Y/N)  N";'CL ML';
!Input Len 16384 + 1;""U5$ \ Call String(1,U5$)
!If U5$ = "" Let U5$ = "N"
!If U5$ = "Y"
!  UNIT$[1,1] = "-"
!Else 
!  If U5$ <> "N" Goto ASK_UM
  UNIT$ = U5$ ! PUNIT$
!End If 
Gosub L_4190 ! Check UM
!Print 'K0'; \ X0 = 0 \ Call Echo(X0)
CNVTU[0] = UNIT \ CNVTU[1] = 0 \ CNVTU[2] = 1
CNVTA = X3 \ Gosub CONVERT
A1[3] = AMOUNT
If PFU1[10] = UNIT Let DA1[3] = X3 \ Goto L_4110
CNVTU[0] = 0 \ CNVTU[1] = PFU1[10] \ CNVTU[2] = 1
CNVTA = A1[3] \ Gosub CONVERT
DA1[3] = AMOUNT
L_4110: Return 
L_4120: Rem GET UNIT CODE
If UNIT$ = "CWT " Let UNIT = -1 \ Goto L_4210
If UNIT$ = "LB  " And PFU1[15] = -3 Let UNIT = -3 \ Goto L_4210
!If UNIT$ = "" Let UNIT$ = "-" \ Goto L_4190
Search #13,2,1;UNIT$,UNIT,E
If Not(E) Gosub L_4220 \ Unit$=PUnit$ \ Return  ! check, rtn=ng, rtn+1=ok
!Print @5,20;'RB BR';UNIT$;" INVALID ";'BD';" ENTER NEW UNIT OF MEASURE OR  -: ";'ED ER';
L_4170: !Input Len 16384 + 4;""UNIT$
L_4190: !SC = 30;SR = 10
!If UNIT$[1,1] = "-" Let CNVTU[2] = 3 \ Gosub convert \ Goto L_4170
Goto L_4120
L_4210: Return 
L_4220: Rem VAILD UNIT FOR PRODUCT ?
For X = 0 To 7
  If UNIT = PFU1[X] Return 1
Next X
!Print @5,20;'RB BR';UNIT$;" INVALID FOR THIS PRODUCT ";'BD';" ENTER NEW UNIT OF MEASURE  OR  -: ";'ED ER';
L_4280: !Input Len 16384 + 4;""UNIT$
!If UNIT$ = "-" Let CNVTU[2] = 3 \ Gosub convert \ Goto L_4280
ReturnStatus=0
Message$="INVALID UM FOR PRODUCT"
Return 
SHOMINSONLY: Rem "Bring up the mins screen for display Only  WEB - Action1 case "VENDMINS"
HOLD_REC = R2;SHOMINS = 1
Gosub L_4400 ! total
Gosub L_4475 ! gen data
! R2 = HOLD_REC \ Gosub L_6000 ! read genwrk
SHOMINS = 0
Return
L_4400: Rem TOTAL UP ALL LINES WEB - Action1 case "SHOEMERBUY" & case "DOTARGET" & case "VENDMINS"
! If Not(SHOMINS)
!  Print @0,21;'BB';"CALCULATING LINE BUY INFORMATION ... ";'EB';
!Else 
!  Print @0,Msc(34) - 3;'CE';"CALCULATING MINIMUM TOTALS"
!End If 
T2$ = " ",T2$;T_WEIGHT = 0;T_CUBE = 0;T_COST = 0;T_UNITS = 0;T_FREE = 0
M_QTY = 0;M_WGHT = 0;M_CUBE = 0;M_COST = 0;M_FREE = 0;M_PLT = 0;T_PLT = 0
T2$ = H4[1] Using "##" \ T2$[3] = H3[3] Using "######"
L_4415: Search #2,3,1;T2$,R2,E \ If E = 2 Return 
If E Gosub ERR_SEARCH
X2 = T2$[1,2] \ If X2 <> H4[1] Return 
X2 = T2$[3,8] \ If X2 <> H3[3] Return 
If T2$[13,13] = "@" Goto L_4415
Gosub CHECK_LINE_VALIDITY
If NS_BAD Goto L_4415
Mat Read #2,R2,56;A2;
X2 = T2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto L_4415
If Not(S9[9]) And A2[2] = 1 Goto L_4415
If S9[9] And A2[2] = 1 Goto CONTALLL
CONTALLL: Rem "
Gosub L_6000 ! read genwrk
Gosub L_8500 ! convert to po um
T_WEIGHT = T_WEIGHT + WEIGHT
If A3[2] Let M_WGHT = M_WGHT + WEIGHT
T_CUBE = T_CUBE + CUBE
If A3[2] Let M_CUBE = M_CUBE + CUBE
T_COST = T_COST + (DA1[3] * NET_COST)
If A3[2] Let M_COST = M_COST + (DA1[3] * NET_COST)
T_UNITS = T_UNITS + DA1[3] + FREE_QTY
If A3[2] Let M_QTY = M_QTY + DA1[3] + FREE_QTY
T_FREE = T_FREE + FREE_QTY
If A3[2] Let M_FREE = M_FREE + FREE_QTY
T_PLT = T_PLT + PALLET
If A3[2] Let M_PLT = M_PLT + PALLET
Goto L_4415

L_4475: Rem VEND MINS   WEB - Action1 case "SHOEMERBUY" & case "VENDMINS"
! Gosub L_12000 ! (done already!)
!If Not(SHOMINS)
!  Window Open @0,8; Size 77,11; Using " Vendor minimums "
!Else 
!  Window Open @0,7; Size 77,13; Using " Vendor minimums "
!End If 
!Print @0,0;'CS';
!Print @14,0;"DOLLARS";@28,0;"WEIGHT";@41,0;"CUBIC FT";@57,0;"UNITS";
If Not(SHOMINS) ! EMERGENCY BUY
	Clear List$[]
	List$[0]=BSDEL$,"REORDMINS",fdel$
	WebStr$="MINDOL",fdel$,"ORDCOST",fdel$,"DOLSHRT",fdel$,"DOLPCT",fdel$
	WebStr$=WebStr$,"MINWGT",fdel$,"ORDWGT",fdel$,"WGTSHRT",fdel$,"WGTPCT",fdel$
	WebStr$=WebStr$,"MINCUBE",fdel$,"ORDCUBE",fdel$,"CUBESHRT",fdel$,"CUBEPCT",fdel$
	WebStr$=WebStr$,"MINUNTS",fdel$,"ORDUNTS",fdel$,"FREE",fdel$,"UNTSSHRT",fdel$,"UNTSPCT",fdel$
	List$[1]=WebStr$
  !Print @1,2;"MINIMUMS";@1,3;"REORDER";@1,4;"SHORT";@1,5;"%";
  WebStr$=M1[0] Using "########.##",fdel$,T_COST Using "########.##",fdel$
  If M1[0] > T_COST Let WebStr$=WebStr$,(M1[0] - T_COST) Using "########.##",fdel$ Else Let WebStr$=WebStr$," ",fdel$
  If T_COST And M1[0] > T_COST 
	WebStr$=WebStr$,FNR((M1[0] - T_COST) / T_COST * 100) Using "#####.## %",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M1[1] Using "########.##",fdel$,T_WEIGHT Using "########.##",fdel$
  If M1[1] > T_WEIGHT 
	WebStr$=WebStr$,(M1[1] - T_WEIGHT) Using "########.##",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  If T_WEIGHT And M1[1] > T_WEIGHT 
	WebStr$=WebStr$,FNR((M1[1] - T_WEIGHT) / T_WEIGHT * 100) Using "#####.## %",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M1[2] Using "########.##",fdel$,T_CUBE Using "########.##",fdel$
  If M1[2] > T_CUBE 
	WebStr$=WebStr$,M1[2] - T_CUBE Using "########.##",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  If T_CUBE And M1[2] > T_CUBE 
	WebStr$=WebStr$,FNR((M1[2] - T_CUBE) / T_CUBE * 100) Using "#####.## %",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M1[3] Using "########.##",fdel$,T_UNITS Using "########.##",fdel$
  If T_FREE	
	WebStr$=WebStr$,T_FREE Using "#######",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  If M1[3] > T_UNITS 
	WebStr$=WebStr$,M1[3] - T_UNITS Using "########.##",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  If T_UNITS And M1[3] > T_UNITS 
	WebStr$=WebStr$,FNR((M1[3] - T_UNITS) / T_UNITS * 100) Using "#####.## %",fdel$
  Else
    WebStr$=WebStr$," ",fdel$
  Endif
  List$[2]=WebStr$
  List$[3]=esdel$
Else ! "Use Marked Qty
  Clear List$[]
	List$[0]=BSDEL$,"MARKMINS",fdel$
  !Print @1,2;"MINIMUMS";@1,3;"MARKED";@1,4;"SHORT";@1,5;"%";
  !Print @1,7;'BD';"REORDER";'ED';
  WebStr$="MINDOL",fdel$,"TMKDOL",FDEL$,"DOLSHRT",FDEL$,"DOLPCT",FDEL$
  WebStr$=WebStr$,"MINWGT",fdel$,"TMKWGT",fdel$,"WGTSHRT",fdel$,"WGTPCT",fdel$
  WebStr$=WebStr$,"MINCUBE",fdel$,"TMKCUBE",fdel$,"CUBESHRT",fdel$,"CUBEPCT",fdel$
  WebStr$=WebStr$,"MINUNTS",fdel$,"TMKUNTS",fdel$,"FREE",fdel$,"UNTSSHRT",fdel$,"UNTSPCT",fdel$
  WebStr$=WebStr$,"TRODOL",FDEL$,"TROWGT",FDEL$,"TROCUBE",FDEL$,"TROUNTS",FDEL$
  WebStr$=WebStr$,"TROFREE",fdel$,"PALMRK",fdel$,"PALREORD",fdel$
  List$[1]=WebStr$
  WebStr$=M1[0] Using "########.##",fdel$,M_COST Using "########.##",fdel$
  If M1[0] > M_COST 
	WebStr$=WebStr$,M1[0] - M_COST Using "########.##",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  If M_COST And M1[0] > M_COST 
	WebStr$=WebStr$,FNR((M1[0] - M_COST) / M_COST * 100) Using "#####.## %",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M1[1] Using "########.##",fdel$,M_WGHT Using "########.##",fdel$
  If M1[1] > M_WGHT 
	WebStr$=WebStr$,M1[1] - M_WGHT Using "########.##",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  If M_WGHT And M1[1] > M_WGHT 
	WebStr$=WebStr$,FNR((M1[1] - M_WGHT) / M_WGHT * 100) Using "#####.## %",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M1[2] Using "########.##",fdel$,M_CUBE Using "########.##",fdel$
  If M1[2] > M_CUBE 
	WebStr$=WebStr$,M1[2] - M_CUBE Using "########.##",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  If M_CUBE And M1[2] > M_CUBE 
	WebStr$=WebStr$,FNR((M1[2] - M_CUBE) / M_CUBE * 100) Using "#####.## %",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M1[3] Using "########.##",fdel$,M_QTY Using "########.##",fdel$
  If M_FREE 
	WebStr$=WebStr$,M_FREE Using "######",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  If M1[3] > M_QTY 
	WebStr$=WebStr$,M1[3] - M_QTY Using "########.##",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  If M_QTY And M1[3] > M_QTY 
	WebStr$=WebStr$,FNR((M1[3] - M_QTY) / M_QTY * 100) Using "#####.## %",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,T_COST Using "########.##",fdel$
  WebStr$=WebStr$,T_WEIGHT Using "########.##",fdel$
  WebStr$=WebStr$,T_CUBE Using "########.##",fdel$
  WebStr$=WebStr$,T_UNITS Using "########.##",fdel$
  If T_FREE 
	WebStr$=WebStr$,T_FREE Using "######",fdel$
  Else
	WebStr$=WebStr$," ",fdel$
  Endif
  WebStr$=WebStr$,M_PLT Using "#####.##",fdel$,T_PLT Using "#####.##",fdel$
  List$[2]=WebStr$
  List$[3]=esdel$
End If 
Return

L_4595: Rem UP ALL LINES BY A %  WEB - Action1 case "CALCEMERBUY"
TLines[0]=0;TLines[1]=0;TLines[2]=0 ! scan - adj - noadj
T2$ = " ",T2$;T_WEIGHT = 0;T_CUBE = 0;T_COST = 0;T_UNITS = 0;T_FREE = 0
T2$ = H4[1] Using "##" \ T2$[3] = H3[3] Using "######"
L_4615: Search #2,3,1;T2$,R2,E \ If E = 2 Goto EBUYDONE
If E Gosub ERR_SEARCH
X2 = T2$[1,2] \ If X2 <> H4[1] Goto EBUYDONE
X2 = T2$[3,8] \ If X2 <> H3[3] Goto EBUYDONE
If T2$[13,13] = "@" Goto L_4615
Gosub CHECK_LINE_VALIDITY
If NS_BAD Goto L_4615
Mat Read #2,R2,56;A2;
X2 = T2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto L_4615
If Not(S9[9]) And A2[2] = 1 Goto L_4615
If S9[9] And A2[2] = 1 Goto CONTUPALL
CONTUPALL: Rem "
Gosub L_6000 ! read genwrk
TLines[0]=TLines[0]+1 ! scan 1 
If A2[2] Goto L_4615
If MRKO And Not(A3[2]) Goto L_4615 ! Marked ONLY
TLines[1]=tlines[1]+1 ! Adj one
A1[3] = A1[3] + (A1[3] * (E_BUY / 100))
Gosub RNDTOPURCH
A2[1] = 6
Mat Write #2,R2,20;A1;
Mat Write #2,R2,56;A2;
Goto L_4615
EBUYDONE: Rem " Done Emergency Buy
If Tlines[1]=0 ! none adjusted
	returnstatus=0
	message$="You selected Marked Lines and no lines are marked"
	if TLines[0]=0 let message$="NO lines were found!"
Endif
! Gosub RESORTLNS
Return 
RNDTOPURCH: Rem ROUND UP TO QTY IN PURCHASING UM
For UNT = 1 To 7
  If PFU1[20] And PFU1[UNT] = PFU1[20] Goto L_4725
Next UNT
For UNT = 1 To 7
  If PFU1[UNT] = PFU1[10] Goto L_4725
Next UNT
FACTOR = 1 \ Goto L_4735
L_4725: If PFU1[UNT] < 0 Let FACTOR = 1 \ Goto L_4735
FACTOR = PFU2[UNT - 1] \ If FACTOR <= 0 Let FACTOR = 1
L_4735: If Fra(A1[3] / FACTOR) ! " any fraction round UP   >=.5
  A1[3] = Int(1 + (A1[3] / FACTOR)) * FACTOR
End If 
Return 
RNDTOPURCH2: Rem ROUND QTY IN PURCHASING UM
For UNT = 1 To 7
  If PFU1[20] And PFU1[UNT] = PFU1[20] Goto L4725
Next UNT
For UNT = 1 To 7
  If PFU1[UNT] = PFU1[10] Goto L4725
Next UNT
FACTOR = 1 \ Goto L4735
L4725: If PFU1[UNT] <= 0 Let FACTOR = 1 \ Goto L4735
FACTOR = PFU2[UNT - 1] \ If FACTOR <= 0 Let FACTOR = 1
L4735: Rem Check it out
If NEWA1 > FACTOR ! "past 1 unit
  If Fra(A1[3] / FACTOR) >= .5
    A1[3] = Int(1 + (A1[3] / FACTOR)) * FACTOR
  End If 
  If Fra(A1[3] / FACTOR) < .5
    A1[3] = ((Int(A1[3] / FACTOR)) * FACTOR)
  End If 
Else ! "If less than 1 unit Round up
  If Fra(A1[3] / FACTOR) ! " any fraction round UP   >=.5
    A1[3] = Int(1 + (A1[3] / FACTOR)) * FACTOR
  End If 
End If 
If MODE = 6 And A1[3] = ORIGA1 And A1[3] > FACTOR
  If Fra(NEWA1 / FACTOR) ! "round down if Same   <.5
    A1[3] = ((Int(NEWA1 / FACTOR)) * FACTOR)
  End If 
End If 
If A1[3] = 0 And ORIGA1 > 0 Let A1[3] = ORIGA1
Return 
L_5000: Rem PRINT LINE ! used in several places
Gosub L_8500 ! convert to po um
If Not(MARK) Let TOT_CUBE = TOT_CUBE + CUBE;TOT_WEIGHT = TOT_WEIGHT + WEIGHT;TOT_QTY = TOT_QTY + DA1[3] + FREE_QTY
If Not(MARK) Let TOT_COST = TOT_COST + DA1[3] * NET_COST
!Print @2,J1; \ If A3[2] Print 'BR'; Else Print 'ER';
WebStr$=Str$(R2),fdel$ ! record id #
WebStr$=WebStr$,PF_A$[140,151],fdel$,RTrim$(PF_A$[9,38]),fdel$,RTrim$(PF_A$[63,92]),fdel$ ! code desc1 desc2
WebStr$=WebStr$,RTrim$(PF_A$[93,112]),fdel$,Str$(A3[2]),fdel$,PUNIT$,fdel$ ! venditm mark u/m
WebStr$=WebStr$,LTrim$((DW3[0] - DW3[2] - DA1[4]) Using "-------------#.##"),fdel$ ! avail
WebStr$=WebStr$,LTrim$((DW3[1] + DA1[5]) Using "###########.##"),fdel$ ! on po
DAYSUPPLY[0] = 0;DAYSUPPLY[1] = 0
If DMNDDAY
  If A2[0] = 6 Let DAYSUPPLY[0] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2]) / DMNDDAY)
  If A2[0] = 6 Let DAYSUPPLY[1] = FNR(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2] + A1[3]) / DMNDDAY)
  If A2[0] <> 6 Let DAYSUPPLY[0] = FNU(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1]) / DMNDDAY)
  If A2[0] <> 6 Let DAYSUPPLY[1] = FNR(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1] + A1[3]) / DMNDDAY)
End If 
If DAYSUPPLY[0] < 0 Let DAYSUPPLY[0] = 0
If DAYSUPPLY[1] < 0 Let DAYSUPPLY[1] = 0
If DMNDDAY = 0 Let DAYSUPPLY[0] = -1;DAYSUPPLY[1] = -1
tmp$=""
If DAYSUPPLY[0] > 0 tmp$=LTrim$(DAYSUPPLY[0] Using "########")
If DAYSUPPLY[0] = 0 tmp$="-"
If DAYSUPPLY[1] = -1 tmp$="?"
WebStr$=WebStr$,tmp$,fdel$
tmp$=""
If DAYSUPPLY[1] > 0 tmp$=LTrim$(DAYSUPPLY[1] Using "########.##")
If DAYSUPPLY[1] = 0 tmp$="-"
If DAYSUPPLY[1] = -1 tmp$="?"
WebStr$=WebStr$,tmp$,fdel$
WebStr$=WebStr$,LTrim$(DA1[3] Using "#########.##"),fdel$
tmp$="N" \ If FREE_QTY let tmp$="Y"
WebStr$=WebStr$,tmp$,fdel$
! If MARK Let X2 = J1 Else Let X2 = 0
X2=0 ! just this lines total
!If DISP_VALUE <> 4 ! "show running totals
  WebStr$=WebStr$,LTrim$((DA1[3] + FREE_QTY) Using "#########.##"),fdel$
  WebStr$=WebStr$,LTrim$(WEIGHT Using "#########.##"),fdel$
  WebStr$=WebStr$,LTrim$(CUBE Using "#########.##"),fdel$
  WebStr$=WebStr$,LTrim$((DA1[3] * NET_COST) Using "###########.##"),fdel$
!Else ! "NO RUNNING TOTALS
!  Print Tab 62;"         "; Tab 72;"        ";
!End If 
!If Not(MARK)
!  TOT_QTY[J1] = TOT_QTY;TOT_WEIGHT[J1] = TOT_WEIGHT
!  TOT_CUBE[J1] = TOT_CUBE;TOT_COST[J1] = TOT_COST
!End If 
!Print Tab 79;'ER';
!Print @0,22;"      ";
!If MORLINES[0] Or MORLINES[1] Print @0,22;" MORE ";
!If MORLINES[0] Print @0,22;"v";
!If MORLINES[1] Print @5,22;"^";
IF RTRIM$(ACTION1$)="GETLINES"
	let tmp$=""
	If Not(A2[2])
		Gosub L_11500 ! DEALS?
	endif
	if rtrim$(tmp$)<>"" let tmp$="Y" else tmp$="N"
	WebStr$=WebStr$,tmp$,fdel$
ENDIF
List$[row]=WebStr$
row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
Return 
L_5100: Rem HEAD 1  WEB - action1 case "VENDDATA"
Clear List$[]
List$[0]=bsdel$,"VENDDATA",fdel$
WebStr$="WHSE",fdel$,"PONUM",fdel$,"VENDID",fdel$,"NAME",fdel$
WebStr$=WebStr$,"MINDOLS",fdel$,"MINLBS",fdel$
WebStr$=WebStr$,"MINCUBE",fdel$,"MINUNTS",fdel$
List$[1]=WebStr$
Row=2
WebStr$=Str$(H4[1]),fdel$
WebStr$=WebStr$,Str$(H0[2]),fdel$,Str$(H3[3]),fdel$,RTrim$(C$),fdel$

WebStr$=WebStr$,LTrim$(M1[0] Using "########.##"),fdel$
WebStr$=WebStr$,LTrim$(M1[1] Using "########.##"),fdel$
WebStr$=WebStr$,LTrim$(M1[2] Using "########.##"),fdel$
WebStr$=WebStr$,LTrim$(M1[3] Using "########.##"),fdel$
List$[row]=webStr$
row=row+1
List$[row]=esdel$
Return 
L_5200: Rem PROD DISPLAY  WEB - action1 case "PRODINFO"
! If Not(VUEP) Return  ! if here they want it
Gosub L_8500 ! convert to po UM
Clear List$[]
List$[0]=bsdel$,"PRODINFO",fdel$
WebStr$="VENDITM",fdel$,"DESC1",fdel$,"DESC2",fdel$
WebStr$=WebStr$,"LEADTIME",fdel$,"POCOST",fdel$,"NETCOST",fdel$
WebStr$=WebStr$,"DMND",fdel$,"UNTWGT",fdel$,"WTFACT",fdel$
WebStr$=WebStr$,"UNTCUBE",fdel$,"CBFACT",fdel$
WebStr$=WebStr$,"FREEUNT",fdel$,"FREEDOL",fdel$,"FREEPCT",fdel$
WebStr$=WebStr$,"PACK",fdel$,"DEALS",fdel$,"LINEMAX",fdel$,"ORDMIN",fdel$
WebStr$=WebStr$,"CALC",fdel$
List$[1]=WebStr$
WebStr$=RTrim$(PF_A$[93,112]),fdel$,RTrim$(PF_A$[9,38]),fdel$,RTrim$(PF_A$[63,92]),fdel$
WebStr$=WebStr$,LTrim$(W2[0] Using "#########.##"),fdel$
WebStr$=WebStr$,LTrim$(DSP_PO_COST Using "#########.##"),fdel$,LTrim$(NET_COST Using "######.##"),fdel$
WebStr$=WebStr$,LTrim$(DMNDDAY[1] Using "########.##"),fdel$
Gosub L_5700 ! weight/cube
CNVTU[0] = 0 \ CNVTU[1] = PFU1[10] \ CNVTU[2] = 1
For X = 0 To 3
  CNVTA = A[X]
  Gosub CONVERT
  DA[X] = AMOUNT
Next X
WebStr$=WebStr$,FREE_QTY Using "########.##",fdel$,DOLLOR Using "#########.##",fdel$
WebStr$=WebStr$,PERCENT Using "###.##",fdel$,RTrim$(PR_A2$[13,27]),fdel$
!Print @0,6;'CL';
!If A2[2] Print @10,6;'BR';"NON - STOCK ITEM ";'ER'; Else Print @10,6;'CL';
!If Not(A2[2]) Print @0,6;'CL';
If Not(A2[2])
  tmp$=""
  Gosub L_11500 ! DEALS?
  WebStr$=WebStr$,tmp$,fdel$
  !If A2[0] = 6 Print @1,6;"MAX QTY:"; Else Print @1,6;"LINE PT:";
  !Print 'ED';
  WebStr$=WebStr$,DA1[1] Using "########.##",fdel$
  !Print 'BD';
  !If A2[0] = 6 Print @20,6;"MIN QTY:"; Else Print @20,6;"ORDR PT:";
  !Print 'ED';
  WebStr$=WebStr$,DA1[2] Using "########.##",fdel$
Else ! NONSTK NONE#
  WebStr$=WebStr$," ",fdel$," ",fdel$," ",fdel$ ! deals,max,min
End If 
If A2[0] WebStr$=WebStr$,CALCSRC$[(A2[0] * 3 - 2),(A2[0] * 3)],fdel$ Else WebStr$=WebStr$," ",fdel$
List$[2]=WebStr$
List$[3]=esdel$
Return 

L_5600: Rem GET UNIT CODE used by L_5700
X$ = "ERR"
If X2 = -1 Let X$ = "CWT "
If X2 = -3 Let X$ = "LB  "
If X2 > 0 Read #13,X2,10;X$;
WebStr$=WebStr$,X$[1,4],fdel$ ! has um
Return 
L_5700: Rem WEIGHT ! used in L_5200
WebStr$=WebStr$,A[6] Using "####.##",fdel$
If A[5] = 1 Let X2 = PFU1[0] \ Gosub L_5600 \ Goto L_5718
For X0 = 0 To 6
  If A[5] <> PFU2[X0] Goto L_5714
  X2 = PFU1[X0 + 1]
  Gosub L_5600 \ Goto L_5720
L_5714: Next X0
WebStr$=WebStr$,A[5] Using "######",fdel$ ! no um
L_5718: Rem
L_5720: WebStr$=WebStr$,PF_B[23] Using "####.##",fdel$
If PF_A1[3] = 1 Let X2 = PFU1[0] \ Gosub L_5600 \ Goto L_5790
For X0 = 0 To 6
  If PF_A1[3] <> PFU2[X0] Goto L_5726
  X2 = PFU1[X0 + 1]
  Gosub L_5600 \ Goto L_5790
L_5726: Next X0
WebStr$=WebStr$,PF_A1[3] Using "######",fdel$ ! no um
L_5790: Return 
SHO_HELP: Rem " WEB - Action1 case "SCRNHELP"
Clear List$[]
List$[0]=bsdel$,"SCREENHELP",fdel$
List$[1]="TEXT",fdel$
List$[2]="AVAIL = On hand less On Order less On Backorder",fdel$
List$[3]="ON PO = On PO plus On Transfer in",fdel$
List$[4]="DAYS>Min = Qty Avail+On PO over Line Pt/Minimum divided by DDay",fdel$
List$[5]="DAYS+ORD = Qty in above + ReOrd Qty divided by Demand per Day",fdel$
List$[6]="A  ?  in DAYS means no Demand is available (demand=0)",fdel$
List$[7]="A  -  in DAYS means Quantity is Less than or equal to Min/LinePt",fdel$
List$[8]="Demand per day = Monthly demand divided by"+Str$(BDAYS[0])+" (The number",fdel$
List$[9]=" aka DDay or DMD/DAY           of business days this A/R Month)",fdel$
List$[10]="REORD QTY = the quantity that will be Ordered if line is marked",fdel$
List$[11]=esdel$
Return 
L_6000: Rem READ GENWRK
Mat Read #2,R2,0;A$;
Mat Read #2,R2,20;A1;
Mat Read #2,R2,56;A2;
Mat Read #2,R2,62;A3;
TIEHI = 0
If Not(A2[2])
  Mat Read #3,A1[0],0;PF_A$;
  Mat Read #3,A1[0],156;PF_B;
  Mat Read #3,A1[0],256;A;
  Mat Read #3,A1[0],460;PF_A1;
  Mat Read #3,A1[0],512;PFU1;
  Mat Read #3,A1[0],554;PFU2;
  Mat Read #3,A1[0],944;PR_A2$;
  Write #20,Spc(6),6;PF_A$[140,151];
  Gosub L_6400 ! prodwhse
End If 
If A2[2]
  Mat Read #16,A1[0],8;OLL3;
  Mat Read #16,A1[0],32;OLL5;
  Mat Read #16,A1[0],140;OLL2$;
  Mat Read #16,A1[0],250;OLUN;
  Mat Read #16,A1[0],80;OLL6$;
  Mat Read #16,A1[0],56;OLL6;
  Mat Read #16,A1[0],168;OLL7;
  Mat Read #16,A1[0],370;OLS3$;
  Mat Read #16,A1[0],446;EUN;
  Mat Read #16,A1[0],452;UNF;
  Read #16,A1[0],514;CTWT;
  PF_B[11] = OLL3[3];W2[0] = 0;PF_B[0] = 0
  PF_A$ = " ",PF_A$ \ Write #20,Spc(6),6;PF_A$[140,151];
  PF_A$[140,151] = OLL2$[1,12];W3[16] = 0
  PF_A$[93,112] = OLS3$[1,20]
  PF_A$[9,38] = OLL6$[1,30]
  PF_B[10] = OLL5[1];DMNDDAY = 0
  If OLL7[7] Let PF_B[10] = OLL7[7]
  PF_A$[63,92] = OLL6$[31,60]
  For X = 0 To 20 \ PFU1[X] = OLUN[0] \ Next X
  For X = 0 To 6 \ PFU2[X] = 1 \ Next X
  For X = 0 To 6 \ W3[X] = 0 \ Next X
  Gosub L_30000 ! set up ns for convert
End If 
Gosub L_11000 ! get deals
If A[5] Let WEIGHT = (A1[3] + PL4[0]) * A[6] / A[5] Else Let WEIGHT = 0
If PF_A1[3] Let CUBE = (A1[3] + PL4[1]) * PF_B[23] / PF_A1[3] Else Let CUBE = 0
If W3[16] And P9$[32,32] = "Y" Let PO_COST = W3[16] Else Let PO_COST = PF_B[10]
If TIEHI Let PALLET = FNR((A1[3] + PL4[0]) / TIEHI) Else Let PALLET = 0
If W2[0] = 0 Let W2[0] = PF_B[0]
If W2[0] Let W2[0] = W2[0] * BDAYS[0]
Gosub L_8500 \ Gosub L_11000 ! convert to po UM & reget deails
Return 
L_6350: Rem READ HEADER
Mat Read #8,S9[0];H0;
Mat Read #8,S9[0],222;H3;
Mat Read #8,S9[0],242;H4;
PODDATE = H0[4]  !! TASK 58321  SETTING DUP PO DUE DATE HERE. CAN'T FIND WHERE REAL WRITE IS AFTER THE HEADER EDIT
MAT WRITE #8,S9[0],606;PODDATE;
Return 
L_6400: Rem SPROD WHS
K6$[1,12] = PF_A$[140,151] \ K6$[13,14] = H4[1] Using "##"
Search #10,2,1;K6$,R6,E \ If E > 1 Gosub ERR_SEARCH
PW_W1$ = " ",PW_W1$
For X0 = 0 To 14 \ W3[X0] = 0 \ Next X0
For X0 = 0 To 9 \ W2[X0] = 0 \ Next X0
For X0 = 0 To 3 \ W0[X0] = 0 \ Next X0
If Not(E)
  Mat Read #10,R6,0;PW_W1$;
  Mat Read #10,R6,38;W2;
  Mat Read #10,R6,78;W3;
  Mat Read #10,R6,800;WHMISC;
  Mat Read #10,R6,420;W0;
End If 
DMNDDAY = 0
If W3[9] Let DMNDDAY = W3[9] / BDAYS[0]
If PW_W1$[13,17] <> "     " And PW_W1$[13,13] <> "" Let PF_A$[93,112] = PW_W1$[13,32]
TIEHI = WHMISC[4] * WHMISC[5]
CNVTU[0] = PFU1[8];CNVTU[1] = 0;CNVTU[2] = 1;CNVTA = TIEHI
Gosub CONVERT \ TIEHI = AMOUNT
Return 
L_6500: Rem DISPLAY USAGE SCREEN   WEB - Action1 case "USAGE"
!Print @0,23;'CL';
VENDOR = A$[3,8]
ORDER = -888
MAIN = H4[1]
PROD$[1,12] = PF_A$[140,151]
! Swap 2,"PO361U" ! changed to mxprodusage?
specs[1]=H4[1]
specs[2]=Main
specs[3]=Vendor
specs[10]=IntCo ! company #
For X=0 to 20 \ Chan[x]=0 \ Next X
Chan[0]=1;chan[1]=8;chan[2]=9;chan[3]=4;chan[4]=3
Chan[5]=10;chan[7]=13;chan[8]=16;chan[12]=19;chan[17]=5
Chan[19]=12;chan[20]=15
Call mxprodusage(Chan[],specs[],prod$,msg$,errtype,rstr$,maxcnt,cost_lev[])
Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
BLDSORTFLE: Rem "
A$ = Str$(Spc(6))
!Read #1,88,912;F1$;
!If F1$ = "" Let F1$ = "6/SORTWORK*"
Let F1$ = "files/6/SORTWORK*"
LTRM: If F1$[Len(F1$)] = " " Let F1$ = F1$[1,Len(F1$) - 1] \ Goto LTRM
P2 = 0 \ Let F2$ = F1$ To "*" : P2
If Not(P2)
  F1$ = "files/6/SORTWORK*";P2 = 17
End If 
!Print @0,23;"PREPARING SORT FILE, PLEASE WAIT . . . ";'CE';
KSIZE = 20
F1$[P2] = A$
Call FindF(F1$,H1)
If H1 Kill F1$
F2$ = "[1:256] ",F1$
Build #7,F2$
Search #7,0,1;K$,KSIZE,E \ If E Gosub ERR_SEARCH
L1 = 1000 \ Search #7,0,0;K$,L1,E \ If E Gosub ERR_SEARCH
Return 
RESORTLNS: Rem "Clear & Resort Lines by Days+Ord
!Print @0,23;'CL';"SORTING BY DAYS, PLEASE WAIT. ."; \ Signal 3,1
K$ = " ",K$
CLRSORT: Rem
Search #CH_SORT,3,1;K$,REC,E \ If E = 2 Goto CLRSDONE
If E Gosub ERR_SEARCH
Search #CH_SORT,5,1;K$,REC,E \ If E Gosub ERR_SEARCH
Goto CLRSORT
CLRSDONE: Rem "Now thru lines
K2$ = H4[1] Using "##";K2$[3] = H3[3] Using "######";K$ = K2$
POGSLOOP: Rem "
Search #2,3,1;K2$,R2,E \ If E = 2 Goto SORTDDONE
If E Gosub ERR_SEARCH
If K2$[13,13] = "@" Goto POGSLOOP
If K2$[1,8] <> K$[1,8] Goto SORTDDONE
Mat Read #2,R2,56;A2;
X2 = K2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto POGSLOOP
Gosub CHECK_LINE_VALIDITY
If NS_BAD Goto POGSLOOP
If Not(S9[9]) And A2[2] = 1 Goto POGSLOOP
If S9[9] And A2[2] = 1 Goto CONTSORTD
CONTSORTD: Rem "
Gosub L_6000 ! read genwrk
DAYSUPPLY[0] = 0;DAYSUPPLY[1] = 0
If DMNDDAY
  If A2[0] = 6 Let DAYSUPPLY[1] = FNR(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[2] + A1[3]) / DMNDDAY)
  If A2[0] <> 6 Let DAYSUPPLY[1] = FNR(((W3[0] - W3[2] - A1[4] + W3[1] + A1[5]) - A1[1] + A1[3]) / DMNDDAY)
Else 
  DAYSUPPLY[1] = 999
End If 
If DAYSUPPLY[1] < 0 Let DAYSUPPLY[1] = 0
If DAYSUPPLY[1] > 9999 Let DAYSUPPLY[1] = 9999
K$ = K2$
K$[9,15] = DAYSUPPLY[1] Using "####.##"
K$[16] = K2$[13]
Search #CH_SORT,4,1;K$,R2,E \ If E > 1 Gosub ERR_SEARCH
Goto POGSLOOP
SORTDDONE: Rem "done sorting
! Print @0,23;'CL';
rtrgloop=rtrgloop+1
!if rtrgloop>=500
!	returnstatus=3
!	message$="Resort Looped "+Str$(rtrgloop)+" times. Aborting"
!	goto outdone
!endif
Return 
L_8000: Rem EXIT  WEB - action1 case "CRTPOLINES"
Gosub L_8200 \ Goto L_8065 ! check if lines marked
!X0 = 1 \ Call Echo(X0)
!Print 'K1';
L_8020: ! Print @0,23;" DO YOU WANT TO CREATE PURCHASE ORDER LINES?  (Y/N) ";'CL';
! IF HERE - WE ARE CREATING PO LINES!!
! Input Len 16384 + 1;""S$ \ Call String(1,S$)
!If S$ = "N" Goto L_8070
!If S$ <> "Y" Print 'RB'; \ Goto L_8020
!Print @0,23;'CL'; \ Signal 3,0
Chain "PO367C.dl4"
Stop 
L_8065: ! Print @0,22;'CE';" PURCHASE ORDER LINES NOT CREATED -- NONE OF THE LINES WERE MARKED";'CL RB';
ReturnStatus=0
Message$="NO LINES WERE MARKED"
if mzqty>0 let Message$="ALL MARKED ARE ZERO REORDERS - CANNOT PROCESS"
Return
L_8070: Rem EXIT   WEB - Action1 case "CANCLINES"
! X0 = 1 \ Call Echo(X0)
! Print @0,23;'K1';'CL'; \ Signal 3,0
QDELPOHEAD: Rem "Delete Header on no lines?
! Print @0,23;'CL';"DELETE PURCHASE ORDER ";Str$(H0[2]);"? (Y/N  R: restart lines)   ";
!Input Len 16384 + 1;""S$ \ Call String(1,S$)
!If S$ = "R" Goto DADJDONE
!If S$ <> "Y" And S$ <> "N" Goto QDELPOHEAD
S$="Y" ! if here, we're DELETING IT
If S$ = "Y"
  Gosub CLEAN_UP
  ! Swap 1,"PO361E"
  !spec[0] = purchase order record #
!spec[1] = vendor record # 
!Spec[10] = Company #

!chan[0] = cntrl file	*
!chan[1] = purchase order header  #8 *	
!chan[2] = purchase order lines   #9*
!chan[3] = order header  *
!chan[4] = product file #3 *
!chan[5] = product warehouse #10 *
!chan[6] = nonstock #14 *
!chan[7] = unit of measure file #67
!chan[8] = order lines  * 
!chan[9] = po messages *
!chan[10] = order message #70
!chan[11] = po gen work #72
!chan[12] = deals #19
!chan[13] = customer
!chan[14] = order total
!chan[15] = altvend
!chan[16] = a80vm  - vendor file #5 
  
  Spec[0]=S9[0];Spec[1]=H0[1];Spec[10]=IntCo
  Chan[0]=1;Chan[1]=8;Chan[2]=9;Chan[3]=4;Chan[4]=3
  Chan[5]=10;Chan[6]=14;Chan[7]=13;Chan[8]=16;Chan[9]=11
  Chan[10]=0;Chan[11]=2;Chan[12]=19;Chan[13]=6
  Chan[14]=0;chan[15]=0;Chan[16]=5
  Call "podelete.dl4",Chan[],spec[],msg$,errtype,rstr$
End If 
Return
RSETALL: ! reset  WEB - action1 case "RESTRTPROG"
! If S$ = "N" !  set status to 1
  K$ = " ",K$
  K$[1,2] = H0[0] Using "##"
  K$[3,8] = H0[2] Using "######";K$[9] = ""
  Search #8,5,1;K$,S9[0],E
  Mat Read #8,S9[0],310;PH
  Mat Read #8,S9[0],330;PO1
  If Not(PH[4]) Let PH[4] = 1
  If ph[4]>4 let ph[4]=1
  H0[0] = PH[4]
  K$[1,2] = H0[0] Using "##"
  K$[3,8] = H0[2] Using "######";K$[9] = ""
  Search #8,4,1;K$,S9[0],E \ If E Gosub ERR_SEARCH
  PH[4] = 0;PO1[8] = 0
  Mat Write #8,S9[0];H0
  Mat Write #8,S9[0],310;PH
  Mat Write #8,S9[0],330;PO1;
! End If 
Return
CLEAN_UP: Rem ============================================
K2$ = " ",K2$;K2$[1,8] = A$[1,8]
For X2 = S9[7] To S9[8]
  K2$[9,12] = X2 Using "####";K2$[13] = "@"
  Search #2,2,1;K2$,R2,E \ If E > 1 Gosub ERR_SEARCH
  If Not(E) Gosub DEL_POGENWRK
Next X2
Return 
DEL_POGENWRK: Search #2,5,1;K2$,R9,E \ If E Gosub ERR_SEARCH
If R2 <> R9 Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;K2$,R2,E \ If E Gosub ERR_SEARCH
Return 
L_8200: Rem ======= check for at least 1 marked line
MZQty=0
K2$ = " ",K2$;K2$[1,2] = H4[1] Using "##";K2$[3] = H3[3] Using "######"
L_8220: Search #2,3,1;K2$,R2,E \ If E = 2 Goto L_8290
If E Gosub ERR_SEARCH
X0 = K2$[1,2] \ If X0 <> H4[1] Goto L_8290
X2 = K2$[3,8] \ If X2 <> H3[3] Goto L_8290
If K2$[13,13] = "@" Goto L_8220
Mat Read #2,R2,20;A1;
If A1[3] = 0 ! no reorder
	if a3[2] let mzqty=mzqty+1 ! marked zero
	Goto L_8220
Endif
Mat Read #2,R2,56;A2;
X2 = K2$[9,12] \ If X2 < S9[7] Or X2 > S9[8] Goto L_8220
If Not(S9[9]) And A2[2] = 1 Goto L_8220
If S9[9] And A2[2] = 1 Goto CONTCHKG
CONTCHKG: Rem "
Mat Read #2,R2,62;A3;
If A3[2] Return +1
Goto L_8220
L_8290: Return 
L_8500: Rem CONVERT everything to Purchasing U/M
CNVTU[0] = 0
CNVTU[1] = PFU1[10]
CNVTU[2] = 1
CNVTA = DMNDDAY \ Gosub convert \ DMNDDAY[1] = AMOUNT
For X = 0 To 6
  If X = 3 Or X = 4 Goto L_8590
  CNVTA = W3[X]
  Gosub convert
  DW3[X] = AMOUNT
L_8590: Next X
For X = 1 To 5
  CNVTA = A1[X]
  Gosub convert
  DA1[X] = AMOUNT
Next X
CNVTU[0] = 0
CNVTU[1] = PFU1[10]
CNVTU[2] = 2;CNVTA = PO_COST
Gosub convert
DSP_PO_COST = AMOUNT
NET_COST = DSP_PO_COST - (DSP_PO_COST * (PERCENT / 100)) - DOLLOR
If PFU1[10] > 0 Mat Read #13,PFU1[10],10;PUNIT$;
If PFU1[10] = -1 Let PUNIT$ = " CWT"
If PFU1[10] = -3 Let PUNIT$ = "LB  "
Return 
L_8690: Rem UNIT CONVERSION RETURNS AMOUNT
Gosub convert
Return 
OUTEND: Rem "? needed for rtn.error
End 
L_10000: Rem ===== Totals  request
Return ! WEB HANDLES THIS
!Window Open @5,2; Size 35,10; Using " CHANGE RUNNING TOTAL "
!Print 'K1'; \ X0 = 1 \ Call Echo(X0)
L_10020: !Print 'CS';@0,0;
!Print Tab 2;"CHANGE THE LAST COLUMN TO SHOW"
!Print Tab 2;"THE RUNNING TOTAL AS:"
!Print Tab 4;"0> TOTAL QTY "
!Print Tab 4;"1> CUBIC FEET "
!Print Tab 4;"2> COST VALUE "
!Print Tab 4;"3> WEIGHT "
!Print Tab 4;"4> NO TOTALS "
!Print 
!Print Tab 2;"Enter Selection: ";'CL';
!Input Len 16384 + 1;""I$
DISP_VALUE = I$
If DISP_VALUE = 0 And I$[1,1] <> "0" Goto L_10020
If DISP_VALUE < 0 Or DISP_VALUE > 4 Goto L_10020
!Print 'K0'; \ X0 = 0 \ Call Echo(X0)
!Window Close 
Return 
L_11000: Rem LOOK FOR DEALS - done when reading pogenwrk/prod
DOLLOR = 0;PERCENT = 0;FREE_QTY = 0;PL4[1] = 0;PL4[0] = 0
CNVTA = A1[3];CNVTU[0] = PFU1[10];CNVTU[1] = 0;CNVTU[2] = 1
AMOUNT = A1[3]
V9 = A$[3,8]
K12$ = " ",K12$
K12$[1,6] = V9 Using "######"
K12$[7,18] = PF_A$[140,151]
K12$[19,27] = 999999999 - (AMOUNT + 1) Using "#########"
L_11080: Search #19,3,1;K12$,R12,E
If E Goto L_11300
X2 = K12$[1,6] \ If X2 <> V9 Goto L_11300
If K12$[7,18] <> PF_A$[140,151] Goto L_11300
Mat Read #19,R12,0;DL2;
Mat Read #19,R12,20;DL1;
Mat Read #19,R12,34;DL3;
X2 = DL2[1] \ Gosub L_7820 \ X2 = 0
JDATE[1] = X2
X2 = DL2[4] \ Gosub L_7820 \ X2 = 0
JDATE[2] = X2
If JDATE[0] < JDATE[1] Or (DL2[4] And JDATE[0] > JDATE[2]) Goto L_11080
If DL1[1] = 1 Let PERCENT = DL3[0]
If DL1[1] = 2
  CNVTA = DL3[0];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 2
  Gosub convert
  DOLLOR = AMOUNT
End If 
If DL1[1] = 3
  CNVTA = DL3[2];CNVTU[0] = 0;CNVTU[1] = DL1[4];CNVTU[2] = 1
  Gosub convert
  WITH_QTY = AMOUNT
  Rem do the double convert below to match po366
  CNVTA = A1[3];CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
  Gosub convert
  CNVTA = AMOUNT;CNVTU[0] = PFU1[10];CNVTU[1] = DL1[4];CNVTU[2] = 1
  Gosub convert
  FREE_QTY = Int(AMOUNT / WITH_QTY) * DL3[0]
  CNVTA = FREE_QTY;CNVTU[0] = 0;CNVTU[1] = PFU1[10];CNVTU[2] = 1
  Gosub convert
  FREE_QTY = AMOUNT
  CNVTA = FREE_QTY;CNVTU[0] = PFU1[10];CNVTU[1] = 0
  Gosub convert
  PL4[1] = AMOUNT
End If 
L_11300: Return 
L_11500: Rem CHECK FOR VENDOR/PROD - used in L_5200
VENDOR = A$[3,8];PROD$[1,12] = PF_A$[140,151]
!Print @66,1;'CL';
K12$ = " ",K12$
K12$[1,6] = VENDOR Using "######"
K12$[7,18] = PROD$[1,12]
Search #19,3,1;K12$,R12,E
If E Return 
X12 = K12$[1,6] \ If X12 <> VENDOR Return 
If K12$[7,6 + Len(PROD$)] <> PROD$[1,12] Return 
tmp$="DEALS ON FILE"
Return 
L_11650: Rem deals DISPLAY  WEB - action1 case "GETDEALS"
! Print 'K1';
VENDOR = A$[3,8];PROD$[1,12] = PF_A$[140,151]
Z9[1] = -19
! X0 = 1 \ Call Echo(X0)
!Swap 1,"MXDEAL"
!Print 'K0'; \ X0 = 0 \ Call Echo(X0)
! chan [0] = ctlc
! chan [1]= deal
! chan[2] = unit of measure
! chan[3] = product code

! specs [0] = vendor code
! specs [1] = product record number
! specs [10] = company #
chan[0]=1;chan[1]=19;chan[2]=13;chan[3]=3
specs[0]=vendor;specs[1]=A1[0];specs[10]=IntCo
Call "mxdeal.dl4",Chan[],specs[],prod$,msg$,errtype,list$[],maxcnt
! List$ loaded
Return 
L_12000: Rem CHK MIN ORDER - Done in begin of program
Read #5,H0[1];C$; ! read vendor name
M1[0] = 0;M1[1] = 0;M1[2] = 0;M1[3] = 0
VEND$ = H3[3] Using "######"
Search #15,2,1;VEND$,VR,E
If E Return 
Mat Read #15,VR,206;M1;
If P61$[63,63] = "Y" ! "Vendor Whse file
  X0 = 0
  Call "POVWMIN.dl4",H3[3],H4[1],M1[],J$,X0,e$,rstr$,intCO
End If 
Return 
CHECK_LINE_VALIDITY: Rem this only checks nonstock lines
NS_BAD = 0
Mat Read #2,R2,0;A$
Mat Read #2,R2,20;A1
Mat Read #2,R2,56;A2;
If A2[2]
  Mat Read #16,A1[0],0;OLL2;
  Mat Read #16,A1[0],8;OLL3;
  Mat Read #16,A1[0],140;OLL2$;
  K16$ = " ",K16$
  K16$ = OLL2[1] Using "######"
  K16$[7] = OLL3[2] Using "###"
  Search #16,2,1;K16$,REC16,E
  If E > 2 Gosub ERR_SEARCH
  If E Or REC16 <> A1[0] Or OLL2$[1,12] <> A$[9,20]
    NS_BAD = 1
  End If 
End If 
Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT
Gosub CONVERT
Return 
L_30000: Rem ===== set n/s units for conversions
A[6] = OLL6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
PF_B[23] = OLL6[2];PF_A1[3] = UNF[4] \ If Not(PF_A1[3]) Let PF_A1[3] = 1;UNF[4] = 1
PFU1[0] = EUN[0];PFU1[1] = OLUN[0]
PFU1[2] = OLUN[1];PFU1[3] = OLUN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = OLUN[0];PFU1[9] = OLUN[0];PFU1[10] = EUN[1]
PFU1[11] = OLUN[2];PFU1[12] = OLUN[1];PFU1[13] = OLUN[0]
PFU1[16] = EUN[0];PFU1[17] = EUN[0];PFU1[18] = OLUN[0]
PFU1[19] = OLUN[0];PFU1[15] = CTWT
PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
Return 
Rem {begin src/inc/rtn.converti.i}
CONVERT: Rem "convert quantities, costs & prices
Mat Read #1,115,40;Q0;
! Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
! Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
If CNVTU[2] = 3 goto Convend ! Gosub DISPVALIDUNITS \ Goto CONVEND
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] ! "qty units same
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[0] = -2 Or CNVTU[1] = -2 ! "lot price
  AMOUNT = CNVTA
  Goto CONVEND
End If 
If CNVTU[2] ! "all but valid conversion test
  If Not(CNVTA) ! "nothing there
    AMOUNT = 0
    Goto CONVEND
  End If 
End If 
Gosub DOCONVERT
If CNVTU[2] <> 0 And CNVTU[2] <> 3 ! "conversion types
  If FLAG Let E = FLAG \ Gosub ERR_SEARCH
End If 
CONVEND: Rem "go back
Return 
DOCONVERT: Rem "go for it
CONVFLAG = 0;SR = 8;SC = 12
If CNVTU[2] = 5 ! "no rounding of quantity
  CONVFLAG = 1
  CNVTU[2] = 1
End If 
On CNVTU[2] + 1 Goto CHECKVALID1,DOCONVERT1,DOCONVERT1
E = 0 \ Gosub ERR_SEARCH
CHECKVALID1: Rem "see if valid conversion
For X1[1] = 0 To 1
  If CNVTU[X1[1]] > 0
    For X1[2] = 0 To 7
      If CNVTU[X1[1]] = PFU1[X1[2]] Goto VALID
    Next X1[2]
    FLAG = 1 \ Return 
  End If 
VALID: Rem "o.k.
Next X1[1]
FLAG = 0
Return 
DOCONVERT1: Rem "convert cost/price/quantity
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] <> 0 ! "not base
    If CNVTU[X1[1]] > 0 ! "not cwt
      For CUNIT = 0 To 7
        If PFU1[CUNIT] = CNVTU[X1[1]] Goto CONVVALID
      Next CUNIT
      FLAG = 0 \ Return 
CONVVALID: Rem "continue on
      If Not(CUNIT) Goto LOOPBACK
    End If 
    If CNVTU[2] = 2 Let CMODE = - CMODE
    If CNVTU[X1[1]] = -1 ! "cwt calculation
      If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
      If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
    Else 
      If CNVTU[X1[1]] = -3 ! "catch weight
        If A[5] And CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
        If A[6] And A[5] And CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
      Else 
        If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
        If PFU2[CUNIT - 1] And CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
      End If 
    End If 
  End If 
LOOPBACK: Rem "get next x1[1]
Next X1[1]
If CNVTU[2] = 1 And Not(CONVFLAG) ! "convert quantity
  If CNVTU[1] And CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
  If Fra(AMOUNT) And (Not(CNVTU[1]) Or CNVTU[1] = PFU1[0]) Let AMOUNT = FNU(AMOUNT)
End If 
If CNVTU[2] = 2 And CNVTU[1] ! "cost/price (not base) to round
  If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
  If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
  If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
End If 
FLAG = 0
Return 
DISPVALIDUNITS: Rem "u/m list
Return
!Window Open @SC,SR; Size 32,11; Using " VALID UNITS "
X1[1] = 1
For X1 = 0 To 7
  RECS[X1[1]] = 0
  If PFU1[X1] > 0 ! "have a unit
    Read #CH_CCODES,PFU1[X1];CCODE$;
    !Print Using "#. ";X1[1];CCODE$[11,14];" ";CCODE$[1,10];
    !If X1 Print Using "##########";PFU2[X1 - 1] Else Print 'BR BD';"     BASE ";'ER ED'
    RECS[X1[1]] = PFU1[X1];X1[1] = X1[1] + 1
  End If 
Next X1
!Print Using "#";@0,9;"SELECT 1-";X1[1] - 1;" : ";'CL';
!Input Len 16386;""J4$
If J4$ <> ""
  X1 = J4$
  If X1 > 0 And X1 < X1[1]
    Read #CH_CCODES,RECS[X1];CCODE$;
    J4$ = CCODE$[11],"\15\"
  Else 
    J4$ = "";X1 = 0
  End If 
End If 
!Window Close 
If J4$ <> "" Call InpBuf(J4$)
FLAG = 0
Return 
Rem {end rtn.converti.i}
Rem {begin rtn.error.s}
ERR_TRAP: Rem
If Spc(8) = 123
  Escdis 
  Escclr 
  Return -1
End If 
Goto ERR_MAIN
ERR_SEARCH: Rem
ENUM = E + 1000;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
Call programdump("tmp/po367bse!","")
returnstatus=0
message$=msg$
goto OutDone ! alt - send user info
Goto ERR_MAIN
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
End 
Rem {end rtn.error.s}
