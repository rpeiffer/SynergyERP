! >>> Program 697
!
! description Physical Inventory Accept 
! loadsave -w -n 100,10 -o prog/dxport/697.dl4 src/697.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"

Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  9, 2009  12:23:47
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx/mx697.src (univ2) [txc] {16855}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$,OpenMySQLMirror
Include "src/inc/sql_prod.inc"
Include "src/inc/fileinvtrans.inc"
External Lib "invttrans.dl4"
Declare External Sub Maketrans
Rem MX697     -  PHYSICAL INVENTORY UPDATE OF QUANTITIES
Rem
Rem REV. 1.2 - 02/18/85 -     - REV. 3/85 FOR MULTI-WHSE
try
com 1%,PHY_INV

!If Err 0 Gosub ERR_ESCAPE
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim rstr$[5000]
dim 1%,IntCo,eflg,returnstatus 
dim 3%,SPREC,rec_uac
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],Message$[600]
Dim 1%,PFU1[20],X3,FIRST,WHSE,RASL[5],MKADJUSTMENT
Dim K1$[60],P1$[26],P2$[28],P9$[50],C$[5],N$[30],X$[10],PLOC$[18]
Dim P0$[66],1%,P2[1],P5,2%,P3[2],3%,P4[3]
Dim 1%,CH_INVTR,Z9[24]
Dim 3%,P1[2],T[9],T1[10],A[4],FQOH,QTY,3%,PRODA[6]
Dim K9$[180],L0$[56],1%,L1[3],3%,L2[5]
Dim 1%,D1[5],PL1[1],2%,D6,D9[20],W9[1],B1[24],W$[50],F1$[16],K13$[50]
Dim K2$[50],K3$[50],K4$[50],K5$[50],J$[50],W9$[2],W1$[32],L1$[6],K7$[50]
Dim K77$[50],LP1$[6],ANW$[5],WHPROD$[12],SCRATCH$[80],PUIP$[50],Z1$[10]
Dim COID$[1],WHSE$[2],KEYPRWH$[50]
Dim 3%,W3[24],WH9[23],W5[25],PWGT,WHLBS[1],PRPARC[3],INVTR[1]
Dim 3%,NW3[24],INVBAL,PLV[1],WHLV[2],PL2[0]
Dim 1%,E,I,K,K3,X1,ALLTRANS,2%,R1,R2,R6,V1,V2,V3,X,R20,JDATE,DT3[1]
Dim 1%,W1[2],W0[3],WH8[47],W2$[16],2%,WH7[3],W7[1],W2[9],WHBLD[2],OHCH[2]
Dim 1%,MODE,FL1[2],FL1$[80],2%,FL2[3],3%,FL3[14],FL4[1]
Dim 2%,WHOS
Dim FSKEY$[30],3%,FC2[1],FICOST[1]
Dim 1%,FT1[3],FT1$[72],2%,FT2[3],3%,FT3[3]
Dim 1%,S9,2%,FIFL,P60$[50],FLT$[50],3%,FQ9[2],FQTY,FLK$[50]
Dim 3%,R[23],FTRECA,FTRECB,LETTER$[1],specs[99]
Dim P61$[256],A$[156],PROD$[12],HK1$[60]
Dim 1%,FIFOSPECCH[10],FIFOSPEC1[10],FIFOSPEC$[150],2%,FIFOSPEC2[10],3%,FIFOSPEC3[16]
dim ITR. as invtrans
Dim 3%
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=IntCo 
Try Close #1 Else Rem ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
for i=2 to 25
	try close #i else rem
next i
eflg=0
returnstatus=1
rec_uac = GetUIDRec(e$,IntCo,Userid$)
!NUM = Spc(5) \ COID = Int((NUM - Int(NUM / 16384) * 16384) / 64)
COID$ = COID Using "#"
L_100: Rem OPEN THE FILES
For I = 2 To 20
  Read X \ If X = -1 Goto L_210
  Read #1,88,X;K1$[1,16];
  Open #I,K1$
L_210: Next I
Data "704","2528","1792","2512","2320","208","-1","-1","-1","-1","-1","-1","-1","-1"
Data "-1","-1","-1","-1","1744"
CH_TAG = 2;CH_SPRODLOT = 3;CH_SPROD = 4;CH_INVTRANS = 5;CH_ORDLOT = 6
CH_PRODLOC = 7;CH_LPPHYS = 10;CH_LPLT = 11;CH_PRDWHSE = 20
CH_WHSE = 19
Read #1,88,1840;K1$[1,16];
ROpen #31,K1$
Read #1,88,1888;K1$[1,16];
ROpen #32,K1$
SPECS[1]=31 ! ORDER HEADER 
SPECS[2]=32 ! ORDER LINE
Read #1,88,2768;K1$[1,16]; \ Ropen #19,K1$
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
If P60$[9,9] = "F" Or P60$[9,9] = "L" ! FIFO
  For I = 21 To 22
    Read X
    Read #1,88,X;K1$[1,16]; \ Open #I,K1$
  Next I
  Data "3008","3024"
  CH_FIFOLOT = 21;CH_FIFOTRANS = 22
  Mat Read #1,3,192;FIFL;
  CH_FIFOS = 29
  If P61$[60,60] = "Y"
    K1$ = COID Using "4/FIFOSPC#" \ Ropen #29,K1$
  End If 
End If
sqlChan = OpenMySQLMirror(e$)
L_239: Mat Read #1,19,50;P9$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
Read #1,3,172;D6;
X2 = D6 \ Gosub YMD2JUL \ X2 = Tim(6)
JDATE = X2
Mat Read #1,115;D9;
K1$ = " ",K1$ \ K2$ = " ",K2$
Search #CH_TAG,3,1;K1$,V1,E
If Not(E) Goto STARTHERE
let eflag=eflag+1
	message$=message$+" No Entries on File. No Update Performed. "
	goto outend

!K2$ = "\7\NO ENTRIES...CAUTION!"
!Print K2$ \ Signal 3,30 \ Goto OUTEND
STARTHERE: ! Print 'CS MH';
!Print @40,0;"PHYSICAL INVENTORY UPDATE";
!Print @0,0;"-MX697-";
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
For I = 0 To 5
  Read D1[I]
Next I
Data "256","1","151","0","0","0"
D1[0] = D9[6] \ D1[1] = D9[5]
K1$ = " ",K1$
K2$ = " ",K2$
GET_OPTIONS: Rem ENTER RANGE
! Gosub SHOINFO_SCREEN
!Print @0,19;'CE';"ENTER  WAREHOUSE #   E: exit     ";
!Input Len 16384 + 2;""W9$ \ Call String(1,W9$)
!If W9$ = "E" Goto OUTEND
!If Len(W9$) > 2 Goto GET_OPTIONS
!W9 = W9$ \ If W9 > D1[1] Goto GET_OPTIONS
!If W9 <= 0 Goto GET_OPTIONS
Call Dxget("WHSE",tmp$)
WHSE = tmp$
if whse<=0 or whse>D1[1]
	eflag=eflag+1
	let message$=message$+" Invalid Warehouse Selected. "
	goto outend:
endif
whse$=whse using "&&"
let w9=whse
If P9$[41,41] = "W" 
	Call "CHKWRASL",WHSE,RASL[] ! ok
endif
!Gosub OPT_LOCREBLD
If RASL<>0
	Let LOCRB = 0
else
	Call Dxget("LOCRB",tmp$)
	If UCase$(RTrim$(tmp$)) ="Y"  Let LOCREB=99
endif

OPTN_POSTALL: Rem "Post all trans to invtrans
Call Dxget("ZEROVAR",tmp$) ! POST a zero variance -- default is for N
!Print @0,20;'CE';"POST Zero VARIANCE TO INVENTORY TRANSACTION FILE? (Y/N)  N";'ML';
!Input Len 16384 + 1;""W9$ \ Call String(1,W9$)
!If W9$ = "" Let W9$ = "N"
!If W9$ <> "Y" If W9$ <> "N" Goto OPTN_POSTALL
ALLTRANS = 0
If UCase$(RTrim$(tmp$)) = "Y"  Let ALLTRANS = 1
FINALQ: Rem "the 'std' final question
!Print @0,21;'CE';"ENTER    S: START  R: RESELECT  OR  E: EXIT    ";
!Input Len 16384 + 1;""W9$ \ Call String(1,W9$)
!If W9$ = "E" Goto OUTEND
!If W9$ = "R" Goto GET_OPTIONS
!If W9$ <> "S" Goto FINALQ
!WHSE$ = W9 Using "&&"
PUIP$ = "cntrl/puip" + COID$ + WHSE$
E = 0 \ Call FindF(PUIP$,E)
If E<>0
  !Print 'CS';
  let eflag=eflag+1
  message$="Physical Update in Process for Warehouse "+str$(w9)+" Cannot Re-Start "
  !Print @0,18;'CE RB';"PHYSICAL UPDATE IN PROCESS FOR WAREHOUSE ";W9;"! CANNOT RE-START."
  System "cat " + PUIP$
  !Input "PRESS <CR> TO EXIT  "Z1$
  Goto OUTEND
End If 
! Print @0,22;'CE';"CHECKING FILES...PLEASE WAIT";
Gosub VERIFY_PHYSINV
tmp$ = "files/",puip$
System "cp /dev/null " + tmp$ ! PUIP$
ch_puip = FindChannel()
Open #ch_puip,PUIP$
Print #ch_puip;"physical update started ";Msc$(3)
Print #ch_puip;"user ";rec_uac;" SPC 5= ";Spc(5)
Try Close #ch_puip Else Rem
If LOCRB Gosub CLR_PRODLOC
F9 = 0
! Print @0,22;'CE';"CHECKING FILES...PLEASE WAIT";
K1$ = W9 Using "##"
L_1030: Rem "=================== loop thru sprodlot
do
	Search #CH_SPRODLOT,3,3;K1$,V1,E \ If E > 2 Gosub ERR_SEARCH
	If E<>0 exit do ! Goto START_UPDATE
	W9[1] = K1$[1,2] 
	If W9[1] <> W9  exit do ! Goto START_UPDATE
	Mat Read #CH_SPRODLOT,V1,82;P4
	P4[0] = P4[0] - P4[1] \ P4[1] = 0
	If P4[0] <= 0 Let P4[1] = Abs(P4[0]) \ P4[0] = 0
	Mat Write #CH_SPRODLOT,V1,82;P4;
	!Goto L_1030
loop
START_UPDATE: Rem
!Print @0,22;'CE';"UPDATING FILES...PLEASE WAIT";
!If Err 0 Gosub ERR_TRAP
P0$ = "!",P0$;K2$ = "!",K2$;FIRST = 1;INVBAL = 0;T1[2] = 0
HK1$ = " ",HK1$;HK1$ = "";A$ = " ",A$
K1$ = W9 Using "##"
L_2000: Rem LOOP IT HERE !! Dir 2=wh/prodrec/loc/lotrec/tag
Search #CH_TAG,3,2;K1$,R1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_2150
W9[1] = K1$[1,2] \ If W9[1] <> W9 Goto L_2150
X1 = W9[1] \ R2 = K1$[9,14]
Mat Read #CH_TAG,R1,0;P1$;
If P1$[7,7] = "" Goto L_2100
If P1$[7,10] = "VOID" Goto L_2100
If P1$[7,10] = "    " Goto L_2100
Mat Read #CH_TAG,R1,26;P1;
Mat Read #CH_TAG,R1,44;P2$;
Mat Read #CH_TAG,R1,72;PWGT;
P2$[13,22] = "          "
If P1[0] = -99 Goto L_2100
If P1[2] = -99 Goto L_2000
If Not(RASL) And P2$[23,28] <> "STOCK " Let P2$[23,28] = "STOCK "
F9 = 99
IF P2$[1,5]="STOCK"
	LET P2$[1,7]=W9 Using "STOCK&&"
	LET P2$[8,12]="     "
Endif
	
IF RTRIM$(P2$)=""
	LET P2$[1,7]=W9 Using "STOCK&&"
	LET P2$[8,12]="     "
ENDIF
If P2$[1,7] = "       " Or P2$ = "" Let P2$[1,7] = W9 Using "STOCK&&"
If HK1$ = "" Let HK1$ = K1$
If RASL And HK1$[1,8] <> K1$[1,8]
  Gosub PRDWH_CHGD
End If 
HK1$ = K1$
If Not(RASL) !  not rasl
  If P0$[13,14] <> "!!" !  not the first product/lot
    If P1$[7,18] <> P0$[1,12] Or P2$[1,12] <> P0$[13,24] Gosub UPDT_LOTFLES
  End If 
End If 
Gosub GET_PROD
If V3 = -9 Goto L_2100
Gosub GET_SPRODLOT
T = T + P1[0];T1 = T1 + P1[0];T1[2] = T1[2] + PWGT
If RASL<>0 AND P61$[45,45] = "Y" !"cct156923
  T1 = T1 + P4[3]
End If 
If LOCRB<>0 and P1[0] > 0 Gosub ADD_PRODLOC
L_2100: P1[2] = -99
Write #CH_TAG,R1,38;P1[2];
If RASL<>0 And P1[0] <> -99 Gosub UPDT_LOTFLES
Goto L_2000
L_2150: Rem "============================= no more tag entries
If F9 And Not(RASL) Gosub UPDT_LOTFLES
If RASL And HK1$ <> "" Gosub PRDWH_CHGD
Goto LOOPTAGFLE_DONE
GET_SPRODLOT: Rem GET LOT RECORD
K3$ = " ",K3$;K3$[1,2] = X1 Using "##";K3$[3,8] = P2$[23,28];K3$[9,20] = P1$[7,18]
K3$[21,32] = P2$[1,12]
Search #CH_SPRODLOT,2,3;K3$,V2,E
If E = 1 Goto ADD_NEWSPRODLOT
If E Gosub ERR_SEARCH
Mat Read #CH_SPRODLOT,V2;P0$;
Mat Read #CH_SPRODLOT,V2,82;P4;
Mat Read #CH_SPRODLOT,V2,114;LP1$;
Return 
ADD_NEWSPRODLOT: Rem NEW LOT
E = 2 \ V2 = 0
Search #CH_SPRODLOT,1,0;K3$,V2,E
If E Gosub ERR_SEARCH
V1 = V2
Search #CH_SPRODLOT,4,3;K3$,V1,E
If E Gosub ERR_SEARCH
K5$ = " ",K5$ \ K5$[1,12] = K3$[9,20] \ K5$[13,20] = K3$[1,8]
V1 = V2 \ K5$[21] = K3$[21]
Search #CH_SPRODLOT,4,2;K5$,V1,E
If E Gosub ERR_SEARCH
K5$ = " ",K5$ \ K5$[1,22] = K3$[21,42] \ K5$[23,30] = K3$[1,8]
K5$[31] = K3$[9,20] \ V1 = V2
Search #CH_SPRODLOT,4,1;K5$,V1,E
If E Gosub ERR_SEARCH
K5$ = " ",K5$ \ K5$[1,12] = K3$[9,20] \ K5$[13,14] = K3$[1,2]
K5$[15,36] = K3$[21,42] \ K5$[37,42] = K3$[3,8] \ V1 = V2
Search #CH_SPRODLOT,4,4;K5$,V1,E
If E Gosub ERR_SEARCH
P0$ = " ",P0$ \ P0$[1,24] = K3$[9,32]
P0$[25,46] = "PHYS INV UPDATE -- 697"
P2 = X1 \ P2[1] = 1 \ P3 = D6 \ P3[1] = 0
P3[2] = 0 \ P4[0] = 0 \ P4[1] = 0 \ P4[3] = 0
P4[2] = B1[21] \ P5 = 0
LP1$[1,6] = P2$[23,28]
Mat Write #CH_SPRODLOT,V2;P0$;
Mat Write #CH_SPRODLOT,V2,66;P2;
Mat Write #CH_SPRODLOT,V2,70;P3;
Mat Write #CH_SPRODLOT,V2,82;P4;
Write #CH_SPRODLOT,V2,112;P5;
Mat Write #CH_SPRODLOT,V1,114;LP1$;
Return 
GET_PROD: Rem GET PRODUCT RECORD
K2$ = " ",K2$;K2$ = P1$[7,18]
Search #CH_SPROD,2,1;K2$,V3,E \ If E > 1 Gosub ERR_SEARCH
If E Let V3 = -9 \ Return 
Mat Read #CH_SPROD,V3,0;A$
Mat Read #CH_SPROD,V3,156;B1
Mat Read #CH_SPROD,V3,256;PRODA;
Mat Read #CH_SPROD,V3,512;PFU1
Mat Read #CH_SPROD,V3,990;PLV
If FIRST ! "first time for this item
  X3 = -1 \ Gosub GET_PRODWHSE
  INVBAL = W3[0];FIRST = 0
  LET onshelfadj=0
IF RASL=0
SPECS[3]=V3 ! PRODUCT REC NUMBER
specs[4]=w9 ! warehouse number
call "mkonshelfadj.dl4",specs[]
onshelfadj=specs[0]
MKADJUSTMENT=1 ! SET FLAG TO THE ADDJUSTMENT IN
ENDIF
End If 
Return 
UPDT_SPROD: Rem UPDATE PRODUCT
If V3 > 0 ! "valid item
  Mat Read #CH_SPROD,V3,0;A$
  Mat Read #CH_SPROD,V3,0;A$
  Mat Read #CH_SPROD,V3,256;A
  A = A + T1
  Write #CH_SPROD,V3,256;A
  Write #CH_SPROD,V3,460;A
  Write #CH_SPROD,V3,508;D6;
	if sqlChan >= 0 ! MySQL enabled and channel opened
		e = prod_UpdateSQLFromDL4(e$, intCo, a$[140,151], sqlChan, ch_sprod)
		if e <> 1 ! returns the number of records add/updated/deleted
			gosub ERR_SEARCH
		end if
	end if

  If RASL AND P61$[45,45] = "Y" !recalculate the on hand qty   cct156923
    PROD$[1,12] = A$[140,151]
    OHCH[0] = CH_SPROD
    OHCH[1] = CH_PRDWHSE
    OHCH[2] = CH_SPRODLOT
    Call "TOTONHANDQTY.dl4",PROD$,OHCH[],e$,IntCo,rstr$ ! mtg
    PROD$ = " ",PROD$
  End If 
End If 
Return 
ADD_PRODLOC: Rem BUILD PRODLOC RECORD
If Not(LOCRB) Return 
K7$ = " ",K7$
K7$[1,12] = P1$[7,18]
K7$[13,14] = W9 Using "##"
K7$[15,20] = P1$[1,6]
Search #CH_PRODLOC,2,1;K7$,R7,E
If Not(E) Return 
E = 2
Search #CH_PRODLOC,1,0;K7$,R7,E
If E Gosub ERR_SEARCH
PLOC$ = " ",PLOC$
PLOC$[1,12] = P1$[7,18]
PLOC$[13,18] = P1$[1,6]
PL1[0] = W9
PL1[1] = 0
PL2[0] = 0
K77$ = " ",K77$
K77$[1,2] = K7$[13,14]
K77$[3,8] = K7$[15,20]
K77$[9,20] = K7$[1,12]
Search #CH_PRODLOC,4,1;K7$,R7,E
If E Gosub ERR_SEARCH
Search #CH_PRODLOC,4,2;K77$,R7,E
If E Gosub ERR_SEARCH
Mat Write #CH_PRODLOC,R7,0;PLOC$
Mat Write #CH_PRODLOC,R7,18;PL1
Mat Write #CH_PRODLOC,R7,22;PL2;
Return 
UPDT_LOTFLES: Rem ------ UPDATE LOTS
If V3 > 0 ! "valid item
  Gosub GET_LOTVAR
  If ALLTRANS ! "include zero Variance
    Gosub UPDT_INVTRANS
    Gosub PROD_DATES
  Else ! "only nonzero
    If T[1] Gosub UPDT_INVTRANS
  End If 
  If Not(T[1]) And A$[127,127] <> "Y"
    Gosub L_4540
  Else 
    Rem GOSUB Updt_Fifolot: ! FIFOLOTS done on prod/wh change
    Mat Read #CH_SPRODLOT,V2,82;P4
    T1 = - (P4[0] - P4[1])
    X3 = 0 \ Gosub GET_PRODWHSE
    Gosub UPDT_SPROD
    Gosub UPDT_SPRODLOT
    T1 = P4[0] - P4[1]
    X3 = 1 \ Gosub GET_PRODWHSE
    Gosub UPDT_SPROD
  End If 
End If 
FIRST = 1 \ INVBAL = 0
Gosub CLR_INVTRANSVAR
T = 0 \ T[1] = 0 \ T[2] = 0
Return 
UPDT_INVTRANS: Rem INSERT TO LOTFLE
L0$ = " ",L0$
L0$[1,12] = K2$[1,12]
L0$[13,24] = P0$[13,24]
L0$[37,40] = "PHYS"
L0$[42,48] = "INV ADJ"
L0$[25,30] = "PROG #"
L0$[32,34] = "697"
L1$[1,6] = P2$[23,28]
CH_INVTR = CH_INVTRANS
If T[1] < 0 Let L1 = 24
If T[1] >= 0 Let L1 = 11
L2 = 0
L2[1] = INVBAL
L2[2] = T[2]
L2[3] = P4[2]
L2[4] = B1[21] \ If P9$[32,32] = "Y" AND W3[15]<>0 Let L2[4] = W3[15]
L1[1] = X1
L1[2] = rec_uac ! Spc(6)
L1[3] = 0;L2[5] = 0
INVTR[0] = 0
If P9$[9,9] = "N" Return 
clear itr.
 itr.ProdCode$=L0$[1,12]                    
 itr.LotNum$=L0$[13,24]                  
 itr.SrcCode$=L0$[25,36]                  
 itr.Comment$=L0$[37,56]                  
 itr.TrnsType=L1[0]       
 itr.Whse=L1[1]                       
 itr.EntBy=rec_uac! was spc (6)                                                                              
 itr.Tiebrkr=L1[3]  !      starts at "0"  
 itr.TrnsDate=L2[0] !       julian         
 itr.RunInvt=L2[1]      
 itr.Qty=L2[2]                       
 itr.CostLoad=L2[3]
 itr.CostAvg=L2[4]                       
 itr.NetPrice=L2[5]   
 itr.Loc$=L1$[1,6]                   
 !itr.AcptDate                   : Item 106 ! L3[0]           
 !itr.AcptTime                   : Item 110 ! L3[1]           
 !itr.ProntoAcpt                 : Item 114 ! PRONTO[0]     Y=1/N=0       
 !itr.RfRcvd                     : Item 116 ! PRONTO[1]     ENTERED BY REC
                                                                               
 itr.Wgt=invtr[0] !                         : Item 118 ! WTADJ         CATCH WGT     

Gosub ADD_INVTRANS
Return 
ADD_INVTRANS: Rem *********** KEY SETUP & WRIT E FOR LOTFLE
Call MakeTrans(e$,IntCo,CH_INVTR,status,itr.) !  as invtrans)
!Call "MAKETRANS",L0$,L1[],L2[],L1$,CH_INVTR
Rem -- r10devlCALL "MAKETRANS",L0$,L1[],L2[],L1$,INVTR[],CH_INVTR
unlock #ch_invtr		!task 38342
Return 
UPDT_SPRODLOT: Rem DO SPRODLOT NOW
P4[1] = P4[1] - T[1]
If P4[1] < 0 Let P4 = P4 - P4[1] \ P4[1] = 0
Mat Write #CH_SPRODLOT,V2,82;P4;
L_4540: P5 = 1
Write #CH_SPRODLOT,V2,112;P5;
T = 0 \ T[1] = 0 \ T[2] = 0
Return 
GET_LOTVAR: Rem GET LOT QTY
Mat Read #CH_SPRODLOT,V2,0;P0$;
Mat Read #CH_SPRODLOT,V2,82;P4;
T[1] = T - (P4 - P4[1])
If RASL AND P61$[45,45] = "Y" !"cct156923
  T[1] = T[1] + P4[3]
End If 
IF NOT(RASL) IF MKADJUSTMENT
T[1]=T[1]+onshelfadj
MKADJUSTMENT=0 ! ONLY ON THE FIRST TAG PER ITEM 
ENDIF 
T[2] = Abs(T[1])
INVBAL = INVBAL + T[1]
Return 
CLR_INVTRANSVAR: Rem RESET
For K = 0 To 4
  If K <= 3 Let L1[K] = 0
  L2[K] = 0
Next K
K = 0
Return 
SHOINFO_SCREEN: ! Print 'CS';
!Print "                     PHYSICAL INVENTORY UPDATE"
!Print 
!If RASL If P61$[45,45] = "Y"
!  Print " WARNING:Allocated bin quantities will automatically be added to"
!  Print " the count. Be sure all allocated pick tickets had the stock"
!  Print " removed before the physical count was started. If this was not done,"
!  Print " contact Universal before running this program."
!  Print "  Before running this update, make sure that you have final copies of"
!  Print "        any variance reports you require.  Running this update will do"
!  Print "        the following:"
!  Print "     o  Adjust ON HAND and AVAILABLE quantities based on counts."
! Print "     o  Adjust lots  as counted.  Entries with no lots "
!  Print "            will be assigned to 'STOCK'."
!  Print "     o  Make an entry in the inventory transaction file to"
! Print "           reflect any changes made to the quantities."
!  Print "     o  Clear out the physical inventory work file."
!  Print "  "
!  Print " * Any product that has no counts associated with it will be unaffected."
!  Print "        To zero a product, a zero count must be entered."
!Else 
!  Print "  Before running this update, make sure that you have final copies of"
!  Print "        any variance reports you require.  Running this update will do"
!  Print "        the following:"
!  Print "  "
 ! Print "     o  Adjust ON HAND and AVAILABLE quantities based on counts."
!  Print "     "
!  Print "     o  Adjust lots  as counted.  Entries with no lots "
!  Print "            will be assigned to 'STOCK'."
!  Print "     "
!  Print "     o  Make an entry in the inventory transaction file to"
!  Print "           reflect any changes made to the quantities."
!  Print 
!  Print "     o  Clear out the physical inventory work file."
!  Print "  "
 ! Print " * Any product that has no counts associated with it will be unaffected."
!  Print "        To zero a product, a zero count must be entered."
!End If 
Return 

OPT_LOCREBLD: Rem TEXT FOR PRODLOC REBUILD
If RASL Let LOCRB = 0 \ Return 
!Window Open @5,5; Size 75,15; Using "LOCATION REBUILD"
!Print @2,1;'BR BD';"NON RASL LOCATION REBUILD OPTION ";'ER ED';
!Print @5,3;"This option will REMOVE all NON PERMANENT locations entered in 355 "
!Print @3,4;"then rebuild the file based on the physical inventory tags using "
!Print @3,5;"the tag as the location ."
!Print @3,7;'BR';"DO NOT USE THIS OPTION IF";'ER';" :  A full count was not done. "
!Print @5,8;" OR, you did not use the location as the tag number. "
!Print @2,10;"DO YOU WISH TO REBUILD THE NON RASL LOCATIONS BASED ON THE TAGS ";
!Print @2,11;"ENTER  YES / N= <CR> ";
!Input Len 16384 + 3;""ANW$ \ Call String(1,ANW$)
!If ANW$[1,3] = "YES" Let LOCRB = 99 Else Let LOCRB = 0
!Window Close 
Return 
UPDT_FIFOLOT: Rem UPDATE FIFOLOT & FIFOTRANS
If P60$[9,9] <> "F" And P60$[9,9] <> "L" Return 
If Not(QTY) Return 
For CTR = 0 To 16
  If CTR < 11 Let FIFOSPECCH[CTR] = 0;FIFOSPEC1[CTR] = 0;FIFOSPEC2[CTR] = 0
  FIFOSPEC3[CTR] = 0
Next CTR
FIFOSPEC$ = " ",FIFOSPEC$
Rem set fifo spec variable for channel #
FIFOSPECCH[0] = CH_FIFOLOT
FIFOSPECCH[1] = CH_FIFOTRANS
FIFOSPECCH[2] = 29
FIFOSPECCH[3] = CH_WHSE
FIFOSPECCH[4] = CH_SPROD
FIFOSPECCH[5] = CH_PRDWHSE
FIFOSPECCH[6] = 0
Rem set fifospec 1 variables
FIFOSPEC1[0] = 697
FIFOSPEC1[1] = W9
FIFOSPEC1[2] = W9
FIFOSPEC1[3] = W9
FIFOSPEC1[4] = 0
Rem set fifospec 2 variables
FIFOSPEC2[0] = JDATE
FIFOSPEC2[1] = 0
Rem set fifospec 3 variables
FIFOSPEC3[0] = QTY
FIFOSPEC3[1] = 0
FIFOSPEC3[2] = 0
FIFOSPEC3[3] = 0
FIFOSPEC3[3] = 0
FIFOSPEC3[4] = 0
FIFOSPEC3[5] = 0
If A$[127,127] <> "Y" Or (A$[127,127] = "Y" And P61$[73,73] <> "Y")
  FIFOSPEC3[4] = PRODA[6]
  FIFOSPEC3[5] = PRODA[5]
End If 
FIFOSPEC3[6] = 0
FIFOSPEC3[7] = 0
FIFOSPEC3[8] = 0
FIFOSPEC3[9] = 0
Rem set fifospec$ variable
FIFOSPEC$ = " ",FIFOSPEC$
FIFOSPEC$[1,12] = A$[140,151]
FIFOSPEC$[13,24] = P0$[13,24]
FIFOSPEC$[25,34] = P0$[55,64]
FIFOSPEC$[35,40] = LP1$[1,6]
Call "MXFIFO.dl4",FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$,e$,IntCo,rstr$
! Call "MXFIFO",FIFOSPECCH[],FIFOSPEC1[],FIFOSPEC2[],FIFOSPEC3[],FIFOSPEC$
Return 
FQ9[0] = Int(T[1]) \ FQ9[1] = 0 \ FQ9[2] = 0
FLK$ = " ",FLK$ \ FLK$[1,12] = K2$[1,12] \ FLK$[13,14] = X1 Using "##" \ MODE = 3
If P60$[9,9] = "L" Let FLK$[15] = "999999" \ MODE = 6
L_6030: Search #CH_FIFOLOT,MODE,1;FLK$,R[21],E \ If E = 2 Goto CRT_FIFOLOT
If E Gosub ERR_SEARCH
If FLK$[1,12] <> K2$[1,12] Goto CRT_FIFOLOT
S9 = FLK$[13,14] \ If S9 <> X1 Goto CRT_FIFOLOT
Mat Read #CH_FIFOLOT,R[21],102;FL3; \ If Not(FL3 - FL3[1]) Goto L_6030
FQ9[2] = FQ9[0] - FQ9[1]
If FQ9[2] > 0 If (FL3[0] - FL3[1]) < 0 Goto L_6095
FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY + FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY + FL3[S9] \ Next S9
If FQ9[2] < 0 If FQTY > 0 Goto L_6095
If FQ9[2] >= 0 Goto L_6030
If FL3[0] Goto L_6030
Mat Read #CH_FIFOLOT,R[21],86;FL2;
If JDATE = FL2[1] Goto L_6095
Goto L_6030
L_6095: Gosub READ_FIFOLOT
If FQ9[2] < 0 Goto L_6130
If (FL3[1] - FL3[0]) > 0 If (FL3[1] - FL3[0]) < FQ9[2] Let FQ9[2] = (FL3[1] - FL3[0])
FL3[0] = Int(FL3[0] + FQ9[2])
Goto L_6145
L_6130: If FQ9[2] > 0 Goto L_6145
FQTY = FL3[0]
For S9 = 1 To 5 \ FQTY = FQTY - FL3[S9] \ Next S9
For S9 = 8 To 11 \ FQTY = FQTY - FL3[S9] \ Next S9
If FL3[0] If FQTY < Abs(FQ9[2]) Let FQ9[2] = - (FQTY)
FL3[1] = Int(FL3[1] - FQ9[2])
L_6145: FL2[2] = JDATE
If FL3[6] Goto L_6155
If Not(FL3[6]) If P9$[32,32] = "Y" Let FL3[6] = W3[16]
If Not(FL3[6]) Let FL3[6] = B1[10]
FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
If P61$[60,60] = "Y" And FL3[14] = 0
  REC_WHSE = X1 - 1
  If REC_WHSE < 0 Goto L_6155
  If REC_WHSE > Chf(19) Goto L_6155
  Read #19,REC_WHSE,2970;WHOS;
  If Not(WHOS) Goto L_6155
  FSKEY$ = " ",FSKEY$
  FSKEY$[1,12] = K2$[1,12];FSKEY$[13,16] = WHOS Using "####"
  Search #29,2,1;FSKEY$,R[29],E \ If E > 1 Gosub ERR_SEARCH
  If E Goto L_6155
  Mat Read #29,R[29],38;FC2;
  FL3[14] = FC2[0]
End If 
L_6155: Gosub WRITE_FIFOLOT
Gosub CRT_FIFOTRANS
FQ9[1] = Int(FQ9[1] + FQ9[2])
If FQ9[0] = FQ9[1] Return 
Goto L_6030
Stop 
CRT_FIFOLOT: Rem CREATE FIFOLOT
FL1$ = " ",FL1$
For S9 = 0 To 14
  If S9 < 3 Let FL1[S9] = 0
  If S9 < 3 Let FL2[S9] = 0
  If S9 < 2 Let FL4[S9] = 0
  FL3[S9] = 0
Next S9
FQ9[2] = FQ9[0] - FQ9[1]
FL1[0] = X1 \ FL1[1] = 11 \ If FQ9[2] < 0 Let FL1[1] = 24
FL1[2] = PFU1[0]
FL1$[1,12] = K2$[1,12] \ FL1$[13,24] = P0$[13,24]
FL1$[25,34] = P0$[55,64]
FL1$[35,40] = LP1$[1,6]
FL1$[41,69] = "PHYSICAL INVENTORY ADJUSTMENT"
FL2[1] = JDATE
FLK$[1,12] = FL1$[1,12] \ FLK$[13,14] = FL1[0] Using "##" \ FLK$[15] = "999999" \ MODE = 6
If P60$[9,9] = "L" Let FLK$[15] = "" \ MODE = 3
Search #CH_FIFOLOT,MODE,1;FLK$,R[21],E \ If E = 2 Goto L_6300
If E Gosub ERR_SEARCH
S9 = FLK$[13,14]
L_6300: If FQ9[2] > 0 Let FL3[0] = Int(FQ9[2])
If FQ9[2] < 0 Let FL3[1] = Int(Abs(FQ9[2]))
If FLK$[1,12] = FL1$[1,12] And S9 = FL1[0]
  Mat Read #CH_FIFOLOT,R[21],192;FL4;
  Read #CH_FIFOLOT,R[21],186;FL3[14];
  Read #CH_FIFOLOT,R[21],138;FL3[6]; \ Goto L_6320
End If 
If P61$[60,60] = "Y"
  REC_WHSE = FL1[0] - 1
  If REC_WHSE < 0 Goto GETLASTCOST
  If REC_WHSE > Chf(19) Goto GETLASTCOST
  Read #19,REC_WHSE,2970;WHOS;
  If Not(WHOS) Goto GETLASTCOST
  FSKEY$ = " ",FSKEY$
  FSKEY$[1,12] = FL1$[1,12];FSKEY$[13,16] = WHOS Using "####"
  Search #29,2,1;FSKEY$,R[29],E \ If E > 1 Gosub ERR_SEARCH
  If E Goto GETLASTCOST
  Mat Read #29,R[29],38;FC2;
  FL3[14] = FC2[0]
End If 
GETLASTCOST: Rem default to cost
If P9$[32,32] = "Y" And W3[16] <> 0 Let FL3[6] = W3[16] \ Goto L_6320
FL3[6] = B1[10]
L_6320: FL3[7] = FL3[6] + ((FL3[6] * FIFL) / 100)
FLK$ = " ",FLK$
E = 2 \ Search #CH_FIFOLOT,1,0;FLK$,R[21],E \ If E Gosub ERR_SEARCH
FL2 = R[21]
Gosub WRITE_FIFOLOT
FLK$ = " ",FLK$ \ FLK$[1,12] = FL1$[1,12] \ FLK$[13,14] = FL1 Using "##"
FLK$[15,20] = FL2[1] Using "######" \ FLK$[21,26] = FL2 Using "######"
Search #CH_FIFOLOT,4,1;FLK$,R[21],E \ If E Gosub ERR_SEARCH
Gosub CRT_FIFOTRANS
Return 
CRT_FIFOTRANS: Rem FIFOTRANS FILE UPDATE
FT1$ = " ",FT1$
For S9 = 0 To 3 \ FT1[S9] = 0 \ FT2[S9] = 0 \ FT3[S9] = 0 \ Next S9
FT1$[1,12] = K2$[1,12] \ FT1$[13,24] = P0$[1,12]
FT1$[25,34] = P0$[55,64] \ FT1$[35,40] = LP1$[1,6]
FT1$[41,48] = "PROG 697"
FT1$[53,70] = "PHYS INVENTORY ADJ"
FT1[0] = 11 \ If FQ9[2] < 0 Let FT1[0] = 24
FT1[1] = X1
FT1[2] = Spc(6) \ FT2[0] = FL2[0]
FT2[2] = JDATE \ FT3[0] = FQ9[2]
FT3[1] = FL3[6] \ FT3[2] = FL3[7] \ FT3[3] = FL3[14]
FLT$ = " ",FLT$
E = 2 \ Search #CH_FIFOTRANS,1,0;FLT$,R[22],E \ If E Gosub ERR_SEARCH
If R[22] <= 999999 Let FT2[1] = R[22]
Gosub WRITE_FIFOTRANS
FLT$[1,6] = FT2[0] Using "######" \ FLT$[7,12] = FT2[2] Using "######"
If R[22] <= 999999
  FLT$[13,18] = FT2[1] Using "######"
Else 
  FTRECA = Int((R[22] - 1000000) / 100000)
  FTRECB = Fra(R[22] / 100000) * 100000
  Call String(4,FTRECA + 193,LETTER$)
  FLT$[13,13] = LETTER$[1,1]
  FLT$[14,18] = FTRECB Using "#####"
End If 
Search #CH_FIFOTRANS,4,1;FLT$,R[22],E \ If E Gosub ERR_SEARCH
Return 
READ_FIFOLOT: Rem READ FIFOLOT
Mat Read #CH_FIFOLOT,R[21],0;FL1
Mat Read #CH_FIFOLOT,R[21],6;FL1$
Mat Read #CH_FIFOLOT,R[21],86;FL2
Mat Read #CH_FIFOLOT,R[21],102;FL3
Mat Read #CH_FIFOLOT,R[21],192;FL4
Return 
WRITE_FIFOLOT: Rem WRITE FIFOLOT
Mat Write #CH_FIFOLOT,R[21],0;FL1
Mat Write #CH_FIFOLOT,R[21],6;FL1$
Mat Write #CH_FIFOLOT,R[21],86;FL2
Mat Write #CH_FIFOLOT,R[21],102;FL3;
Mat Write #CH_FIFOLOT,R[21],192;FL4;
Return 
WRITE_FIFOTRANS: Rem WRITE FIFOTRANS
Mat Write #CH_FIFOTRANS,R[22],0;FT1$;
Mat Write #CH_FIFOTRANS,R[22],72;FT1;
Mat Write #CH_FIFOTRANS,R[22],80;FT2;
Mat Write #CH_FIFOTRANS,R[22],96;FT3;
Return 
LOOPTAGFLE_DONE: Rem END OF FILE
If RASL And P61$[32,32] = "Y" ! "see if PalletPhys was taken - update before clear
  WHSE = W9
  If CH_LPPHYS <= 0 Let CH_LPPHYS = 10
  If CH_LPLT <= 0 Let CH_LPLT = 11
  Call "MHLPPHYSUD.DL4",WHSE,CH_TAG,CH_SPROD,CH_LPPHYS,CH_LPLT,e$,IntCo,rstr$,REC_UAC
  !Call "MHLPPHYSUD",WHSE,CH_TAG,CH_SPROD,CH_LPPHYS,CH_LPLT
End If 
! Print @0,22;'CE';"CLEARING TAG FILE...PLEASE WAIT";
K1$ = " ",K1$;K1$ = W9 Using "##"
CLR_TAGFLE_LOOP: Rem LOOP DIR 1
Search #CH_TAG,3,1;K1$,V1,E
If E Goto ALLDONE
W9[1] = K1$[1,2] \ If W9[1] <> W9 Goto CLR_TAGFLE_LOOP
Mat Read #CH_TAG,V1,0;P1$;
Mat Read #CH_TAG,V1,26;P1;
Mat Read #CH_TAG,V1,72;PWGT;
If P1[2] <> -99 Goto CLR_TAGFLE_LOOP
Search #CH_TAG,5,1;K1$,V1,E \ If E Gosub ERR_SEARCH
K2$ = " ",K2$
K2$[1,2] = K1$[1,2]
K2$[3,8] = K1$[15,20] \ K2$[9,14] = K1$[3,8]
K2$[15,20] = K1$[21,26]
K2$[21,26] = K1$[9,14]
Search #CH_TAG,5,2;K2$,V1,E \ If E Gosub ERR_SEARCH
K13$ = " ",K13$ \ K13$[1,2] = K1$[1,2];K13$[3,8] = K2$[21,26]
K13$[9,20] = P1$[7,18];K13$[21,32] = K2$[9,20]
Search #CH_TAG,5,3;K13$,V1,E \ If E Gosub ERR_SEARCH
For X = 0 To 2 \ P1[X] = 0 \ Next X
PWGT = 0
Mat Write #CH_TAG,V1;Z9;
Mat Write #CH_TAG,V1,26;P1;
Mat Write #CH_TAG,V1,72;PWGT;
E = 3 \ Search #CH_TAG,1,0;K1$,V1,E \ If E Gosub ERR_SEARCH
Goto CLR_TAGFLE_LOOP

CLR_PRODLOC: Rem CLEAR OUT NON PERMANENT LOCATIONS IF LOCRB=99
K7$ = " ",K7$
If Not(LOCRB) Return 
! Print @0,22;'CE';"CLEARING NON PERMANENT LOCATIONS !! "

do 
	
	Search #CH_PRODLOC,3,1;K7$,R7,E
	If E  exit do ! Goto L_8690
	Mat Read #CH_PRODLOC,R7,18;PL1;
	If W9 <> PL1[0] Goto TAGFLE_LOOP
	If PL1[1] Goto TAGFLE_LOOP
	K77$ = " ",K77$
	K77$[1,2] = K7$[13,14]
	K77$[3,8] = K7$[15,20]
	K77$[9,20] = K7$[1,12]
	Search #CH_PRODLOC,5,1;K7$,R7,E
	If E Gosub ERR_SEARCH
	Search #CH_PRODLOC,5,2;K77$,R7,E
	If E Gosub ERR_SEARCH
	E = 3
	Search #CH_PRODLOC,1,0;K7$,R7,E
	If E Gosub ERR_SEARCH
	TAGFLE_LOOP: Rem "
Loop
L_8690: ! 
Return 

GET_PRODWHSE: Rem "======================= check for whse record
W$ = " ",W$
W$[1,12] = K2$[1,12]
W$[13,14] = W9 Using "##"
Search #CH_PRDWHSE,2,1;W$,R20,E \ If E > 1 Gosub ERR_SEARCH
If E Gosub CRT_PRODWHSE
Mat Read #CH_PRDWHSE,R20,38;W2
Mat Read #CH_PRDWHSE,R20,78;W3
Mat Read #CH_PRDWHSE,R20,780;WHLV
If FIRST
  W3[12] = 0
  Mat Write #CH_PRDWHSE,R20,78;W3
End If 
If X3 = -1 Goto L_10090
If X3 = 0 Or X3 = 1 Let W3[0] = W3[0] + T1;W2[8] = D6
If X3 = 1 Let W3[12] = W3[12] + T1
Mat Write #CH_PRDWHSE,R20,38;W2
Mat Write #CH_PRDWHSE,R20,78;W3;
If Not(RASL) And X3 = 1 Gosub PRDWH_CHGD
L_10090: Return 
CRT_PRODWHSE: Rem "====== create prodwhse record
WHPROD$[1,12] = W$[1,12];WHBLD[0] = CH_PRDWHSE;WHBLD[1] = W$[13,14];WHBLD[2] = B1[24]
Call "MXWHCREATE",WHPROD$,WHBLD[]
R20 = WHBLD[2];E = 0;WHBLD[2] = 0
Return 
PRDWH_CHGD: Rem "update total fields whenever product/whse changes(Catch Wgt)
If A$[127,127] <> "Y" Goto WGTADJDONE
If V3 <= 0 Goto FFODONE
W$ = " ",W$
W$[1,12] = A$[140,151]
W$[13,14] = W9 Using "##"
Search #CH_PRDWHSE,2,1;W$,R20,E \ If E > 1 Gosub ERR_SEARCH
If E Gosub CRT_PRODWHSE
Mat Read #CH_PRDWHSE,R20,78;W3
Mat Read #CH_PRDWHSE,R20,980;WHLBS
T1[3] = T1[2] - WHLBS[0]
WHLBS[0] = WHLBS[0] + T1[3]
Mat Write #CH_PRDWHSE,R20,980;WHLBS;
Mat Read #CH_SPROD,V3,156;B1
Mat Read #CH_SPROD,V3,596;PRPARC
PRPARC[3] = PRPARC[3] + T1[3]
Mat Write #CH_SPROD,V3,596;PRPARC;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, a$[140,151], sqlChan, ch_sprod)
	if e <> 1 ! returns the number of records add/updated/deleted
		gosub ERR_SEARCH
	end if
end if
If T1[3] = 0 And Not(ALLTRANS) Goto WGTADJDONE
L0$ = " ",L0$
L0$[1,12] = W$[1,12]
L0$[13,19] = W9 Using "STOCK&&"
L0$[37,40] = "PHYS"
L0$[42,48] = "WGT ADJ"
L0$[25,30] = "PROG #"
L0$[32,34] = "697"
L1$[1,6] = "STOCK "
CH_INVTR = CH_INVTRANS
If T1[3] < 0 Let L1 = 24
If T1[3] >= 0 Let L1 = 11
L2 = 0
L2[1] = W3
L2[2] = 0
L2[3] = B1[8] \ If P9$[32,32] = "Y" And W3[17] Let L2[3] = W3[17]
L2[4] = B1[21] \ If P9$[32,32] = "Y" And W3[15] Let L2[4] = W3[15]
L1[1] = W9
L1[2] = Spc(6);L1[3] = 0;L2[5] = 0
INVTR[0] = Abs(T1[3])
If P9$[9,9] = "N" Goto WGTADJDONE
Gosub ADD_INVTRANS
WGTADJDONE: Rem "complete - check fifolot (moved here after wgt adj)
If P60$[9,9] = "F" Or P60$[9,9] = "L" ! "flag for fifo by weight 193334
  KEYPRWH$ = " ",KEYPRWH$
  KEYPRWH$[1,12] = A$[140,151]
  KEYPRWH$[13,14] = W9 Using "##"
  Search #CH_PRDWHSE,2,1;KEYPRWH$,R20,E \ If E Gosub ERR_SEARCH
  Mat Read #CH_PRDWHSE,R20,78;W3;
  Mat Read #CH_PRDWHSE,R20,980;WHLBS;
  FQOH = 0;QTY = 0
  FLK$ = " ",FLK$;FLK$[1,12] = A$[140,151];FLK$[13,14] = W9 Using "##"
SRCHFIFOQTY: Rem search fifo for qty variance
  Search #CH_FIFOLOT,3,1;FLK$,R[21],E \ If E = 2 Goto ENDSRCHFQOH
  If E Gosub ERR_SEARCH
  If FLK$[1,12] <> A$[140,151] Goto ENDSRCHFQOH
  S9 = FLK$[13,14] \ If S9 <> W9 Goto ENDSRCHFQOH
  Mat Read #CH_FIFOLOT,R[21],102;FL3;
  FQOH = FQOH + (FL3[0] - FL3[1])
  Goto SRCHFIFOQTY
ENDSRCHFQOH: Rem end check if variance
  If P61$[73,73] = "Y" And A$[127,127] = "Y"
    If FQOH = WHLBS[0] Goto FFODONE
    QTY = WHLBS - FQOH
  Else 
    If FQOH = W3[0] Goto FFODONE
    QTY = W3[0] - FQOH
  End If 
  Gosub UPDT_FIFOLOT
End If 
FFODONE: Rem " clear weight fields
T1[2] = 0;T1[3] = 0;QTY = 0
Return 
PROD_DATES: Rem! update date in prod and prodwhse files
W$ = " ",W$
W$[1,12] = K2$[1,12]
W$[13,14] = W9 Using "##"
Search #CH_PRDWHSE,2,1;W$,R20,E \ If E > 1 Gosub ERR_SEARCH
If E Gosub CRT_PRODWHSE
Mat Read #CH_PRDWHSE,R20,38;W2
W2[8] = D6
Mat Write #CH_PRDWHSE,R20,38;W2;
Rem now for prod file
Write #CH_SPROD,V3,508;D6;
Return 
Rem {begin src/inc/rtn.date.i}
NUM2DATE: Rem *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
DATE2NUM: Rem *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
JUL2DATE: Rem REM DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
If X2 <= 0 Let X$ = " ",X$ \ Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YMD2JUL: Rem  REM  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
If X2 <= 0 Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
JUL2YMD: Rem  REM CONVERT JULIAN TO YYMMDD
DT3[0] = X2;DT3[1] = X2;FLAG = 0
If X2 <= 0 Return 
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
YM2LONGYEAR: Rem Rem Convert YYMM to YYYYMM
If X2 <= 0 Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&"
X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6]
Return 
Rem {end rtn.date.i}
ALLDONE: Rem DONE !!
PHY_INV = 99
Try 
	Kill PUIP$
else
	Rem 
end try 

goto outend:

VERIFY_PHYSINV: Rem make sure there are same # of keys in all 3 dir
For I = 1 To 3
  K1$ = " ",K1$
VER_LOOP: Search #CH_TAG,3,I;K1$,R1,E
  If E > 2 Gosub ERR_SEARCH
  If E = 0
    R[I] = R[I] + 1
    Goto VER_LOOP
  End If 
Next I
If R[1] <> R[2] Or R[1] <> R[3]
  !Print 'CS MH';
  ! @30,0;"PHYSICAL INVENTORY UPDATE";
  !Print @0,0;"-MX697-";
  !Print @10,10;"Key count error in the Tag File."
  !Print @10,11;"Report this event to Universal!"
  !Print @10,13;"Enter to continue: ";
  !Input Len 16384 + 1;""W9$
  !Goto OUTEND
  let eflag=eflag+1
  let message$=message$+"Key Count Error in the Tag File. Report to Universal "
  goto outend:
End If 
Return 

ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/697se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             

OUTEND: Rem EXIT ROUTINE
! EXIT_: !Print 'CS'
!Close 
!Chain "MX000"
!Stop
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	let message$="Physical Inventory had been updated "
	if whse<>0
		let message$=message$+" for warehouse "+str$(whse)
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
outend9: ! everything has been written in called program
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program

