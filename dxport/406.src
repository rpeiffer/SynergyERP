! >>> Program 406  
!
! description Purchasing Shopping List
!
! loadsave -w -n 100,10 -o prog/dxport/406.dl4 src/406.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
REM BEDIT Version: 2.2 OBJECT CODE     Created: DEC  4, 2006  11:33:01    
REM /w2/papermaster/r2005//usr/acct/dek/work/r2005/mx/mx406.src (univ2) [dek] {57982}                                                                     
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem mx406          SHOPPING LIST
Rem Author:        vst (November 2005)
Rem                UNIVERSAL BUSINESS SYSTEMS
! 03/15/06:dgh:cct200270: Add dim 2% n2[3]. Fixed typo in zone_range.
! 12/06: dek cct???: add vendor break
!
Declare Intrinsic Sub DateToJulian,InpBuf,String,Time
! - Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim BegZone$[2],EndZone$[2],BegProd$[12],EndProd$[12],BegBin$[6],EndBin$[6]
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim Z1$[50],F1$[16],F2$[26],A$[26],K$[130],3%
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim K2$[50],K3$[50],K5$[20],K6$[20],K8$[6],K9$[50],K10$[20],K12$[20]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],X1,X$[40]
Dim 1%,CNVTU[2],INCALL9,J8_FLAG,PRODRANGE,URECFLAG,V9[4]
Dim 1%,EUN[2],H4[2],L3[8],PFU1[20],L1[5],W1[2],PL1[1],S2[1],UN[2],POMISC[2]
Dim 2%,N1[13],N2[3],CURDATE,CURDATE_JULIAN,DUEDATE_JULIAN,HOLDDUE
Dim 2%,H0[12],H5[16],H6[8],L4[3],L2[2],X2,DT3[1],W2[9]
Dim 3%,A[33],L5[3],L7[5],S3[17],W3[24]
DIM 3%,amount,PFU2[6],r[15],UNF[6],TotQty,AvailQty,Item_TotQty
dim 3%,Item_AvailQty,vendor,brk_vendor,vend_rec,vend_key$[6]
dim 4%,J1
dim ardate$[8],duedate$[8],cname$[30],n1$[60],retval$[512],TIME$[26],z2$[2]
Dim CUST_A1$[142],VEND_A$[264],QTYMASK$[9],BQTYMASK$[20]
Dim L1$[20],L6$[60],PLOC$[18],PR_A2$[30],PROD_A$[156],S2$[20],U3$[60]
Dim CCD$[14],HOLD$[12],PREV_ITEM$[12],PREV_WHSE$[2],WHSE$[2]
! dx add xport reporting code
DXSetup:
Dim tmp$[600],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
For J = 2 To 13
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;F1$;
  Ropen #J,F1$
L_830: Next J
Data "1840","1888","1792","208","1728","1856","1808","-1","1744","2416","2432","2400"
CH_ROH = 2
CH_ROL = 3
CH_PROD = 4
CH_PRODLOC = 5
CH_CCODES = 6
CH_ROS = 7
CH_CUST = 8
CH_SORT = 9
CH_PRODWHSE = 10
CH_POHEAD = 11
CH_POLINE = 12
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[4] = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
V9[4] = 55 \ If J8 Let V9[4] = 18
Mat Read #1,3,0;CNAME$;
Read #1,0,100;ARDATE$;
Read #1,3,172;CURDATE;
X2 = CURDATE \ Gosub L_7820 \ if E let e$="Invalid current date!" \ error 10000
CURDATE_JULIAN = X2
TIME$ = "" \ Call Time(TIME$) \ TIME$ = TIME$[15]
QTYMASK$ = "-----#.##"
BQTYMASK$="--------#.##" ! larger for browser
!

!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"406",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("begwhse",tmp$) \ N1[1]=tmp$ ! beg warehouse
call dxget("endwhse",tmp$) \ if tmp$="" let N1[2]=99 else N1[2]=tmp$ ! end warehouse
call dxget("begordstat",tmp$) \ N1[3]=tmp$ ! beg order status
call dxget("endordstat",tmp$) \ if tmp$="" let N1[4]=59 else N1[4]=tmp$ ! end order status
call dxget("begshipdate",tmp$) \ if tmp$="" let START_SDATE=010170 else START_SDATE=tmp$ ! beg ship date
call dxget("endshipdate",tmp$) \ if tmp$="" let END_SDATE=123159 else END_SDATE=tmp$ ! end ship date
call dxget("begzone",BegZone$) \ BegZone$=BegZone$,Blank$ ! beg zone
call dxget("endzone",tmp$) \ if tmp$="" let EndZone$="99" else EndZone$=tmp$,EndParam$! end zone
call dxget("begprod",BegProd$) \ BegProd$=BegProd$,Blank$ ! beg prod
call dxget("endprod",EndProd$) \ EndProd$=EndProd$,EndParam$! end prod
call dxget("begvendor",tmp$) \ N1[7]=tmp$ ! beg vendor
call dxget("endvendor",tmp$) \ if tmp$="" let N1[8]=999999 else N1[8]=tmp$ ! end vendor
call dxget("begbin",BegBin$) \ BegBin$=BegBin$,Blank$ ! beg bin location
call dxget("endbin",EndBin$) \ EndBin$=EndBin$,EndParam$! end bin location
call dxget("sortby",tmp$) \ N2[0]=tmp$ ! sort by (list)
call dxget("stock",tmp$) \ N2[1]=tmp$ ! stock  1=stock  2=non-stock  3=both
call dxget("dt",tmp$) \ if tmp$="D" let N2[3]=1 else N2[3]=0 ! print detail or summary
call dxget("inc9date",tmp$) \ if tmp$="" let INCALL9=0 else INCALL9=1 ! include 9's ship date
!  dx end
!
N1$=" ",N1$ ! input parameters
!
! warehouse
if N1[1]<0 or N1[1]>99 let e$="Invalid starting warehouse, must be between 0 and 99!" \ error 10000
if N1[2]<N1[1] or N1[2]>99 let e$="Invalid ending warehouse, must be between starting warehouse and 99!" \ error 10000
!
! order status
if N1[3]<0 or N1[3]>59 let e$="Invalid starting order status, must be between 0 and 59!" \ error 10000
if N1[4]<N1[3] or N1[4]>59 let e$="Invalid ending order status, must be between starting order status and 59!" \ error 10000
!
! beg ship date
tmp$=START_SDATE using "&&&&&&" \ START_SDATE=tmp$[5,6],tmp$[1,4] ! mmddyy to yymmdd
X2 = START_SDATE \ Gosub L_7820
if E let e$="Invalid starting ship date!" \ error 10000
N1[5] = X2 ! julian
!
! end ship date
tmp$=END_SDATE using "&&&&&&" \ END_SDATE=tmp$[5,6],tmp$[1,4] ! mmddyy to yymmdd
X2 = END_SDATE \ Gosub L_7820 
if E let e$="Invalid ending ship date!" \ error 10000
N1[6] = X2 ! julian
if N1[6]<N1[5] let e$="Invalid ending ship date, must be >= to starting ship date!" \ error 10000 
!
! zone
X1=BegZone$ \ X2=EndZone$
if X1<0 or X1>99 let e$="Invalid starting zone, must be between 0 and 99!" \ error 10000
if X2<1 or 2>99 let e$="Invalid ending zone, must be between starting zone and 99!" \ error 10000
N1$[1,2]=X1 using "##"
N1$[3,4]=X2 using "##"
!
! product
if EndProd$<BegProd$ let e$="Invalid ending product, must be >= starting product" \ error 10000
N1$[5,16]=BegProd$
N1$[17,28]=EndProd$
!
! vendor
if N1[7]<0 or N1[7]>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
if N1[8]<N1[7] or N1[8]>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
! bin location
if EndBin$<BegBin$ let e$="Invalid ending bin location, must be >= to starting bin location!" \ error 10000
!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!
! - L_1000: Rem "=================================== get ranges
! - Call "progdflt","406","",77,RETVAL$
! - If RETVAL$[1,5] = "@@@@@"
! -   RETVAL$[1,2] = " 0"
! -   RETVAL$[3,4] = "99"
! -   RETVAL$[5,6] = " 0"
! -   RETVAL$[7,8] = "59"
! -   RETVAL$[9,14] = "700101"
! -   RETVAL$[15,20] = "591231"
! -   RETVAL$[21,22] = "  "
! -   RETVAL$[23,24] = "}}"
! -   RETVAL$[25,36] = "             "
! -   RETVAL$[37,48] = "zzzzzzzzzzzzz"
! -   RETVAL$[49,54] = "     0"
! -   RETVAL$[55,60] = "999999"
! -   RETVAL$[61,66] = "      "
! -   RETVAL$[67,72] = "zzzzzz"
! -   RETVAL$[73,73] = "1"
! -   RETVAL$[74,74] = "3"
! -   RETVAL$[75,75] = "0"
! -   RETVAL$[76,76] = "Y"
! -   Call "progdfltw","406","",77,RETVAL$,URECFLAG
! - End If 
! - Gosub DISP_SCREEN
! - Gosub INPUTS
!
START_REPORT: Rem ====
V9[1] = 99
! - If Err 0 Gosub ERR_ESCAPE
! - Print @0,0;'CS';
! - Print @0,4;'CL';"CLEARING SORT FILE..."
K9$ = " ",K9$
let brk_vendor=-1
CLEAR_NEXT_RECORD: Rem
Search #CH_SORT,3,1;K9$,R[9],E 
If E Goto CONTINUE_ON
Search #CH_SORT,5,1;K9$,R[9],E 
If E Let e$ = "syserrorfile 406 sortfile mode (m)=5 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \ error 10000
Goto CLEAR_NEXT_RECORD
!
CONTINUE_ON: Rem
Gosub SORT_RECORDS
!
if J8 ! dx xml headings
  !
  tmp$="BIN/LOC",fdel$,"PRODUCT CODE",fdel$
  tmp$=tmp$,"WH",fdel$,"U/M",fdel$,"PACK SIZE",fdel$
  tmp$=tmp$,"BRAND",fdel$,"DESCRIPTION",fdel$
  tmp$=tmp$,"TOT QTY",fdel$,"AVAIL",fdel$
  if N2[3] ! detail
    tmp$=tmp$,"CUST #",fdel$,"CUSTOMER NAME",fdel$
	tmp$=tmp$,"ORDER #",fdel$,"ZONE",fdel$
  else
    tmp$=tmp$,"SHORT",fdel$,"QTY ON PO",fdel$
	tmp$=tmp$,"DUE DATE",fdel$
  endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
!
START_PRINT: Rem ===
! - Print @0,4;'CL';"PRINTING . . ."
K9$ = " ",K9$
If N2[3] = 0
  PREV_ITEM$ = " ",PREV_ITEM$
  PREV_WHSE$ = " ",PREV_WHSE$
End If 
GET_NEXT_SORTREC: Rem
Search #CH_SORT,3,1;K9$,R[3],E
If E = 2 Goto END_OF_REPORT
if n2[0]=3 let vendor=k9$[1,6]
If N2[3] = 0 ! "summary version
  If PREV_ITEM$[1,4] <> "    " If PREV_ITEM$[1,12] <> K9$[15,26] !'ck for 1st time
    Gosub GET_DUE_DATE
    Gosub CONVERT_UNITS_SUMMARY
    If V9[1] > V9[4] Gosub PRINT_HEADING
    Gosub PRINT_SUMMARY_LINE
  End If 
End If 
If N2[3] = 0 ! "summary version
  If PREV_WHSE$[1,2] <> "  " If PREV_WHSE$[1,2] <> K9$[7,8] !"ck for 1st time
    Gosub GET_DUE_DATE
    Gosub CONVERT_UNITS_SUMMARY
    If V9[1] > V9[4] Gosub PRINT_HEADING
    Gosub PRINT_SUMMARY_LINE
  End If 
End If 
Gosub READ_ROL
If L3[0] = 1 ! "nonstock item
  Gosub L_30000
End If 
If L3[0] = 0 ! "stock item
  R[4] = L4[0]
  Gosub READ_PRODUCT
  Gosub READ_PRODWHSE
End If 
Gosub CONVERT_UNITS
If N2[3] = 0 ! "summary version
  ITEM_TOTQTY = ITEM_TOTQTY + TOTQTY
  PREV_ITEM$[1,12] = K9$[15,26]
  PREV_WHSE$[1,2] = K9$[7,8]
  Goto GET_NEXT_SORTREC
End If 
If N2[3] = 1 ! "detail version
  Gosub READ_CUST
  Gosub CONVERT_AVAILQTY
  Gosub PRINT_DETAIL_LINE
End If 
Goto GET_NEXT_SORTREC
!
END_OF_REPORT: Rem
If N2[3] = 0 ! "summary version
  Gosub GET_DUE_DATE
  Gosub CONVERT_UNITS_SUMMARY
  If V9[1] > V9[4] Gosub PRINT_HEADING
  Gosub PRINT_SUMMARY_LINE
End If 
Goto OUTEND
!
GET_DUE_DATE: Rem " ==== get next due date of po for item
HOLDDUE = 0
K12$ = " ",K12$
K12$[1,6] = L4[0] Using "######"
GET_NEXT_POLINE: Rem
Search #CH_POLINE,3,2;K12$,R[12],E
If E Return 
PRODREC = K12$[1,6]
If PRODREC <> L4[0] Goto END_GET_DUE_DATE
Mat Read #CH_POLINE,R[12],0;L1;
If L1[0] > 2 Goto GET_NEXT_POLINE
If L1[1] <> W1[0] Goto GET_NEXT_POLINE
Mat Read #CH_POLINE,R[12],376;POMISC;
If Not(POMISC[0]) Goto GET_NEXT_POLINE
Mat Read #CH_POLINE,R[12],12;L2;
If Not(L2[2]) Goto GET_NEXT_POLINE
X2 = L2[2] \ Gosub L_7820 \ if E Goto GET_NEXT_POLINE
DUEDATE_JULIAN = X2
If HOLDDUE <> 0
  If DUEDATE_JULIAN < CURDATE_JULIAN Goto GET_NEXT_POLINE
  If DUEDATE_JULIAN > HOLDDUE Goto GET_NEXT_POLINE
End If 
HOLDDUE = DUEDATE_JULIAN
Goto GET_NEXT_POLINE
END_GET_DUE_DATE: Rem
Return 
!
! - INPUTS: Rem  ======================
! - Print @0,23;'CE';"Enter #:field to edit R: reselect all P: print  S: save default or  E: exit ";
! - Input Len 16384 + 3;""X$ \ Call String(1,X$)
! - Print @0,23;'CE';
! - If X$ = "P" Goto START_REPORT
! - If X$ = "E" Let J8_FLAG = 0 \ Goto OUTEND
! - If X$ = "R" Goto EDT_ALL
! - If X$ = "" Goto INPUTS
! - If X$ = "S"
! - ASK_SAVE: Print @0,22;'CL';"Save for  A: all or  U: user access only, <CR>: do not save ";
! -   Input Len 16384 + 1;""Z2$
! -   Call String(1,Z2$)
! -   If Z2$ = "" Print @0,22;'CL'; \ Goto INPUTS
! -   If Z2$ <> "A" And Z2$ <> "U" Goto ASK_SAVE
! -   If Z2$ = "A" Let URECFLAG = 0 Else Let URECFLAG = 1
! -   Call "progdfltw","406","",77,RETVAL$,URECFLAG
! -   Print @0,22;'CL'
! - End If 
! - X = X$
! - If X < 1 Or X > 11 Goto INPUTS
! - Gosub EDT_FLDS
! - Goto INPUTS
! - EDT_ALL: Rem "want's all
! - For X = 1 To 11
! -   Gosub EDT_FLDS
! - Next X
! - Goto INPUTS
! - EDT_FLDS: Rem "edit them here
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
! - On X Gosub WHSE_RANGE,STATUS_RANGE,SHIPDATE_RANGE,ZONE_RANGE,PRODUCT_RANGE
! - On X - 5 Gosub VENDOR_RANGE,LOCATION_RANGE,SORT_BY,INCL_NONSTK,SUMM_OR_DETAIL
! - On X - 10 Gosub INCLUDE_ALL9
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
! - Return 
! - WHSE_RANGE: Rem"warehouse range
! - J5$ = "Enter the starting warehouse number maximum 99 "
! - J0$ = "3 00022803" \ J1 = N1[1]
! - Gosub L_7000 \ N1[1] = J1
! - J5$ = "Enter the ending warehouse number maximum 99 "
! - J0$ = "3 00024103" \ J1 = N1[2]
! - Gosub L_7000 \ N1[2] = J1
! - If N1[2] < N1[1] Gosub L_1390 \ Goto WHSE_RANGE
! - RETVAL$[1,2] = N1[1] Using "##"
! - RETVAL$[3,4] = N1[2] Using "##"
! - Return 
! - STATUS_RANGE: Rem"order status
! - J5$ = "Enter the starting order status maximum 59 "
! - J0$ = "3 00022804" \ J1 = N1[3]
! - Gosub L_7000 \ N1[3] = J1
! - If N1[3] > 59 Gosub L_1395 \ Goto STATUS_RANGE
! - END_ORDSTATUS: Rem"ending order status
! - J5$ = "Enter the ending order status maximum 59 "
! - J0$ = "3 00024204" \ J1 = N1[4]
! - Gosub L_7000 \ N1[4] = J1
! - If N1[4] > 59 Gosub L_1395 \ Goto END_ORDSTATUS
! - If N1[4] < N1[3] Gosub L_1390 \ Goto STATUS_RANGE
! - RETVAL$[5,6] = N1[3] Using "##"
! - RETVAL$[7,8] = N1[4] Using "##"
! - Return 
! - SHIPDATE_RANGE: Rem"ship dates
! - If START_SDATE = 0 Let START_SDATE = 700101
! - J1 = START_SDATE
! - J5$ = "Please Enter the Starting Date MMDDYY  "
! - J0$ = "5 00082205"
! - Gosub L_7000 \ X2 = 0
! - If J1 Let X2 = J1 \ Gosub L_7820 \ Goto SHIPDATE_RANGE
! - START_SDATE = J1;N1[5] = X2
! - ENT_ENDSDATE: Rem "Ending
! - J0$ = "5 00083605"
! - J5$ = "Please Enter the Ending date MMDDYY    "
! - If END_SDATE = 0 Let END_SDATE = 591231
! - J1 = END_SDATE
! - Gosub L_7000
! - X2 = J1 \ Gosub L_7820 \ Goto ENT_ENDSDATE
! - END_SDATE = J1;N1[6] = X2
! - If N1[6] < N1[5] Gosub L_1390 \ Goto SHIPDATE_RANGE
! - RETVAL$[9,14] = START_SDATE Using "######"
! - RETVAL$[15,20] = END_SDATE Using "######"
! - Return 
! - ZONE_RANGE: Rem range of zones
! - J5$ = "Enter the starting zone number maximum 99 "
! - J0$ = "2 00022806" \ J1$ = N1$[1,2]
! - Gosub L_7000 \ N1$[1,2] = J$
! - J5$ = "Enter the ending zone number maximum 99 "
! - J0$ = "2 00024206" \ J1$ = N1$[3,4]
! - Gosub L_7000 \ N1$[3,4] = J$
! - If N1$[3,4] < N1$[1,2] Gosub L_1390 \ Goto ZONE_RANGE
! - RETVAL$[21,22] = N1$[1,2]
! - RETVAL$[23,24] = N1$[3,4]
! - Return 
! - PRODUCT_RANGE: Rem"product code range
! - J5$ = "Enter the starting product code maximum zzzzzzzzzzzz"
! - J0$ = "2 00121807" \ J1$ = N1$[5,16]
! - Gosub L_7000 \ N1$[5,16] = J$
! - HOLD$ = N1$[5,16]
! - If Len(HOLD$) < 12 Let HOLD$[Len(HOLD$) + 1] = "            "
! - N1$[5,16] = HOLD$[1,12]
! - J5$ = "Enter the ending product code maximum zzzzzzzzzzzz"
! - J0$ = "2 00123207" \ J1$ = N1$[17,28]
! - Gosub L_7000 \ N1$[17,28] = J$
! - If N1$[17,28] < N1$[5,16] Gosub L_1390 \ Goto PRODUCT_RANGE
! - If N1$[5,16] = "             "
! -   If N1$[17,28] = "zzzzzzzzz"
! -     PRODRANGE = 0
! -   End If 
! - End If 
! - RETVAL$[25,36] = N1$[5,16]
! - RETVAL$[37,48] = N1$[17,28]
! - Return 
! - VENDOR_RANGE: Rem "vendor code range
! - J5$ = "Enter the starting vendor code maximum 999999"
! - J0$ = "3 00062408";J1 = N1[7]
! - Gosub L_7000 \ N1[7] = J1
! - J5$ = "Enter the ending vendor code maximum 999999"
! - J0$ = "3 00063808" \ J1 = N1[8]
! - Gosub L_7000 \ N1[8] = J1
! - If N1[8] < N1[7] Gosub L_1390 \ Goto VENDOR_RANGE
! - RETVAL$[49,54] = N1[7] Using "######"
! - RETVAL$[55,60] = N1[8] Using "######"
! - Return 
! - LOCATION_RANGE: Rem " bin location range
! - J5$ = "Enter the starting bin location "
! - J0$ = "1 00062409";J1$ = N1$[29,34]
! - Gosub L_7000 \ N1$[29,34] = J$
! - J5$ = "Enter the ending location "
! - J0$ = "2 00063809" \ J1$ = N1$[35,40]
! - Gosub L_7000 \ N1$[35,40] = J$
! - If N1$[35,40] < N1$[29,34] Gosub L_1390 \ Goto LOCATION_RANGE
! - RETVAL$[61,66] = N1$[29,34]
! - RETVAL$[67,72] = N1$[35,40]
! - Return 
! - SORT_BY: Rem"sort by
! - N2[0] = RETVAL$[73,73]
! - J5$ = "Choose the sort option desired"
! - J0$ = "3 00012013" \ J1 = N2[0]
! - Gosub L_7000
! - If J1 < 1 Or J1 > 3 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto SORT_BY
! - N2[0] = J1
! - RETVAL$[73,73] = N2[0] Using "#"
! - Return 
! - INCL_NONSTK: Rem
! - N2[1] = RETVAL$[74,74]
! - J5$ = "Choose 1, 2 or 3"
! - J0$ = "3 00015614" \ J1 = N2[1]
! - Gosub L_7000
! - If J1 < 1 Or J1 > 3 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto INCL_NONSTK
! - N2[1] = J1
! - RETVAL$[74,74] = N2[1] Using "#"
! - Return 
! - SUMM_OR_DETAIL: Rem"detail or summary
! - J5$ = "Enter  D: full detail or  S: summary "
! - J0$ = "2 00014415"
! - If N2[3] Let J1$ = "D" Else Let J1$ = "S"
! - Gosub L_7000
! - If J$ <> "D" And J$ <> "S"
! -   J7$ = "INVALID ENTRY"
! -   Gosub L_7600
! -   Goto SUMM_OR_DETAIL
! - End If 
! - If J$ = "D" Let N2[3] = 1 Else Let N2[3] = 0
! - RETVAL$[75,75] = N2[3] Using "#"
! - Return 
! - INCLUDE_ALL9: Rem" cct172918 Include all 9 in ship date
! - J5$ = "Enter Y or N "
! - J0$ = "6 00014416" \ J1 = INCALL9
! - Gosub L_7000
! - INCALL9 = J1
! - If INCALL9 Let RETVAL$[76,76] = "Y" Else Let RETVAL$[76,76] = "N"
! - Return 
! - L_1390: J7$ = "ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! " \ Gosub L_7600 \ Return 
! - L_1395: Rem
! - J7$ = "ENTER VALUE MUST BE LESS THAN OR EQUAL TO THE MAXIMUM NUMBER! "
! - Gosub L_7600
! - Return 
!
SORT_RECORDS: Rem
! - Print @0,4;'CL';"SORTING  . . ."
K2$ = " ",K2$
K2$[1,2] = N1[3] Using "##"
GET_NEXT_ROH: Rem =================== " loop through orders
Search #CH_ROH,3,1;K2$,R[2],E
If E = 2 Goto END_SORT_RECORDS
STATUS = K2$[1,2]
If STATUS > N1[4] Goto END_SORT_RECORDS
If STATUS < N1[3] Goto GET_NEXT_ROH
If STATUS > 7 If STATUS < 58 Goto GET_NEXT_ROH
Gosub READ_ROH
If H5[7] = 2 Or H5[7] = 21 Or H5[7] = 22 Goto GET_NEXT_ROH
If H4[2] < N1[1] Or H4[2] > N1[2] Goto GET_NEXT_ROH
If INCALL9 If H0[10] = 999999 Goto CHECK_ZONE
X2 = H0[10] \ Gosub L_7820 \ if E let X2 = 0
JWDATE = X2
If JWDATE < N1[5] Goto GET_NEXT_ROH
If JWDATE > N1[6] Goto GET_NEXT_ROH
CHECK_ZONE: Rem
Mat Read #CH_ROS,H0[2],126;S2$;
If S2$[19,20] < N1$[1,2] Goto GET_NEXT_ROH
If S2$[19,20] > N1$[3,4] Goto GET_NEXT_ROH
K3$ = " ",K3$
K3$[1,6] = K2$[3,8]
GET_NEXT_ROL: Rem
Search #CH_ROL,3,1;K3$,R[3],E
If E = 2 Goto GET_NEXT_ROH
If K3$[1,6] <> K2$[3,8] Goto GET_NEXT_ROH
Gosub READ_ROL
If S2[0] = 3 Goto GET_NEXT_ROL
If N2[1] = 1 If L3[0] = 1 Goto GET_NEXT_ROL
If N2[1] = 2 If L3[0] = 0 Goto GET_NEXT_ROL
If L3[0] = 1 ! "nonstock
  If L1$[1,12] >= N1$[5,16] If L1$[1,12] <= N1$[17,28]
    If S3[14] < N1[7] Goto GET_NEXT_ROL
    If S3[14] > N1[8] Goto GET_NEXT_ROL
    VENDOR = S3[14]
    PLOC$ = " ",PLOC$
    R[10] = 0
    Goto BUILD_SORTKEY
  Else 
    Goto GET_NEXT_ROL
  End If 
End If 
R[4] = L4[0]
Gosub READ_PRODUCT
If PROD_A$[140,151] > N1$[17,28] Goto GET_NEXT_ROL
If PROD_A$[140,151] < N1$[5,16] Goto GET_NEXT_ROL
Gosub READ_PRODWHSE
If W2[3] < N1[7] Goto GET_NEXT_ROL
If W2[3] > N1[8] Goto GET_NEXT_ROL
VENDOR = W2[3]
K5$ = " ",K5$
K5$[1,12] = L1$[1,12]
K5$[13,14] = W1[0] Using "##"
WHSE$[1,2] = K5$[13,14]
PLOC$ = " ",PLOC$
Search #CH_PRODLOC,3,1;K5$,R[5],E
If E Goto BUILD_SORTKEY
If K5$[1,12] <> L1$[1,12] Goto BUILD_SORTKEY
If K5$[13,14] <> WHSE$[1,2] Goto BUILD_SORTKEY
If PLOC$[13,18] < N1$[29,34] Goto GET_NEXT_ROL
If PLOC$[13,18] > N1$[35,40] Goto GET_NEXT_ROL
Mat Read #CH_PRODLOC,R[5],0;PLOC$;
BUILD_SORTKEY: Rem ===========  build sortkey
K9$ = " ",K9$
If N2[0] = 1 Let K9$[5,6] = S2$[19,20]
If N2[0] = 2 Let K9$[1,6] = PLOC$[13,18]
If N2[0] = 3 Let K9$[1,6] = VENDOR Using "######"
K9$[7,8] = H4[2] Using "##"
K9$[9,14] = PLOC$[13,18]
K9$[15,26] = L1$[1,12]
K9$[27,28] = S2$[19,20]
K9$[29,34] = H0[4] Using "######"
K9$[35,40] = H0[7] Using "######"
K9$[41,46] = R[2] Using "######"
K9$[47,49] = K3$[7,9]
Search #9,4,1;K9$,R[3],E
If E Let e$ = "syserrorfile 406 sortfile mode (m)=4 keyno (k)=1 r=",R[3]," e=",e," keyval (k$)=",K9$ \ error 10000
Goto GET_NEXT_ROL
!
END_SORT_RECORDS: Rem
K9$ = " ",K9$
Return 
!
! - DISP_SCREEN: Rem "========================================== screen
! - Print 'CS'
! - Print @0,0;"-MX406-";@33,0;"SHOPPING LIST"
! - Print @20,2;'BR';"STARTING";@36,2;"ENDING";'ER';
! - Print @0,3;"  1> WAREHOUSE "
! - Print @0,4;"  2> ORDER STATUS"
! - Print @0,5;"  3> SHIP DATES  "
! - Print @0,6;"  4> ZONE";
! - Print @0,7;"  5> PRODUCT: "
! - Print @0,8;"  6> VENDOR: "
! - Print @0,9;"  7> BIN LOCATION"
! - Print @0,10;"  8> SORT BY:       1: ZONE";
! - Print @0,11;"                    2: BIN LOCATION";
! - Print @0,12;"                    3: VENDOR"
! - Print @0,13;"           CHOOSE:"
! - Print @0,14;"  9> PRINT  1: stock only,  2: non-stock only,  3: both"
! - Print @0,15;" 10> PRINT  D: full detail or  S: summary? "
! - Print @0,16;" 11> Include the ship date 999999? "
! - N1[1] = RETVAL$[1,2]
! - N1[2] = RETVAL$[3,4]
! - Print Using "##";@28,3;N1[1];@42,3;N1[2];
! - N1[3] = RETVAL$[5,6]
! - N1[4] = RETVAL$[7,8]
! - Print Using "##";@28,4;N1[3];@42,4;N1[4];
! - START_SDATE = RETVAL$[9,14]
! - END_SDATE = RETVAL$[15,20]
! - X2 = START_SDATE
! - If X2
! -   Gosub L_7700
! -   Print @22,5;X$;
! -   X2 = START_SDATE \ Gosub L_7820 \ X = X \ N1[5] = X2
! - End If 
! - X2 = END_SDATE
! - If X2
! -   Gosub L_7700
! -   Print @36,5;X$;
! -   X2 = END_SDATE \ Gosub L_7820 \ X = X \ N1[6] = X2
! - End If 
! - N1$[1,2] = RETVAL$[21,22]
! - N1$[3,4] = RETVAL$[23,24]
! - Print @24,6;N1$[1,2];@42,6;N1$[3,4];
! - N1$[5,16] = RETVAL$[25,36]
! - N1$[17,28] = RETVAL$[37,48]
! - Print @18,7;N1$[5,16];@32,7;N1$[17,28];
! - N1[7] = RETVAL$[49,54]
! - N1[8] = RETVAL$[55,60]
! - Print Using "######";@24,8;N1[7];@38,8;N1[8];
! - N1$[29,34] = RETVAL$[61,66]
! - N1$[35,40] = RETVAL$[67,72]
! - Print @24,9;N1$[29,34];@38,9;N1$[35,40];
! - N2[0] = RETVAL$[73,73]
! - Print Using "#";@20,13;N2[0];
! - N2[1] = RETVAL$[74,74]
! - Print @56,14;RETVAL$[74,74]
! - N2[3] = RETVAL$[75,75]
! - If N2[3] Print @44,15;"D"; Else Print @44,15;"S";
! - If RETVAL$[92,92] = "Y" Let INCALL9 = 1 Else Let INCALL9 = 0
! - Print @44,16;RETVAL$[76,76];
! - Return 
!
CONVERT_UNITS: Rem "============================== convert figures
CNVTA = L7[2] \ CNVTU[0] = 0
If S2[1] Let CNVTA = CNVTA * S2[1]
If N2[3] = 0 Let CNVTU[1] = PFU1[9]
If N2[3] = 1 Let CNVTU[1] = UN[0]
CNVTU[2] = 1
Gosub L_20000
TOTQTY = AMOUNT
Gosub GET_CCODE_DESC
Return 
!
CONVERT_UNITS_SUMMARY: Rem " =====================================
CNVTA = W3[1]
If S2[1] Let CNVTA = CNVTA * S2[1]
Gosub L_20000
QTYONPO = AMOUNT
Gosub GET_CCODE_DESC
CONVERT_AVAILQTY: Rem " ==========================================
CNVTA = W3[0] - W3[2]
If S2[1] Let CNVTA = CNVTA * S2[1]
Gosub L_20000
AVAILQTY = AMOUNT
Return 
!
GET_CCODE_DESC: Rem "now get u/m from CCODES
CCD$[11,14] = "BASE"
If PFU1[9] = -1 Let CCD$[11,14] = "CWT "
If PFU1[9] = -2 Let CCD$[11,14] = "LOT "
If PFU1[9] = -3 Let CCD$[11,14] = "LB  "
If PFU1[9] > 0 Mat Read #CH_CCODES,PFU1[8],0;CCD$;
If UN[0] > 0 Mat Read #CH_CCODES,UN[0],0;CCD$;
If UN[0] = -1 Let CCD$[11,14] = "CWT "
If UN[0] = -2 Let CCD$[11,14] = "LOT "
If UN[0] = -3 Let CCD$[11,14] = "LB  "
Return 
!
PRINT_HEADING: Rem
if J8 return ! dx xml
If V9[1] < V9[4] Return 
! - If V9[0] If J8_FLAG Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J8_FLAG) Print #0;"\14\";
V9[0] = V9[0] + 1
V9[1] = 0
If Not(J8_FLAG) Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";V9[0]
V9[1] = V9[1] + 1
Print #0;" - mx406 - ";Msc$(3);
If N2[3] = 0 ! "summary
  Print #0; Tab 48;"SUMMARY SHOPPING LIST"
  V9[1] = V9[1] + 1
  Gosub PRINT_SORTEDBY_HDG
  Gosub PRINT_SUMMARY_SUBHDG
  PREV_ITEM$[1,12] = K9$[15,26]
Else 
  Print #0; Tab 50;"DETAIL SHOPPING LIST"
  V9[1] = V9[1] + 1
  Gosub PRINT_SORTEDBY_HDG
  Gosub PRINT_DETAIL_SUBHDG
End If 
Return 
!
PRINT_SORTEDBY_HDG: Rem
if J8 return ! dx xml
!
Print #0; Tab 47;"REPORT SORTED BY: ";
If N2[0] = 1 Print #0;"ZONE"
If N2[0] = 2 Print #0;"BIN LOCATION"
If N2[0] = 3 Print #0;"VENDOR"
Print #0;""
V9[1] = V9[1] + 2
Return 
!
PRINT_DETAIL_SUBHDG: Rem ===================================================
if J8 return ! dx xml
if n2[0]=3 and vendor=brk_vendor ! if sort by vendor
   print #0; "Vendor "; 
   let vend_key$=k9$[1,6] 
   search #13,2,1;vend_key$,vend_rec,e 
   if E 
      let vend_a$=" ",vend_a$
      let vend_a$[1,19]="Vendor not on file!"
   else
      mat read #13,vend_rec,0;vend_a$;
   endif
   print #0;vend_key$; " ";vend_a$[1,30];" ";vend_a$[31,60]
   print #0;" "
   let v9[1]=v9[1]+2
endif
!
Print #0; Tab 1;"BINLOC";
Print #0; Tab 8;"PRODUCT CODE";
Print #0; Tab 21;"WH";
Print #0; Tab 24;" U/M";
Print #0; Tab 29;"PACK SIZE";
Print #0; Tab 45;"BRAND";
Print #0; Tab 56;"DESCRIPTION";
Print #0; Tab 77;"TOT QTY";
Print #0; Tab 87;"  AVAIL";
Print #0; Tab 95;"CUST #";
Print #0; Tab 102;"CUSTOMER NAME";
Print #0; Tab 122;"ORDER#";
Print #0; Tab 129;"ZN"
Print #0;""
V9[1] = V9[1] + 2
Return 
!
PRINT_DETAIL_LINE: Rem ============================================
if J8 if N2[3]=0 return ! dx xml summary
!
if J8
  if n2[0]=3 and vendor<>brk_vendor ! if sort by vendor
   let vend_key$=k9$[1,6] 
   search #13,2,1;vend_key$,vend_rec,e 
   if E 
      let vend_a$=" ",vend_a$ 
      let vend_a$[1,19]="Vendor not on file!" 
   else 
      mat read #13,vend_rec,0;vend_a$; 
   endif 
   Tmp$="**VENDOR**",fdel$,vend_key$,fdel$,vend_a$[1,30],fdel$,vend_a$[31,60],fdel$
   tmp$=tmp$,vend_a$[91,105],fdel$,vend_a$[106,107],fdel$,vend_a$[108,116],fdel$
   tmp$=tmp$,fdel$,fdel$,fdel$,fdel$,fdel$,fdel$ ! fill to 13 fields
   call addtostr(e$,rstr$,tmp$+rdel$)  ! IF NOT WANTED - REM THIS LINE
   let brk_vendor=vendor 
  endif 
  tmp$=K9$[9,14],fdel$,rtrim$(L1$[1,12]),fdel$
  tmp$=tmp$,W1[0] Using "##",fdel$
  tmp$=tmp$,CCD$[11,14],fdel$
  If L3[0] = 0 ! " only print for stock items
    tmp$=tmp$,rtrim$(PR_A2$[13,27]),fdel$
    tmp$=tmp$,U3$[1,10],fdel$
  else
    tmp$=tmp$,"",fdel$,"",fdel$
  End If 
  tmp$=tmp$,rtrim$(L6$[1,18]),fdel$
  tmp$=tmp$,TOTQTY Using BQTYMASK$,fdel$
  if L3[0]=0 let tmp1$=AVAILQTY Using BQTYMASK$ else tmp1$=""
  tmp$=tmp$,tmp1$,fdel$
  tmp$=tmp$,K8$[1,6],fdel$
  tmp$=tmp$,rtrim$(CUST_A1$[31,60]),fdel$
  tmp$=tmp$,K9$[35,40],fdel$,K9$[27,28],fdel$
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  return
end if
!
If V9[1] > V9[4] Gosub PRINT_HEADING
if n2[0]=3 and vendor<>brk_vendor ! if sort by vendor
   let vend_key$=k9$[1,6] 
   search #13,2,1;vend_key$,vend_rec,e 
   if E 
      let vend_a$=" ",vend_a$ 
      let vend_a$[1,19]="Vendor not on file!" 
   else 
      mat read #13,vend_rec,0;vend_a$; 
   endif 
   print #0;"** ";vend_key$; " ";vend_a$[1,30];" ";vend_a$[31,60];
   print #0;" ";vend_a$[91,105];" ";vend_a$[106,107];" ";vend_a$[108,116]
   print #0;" " 
   let v9[1]=v9[1]+2 
   let brk_vendor=vendor 
endif 
If V9[1] > V9[4] Gosub PRINT_HEADING
Print #0; Tab 1;K9$[9,14];
Print #0; Tab 8;L1$[1,12];
Print #0; Using "##"; Tab 21;W1[0];
Print #0; Tab 24;CCD$[11,14];
If L3[0] = 0 ! " only print for stock items
  Print #0; Tab 29;PR_A2$[13,27];
  Print #0; Tab 45;U3$[1,10];
End If 
Print #0; Tab 56;L6$[1,18];
Print #0; Using QTYMASK$; Tab 75;TOTQTY;
If L3[0] = 0 Print #0; Using QTYMASK$; Tab 85;AVAILQTY;
Print #0; Tab 95;K8$[1,6];
Print #0; Tab 102;CUST_A1$[31,49];
Print #0; Tab 122;K9$[35,40];
Print #0; Tab 129;K9$[27,28]
Print #0;""
V9[1] = V9[1] + 2
Return 
!
PRINT_SUMMARY_SUBHDG: Rem ============================================
if J8 return ! dx xml
!
if n2[0]=3 and vendor=brk_vendor ! if sort by vendor
   print #0; "Vendor "; 
   let vend_key$=k9$[1,6] 
   search #13,2,1;vend_key$,vend_rec,e 
   if E 
      let vend_a$=" ",vend_a$
      let vend_a$[1,19]="Vendor not on file!"
   else
      mat read #13,vend_rec,0;vend_a$;
   endif
   print #0;vend_key$; " ";vend_a$[1,30];" ";vend_a$[31,60]
   print #0;" "
   let v9[1]=v9[1]+2
endif
Print #0; Tab 1;"BINLOC";
Print #0; Tab 8;"PRODUCT CODE";
Print #0; Tab 21;" WH";
Print #0; Tab 25;" U/M";
Print #0; Tab 30;"PACK SIZE";
Print #0; Tab 46;"BRAND";
Print #0; Tab 62;"DESCRIPTION";
Print #0; Tab 88;"TOT QTY";
Print #0; Tab 97;"  AVAIL";
Print #0; Tab 106;"SHORT";
Print #0; Tab 113;"QTYONPO";
Print #0; Tab 122;"DUE DATE"
Print #0;""
V9[1] = V9[1] + 2
Return 
!
PRINT_SUMMARY_LINE: Rem ===========================================
if J8 if N2[3] return ! dx xml detail
!
if J8
  if n2[0]=3 and vendor<>brk_vendor ! if sort by vendor
   let vend_key$=k9$[1,6] 
   search #13,2,1;vend_key$,vend_rec,e 
   if E 
      let vend_a$=" ",vend_a$ 
      let vend_a$[1,19]="Vendor not on file!" 
   else 
      mat read #13,vend_rec,0;vend_a$; 
   endif 
   tmp$="**VENDOR**",fdel$,vend_key$,fdel$,vend_a$[1,30],fdel$,vend_a$[31,60],fdel$
   tmp$=tmp$,vend_a$[91,105],fdel$,vend_a$[106,107],fdel$,vend_a$[108,116],fdel$
   tmp$=tmp$,fdel$,fdel$,fdel$,fdel$,fdel$ ! fill to 12 fields
   call addtostr(e$,rstr$,tmp$+rdel$) ! IF NOT WANTED - REM THIS LINE
   let brk_vendor=vendor 
  endif 
  tmp$=K9$[9,14],fdel$,rtrim$(L1$[1,12]),fdel$
  tmp$=tmp$,PREV_WHSE$[1,2],fdel$
  tmp$=tmp$,CCD$[11,14],fdel$
  If L3[0] = 0 ! " only print for stock items
    tmp$=tmp$,rtrim$(PR_A2$[13,27]),fdel$
    tmp$=tmp$,rtrim$(U3$[1,10]),fdel$
  else
    tmp$=tmp$,"",fdel$,"",fdel$
  End If 
  tmp$=tmp$,rtrim$(L6$[1,20]),fdel$
  tmp$=tmp$,ITEM_TOTQTY Using BQTYMASK$,fdel$
  If L3[0] = 0 ! "only print for stock item
    tmp$=tmp$,AVAILQTY Using BQTYMASK$,fdel$
    If ITEM_TOTQTY > AVAILQTY let tmp1$="SHORT" else tmp1$=""
    tmp$=tmp$,tmp1$,fdel$
    tmp$=tmp$,QTYONPO Using BQTYMASK$,fdel$
    If HOLDDUE = 0
      DUEDATE$ = "  NONE  "
    Else 
      X2 = HOLDDUE \ Gosub L_7770
      DUEDATE$ = X$
    End If 
    tmp$=tmp$,DUEDATE$,fdel$
  else
    tmp$=tmp$,"",fdel$,"",fdel$,"",fdel$,"",fdel$
  endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  goto ExitSummaryLine
end if
!
If V9[1] > V9[4] Gosub PRINT_HEADING
if n2[0]=3 and vendor<>brk_vendor ! if sort by vendor
   let vend_key$=k9$[1,6] 
   search #13,2,1;vend_key$,vend_rec,e 
   if E 
      let vend_a$=" ",vend_a$ 
      let vend_a$[1,19]="Vendor not on file!" 
   else 
      mat read #13,vend_rec,0;vend_a$; 
   endif 
   print #0;"** ";vend_key$; " ";vend_a$[1,30];" ";vend_a$[31,60];
   print #0;" ";vend_a$[91,105];" ";vend_a$[106,107];" ";vend_a$[108,116]
   print #0;" " 
   let v9[1]=v9[1]+2 
   let brk_vendor=vendor 
endif 
If V9[1] > V9[4] Gosub PRINT_HEADING
Print #0; Tab 1;K9$[9,14];
Print #0; Tab 8;L1$[1,12];
Print #0; Tab 22;PREV_WHSE$[1,2];
Print #0; Tab 25;CCD$[11,14];
If L3[0] = 0 ! " only print for stock items
  Print #0; Tab 30;PR_A2$[13,27];
  Print #0; Tab 46;U3$[1,15];
End If 
Print #0; Tab 62;L6$[1,20];
Print #0; Using QTYMASK$; Tab 86;ITEM_TOTQTY;
If L3[0] = 0 ! "only print for stock item
  Print #0; Using QTYMASK$; Tab 95;AVAILQTY;
  If ITEM_TOTQTY > AVAILQTY
    Print #0; Tab 106;"SHORT";
  End If 
  Print #0; Using QTYMASK$; Tab 111;QTYONPO;
  If HOLDDUE = 0
    DUEDATE$ = "  NONE  "
  Else 
    X2 = HOLDDUE \ Gosub L_7770
    DUEDATE$ = X$
  End If 
  Print #0; Tab 122;DUEDATE$
End If 
Print #0;""
V9[1] = V9[1] + 2
!
ExitSummaryLine:
HOLDDUE = 0
ITEM_TOTQTY = 0
AVAILQTY = 0
Return 
!
READ_ROH: Rem "==========   read order header record
Mat Read #CH_ROH,R[2],0;H0;
Mat Read #CH_ROH,R[2],78;H4;
Mat Read #CH_ROH,R[2],104;H5;
Mat Read #CH_ROH,R[2],408;H6;
Return 
!
READ_ROL: Rem "=========   read order line record
Mat Read #CH_ROL,R[3],8;L3;
Mat Read #CH_ROL,R[3],16;L4;
Mat Read #CH_ROL,R[3],32;L5;
Mat Read #CH_ROL,R[3],80;L6$;
Mat Read #CH_ROL,R[3],140;L1$;
Mat Read #CH_ROL,R[3],168;L7;
Mat Read #CH_ROL,R[3],250;UN;
Mat Read #CH_ROL,R[3],256;S2;
Mat Read #CH_ROL,R[3],260;S3;
Return 
!
READ_CUST: Rem " ========== read customer record
K8$ = " ",K8$
K8$[1,6] = K9$[29,34]
Search #CH_CUST,2,1;K8$,R[8],E
If E
  CUST_A1$ = "CUSTOMER NOT FOUND"
  Return 
End If 
Mat Read #CH_CUST,R[8],0;CUST_A1$;
Return 
!
READ_PRODUCT: Rem ===================
Mat Read #CH_PROD,R[4],0;PROD_A$;
Mat Read #CH_PROD,R[4],256;A;
Mat Read #CH_PROD,R[4],512;PFU1;
Mat Read #CH_PROD,R[4],554;PFU2;
Mat Read #CH_PROD,R[4],684;U3$;
Mat Read #CH_PROD,R[4],944;PR_A2$;
Return 
!
READ_PRODWHSE: Rem =====================
K10$ = " ",K10$
K10$[1,12] = L1$[1,12]
K10$[13,14] = L4[3] Using "##"
Search #CH_PRODWHSE,2,1;K10$,R[10],E
If E Return 
Mat Read #CH_PRODWHSE,R[10],32;W1;
Mat Read #CH_PRODWHSE,R[10],38;W2;
Mat Read #CH_PRODWHSE,R[10],78;W3;
Return 
!
! - L_7000: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 <> 3 If J0 <> 4 Goto L_7070
! - If J0 = 3 Let J2$ = "#",J2$
! - If J0 = 4 Let J2$ = "-",J2$
! - J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - L_7070: J1$[J3 + 1] = ""
! - If J0 < 3 Goto L_7105
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 = 6 Goto L_7105
! - If J0 <> 5 Goto L_7100
! - J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6 \ J6 = 0
! - J1$ = J9$[4,7],J9$[2,3],"  " \ Goto L_7105
! - L_7100: J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! - If Len(J5$) > Msc(33) - 2 Let J5$[Msc(33) - 2] = ""
! - L_7105: If J5 < Msc(34) - 1 Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - Print @J4,J5;'BU';J1$[1,J3]; Tab (J4 + J3);'EU';" "; \ If J0 = 5 Print "  ";
! - Print @J4,J5;'BU'; \ Input Len 16384 + J3;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) <= J3 Goto L_7130
! - J7$ = "TOO LONG !" \ Gosub L_7600 \ Goto L_7105
! - L_7130: J9$ = J4$ \ If Len(J9$) Goto L_7145
! - If J0$[3,4] = "00" Let J9$ = J1$ \ Goto L_7145
! - J7$ = "FIELD MUST BE ENTERED !" \ Gosub L_7600 \ Goto L_7105
! - L_7145: For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] >= " " If J9$[J8,J8] <= "~" Next J8 \ Goto L_7160
! - J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!" \ Gosub L_7600 \ Goto L_7105
! - L_7160: On J0 Goto L_7165,L_7165,L_7185,L_7185,L_7185,L_7330 \ Stop 
! - L_7165: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto L_7345
! - L_7185: J9 = 0;J9[1] = 0 \ For J8 = 1 To Len(J9$)
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "-" Goto L_7235
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "+" Goto L_7235
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto L_7230
! -   If J9$[J8,J8] = " " Goto L_7235
! -   If J8 <> 1 Or Len(J0$) < 11 Goto L_7210
! -   J7$ = "" \ Let J7$ = J0$[10] To J9$[J8,J8] : J7 \ If J7 Goto L_7235
! - L_7210: If J9$[J8,J8] <> "." Goto L_7250
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto L_7260
! -   If J9 Goto L_7250
! -   J9 = 1
! - L_7230: If J9 Let J9 = J9 + 1
! -   If Not(J9) Let J9[1] = J9[1] + 1
! - L_7235: Next J8
! - If J0 = 5 Goto L_7265
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto L_7260
! - L_7242: If J6 If J9[1] > (J3 - J6 - 1) Let J7$ = "TOO MANY INTEGERS FOR FIELD !" \ Goto L_7260
! - If J0 = 4 If J6 If J9[1] > (J3 - J6 - 2) Let J9[1] = 99 \ Goto L_7242
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto L_7345
! - L_7250: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - L_7260: Gosub L_7600 \ Goto L_7105
! - L_7265: If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto L_7325
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto L_7315
! - If J9[1] < 1 Goto L_7325
! - On J9 Goto L_7290,L_7300,L_7290,L_7285,L_7290,L_7285
! - On J9 - 6 Goto L_7290,L_7290,L_7285,L_7290,L_7285,L_7290
! - Goto L_7325
! - L_7285: If J9[1] > 30 Goto L_7325
! - L_7290: If J9[1] > 31 Goto L_7325
! - Goto L_7315
! - L_7300: If J9[1] > 29 Goto L_7325
! - If Not(Fra(J9[2] / 4)) Goto L_7315
! - If J9[1] > 28 Goto L_7325
! - L_7315: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub L_7700
! - J$ = X$ \ J3 = 8 \ Goto L_7345
! - L_7325: J7$ = "INVALID DATE !" \ Gosub L_7600 \ Goto L_7105
! - L_7330: If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto L_7345
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto L_7345
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !" \ Gosub L_7600 \ Goto L_7105
! - L_7345: J$[J3 + 1] = "" \ Print @J4,J5;J$;" "; \ Return 
! - L_7600: If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
! - Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
! - Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
! - Print @0,Msc(34) - 1;'CL'; \ Return 
! - L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
! - X$ = " ",X$ \ X$[10] = ""
! - X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
! - X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
! - X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
! - X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
! - If Not(X2) Let X$ = "        "
! - Return 
!
L_7770: Rem DATE JULIAN X2 TO X$
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
!
L_7820: Rem  CONVERT YYMMDD TO JULIAN (E=NOGOOD)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 
!
! - DT3[0] = X2;DT3[1] = X2;FLAG = 0
! - Call "JULIANUTIL",DT3[],X$,FLAG
! - Return 
! - X$ = X2 Using "&&&&"
! - DT3[0] = X$[1,2];DT3[1] = X$[3,4]
! - If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
! - If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
! - X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
! - X2 = X$[1,6] \ Return 
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: goto L_20120 ! - was If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: ! - Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
! - If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ rem ! - Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
!
L_30000: Rem ===== set units for conversions (stock/nonstock version)
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[15] = CTWT
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 
!
OUTEND: Rem EXIT PROGRAM
! dx close
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!

End 
!
! - If J8_FLAG Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
! - If Not(J8_FLAG) Print #0;"\14\"
! - Print 'CS'
! - Chain "MX000C"
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
