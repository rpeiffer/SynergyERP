! >>> Program 686
!
! description   Product Price Type Listing
!
! loadsave -w -n 100,10 -o prog/dxport/686.dl4 src/686.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX686 - CATALOG PRICE PRINT
Rem AUTHOR: UBS   JUL 24, 1987
Rem LAST UPDATE: 7/92 - ADD COMMODITY RANGE
! Last Update:  rek (02/04/93) add break tables for matrix products
!               rns (06/15/1993) add sort by option/clean up
!               rek (05/23/1994) add warehouse pricing
!               rns (05/31/1994) wide or narrow format
!               04/01/1997 - DATE COMPARE JULIAN
! jliu cct140901 10/19/00 - if there is not break table setting up in prod file
!                search the break table in comm file
!???:04/16/00:Converted to Bedit   (mkbedit 1.2b)
! cct167193 pricetype expansion
! jliu cct125176 8/11/08 bring the prod group to rev9
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  7, 2005  13:00:02
Rem /w2/papermaster/r2005//usr/acct/valerie/work/r2005/mx/mx686.src (univ2) [valerie] {48010}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/inc/fileprtdefault.inc" ! port default
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
External Lib "libprod.lib"
Declare External Sub ProdGroup
Declare Intrinsic Sub DateToJulian,InpBuf,String,VerifyDate,programdump
!Option Default Dialect IRIS1


If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
Def FNZ(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Dim Z$[50]
L_200: Rem
!Print 'CS';@0,0;"MX686";@35,0;"PRICE LIST"
!Print @5,5;"1> CUSTOMER PRICE BOOK (WITH FORMULAS)"
!Print @5,6;"2> PRICE TYPE LISTING"
!Print @5,7;"3> EXIT TO MENU"
!Print @5,9;"CHOOSE: ";
!Input ""Z$ \ If Z$ = "3" Goto OUTEND
!If Z$ = "1" Chain "MX686A"
!If Z$ <> "2" Goto L_200
Dim 1%,PFU1[20],CNVTU[2],UN[2]
Dim 2%,C4[8]
Dim 3%,PFU2[6],CNVTA,A[33],UWORK[10],FIELD,BASEC
Dim 1%,J0,J2,J3,J4,J5,J6,J7,J8,J9[2],Y,WIDE,V9[4],JJ8
Dim 2%,X,X1[9],D9[20],JPENDS,JPENDE,JWDATE
Dim 3%,J1,X2
Dim J$[50],J0$[15],J1$[50],J2$[20],J4$[50],J5$[70],J7$[40]
Dim J9$[50],X$[10]
Dim 1%,CCBASE,F,M5[3],SPC3[2],BRK,B3,CCBRKTBL,SORT,DIR,WHPARC[5],PD1[9]
Dim 1%,PFTB[3],2%,PENDS,PENDE,PFCO[3],PLC[3],3%,W3[24],WHLV[2],WHMISC[6]
Dim 1%,CCUPBRK,PRFAC,PM5[5,4]
Dim 3%,A4,PRPARC[3],PF_LOAD2,PREC[1],1%,LM[1],WHLM[1],2%,DT3[1]
Dim 2%,B[24],CCMULTI,M6[3],Q0[1],C0,PCDATE,R[20],WHBLD[2],W7[14],WHSE,DFWH
Dim 2%,CCUPCHG
Dim 3%,J,X3,T9[1],M7,BRACKET,BRACKET1,B1[10,2],BTOT[10,1],QUAN[10,1],X4
dim 3%,whmisc2[7],parm[5]
Dim COMM$[4],COMD1$[4],COMD2$[4],D$[35],P60$[50],BDESC$[20],PMASK$[12],WH$[2]
Dim CNAME$[30],J3$[40],PCDATE$[8],CCD$[14],SUNIT$[14],KEY_CMDTY$[8]
Dim K1$[50],K2$[12],K3$[12],P9$[50],A$[156],WHPROD$[12],W1$[32]
Dim P61$[256],KEYCOMM$[10],keyprod$[14]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[600],msg$[100],rstr$[2000],webstr$[2000]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[20]	  \ Blank$=" ",Blank$
dim prt. as prtdefault ! port defaults
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
For J = 2 To 10
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;Z$;
  Ropen #J,Z$
L_830: Next J
Data "1792","-1","-1","-1","1728","1712","1952","-1","1744"
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
Let Z$="2/SPRICEMARK"+Str$(COID) ! rev9=pricemark, xrev9=Spricemark
ROPEN #3,z$
CH_CHEAD = 4;CH_CMDTY = 12
Z$ = "2/commodity"+Str$(COID)
Open #CH_CMDTY,Z$
Z$ = "2/commhead"+Str$(COID)
Open #CH_CHEAD,Z$
Read #1,3;CNAME$; \ Mat Read #1,115,0;D9;
Mat Read #1,0,112;PCDATE;
Mat Read #1,19,50;P9$; \ Mat Read #1,60,50;P60$;
Mat Read #1,61;P61$;
X2 = PCDATE \ Gosub L_7700 \ PCDATE$ = X$[1,8]
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
If Err 0 Let JJ8 = Spc(8)
JJ8 = 0 \ J9 = Chf(0)
If Err 0 Gosub ERR_TRAP
If JJ8 If JJ8 <> 49 Gosub ERR_TRAP
V9[3] = 55 \ If JJ8 Let V9[3] = 18
if jj8 ! to xml - not on this report!
	e$="Can not print to browser"
	goto Err_Msg
Endif
! call dxsave(0,"tmp/686sv.txt!")
!Open #77,"PRTDFLT","USERPORT"
!Read #78,Spc(6),10;A4; \ If Not(A4) Let A4 = Spc(6)
!Mat Read #77,A4,0;PD1;
call GetPortDefault(e$,IntCO,UserID$,portnum,rec_uac,prt.) ! get port default
DFWH = prt.Wh ! PD1[2]
eflag=0;e$=" "
L_1000: Rem "======================================= get inputs
!Gosub L_8000 ! screen print
!Print 'CS';@0,0;"MX686";@35,0;"PRICE TYPE LISTING"
!Print @0,5;"ENTER STARTING PRODUCT CODE, <CR> FOR FIRST OR  E: TO EXIT: ";
!Print @6,6;"ENDING   PRODUCT CODE, <CR> FOR LAST  OR  E: TO EXIT: ";
!Print @0,8;"ENTER STARTING COMMODITY, <CR> FOR FIRST OR  E: TO EXIT: ";
!Print @6,9;"ENDING   COMMODITY, <CR> FOR LAST  OR  E: TO EXIT: ";
!Print @0,11;"ENTER THE PRICE TYPE (1-999,  B: TEN BRACKET  E: Exit) ";
!Print @0,12;"INCLUDE BREAK LEVEL PRICES (Y/N/E)? ";
!Print @0,13;"SORT BY:  1> PRODUCT CODE,  2> COMMODITY CODE ";
!Print @0,15;"USE ANY PENDING COST/TABLES? (Y/N/E)   ";
!If P9$[32,32] = "Y" Print @0,17;"ENTER WAREHOUSE TO PRINT FOR,  0: FOR MAIN, OR  E: TO EXIT:  ";
!Print @0,19;'ER BR';" W: ";'ER';"WIDE(132 COLUMN) OR ";'BR';" N: ";'ER';"NARROW(80 COLUMN) FORMAT?"
L_1005: !Print @61,5;'CL'; \ Input Len 16396;""K2$
call dxget("SPROD",k2$)
If K2$ = "E" Goto OUTEND
!Print @61,6;'CL'; \ Input Len 16396;""K3$
call dxget("EPROD",k3$)
If K3$ = "E" Goto OUTEND
If K3$ = "" Let K3$ = "}}}}}}}}}}}}"
K2$ = K2$,"            ";K2$ = UCase$(K2$[1,12]);K3$ = K3$,"            ";K3$ = UCase$(K3$[1,12])
If K2$ <= K3$ Goto L_1045
!Print @62,14;"INVALID RANGE!";'RB'; \ Signal 3,20 \ Print @49,14;'CL'; \ Goto L_1005
eflag=eflag+1;e$=e$+"Invalid Product Range"
L_1045: !Print @58,8;'CL'; \ Input Len 16388;""COMD1$
call dxget("SCOMD",Comd1$)
If COMD1$ = "E" Goto OUTEND
!Print @58,9;'CL'; \ Input Len 16388;""COMD2$
call dxget("ECOMD",COMD2$)
If COMD2$ = "E" Goto OUTEND
If COMD2$ = "" Let COMD2$ = "}}}}"
COMD1$ = COMD1$,"    ";COMD1$ = UCase$(COMD1$[1,4]);COMD2$ = COMD2$,"    ";COMD2$ = UCase$(COMD2$[1,4])
If COMD1$ <= COMD2$ Goto L_1085
!Print @51,17;"INVALID RANGE!";'RB'; \ Signal 3,20 \ Print @46,17;'CL'; \ Goto L_1045
eflag=eflag+1;e$=e$+" Invalid Commodity Range"
L_1085: !Print @55,11;'CL'; \ Input Len 16387;""K1$
call dxget("PRTYPE",K1$)
If K1$ = "E" Goto OUTEND
If K1$ = "B"
	Let C0 = -99;BRK = 0 !\ Print @0,20;'CE'; \ Goto L_1130
	goto L_1130
Endif
C0 = K1$
If C0 <= 0 Or C0 > 999  ! Goto L_1085
  eflag=eflag+1;e$=e$+" Invalid Price Type"
Endif
L_1105: !Print @41,12;'CL'; \ Input Len 16385;""K1$
call dxget("BLPRC",tmp$)
let K1$="N" \ if tmp$="Y" Let K1$="Y"
If K1$ = "E" Goto OUTEND
If K1$ <> "Y" And K1$ <> "N" !Goto L_1105
	eflag=eflag+1;e$=e$+" Answer Y or N"
Endif
BRK = 0 \ If K1$ = "Y" Let BRK = 1
L_1130: !Print @46,13;'CL'; \ Input Len 16385;""K1$
call dxget("SRTBY",k1$)
If K1$ = "E" Goto OUTEND
If K1$ <> "1" And K1$ <> "2" !Goto L_1130
	eflag=eflag+1;e$=e$+" Sort By is 1 or 2"
Endif
SORT = K1$
L_1150: Rem PENDING COST/TABLES?
!Print @40,15;'CL'; \ Input Len 16385;""J$ \ If J$ = "E" Goto OUTEND
call dxget("PCTBL",tmp$)
j$="N" \ if tmp$="Y" let J$="Y"
If J$ <> "Y" If J$ <> "N" !Goto L_1150
	eflag=eflag+1;e$=e$+" Answer is Y or N"
Endif
PENDC = 0 \ If J$ = "Y" Let PENDC = 1
If Not(PENDC) Goto L_1300
L_1190: !Print @0,16;'CL';"START DATE";@30,16;"END DATE";
L_1200: !J5$ = "Enter the Starting Pending Date"
!J1 = 700101;J0$ = "5000 61216"
!Gosub L_7000
call dxget("PDTS",tmp$)
if tmp$="" let tmp$="010170" ! Str$(PCDate)
x$=tmp$[5,6]+tmp$[1,4] ! comes as mmddyy
j1=x$ ! converted to yymmdd
PENDS = J1
X2 = PENDS \ Gosub L_7820 \ X2=-1
if x2<=0
	eflag=eflag+1;e$=e$+" Invalid Start Date"
Else
	JPENDS = X2
Endif
L_1230: !J5$ = "Enter the Ending Pending Date"
!J1 = 591231;J0$ = "5000 64016"
!Gosub L_7000
call dxget("PDTE",tmp$)
if tmp$="" let tmp$="123159" ! comes as mmddyy
x$=tmp$[5,6]+tmp$[1,4] ! convert to yymmdd
j1=x$
PENDE = J1
X2 = PENDE \ Gosub L_7820 \ X2=-1
if x2<=0
	eflag=eflag+1;e$=e$+" Invalid End Date"
Else
	JPENDE = X2
Endif
If JPENDS <= JPENDE Goto L_1300
eflag=eflag+1
e$ = e$+"STARTING DATE MUST BE LESS THAN ENDING!"
! Goto L_1190
L_1300: Rem WAREHOUSE
If P9$[32,32] <> "Y" Let WHSE = 0 \ Goto L_1350
!Print @60,17;'CL'; \ WHSE = 0
!If DFWH < 10 Print Using "#";DFWH; Else Print Using "##";DFWH;
!Print @60,17;
!Input Len 16386;""WH$ \ If WH$ = "E" Goto OUTEND
call dxget("WHSE",Wh$)
If WH$ = "" Let WH$ = Str$(DFWH) !  \ Goto L_1340
WHSE = WH$
L_1340: ! 
If WHSE < 0 Or WHSE > D9[5] ! Print 'RB'; \ Goto L_1300
  eflag=eflag+1
  e$=e$+" Warehouse not valid"
Endif
L_1350: Rem "=============== wide or narrow format
!Print @54,19;'CL'; \ Input Len 16385;""J$ \ If J$ = "E" Goto OUTEND
call dxget("PFMT",J$)
If J$ <> "W" If J$ <> "N" !Goto L_1350
	eflag=eflag+1
	e$=e$+" Answer is W or N"
Endif
WIDE = 0 \ If J$ = "W" Let WIDE = 1
L_1450: Rem "==================================
if eflag ! some entry issue - cannot print
	! let e$=message$
	goto ERR_MSG
Endif
!call programdump("/tmp/686log1!","")
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
Endif
!Print @0,22;'CE'; \ Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "K1$ \ If K1$ = "E" Goto OUTEND
!If K1$ = "R" Goto L_1000
!If K1$ <> "P" Print 'RB'; \ Goto L_1450
V9[1] = 99;V9[0] = 0
!Print @0,22;"Printing...please wait";'CE'; \ Signal 3,0
!If JJ8 Print 'CS';
If Err 0 Gosub ERR_TRAP
K1$ = " ",K1$
If SORT = 1 Let K1$ = K2$;DIR = 1
If SORT = 2 Let K1$ = COMD1$;K1$[5] = K2$;DIR = 3
Search #2,2,DIR;K1$,R[2],E \ If E > 1 Goto L_2020
If Not(E) Goto L_2025
L_2000: Rem "======================================== print loop
L_2010: Search #2,3,DIR;K1$,R[2],E \ If E > 2 Gosub ERR_SEARCH
If E Goto OUTEND
If SORT = 1 If K1$[1,12] > K3$ Goto OUTEND
L_2020: If SORT = 2 If K1$[1,4] > COMD2$ Goto OUTEND
L_2025: Mat Read #2,R[2],0;A$;
If A$[140,151] = "Z ZZZZZZZZZZ" Goto L_2000
If A$[140,151] < K2$ Goto L_2000
If A$[140,151] > K3$ Goto L_2000
If A$[152,155] < COMD1$ Goto L_2000
If A$[152,155] > COMD2$ Goto L_2000
Mat Read #2,R[2],156;B;
Mat Read #2,R[2],512;PFU1;
Mat Read #2,R[2],554;PFU2;
Mat Read #2,R[2],596;PRPARC;
Mat Read #2,R[2],620;LM; \ PREC[0] = R[2]
Mat Read #2,R[2],256;A;
Mat Read #2,R[2],846;PFTB;
Mat Read #2,R[2],938;PF_LOAD2;
Mat Read #2,R[2],974;PFCO;
Mat Read #2,R[2],1002;PLC;
Mat Read #2,R[2],894;C4;
if whse                                                                  
   let keyprod$[1,12]=a$[140,151];keyprod$[13,14]=whse using "##"        
   search#10,2,1;keyprod$,r10,e \ if e goto nowhse:                       
   mat read#10,r10,846;whmisc2;                                           
   PARM[0] = 0                                                           
   PARM[1] = WHMISC2[0]                                                  
   ! Call "MXPRODGRP5",PARM[]
   Call ProdGroup(e$,intco,Parm[])
  if not (parm[4]) goto L_2000: 
endif                                                                    
nowhse: !
If C0 = -99 If C4[2] <> 2 Goto L_2010
If C0 <> -99 If C4[2] = 2 Goto L_2010
Gosub L_3000
If WHSE Gosub L_8100
Gosub L_12400
If PENDC Gosub L_2900
If C0 = -99 Goto L_2190
If CCMULTI = 0 Let CCBASE = CCBASE + 19
If CCMULTI = 0 If CCBASE < 20 Let CCBASE = 20
T9 = 0 \ T9[1] = 0
Gosub L_2400
CNVTU[0] = 0 \ CNVTU[1] = PFU1[12]
CNVTU[2] = 2 \ CNVTA = T9
Gosub L_20000
T9 = AMOUNT
L_2190: If PFU1[12] = -1 Let CCD$[11,14] = "CWT " \ Goto L_2211
If PFU1[12] = -2 Let CCD$[11,14] = "LOT " \ Goto L_2211
If PFU1[12] = -3 Let CCD$[11,14] = "LB  " \ Goto L_2211
If PFU1[12] > 0 Mat Read #6,PFU1[12],0;CCD$;
L_2211: If PFU1[8] = -1 Let SUNIT$[11,14] = "CWT " \ Goto L_2215
If PFU1[8] = -2 Let SUNIT$[11,14] = "LOT " \ Goto L_2215
If PFU1[8] = -3 Let SUNIT$[11,14] = "LB  " \ Goto L_2215
If PFU1[8] > 0 Mat Read #6,PFU1[8],0;SUNIT$;
L_2215: If C0 <= 0 Goto L_2220
BPRT = 0 \ If BRK And CCBRKTBL Gosub L_4000
L_2220: Rem "get pack
CNVTU[0] = PFU1[12] \ CNVTU[1] = 0
CNVTU[2] = 1 \ CNVTA = 1
Gosub L_20000
PACK = AMOUNT
If SORT = 2 If COMM$[1,4] <> K1$[1,4] Let V9[1] = 99
Gosub L_5800
Gosub L_5000
Goto L_2000
L_2400: Rem "=================================== calc comm/matrix price
LET FIELD=0 \ IF ccbase=10 LET FIELD=0 ! "no field 8!
IF ccbase=1 LET FIELD=0 ! "no field 1
IF ccbase>2 IF ccbase<9 LET FIELD=ccbase-2 ! "send as 1-6 "-1
IF ccbase IF ccbase<>2 IF ccbase<>9 GOSUB L_12000:
IF ccbase=0 LET T9=A[ccmulti] \ RETURN 
IF ccbase=1 LET T9[1]=B[8] ! "whse cost
IF ccbase=2 LET T9[1]=B[10] ! "po/last cost
IF ccbase>=3 IF ccbase<=8 LET T9[1]=A[17+ccbase] ! "lp 1 - 6
IF ccbase=9 LET T9[1]=C4[4] ! "base cost
IF ccmulti=0 LET ccmulti=1 ! "check multiplier
LET T9=T9[1]*ccmulti
Return 
L_2900: Rem CHECK ON FUTURES
If Not(PENDC) Return 
If PFCO[1] = 0 Goto L_2950
X2 = PFCO[1] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE < JPENDS Goto L_2950
If JWDATE > JPENDE Goto L_2950
If PFCO[0] Let C4[4] = PFCO[0]
If PFTB[0] Let B[22] = PFTB[0]
If B[22] < 0 Let B[22] = 0
If PFTB[1] Let C4[3] = PFTB[1]
If PRPARC[0] Let B[8] = PRPARC[0]
If C4[3] < 0 Let C4[3] = 0
L_2950: Rem LAST
If PLC[1] = 0 Return 
X2 = PLC[1] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE < JPENDS Return 
If JWDATE > JPENDE Return 
If PLC[0] Let B[10] = PLC[0]
Return 
L_3000: Rem "======================================== get commodity
J2$ = " ",J2$;J2$ = A$[152,155]
Search #CH_CHEAD,2,1;J2$,R[4],E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_3100
Mat Read #CH_CHEAD,R[4],0;D$;
KEY_CMDTY$ = J2$[1,4] + C0 Using "### "
Search #CH_CMDTY,2,1;KEY_CMDTY$,REC_CMDTY,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_3100
Mat Read #CH_CMDTY,REC_CMDTY,40;CCBASE
Mat Read #CH_CMDTY,REC_CMDTY,42;CCMULTI
Mat Read #CH_CMDTY,REC_CMDTY,46;CCBRKTBL
Mat Read #CH_CMDTY,REC_CMDTY,49;CCUPCHG
Mat Read #CH_CMDTY,REC_CMDTY,53;CCUPBRK;
Goto L_3120
L_3100: Rem "code not found
If C0 = -99 Return 
CCMULTI = 0 \ CCBASE = 1
L_3120: Return 
L_4000: Rem GET BREAKS
For CT = 1 To 10 \ BTOT[CT,0] = 0;BTOT[CT,1] = 0 \ Next CT
BDESC$ = " ",BDESC$
If B[22] <= 0 Or B[22] > Chf(8) - 1 !"not break table in prod file
  B[22] = CCUPBRK
  If B[22] <= 0 Or B[22] > Chf(8) - 1 Goto L_4150
End If 
Mat Read #8,B[22],0;B1;
Mat Read #8,B[22],180;BDESC$;
Read #8,B[22],200;B3; \ If B3 = 1 Or B3 = 3 Goto L_4050
Goto L_4150
L_4050: For CT = 0 To 9
  If B1[CT,0] < 0 Let BPRT = 0 \ Goto L_4150
  T0 = B1[CT,1];X4 = B1[CT,2] \ If Not(B1[CT,0]) Goto L_4140
  BTOT[CT + 1,1] = B1[CT,0]
  QUAN[CT + 1] = B1[CT,0]
  If Not(T0) Let BTOT[CT + 1,0] = FNZ(T9 - (T9 * (X4 / 100))) \ Goto L_4130
  CNVTU[0] = PFU1[8];CNVTU[1] = PFU1[12];CNVTU[2] = 2
  CNVTA = X4 \ Gosub L_20000 \ X4 = AMOUNT
  If X4 > T9 Let X4 = T9
  BTOT[CT + 1,0] = FNZ(T9 - X4)
L_4130: If BTOT[CT + 1,0] Let BPRT = 1
L_4140: Next CT
L_4150: Return 
L_5000: Rem "======================================= print line
If SORT = 1 Or COMM$[1,4] = K1$[1,4] Goto L_5020
Print #0; Tab 0;"COMMODITY: ";K1$[1,4];" (";D$[1,16];")" \ Print #0;" "
V9[1] = V9[1] + 2
L_5020: Print #0; Tab 0;A$[140,151];
Print #0; Tab 14;A$[93,112];
Print #0; Tab 35;A$[9,38];
If WIDE
  If C0 = -99 Print #0; Tab 68;A$[63,92];
  If C0 <> -99 Print #0; Using "######.###"; Tab 66;PACK; Else Print #0; Tab 100;A$[152,155];
  If C0 = -99 Print #0;"" \ V9[1] = V9[1] + 1 \ Gosub L_6400 \ Goto L_5105
  Print #0; Using PMASK$; Tab 78;T9;"/";CCD$[11,14]
  V9[1] = V9[1] + 1
  If P9$[26,26] = "Y" Print #0; Tab 35;A$[63,92] \ V9[1] = V9[1] + 1
Else 
  If C0 <> -99 Print #0; Using "######.###"; Tab 66;PACK Else Print #0; Tab 66;A$[152,155]
  V9[1] = V9[1] + 1
  If A$[63,63] <> " " Print #0; Tab 35;A$[63,92];
  If C0 = -99 Print #0;"" \ V9[1] = V9[1] + 1 \ Gosub L_6400 \ Goto L_5105
  Print #0; Using PMASK$; Tab 65;T9;"/";CCD$[11,14]
  V9[1] = V9[1] + 1
End If 
L_5105: If SORT = 2 Let COMM$ = K1$[1,4]
If Not(BPRT) Goto L_5255
If V9[1] + 2 >= V9[3] Gosub L_5815
If WIDE
  J0 = 1;J1 = 10 \ Gosub L_5155
Else 
  J0 = 1;J1 = 5 \ Gosub L_5155
  J0 = 6;J1 = 10 \ Gosub L_5155
End If 
Goto L_5255
L_5155: Rem "====================== levels/prices
Print #0; Tab 0;"LEVELS:";
For CT = J0 To J1
  Print #0; Using "########## ";BTOT[CT,1];
Next CT
Print #0;"/";SUNIT$[11,14];
Print #0;"" \ V9[1] = V9[1] + 1
Print #0; Tab 0;"PRICES:";
For CT = J0 To J1
  If BTOT[CT,0]
    Print #0; Using PMASK$;BTOT[CT,0];" ";
  Else 
    Print #0;"       N/A ";
  End If 
Next CT
Print #0;"/";CCD$[11,14];
Print #0;" " \ V9[1] = V9[1] + 1
Return 
L_5255: Print #0;" " \ V9[1] = V9[1] + 1
Return 
L_5800: Rem "==================================================== cabesa routine
If V9[1] + 3 < V9[3] Return 
!If V9[0] If JJ8 Input @0,23;"PRESS <CR> TO CONTINUE "Z$ \ Print 'CS';
L_5815: If V9[0] If Not(JJ8) Print #0;"\14\";
V9[0] = V9[0] + 1;V9[1] = 7
If Not(JJ8) Print #0;"\12\";
Print #0; Tab 0;PCDATE$;
If WIDE Let J0 = 64;J1 = 105;J2 = 120 Else Let J0 = 38;J1 = 60;J2 = 70
Print #0; Tab (J0 - Len(CNAME$) / 2);CNAME$; \ If WHSE Print #0; Tab J1;"WHSE";WHSE;
Print #0; Tab J2;"PAGE";V9[0]
Print #0;"-686- "; \ If WIDE Print #0;Msc$(3);
If WIDE Let J0 = 50 Else Let J0 = 20
If C0 <> -99 Print #0; Tab J0;"CATALOG PRICE LIST FOR PRICE TYPE";C0
If C0 = -99 Print #0; Tab J0;"TEN BRACKET PRICE LIST "
If BRK Print #0; Tab J0;"WITH BREAK LEVEL PRICES"
Print #0;" "
Print #0; Tab 1;"PRODUCT "; Tab 14;"VENDOR ITEM #"; Tab 35;"DESCRIPTION";
If C0 <> -99 Print #0; Tab 69;"PACK";
If C0 <> -99 If WIDE Print #0; Tab 80;"PRICE"
If C0 <> -99 If Not(WIDE) Print #0;" " \ Print #0; Tab 69;"PRICE"
If C0 = -99 If WIDE Print #0; Tab 97;"COMMODITY"
If C0 = -99 If Not(WIDE) Print #0; Tab 65;"COMDY"
Print #0;" "
Return 
L_6400: Rem "======================================= print 10 bracket prices
Mat Read #8,B[22],0;B1; \ Read #8,B[22],200;B3; \ If B3 <> 2 Goto L_6496
If V9[1] + 2 >= V9[3] Gosub L_5815
If WIDE
  J0 = 1;J1 = 10 \ Gosub L_6413
Else 
  J0 = 1;J1 = 5 \ Gosub L_6413
  J0 = 6;J1 = 10 \ Gosub L_6413
End If 
Return 
L_6413: Print #0; Tab 0;"QUANTITY ";
For BRACKET = J0 To J1
  If B1[BRACKET - 1,0] > 0
    Print #0; Using "########## ";B1[BRACKET - 1,0];
  Else 
    Print #0;"       N/A ";
  End If 
Next BRACKET
Print #0;"/";SUNIT$[11,14];
Print #0;" " \ V9[1] = V9[1] + 1
Print #0; Tab 0;"PRICE    ";
For BRACKET = J0 To J1
  T9 = 0
  Gosub L_6500
  Print #0; Using PMASK$;T9;" ";
Next BRACKET
Print #0;"/";CCD$[11,14];
Print #0;" " \ V9[1] = V9[1] + 1
L_6496: Return 
L_6500: Rem "====================================== CALC BRACKET PRICE
If BRACKET = -9 Let X3 = 0 \ Return 
BRACKET1 = BRACKET
If SPC3 = 5 Let BRACKET1 = BRACKET1 + (SPC3[1])
If SPC3 = 4 Let BRACKET1 = SPC3[1]
L_6520: B4 = (BRACKET1 * 1000) - 1000 + C4[3]
If B4 < 0 Let X3 = 0 \ Goto L_6690
Mat Read #7,B4,0;M5;
Mat Read #7,B4,10;M6;
If BRACKET1 > 1 If M6[0] = 0 Let BRACKET1 = BRACKET1 - 1 \ Goto L_6520
M7 = C4[4]
CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = M7 \ Gosub L_20000 \ M7 = AMOUNT
For M8 = 0 To 3
  If Not(M6[M8]) Goto L_6630
  If M5[M8] Let M7 = M7 + (M6[M8])
  If Not(M5[M8]) Let M7 = M7 + (M7 * (M6[M8] / 100))
Next M8
L_6630: Rem
X4 = M7
If P60$[18,18] = "Y" If PFU1[11] = -1 Let X4 = FNF(X4)
CNVTU[0] = PFU1[11];CNVTU[1] = PFU1[12];CNVTU[2] = 2;CNVTA = X4 \ Gosub L_20000 \ X4 = AMOUNT
If P61$[50,50] = "Y"
  KEYCOMM$ = A$[152,155]
  Search #4,2,1;KEYCOMM$,R4,E
  If Not(E)
    Mat Read #4,R4,40;PRFAC;
    If PRFAC
      Call "pricernd",PRFAC,AMOUNT
      X4 = AMOUNT
    End If 
  End If 
End If 
M7 = X4
T9 = M7
L_6690: Return 

L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
if x2<=0 return
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem "=================================== display screen

Return 
L_8100: Rem GET WHSE INFO/PUT INTO PROD VARS
WHPROD$[1,12] = A$[140,151]
WHBLD[0] = 10;WHBLD[1] = WHSE;WHBLD[2] = 0
! Call "GETWHSE",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E
Call "GETWHSE.dl4",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E,e$,rstr$
If WHBLD[2] > 0 Mat Read #10,WHBLD[2],842;WHLM;
If P9$[32,32] = "Y" Gosub L_69000
PFCO[0] = W7[2];PFCO[1] = W7[3]
PFTB[0] = WHPARC[4];PFTB[1] = WHPARC[5]
PLC[0] = W7[7];PLC[1] = W7[13];PRPARC[0] = WHMISC[0]
B[8] = W3[17];B[10] = W3[16]
C4[4] = W3[18];PF_LOAD2 = W3[14]
For CT = 20 To 25
  A[CT] = W3[CT - 1]
Next CT
Return 

L_12000: ! CALC MATRIX L PRICES FROM TABLE
IF FIELD<1 OR FIELD>6 RETURN 
IF C4[2]<>1 RETURN  ! "not matrix
IF C4[3]=0 RETURN  ! "no mark up table
Mat read #3,c4[3],18;PM5;
LET BASEC=C4[4] ! "base cost
If pm5[field-1,4]=1 let basec=b[10]
if pm5[field-1,4]=2 let basec=b[8]
if pm5[field-1,4]=3 let basec=pf_load2
if pm5[field-1,4]=4 let basec=b[21]
if pm5[field-1,4]=5 let basec=prparc[2]
GOSUB L_19000:
! X4 RETURNED
if p61$[50,50]="Y" gosub pricefac:
LET A[19+FIELD]=X4 ! "list price(s)
Return 
L_12400: Rem CALC LOADS FROM LOAD MARKUP
If P9$[32,32] = "Y" And WHSE <> 0
  If WHLM[0]
    WH = WHSE;LTBL = WHLM[0];CNVTA = 0
    Gosub L_12610 \ W3[17] = CNVTA;B[8] = W3[17]
  End If 
  If WHLM[1]
    WH = WHSE;LTBL = WHLM[1];CNVTA = 0
    Gosub L_12610 \ W3[14] = CNVTA;PF_LOAD2 = W3[14]
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    Gosub L_12610 \ B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    Gosub L_12610 \ PF_LOAD2 = CNVTA
  End If 
End If 
Return 
L_12610: Rem CALL
OTYPE = 1
! Call "MXLOAD5",OTYPE,WH,LTBL,PREC[],CNVTA
Call "MXLOAD5.dl4",OTYPE,WH,LTBL,PREC[],CNVTA,intCO,e$,rstr$
Return 
L_19000: Rem MATRIX PRICING, RETURNS X4
Call "MX671BRK5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,C4[],FIELD,BASEC,e$,rstr$
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
X4 = CNVTA
Return 
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 !"  <>-1 GOTO L_20510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 !" ITS CATCH WEIGHT!
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W7[2]) Let W7[2] = PFCO[0]
  If Not(W7[3]) Let W7[3] = PFCO[1]
  If Not(WHPARC[4]) Let WHPARC[4] = PFTB[0]
  If Not(WHPARC[5]) Let WHPARC[5] = PFTB[1]
  If Not(W7[7]) Let W7[7] = PLC[0]
  If Not(W7[13]) Let W7[13] = PLC[1]
  If Not(WHMISC[0]) Let WHMISC[0] = PRPARC[0]
End If 
Return 
PRICEFAC: Rem round prices based upon pricing factor
If P61$[50,50] <> "Y" Return 
KEYCOMM$ = A$[152,155]
Search #4,2,1;KEYCOMM$,R4,E
If Not(E)
  Mat Read #4,R4,40;PRFAC;
  If PRFAC
    CNVTA = X4;CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2
    Gosub L_20000
    Call "pricernd",PRFAC,AMOUNT
    CNVTA = AMOUNT;CNVTU[0] = PFU1[12];CNVTU[1] = 0;CNVTU[2] = 2
    Gosub L_20000
    X4 = AMOUNT
  End If 
End If 
Return 
OUTEND: Rem EXIT PROGRAM
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
!
try Call dxclose() else rem
End
!Print 'CS'
!Chain "MX000"
!Stop 
!Stop 
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/686se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             

Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End