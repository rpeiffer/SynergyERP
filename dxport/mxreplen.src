! >>> Program mxreplen.dl4
!
! description converted call from unibasic MXREPLEN
!
! loadsave -w -n 10,10 -o prog/dxport/mxreplen.dl4 src/mxreplen.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR  2, 2004  10:39:22
Rem /w/papermaster/r2002/
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem *- MXREPLEN - calc replenishment amt for a product
Rem *- RGP - 12/11/00 - create program  CCT 137969
Rem *- MODIFICATION LOG
!
Declare Intrinsic Sub InpBuf,String
!
Enter PCODE$,WH,EXJOB,FCHAN[],LOC$,REP_[],ERR_MSG$,e$,rstr$
!
if err 0 gosub ERR_TRAP
!
dim buttonlist$[5,50],nextlist$[5,100] ! dxport
!
Dim FILENAME$[40],REC_KEY$[42],REC_KEY2$[42],SAVE_KEY$[42],MHIQ$[18]
Dim DFLTRCVLOC$[6],custom_customer$[30]
Dim 1%,E,RETVAL,WLA[7],MHRTF[1],JQ_FLAG
Dim 2%,PROG_CH[6],TMP_CH,I,REC,REC2
Dim 3%,PL2[1],MHJ3[0],REPLEN_LEVEL,BIN_LEVEL,P3[4]
Dim 2%,MHS_CHAN[3],3%,CAP[11]
Dim 1%,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],AMOUNT
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
! - Window On 
Mat Read #1,69,52;DFLTRCVLOC$;
Read #1,7,63;JQ_FLAG;
mat read #1,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
! custom_customer$="ADMIRAL" ! test
If FCHAN[6] = -1 Let JQ_FLAG = 0
If FCHAN[5] = -1 Let MHFLAG = 0 Else Let MHFLAG = 1
If Not(MHFLAG) Let JQ_FLAG = 0
Gosub OPEN_FILES
LOC$ = ""
ERR_MSG$ = ""
For I = 0 To 12
  REP_[I] = 0
Next I
REP_[0] = -1
Gosub GET_PROD_INFO
If Not(RETVAL) Goto OUTEND
If PL2[1] = 0
  ERR_MSG$ = "No replen. point!"
  Goto OUTEND
End If 
Gosub TOTAL_SPRODLOT
Call "mxspace.dl4",PCODE$,WH,LOC$,FCHAN[],CAP[],e$,rstr$
If CAP[0] = 0
  ERR_MSG$ = "No bin space calc!"
  Goto OUTEND
End If 
If JQ_FLAG
  Gosub CHECK_OTHER_JOBS
  If RETVAL
    ERR_MSG$ = "Multi-Prod Jobs!"
    Goto OUTEND
  End If 
End If 
REP_[0] = 0
REP_[1] = CAP[9]
REP_[2] = CAP[10]
REP_[3] = CAP[1]
REP_[10] = CAP[11]
REP_[11] = CAP[0]
If CAP[7] < 0 Or CAP[8] < 0 Let REP_[12] = 1
REP_[7] = REP_[1]
REP_[8] = REP_[2]
If JQ_FLAG
  Gosub TOTAL_OTHER_JOBS
  If CAP[11]
    If (REP_[6] Mod REP_[3]) > REP_[8] And REP_[7] > 0
      REP_[8] = REP_[8] + REP_[3]
      REP_[7] = REP_[7] - 1
    End If 
  End If 
  If Not(CAP[11])
    REP_[8] = REP_[8] - REP_[6] \ If REP_[8] < 0 Let REP_[8] = 0
  Else 
    REP_[7] = REP_[7] - Int(REP_[6] / REP_[3]) \ If REP_[7] < 0 Let REP_[7] = 0
    REP_[8] = REP_[8] - (REP_[6] Mod REP_[3]) \ If REP_[8] < 0 Let REP_[8] = 0
  End If 
  REP_[9] = REP_[9] - REP_[6] \ If REP_[9] < 0 Let REP_[9] = 0
End If 
BIN_LEVEL = (CAP[7] * REP_[3]) + CAP[8] + REP_[6]
If BIN_LEVEL <= PL2[1]
  REP_[0] = 1
  If CAP[11] And CAP[0] = 1
    REP_[1] = 1
    REP_[2] = 0
    REP_[7] = 1
    REP_[8] = 0
  End If 
End If 
REP_[13] = CAP[3]
REP_[14]=CAP[1]*CAP[2]+CAP[3] ! PALLET CAPACITY*#PALLETS+LOOSE AMT 
!
OUTEND: Rem
Gosub CLOSE_FILES
End 
!
OPEN_FILES: Rem
For I = 0 To 6
  Read TMP_CH
  If TMP_CH <> -1
    If FCHAN[I] = 99
      CHNL = 99
      Gosub GETCHAN
      PROG_CH[I] = CHNL
      Read #1,88,Abs(TMP_CH);FILENAME$;
      If TMP_CH > 0 Open #PROG_CH[I],FILENAME$
      If TMP_CH < 0 Ropen #PROG_CH[I],FILENAME$
    Else 
      PROG_CH[I] = FCHAN[I]
    End If 
  End If 
  If I < 4 Let MHS_CHAN[I] = PROG_CH[I]
Next I
Data "-1744","-2736","-2528","-1792","-208","-1","-1"
C2 = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
If FCHAN[5] = 99
  FILENAME$ = C2 Using "2/MHRTYPE#"
  If C2 > 9 Let FILENAME$ = C2 Using "2/MHRTYPE##"
  CHNL = 99
  Gosub GETCHAN
  PROG_CH[5] = CHNL
  Ropen #PROG_CH[5],FILENAME$
Else 
  PROG_CH[5] = FCHAN[5]
End If 
If JQ_FLAG
  If FCHAN[6] = 99
    FILENAME$ = C2 Using "2/MHJOBQ#"
    If C2 > 9 Let FILENAME$ = C2 Using "2/MHJOBQ##"
    CHNL = 99
    Gosub GETCHAN
    PROG_CH[6] = CHNL
    Ropen #PROG_CH[6],FILENAME$
  Else 
    PROG_CH[6] = FCHAN[6]
  End If 
End If 
Return 
!
GET_PROD_INFO: Rem
RETVAL = 0
REC_KEY$ = PCODE$
Search #PROG_CH[3],2,1;REC_KEY$,REC,E 
If E
  ERR_MSG$ = "No product record!"
  Return 
End If 
Mat Read #PROG_CH[3],REC,256;A;
Mat Read #PROG_CH[3],REC,512;PFU1;
Mat Read #PROG_CH[3],REC,554;PFU2;
REC_KEY$ = PCODE$,WH Using "##"
SAVE_KEY$ = REC_KEY$
Search #PROG_CH[4],3,1;REC_KEY$,REC,E 
If E Or REC_KEY$[1,14] <> SAVE_KEY$[1,14]
  ERR_MSG$ = "No primary bin!"
  Return 
End If 
LOC$ = REC_KEY$[15,20]
Mat Read #PROG_CH[4],REC,22;PL2;
REC_KEY$ = WH Using "##",LOC$
Search #PROG_CH[1],2,1;REC_KEY$,REC,E 
If E
  ERR_MSG$ = "No whloc rec!"
  For X = 0 To 7 \ WLA[X] = 0 \ Next X
Else 
  Mat Read #PROG_CH[1],REC,76;WLA;
  Mat Read #PROG_CH[1],REC,108;MHIQ$;
End If 
REP_[4] = WLA[0]
If MHFLAG ! "mat handling
  REC_KEY$ = MHIQ$[1,4]
  Search #PROG_CH[5],2,1;REC_KEY$,REC,E 
  If Not(E)
    Mat Read #PROG_CH[5],REC,14;MHRTF;
    REP_[5] = MHRTF[0]
  End If 
  RETVAL = 1
Else 
  RETVAL = 1;REP_[5] = 0
End If 
Return 
!
TOTAL_SPRODLOT: Rem
REC_KEY$ = PCODE$,WH Using "##"
SAVE_KEY$ = REC_KEY$
SPROD_LOOP: Rem
Search #PROG_CH[2],3,2;REC_KEY$,REC,E 
If E Or REC_KEY$[1,14] <> SAVE_KEY$[1,14] Goto END_SPROD_LOOP
If REC_KEY$[15,20] <> LOC$
  Mat Read #PROG_CH[2],REC,82;P3;
  REC_KEY2$ = REC_KEY$[13,20]
  Search #PROG_CH[1],2,1;REC_KEY2$,REC2,E
  If Not(E)
    Mat Read #PROG_CH[1],REC2,76;WLA;
    REP_[9] = REP_[9] + (P3[0] - P3[1] - P3[3])
  Else 
    REP_[9] = REP_[9] + (P3[0] - P3[1] - P3[3])
  End If 
End If 
Goto SPROD_LOOP
!
END_SPROD_LOOP: Rem
AMOUNT = REP_[9]
Gosub CNVT_TO_STOCKING ! as it says! (also full units only)
REP_[9] = AMOUNT
Return 
!
CHECK_OTHER_JOBS: Rem
RETVAL = 0
REC_KEY$ = WH Using "##",LOC$
SAVE_KEY$ = REC_KEY$
OJ_LOOP: Rem
Search #PROG_CH[6],3,4;REC_KEY$,REC,E 
If E Or REC_KEY$[1,8] <> SAVE_KEY$ Goto END_OJ_LOOP
If REC_KEY$[9,20] <> PCODE$ Let RETVAL = 1 \ Goto END_OJ_LOOP
Goto OJ_LOOP
END_OJ_LOOP: Rem
Return 
!
CNVT_TO_STOCKING: Rem
CNVTU[0] = 0
CNVTU[1] = PFU1[8]
CNVTU[2] = 1
CNVTA = AMOUNT
Gosub CONVERT
if custom_customer$<>"ADMIRAL" ! This is STANDARD for everyone but Admiral
	If Fra(AMOUNT) Let AMOUNT = Int(AMOUNT) + 1
endif
if custom_customer$="ADMIRAL" if LOC$[1,6]<>"STORE " ! ADMIRAL - No Full Stk UM on STORE LOC
	If Fra(AMOUNT) Let AMOUNT = Int(AMOUNT) + 1
endif
Return 
!
TOTAL_OTHER_JOBS: Rem
REC_KEY$ = WH Using "##",LOC$
SAVE_KEY$ = REC_KEY$
JOB_LOOP: Rem
Search #PROG_CH[6],3,4;REC_KEY$,REC,E 
If E Or REC_KEY$[1,8] <> SAVE_KEY$ Goto END_JOB_LOOP
If REC_KEY$[9,20] <> PCODE$ Or Val(REC_KEY$[23,29]) = EXJOB Goto JOB_LOOP
Mat Read #PROG_CH[6],REC,28;MHJ3;
REP_[6] = REP_[6] + MHJ3[0]
Goto JOB_LOOP
!
END_JOB_LOOP: Rem
Return 
!
CLOSE_FILES: Rem
For I = 0 To 5
  If FCHAN[I] = 99 Close #PROG_CH[I]
Next I
If JQ_FLAG And FCHAN[6] = 99 Close #PROG_CH[I]
Return 
!
Rem {begin src/inc/rtn.getchan.s}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
For SCR = CHNL To 1 Step -1
  CHNL = SCR
  Gosub CHNLFREE
  If CHNLFREE
    SCR = 1
  Else 
    CHNL = 0
  End If 
Next SCR
Return 
!
CHNLFREE: Rem check to see if a channel is being used
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
CHNLSCR = Chf(CHNL)
If Err 0 Gosub ERR_TRAP
If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
END_CHNLFREE: Rem
Return 
!
Rem {end rtn.getchan.s}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: 
! - If Spc(4) > 1280 Goto CVTSTARTB
! - Swap 1,"MXPRCONV"
! - If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
! - CVTTRY: Rem "this is a remark
! - Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
! - If X1 <> Spc(6) Goto CVTTRY
! - If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
! - Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
! - If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
!
Rem {end rtn.convert.s}
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callsuberr.inc"
End 
