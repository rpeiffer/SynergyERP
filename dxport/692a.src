! >>> Program 692a
!
! description  Physical Book  -- Sort by Vendor / Location
! loadsave -w -n 100,10 -o prog/dxport/692a.dl4 src/692a.src
!
! 1.0 mm/dd/yyyy change??
! 
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP 24, 2009  12:38:27
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/mx/mx692.src (univ2) [bill] {63952}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem

Declare Intrinsic Sub FindF,InpBuf,String,Time,MiscStr
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel

External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem MX692 - PHYSICAL BOOK
Rem AUTHOR: DAVE  APR 29, 1987
Rem LAST UPDATE:  REK 1/92 WAREHOUSE CHOOSE
Try
!If Err 0 Gosub L_9500
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim P$[156],LOCMASK$[6]
Dim 1%,EVEN[1],PRIM,RASL[5],W0[3],2%,A3,B[24],WH
Dim 3%,A[33],A2[7],R8,R[99],W3[24]
Dim K10$[10],TIER$[2],PR$[1],1%,WL1[2],WLA[7],2%,BIN
Dim SUNIT$[4],V$[30],U5$[50],W2$[20],BUNIT$[4],I$[30],F$[60],FILE$[60]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[40],ARDATE$[8],P9$[50],WH$[30]
Dim 1%,PFU1[10],F,X1,2%,X2,3%,J,X3,T9[20],L1$[20],L2$[20],L3$[30],L4$[30]
Dim 3%,PFU2[6]
Dim K1$[50],K2$[20],K3$[20],K4$[5],X$[10],T9$[26],A1$[50],A2$[50],V4$[50],LOC$[30]
Dim VLS$[6],VLE$[6],VS$[1],P61$[256],PLOC$[30],PL$[30],K11$[40],L11$[5]
Dim 2%,W2[9],LINE_$[52],K5$[50],P2$[30],VUNIT$[4],KF7$[50]
Dim 3%,REC_PRODGRP,PRODGRP$[3],WHMISC2[7]
dim blank$[100]
Rem {begin src/inc/dim.prodgrp.i}
Dim PGDESC$[30]
Dim 1%,PGOT[38],PGPO[6],PG1[3]
Rem {end dim.prodgrp.i}
Dim 2%,W7[14],3%
Dim fname$[50],groupid$[1],filename$[50],k98$[50],custom_customer$[30]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[2000],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
! dim j$[50]
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
COMP=INTCo
Close #1 ! getsession open cntrl# as READONLY
j$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
let blank$=" ",blank$
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
Mat Read #1,19,50;P9$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 1
Mat Read #1,61,0;P61$;
mat read #1,115,60;custom_customer$;
let custom_customer$=UCase$(Trim$(custom_customer$))
L_740: ! Signal 3,5
!Print @0,0;'CS';
!If RASL If P61$[45,45] = "Y"
!  Print @0,1;"WARNING: REMOVE STOCK FOR ALLOCATED ORDERS BEFORE THE COUNT IS STARTED."
!  Print @0,2;"IT WILL BE ADDED BY THE SYSTEM TO THE COUNT."
!End If 
!Print @2,9;"DO YOU WISH TO USE THE AUTO TAG ASSIGN SYSTEM?  THIS IS FOR "
!Print @2,10;"  SETTING UP TAGS IN THE FILE USING LOCATION OR TAG # (Y/N) ";
!Input Len 16384 + 1;""J2$ \ Call String(1,J2$)
!If J2$ <> "Y" If J2$ <> "N" Goto L_740
!If J2$ = "Y" Chain "MX692A"
If RASL AND P61$[45,45] = "Y"
	Call Dxget("STKCHK0",tmp$)
	If UCase$(RTrim$(tmp$)) ="" ! "Y" 
		eflag=eflag+1
		let message$="Please Verify That Allocated Orders has been Removed from Stock "
		goto outend:
	endif
ENDIF
REC_UAC = GetUIDRec(e$,IntCo,Userid$)
FILENAME$=rec_uac Using "6/SORTWORK&&&&&&"
try close #98 else Rem
tmp$ = "[1:1] files/",filename$,"!"
Try
	Build #98,tmp$
else
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
end try
R[99] = 7 \ Search #98,0,1;F$,R[99],E  ! increase to 7w/14c - was 2w/4c
if e<>0
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
endif
R[99] = 1 \ Search #98,0,0;F$,R[99],E
if e<>0
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
endif
R[99] = 0 \ Search #98,1,0;F$,R[99],E
if e<>0
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
endif
tmp$ = "files/",filename$," <666>"
Modify tmp$                       
try
	close #98
else
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
end try
try
	open #98,filename$
else
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
end try
For J = 2 To 11
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1792","1728","2400","1744","208","2352","2528","-1","2736","2288"
! 2=PROD,3=CCODES,4=VEND,5=PRODWHSE,6=PRODLOC,
! 7=STAGITEM,8=Sprodlot,9=?,10=whloctn,11=commcode
Mat Read #1,0,100;ARDATE$;
!X2 = Spc(5);F$ = Int((X2 - Int(X2 / 16384) * 16384) / 64) Using "2/prodgrp#"
if custom_customer$="ATHENS" Let LocMask$="A-BBTT"  ! " Athens Location Mask CUSTOM cct 149172
F$ = "2/prodgrp"+Str$(coid)
CH_PRODGRP = 13
Ropen #CH_PRODGRP,F$
LET K11$="MACH"
search #11,2,1;k11$,r[11],e
if not(e)
	search #98,4,1;k11$,r[11],e
	if e gosub err_search:
endif
LET K11$="LABR"
search #11,2,1;k11$,r[11],e
if not(e)
	search #98,4,1;k11$,r[11],e
	if e gosub err_search:
endif
LET K11$="TIME"
search #11,2,1;k11$,r[11],e
if not(e)
	search #98,4,1;k11$,r[11],e
	if e gosub err_search:
endif
Call Dxget("COMMCODE",tmp$)
iF RTRIM$(TMP$)<>""                                                                                           
	X = 1                                                                     
	NextType: !  
	x$=""
	X2 = 0 \ Let X$ = tmp$ To "," : X2 
	if rtrim$(x$)="" goto exittype:
	IF LEN(X$)>0 AND LEN(X$)<5
		LET K11$=" ",K11$
		LET K11$[1,LEN (X$)] = X$
		k11$[5]=""
		SEARCH #11,2,1;K11$,R[11],E
		IF NOT(E)
			search #98,4,1;k11$,r[11],e
			if e>1 gosub err_search: !user gets droplist & can duplicate TIME, etc
			cflg=1
		endif
	endif                                           
        If X2 Let tmp$ = tmp$[X2 + 1]
	if x2 Goto NextType                
	ExitType: !                                                    
endif                                       
LINE_$ = "_",LINE_$

Read #1,3;CNAME$;
Mat Read #1,19,50;P9$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 1
!If Err 0 Let J8 = Spc(8)
!J8 = 0 \ J9 = Chf(0)
!If Err 0 Gosub L_9500
!If J8 If J8 <> 49 Goto L_9500
!J9 = 60 \ If J8 Let J9 = 18
j8=0
j9=60
! STARTHERE: Rem "
!Window On 
!Gosub L_10000
!Window Off 
!L_900: Print @0,7;'CE';"SORT BY  V: VENDOR OR  L: LOCATION ";
SORT = 1 ! sort by vendor
!Input Len 16384 + 1;""L3$ \ If L3$ = "E" Goto L_9000
!If L3$ = "V" Let SORT = 1
!If L3$ = "L" Let SORT = 2
!L_950: If Not(SORT) Goto L_900
L3$ = " ",L3$ \ L4$ = " ",L4$ \ I$ = " ",I$
!If SORT = 1 Print @0,8;"ENTER STARTING VENDOR, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!If SORT = 2 Print @0,8;"ENTER STARTING LOCATION, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input Len 16384 + 6;""I$ \ If I$ = "E" Goto L_9000
!L3$[1,Len(I$)] = I$[1,Len(I$)]
!I$ = " ",I$
!If SORT = 2 Print @6,9;"ENDING   LOCATION, <CR> FOR LAST,   E: TO EXIT : ";'CL';
!If SORT = 1 Print @6,9;"ENDING   VENDOR, <CR> FOR LAST,   E: TO EXIT : ";'CL';
!Input Len 16384 + 6;""I$ \ If I$ = "E" Goto L_9000
!L4$[1,Len(I$)] = I$[1,Len(I$)]
!If L4$ = "" Let L4$ = "}}}}}}}}}}}}}}}}"
!If L3$ <= L4$ Goto L_1100
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_950
Call Dxget("SVEND",tmp$)
let tmp3=tmp$
if tmp3<0 or tmp3>999999
	let eflag=eflag+1
	let message$=message$+" Invalid Starting Vendor Code Entered "
endif
let l3$=tmp3 using "######"
Call Dxget("EVEND",tmp$)
let tmp3=tmp$ \ if tmp$="" let tmp3=999999
if tmp3<0 or tmp3>999999
	let eflag=eflag+1
	let message$=message$+" Invalid Ending Code Vendor Code Entered "
endif
let l4$=tmp3 using "######"
if l3$>l4$
	let eflag=eflag+1
	let message$=message$+" Ending Vendor Code Must Be Greater than Starting Vendor Code  "
endif
L_1100: If SORT = 1 Let VLS$ = L3$;VLE$ = L4$ \ L3$ = " ",L3$ \ L4$ = "z",L4$
!If SORT = 2
!L_1120: Print @0,10;"ENTER NUMBER OF CHARACTERS TO PAGE BREAK ON LOCATION (0-6) ";'CE';
 ! Input Len 16384 + 1;""U5$
 ! SORTNUM = U5$
 ! If SORTNUM < 0 Or SORTNUM > 6 Goto L_1120
!End If 
!L_1170: If SORT = 2 Goto L_1200
!L_1172: Print @0,11;"SORT UNDER VENDOR BY  P: PRODUCT CODE OR  L: LOCATION ";'CE';
!Input Len 16384 + 1;""VS$ \ If VS$ = "E" Goto L_9000
!If VS$ = "P" Goto L_1200
!If VS$ <> "L" Goto L_1172
!Print @0,12;"ENTER STARTING LOCATION, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input Len 16384 + 6;""I$ \ If I$ = "E" Goto L_9000
!L3$[1,Len(I$)] = I$[1,Len(I$)]
let VS$ = "L" ! vendor by Location

Call Dxget("SLOC",tmp$)
if rtrim$(tmp$)<>""
	let l3$=rtrim$(tmp$)+blank$
else
	let l3$=blank$
endif
Call Dxget("ELOC",tmp$)
if rtrim$(tmp$)<>""
	let l4$=rtrim$(tmp$)+blank$
else
	let l4$="}}}}}}}}}}}}}}}}"
endif
if l3$>l4$
	let eflag=eflag+1
	let message$=message$+" Ending Location Must Be Greater than Starting Location  "
endif
let L1$=" ",L1$
LET L2$="z",L2$
Call Dxget("SPROD",tmp$)
if rtrim$(tmp$)<>""
	let l1$=tmp$
endif
Call Dxget("EPROD",tmp$)
if rtrim$(tmp$)<>""
	let l2$=tmp$
endif
if l1$>l2$
	let eflag=eflag+1
	let message$=message$+" Ending Product Code Must Be Greater than Starting Product Code  "
endif
!Print @6,13;"ENDING   LOCATION, <CR> FOR LAST,   E: TO EXIT ; ";'CL';
!Input Len 16384 + 6;""I$ \ If I$ = "E" Goto L_9000
!L_1190: L4$[1,Len(I$)] = I$[1,Len(I$)]
!If L4$ = "" Let L4$ = "}}}}}}}"
!If L3$ <= L4$ Goto L_1198
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1170
!L_1198: Rem
!L_1200: Print @0,14;"ENTER STARTING PRODUCT CODE, <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input Len 16384 + 12;""L1$ \ If L1$ = "E" Goto L_9000
!Print @6,15;"ENDING   PRODUCT CODE, <CR> FOR LAST,   E: TO EXIT : ";'CL';
!Input Len 16384 + 12;""L2$ \ If L2$ = "E" Goto L_9000
!If L2$ = "" Let L2$ = "}}}}}}}}}}}}}}}}"
!If L1$ <= L2$ Goto L_1270
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1190
!L_1270: L1$ = L1$,"            " \ L2$ = L2$,"            "

K1$ = K2$
J1 = 90 \ J2 = 0
WH = 0
!L_1330: Print @0,16;"ENTER WAREHOUSE TO PRINT FOR,   E: TO EXIT : ";'CE';
!Input Len 16386;""J3$ \ If J3$ = "E" Goto L_9000
!WH = J3$ \ If WH < 1 Or WH > 99 Goto L_1330
Call dxget("WHSE",TMP$) ! whse 
wh= TMP$                    
If wh < 1 Or wh > 99   
	let eflag=eflag+1
	let message$=message$+" Invalid Warehouse Entered "
else
	!K10$ = " ",K10$;K10$[1,2] = WH Using "##"
	!Search #10,2,1;K10$,R10,E !  \ If E > 1 Gosub err_search
	!if e<>0
	!	let eflag=eflag+1
	!	let message$="Warehouse "+str$(wh)+" Not on File "
	!endif
endif
LOCSORT = 0
if not(eflag)
	If P9$[41,41] = "W" Call "CHKWRASL",WH,RASL[]
endif
!If Not(RASL) Goto EDTINVCLASS
!If SORT = 2 Goto L_1370 ! LOCATION
!If VS$ = "P" Goto EDTINVCLASS
!EDTINVCLASS: Rem "
!Print @0,19;"ENTER STARTING INVENTORY CLASS   ";
!Input Len 16384 + 2;""X$
!SICLASS = X$
!Print @0,20;"        ENDING INVENTORY CLASS   ";
!Input Len 16384 + 2;""X$ \ If X$ = "" Let X$ = "99"
!X2 = X$
!If X2 < SICLASS
!  Print @0,23;'RB CL';"INVALID RANGE";
!  Signal 3,15
!  Goto EDTINVCLASS
!End If 
!EICLASS = X2
!Print Using "###";@32,19;'CL';SICLASS;@32,20;EICLASS;
LET SICLASS=0;EICLASS=99
Call Dxget("SICLASS",tmp$)
LET SICLASS=TMP$
If SICLASS < 0 Or SICLASS > 99   
	let eflag=eflag+1
	let message$=message$+" Invalid Starting Inventory Class Entered "
endif
Call Dxget("EICLASS",tmp$)
LET EICLASS=TMP$ \ if tmp$="" let eiclass=99
If EICLASS < 0 Or EICLASS > 99   
	let eflag=eflag+1
	let message$=message$+" Invalid Ending Inventory Class Entered "
endif
if siclass>eiclass
	let eflag=eflag+1
	let message$=message$+" Ending Inventory Class Must Be Greater than Starting "
endif
if custom_customer$="ATHENS" ! use preset loc mask - not rasl
	IF NOT(RASL) ! "Custom Athens - need locsort on Non-Rasl
		Let LocMask$="A-BBTT"
	    If Sort=2 Or VS$="L" Goto L_1420:
		GOTO L_1500: !  "OR SORT<>2 GOTO L_1500:
	Endif
Endif
L_1370: Rem GET WHSE CONTROL RECORD
if rasl<>0
K10$ = " ",K10$;K10$[1,2] = WH Using "##";K10$[5,5] = "@"
Search #10,2,1;K10$,R10,E !  \ If E > 1 Gosub err_search
If E = 1 Goto L_1400
Mat Read #10,R10,40;WL1;
Mat Read #10,R10,76;WLA;
L_1400: Rem.  RASL SORT OPTION
If WL1[1] < 2 Or WL1[1] > 3 Let WL1[1] = 2
If WL1[2] < 2 Or WL1[2] > 3 Or WL1[2] = WL1[1] Let WL1[1] = 2;WL1[2] = 3
If WLA[3] + WLA[4] + WLA[5] <> 6 Or Not(WLA[3]) Or Not(WLA[4]) Or Not(WLA[5]) Let WLA[3] = 2;WLA[4] = 3;WLA[4] = 1
LOCMASK$ = ""
For I = 1 To WLA[3] \ LOCMASK$ = LOCMASK$,"a" \ Next I
If WL1[1] = 2
  For I = 1 To WLA[4] \ LOCMASK$ = LOCMASK$,"b" \ Next I
  For I = 1 To WLA[5] \ LOCMASK$ = LOCMASK$,"t" \ Next I
Else 
  For I = 1 To WLA[5] \ LOCMASK$ = LOCMASK$,"t" \ Next I
  For I = 1 To WLA[4] \ LOCMASK$ = LOCMASK$,"b" \ Next I
End If 
L_1420: ! 
locsort=0
Call Dxget("SRTAISLE",tmp$)
LET LOCSORT=TMP$
If locsort<0 or locsort>4
	let eflag=eflag+1
	let message$=message$="Invalid RASL Sort Aisles Option "
endif
endif
!L_1420: Print @0,17;'CL';"SORT AISLES: <CR>:AS IS ";
!Print LOCMASK$;
!Print ", TIER/BIN 1:NUMERIC, 2:ODDS/EVENS ";
!Print @0,18;'CL';@39,18;"3:ODDS ONLY, 4:EVENS ONLY    ";
!Input Len 16385;""J3$ \ If J3$ = "E" Goto L_9000
!LOCSORT = J3$
!If LOCSORT < 0 Or LOCSORT > 4 Or Fra(LOCSORT) Goto L_1420
!EDTINVCLASS: Rem "
!Print @0,19;"ENTER STARTING INVENTORY CLASS   ";
!Input Len 16384 + 2;""X$
!SICLASS = X$
!Print @0,20;"        ENDING INVENTORY CLASS   ";
!Input Len 16384 + 2;""X$ \ If X$ = "" Let X$ = "99"
!X2 = X$
!If X2 < SICLASS
!  Print @0,23;'RB CL';"INVALID RANGE";
!  Signal 3,15
!  Goto EDTINVCLASS
!End If 
!EICLASS = X2
!Print Using "###";@32,19;'CL';SICLASS;@32,20;EICLASS;
L_1500: Rem DETAIL/SUMMARY
!Print @0,21;'CE';"PRINT IN  D: DETAIL (WIDE FORMAT) OR  S: SUMMARY (NARROW FORMAT)? (E: EXIT)  ";
!!Input Len 16384 + 1;""J3$ \ If J3$ = "E" Goto L_9000
!If J3$ <> "D" If J3$ <> "S" Goto L_1500
!
!DETL = 0 \ If J3$ = "D" Let DETL = 1;ALTF = 0 \ Goto L_1600
!L_1550: Print @0,22;'CL';"PRINT ALL ALTERNATIVE ITEM CODES? (Y/N)   ";
!Input Len 16384 + 1;""J3$ \ If J3$ = "E" Goto L_9000
!If J3$ <> "Y" If J3$ <> "N" Goto L_1550
!ALTF = 0 \ If J3$ = "Y" Let ALTF = 9
!L_1600: Rem SET UP INDEX
!Print @0,23;'CE';"SELECT  P: print  R: reselect all  E: exit   ";
!Input Len 16384 + 1;""J3$ \ Call String(1,J3$)
!If J3$ = "E" Goto L_9000
!If J3$ = "R" Goto STARTHERE
!If J3$ <> "P" Goto L_1600
Call Dxget("PRTOPT",tmp$)
if rtrim$(tmp$)="D"
	let altf=0
	let detl=1
	goto starthere:
endif
if rtrim$(tmp$)="S"
	let altf=0
	let detl=0
	goto starthere:
endif
if rtrim$(tmp$)="A"
	let altf=9
	let detl=0
	goto starthere:
endif
let eflag=eflag+1
let message$=message$+"Invalid Print Option Selected "
starthere: ! start update here
IF EFLAG<>0 GOTO OUTEND:
Gosub L_8000
K1$ = " ",K1$
K3$ = " ",K3$
!Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
!If J8 Print 'CS';
!If Err 0 Gosub L_9600
L_2000: Search #9,3,1;K1$,R1,E
If E Goto L_9100
if custom_customer$="ATHENS"
	IF SORT=2 AND LOCSORT LET EVEN[1]=K1$[4,4] ! "odd or even
	IF SORT=2 IF LOCSORT IF PLOC$="" 
	  If RASL LET PLOC$[1,10]=K1$[26,31],"    "
	  If Not(RASL) Let PLoc$=k1$[1,2]+K1$[5,6]+K1$[3,3]+K1$[7,7]
	  If PLoc$[1,1]="}" Let PLoc$=k1$[2,7]
	Endif
Else
If SORT = 2 And LOCSORT Let EVEN[1] = K1$[2 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5]]
If SORT = 2 If RASL If LOCSORT If PLOC$ = "" Let PLOC$[1,10] = K1$[26,31],"    "
Endif
If SORT = 2 If PLOC$ = "" Let PLOC$[1,10] = K1$[1,10]
If SORT = 1 Let VEND = K1$[1,6]
If SORT = 1 And VS$ = "P" Let LOC$[1,10] = K1$[26,31],"    "
If SORT = 1 And VS$ = "L" Let LOC$[1,10] = K1$[7,13],"   "
if custom_customer$="ATHENS"
	IF SORT=1 AND VS$="L" AND LOCSORT LET LOC$[1,10]=K1$[26,31],"    "
Else
	If SORT = 1 And VS$ = "L" And RASL And LOCSORT Let LOC$[1,10] = K1$[26,31],"    "
Endif
If SORT = 1 If Not(PVEND) Let PVEND = VEND
If SORT = 1 If PVEND <> VEND Let J1 = 99 \ PVEND = VEND
If SORT = 2 Let LOC$ = " ",LOC$ \ LOC$[1,10] = K1$[1,10]
if custom_customer$="ATHENS"
	IF SORT=2 IF LOCSORT 
	  If RASL LET LOC$=" ",LOC$;LOC$[1,10]=K1$[26,31],"     "
	  If Not(RASL) Let Loc$=K1$[1,2]+K1$[5,6]+K1$[3,3]+K1$[7,7]
	Endif
Else
	If SORT = 2 If RASL If LOCSORT Let LOC$ = " ",LOC$;LOC$[1,10] = K1$[26,31],"     "
endif
If SORT = 2 If SORTNUM If PLOC$[1,SORTNUM] <> LOC$[1,SORTNUM] Let J1 = 99;PLOC$[1,10] = LOC$[1,10]
If SORT = 2 And LOCSORT And EVEN[0] <> EVEN[1] Let J1 = 99;EVEN[0] = EVEN[1]
Mat Read #2,R1,0;P$;
Mat Read #2,R1,156;B;
Mat Read #2,R1,256;A;
Mat Read #2,R1,460;A2;
Mat Read #2,R1,508;A3;
Mat Read #2,R1,512;PFU1;
Mat Read #2,R1,554;PFU2;
Mat Read #2,R1,944;P2$;
KF7$ = " ",KF7$;KF7$[1,12] = P$[140,151]
If PFU1[8] > 0 Mat Read #3,PFU1[8],10;SUNIT$;
If PFU1[8] = -1 Let SUNIT$ = "CWT"
For X9 = 0 To 7
  If PFU1[X9] = PFU1[8] Goto L_2078
Next X9
X9 = 0
L_2078: If X9 Let FACTOR = PFU2[X9 - 1] Else Let FACTOR = 1
PL$ = " ",PL$;PR$ = " "
PL$[1,12] = P$[140,151]
PL$[13,14] = WH Using "##"
PL$[15,20] = LOC$[1,6]
Search #6,2,1;PL$,R6,E \ If E > 1 Gosub err_search
If E Goto L_2150
Mat Read #6,R6,20;PRIM;
If PRIM Let PR$ = "P"
L_2150: Gosub L_3000
Gosub L_5800
Gosub L_5000
Gosub L_2200
Goto L_2000
L_2200: Rem TOTALS CALC
Return 
L_3000: Rem VENDOR
Gosub L_8283
V$ = " ",V$
V4$ = " ",V4$
V4$ = B[24] Using "######"
Search #4,2,1;V4$,R4,E
If E And B[24] Let V$ = "**** VENDOR NOT ON FILE ****" \ Return 
If E And Not(B[24]) Let V$ = "*** VENDOR NOT SPECIFIED ***" \ Return 
Mat Read #4,R4,0;V$;
Return 
L_3800: Rem GET ALL ALT ITEMS
DONE = 0
L_3810: Search #7,3,2;KF7$,R7,E \ If E = 2 Let DONE = 9
If E If Not(DONE) Gosub err_search
If KF7$[1,12] <> P$[140,151] Let DONE = 9
Return 
Gosub L_5800
Print #0;"\15\** TOTALS **";
Return 
L_5000: Rem PRINT LINE
If Not(DETL) Goto L_5400
Print #0; Tab 1;P$[9,38];
Print #0; Tab 35;P$[93,112];
If Not(WH) Print #0; Tab 57;"____";
If WH Print #0; Using "##"; Tab 57;WH;
Print #0; Tab 62;LOC$[1,10];
Print #0; Tab 72;PR$;
Print #0; Tab 75;P$[140,151];
Print #0; Tab 90;"_________________________________________";
Print #0;""
Print #0; Tab 1;P$[63,92];
Print #0; Tab 35;V$[1,20];
Print #0; Tab 57;P2$[13,27];
BUNIT$ = "ERR." \ If PFU1[0] > 0 Mat Read #3,PFU1[0],10;BUNIT$;
Print #0; Using " = ####### "; Tab 90;SUNIT$;FACTOR;
If FACTOR > 1 Print #0;BUNIT$;
Gosub L_5300 ! other UM's
If not(rasl)
	prtlc=1
	gosub L_8400
	if lcprt print #0;"  " \ let j1=j1+1
	if j1>j9 gosub L_5800
Endif
If ALTF Gosub L_5210
Print #0;"  "
Return 
Print #0; Tab 65;LINE_$;
Print #0;" "
Return 
L_5210: Rem PRINT ALT ITEMS
POS1 = 0 \ Gosub L_3800
If Not(DONE) Print #0; Tab 1;"ALT ITEMS: ";KF7$[13,36];
If Not(DONE) Let POS1 = 35
L_5225: Rem LOOP
If Not(DONE) Gosub L_3810
If Not(DONE) Print #0;", ";KF7$[13,36]; \ POS1 = POS1 + 26
If Not(DONE) If POS1 > 106 Print #0;"" \ J1 = J1 + 1;POS1 = 0
If Not(DONE) Goto L_5225
If POS1 Print #0;"" \ J1 = J1 + 1
Return 
L_5300: Rem PRINT UP TO 3 VAILD UNITS
Print #0;" (";
For VUM = 0 To 3
  If PFU1[VUM] = 0 Goto L_5360
  If PFU1[VUM] > 0 Mat Read #3,PFU1[VUM],10;VUNIT$;
  Print #0;VUNIT$;" ";
L_5360: Next VUM
If P$[127,127] = "Y" Print #0;"LBS ";
Print #0;")"
Return 
L_5400: Rem SUMMARY VERSION
Print #0; Tab 0;LOC$[1,10];
Print #0; Tab 11;PR$;
Print #0; Tab 13;P$[140,151];
Print #0; Tab 26;P$[9,38];
Print #0; Tab 57;"______________________"
If SORT <> 2 If RASL Print #0; Tab 0;"LCTN: ";K1$[23,28];
Print #0; Tab 26;P$[63,92];
Print #0; Using " = ####### "; Tab 57;SUNIT$;FACTOR;
If P$[127,127] = "Y" Print #0;" & LBS" Else Print #0;""
If not(rasl)
	prtlc=1
	gosub L_8400
	if lcprt print #0;"  " \ let j1=j1+1
	if j1>j9 gosub L_5800
Endif
If ALTF Gosub L_5210
Print #0;""
Return 
L_5800: Rem HEADINGS ROUTINE
J1 = J1 + 3 \ If J1 < J9 Return 
! If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 6
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
If Not(DETL) Goto L_5900
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;" - 692A- ";T9$;
Print #0; Tab 43;"P H Y S I C A L   I N V E N T O R Y   B O O K"
If RASL If P61$[45,45] = "Y"
  Print #0; Tab 1;"WARNING: REMOVE STOCK FOR ALLOCATED ORDERS BEFORE THE COUNT IS STARTED. IT WILL BE ADDED BY THE SYSTEM TO THE COUNT."
Else 
  Print #0;"\15\";
End If 
If SORT = 1 Gosub L_3000
If SORT = 1 Print #0; Using "VENDOR ###### ";B[24];V$
Print #0; Tab 2;"DESCRIPTION "; Tab 35;"VENDOR ITEM"; Tab 57;"WHSE";
Print #0; Tab 62;"LOCATION";
Print #0; Tab 75;"ITEM CODE"; Tab 95;"    STOCKING UNITS"
Print #0;" " \ Goto L_5990
L_5900: Print #0; Tab 0;ARDATE$; Tab 40 - (Len(CNAME$) / 2);CNAME$; Tab 70;"PAGE";J2
Print #0; Tab 0;" -692A- ";
Print #0; Tab 24;"PHYSICAL INVENTORY BOOK";
If WH Print #0;" - WHSE";WH Else Print #0;""
Print #0;"\15\";
If SORT = 1 Gosub L_3000
If SORT = 1 Print #0; Using "VENDOR ###### ";B[24];V$
Print #0; Tab 0;"LOCATION"; Tab 14;"ITEM CODE";
Print #0; Tab 27;"DESCRIPTION"; Tab 59;"STOCKING UNITS"
Print #0;" "
L_5990: Return 
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_8000: Rem SORT BY LOCATION OR VENDOR
If SORT = 1 Let SVND = VLS$;EVND = VLE$
If SORT = 1 If Not(EVND) Let EVND = 999999
! Print @0,20;"SORTING, PLEASE WAIT...";'CE';
A1$ = " ",A1$
X2 = X2 + 1
L_8010: Search #9,3,1;A1$,R9,E \ If E > 2 Gosub err_search
If E Goto L_8200
Search #9,5,1;A1$,R9,E \ If E Gosub err_search
Goto L_8010
L_8200: Rem INSERT SORTED KEY BY LOCATION OR VENDOR
LOC = 1
A1$ = " ",A1$ \ A1$[1,10] = L1$[1,10]
Search #2,2,1;A1$,R9,E \ If E > 1 Gosub err_search
If Not(E) Goto L_8250
L_8230: LOC = 1
Search #2,3,1;A1$,R9,E \ If E > 2 Gosub err_search
If E Return 
L_8250: Mat Read #2,R9,0;P$; \ Mat Read #2,R9,156;B;
X2 = X2 + 1
! If Fra(X2 / 100) = 0 Print "@";
If A1$ > L2$[1,Len(A1$)] Return 
If Not(CFLG) Goto L_8270
K11$ = " ",K11$ \ K11$ = P$[152,155]
Search #98,2,1;K11$,R[11],E \ If E Goto L_8270
If K11$[1,4] = P$[152,155] Goto L_8230
L_8270: If A1$ < L1$[1,Len(A1$)] Goto L_8230
Gosub L_8283
If Not(WHSEFOUND) Goto L_8230
If Not(PG1[1]) Goto L_8230
if w0[0]=1 and w3[0]<=0 Goto L_8230 ! do not reorder =y and no on hand
If SORT = 1 If SVND > B[24] Goto L_8230
If SORT = 1 If EVND < B[24] Goto L_8230
If W7[6] < SICLASS Or W7[6] > EICLASS Goto L_8230
Goto L_8300
L_8283: WH$ = " ",WH$;WH$[1,12] = P$[140,151];WH$[13] = WH Using "##"
For X = 0 To 9 \ W2[X] = 0 \ Next X
for x = 0 to 24
let w3[x]=0
next x
w0[0]=0
W7[6] = 0
Search #5,2,1;WH$,R8,E \ If E > 1 Gosub err_search
If Not(E)
  Mat Read #5,R8,38;W2;
  mAT READ #5,R8,78;W3;
  Mat read #5,r8,420;w0;
  Mat Read #5,R8,696;W7;
  If W2[3] Let B[24] = W2[3]
  WHSEFOUND = 1
  Mat Read #5,R8,846;WHMISC2;
  PG1[1] = 1
  If WHMISC2[0] ! prodgroup
    PRODGRP$ = WHMISC2[0] Using "###"
    Search #CH_PRODGRP,2,1;PRODGRP$,REC_PRODGRP,E
    If Not(E)
      Mat Read #CH_PRODGRP,REC_PRODGRP,122;PG1;
    End If 
  End If 
Else 
  WHSEFOUND = 0
End If 
Return 
L_8300: ! add locs
Prtlc=0 \ Gosub L_8400
A2$ = " ",A2$
If SORT = 2 Goto L_8380
If LOC$[1,6] <> "      " Goto L_8380
A2$[1,6] = B[24] Using "######"
A2$[14] = A1$
A2$[26,31] = LOC$[1,6]
Search #9,4,1;A2$,R9,E \ If E > 1 Gosub err_search
L_8380: Rem
Goto L_8230
L_8400: Rem ADD LOCATIONS IN PRODLOC
LOC$ = " ",LOC$;lcprt=0
If RASL Let K5$ = " ",K5$;K5$[1,12] = A1$[1,12];K5$[13,14] = WH Using "##"
If RASL Goto L_8700
K5$ = " ",K5$
K5$[1,12] = A1$[1,12]
if prtlc let k5$[1,12]=p$[140,151]
K5$[13,14] = WH Using "##"
L_8450: Search #6,3,1;K5$,R5,E \ If E > 2 Gosub err_search
If E Goto L_8590
if prtlc
	if k5$[1,12]<>p$[140,151] goto l_8590
else
If K5$[1,12] <> A1$[1,12] Goto L_8590
endif
TWH = K5$[13,14] \ If TWH <> WH Goto L_8590
L_8485: Rem STARTING POINT FOR RASL
LOC$[1,6] = K5$[15,20]
if not(rasl) and prtlc ! doesn't apply to RASL
	if loc$[1,6]>=l3$[1,6] and loc$[1,6]<=l4$[1,6] goto L_8450 ! in range
	k98$=" ",k98$;k98$="}"+p$[140,151]
	search #98,2,1;k98$,R,E
	if prtlc=2 let e=1 ! we're printing 1st time now!
	if not(e) ! already printed once - per ERG - print message
		if lcprt=0
			print #0;Tab 57;"OVERFLOWS PREVIOUSLY PRINTED"
			J1=J1+1;lcprt=lcprt+1
		ENDIF
		goto L_8590 ! done - no loop
	Else ! first time printing
		if lcprt=0 ! none printed yet - print Header
			Print #0;tab 57;"OTHER LOCATIONS:"
			j1=j1+1
		endif
		Print #0;Tab 57;loc$[1,6];" _______________"
		lcprt=lcprt+1;J1=J1+1;prtlc=2
		k98$=" ",k98$;k98$="}"+p$[140,151]
		search #98,4,1;k98$,R,E ! add so we know product printed once
		goto L_8450 ! next
	Endif
Endif 
If SORT = 1 And VS$ = "P" Goto L_8691
L_8500: If LOC$[1,6] > L4$[1,6] Goto L_8450
If LOC$[1,6] < L3$[1,6] Goto L_8450
A2$ = " ",A2$
A2$[1,6] = LOC$[1,6]
if custom_customer$="ATHENS"
	IF LOCSORT GOSUB L_8600: \ GOTO L_8560: ! "SORT location diff/check 
	LET A2$[14]=A1$ ! "prod code
	IF LOCSORT LET A2$[26]=LOC$[1,6] ! "store actual location
Else
	If RASL If LOCSORT Gosub L_8600 \ Goto L_8560
	A2$[14] = A1$
	If RASL If LOCSORT Let A2$[26] = LOC$[1,6]
Endif
If SORT = 1 And VS$ = "L"
  I$[1,7] = A2$[1,7];A2$[7,13] = I$[1,7];A2$[1,6] = B[24] Using "######"
End If 
L_8550: Search #9,4,1;A2$,R9,E \ If E > 1 Gosub err_search
L_8560: If Not(RASL) Goto L_8450 Else Goto L_8700
L_8590: ! done
let prtlc=0
Return 
L_8600: Rem LOCATION IS SORTED OTHER THAN KEY
BIN = 0;TIER$ = ""
if custom_customer$="ATHENS" ! non-rasl using locations
	If RASL
	 IF WL1[1]=2 LET BIN=LOC$[3,5];TIER$=LOC$[6,6]
	 IF WL1[1]=3 LET TIER$=LOC$[3,3];BIN=LOC$[4,6]
	Else ! "CUSTOM ATHENS A-BBTT (See LocMask$)
	 Let Bin=Loc$[3,4];Tier$=Loc$[5,6]
	Endif
	! IF TIER$="" OR TIER$=" " GOTO L_8680: ! "tier no good
	If Len(Tier$)<2 Let Tier$=Tier$+"  "
	IF BIN<0 OR FRA(BIN) GOTO L_8680: ! "bin no good (STOCK or nonstandard) 
	LET A2$=" ",A2$;A2$[1,2]=K5$[15,16] ! "AISLE  ! Was 15,16 Athens aisle=1
	LET A2$[3,3]=TIER$[1,1];A2$[4,4]=" ";A2$[5,6]=Loc$[3,4];A2$[7,7]=Tier$[2,2]
	If Bin>99 
	  If WL1[1]<=2 Let a2$[5,7]=Loc$[3,5] ! "screw the tier
	  If WL1[1]=3 Let A2$[5,7]=Loc$[4,6]
	Endif
Else
	If WL1[1] = 2
	  BIN = LOC$[1 + WLA[3],WLA[3] + WLA[4]]
	  TIER$ = LOC$[1 + WLA[3] + WLA[4],6]
	End If 
	If WL1[1] = 3
	  TIER$ = LOC$[1 + WLA[3],WLA[3] + WLA[5]]
	  BIN = LOC$[1 + WLA[3] + WLA[5],6]
	End If 
	If TIER$ = "" Or TIER$ = " " Goto L_8680
	If BIN = 0 Or Fra(BIN) Goto L_8680
	A2$ = " ",A2$;A2$[2,1 + WLA[3]] = LOC$[1,WLA[3]]
	A2$[2 + WLA[3],1 + WLA[3] + WLA[5]] = TIER$
	LOCMASK$ = ""
	For I = 1 To WLA[4] \ LOCMASK$ = LOCMASK$,"#" \ Next I
	A2$[2 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5]] = " "
	A2$[3 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5] + WLA[4]] = BIN Using LOCMASK$
endif
If LOCSORT <= 1 Goto L_8675
If Not(Fra(BIN / 2)) ! "EVENS=one, ODDS=blank (ODDS 1st)
  A2$[2 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5]] = "1"
End If 
If LOCSORT = 3 If Not(Fra(BIN / 2)) Return 
If LOCSORT = 4 If Fra(BIN / 2) Return 
L_8675: Goto L_8690
L_8680: A2$ = " ",A2$;A2$[1,1] = "}";A2$[2,7] = LOC$[1,6]
L_8690: Return 1
L_8691: A2$[1,13] = B[24] Using "######       "
A2$[14,25] = A1$[1,12]
A2$[26,31] = LOC$[1,6]
Search #9,4,1;A2$,R9,E \ If E > 2 Gosub err_search
If E Goto L_8590
Goto L_8450
L_8700: Rem FOR RASL GET LOCATIONS
Search #8,3,2;K5$,R5,E \ If E > 2 Gosub err_search
If E Goto L_8590
If K5$[1,12] <> A1$[1,12] Goto L_8590
TWH = K5$[13,14] \ If TWH <> WH Goto L_8590
Goto L_8485


L_10000: Rem COMMODITY CODE SELECTION
!Print 'CS' \ Gosub L_13000
!CO = 2;RO = 4
!Print @25,0;"Commodity Code Selection"
!If RASL If P61$[45,45] = "Y"
!  Print @0,1;"WARNING: REMOVE STOCK FOR ALLOCATED ORDERS BEFORE THE COUNT IS STARTED."
!  Print @0,2;"IT WILL BE ADDED BY THE SYSTEM TO THE COUNT."
!End If 
!Print @0,3;" S: select Codes to Exclude, or  <CR>: none ";'CL';
!Input Len 5;""L11$
!If L11$ = "" Let CFLG = 0 \ Return 
!CFLG = 1
!Print @0,4;'BR'; Tab 32;"EXCLUDE"; Tab 78;'ER';
!L_10070: L11$ = " ",L11$
!L_10090: Print @0,5;"Enter Commodity Code to Exclude,  -: to search, or  E: to end entry ";'CL';
!Input Len 5;""L11$
!If L11$[1,1] = "-" Swap 1,"SW684" \ Goto L_10090
!If L11$ = "E"
!L_10130: Input @42,7;"Selections Correct? (Y/N) "L2$
!  If L2$[1,1] = "Y" Let CFLAG = 1 \ Return 
!  If L2$[1,1] <> "N" Goto L_10130 Else Goto L_10000
!End If 
!If L11$ = "" Goto L_10070
!Goto L_12000
!L_10200: Rem display seclected commodity codes
!K11$ = " ",K11$ \ K11$[1,Len(L11$[1,4])] = L11$[1,4]
!Search #98,2,1;K11$,R[11],E
!If Not(E)
!  Print @68,7;'CL BR';"ON LIST";
!  Signal 3,15
!  Print @68,7;'ER CL';
 ! Goto L_10070
!End If 
!RO = RO + 2
!If RO > 18 Let CO = CO + 6 \ RO = 10 \ If CO > 77 Let CO = 74
!Print @CO,RO;K11$
!Search #98,4,1;K11$,R[11],E
!Goto L_10070
!L_12000: Rem VALIDATE COMMODITY CODE
!K11$ = " ",K11$ \ K11$[1,Len(L11$[1,4])] = L11$[1,4]
!Search #11,2,1;K11$,R[11],E \ If E > 2 Goto L_9500
!If E
!  Print @68,6;'CL BR';"NOT FOUND";
!!  Signal 3,15
 ! Print @68,6;'ER CL'
!  Goto L_10070
!End If 
!Goto L_10200

ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/692a.se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             




OUTEND: Rem "done
L_9000: Rem EXIT PROGRAM
L_9100: Rem END OF THIS RANGE
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	let message$="Process Complete"
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program