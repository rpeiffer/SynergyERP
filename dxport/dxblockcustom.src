! -- dxblockcustom.lib
! supporting library of custom routines for browser for page block definitions
!
! 1.0 11/20/2008 new 
!
! loadsave -w -n 100,10 -o dxblockcustom.lib src/dxblockcustom.src
!
!all rights reserved. (c)copyright 2008 by: dynamicconcepts 
!
!  sub       blockStatesDropList      creates a states drop down list
!  sub       blockPrintersDropList    creates a printer drop down list
!
declare intrinsic sub env,dxget,dxset,logic,programdump
declare intrinsic function findchannel
!
external lib "libgeneral.lib"
declare external sub addtostr
external lib "dxblockgeneral.lib" !general routines
declare external sub blocksuberr,blockmainerr
!
! ----------------------------------------
external sub blockstatesdroplist(rstr$)
	   !rstr$ is string to concat to, if GUI passed, creates rstr$ in GUI format
	   dim tmp$[50],tmp2$[100],type$[3],e$[60]
	   type$=rstr$
	   dim fdel$[10],rdel$[10]
       call env(1,"FDEL",fdel$)
       call env(1,"RDEL",rdel$)
	   if rstr$="GUI" let rstr$=""
	   do
	    try read tmp$ else exit do
	    if ucase$(type$)="GUI"
	     rstr$=rstr$,tmp$[1,2],'HT',tmp$,"~"
	    else
		 tmp2$=tmp$[1,2],fdel$,tmp$,fdel$,"N",fdel$,rdel$
	     call addtostr(e$,rstr$,tmp2$)
	    end if
	   loop
	  data "AK ALASKA","AL ALABAMA","AR ARKANSAS","AZ ARIZONA","CA CALIFORNIA","CO COLORADO","CT CONNECTICUT","DC DISTRICT OF COLUMBIA","DE DELAWARE"
      data "FL FLORIDA","GA GEORGIA","HI HAWAII","IA IOWA","ID IDAHO","IL ILLINOIS","IN INDIANA","KS KANSAS","KY KENTUCKY","LA LOUISIANA","MA MASSACHUSETTS"
      data "MD MARYLAND","ME MAINE","MI MICHIGAN","MN MINNESOTA","MO MISSOURI","MS MISSISSIPPI","MT MONTANA","NC NORTH CAROLINA","ND NORTH DAKOTA"
      data "NE NEBRASKA","NH NEW HAMPSHIRE","NJ NEW JERSEY","NM NEW MEXICO","NV NEVADA","NY NEW YORK","OH OHIO","OK OKLAHOMA","OR OREGON","PA PENNSYLVANIA"
      data "RI RHODE ISLAND","SC SOUTH CAROLINA","SD SOUTH DAKOTA","TN TENNESSEE","TX TEXAS","UT UTAH","VA VIRGINIA","VT VERMONT","WA WASHINGTON"
      data "WI WISCONSIN","WV WEST VIRGINIA","WY WYOMING"
end sub !blockstatesdroplist
!
! ----------------------------------------
external sub BlockPrintersDropList(...)
! if optional rstr$ passed, it is a .net call, addtstr to rstr$
! if optional xmloption is passed, 0 is off, 1 is on, default is on
! if optional pdf is passed, 0 is off, 1 is on, default is on
  try
    try enter rstr$,... else dim rstr$[1]
	try enter xmloption,... else let xmloption=1
	try enter pdfoption else let pdfoption=1
    !
    dim e$[200],msc2$[100]
    dim P61$[30],P1$[10],P2$[20],U5$[16],Co$[2]
    dim Printers$[100,70]
    dim tmp$[100],tmp1$[25]
    dim blank$[100] \ blank$=" ",blank$
    dim 1%,tmprec[256],R1,P1[3]
    dim 2%,P2[5],C2
    dim 3%,PortNo
    !
    !
    !
    !
    !!!!! sample
    Printers$[0]="1  Default Printer"
    Printers$[1]="P  PDF Display"
    Printers$[2]="D  Disk File"
    Printers$[2]="M  E-Mail"
    !Printers$[3]="A  Archive"
	!prtcnt=4
	prtcnt=3
    !goto endubs
    !!!!! ubs custom
    ! Open user, control and lpt control files
    !
	call dxget("u_port",tmp$)
    PortNo=val(tmp$) ! port # from usercntrl file
    !
    UserChan=FindChannel()
    Open #UserChan,"cntrl/userport"
    read #UserChan,PortNo;R1; 
	! --- R1=-1 ! temp line
    !
    CntrlChan=FindChannel()
    call dxget("S_USER.AppID",Co$) !company #
    Open #CntrlChan,"cntrl/cntrl" + Co$
    MAT READ #CntrlChan,61,0;P61$;
    !
    LptChan=FindChannel()
    Open #LptChan,"cntrl/cntrl.lpt"
    !
    ! Clear/reset printer list
	!
	For cnt = 1 To Chf(LptChan) - 1
      Mat Read #LptChan,cnt,30;P1;
      If P1[1] = PortNo 
        P1 = 0 \ P1[1] = 0
        Mat Write #LptChan,cnt,30;P1;
      endif
    Next cnt
    !
	! Create printer list
    !
    prtcnt=0 ! init counter
	if rstr$<>"GUI" let Printers$[0]="--- select one ---" \prtcnt=1
	!
    ! Process printers ($)
    For cnt=1 to chf(LptChan)-1
      READ #LptChan,cnt;P1$;
      READ #LptChan,cnt,10;P2$;
      MAT  READ #LptChan,cnt,30;P1;
      READ #LptChan,cnt,40;P2;
      if P1$[1,1]<>"*" and Rtrim$(p1$)<>"" !crt types not valid on web
	   READ #LptChan,0,P1[3]*16;U5$;  ! paper type (forms)
	   !
	   C2=val(Co$) !company #
       CALL LOGIC(1,2^C2,P2,P2)    !??does what??
	   if R1=-1 let P2=1 ! all printers
       !
       tmp1$=cnt using "&& ",P2$,blank$ ! printer record # & name
	   
       !old code, not necessary all spooled printers now 
	   !if P1=0
       ! tmp$="   clear",blank$[1,30]
       !else
       ! tmp$="   IN USE BY SELECTION ",P1 using "###" ! menu #
	   ! tmp$=tmp$," user ",P1[1] using "####  "
       !endif
	   if P2
	    ! Printers$[prtcnt]=tmp1$,rtrim$(U5$[1,16]) ! printer, status & form
	    Printers$[prtcnt]=tmp1$
        prtcnt=prtcnt+1
	   endif !P2
	  endif !P2$[1,1] 
    next cnt
    !
    ! Process other print type
    !
	if pdfoption
	 Printers$[prtcnt]="P  PDF Display"
	 prtcnt=prtcnt+1
	end if
	!
    Printers$[prtcnt]="D  Disk File"
    prtcnt=prtcnt+1
    !
	P61$[30,30]="N" !per err 081120 no email
    if P61$[30,30]="Y" ! e-mail
      Printers$[prtcnt]="M  E-Mail"
      prtcnt=prtcnt+1
    endif
    !
    if P61$[29,29]="Y" ! archive
	  ! note: archiving does not exist in erp- use saves to my reports task#19630
      !Printers$[prtcnt]="A  Archive"
      !prtcnt=prtcnt+1
    endif
    close #UserChan,#CntrlChan,#LptChan
    !end ubs custom
    endubs:
    !
    !  write html variables
	if rstr$=""
     call dxset("Printers",Printers$[])
	else !.net
     dim fdel$[10],rdel$[10]
     call env(1,"FDEL",fdel$)
     call env(1,"RDEL",rdel$)
	 if rstr$="GUI" let rstr$=""
	 for i=0 to prtcnt-1
	  if fdel$="GUI" !dl4term gui
	   rstr$=rstr$, printers$[i,1,2],'ht',rtrim$(printers$[i]),"~"
	  else
	   tmp$=Printers$[i],fdel$,Printers$[i,1,2],fdel$,"N",fdel$,rdel$
	   call addtostr(e$,rstr$,tmp$)
	  end if
	 next i
	 if xmloption
	  tmp$="To browser",fdel$,"-1",fdel$,"Y",fdel$,rdel$
	  call addtostr(e$,rstr$,tmp$)
	 end if !xmloption
	end if
    !
    !
  else
  if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000 
 end try
end sub ! BlockPrinterDropList
