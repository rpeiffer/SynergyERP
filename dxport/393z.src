! >>> Program 393z
!
! description: Truck Reorder Report
!
! loadsave -w -n 100,10 -o prog/dxport/393z.dl4 src/393z.src
!
! 1.0 04/01/2008 
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR  3, 2006  15:00:07
Rem /w/papermaster/r2002//usr/acct/dek/work/r2002/po/po393.src (univ2) [dek] {16922}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem PO393  MIN MAX  - Sort by Vendor/Product
Rem Converted to bedit on  04/30/1996
Rem LAST UPDATE  roman 02/09/1993. check do-not-reorder flag cct #48631
! CUSTOM UPCW ! 7/30/09 jliu cct234637 round up the reorder qty base on vendor order u/m
Declare Intrinsic Sub InpBuf,String
!!-!! Option Default Dialect IRIS1
Com 1%,PFU1[20],CNVTU[2],UN[2],3%,PFU2[6],CNVTA,A[33],UWORK[10]
If Err 0 Gosub ERR_TRAP
!
dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
!
!!-!! If Spc(13) = 11 !!-!! Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim J$[40],J0$[10],J1$[40],J2$[20],J3$[40],J4$[40]
Dim U9$[131],X$[10],Y$[80],K16$[60],W1$[32],D1$[10]
Dim U5$[50],K1$[50],D8$[12],F$[16],V$[20]  !!!-!! ,I0$[20],I1$[20],I2$[20],I3$[20],I4$[20]
Dim P9$[50],KTR$[50],K12$[50],Custom_customer$[30],K18$[50]
Dim S1$[12],S2$[12],K9$[60],VEND$[30],K5$[60],runit$[4]
Dim D$[156],CNAME$[30],SUNIT$[4],UNIT$[10],K2$[50],cunit$[4]
Dim 1%,F,T1[1],H4,W0[3],L1[5],ORD_L3[3],ORD_UN[2],ARMONTH,BOYMONTH
Dim 2%,X2,W2[9],B[24],D9[5],L2[2],ORD_H0[12],ORD_H5[16],ORD_L2[2],ORD_L4[3]
Dim 2%,ORD_L6[5],Q4,Q8,PR_C4[10]
Dim 2%,W7[14],curdate,curper,endper,ardate
Dim 3%,Q2,Q3,AMOUNT,PLP3[4],QTYBO,L3[6],ORD_L7[12],ORD_S3[17],ORD_OLM[6]
Dim 3%,J,X1,W3[24],W5[25],A1[7],PF_LOAD2,PRPARC[3],WHMISC[6],vendtot[5],WH9[25]
Dim 3%,PROD_REC,QTYBO,TRANSIN_QTY,usper[1],costno,cost,projamt,priorusage,ordqty,extordamt,curryr[12],lastyr[12],reorder
Def FNR(X) = Sgn(X) * (Int((Abs(X) * 100) + .5) / 100)
Def FNU(X) = Int(Abs(X) + Sgn(Fra(Abs(X)))) * Sgn(X)
!!!! dx add xport reporting code
Dim tmp$[500],tmp1$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

BEGINP: Rem "First what Type Report to Run

For K1 = 3 To 20
  Read J \ If J = -1 Goto NXTFLE
  Read #1,88,J;F$;
  Ropen #K1,F$
NXTFLE: Next K1
Data "1792","2432","2400","1808","1728","2416","-1","2448","2464"
Data "-1","-1","2480","2512","2336","2528","1744","1888","1840"
CH_SORT = 9
Read #1,3;CNAME$;
Mat Read #1,115;D9;
Mat Read #1,19,50;P9$;
!mat read #1,0,100;currdate;
mat read #1,0,108;ardate;
mat read #1,0,120;armonth;
mat read #1,51,74;boymonth;
let tmp$=ardate using "&&&&&&"
let currper=tmp$[1,4]
let tmp3=tmp$[1,2]
let tmp3=tmp3-2 ! 2 years max
if tmp3<0 let tmp3=0
let tmp1$[1,2]=tmp3 using "&&"
let mth=tmp$[3,4]\let mth=mth-1
if mth<1 let mth=1
let tmp1$[3,4]=mth using "&&"
let endper=tmp1$
mat read #1,115,60;custom_customer$; ! ALT
custom_customer$=RTrim$(UCase$(custom_customer$))
U5$ = Msc$(3)
D8$ = U5$[1,12]
If Err 0 Let J8 = Spc(8)
J8 = 0 \  N = Chf(0) \ If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
L9 = 60 ! \ If J8 Let L9 = 20
!
!
if J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"393",fdel$,rdel$
  call addtostr(e$,rstr$,tmp$)
End if
!
!!!! dx add xport reporting code
call dxget("BUYER",tmp$) \ BUYER=tmp$  ! buyer number
call dxget("I0",V$) \ if RTRIM$(V$)="" let SVEND="0" else SVEND=V$			!ENTER STARTING	
call dxget("I1",V$) \ if RTRIM$(V$)="" let EVEND="999999" else EVEND=V$		!ENTER ENDING VENDOR
call dxget("I2",V$) \ ALLPRD = V$									!Product Type
call dxget("I3",V$) \ if RTRIM$(V$)="" let WHSE="1" else WHSE=V$			!CHECK WAREHOUSE
call dxget("I4",UNIT$) \ UnitType = UNIT$							!SELECT UNIT
call dxget("COSTUM",tmp$) \ COSTNO = tmp$
call dxget("VPB",tmp$) \ pbvc=0 \ if RTRIM$(tmp$)<>"" let pbvc=1			! page break on vendor
call dxget("UPSTART",tmp$)
if rtrim$(tmp$)=""
	let e$="Invalid starting usage period, must be between 0100 and 1299!" \ error 10000
endif
let tmp3=tmp$
let tmp$=tmp3 using "&&&&"
let tmp3=tmp$[1,2]
if tmp3<1 or tmp3>12
	let e$="Invalid starting usage period, must be between 0100 and 1299!" \ error 10000
endif
let tmp3=tmp$[3,4]
if tmp3<0 or tmp3>99
	let e$="Invalid starting usage period, must be between 0100 and 1299!" \ error 10000
endif
let tmp1$=tmp$[3,4],tmp$[1,2]
let usper[0]=tmp1$
if usper[0]>currper
	let e$="Invalid starting usage period, must be within current period or past" \ error 10000
endif
if usper[0]<endper
	let tmp$=endper using "&&&&"
	let e$="Invalid starting usage period, cannot exceed accounting period "+tmp$[3,4]+tmp$[1,2]
	error 10000
endif
call dxget("UPEND",tmp$)
if rtrim$(tmp$)=""
	let e$="Invalid ending usage period, must be between 0100 and 1299!" \ error 10000
endif	
let tmp3=tmp$
let tmp$=tmp3 using "&&&&"
let tmp3=tmp$[1,2]
if tmp3<1 or tmp3>12
	let e$="Invalid ending usage period, must be between 0100 and 1299!" \ error 10000
endif
let tmp3=tmp$[3,4]
if tmp3<0 or tmp3>99
	let e$="Invalid ending usage period, must be between 0100 and 1299!" \ error 10000
endif
let tmp1$=tmp$[3,4],tmp$[1,2]
let usper[1]=tmp1$
if usper[1]<endper
	let tmp$=endper using "&&&&"
	let e$="Invalid ending usage period, cannot exceed accounting period "+tmp$[3,4]+tmp$[1,2]
	error 10000
endif
if usper[1]>currper
	let e$="Invalid ending usage period, must be within current period or past" \ error 10000
endif
if usper[0]>usper[1]
	let e$="Ending Date must be greater than Starting Date"\error 10000
endif

!!!! dx end
If P9$[33,33] <> "Y" Let WHSE = 1
If D9[5] = 1 Let WHSE = 1
If P9$[33,33] = "Y" Let WHDETL = 1 else WHDETL = 0
!
if BUYER < -1 Or BUYER > 999  let e$="Invalid buyer number, must be -1 for none, 0 for all or from 1 to 999" \ error 10000
if SVEND<0 or SVEND>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
if SVEND>EVEND or EVEND>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
if WHSE < 1 or WHSE > D9[5] let e$="Invalid warehouse, must be between 1 and ",D9[5],"!" \ error 10000
!
U5$ = " ",U5$
If UnitType = 1 Let U5$ = "IN STOCKING UNITS "
If UnitType = 2 Let U5$ = "IN SELLING UNITS "
If UnitType = 3 Let U5$ = "IN PURCHASING UNITS "
If UnitType = 4 Let U5$ = "IN COSTING UNITS "
If UnitType = 5 Let U5$ = "IN PRICING UNITS "
If UnitType = 6 Let U5$ = "IN PRODUCTION UNITS "
UnitType = UnitType + 7

D1$ = " ",D1$
If COSTNO = 1 Let D1$ = "BASE"
If COSTNO = 2 Let D1$ = "PO"
If COSTNO = 3 Let D1$ = "NETPO"
If COSTNO = 4 Let D1$ = "AVG."
If COSTNO = 5 Let D1$ = "LOAD"
If COSTNO = 6 Let D1$ = "REDI"

! valid accounting periods
! let tmp$=currper using "&&&&"
let tmp$=currper using "&&&&"
let mth=tmp$[3,4]
let yr=tmp$[1,2]
let curryr[mth]=tmp$
if mth<12
	let mthctr=mth+1
	let yr=tmp$[1,2]
	let yr=yr-1
	if yr<0 let yr=0
	for ctr=mthctr to 12
		let mth=tmp$[3,4]
		let mth=mth+1
		if mth>12
			let mth=1
			let yr=yr+1
		endif
		let tmp$[1,2]=yr using "&&"
		let tmp$[3,4]=mth using "&&"
		let curryr[ctr]=tmp$
	next ctr
endif
let tmp$=currper using "&&&&"
let mth=tmp$[3,4]
if mth>1
	let mthctr=mth-1
	for ctr=mthctr to 1 step-1
		let mth=tmp$[3,4]
		let yr=tmp$[1,2]
		let mth=mth-1
		if mth<0
			let mth=1
			let yr=yr-1
			if yr<0 let yr=0
		endif
		let tmp$[1,2]=yr using "&&"
		let tmp$[3,4]=mth using "&&"
		let curryr[ctr]=tmp$[1,4]
	next ctr
endif
! now last year
for ctr=1 to 12
	let tmp$=curryr[ctr] using "&&&&"
	let mth=tmp$[3,4]
	let yr=tmp$[1,2]
	let yr=yr-1
	if yr<0 let yr=0
	let tmp$[1,2]=yr using "&&"
	let tmp$[3,4]=mth using "&&"
	let lastyr[ctr]=tmp$
next ctr


!
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!

HeadXML:
if J8 !dx xml headings
	tmp$=""
	If BUYER <> -1 tmp$="BUYER",fdel$
	tmp$=tmp$,"VENDOR",fdel$		!;W2[3];VEND$
	tmp$=tmp$,"VENDOR NAME",fdel$
	tmp$=tmp$,"ITEM CODE",fdel$
	tmp$=tmp$,"DESCRIPTION1",fdel$
	tmp$=tmp$,"VENDOR ITEM",fdel$
	tmp$=tmp$,"DESCRIPTION2",fdel$
	tmp$=tmp$,"ON HAND",fdel$
	tmp$=tmp$,"ON SO",fdel$
	tmp$=tmp$,"ON TR",fdel$
	tmp$=tmp$,"ON PO",fdel$
	tmp$=tmp$,"QTY UM",fdel$
	tmp$=tmp$,"PROJECTION",fdel$
	tmp$=tmp$,"USAGE",Fdel$
	if costno>0
		tmp$=tmp$,rtrim$(d1$)," COST",fdel$
		tmp$=tmp$,"COST UM",fdel$
	endif
	tmp$="ORDER QTY",FDEL$
	IF COSTNO>0
		TMP$=TMP$,"ORDER DOLLARS",FDEL$
	ENDIF
	tmp$=tmp$,"MIN",fdel$
	tmp$=tmp$,"MAX",fdel$
	tmp$=tmp$,"MINMAX ORD QTY",FDEL$	
	call addtostr(e$,rstr$,tmp$+rdel$)
	return ! dx xml
end if

!
STRTSORT: Rem SORT BY VENDOR
!!-!! Print @0,21;'CE';@5,21;"SORTING PLEASE WAIT"; \ Signal 3,0
K9$ = " ",K9$
CLRSORT_LOOP: Rem "Clear sort file
Search #9,3,1;K9$,R1,E \ If E = 2 Goto CLRSORT_DONE
!!-!! If E Gosub ERR_SEARCH
Search #9,5,1;K9$,R1,E !!-!! \ If E Gosub ERR_SEARCH
If E Let e$ = "syserrorfile 393 sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K9$ \error 10000
Goto CLRSORT_LOOP
!
CLRSORT_DONE: Rem "okay now sort
K1$ = " ",K1$
PRODFLE_LOOP: Rem "thru Product File
Search #3,3,1;K1$,R1,E
If E = 2 Goto SORT_DONE
IF E<>0 GOTO sORT_DONE
Mat Read #3,R1;D$;
Mat Read #3,R1,256;A;
Mat Read #3,R1,156;B;
For X = 0 To 9 \ W2[X] = 0 \ Next X
Gosub GET_PRDWHSE ! \ Goto PRODFLE_LOOP
if e<>0 goto Prodfle_loop:
If W0[0] = 1 goto prodfle_loop: 
If Not(W2[3]) Let W2[3] = B[24]
If W2[3] < SVEND Or W2[3] > EVEND Goto PRODFLE_LOOP
If BUYER > 0 And BUYER <> W1[2] Goto PRODFLE_LOOP ! PRODFLE_LOOP
K18$ = " ",K18$;K18$[1,12] = K1$[1,12]
K18$[13] = WHSE Using "##"
K9$ = " ",K9$ \ If BUYER <> -1 Let K9$[1,4] = W1[2] Using "####"
K9$[5,10] = W2[3] Using "######"
K9$[11] = K18$[1,14]
!K9$ = " ",K9$;K9$[1,6] = W2[3] Using "######"
!K9$[7,19] = K1$[1,12]
Search #9,4,1;K9$,R1,E
If E<>0
	Let e$ = "syserrorfile 393 sortfile mode (m)=5 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K9$ \error 10000
endif
Goto PRODFLE_LOOP
!
SORT_DONE: Rem Sort Done! BEGIN
L = 99 \ P = 0
!!-!! Print @0,22;'CS';"PRINTING PLEASE WAIT" \ Signal 3,0
!!-!! If J8 Print 'CS'
! - Signal 3,0
!!-!! If Err 0 Gosub ERR_ESCAPE 
K1$ = " ",K1$
VEND = -999
buyr=-999
SORTFLE_LOOP: Rem "Loop thru Sorted Info
Search #9,3,1;K1$,R1,E
If E = 2 
	if vendtot[0]<>0 or vendtot[1]<>0
		gosub prntvendtot:
	endif
	Goto SRTLOOP_DONE
endif
if buyer<>-1
	LET X2=K1$[1,4]
	IF X2<>BUYR	
		LET NEWVEND=1
		IF VEND=-999 LET NEWVEND=0
		if newvend<>0 gosub prntvendtot:
		LET L=9999
	endif
	let buyr=x2
endif
X2 = K1$[5,10] 
If X2 <> VEND  
    Let Newvend=1
	if vend=-999 let newvend=0 ! not new - 1st one
	if newvend<>0 gosub prntvendtot:
	If PBVC ! PAGE brk on vendor change
		Let L = 9999
	Endif
endif
VEND = X2
Mat Read #3,R1;D$;
Mat Read #3,R1,256;A;
Mat Read #3,R1,512;PFU1;
Mat Read #3,R1,554;PFU2;
Mat Read #3,R1,460;A1;
Mat Read #3,R1,156;B;
Mat Read #3,R1,204;Q8;
Mat Read #3,R1,596;PRPARC;
Mat Read #3,R1,894;PR_C4;
Mat Read #3,R1,938;PF_LOAD2;
For X = 0 To 9 \ W2[X] = 0 \ Next X
PROD_REC = R1 \ Gosub GET_TRANSQTY
Gosub GET_PRDWHSE 
if e<>0 Goto SORTFLE_LOOP
If Not(W2[3]) Let W2[3] = B[24]
Gosub GET_BCKORD
If W0[0] = 2 And (A[3] <= 0 And QTYBO <= 0) Goto SORTFLE_LOOP
Gosub CONVERT_STUFF
Q3 = A[0] - (A[3] + QTYBO) + A[2] + TRANSIN_QTY
Rem IF ALLPRD=2 IF W7[12]=6 IF Q3>B[9] OR (B[9]=0 AND Q3=0) GOTO SortFle_Loop:
LET COST=0
GOSUB GET_COST:
If ALLPRD = 2
  If W7[12] <> 6 Goto SORTFLE_LOOP
  If Q3 > B[9] Goto SORTFLE_LOOP
  If B[9] = 0 And Q3 = 0 Goto SORTFLE_LOOP
End If
gosub get_usage:
let projamt=(A[0]+A[2]+TRANSIN_QTY)-a[3]!(onhand + onPO + onTR) - on SO	
let ordQTY=priorusage-projamt
if ordqty<=0 goto Sortfle_loop
if newvend and j8=0
  If l+3<L9 ! don't print if will go over max lines
	gosub get_vendor
	Print #0;""
	Print #0; Using "  VENDOR  ######    ";W2[3];VEND$
	Print #0;""
	l=l+3
  Else ! just do new header
	L=999
  Endif
	Newvend=0
Endif
Gosub PRNT_HEDNG
Gosub PRNT_DETL
Gosub ADDTOTALS
Goto SORTFLE_LOOP
!
ADDTOTALS: Rem TOTALS CALC
Vendtot[0]=Vendtot[0]+ordQTY
Vendtot[1]=Vendtot[1]+extordamt
T9[1] = T9[1] + A[0]
T9[2] = T9[2] + A[0]
Return 

GET_COST: Rem "Get the Report Cost
COST=0
CUNIT$=" ",CUNIT$
If COSTNO = 0 Return 
If COSTNO = 1 Let COST = PR_C4[4]
If COSTNO = 2 Let COST = B[10]
If COSTNO = 3 Let COST = PRPARC[2]
If COSTNO = 4 Let COST = B[21]
If COSTNO = 5 Let COST = B[8]
If COSTNO = 6 Let COST = PF_LOAD2
If P9$[32,32] = "Y"
  If COSTNO = 1 And W3[18] > 0 Let COST = W3[18]
  If COSTNO = 2 And W3[16] > 0 Let COST = W3[16]
  If COSTNO = 3 And WHMISC[2] > 0 Let COST = WHMISC[2]
  If COSTNO = 4 And W3[15] > 0 Let COST = W3[15]
  If COSTNO = 5 And W3[17] > 0 Let COST = W3[17]
  If COSTNO = 6 And W3[14] > 0 Let COST = W3[14]
End If 
cUNIT$ = "ERR."
If PFU1[11] = -1 Let cUNIT$ = "CWT "
If PFU1[11] = -2 Let cUNIT$ = "LOT "
If PFU1[11] = -3 Let cUNIT$ = "LB  "
If PFU1[11] > 0 Mat Read #7,PFU1[11],10;cUNIT$;
CNVTU[0] = 0
CNVTU[1] = PFU1[11]
CNVTU[2] = 2 
CNVTA = COST \ Gosub CONVERT
LET COST=AMOUNT
Return 

GET_USAGE: ! REM ======================================
LET PRIORUSAGE=0
! CURRENT YEAR
FOR CTR=1 TO 12
	IF CURRYR[CTR]>= USPER[0] AND CURRYR[CTR]<=USPER[1]
		IF WH9[CTR]<>0
			LET PRIORUSAGE=PRIORUSAGE+WH9[CTR]
		ELSE
			LET PRIORUSAGE=PRIORUSAGE+W5[CTR]
		ENDIF
	ENDIF
NEXT CTR
FOR CTR=14 TO 25
	IF LASTYR[CTR-13]>= USPER[0] AND LASTYR[CTR-13]<=USPER[1]
		IF WH9[CTR]<>0
			LET PRIORUSAGE=PRIORUSAGE+WH9[CTR]
		ELSE
			LET PRIORUSAGE=PRIORUSAGE+W5[CTR]
		ENDIF
	ENDIF
NEXT CTR
if priorusage<>0
	CNVTU[0] = 0
	CNVTU[1] = PFU1[UnitType]
	CNVTU[2] = 1
	CNVTA = PRIORUSAGE \ Gosub CONVERT
	PRIORUSAGE = AMOUNT
endif
RETURN


!
GET_BCKORD: Rem "============================================= FIND QTY B/O
QTYBO = 0
K16$ = " ",K16$;K16$[1,12] = D$[140,151]
K16$[13,14] = WHSE Using "##"
PRDLOT_LOOP: Rem "loop thru all for Prod/Whse
Search #17,3,4;K16$,R16,E !!-!! \ If E > 2 Gosub ERR_SEARCH
If E Return 
If K16$[1,12] <> D$[140,151] Return 
X2 = K16$[13,14]
If X2 <> WHSE Return 
Mat Read #17,R16,82;PLP3;
QTYBO = QTYBO + PLP3[4]
Goto PRDLOT_LOOP
!
L_4000: Rem TOTAL PRINT
!
if J8 return
!
Gosub PRNT_HEDNG
Print #0;" "
Print #0; Tab 1;"** TOTALS **";
Print #0; Using "##,###,###.##"; Tab 63;T9[1];
Print #0; Using "#,###,###,###.##"; Tab 110;T9[2];
Print #0;" "
U9$ = " ",U9$
Return 
!
PRNT_DETL: Rem !!-!! Print LINE
!
If J8
	tmp$=""
	If BUYER <> -1 tmp$=BUYR Using "####",fdel$
	Gosub GET_VENDOR
	tmp$=tmp$,W2[3] Using "######",fdel$	!VENDOR
	tmp$=tmp$,rtrim$(VEND$),fdel$ !VENDOR Name
	tmp$=tmp$,rtrim$(D$[140,151]),fdel$ !ITEM CODE
	tmp$=tmp$,rtrim$(D$[9,38]),fdel$ !DESCRIPTION1
	tmp$=tmp$,rtrim$(D$[93,112]),fdel$ !VENDOR ITEM
	tmp$=tmp$,rtrim$(D$[63,92]),fdel$ !DESCRIPTION2
	tmp$=tmp$,A[0] Using "-------#.##",fdel$ !ON HAND
	tmp$=tmp$,A[3] Using "-------#.##",fdel$ !ON SO
	tmp$=tmp$,TRANSIN_QTY Using "-------#.##",fdel$ !on TRS IN
	tmp$=tmp$,A[2] Using "-------#.##",fdel$ !ON PO 
	tmp$=tmp$,rtrim$(SUNIT$[1,4]),fdel$	!UM
	!let projamt=(A[0]+A[2]+TRANSIN_QTY)-a[3]!(onhand + onPO + onTR) - on SO	
	tmp$=tmp$,projamt Using "-------#.##",fdel$ !Projection
    tmp$=tmp$,priorusage Using "-------#.##",fdel$ ! priorusage
    if costno>0
		tmp$=tmp$,cost using "#####.##",fdel$ ! cost; ! 
		tmp$=tmp$,CUNIT$[1,4],fdel$ ! cost um
	endif
	!let ordQTY=priorusage-projamt
	tmp$=tmp$,ordQTY Using "-------#.##",fdel$ !ordqty
	if costno>0
		if pfu1[11]=pfu1[unittype]
			let amount=ordqty
		else
			CNVTU[0] = PRU1[UNITTYPE]
			CNVTU[1] = 0 ! PFU1[UnitType]
			CNVTU[2] = 1
			CNVTA = ORDQTY\ Gosub CONVERT  ! BACK TO BASE
			CNVTU[0] = 0
			CNVTU[1] = PFU1[11]
			CNVTU[2] = 1
			CNVTA = AMOUNT \ Gosub CONVERT ! IN COSTING UM
		endif
		Let extordamt=fnr(amount*cost)
		tmp$=tmp$,extordamt Using "--------.##",fdel$
	endif
	tmp$=tmp$,B[9] Using "-----#.##",fdel$ !MIN
	tmp$=tmp$,A1[1] Using "-------#.##",fdel$ !MAX
	if projamt<b[9] ! projection amount is less than min
		let reorder=a1[1]-projamt
	else
		reorder=0
	endif
	tmp$=tmp$,reorder Using "-------#.##",fdel$ !reorder	
	call addtostr(e$,rstr$,tmp$+rdel$)
	return ! dx xml
end if
Print #0; Tab 0;D$[140,151]; ! PROD CODE
Print #0; Tab 21;D$[9,33];   ! Description 1 
if a[0]>=0
	Print #0; Using "######"; Tab 46;a[0]; ! on hand
else
	Print #0; Using "-----#"; Tab 46;a[0]; ! on hand
endif
if a[3]>=0
	Print #0; Using "######"; Tab 53;a[3]; ! on sales order
else
	Print #0; Using "-----#"; Tab 53;a[3]; ! on sales order
endif!
If a[2]>=0
	Print #0; Using "######"; Tab 60;a[2]; ! on po (includes transfer in) ! +TRANSIN_QTY
else
	Print #0; Using "-----#"; Tab 60;a[2]; ! on po (includes transfer in) !
endif
Print #0; Tab 67 ;SUNIT$[1,4]; ! qty um
!let projamt=(A[0]+A[2]+TRANSIN_QTY)-a[3]!(onhand + onPO + onTR) - on SO		

if projamt>=0
		Print #0; Using "######"; Tab 72; projamt; ! on po (includes transfer in)
else
	Print #0; Using "-----#"; Tab 72; projamt; ! on po (includes transfer in)
endif

if priorusage>=0
		Print #0; Using "######"; Tab 79; priorusage; ! on po (includes transfer in)
else
	Print #0; Using "-----#"; Tab 79; priorusage; ! on po (includes transfer in)
endif
if costno>0
	Print #0; using "#####.##";tab 86;cost; ! 

	Print #0; Tab 95;CUNIT$[1,4];
endif
!let ordQTY=priorusage-projamt
! ORDER QTY
if ORDQTY>=0
		Print #0; Using "######"; Tab 100; ORDQTY; ! 
else
	Print #0; Using "-----#"; Tab 100; ORDQTY;
endif
! CALCULATE EXTORD AMT
! Bring cost to 
if costno>0
	if pfu1[11]=pfu1[unittype]
		let amount=ordqty
	else
		CNVTU[0] = PFU1[UNITTYPE]
		CNVTU[1] = 0 ! PFU1[UnitType]
		CNVTU[2] = 1
		CNVTA = ORDQTY\ Gosub CONVERT  ! BACK TO BASE
		CNVTU[0] = 0
		CNVTU[1] = PFU1[11]
		CNVTU[2] = 1
		CNVTA = AMOUNT \ Gosub CONVERT ! IN COSTING UM
	endif
	Let extordamt=fnr(amount*cost)
	IF EXTORDAMT>=0
		Print #0; Using "######.##"; Tab 107;EXTORDAMT;
	ELSE
		Print #0; Using "------.##"; Tab 107;EXTORDAMT;
	ENDIF
endif
Print #0; using "######";tab 116;b[9];
let reorder=0
if projamt<b[9] ! projection amount is less than min
	let reorder=a1[1]-projamt
endif
print #0; using "######";tab 123;reorder;
print #0;""
Print #0; Tab 1;D$[93,112];
Print #0; Tab 23;D$[63,92];
if transin_qty>=0
	Print #0; Using "######"; Tab 53;transin_qty; ! on transfer
else
	Print #0; Using "-----#"; Tab 53;transin_qty; ! on transfer
endif!

Print #0; using "######";tab 116;a1[1];
print #0;""
print #0;"" ! blank line
L = L + 3
Return 
!
PRNTVENDTOT: Rem !!-!! Print LINE
IF J8<>0 RETURN
PRINT #0; TAB 21;"Vendor Total ";
Print #0; Using "--------#"; Tab 96; vendtot[0]; ! 
						
if costno>0
	Print #0; Using "######.##"; Tab 107;Vendtot[1];
endif
print #0;""
print #0;"" ! blank line
L = L + 2
vendtot[0]=0
vendtot[1]=0
Return 





!!
PRNT_HEDNG: Rem HEADING ROUTINE
!
If J8 return
!
! L = L + 1
If L < L9 Return 
If P <> 0
  If J8
    Input "\15\PRESS <CR> TO CONTINUE "J$
    !!-!! Print 'CS'
  End If 
  Print #0;"\14\";
End If 
P = P + 1
U9$ = " ",U9$
Gosub GET_VENDOR
U9$[2,18] = "DATE ",D8$
U9$[107,119] = WHSE Using "WAREHOUSE ##/"
U9$[120,128] = P Using "PAGE ###"
U9$[45,100] = "T R U C K   R E O R D E R   R E P O R T "
Print #0;" - 393z - ";Msc$(3); Tab 52;CNAME$
Print #0;U9$
Print #0; Tab 50;U5$[1,20];
If ALLPRD = 1
  Print #0; Tab 72;"ALL PRODUCTS "
Else 
  Print #0; Tab 72;"PRODUCTS BELOW MIN. "
End If 
If BUYER <> -1 Print #0; Using "####"; Tab 2;"BUYER: ";BUYR;
If pbvc ! new vend - new page
	Print #0; Using "  VENDOR  ######    ";W2[3];VEND$
Endif
Print #0; tab 47;"ON";
Print #0; tab 54;"ON-SO";
Print #0; tab 67;" QTY";
print #0; tab 79;"USAGE";
if costno>0
	Print #0; tab 88;d1$;
	Print #0; tab 95;"COST";
endif
print #0;tab 101;"ORDER";
IF COSTNO>0
	print #0;tab 109;"ORDER";
endif
PRINT #0;tab 119;"MIN";
PRINT #0;tAB 123;"MN/MX";
PRINT #0;""

Print #0; Tab 0;"ITEM CODE"; Tab 21;"DESCRIPTION";
print #0; tab 48;"HAND";
PRINT #0; tab 54;"ON-TR";
Print #0; tab 61;"ON-PO";
Print #0; tab 68;"UM";
print #0; tab 72;"PROJCT";
print #0; tab 81;"QTY";
if costno>0
	print #0; tab 88;"COST";
	PRINT #0; tab 96;"UM";
endif
print #0; tab 103;"QTY";
If costno>0
	print #0; tab 108;"DOLLARS";
endif
PRINT #0;tab 119;"MAX";
Print #0;tab 123;"ORDQTY";
PRINT #0;""
U9$ = " ",U9$
Print #0;U9$
L = 5
if pbvc let L=6
If not(pbvc) ! new page - print vendor
	Print #0; Using "  VENDOR  ######    ";W2[3];VEND$
	Print #0;""
	L=L+2 ! added extra lines
	newvend=0
Endif
Return 

GET_VENDOR: Rem READ VENDOR
K5$ = " ",K5$
K5$ = W2[3] Using "######"
Search #5,2,1;K5$,R5,E !!-!! \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #5,R5,0;VEND$;
Else 
  VEND$ = " ",VEND$;VEND$ = "NOT ON FILE"
End If 
Return 
READ_PRDWHSE: Rem READ WHPR FILE
Mat Read #18,R8,0;W1$;
Mat Read #18,R8,38;W2;
Mat Read #18,R8,78;W3;
Mat Read #18,R8,228;W5;
Mat Read #18,R8,420;W0;
Mat Read #18,R8,540;WH9;
Mat Read #18,R8,696;W7;
Mat Read #18,R8,800;WHMISC;

Return 



!
CONVERT_STUFF: Rem "==================================== converts
CNVTU[0] = 0
CNVTU[1] = PFU1[UnitType]
CNVTU[2] = 1
CNVTA = B[9] \ Gosub CONVERT
B[9] = AMOUNT
CNVTA = A1[1] \ Gosub CONVERT
A1[1] = AMOUNT
CNVTA = QTYBO \ Gosub CONVERT \ QTYBO = AMOUNT
CNVTA = TRANSIN_QTY \ Gosub CONVERT \ TRANSIN_QTY = AMOUNT
For X = 0 To 3
  CNVTA = A[X] \ CNVTU[2] = 1 \ Gosub CONVERT
  A[X] = AMOUNT
Next X
If PFU1[UnitType] = -1 Let SUNIT$ = "CWT " \ Goto TISDONE
If PFU1[UnitType] = -2 Let SUNIT$ = "LOT " \ Goto TISDONE
If PFU1[UnitType] = -3 Let SUNIT$ = "LB  " \ Goto TISDONE
If PFU1[UnitType] > 0 Mat Read #7,PFU1[UnitType],10;SUNIT$;
TISDONE: ! upcw reorder um
IF PFU1[20]=-1 LET RUNIT$="CWT "                              
IF PFU1[20]=-2 LET RUNIT$="LOT "                              
if pfu1[20]=-3 let Runit$="LB  "                              
IF PFU1[20]>0 MAT  READ #7,PFU1[20],10;RUNIT$; 
! NEED TO ROUND TO THE NEAREST WHOLE UNIT
FOR X=0 TO 3
	IF FRA(A[X])<>0
		LET A[X]=ABS(INT(A[X])+1)*SGN(A[X])
	ENDIF
NEXT X
IF FRA(TRANSIN_QTY)<>0
	LET TRANSIN_QTY=ABS(INT(TRANSIN_QTY)+1)*SGN(TRANSIN_QTY)
ENDIF
IF FRA(QTYBO)<>0
	LET QTYBO=ABS(INT(QTYBO)+1)*SGN(QTYBO)
ENDIF
Return 
GET_PRDWHSE: Rem "========================= read Single prodwhse record
K2$ = D$[140,151] \ K2$[13] = WHSE Using "##"
Search #18,2,1;K2$,R8,E !!-!! \ If E > 1 Gosub ERR_SEARCH
If E=0 ! Return 
	Gosub READ_PRDWHSE
	A[3] = W3[2]
	B[9] = W3[3]
	A[0] = W3[0]
	A1[1] = W3[4]
	If W1$[13,15] <> "  " Let D$[93,112] = W1$[13,32]
	A[2] = W3[1]
endif
Return
GET_TRANSQTY: Rem ADD UP TRANSFER QTY
TRANSIN_QTY = 0
KTR$ = " ",KTR$;KTR$[1,6] = PROD_REC Using "######"
ORDLINE_LOOP: Rem "go thru all for ProdRec
Search #19,3,2;KTR$,LINE_REC,E
If E Return 
X2 = KTR$[1,6]
If PROD_REC <> X2 Return 
Mat Read #19,LINE_REC;ORD_L2;
Mat Read #19,LINE_REC,56;ORD_L6;
Mat Read #19,LINE_REC,168;ORD_L7;
Mat Read #19,LINE_REC,260;ORD_S3;
For X = 0 To 12
  ORD_H0[X] = 0;ORD_H5[X] = 0
Next X
For ST = 1 To 7
  K12$[1,2] = ST Using "##"
  K12$[3,8] = ORD_L2[1] Using "######"
  Search #20,2,1;K12$,R20,E !!-!! \ If E > 1 Gosub ERR_SEARCH
  If E Goto NXT_STATUS
  Mat Read #20,R20,0;ORD_H0;
  Mat Read #20,R20,104;ORD_H5;
  Goto GOT_ORDER
NXT_STATUS: Rem "Next Ord Status (Up to 7)
Next ST
Goto ORDLINE_LOOP
GOT_ORDER: Rem "check if transfer / Whse #
If ORD_H5[7] <> 16 Goto ORDLINE_LOOP
If ORD_H5[11] <> WHSE Goto ORDLINE_LOOP
TRANSIN_QTY = TRANSIN_QTY + (ORD_L7[2] - ORD_L7[0])
Goto ORDLINE_LOOP
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: Goto CVTSTARTB	!!-!! was If Spc(4) > 1280 Goto CVTSTARTB
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
CVTTRY: Rem "this is a remark
Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 !!-!! \ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto CVTTRY
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG !!-!! \ Gosub ERR_SEARCH
Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG !!-!! \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}

SRTLOOP_DONE: ! end of sort
OUTEND: Rem EXIT ROUTINE
! dx close
If J8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!

End 

ERR_TRAP:
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 