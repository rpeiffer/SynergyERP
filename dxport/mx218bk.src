! >>> Program 218bk
!
! description 10 bracket price display
!
! loadsave -w -n 100,10 -o prog/dxport/mx218bk.dl4 src/mx218bk.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX218BK   DISPLAY 10 BRACKET PRICES
Rem  update:    03/28/95  rce added list prices cct#75340
Rem     tc 11/20/97 cct108236 use getchan to get channel numbers
!     dlk 3/17/98 cct111202
! jliu 8/11/99 cct125608 add outend routine

! Converted to Bedit: 21 NOV 1997   09:05:35  mkbedit 1.2a
! pulled from paterson's machine 4/1/99 because their source wasn't here
! 10/20/05 vst cct196350 - changed the displacement of where 'PRFAC' is
!                      being read in from in the 'commhead' file - this is 
!                      part of the change for cct167193-expand # of price types
! we pass in product & warehouse data as pr. and pwh.
Rem BEDIT Version: 2.2 OBJECT CODE     Created: OCT 20, 2005  13:41:10
Rem /w2/papermaster/r2005//usr/acct/valerie/work/r2005/mx2/mx218bk.src (univ2) [valerie] {64376}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetDelimiters
Declare Intrinsic Sub InpBuf,String
!Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP

Enter PRC,PWC,CCC,UMR,WHSE,PRR,PWR,SRC,IntCo,e$,List$[],maxcnt
Dim 1%,SC,SR,Z9[9],PFU1[20],CNVTU[2],UN[2],SRC
Dim 2%,C4[8],E1,B[24]
Dim 3%,R9[20],UNIT,PFU2[6],CNVTA,A[33],W3[24]
Dim P1$[156]
! read required data using PM variables
If PRC and PRR>0
	Mat read #PRC,PRR,0;p1$;
	mat read #PRC,PRR,156;B;
	mat read #PRC,PRR,256;A;
	mat read #PRC,PRR,512;PFU1;
	mat read #PRC,PRR,554;PFU2;
	mat read #PRC,PRR,894;C4;
Endif
if PWC and PWR>0
	mat read #PWC,PWR,78;W3;
Endif
! set up UNIT (the uom # on list
Unit=0
FOR X=0 TO 7   
  IF PFU1[X]=UMR
    LET UNIT=X 
    LET X=7    
  ENDIF        
NEXT X 
Let E1=Whse ! uses e1 as whse #
Dim Msg$[200],X$[20],WebStr$[1000],UM$[4]
dim buttonlist$[5,50],nextlist$[5,100] !error handling variables
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim 1%,M5[3],M8
Dim 2%,M6[3]
Dim 3%,M7
Dim J1$[16],P9$[50],P60$[50],BRD$[100]
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
CHNL = 99 \ Gosub GETCHAN \ CH_SPRODMARK = CHNL
CHNL = CHNL - 1 \ Gosub GETCHAN \ CH_BRKTBL = CHNL
CHNL = CHNL - 1 \ Gosub GETCHAN \ CH_CMDTY = CHNL
Read #1,88,1712;J1$; \ Open #CH_SPRODMARK,J1$
Read #1,88,1952;J1$; \ Open #CH_BRKTBL,J1$
Read #1,88,2288;J1$; \ Open #CH_CMDTY,J1$
Mat Read #1,60,50;P60$;
Mat Read #1,19,50;P9$;
If Not(SR) Let SR = 11
If SC < 0 Let SC = 0
Goto L_5800
L_5600: Rem ================== CONVERT AND DISPLAY LIST PRICES
If E1 If P9$[32,32] = "Y" Let CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2;CNVTA = W3[X + 18] \ Goto L_5640
CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2;CNVTA = A[X + 19]
L_5640: Gosub L_20000 \ M7 = AMOUNT
PRFAC = 0
If P61$[50,50] = "Y"
  KEYCOMM$ = P1$[152,155]
  Search #CH_CMDTY,2,1;KEYCOMM$,REC_CMDTY,E
  If Not(E)
    Mat Read #CH_CMDTY,REC_CMDTY,40;PRFAC;
    If PRFAC
      AMOUNT = M7
      Call "pricernd",PRFAC,AMOUNT
      M7 = AMOUNT
    End If 
  End If 
End If 
If Not(SRC) Gosub L_11000 \ M7 = AMOUNT
If P60$[18,18] = "Y" If PFU1[11] = -1 If PRFAC = 0 Let M7 = FNF(M7)
Webstr$=Webstr$,LTrim$(M7 Using "--------.##"),fdel$
Return 
L_5700: Rem "================== calc and display bracket price
BRACKET = BRACKET1
L_5702: B4 = (BRACKET * 1000) - 1000 + C4[3]
If B4 < 0 Goto L_5750
Mat Read #CH_SPRODMARK,B4,0;M5;
Mat Read #CH_SPRODMARK,B4,10;M6;
If BRACKET > 1 If M6[0] = 0 Let BRACKET = BRACKET - 1 \ Goto L_5702
M7 = C4[4]
If E1 If P9$[32,32] = "Y" Let M7 = W3[18]
CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = M7
Gosub L_20000 \ M7 = AMOUNT
For M8 = 0 To 3
  If Not(M6[M8]) Goto L_5745
  If M5[M8] Let M7 = M7 + (M6[M8])
  If Not(M5[M8]) Let M7 = M7 + (M7 * (M6[M8] / 100))
Next M8
L_5745: Rem end of bracket
PRFAC = 0
If P61$[50,50] = "Y"
  KEYCOMM$ = P1$[152,155]
  Search #CH_CMDTY,2,1;KEYCOMM$,REC_CMDTY,E
  If Not(E)
    Mat Read #CH_CMDTY,REC_CMDTY,40;PRFAC;
    If PRFAC
      AMOUNT = M7
      If PFU1[11] <> PFU1[12]
        CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = AMOUNT
        Gosub L_20000
        CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2;CNVTA = AMOUNT
        Gosub L_20000
      End If 
      Call "pricernd",PRFAC,AMOUNT
      M7 = AMOUNT
      If PFU1[11] <> PFU1[12]
        CNVTU[0] = PFU1[12];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = AMOUNT
        Gosub L_20000
        CNVTU[0] = 0;CNVTU[1] = PFU1[11];CNVTU[2] = 2;CNVTA = AMOUNT
        Gosub L_20000
        M7 = AMOUNT
      End If 
    End If 
  End If 
End If 
If P60$[18,18] = "Y" If PFU1[11] = -1 If PRFAC = 0 Let M7 = FNF(M7)
L_5750: If Not(SRC) Gosub L_10000
Webstr$=Webstr$,LTrim$(M7 Using "---------.##"),fdel$
Return 
L_5800: Rem "=============================== put up window
!Window Open @SC,SR - 1; Size 79,14; Using " TEN BRACKET PRICES "
!Print 'ER BR'
Clear List$[]
List$[0]=bsdel$,"10BRKT",fdel$
Webstr$="UM",fdel$,"WHSE",fdel$
WebStr$=WebStr$,"TBL",fdel$,"LVL1D",FDEL$,"LVL2D",FDEL$
WebStr$=WebStr$,"LVL3D",fdel$,"LVL4D",fdel$
WebStr$=WebStr$,"LVL5D",fdel$,"LVL6D",fdel$
WebStr$=WebStr$,"LVL7D",fdel$,"LVL8D",fdel$
WebStr$=WebStr$,"LVL9D",fdel$,"LVL10D",fdel$
webstr$=webstr$,"LVL1PRC",fdel$,"LVL2PRC",fdel$,"LVL3PRC",fdel$,"LVL4PRC",fdel$
Webstr$=webstr$,"LVL5PRC",fdel$,"LVL6PRC",fdel$,"LVL7PRC",fdel$,"LVL8PRC",fdel$
WebStr$=WebStr$,"LVL9PRC",fdel$,"LVL10PRC",fdel$,"LPRC1",fdel$,"LPRC2",fdel$
WebStr$=WebStr$,"LPRC3",fdel$,"LPRC4",fdel$,"LPRC5",fdel$,"LPRC6",fdel$
List$[1]=webstr$
UM$ = "Err "
If UMR > 0 Mat Read #CCC,UMR,10;UM$;
If UMR = -1 Let UM$ = "CWT "
If UMR = -2 Let UM$ = "LOT "
If UMR = -3 Let UM$ = "LB  "
WebStr$=UM$,fdel$,Str$(E1),fdel$
BRD$ = " ",BRD$
If B[22] > 0 And B[22] < Chf(CH_BRKTBL) Mat Read #CH_BRKTBL,B[22],202;BRD$;
webstr$=webstr$,Str$(B[22]),fdel$ ! table #
For X = 1 To 10
    If BRD$[X * 10 - 9,X * 10 - 8] = "  "
      Webstr$=WebStr$,X Using "BRACKET ##",fdel$
    Else 
      WEbstr$=webstr$,BRD$[X * 10 - 9,X * 10],fdel$
    End If 
Next X
!For X = 1 To 6  ! no need for description!
! Webstr$=webstr$,"LIST ",Str$(X),fdel$
!Next X

For BRACKET1 = 1 To 10 \ Gosub L_5700 \ Next BRACKET1

For X = 1 To 6 \ Gosub L_5600 \ Next X
List$[2]=webstr$
row=3;tmpcnt=maxcnt
List$[row]=esdel$
L_5890: ! DONE
Goto OutEnd
Stop 
L_10000: Rem CONVERT TO SELECTED UNITS
CNVTU[0] = PFU1[11];CNVTU[1] = PFU1[UNIT];CNVTU[2] = 2;CNVTA = M7
Gosub L_20000 \ M7 = AMOUNT
Return 
L_11000: Rem CONVERT TO SELECTED UNITS
CNVTU[0] = PFU1[12];CNVTU[1] = PFU1[UNIT];CNVTU[2] = 2;CNVTA = M7
Gosub L_20000 \ M7 = AMOUNT
Return 
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT (INTERNAL VERSION)
Dim 2%,X1[9],Q0[1]
Dim P61$[256],KEYCOMM$[10]
Dim 1%,PRFAC
Dim 3%,REC_CMDTY
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
Mat Read #1,61,0;P61$;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
E = 0 \ Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_20510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 ! " It's catch weight
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 
Rem {begin src/inc/rtn.getchan.s}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
For SCR = CHNL To 1 Step -1
  CHNL = SCR
  Gosub CHNLFREE
  If CHNLFREE
    SCR = 1
  Else 
    CHNL = 0
  End If 
Next SCR
Return 
CHNLFREE: Rem check to see if a channel is being used
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
CHNLSCR = Chf(CHNL)
If Err 0 Gosub ERR_TRAP
If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
END_CHNLFREE: Rem
Return 
Rem {end rtn.getchan.s}
OUTEND: Rem REM
Close #CH_SPRODMARK
Close #CH_CMDTY
Close #CH_BRKTBL
End

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
E$=msg$
Call programdump("tmp/mx218bkse!","")
! End
Rem {begin rtn.error.s}
Rem {begin rtn.error.s}
Err_Trap: ! pm 
ERR_MAIN: Rem
! If Err 0 Rem
e$ = msg$
If Spc(8) <> 10000 Call suberr(e$,Spc(8),Spc(10),Msc$(2))
Call mainerr(e$,Spc(8),buttonlist$[],nextlist$[])
end
!
Rem {end rtn.error.s}