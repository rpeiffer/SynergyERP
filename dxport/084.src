! 084.dl4 - Duplicate Contract List
! 1.0 02/02/2010 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/084.dl4 src/084.src
!
Rem MX084     Contract Special Price Duplicate List
Rem Author:        Roman  (02/27/1991)
Rem                UNIVERSAL BUSINESS SYSTEMS
! last update:  rek 11/04/92  add size selection
!                03/24/1997 - DATE COMPARE IS JULIAN
Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 17, 2005  14:03:00
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/mx0/mx084.src (univ2) [mary] {59079}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/copyright.inc"
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function AddToMYReports
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
Declare External Function GetUIDRec
Declare Intrinsic Sub DateToJulian,InpBuf,String,Time,VerifyDate,programdump,FindF
!Option Default Dialect IRIS1
If Err 0 Gosub ERR_TRAP
Dim 1%,PFU1[20],CNVTU[2],COST_LEV[3],COMM_LEV,3%,PFU2[6],CNVTA,A[33]

!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim P$[12],A$[156],A1$[142],P60$[50],LBL$[13]
Dim ITEM_LAB$[10],P9$[50],PUM$[4],CUM$[4],CCD$[14]
Dim 2%,C1[5],V9[4],SPMIN,SPCOM,CUST_CODE,DESC$[16]
Dim 2%,TCONT,CNL2[5],DT3[1],CURJDATE,JWDATE,SCRATCH$[80]
Dim 1%,LM[1],WHLM[1],WHPARC[5],2%,W2[9],3%,PF_LOAD2,WHMISC[6],PRPARC[3]
Dim J$[40],J1$[30],J2$[20],J4$[50],J8$[8],QUM$[4],PMASK$[12]
Dim 1%,F,X1,SPCUM[1],C3[2],UNT,SPBRK[1],2%,X2,D6,RCTR,3%,J,AMOUNT,SPC4[6]
Dim 1%,SPWH,3%,SPC5[2],BASE,PRICE,MARK,HOLD[2]
Dim K1$[50],K2$[50],K3$[6],K4$[30],K8$[40],X$[10],T9$[26],Z1$[50]
Dim T6$[60],CHK$[60],K6$[40],3%,W3[24],2%,B[24],C4[10],Q0[1]
Dim J9$[40],HOLD$[40],KC$[40],K9$[40],CNL$[12],CGPD$[30]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[600],msg$[100],rstr$[2000],webstr$[2000]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128],action1$[30],action2$[30]
! call dxopen() ! for standalone run
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
Call GetCostLevels(e$,cost_lev[],IntCo,Userid$)
URec=GetUIDRec(e$,IntCo,Userid$)
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
For J = 2 To 8
  Read J1
  If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1936","1808","1792","2880","1744","1728","2288"
! 2=SPCPRICE, 3=CUSTOMER, 4=PRODUCT, 5=CNTRTH, 7=CCODES, 8=COMMCODE, 10=CSTGRP
Let j$="2/COSTGRP"+STR$(intCO)
CALL FINDF(J$,CGRP)
IF CGRP
	ROPEN #13,J$
ENDIF
Read #1,0,112;D6;
X2 = D6 \ Gosub L_7820 \ X2 = 0
If X2 Let CURJDATE = X2 Else Gosub L_7650
X2 = D6 \ Gosub L_7700 \ J8$ = X$
Read #1,3;J1$;
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Read #1,18,50;ITEM_LAB$;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
if Urec ! need comm_level
	UChan=OpenFile(-9988,IntCo) \ if UCC=-1 goto GURecDone
	Read #UChan,Urec,394;Comm_Lev;
	Try Close #UChan Else Rem
	GURecDone: ! finish
Endif
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
If Err 0 Let J8 = Spc(8)
J8 = 0 \ V9[3] = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
If Err 0 Gosub ERR_TRAP
V9[3] = 58 \ If J8 Let V9[3] = 18
if J8 ! to xml - not on this report!
	e$="Can not print to browser"
	goto Err_Msg
Endif
L_900: Rem "=================================== get ranges
!Gosub L_7500
L_7500: Rem "========================================== screen
!Print 'CS'
!Print @0,0;"MX084";@33,0;"DUPLICATE CONTRACT LIST"
!Print @8,3;"ENTER STARTING CONTRACT#,  <CR>: FIRST,  E: EXIT     ";
!Print @16,4;"ENDING CONTRACT#,  <CR>: LAST,   E: EXIT     ";
!Return 
L_910: !Print @63,3;'CL'; \ Gosub L_7000 \ K2$ = Z1$ \ If K2$ = "E" Goto OUTEND
call dxget("SCONT",K2$)
X = K2$ \ K2$ = X Using "C#####"
!Print @63,4;'CL'; \ Gosub L_7000 \ K3$ = Z1$ \ If K3$ = "E" Goto OUTEND
call dxget("ECONT",K3$)
X = K3$ \ K3$ = X Using "C#####"
If X = 0 Let K3$ = "}}}}}}"
If K3$ < K2$ !Gosub L_985 \ Goto L_910
	e$="INVALID RANGE"
	goto Err_msg
Endif
!Goto L_990
!L_985: Print @0,22;"ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! ";'RB CE'; \ Signal 3,50 \ Print @0,22;'CL' \ Return 
L_990: Rem
L_1080: !Print @10,22;'CL'; \ Input "CHOOSE  P: Print  R: Reselect  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
!If Z1$ = "R" Goto L_900
!If Z1$ <> "P" Goto L_1080
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
Endif
K1$ = " ",K1$ \ K1$ = K2$;T6$ = " "
!Print @0,22;"PRINTING... please wait";'CE'; \ Signal 3,0
V9[0] = 0 \ V9[1] = 90 \ RCTR = 0
!If J8 Print 'CS';
Gosub L_5800
L_2040: Search #5,3,3;K1$,R5,E
If E = 2 Goto L_9100
If E Gosub ERR_SEARCH
ALLPROD = 0;COMDY = 0;SIZE_ = 0;GRP=0
If K1$[1,6] > K3$[1,6] Goto L_9100
CHK_CUST = K1$[7,12] \ Gosub L_4055
Goto L_2095
Goto L_2040
L_2095: If K2$[7,7] = "#" Let ALLPROD = 99
If K2$[7,7] = "*" Let COMDY = 99
If K2$[7,7] = "&" Let SIZE_ = 99
IF K2$[7,7] = "-" LET GRP=99
LET FLG=0 \ IF ALLPROD OR COMDY OR SIZE_ OR GRP LET FLG=1
Read #2,R1,0;P$;
Mat Read #2,R1,12;C1;
Mat Read #2,R1,36;SPCUM;
Read #2,R1,118;SPWH;
Mat Read #2,R1,40;C3;
Mat Read #2,R1,46;SPC4;
Mat Read #2,R1,126;SPBRK;
Read #2,R1,130;SPMIN; \ Read #2,R1,134;SPCOM;
Mat Read #2,R1,138;SPC5;
Gosub L_3500
UNT = SPCUM[0] \ Gosub L_6400 \ PUM$ = X$
UNT = SPCUM[1] \ Gosub L_6400 \ CUM$ = X$
HOLD[1] = SPC5[1];HOLD[2] = SPC5[2]
If C3[2] Let UNT = C3[2] \ Gosub L_6400 \ QUM$ = X$
If C3 <> 3 Goto L_2190
HOLD = SPC5[0]
CNVTU[0] = 0 \ CNVTU[1] = SPCUM[0] \ CNVTU[2] = 2
CNVTA = SPC5[0] \ Gosub L_6900 \ SPC5[0] = AMOUNT
L_2190: CNVTU[0] = 0 \ CNVTU[1] = SPCUM[1] \ CNVTU[2] = 2
CNVTA = SPC5[2] \ Gosub L_6900 \ SPC5[2] = AMOUNT
CNVTU[0] = 0 \ CNVTU[1] = SPCUM[1] \ CNVTU[2] = 2
CNVTA = SPC5[1] \ Gosub L_6900 \ SPC5[1] = AMOUNT
Gosub L_2400
If Not(FLG) Gosub L_2500
X2 = C1[2] \ Gosub L_7700
If V9[1] > V9[3] Gosub L_5800
Gosub L_5000
Goto L_2040
L_2400: Rem "============================ print customers on contract
T6$ = K1$
If V9[1] > V9[3] Gosub L_5800
CUST_CODE = CHK_CUST
Gosub L_3000
Gosub L_5400
Return 
T6$ = K1$[1,6] \ Return 
L_2500: Rem CALC WHATEVER ON SINGLE ITEM
If C3[0] > 0 If C3[0] < 4 Goto L_2520
If C3[0] = 8 Goto L_2520
PRICE = 0;MARK = 0
Return 
L_2520: Rem IF FIXED GIVE MARKUP, ELSE GIVE PRICE
If C3[0] = 3 Goto L_2600
On C3[1] Goto L_2540,L_2545,L_2550,L_2560,L_2560,L_2560,L_2560,L_2560,L_2560,L_2565
On C3[1] - 10 Goto L_2570
PRICE = 0;MARK = 0
Return 
L_2540: BASE = C4[4] \ If WHSE And W3[18] Let BASE = W3[18]
Goto L_2700
L_2545: BASE = B[8] \ If WHSE And W3[17] Let BASE = W3[17]
Goto L_2700
L_2550: BASE = B[10] \ If WHSE And W3[16] Let BASE = W3[16]
Goto L_2700
L_2560: BASE = A[C3[1] + 16] \ If WHSE And W3[C3[1] + 15] Let BASE = W3[C3[1] + 15]
Goto L_2700
L_2565: BASE = HOLD[2] \ Goto L_2700
L_2570: BASE = HOLD[1] \ Goto L_2700
Return 
L_2600: Rem FIXED - CALC MARKUP ON PROD LOAD
BASE = B[8] \ If WHSE And W3[17] Let BASE = W3[17]
If BASE <= 0 Let BASE = 0
PRICE = HOLD - BASE
MARK = 0
If BASE Let MARK = FNR(PRICE * 100 / BASE)
Return 
L_2700: Rem NOW PERCENT WHATEVER
PRICE = 0 \ If BASE <= 0 Let BASE = 0
If C3[0] = 1 Let PRICE = (BASE * ((100 + SPC5[0]) / 100))
If C3[0] = 2 Let PRICE = (BASE / ((100 - SPC5[0]) / 100))
If C3[0] = 8 Let PRICE = BASE
CNVTU[0] = 0;CNVTU[1] = SPCUM[0];CNVTU[2] = 2;CNVTA = PRICE
Gosub L_6900 \ PRICE = AMOUNT
If C3[0] = 8
  PRICE = PRICE + SPC5[0]
End If 
Return 
L_3000: Rem "================================================== get customer
J2$ = " ",J2$ \ J2$ = CUST_CODE Using "######"
A1$[31] = "*** NOT FOUND ***"
Search #3,2,1;J2$,R3,E
If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_3070
Mat Read #3,R3;A1$;
L_3070: Return 
L_3500: Rem "================================================== get product
A$ = " ",A$
If ALLPROD Let A$[9] = "-- ALL PRODUCTS -- " \ Return 
If COMDY Goto L_3600
If SIZE_ Goto L_3700
if GRP GOTO L_3750:
J2$ = " ",J2$ \ J2$ = P$
A$[9] = "*** NOT FOUND ***"
Search #4,2,1;J2$,R4,E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Let FLG = 1
If E = 1 Goto L_3590
WHSE = 0
Mat Read #4,R4;A$;
Mat Read #4,R4,156;B;
Mat Read #4,R4,256;A;
Mat Read #4,R4,512;PFU1;
Mat Read #4,R4,620;LM;
Mat Read #4,R4,554;PFU2;
Mat Read #4,R4,894;C4;
Mat Read #4,R4,596;PRPARC;
Mat Read #4,R4,938;PF_LOAD2;
If P9$[32,32] = "Y" Gosub L_3800
If WHSE Gosub L_69000
L_3590: Return 
L_3600: Rem READ COMDY
If Not(COMDY) Return 
J2$ = " ",J2$ \ J2$ = P$
A$[9] = "*** COMDY NOT ON FILE "
Search #8,2,1;J2$,R4,E
If E = 1 Return 
If E > 1 Gosub ERR_SEARCH
Mat Read #8,R4,0;DESC$;
A$[9] = DESC$
Return 
L_3700: Rem READ SIZE
If Not(SIZE_) Return 
UNT = P$[6,9]
Read #7,UNT;CCD$;
A$[9] = CCD$[1,10]
Return 
L_3750: ! COST GRP
IF NOT(GRP) RETURN
J2$=" ",J2$;J2$=P$
LET A$[9]="COST GRP NOT ON FILE"
IF NOT(CGRP) RETURN
SEARCH #10,2,1;J2$,R4,E
IF NOT(E)
	MAT READ #10,R4,12;CGPD$;
ELSE
	CGPD$="COST GRP NOT ON FILE"
ENDIF
A$[9]=CGPD$;A$[63]="COST GROUP PRICE"
Return
L_3800: Rem GET PRODWHSE
K6$ = " ",K6$;K6$ = A$[140,151];WHSE = SPWH
If WHSE <= 0 Let WHSE = 1
K6$[13,14] = WHSE Using "##"
Search #6,2,1;K6$,R6,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_3850
Mat Read #6,R6,78;W3;
Mat Read #6,R6,38;W2;
Mat Read #6,R6,384;WHPARC;
Mat Read #6,R6,800;WHMISC;
Mat Read #6,R6,842;WHLM;
Return 
L_3850: Rem NOT FOUND
For I = 0 To 24
  W3[I] = 0
Next I
WHSE = 0
Return 
L_4000: Rem CHK FOR OTHER LINE FOR CUST/CONTRACT
HOLD$ = J4$
L_4010: Search #2,3,2;J4$,R2,E \ If E = 2 Return 1
If E Gosub ERR_SEARCH
If HOLD$[1,12] <> J4$[1,12] Return 1
TCONT = J4$[14,18]
J2$ = TCONT Using "C#####";J2$[7] = CHK_CUST Using "######"
Search #5,2,3;J2$,REC,E \ If E > 1 Gosub ERR_SEARCH
If J2$ = K1$ Let E = 1
If E = 1 Goto L_4010
Return 
L_4055: Rem CHECK ON DUPES (BY CUSTOMER/CONTRACT)
DUPE = 0
! Print @0,Msc(34) - 2;'CE';"CHECKING FOR DUPLICATES, PLEASE WAIT . . " \ Signal 3,0
K9$ = " ",K9$;K9$ = CHK_CUST Using "######"
L_4075: Search #5,3,2;K9$,R5,E \ If E Goto L_4120
X2 = K9$[1,6] \ If CHK_CUST <> X2 Goto L_4120
KC$ = K9$
If K9$[7,12] <> K1$[1,6] Goto L_4075
Gosub L_4130 \ Goto L_4075
R1 = HR2
Return 
L_4120: Rem IT'S OKAY
Return 1
L_4130: Rem THRU LINES
CONTR = KC$[8,12]
K2$ = " ",K2$;K2$ = CONTR Using "C#####"
L_4145: Search #2,3,1;K2$,HR2,E \ If E = 2 Return 
If E Gosub ERR_SEARCH
X2 = K2$[2,6] \ If X2 <> CONTR Return 
R2 = HR2 \ Gosub L_4520
On CNL2[5] Goto L_4185,L_4260,L_4350,L_4185:,L_4360:
L_4170: If DUPE Return 1
Goto L_4145
L_4185: Rem PROD TYPE
TYPE = 1 \ If CNL$[1,1] = "#" Let TYPE = 3
If TYPE <> 1 Goto L_4385
J4$ = " ",J4$;J4$[1,12] = CNL$[1,12]
K4$ = CNL$[1,12] \ Gosub L_4575
J4$ = " ",J4$;J4$ = K4$ \ Gosub L_4000
Goto L_4250
CNL$ = " ",CNL$;CNL$ = A$[152,155] \ Goto L_4260
L_4230: UNT = PFU1[19] \ Gosub L_4455
CNL$ = " ",CNL$
CNL$ = X$[1,4];CNL$[5] = UNT Using "####"
Goto L_4350
L_4250: DUPE = 1
Goto L_4170
L_4260: Rem COMM TYPE
If TYPE <> 1 Let TYPE = 2
J4$ = " ",J4$;J4$ = CNL$[1,4]
If TYPE = 1
  Gosub L_4000
  Goto L_4250
  Goto L_4230
End If 
Gosub L_4000 \ Goto L_4340
K4$ = CNL$[1,4]
L_4310: Search #4,3,3;K4$,R4,E
If E = 2 Goto L_4345
If K4$[1,4] <> CNL$[1,4] Goto L_4345
J4$ = K4$[5,16] \ Gosub L_4000
Goto L_4340
Goto L_4310
L_4340: DUPE = 1
L_4345: Goto L_4170
L_4350: Rem SIZE TYPE
If TYPE <> 1 Let TYPE = 3
J4$ = " ",J4$;J4$ = CNL$[1,12]
Gosub L_4000
GOTO L_4340:
LET DUPE=DUPE ! NEED FOR RTN/RTN+1
IF TYPE=1 ! FALL THRU TO CHECK CST GRP
	CNL$=" ",CNL$
	LET CNL$[1,11]=A$[116,126]
ELSE
	GOTO L_4170:
endif

L_4360: ! COST GRP
IF TYPE<>1 LET TYPE=5
J4$=" ",J4$;J4$=CNL$[1,12]
IF TYPE=1
	GOSUB L_4000:
	GOTO L_4340:
	LET E=E ! RTN / +1 USED 
ENDIF
GOSUB L_4000: \ GOTO L_4340:
GOTO L_4170: ! CONTINUE

L_4385: Rem ALL PRODS - FIND ANY OTHER LINE
J9$ = K2$
L_4395: Search #2,3,1;J9$,R2,E \ If E = 2 Goto L_4415
If E Gosub ERR_SEARCH
X2 = J9$[2,6] \ If X2 <> CNTR Goto L_4415
DUPE = 1 \ Goto L_4170
L_4415: Rem FIND ON ANY OTHER CONTRACT
J9$ = KC$
Search #5,3,2;J9$,R5,E \ If E = 2 Goto L_4450
If E Gosub ERR_SEARCH
X2 = J9$ \ If X2 <> CHK_CUST Goto L_4450
KC$ = J9$;CNTR = J9$[7,12];J9$ = CNTR Using "C#####" \ Goto L_4395
DUPE = 1
L_4450: Goto L_4170
L_4455: Rem "============================= convert from rec # um to 4 char. text
If FLG Let X$ = "N/A" \ Goto L_4485
If UNT = -1 Let X$ = "CWT " \ Goto L_4485
If UNT = -3 Let X$ = "LB  " \ Goto L_4485
If UNT <= 0 Let X$ = "N/A" \ Goto L_4485
Read #7,UNT;CCD$;
X$ = CCD$[11,14]
L_4485: Return 
L_4520: Rem READ LINE
Mat Read #2,R2,0;CNL$
Mat Read #2,R2,12;CNL2;
Return 
L_4575: Rem GET PRODUCT
A$ = " ",A$;PFU1[19] = 0
Search #4,2,1;K4$,R4,E
If E
  !Print @10,23;"ITEM NOT ON FILE !!! "; \ Signal 3,20
  !Print @10,23;'CL';
  A$[9]="ITEM NOT ON FILE"
  Return 
End If 
Mat Read #4,R4,0;A$;
Mat Read #4,R4,256;A;
Mat Read #4,R4,512;PFU1;
Mat Read #4,R4,554;PFU2;
Mat Read #4,R4,894;C4;
Mat Read #4,R4,620;LM;
Mat Read #4,R4,596;PRPARC;
Mat Read #4,R4,938;PF_LOAD2;
Return 1
L_5000: Rem "================================================== detail line
Print #0; Using "######";C1[0];
If DUPE Print #0; Tab 8;" ** DUPLICATE **";TCONT;
If Not(FLG) Print #0; Tab 29;P$[1,12]; \ Goto L_5035
If ALLPROD Print #0; Tab 29;"ALL PRODUCTS";
If COMDY Print #0; Tab 29;"*COMDY ";P$[1,4];" ";
If SIZE_ Print #0; Tab 29;"*SIZE ";P$[1,4];"  ";
IF GRP PRINT #0; TAB 29;"-";P$[1,11];
L_5035: Print #0; Tab 42;A$[9,28];
X2 = C1[2] \ Gosub L_7700
If C1[2] Print #0; Tab 69;X$[1,8]; Else Print #0; Tab 71;"NONE";
If C3[0] = 3 Print #0; Using PMASK$; Tab 78;SPC5[0];
If C3[0] <> 3 Print #0; Using "###.###%"; Tab 79;SPC5[0];
Print #0; Tab 92;PUM$;
If COST_LEV[1] > 0
  If SPC5[1] Print #0; Using PMASK$; Tab 108;SPC5[1];
  If Not(SPC5[1]) Print #0; Tab 109;"NO CHGE";
  Print #0; Tab 118;CUM$;
End If 
Print #0; Using "######.#"; Tab 123;SPC4[0];
Print #0;"" \ V9[1] = V9[1] + 1
Print #0; Tab 42;A$[63,82];
X2 = C1[4] \ Gosub L_7700
If C1[4] Print #0; Tab 69;X$[1,8]; Else Print #0; Tab 71;"NONE";
Gosub L_8000
If C3[0] = 1 Or C3[0] = 2 Gosub L_8100
If COMM_LEV = 1000
  If SPCOM Print #0; Using "###.##"; Tab 109;SPCOM;"%"; Else Print #0; Tab 109;"Regular";
End If 
Print #0; Using "######.#"; Tab 123;SPC4[1] \ V9[1] = V9[1] + 1
If P60$[12,12] <> "Y" Goto L_5170
Gosub L_8200
Print #0; Using "BREAK TABLE ##"; Tab 63;SPBRK[0];
Print #0; Tab 79;LBL$;
L_5170: If Not(FLG) If C3[0] > 0 If C3[0] < 4 Goto L_5185
If Not(FLG) If C3[0] = 8 Goto L_5185
If P60$[12,12] <> "Y" Goto L_5245
Goto L_5240
L_5185: Rem ===== single item print markup or calc'd price
If C3[0] = 3 Goto L_5220
Print #0; Tab 92;"PRICE=";
X2 = C1[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If C1[4] If JWDATE < CURJDATE Print #0; Tab 98;"EXPIRED"; \ Goto L_5215
If PRICE Print #0; Using PMASK$; Tab 98;PRICE;
If Not(PRICE) Print #0; Tab 100;"NOT AVL";
L_5215: Goto L_5240
L_5220: If MARK Print #0; Using "----#.##"; Tab 110;MARK;"% LOAD MARK";
If MARK > 0 Print #0;"UP";
If MARK < 0 Print #0;"DN";
If Not(MARK) Print #0; Tab 112;" N/A";
L_5240: Print #0;"" \ V9[1] = V9[1] + 1
L_5245: Rem
Print #0;"" \ V9[1] = V9[1] + 1
RCTR = RCTR + 1
Return 
L_5400: Rem "============ print contract/customer
Print #0;K1$[2,6];
Print #0; Using "######"; Tab 8;CUST_CODE;
Print #0; Tab 15;A1$[31,60];
Print #0;"" \ V9[1] = V9[1] + 1
Return 
L_5800: Rem "============================================== heading
!If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If V9[0] If Not(J8) Print #0;"\14\";
V9[0] = V9[0] + 1 \ V9[1] = 6
If Not(J8) Print #0;""
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;J8$; Tab (64 - Len(J1$) / 2);J1$; Tab 120;"PAGE ";V9[0]
Print #0;" - 084 - ";T9$;
Print #0; Tab 46;"D U P L .   C O N T R A C T   L I S T"
Print #0; Tab 70;"START"
Print #0; Tab 2;"CONTRACT"; Tab 29;ITEM_LAB$;
Print #0; Tab 42;"DESCRIPTION"; Tab 70;"CANCEL";
Print #0; Tab 81;"FACTOR"; Tab 93;"PRICE";
If COST_LEV[1] > 0 Or COMM_LEV = 1000 Print #0; Tab 110;"SLSM";
If COST_LEV[1] > 0 Print #0; Tab 118;"COST";
Print #0; Tab 123;"MIN/MAX"
Print #0; Tab 2;" NUMBER"; Tab 71;"DATE"; Tab 82;"TYPE";
Print #0; Tab 94;"UM";
If COST_LEV[1] > 0 Print #0; Tab 108;"COST/";
If COMM_LEV = 1000 Print #0; Tab 113;"COMM";
If COST_LEV[1] > 0 Print #0; Tab 119;"UM";
Print #0; Tab 125;"QTY"
Print #0;""
Return 
L_6400: Rem "============================= convert from rec # um to 4 char. text
If FLG Let X$ = "N/A" \ Return 
If UNT = -1 Let X$ = "CWT " \ Goto L_6430
If UNT = -2 Let X$ = "LOT " \ Goto L_6430
If UNT = -3 Let X$ = "LB  " \ Goto L_6430
If UNT <= 0 Let X$ = "ERR " \ Goto L_6430
Read #7,UNT;CCD$;
X$ = CCD$[11,14]
L_6430: Return 
L_6900: Rem "============================================== unit convert rtn
If FLG Let AMOUNT = CNVTA \ Return 
Gosub L_20000
AMOUNT = FNP(AMOUNT)
Return 
L_7000: Rem "=========================================== data input routine
! Input ""Z1$
Return 

L_7650: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
D6 = X$
Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
X2 = X$[1,5]
CURJDATE = X2
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem PRICE TYPE
On C3[0] Goto L_8020,L_8030,L_8040,L_8050,L_8060,L_8070,L_8080
Return 
On C3[1] - 10 Goto L_8160
L_8020: If SPC5[0] > 0 Print #0; Tab 78;"% MARK UP";
If SPC5[0] < 0 Print #0; Tab 78;"% MARK DOWN";
Return 
L_8030: Print #0; Tab 78;"MARGIN";
Return 
L_8040: Print #0; Tab 78;"PRICE";
Return 
L_8050: If SPC5[0] = 0 Print #0; Using "BRACKET ## "; Tab 78;C3[1];
If SPC5[0] > 0 Print #0; Using "MARKUP OF BRACKET ##"; Tab 78;C3[1];
If SPC5[0] < 0 Print #0; Using "MARKDOWN  OF BRACKET ##"; Tab 78;C3[1];
Return 
L_8060: If SPC5[0] = 0 Print #0; Using "## BRKT JMP"; Tab 78;C3[1];
If SPC5[0] > 0 Print #0; Using "MARKUP ## BRKT JMP"; Tab 78;C3[1];
If SPC5[0] < 0 Print #0; Using "MARKDOWN ## BRKT JMP"; Tab 78;C3[1];
Return 
L_8070: Rem BREAK LEVEL JUMP
Print #0; Using "BREAK LEVEL JUMP ## LEVELS"; Tab 78;C3[1];
Return 
L_8080: Rem MARKUP/MARKDOWN $
If SPC5[0] >= 0
  Print #0; Tab 78;"$ MARKUP";
Else 
  Print #0; Tab 78;"$ MARKDOWN";
End If 
Return 
L_8100: Rem BASE TYPE
If C3[0] = 4 Or C3[0] = 5 Return 
On C3[1] Goto L_8110,L_8120,L_8130,L_8140,L_8140,L_8140,L_8140,L_8140,L_8140,L_8150
On C3[1] - 10 Goto L_8160,L_8170
Return 
L_8110: Print #0; Tab 90;"OF BASE";
Return 
L_8120: Print #0; Tab 90;"OF LOADED";
Return 
L_8130: Print #0; Tab 90;"OF LAST";
Return 
L_8140: Print #0; Using "OF LIST #"; Tab 90;C3[1] - 3;
Return 
L_8150: Print #0; Tab 90;"OF SP. CST";
Return 
L_8160: Print #0; Tab 90;"SLSM CST";
Return 
L_8170: Print #0; Tab 90;"CALC. PRICE ";
Return 
L_8200: Rem GET BREAK TYPE
LBL$ = " ",LBL$
If SPBRK[1] = 1 Let LBL$ = "ACC/NO BRK"
If SPBRK[1] = 2 Let LBL$ = "ACC/BRK"
If SPBRK[1] = 3 Let LBL$ = "NO ACC/NO BRK"
If SPBRK[1] = 4 Let LBL$ = "NO ACC/BRK"
Return 

L_9100: Rem " end of this range
!Print @0,22;RCTR;" ITEM(S) PRINTED. PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
Goto L_900
End 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: !
L_20120: Rem "====== unibasic 5+ logic
!Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
OUTEND: Rem EXIT PROGRAM
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
!
try Call dxclose() else rem
End
!Print 'CS'
!Close 
!Chain "MX000"
!Stop 
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/084se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             

Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End