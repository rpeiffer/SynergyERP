! >>> Program amalgamate
!
! part of the invoice journal process - called from 226a
!
! loadsave -w -n 100,10 -o prog/dxport/amalgamate.dl4 src/amalgamate.src
!
include "src/copyright.inc" ! dx
!
! from the original code:
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG  4, 2010  11:47:42
Rem /w2/papermaster/r2005//usr/acct/rgp/work/custom/xrev9/amalgamate.src (univ2) [rgp] {31464}
Rem  Copyright (c) 2010 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub InpBuf,JulianToDate,String,Time
!Option Default Dialect IRIS1
Rem amalgamate Recalculate salesman commissions based on grouped invoices
Rem Custom:    All florida Paper
Rem Rev:     06/06/96 - kmm - created.

! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External function buildsort

External Sub Amalgamate(intCo)

Try

Dim 1%,CHNL,CHNLFREE,CH_CNTRL,CH_ROH,CH_ROL,CH_ROT,CH_ROS,CH_CUST
Dim 1%,CH_ROH,CH_RPT,CH_CMTBL,CH_SLSM,CH_PROD,CH_PRODWHSE,CH_CMDTY
Dim 1%,CHAN[10],LN,MAXLN,PG,PASS[2],PREV,CURR,AMLGPORT
Dim 1%,MONTH_,YEAR_,SPOKE,TOSCREEN,HH,MM
Dim 2%,AMCOUNT,AMLGDATE[1],AMLGTIME[1]
Dim 3%,X,SCR,E,REC_ROH,REC_CUST,REC_SLSM
Dim 3%,ORIGSCOM[4],ORIGSCST[4],PLAT[5],PARM[10]
Dim 3%,ORIGGPD,GPD,RTRN[20]
Dim 3%,OREF[5]
Dim 4%,AGRPCA
Dim 4%,ORSTMD,ORSTLD,AMSTLD,ORSTCA,AMSTCA
Dim 4%,ORGTMD,ORGTLD,AMGTLD,ORGTCA,AMGTCA
Dim 4%,AT2[25],ATOT[4],AD4PFT,AC4PFT,TOTAL[1]
Dim ROH$[15],SORTKEY$[80],STRTKEY$[80],EENDKEY$[80]
Dim SCRATCH$[80],X1$[80],MODULE$[20],REVISION$[10],RPTDATE$[25]
Dim PARAM1$[80],M1$[12],P9$[50],WHEEL$[4]

Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}

Rem {begin src/inc/dim.roh.i}
Dim 1%,H3[1],H4[2],LOCKPORT,OWHT[1],PICKBY[1]
Dim 2%,H0[12],H5[16],ST3[24],SLSM[9],H6[8],HFAX[1]
Dim 2%,HSTI[1],H2[0],OWHT1[1]
Dim 3%,TOT_SELL,SCOM[4],SMER[4],SCST[4],TOTGL,OREF[5]
Dim V0$[12],H0$[20],H1$[6],HMAT$[2],P0$[20]
Rem {end dim.roh.i}

Rem {begin src/inc/dim.rol.i}
Dim 1%,L3[3],PL[1],UN[2],S2[1],EUN[2],OWHS,LPRINTED,CTWT[1]
Dim 2%,L2[1],L4[3],L6[5],L9[1],LCO[1],LTAX2,LP_DATE,LP_TIME
Dim 3%,L5[3],L7[12],S3[17],OLM[6],UNF[6],CST[0],LTAX1,INVNO,QPB,ROL0
Dim L6$[60],L1$[20],MT$[2],S3$[33]
Rem {end dim.rol.i}

Rem {begin src/inc/dim.ros.i}
Dim 1%,S6[1]
Dim 2%,S1[1],S5
Dim 3%,SRN[5],INVNO
Dim S1$[118],S2$[20]
Rem {end dim.ros.i}

Rem {begin src/inc/dim.rot.i}
Dim 1%,DCLVL,MCTXBL[9]
Dim 2%,MCODE[9],T1[1],JRNL
Dim 3%,MCHARGE[9,1],T2[25],TOT[4],INVNO
Rem {end dim.rot.i}

Rem {begin src/inc/dim.cust.i}
Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142]
Dim 2%,A0[3],C1[12],REC,C3[1]
Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8,C11[2]
Dim 3%,C4[6],C10[5],CFIN[8],U1,C9,C5[5],C6[9],C12[1]
Rem {end dim.cust.i}

Rem {begin src/inc/dim.slsm.i}
Dim 3%,SLSM1[3],SLSM2[19,5],SLSM3[9]
Dim SLSM1$[118]
Rem {end dim.slsm.i}

Dim nextblockid$[8],Message$[400],WebStr$[600],msg$[100]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],rstr$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
Dim blockid$[100],f$[16]

Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
MODULE$ = "amalgamate"
REVISION$ = ""
Call Time(RPTDATE$)
PREV = 1
CURR = 2
M1$ = "--------#.##"
WHEEL$ = "|/-"
Call String(4,220,WHEEL$[4])
CH_RPT = 0
CH_CNTRL = 1
CH_SORT = 9
CH_ROH = 10
CH_ROL = 11
CH_ROT = 12
CH_ROS = 13
CH_ROH = 14
CH_CUST = 15
CH_CMTBL = 16
CH_SLSM = 17
CH_PROD = 18
CH_PRODWHSE = 19
CH_CMDTY = 20
CHAN[1] = CH_CNTRL
CHAN[2] = CH_SLSM
CHAN[3] = CH_ROL
CHAN[4] = CH_PROD
CHAN[5] = CH_PRODWHSE
CHAN[6] = CH_CMDTY
CHAN[7] = CH_CUST
CHAN[8] = CH_CMTBL
CHAN[9] = CH_ROH
CHAN[10] = CH_ROT

MAIN: Rem
Gosub OPEN_FILES
Gosub INIT
If Not(PASS) Goto OUTEND
Gosub DO_SORT
! Print @0,23;'CL K0';"Printing...";
SORTKEY$ = " ",SORTKEY$
Search #CH_SORT,3,1;SORTKEY$,REC_ROH,E
If E Gosub DONENONE \ Goto OUTEND
AMCOUNT = 0
Gosub READ_ROH
REC_ROT = H0[3]
PASS[PREV] = 1
PASS[CURR] = 1
Gosub READ_ROT
Gosub INIT_GROUP
Gosub ADD2_GROUP
STRTKEY$ = SORTKEY$
MAIN_LOOP: Rem loop thru sorted orders and take action
	EENDKEY$ = SORTKEY$
	Search #CH_SORT,3,1;SORTKEY$,REC_ROH,E
	AMCOUNT = AMCOUNT + 1
	If Not(E) Or AMCOUNT
		Gosub READ_ROH
		PASS[PREV] = PASS[CURR]
		If SORTKEY$[1,16] = STRTKEY$[1,16]
			PASS[CURR] = 1
		Else
			PASS[CURR] = 0
		End If
		If Not(E) And PASS[PREV] * PASS[CURR]
			REC_ROT = H0[3]
			Gosub READ_ROT
			Gosub ADD2_GROUP
		Else
			If AMCOUNT > 1 ! we have multiple invoices that matched prior
				SORTKEY$ = STRTKEY$
				SCR = Asc(STRTKEY$[26,26]) - 1
				Call String(4,SCR,SCRATCH$)
				SORTKEY$[26,26] = SCRATCH$
				RECALC_LOOP: Rem loop through matching invoices
					Search #CH_SORT,3,1;SORTKEY$,REC_ROH,E
					If Not(E) And SORTKEY$ <= EENDKEY$
! 						If Not(TOSCREEN)
! 							SPOKE = SPOKE + 1
! 							If SPOKE > 4 Let SPOKE = 1
! 							Print @10,23;WHEEL$[SPOKE,SPOKE];
! 						End If
						Gosub READ_ROH
						REC_ROT = H0[3]
						Gosub READ_ROT
						Gosub SAVE_ORIGINALS
						PARAM1$ = SORTKEY$[1,3]
						Gosub GET_SLSM
						PARAM1$ = SORTKEY$[4,9]
						Gosub GET_CUST
						If H0[5] = 0 Or H5[7] = 24
							Gosub PROFIT_CALC
							Gosub COMMISSION
						Else
							RTRN[5] = ORIGSCMP
							RTRN[10] = ORIGSCOM[0]
						End If
						Gosub PRINT_LINE
						Gosub ACCUM_TOTALS
						Goto RECALC_LOOP
					Else
						If Not(E) And AMCOUNT < 2 And SORTKEY$ <= EENDKEY$
							Search #CH_SORT,3,1;SORTKEY$,REC_ROH,E
						End If
						If E Goto END_MAIN_LOOP
						If EENDKEY$ < STRTKEY$ Let EENDKEY$ = STRTKEY$
					End If
				END_RECALC_LOOP: Rem
				Gosub GROUP_TOTALS
			End If ! if amcount > 1
			If ORSTMD And STRTKEY$[1,3] <> SORTKEY$[1,3] Gosub SLSM_TOTALS
			AMCOUNT = -1
			Gosub INIT_GROUP
			STRTKEY$ = SORTKEY$
			SORTKEY$ = EENDKEY$
		End If
		Goto MAIN_LOOP
	End If ! if not(E) or amcount
END_MAIN_LOOP: Rem
Gosub GROUP_TOTALS
If ORSTMD Gosub SLSM_TOTALS
Gosub GRAND_TOTALS
Goto DONE

OPEN_FILES: Rem
	Try
		v9=CHF(ch_sort) ! is there a sortfile?
		Gosub CLEAR_SORT
	Else
		X2=BuildSort(e$,25,0,ch_sort) ! build a sortwork on chan#9, keysize=25w
	End try
	TOSCREEN = 0 ! screen print not allowed
	Open #CH_ROH,"3/sordfleh" + str$(intCo)
	Open #CH_ROL,"3/sordflel" + str$(intCo)
	Open #CH_ROS,"3/sordfles" + str$(intCo)
	Open #CH_ROT,"3/sordflet" + str$(intCo)
	Open #CH_CUST,"2/scustomer" + str$(intCo)
	Open #CH_CMTBL,"2/commgrid" + str$(intCo)
	Open #CH_SLSM,"2/sslsm" + str$(intCo)
	Open #CH_PROD,"2/sprod" + str$(intCo)
	Open #CH_PRODWHSE,"2/sprodwhse" + str$(intCo)
	Open #CH_CMDTY,"2/commhead" + str$(intCo)
	If TOSCREEN
		MAXLN = 22
	Else
		MAXLN = 60
	End If
Return

CHNLFREE: Rem check to see if a channel is being used
	try
		CHNLFREE = 0
		E = Chf(CHNL)
	else
		Let CHNLFREE = Spc(8)
	end try
	If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
Return

CLEAR_SORT: Rem clear existing sort file
	SORTKEY$ = " ",SORTKEY$
	CS_LOOP: Rem clear sort loop
	Search #CH_SORT,3,1;SORTKEY$,DUMMY_REC,E \ If E > 2 Gosub ERR_SEARCH
	If E Goto END_CS_LOOP
	Search #CH_SORT,5,1;SORTKEY$,DUMMY_REC,E \ If E Gosub ERR_SEARCH
	Goto CS_LOOP
	END_CS_LOOP: Rem end clear sort loop
Return

DO_SORT: Rem key = sssccccccXSSSSSSiiiiii
! 	Print @0,23;'CL K0';"Sorting...";
	ROH$ = " ",ROH$
	ROH$ = " 6"
	ROH_LOOP: Rem
		Search #CH_ROH,3,1;ROH$,REC_ROH,E
		If Not(E) And ROH$[1,2] = " 6"
			Gosub READ_ROH
			! don't do negative GP orders
			if H5[13] - H5[14] < 0 goto ROH_LOOP:
			! only order type 1
			if h5[7] <> 1 goto ROH_LOOP:
!			If Not(TOSCREEN)
!				SPOKE = SPOKE + 1
!				If SPOKE > 4 Let SPOKE = 1
!				Print @10,23;WHEEL$[SPOKE,SPOKE];
!			End If
			REC_ROS = H0[2]
			Rem {begin src/inc/read.ros.i}
			Mat Read #CH_ROS,REC_ROS,0;S1
			Mat Read #CH_ROS,REC_ROS,8;S1$
			Mat Read #CH_ROS,REC_ROS,126;S2$
			Mat Read #CH_ROS,REC_ROS,146;S5
			Mat Read #CH_ROS,REC_ROS,150;S6
			Mat Read #CH_ROS,REC_ROS,154;SRN
			Mat Read #CH_ROS,REC_ROS,190;INVNO;
			Rem {end read.ros.i}
			Unlock #CH_ROS
			SORTKEY$ = " ",SORTKEY$
			SORTKEY$[1,3] = H0[11] Using "##&"
			SORTKEY$[4,9] = H0[4] Using "#####&"
			SORTKEY$[10,10] = SRN[3] Using "&"
			SORTKEY$[11,16] = SRN[1] Using "&&&&&&"
			SORTKEY$[17,26] = OREF[1] Using "#########&"
			Search #CH_SORT,4,1;SORTKEY$,REC_ROH,E
			If E Gosub ERR_SEARCH
			Goto ROH_LOOP
		End If
		
	END_ROH_LOOP: Rem
Return 

INIT: Rem
	PASS = 1
	AMLGDATE[0] = Tim(6)
	AMLGTIME[0] = Tim(11) * 100 + Tim(12)
	AMLGDATE[1] = 0
	AMLGTIME[1] = 0
! 	Print @0,20;'CE';
	Gosub DISP_STARTTIME
Return

DISP_STARTTIME: Rem
	X$ = AMLGDATE[0]
	Call JulianToDate(1,X$,SCRATCH$,E)
	If E Let SCRATCH$ = "Date unknown."
	HH = Int(AMLGTIME[0] / 100)
	MM = AMLGTIME[0] - HH * 100
! 	Print @0,21;'CL';"      STARTED: ";SCRATCH$;
! 	Print Using " ##:&&";HH;MM;
Return

DISP_ENDTIME: Rem
	X$ = AMLGDATE[1]
	Call JulianToDate(1,X$,SCRATCH$,E)
	If E Let SCRATCH$ = "Date unknown."
	HH = Int(AMLGTIME[1] / 100)
	MM = AMLGTIME[1] - HH * 100
! 	Print @0,22;'CL';"        ENDED: ";SCRATCH$;
! 	Print Using " ##:&&";HH;MM;
Return

INIT_GROUP: Rem
	For SCR = 0 To 25
		AT2[SCR] = 0
		If SCR < 5 Let ATOT[SCR] = 0
	Next SCR
	AD4PFT = 0
	AC4PFT = 0
	OGRPCA = 0
	AGRPCA = 0
Return

ADD2_GROUP: Rem
	For SCR = 0 To 25
		AT2[SCR] = AT2[SCR] + T2[SCR]
		If SCR < 5 Let ATOT[SCR] = ATOT[SCR] + TOT[SCR]
	Next SCR
	AD4PFT = AD4PFT + H5[13]
	AC4PFT = AC4PFT + H5[14]
Return

SAVE_ORIGINALS: Rem save the stuff that will change in orig* variables
	For SCR = 0 To 4
		ORIGSCOM[SCR] = SCOM[SCR]
		ORIGSCST[SCR] = SCST[SCR]
	Next SCR
	ORIGGPD = H5[13] - H5[14]
	If H5[13]
		ORIGGPP = FNR(ORIGGPD / H5[13] * 100)
	Else
		ORIGGPP = 9999
	End If
	ORIGTLOD = H5[14]
	ORIGSCMP = SLSM[5]
	Return
	COMMISSION: Rem recalculate
	PARM[0] = 1
	PARM[1] = 0
	PARM[2] = REC_ROH
	PARM[3] = REC_SLSM
	PARM[4] = AD4PFT
	PARM[5] = AC4PFT
	Call "slscom.dl4",CHAN[],PARM[],RTRN[]
	Unlock #CH_ROH
Return

PROFIT_CALC: Rem PROFIT CALC
	AGP = 0
	If AD4PFT Let AGP = ((AD4PFT - AC4PFT) / AD4PFT) * 100
	Return
	HEADER: Rem
	If TOSCREEN And PG
! 		Print @0,24;" <CR> to continue ";
! 		Input ""SCRATCH$
	End If
	PG = PG + 1
	Print #CH_RPT;"\14\\15\"
	Print #CH_RPT;"Run Date: ";RPTDATE$;" Port: ";Spc(6);
	Print #CH_RPT; Tab (55);"COMMISSION AMALGAMATION REPORT";
	Print #CH_RPT; Tab (120);PG Using "PAGE: ######"
	Print #CH_RPT;"Program:  ";MODULE$;" - ";REVISION$
	Print #CH_RPT;""
	Print #CH_RPT;"SLSM: ";SORTKEY$[1,3];" - ";SLSM1$;
	Print #CH_RPT; Tab (66);"orig/"
	Print #CH_RPT;"CUST/SHIPTO   NAME                 ";
	Print #CH_RPT;"INVO #  RESALE $    COST       ";
	Print #CH_RPT; Tab (65);"amalg GP%     GP $        ";
	Print #CH_RPT;"COMM % COMM $ "
	Print #CH_RPT;"------------- -------------------- ";
	Print #CH_RPT;"------  ----------  ---------- ";
	Print #CH_RPT; Tab (65);"      ------  ----------- ";
	Print #CH_RPT;"------ -----------"
	LN = 7
Return

PRINT_LINE: Rem
	If LN > MAXLN Or PG = 0 Gosub HEADER
	Print #CH_RPT;SORTKEY$[4,9];
	SCR = SORTKEY$[10,10]
	If SCR = 1 Or SCR = 2
		Print #CH_RPT;".";SORTKEY$[11,16];
	Else
		If SCR = 4
			Print #CH_RPT;"C";SORTKEY$[11,16];
		Else
			If SCR = 5
				Print #CH_RPT;"MANUAL";
			End If
		End If
	End If
	Print #CH_RPT; Tab (14);A1$[31,50];
	SCRATCH$ = ""
	Print #CH_RPT; Using "########"; Tab 35;OREF[1];
	Print #CH_RPT; Using M1$; Tab (41);H5[13];
	Print #CH_RPT; Using M1$; Tab (50);H5[14];
	Print #CH_RPT; Using "----.##"; Tab (71);ORIGGPP;
	Print #CH_RPT; Using M1$; Tab (79);ORIGGPD;
	Print #CH_RPT; Using "----.##"; Tab (91);ORIGSCMP;
	Print #CH_RPT; Using M1$; Tab (98);ORIGSCOM[0];
	If H0[5]
		Print #CH_RPT;" b/o"
	Else
		Print #CH_RPT;""
	End If
	Print #CH_RPT; Using "----.##"; Tab (91);RTRN[5];
	Print #CH_RPT; Using M1$; Tab (98);RTRN[10];
	Print #CH_RPT;""
	LN = LN + 2
Return

ACCUM_TOTALS: Rem
	ORSTMD = ORSTMD + H5[13]
	ORSTLD = ORSTLD + ORIGTLOD
	AMSTLD = AMSTLD + H5[14]
	ORSTCA = ORSTCA + ORIGSCOM[0]
	OGRPCA = OGRPCA + ORIGSCOM[0]
	AMSTCA = AMSTCA + RTRN[10]
	AGRPCA = AGRPCA + RTRN[10]
Return

GROUP_TOTALS: Rem
	If LN + 3 > MAXLN Gosub HEADER
	Print #CH_RPT;"---------GROUP TOTALS----------";
	Print #CH_RPT; Using M1$; Tab (41);AD4PFT;
	Print #CH_RPT; Using M1$; Tab (51);AC4PFT;
	GPD = AD4PFT - AC4PFT
	If AD4PFT
		GPP = FNR((GPD / AD4PFT) * 100)
	Else
		GPP = 0
	End If
	If GPD
		SCR = FNR((OGRPCA / GPD) * 100)
	Else
		SCR = 0
	End If
	Print #CH_RPT; Using "----.##"; Tab (71);GPP;
	Print #CH_RPT; Using M1$; Tab (79);GPD;
	Print #CH_RPT; Using "----.##"; Tab (91);SCR;
	Print #CH_RPT; Using M1$; Tab (98);OGRPCA
	If GPD
		SCR = FNR((AGRPCA / GPD) * 100)
	Else
		SCR = 0
	End If
	Print #CH_RPT; Using "----.##"; Tab (91);SCR;
	Print #CH_RPT; Using M1$; Tab (98);AGRPCA
	Print #CH_RPT;""
	LN = LN + 3
Return

SLSM_TOTALS: Rem
	If LN + 4 > MAXLN Gosub HEADER
	Print #CH_RPT;"SALESMAN ";STRTKEY$[1,3];" TOTALS:";
	Print #CH_RPT; Tab (24);"ORIGINALS:";
	Print #CH_RPT; Using M1$; Tab (41);ORSTMD;
	Print #CH_RPT; Using M1$; Tab (51);ORSTLD;
	GPD = ORSTMD - ORSTLD
	If ORSTMD
		GPP = FNR((GPD / ORSTMD) * 100)
	Else
		GPP = 0
	End If
	If GPD
		SCR = FNR((ORSTCA / GPD) * 100)
	Else
		SCR = 0
	End If
	Print #CH_RPT; Using "----.##"; Tab (71);GPP;
	Print #CH_RPT; Using M1$; Tab (79);GPD;
	Print #CH_RPT; Using "----.##"; Tab (91);SCR;
	Print #CH_RPT; Using M1$; Tab (98);ORSTCA
	Print #CH_RPT; Tab (24);"AMALGAMATED:";
	If GPD
		X = FNR((AMSTCA / GPD) * 100)
	Else
		X = 0
	End If
	Print #CH_RPT; Using "----.##"; Tab (91);X;
	Print #CH_RPT; Using M1$; Tab (98);AMSTCA
	Print #CH_RPT; Tab (24);"DIFFERENCE:";
	Print #CH_RPT; Using "----.##"; Tab (91);X - SCR;
	Print #CH_RPT; Using M1$; Tab (98);AMSTCA - ORSTCA
	Print #CH_RPT;""
	LN = LN + 4
	ORGTMD = ORGTMD + ORSTMD
	ORGTLD = ORGTLD + ORSTLD
	AMGTLD = AMGTLD + AMSTLD
	ORGTCA = ORGTCA + ORSTCA
	AMGTCA = AMGTCA + AMSTCA
	ORSTMD = 0
	ORSTLD = 0
	AMSTLD = 0
	ORSTCA = 0
	AMSTCA = 0
	LN = MAXLN + 1
Return

GRAND_TOTALS: Rem
	If LN + 4 > MAXLN Gosub HEADER
	Print #CH_RPT;"GRAND TOTALS:";
	Print #CH_RPT; Tab (24);"ORIGINALS:";
	Print #CH_RPT; Using M1$; Tab (41);ORGTMD;
	Print #CH_RPT; Using M1$; Tab (51);ORGTLD;
	GPD = ORGTMD - ORGTLD
	If ORGTMD
		GPP = FNR((GPD / ORGTMD) * 100)
	Else
		GPP = 0
	End If
	If GPD
		SCR = FNR((ORGTCA / GPD) * 100)
	Else
		SCR = 0
	End If
	Print #CH_RPT; Using "----.##"; Tab (71);GPP;
	Print #CH_RPT; Using M1$; Tab (79);GPD;
	Print #CH_RPT; Using "----.##"; Tab (91);SCR;
	Print #CH_RPT; Using M1$; Tab (98);ORGTCA
	Print #CH_RPT; Tab (24);"AMALGAMATED:";
	If GPD
		X = FNR((AMGTCA / GPD) * 100)
	Else
		X = 0
	End If
	Print #CH_RPT; Using "----.##"; Tab (91);X;
	Print #CH_RPT; Using M1$; Tab (98);AMGTCA
	Print #CH_RPT; Tab (24);"DIFFERENCE:";
	Print #CH_RPT; Using "----.##"; Tab (91);X - SCR;
	Print #CH_RPT; Using M1$; Tab (98);AMGTCA - ORGTCA
	Print #CH_RPT;""
	LN = LN + 4
Return

READ_ROH: Rem
	Rem {begin src/inc/read.roh.i}
	Mat Read #CH_ROH,REC_ROH,0;H0
	Mat Read #CH_ROH,REC_ROH,52;H3
	Mat Read #CH_ROH,REC_ROH,56;TOT_SELL
	Mat Read #CH_ROH,REC_ROH,64;LOCKPORT
	Mat Read #CH_ROH,REC_ROH,66;V0$
	Mat Read #CH_ROH,REC_ROH,78;H4
	Mat Read #CH_ROH,REC_ROH,84;H0$
	Mat Read #CH_ROH,REC_ROH,104;H5
	Mat Read #CH_ROH,REC_ROH,172;ST3
	Mat Read #CH_ROH,REC_ROH,272;H1$
	Mat Read #CH_ROH,REC_ROH,278;SLSM
	Mat Read #CH_ROH,REC_ROH,318;SCOM
	Mat Read #CH_ROH,REC_ROH,348;SMER
	Mat Read #CH_ROH,REC_ROH,378;SCST
	Mat Read #CH_ROH,REC_ROH,408;H6
	Mat Read #CH_ROH,REC_ROH,444;HMAT$
	Mat Read #CH_ROH,REC_ROH,446;P0$
	Mat Read #CH_ROH,REC_ROH,466;HFAX
	Mat Read #CH_ROH,REC_ROH,474;HSTI
	Mat Read #CH_ROH,REC_ROH,482;H2
	Mat Read #CH_ROH,REC_ROH,486;OWHT
	Mat Read #CH_ROH,REC_ROH,490;OWHT1
	Mat Read #CH_ROH,REC_ROH,498;TOTGL
	Mat Read #CH_ROH,REC_ROH,504;PICKBY
	Mat Read #CH_ROH,REC_ROH,512;OREF;
	Rem {end read.roh.i}
Return

READ_ROT: Rem
	Rem {begin src/inc/read.rot.i}
	Mat Read #CH_ROT,REC_ROT,0;T1
	Mat Read #CH_ROT,REC_ROT,8;T2
	Mat Read #CH_ROT,REC_ROT,164;JRNL
	Mat Read #CH_ROT,REC_ROT,168;MCODE
	Mat Read #CH_ROT,REC_ROT,208;MCHARGE
	Mat Read #CH_ROT,REC_ROT,328;TOT
	Mat Read #CH_ROT,REC_ROT,358;MCTXBL
	Mat Read #CH_ROT,REC_ROT,378;DCLVL
	Mat Read #CH_ROT,REC_ROT,400;INVNO;
	Rem {end read.rot.i}
	Unlock #CH_ROT
Return

GET_CUST: Rem
	SCRATCH$ = " ",SCRATCH$
	SCRATCH$ = PARAM1$[1,6]
	Search #CH_CUST,2,1;SCRATCH$,REC_CUST,E
	If E
		A1$[31,60] = "NOT FOUND"
	Else
		Rem {begin src/inc/read.cust.i}
		Mat Read #CH_CUST,REC_CUST,0;A1$
		Mat Read #CH_CUST,REC_CUST,142;C1
		Mat Read #CH_CUST,REC_CUST,194;C2
		Mat Read #CH_CUST,REC_CUST,200;C3
		Mat Read #CH_CUST,REC_CUST,208;C0
		Mat Read #CH_CUST,REC_CUST,210;C4
		Mat Read #CH_CUST,REC_CUST,252;C5
		Mat Read #CH_CUST,REC_CUST,288;C6
		Mat Read #CH_CUST,REC_CUST,348;A2$
		Mat Read #CH_CUST,REC_CUST,378;C7
		Mat Read #CH_CUST,REC_CUST,388;A3$
		Mat Read #CH_CUST,REC_CUST,410;C8
		Mat Read #CH_CUST,REC_CUST,412;C9
		Mat Read #CH_CUST,REC_CUST,418;SUB_
		Mat Read #CH_CUST,REC_CUST,420;U1
		Mat Read #CH_CUST,REC_CUST,426;U2$
		Mat Read #CH_CUST,REC_CUST,486;A0
		Mat Read #CH_CUST,REC_CUST,502;S0
		Mat Read #CH_CUST,REC_CUST,544;CFIN
		Mat Read #CH_CUST,REC_CUST,598;SZN
		Mat Read #CH_CUST,REC_CUST,600;BT$
		Mat Read #CH_CUST,REC_CUST,620;REC
		Mat Read #CH_CUST,REC_CUST,624;C10
		Mat Read #CH_CUST,REC_CUST,660;C11
		Mat Read #CH_CUST,REC_CUST,668;C12;
		Rem {end read.cust.i}
	End If
Return

GET_SLSM: Rem
	SCRATCH$ = " ",SCRATCH$
	SCRATCH$ = PARAM1$[1,3]
	Search #CH_SLSM,2,1;SCRATCH$,REC_SLSM,E
	If E
		SLSM1$[1,30] = "NOT FOUND"
	Else
		Rem {begin src/inc/read.slsm.i}
		Mat Read #CH_SLSM,REC_SLSM,0;SLSM1$
		Mat Read #CH_SLSM,REC_SLSM,118;SLSM1
		Mat Read #CH_SLSM,REC_SLSM,142;SLSM2
		Mat Read #CH_SLSM,REC_SLSM,862;SLSM3;
		Rem {end read.slsm.i}
	End If
Return

DONE: Rem
AMLGDATE[1] = Tim(6)
AMLGTIME[1] = Tim(11) * 100 + Tim(12)
Gosub DISP_ENDTIME
! Print @0,23;'CL';"AMALGAMATION HAS COMPLETED. <CR> TO CONTINUE  ";
! Input ""SCRATCH$
OUTEND: Rem
For I = 2 To 99
	CHNL = I \ Gosub CHNLFREE
	If Not(CHNLFREE) Close #CHNL
Next I
Goto RDone ! end sub

DONENONE: Rem reset flags - no invoices amalgamated
	AMLGPORT = 0
	AMLGDATE[0] = 0
	AMLGTIME[0] = 0
	AMLGDATE[1] = 0
	AMLGTIME[1] = 0
! 	Print @0,23;'CL';"AMALGAMATION COMPLETED, NO INVOICES DONE. <CR> TO CONTINUE  ";
! 	Input ""SCRATCH$
Return


ERR_SEARCH: Rem
	ENUM = E;ELINE = Spc(16);CTERR = 0
	If E = 5 Let CTERR = Err(8)
	e$ = "RETURN STATUS",(E + (CTERR * .001))
	e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)
	
	Call programdump("tmp/amalgse!","")
	Goto ERR_MSG ! Error 10000
Return ! End

ERR_MSG: ! send message
	ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
	Message$ = e$
	Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	Call AddToStr(e$,rstr$,WebStr$)
	Call SetOutPut(e$,rstr$)
!end sub
RDone: ! really, really done

else
err_trap: !
include "src/callsuberr.inc"
end try

end sub