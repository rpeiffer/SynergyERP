!Program Name: ubslplist
!
! loadsave -w -s -n 100,10 -o prog/dxport/ubslplist.dl4 src/ubslplist.src
!
!Last Updated:                                     
!rce 10/10/05  salesgroup
!rce 02/22/07 R9 changes
!serp - send nonstocks
! 09/2013 - NEW LASTPRICE FILES AFTER rev1.8.4.0
include "src/copyright.inc"
!
! sub & functions for list library
!
!  S  Getlplist		get list of Last Price


include "src/inc/fileprod.inc" ! "product file
include "src/inc/filelastprice.inc" ! last price
include "src/inc/filecommhead.inc" ! commodity code file
include "src/ubsproduct.inc" ! product file --- with arrays ---
include "src/inc/filecust.inc" ! "customer file
include "src/inc/fileprodwhse.inc" ! prodwhse (pricing)
include "src/inc/fileprtdefault.inc" ! port default
!
External Lib "libgeneral.lib"
Declare External Sub SubErr,GetDelimiters

External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Sub UserCntrl,GetCostLevels
Declare Sub updatelog,errTrap

External Lib "libprice.lib"
Declare External Sub SysPriceCalc

External Lib "libprodwh.lib"
Declare External Function getwhavail
External Lib "libprod.lib"
Declare External Function getpravail

Declare Intrinsic Sub Env,FormatDate,JuliantoDate,DatetoJulian,programdump

! --------------------------------------------------------------------------------------
External Sub Getlplist(e$,List$[],maxcnt,intCo,ReturnStatus,Message$)
  ! Creates a list of the customer's last price
  !
  ! e$         : error message
  ! vers		: version - 0=Current A/p Only,
  ! List$[]    : VEndor Data list
  ! maxcnt		: max # of lines for list$[]
  ! intCo      : company id #
  ! ReturnStatus : .net status
  ! Message$	: .net message
try
!
!
!


Declare Intrinsic Function FindChannel,Trim$
Declare Intrinsic Sub JulianToDate,DateToJulian

External Lib "ubsfunc.dl4","ubsprconv.dl4"
Declare External Function FDate$,PDate$,BaseName$,FMTPhone$,Xunit$,OpenFile  
Declare External Function XAmount,WareHouse,ReplaceChar$
Declare External Sub UserCntrl,GetCostLevels,GetPortDefault

DEF FNR(X)=SGN(X)*(INT(ABS(X)*100+.5)*.01) 

Dim LPK$[50],PRK$[20],CMK$[12],CUK$[12],SMK$[20]
Dim P9$[50],P60$[50],P61$[256]

Dim PRod. As Prod
Dim Pr. As Product
Dim CM. As CommHead
Dim CU. As Cust
Dim LP. As Lastprice 
Dim PW. as prodwhse
dim prt. as prtdefault ! port defaults

dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[500]
dim Mode$[2],cust$[6],prod$[12],commkey$[50]
dim custkey$[50],dlog$[50]
dim tmp$[200],tmp1$[200],WebStr$[500],Message$[200]
Dim 1%,debugDetail
! Variables for Channel#'s
Dim 2%,LPC,PRC,CMC,CUC,SMC,CTLC,CCC
! Variables for Search Record#
Dim 2%,LPR,PRR,CMR,CUR,SMR
! Variables for Search Error
Dim 2%,LPE,PRE,CME,CUE,SME

Dim Sales$[35], Temp$[100], DT1$[10],DT2$[10]
Dim SLS$[3],CO$[2],Userid$[10]
Dim QMASK$[20],PMASK$[20],EMASK$[20],dec$[5]
Dim Msg$[256],pgmName$[20],PWKey$[50]
Dim PriceTypeDesc$[50,50],SUM$[4]

Dim 1%,factor,dft_cost
Dim 2%,JToday 
Dim 2%,t2,LastInvDate, X1,X2
Dim 2%,Q0[1] 
Dim 2%,jsdate,jedate,jinvdate
Dim 3%,gp,gpp,sprice,lpbaseqty,extweight
DIM TODAY$[10],2%,curdat 
dIM 3%,FLEPTR[20,1],SPECS[50],MSGDESC$[150]
dim 3%,currcost,currprice,cost_lev[4],currentgp
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
Call DXGet("custid",cust$) \ custid=cust$
cust$=custid using "######"
cust$ = cust$+"            "
cust$[7]="" ! "cut after 6 chars


CTLC= OpenFile(-9999,intCo) \ If CTLC=-1 Error 42    !cntrl
LPC= OpenFile(-1376,intCo)  \ If LPC=-1  Error 42    !lastprice
PRC= OpenFile(-1792,intCo)  \ If PRC=-1  Error 42    !product
CMC= OpenFile(-2288,intCo)  \ If CMC=-1  Error 42    !commcode
CUC= OpenFile(-1808,intCo)  \ If CUC=-1  Error 42    !cust
SMC= OpenFile(-1824,intCo)  \ If SMC=-1  Error 42    !salesman 
CCC= OpenFile(-1728,intCo)  \ If CCC=-1  Error 42    !ccodes



CHC= OpenFile(-2880,intCo)  \ If CHC=-1  Error 42    !contracth
PTC= OpenFile(-752,intCo)   \ If PTC=-1  Error 42    !prtypefle
SPPC= OpenFile(-1936,intCo) \ If SPPC=-1 Error 42    !spcprice
WHC= OpenFile(-1744,intCo)  \ If WHC=-1  Error 42    !prodwhse
BTC= OpenFile(-1952,intCo)  \ If BTC=-1  Error 42    !brktbl
WIC= OpenFile(-2768,intCo)  \ If WIC=-1  Error 42    !whinfo
CSC= OpenFile(-1680,intCo)  \ If CSC=-1  Error 42    !custspec
SIC= OpenFile(-2352,intCo)  \ If SIC=-1  Error 42    !stagitem

Call DXGet("S_USER.ID",userid$) \ userid$ = Ucase$(userid$) !user id

Mat Read #CTLC,19,50;P9$; 
Mat Read #CTLC,60,50;P60$;
Mat Read #CTLC,61,0;p61$;
Mat Read #CTLC,115,40;Q0; 

If not(Q0[1]) let Q0[1]=2                                                 
Let Dec$="#",Dec$;Qmask$="---,---,--#"                                    
If Q0[0] Let Qmask$="---,---,--#.",Dec$[1,Q0[0]]         !qty mask        
If Q0[1] Let Pmask$="$--,---,---,---.",Dec$[1,Q0[1]]     !price mask      
Let Emask$="-$$$,$$$,$$$,$$$.##"                         !ext. price mask
Call GetCostLevels(e$,cost_lev[],IntCo,Userid$) ! get cost security 
Call GetPortDefault(e$,IntCO,UserID$,portnum,rec_uac,prt.) ! port defaults from usercntrl

Let PriceTypeDesc$[1]="MATRIX PRICE"
Let PriceTypeDesc$[2]="CUSTOMER/SINGLE PRODUCT CONTRACT"
Let PriceTypeDesc$[3]="SINGLE PRODUCT PROMOTION"
Let PriceTypeDesc$[4]="CUSTOMER/COMMODITY CONTRACT"
Let PriceTypeDesc$[5]="TEN BRACKET PRICE" 
Let PriceTypeDesc$[6]="CUSTOMER/ALL PRODUCT CONTRACT"
Let PriceTypeDesc$[7]="COMMODITY PROMOTION"
Let PriceTypeDesc$[8]="ALL PRODUCT PROMOTION"
Let PriceTypeDesc$[9]="QUANTITY BREAK DISCOUNT"
Let PriceTypeDesc$[10]="MANUAL PERCENT DISCOUNT"
Let PriceTypeDesc$[11]="SIZE (U/M) PROMOTION"
Let PriceTypeDesc$[12]="CUSTOMER/SIZE (U/M) CONTRACT"
Let PriceTypeDesc$[13]="FIXED PRICE CONTRACT"
Let PriceTypeDesc$[14]="MANUAL GTM % PRICE"
!
Let PriceTypeDesc$[33]="MANUAL PRICE BRACKET 9"
Let PriceTypeDesc$[34]="MANUAL PRICE BRACKET 8"
Let PriceTypeDesc$[35]="MANUAL PRICE BRACKET 7"
Let PriceTypeDesc$[36]="MANUAL PRICE BRACKET 6"
Let PriceTypeDesc$[37]="MANUAL PRICE BRACKET 5"
Let PriceTypeDesc$[38]="MANUAL PRICE BRACKET 4"
Let PriceTypeDesc$[39]="MANUAL PRICE BRACKET 3"
Let PriceTypeDesc$[40]="MANUAL PRICE BRACKET 2"
Let PriceTypeDesc$[41]="MANUAL PRICE BRACKET 1"
Let PriceTypeDesc$[42]="MANUAL PRICE BRACKET 0"
Let PriceTypeDesc$[43]="MANUAL PRICE ENTRY"
Let PriceTypeDesc$[44]="MANUAL LIST PRICE 6"
Let PriceTypeDesc$[45]="MANUAL LIST PRICE 5"
Let PriceTypeDesc$[46]="MANUAL LIST PRICE 4"
Let PriceTypeDesc$[47]="MANUAL LIST PRICE 3"
Let PriceTypeDesc$[48]="MANUAL LIST PRICE 2"
Let PriceTypeDesc$[49]="MANUAL LIST PRICE 1"

tmpcnt=maxcnt
clear List$[]
ReturnStatus = 1
Message$="OK"
DFWH=prt.Wh \ if DFWH<1 or DFWH>99 or fra(DFWH) let DFWH=1 ! default warehouse
!
cust$[7]="" ! make sure its only 6
mode$="=" ! "exact match or next

Dir=1 ! "of vendor code / Ref
custKey$=cust$
custRec=filegetcust(e$,cuc,mode$,dir,custKey$,cu.)
if custRec<=0
  Clear cu.
  ReturnStatus = 0
  Message$="Customer Not Found"
endif

Try
	Call DXGet("prodid",prod$)
else
	let prod$=""
end try
row=0
if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
List$[row]=bsdel$,"Customer Price List",fdel$
row=row+1
WebStr$="Commodity",fdel$
WebStr$=WebStr$,"Product",fdel$
WebStr$=WebStr$,"Description 1",fdel$
WebStr$=WebStr$,"Description 2",fdel$
Webstr$=WebStr$,"Current Price",fdel$  
WebStr$=WebStr$,"Current Cost",fdel$
Webstr$=WebStr$,"Last Price",fdel$	
Webstr$=WebStr$,"Last Cost",fdel$
Webstr$=WebStr$,"Last GP%",fdel$
Webstr$=WebStr$,"Last Order Date",fdel$
Webstr$=WebStr$,"Last Qty",fdel$
Webstr$=WebStr$,"Frequency",fdel$
webstr$=webstr$,"Current GP%",fdel$
webstr$=webstr$,"WH Avail",fdel$ 
List$[row]=WebStr$
row=row+1
	  
If len(prod$)<=1 let list=1 else let list=0
if custrec>0
	Let LPK$=" ",LPK$
	Let LPK$[1,6]=val(cust$) using "######"
	 Mode$=">=" ! "match or PREV
	  Dir=1! "start w/ vend/ref (may switch to dir=2 - vend/date order)
	  Do
		Mode$=">" ! "get prev/next
		Dir=1! "dir 1/2
		 lpRec=filegetlastprice(e$,lpc,Mode$,dir,lpk$,lp.)
		if lpRec<0 or lpk$[1,len(custKey$)]<>custKey$ exit do
		nonstk=0
        If lp.LineType=1 let nonstk=1 ! product
		if not(nonstk)
			 Mode$="=" ! "get prev/next
			 Dir=1! "dir 1/2
			 let prk$=lp.prod$
			 let prodrec=filegetprod(e$,prc,mode$,dir,prk$,prod.)
			 if prodrec>0
				Read Record #prc,prodrec;pr.;
			 Endif ! prod rec
			 if p9$[32,32]="Y" and lp.whse<>0
				pwkey$=lp.prod$+lp.whse using "##"
				pwrec=filegetprodwhse(e$,WHC,"=",1,pwkey$,pw.)
				if pwrec<=0 
					let pwrec=0
					clear pw.
				Endif
			  else
				let pwrec=0
			  Endif
		Else ! nonstk
			clear prod.
			clear pr.
			Prod.Desc1$=lp.LineDesc1$
			Prod.Desc2$=lp.LineDesc2$
			prk$=lp.VendItemCode$
			Prodrec=1
			! set up vars for convert
			PR.pfu1[0]=lp.UMBase
			pr.pfu1[1]=lp.UMSell;pr.pfu2[0]=lp.SellUnitFactor
			if lp.UMPrice<>lp.UMSell
				pr.pfu1[2]=lp.UMPrice;pr.pfu2[1]=lp.PriceUnitFactor
			Endif
			if lp.UMCost<>lp.umsell
				pr.pfu1[3]=lp.umcost;pr.pfu2[2]=lp.CostUnitFactor
			Endif
			pr.a[5]=lp.WgtFactor
			pr.a[6]=lp.UnitWgt
			if pr.a[5]<=0 let pr.a[5]=1
			if pr.a[6]<=0 let pr.a[6]=1
		Endif
		If Prodrec>0 ! endif a long ways down
			!gross profit %
			Let GP=(lp.unitprice-lp.unitcost)    ! was ABS() ???
			If lp.unitprice Then                     
				Let GPP=FNR((GP/lp.unitprice)*100)     
			Else                                   
				Let GPP=0                            
			Endif   
			!qty
			let lpbaseqty=lp.quantity
			if lp.quantity<>0                                                                     
				Let CNVTA=lp.quantity            !cost/price/qty                            
				Let CNVTU[0]=0                  !current unit                              
				Let CNVTU[1]=lp.UmSell         !desired unit                              
				Let CNVTU[2]=1                  !mode 1=qty 2=cost/price                   
				Let lp.quantity=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
			endif
			!net price  w/upcharge 
			if lp.unitprice<>0
				Let CNVTA=LP.unitprice            !cost/price/qty                           
				Let CNVTU[0]=0                  !current unit                             
				Let CNVTU[1]=lp.UmPrice         !desired unit                             
				Let CNVTU[2]=2                  !mode 1=qty 2=cost/price  
				Let LP.unitprice=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 
			endif
			! net cost w/upcharge
			if lp.unitcost<>0
				Let CNVTA=lp.unitcost            !cost/price/qty                           
				Let CNVTU[0]=0                  !current unit                             
				Let CNVTU[1]=lp.UmCost         !desired unit                             
				Let CNVTU[2]=2                  !mode 1=qty 2=cost/price  
				Let lp.unitcost=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
			endif
			
			!unit price  w/o upcharge
			if lp.lpunitprice>0
				Let CNVTA=lp.lpunitprice            !cost/price/qty                           
				Let CNVTU[0]=0                  !current unit                             
				Let CNVTU[1]=lp.UmPrice         !desired unit                             
				Let CNVTU[2]=2                  !mode 1=qty 2=cost/price                  
				Let lp.lpunitprice=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 
			ELSE
				LET lp.lpunitprice=LP.unitprice
			ENDIF
			! unit  cost w/o upcharge
			IF lp.lpunitcost>0
				Let CNVTA=lp.lpunitcost            !cost/price/qty                           
				Let CNVTU[0]=0                  !current unit                             
				Let CNVTU[1]=lp.UmCost         !desired unit                             
				Let CNVTU[2]=2                  !mode 1=qty 2=cost/price                  
				Let lp.lpunitcost=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
			else
				let lp.lpunitcost=lp.unitcost
			endif


			commKey$=lp.comdtycode$
			mode$="="
			let dir=1
			commRec=filegetcommhead(e$,cmc,mode$,dir,commKey$,cm.)
			if commrec<=0
				clear cm.
			endif
			!!! here is the price routine !!! For current price and current cost
			
			let fleptr[0,0]=CTLC
			let fleptr[1,0]=PRC    
			let fleptr[2,0]=WHC
			let fleptr[3,0]=CMC 
			let fleptr[4,0]=LPC
			let fleptr[5,0]=SPPC 
			let fleptr[6,0]=CHC 
			let fleptr[7,0]=CCC 
			let fleptr[8,0]=BTC
!
			let X2=CU.LpPpGrpCust
			if p61$[100,100]<>"Y" let x2=0
			If CU.AuthBuyList$="Y" Let X2=0
			If X2=CU.CustomerCode let x2=0
			if x2<1 or x2>999999 or Fra(X2) Let X2=0
			let fleptr[0,1]=X2 ! perm price group
			let fleptr[1,1]=Prodrec  !prod rec 
			let fleptr[2,1]=PWRec ! prdwhse rec
			let fleptr[3,1]=Commrec   
			let fleptr[4,1]=lprec        
			let fleptr[5,1]=0        
			let fleptr[6,1]=0        
			let fleptr[7,1]=0        
			let fleptr[8,1]=0        

			Clear specs[]  
			let specs[0]=0 ! mode
			let specs[1]=lpbaseqty ! base qty
		        
			If not(PR.A[5]) let PR.A[5]=1               
			let extweight=((PR.A[6]*specs[1])/PR.A[5])   
			let specs[2]=extweight               
			let specs[3]=lp.Custnum
			if p9$[32,32]<>"Y"
		        let specs[4]=-1 ! use main product record
			Else ! WHSE PRICING!! - we know whse
				if lp.whse let specs[4]=lp.Whse else let specs[4]=-1 ! use the same one
			Endif
			Today$=" ",Today$
			Today$[1,2]=Tim(8) Using "&&"             
			Today$[3,4]=Tim(9) Using "&&"
			Today$[5,6]=Tim(10) Using "&&"
			Let curdat=Today$
			let specs[5]=curdat   
			let specs[6]=0 ! department   
			let specs[7]=CU.pricetype  
			let specs[8]=1 ! default order type to 1  
			! get default price type cost for ot 1
			mat read #ptc,cu.pricetype,28;dft_cost;
			if not (dft_cost)
				let dft_cost=p60$[29,29]
			endif
			let specs[9]=dft_cost
			let specs[10]=0       
			let specs[11]=0       
			let specs[12]=0       

			let specs[13]=lp.umsell
			let specs[14]=lp.umprice
			let specs[15]=lp.umcost

			let specs[16]=0		
			let specs[17]=0 
			let specs[18]=0 
			let specs[19]=0 

			If not(nonStk)
			  ! Call "price.dl4",fleptr[],specs[],msgdesc$,intco,debug,dlog$
			  Call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$,debug,dlog$)
			Else
				clear specs[]
			Endif
			!if RTrim$(lp.Prod$)="CP0179110004"
			!call programdump("tmp/pdlpl.txt!","")
			!endif
			if not(specs[0]) ! no errors                     
				let currentprice=0
				basecurrentprice=0
				if specs[23]

					Let CNVTA=specs[23]             !cost/price/qty                    
					Let CNVTU[0]=0                  !current unit                      
					Let CNVTU[1]=lp.umprice       !desired unit                      
					Let CNVTU[2]=2                  !mode 1=qty 2=cost/price           
					Let currentprice=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
					basecurrentprice=specs[23]
				endif
				If specs[40] ! add upcharge to cost
					if specs[40]<0
						let specs[17]=specs[17]+abs(specs[40])
					else
						let specs[17]=specs[17]+(specs[17]*(specs[40]/100))
					endif
				endif
				let currentcost=0
				basecurrentcost=0
				if specs[17]
				
					Let CNVTA=specs[17]             !cost/price/qty                    
					Let CNVTU[0]=0                  !current unit                      
					Let CNVTU[1]=lp.umcost! was lp.umprice       !desired unit                      
					Let CNVTU[2]=2                  !mode 1=qty 2=cost/price  
					Let CurrentCOST=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
					basecurrentcost=specs[17]
				endif
			else
				let currentprice=0
				basecurrentprice=0
				let currentcost=0
				basecurrentcost=0
			endif
			!!! end Price routine 
                  

			!!! add to the list !!!

			WebStr$=rtrim$(cm.CodeDescription$),fdel$
			if not(nonStk) or (nonstk and Trim$(prk$)="")
			WebStr$=WebStr$,lp.prod$,fdel$
			Else
				webstr$=webstr$,Trim$(prk$),fdel$
			Endif
			WebStr$=WebStr$,RTrim$(prod.Desc1$),fdel$
			WebStr$=WebStr$,RTrim$(prod.Desc2$),fdel$
			let tmp$=XUNIT$(lp.umprice,CCC)
			if not(nonstk)
				Webstr$=WebStr$,LTrim$(currentprice using Emask$),"/",tmp$,fdel$ 
			Else
				webstr$=webstr$,"0/",tmp$,fdel$
			Endif
			let tmp$=XUNIT$(lp.umcost,CCC)
			If Cost_lev[1]=0 ! no cost
				webstr$=webstr$,"",fdel$
			Else
			if not(nonstk)
			WebStr$=WebStr$,LTrim$(currentcost using Emask$),"/",tmp$,fdel$
			Else
				webstr$=webstr$,"0/",tmp$,fdel$
			Endif
			endif
			!! last price !!
			let tmp$=XUNIT$(lp.umprice,CCC)
			WebStr$=WebStr$,LTrim$(LP.unitprice using Emask$),"/",tmp$,fdel$ ! price
			!! last cost !! 
			let tmp$=XUNIT$(lp.umcost,CCC)
			If Cost_lev[1]=0 ! no cost
				webstr$=webstr$,"",fdel$,"",fdel$
			Else
				WebStr$=WebStr$,LTrim$(LP.unitcost using Emask$),"/",tmp$,fdel$            
				Webstr$=Webstr$,Ltrim$(gpp using "----#.##%"),fdel$ ! last gp$
			endif
			if lp.OrdDate
				tmp$=Pdate$(LP.OrdDate)
			else
				let tmp$=""
			endif
			Webstr$=Webstr$,tmp$,fdel$
			 
			! last quantity
			let tmp$=XUNIT$(lp.umsell,CCC)
			WebStr$=WebStr$,LTrim$(LP.quantity using Qmask$),"/",tmp$,fdel$
			
	
			Webstr$=WebStr$,Ltrim$(lp.freqsold using "######"),fdel$
			let currentgp=0! currentgp
			if basecurrentprice<>0
				let currentgp=(((basecurrentprice-basecurrentcost)/basecurrentprice)*100)
			endif
			if currentgp<(-9999.99) let currentgp=-9999.99
			if currentgp>(9999.99) let currentgp=9999.99
			If Cost_lev[1]=0 ! no cost
				webstr$=webstr$,"",fdel$
			else
				Webstr$=Webstr$,Ltrim$(currentgp using "----#.##%"),fdel$ ! currentgp %
			endif
			! added - get whse avail (as done in libprod)
			allwhses=0;qtyavl=0;owavl=0
			If not(nonstk)
				prod$=lp.prod$;whse=dfwh
				If DFWH Let QtyAvl=getwhavail(e$,intco,WHC,prod$,whse)
				If Not(Whse) Let QtyAvl=getpravail(e$,intco,prc,prod$)
				if not(allwhses) and qtyavl<=0 ! see if avail elsewhere
					MPAVL=getpravail(e$,intco,prc,prod$)
					if mpavl>0 ! speed up - none total - no look
						for x=1 to 99
						if x<>whse
							OWAVL=getwhavail(e$,intco,WHC,prod$,x)
							if owavl>0 let owavl=x;x=99 ! done
						Endif
						Next X
					Endif
				Endif
				!if TScan=1 and pw.DNReordFlg=1 and QtyAvl<=0 let RSPROD=1 ! goto nxtkey! dnr and no avail from sales order
				!if source<>381
				!	if TScan=2 and pw.DNReordFlg=1 goto nxtkey! dnr from PO 
				!endif
			Else ! nonstock has no stock ever
				qtyavl=0;owavl=0
			ENDIF
			let SUM$=XUNIT$(lp.umsell,CCC)
				CNVTU[0]=0 ! convert from rcd #, 0=base
				CNVTU[1]=lp.umsell ! from rcd#,convert um code to record #
				CNVTU[2]=1 ! 2= convert cost/price, 1=convert qty
				CNVTA=QtyAvl
				Amount=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
				Let tmp$=LTrim$(Amount Using QMask$)+"/"+SUM$
				! TEST IF AVAIL <0 ACCEPTED
				IF amount<=0 ! TSCAN=0 And amount<=0 ! std search only?
					if owavl and not(allwhses) let tmp$="Avail WH"+Str$(OWAVL)
				Endif
				WebStr$=WebStr$,LTrim$(tmp$),fdel$
			! END OF ADDED CODE FOR WHSE AVAIL!
			List$[row]=WebStr$
			row=row+1
			if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
		Endif ! prodrec>0
	Loop
endif ! custrec>0
Goto Outend:
!********* not used for this *******
			!mtd  sales units  
			if lp.mtdsalesunits<>0
				Let CNVTA=lp.mtdsalesunits             !cost/price/qty                          
				Let CNVTU[0]=0                  !current unit                            
				Let CNVTU[1]=lp.umsell         !desired unit                            
				Let CNVTU[2]=1                  !mode 1=qty 2=cost/price                 
				Let lp.mtdsalesunits=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
			endif
			!ytd  sales units 
			if lp.ytdsalesunits<>0
				Let CNVTA=lp.ytdsalesunits             !cost/price/qty                          
				Let CNVTU[0]=0                  !current unit                            
				Let CNVTU[1]=lp.umsell         !desired unit                            
				Let CNVTU[2]=1                  !mode 1=qty 2=cost/price                 
				Let lp.ytdsalesunits=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
			endif

			!last year units 
			if lp.lyrsalesunits<>0
				Let CNVTA=lp.lyrsalesunits           !cost/price/qty                          
				Let CNVTU[0]=0                  !current unit                            
				Let CNVTU[1]=lp.umsell         !desired unit                            
				Let CNVTU[2]=1                  !mode 1=qty 2=cost/price                 
				Let lp.lyrsalesunits=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG)
			endif	
			!permprice
			if lp.permprice
				Let CNVTA=lp.permprice            !cost/price/qty                            
				Let CNVTU[0]=0                  !current unit                              
				Let CNVTU[1]=lp.umprice         !desired unit                              
				Let CNVTU[2]=2                  !mode 1=qty 2=cost/price                   
				Let lp.permprice=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 
			endif
			!permcost  
			if lp.permcost
				Let CNVTA=lp.permcost            !cost/price/qty                            
				Let CNVTU[0]=0                  !current unit                              
				Let CNVTU[1]=lp.umcost         !desired unit                              
				Let CNVTU[2]=2                  !mode 1=qty 2=cost/price                   
				Let lp.permcost=XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],CTLC,FLAG) 
			endif
OutEnd: !=============================================================
	 Close #CTLC,#LPC,#PRC,#CMC,#CUC,#SMC,#CCC
	 close #CHC,#PTC,#SPPC,#WHC,#BTC,#WIC,#CSC,#SIC
	List$[row]=esdel$ ! end of section

	msg$="doing...end of "+pgmName$ \ Call updatelog(debug)

Exit Sub
Else
!   Temp$=""
!   Call errTrap(pgmName$)
include "src/callsuberr.inc"
End Try

Sub updatelog(debug)                                        
  If not(debug) Exit Sub                                    
  System "echo ''" + msc$(0) + " " + msg$ + "'' >> " + dlog$
End Sub       

Sub errTrap(pgmName$)
  msg$="error...",Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ",pgmName$
  Call updatelog(1)
End Sub

ss=0
!ss=spc(10)
End Sub

