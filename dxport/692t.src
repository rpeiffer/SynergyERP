! >>> Program 692t
!
! description  Physical Book  -- Tag by Vendor
! loadsave -w -n 100,10 -o prog/dxport/692t.dl4 src/692t.src
!
! 1.0 mm/dd/yyyy change??
! 
include "src/copyright.inc"


Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP 24, 2009  12:37:43
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/mx/mx692a.src (univ2) [bill] {23696}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub FindF,InpBuf,String,Time,MiscStr
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem MX692A - PHYSICAL BOOK - AUTO ASSIGN/SET UP TAGS IN PHYSINV
Rem AUTHOR: DAVE  APR 29, 1987
Rem LAST UPDATE:  REK 1/92 WAREHOUSE CHOOSE
Try
!If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim fname$[50],groupid$[1],filename$[50]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[2000],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim j$[40],K98$[50]
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
COMP=INTCo
Close #1 ! getsession open cntrl# as READONLY
j$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Dim P$[156],P0$[66],LOT$[12],LOCMASK$[6]
Dim 1%,EVEN[1],RASL[5],w0[3],2%,A3,B[24],WH,STAGNUM,TAGNUM
Dim 3%,A[33],A2[7],R8,R[99],PWGT,w3[24]
Dim K10$[20],TIER$[1],PR$[1],1%,PRIM,WL1[2],WLA[7],2%,BIN
Dim SUNIT$[4],V$[30],U5$[50],W2$[20],BUNIT$[4],K8$[50],CK8$[50],K7$[50]
Dim I$[30],P1$[26],P2$[28],PL$[30],F$[60],FILE$[60],K11$[40],L11$[5],P61$[256]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[40],ARDATE$[8],P9$[50],WH$[30]
Dim 1%,PFU1[10],F,X1,2%,X2,3%,J,X3,T9[20],L1$[20],L2$[20],L3$[30],L4$[30]
Dim 3%,PFU2[6],P1[2]
Dim 3%,REC_PRODGRP,PRODGRP$[3],WHMISC2[7]
Rem {begin src/inc/dim.prodgrp.i}
Dim PGDESC$[30]
Dim 1%,PGOT[38],PGPO[6],PG1[3]
Rem {end dim.prodgrp.i}
Dim K1$[50],K2$[20],K3$[20],K4$[5],X$[10],T9$[26],A1$[50],A2$[50],V4$[50]
Dim 2%,W2[9],LOC$[30],PLOC$[30],LINE_$[52],K5$[50],PA2$[30],TYP$[1],VUNIT$[4]
Dim 2%,W7[14],3%
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
COMP=INTCo
Close #1 ! getsession open cntrl# as READONLY
j$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
! Signal 3,5
LINE_$ = "_",LINE_$
If RASL If P61$[45,45] = "Y"
	Call Dxget("STKCHK",tmp$)
	If UCase$(RTrim$(tmp$)) <> "Y" 
		eflag=eflag+1
		let message$="Please Verify That Allocated Orders has been Removed from Stock "
		goto outend:
	endif
ENDIF
REC_UAC = GetUIDRec(e$,IntCo,Userid$)
FILENAME$=rec_uac Using "6/SORTWORK&&&&&&"
Try close #98 else rem 
tmp$ = "[1:1] files/",filename$,"!"
Try
	Build #98,tmp$
else
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
end try
R[99] = 7 \ Search #98,0,1;F$,R[99],E ! increase to 7w/14c - was 2w/4c
if e<>0
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
endif
R[99] = 1 \ Search #98,0,0;F$,R[99],E
if e<>0
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
endif
R[99] = 0 \ Search #98,1,0;F$,R[99],E
if e<>0
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
endif
tmp$ = "files/",filename$," <666>"
Modify tmp$                       
try
	close #98
else
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
end try
try
	open #98,filename$
else
	LET EFLAG=EFLAG+1
	LET MESSAGE$="Error in Building the Sort File "
	goto outend:
end try
For J = 2 To 11
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,Abs(J1);J$;
  If J1 <= 0 Ropen #J,J$ Else Open #J,J$
L_830: Next J
Data "-1792","-1728","-2400","-1744","-208","704","-2528","-1","-2736","-2288"
Mat Read #1,0,100;ARDATE$;
!X2 = Spc(5);F$ = Int((X2 - Int(X2 / 16384) * 16384) / 64) Using "2/prodgrp#"
F$ = coid Using "2/prodgrp#"
CH_PRODGRP = 13
Ropen #CH_PRODGRP,F$
LET K11$="MACH"
search #11,2,1;k11$,r[11],e
if not(e)
	search #98,4,1;k11$,r[11],e
	if e gosub err_search:
endif
LET K11$="LABR"
search #11,2,1;k11$,r[11],e
if not(e)
	search #98,4,1;k11$,r[11],e
	if e gosub err_search:
endif
LET K11$="TIME"
search #11,2,1;k11$,r[11],e
if not(e)
	search #98,4,1;k11$,r[11],e
	if e gosub err_search:
endif
Call Dxget("COMMCODE",tmp$)
iF RTRIM$(TMP$)<>""                                                                                           
	X = 1                                                                     
	NextType: !  
	x$=""
	X2 = 0 \ Let X$ = tmp$ To "," : X2 
	if rtrim$(x$)="" goto exittype:
	IF LEN(X$)>0 AND LEN(X$)<5
		LET K11$=" ",K11$
		LET K11$[1,LEN (X$)] = X$
		k11$[5]=""
		SEARCH #11,2,1;K11$,R[11],E
		IF NOT(E)
			search #98,4,1;k11$,r[11],e
			if e>1 gosub err_search: !user gets droplist & can duplicate TIME, etc
			cflg=1
		endif
	endif                                           
        If X2 Let tmp$ = tmp$[X2 + 1]
	if x2 Goto NextType                
	ExitType: !                                                    
endif                                    


Read #1,3;CNAME$;
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
!If Err 0 Let J8 = Spc(8)
J8 = 0 !\ J9 = Chf(0)
!If Err 0 Gosub ERR_TRAP
!If J8 If J8 <> 49 Goto ERR_TRAP
!J9 = 60 \ If J8 Let J9 = 20
J9=60
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
!L_900: Print 'CS';@0,0;"AUTO - ASSIGN TAG NUMBERS";@50,0;"MX692A"
!!Window On 
!Gosub L_10000
!Print @0,6;'CE';
!L_910: Print @0,6;"SORT BY:  1: VENDOR,  2: LOCATION, or  3: PRODUCT CODE   ";
!SORT = 0
!Input ""L3$ \ If L3$ = "E" Goto OUTEND
!X2 = L3$ \ If X2 < 1 Or X2 > 3 Goto L_900
!SORT = X2
!L_960: If Not(SORT) Goto L_910
SORT=1 ! VENDOR
L3$ = " ",L3$ \ L4$ = " ",L4$ \ I$ = " ",I$
!If SORT = 3 Goto L_1200
!If SORT = 1 Print @0,7;"ENTER STARTING VENDOR,  <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!If SORT = 2 Print @0,7;"ENTER STARTING LOCATION,  <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input ""I$ \ If I$ = "E" Goto OUTEND
!L3$[1,Len(I$)] = I$[1,Len(I$)]
!I$ = " ",I$
!If SORT = 2 Print @6,8;"ENDING   LOCATION,  <CR> FOR LAST,   E: TO EXIT : ";'CL';
!If SORT = 1 Print @6,8;"ENDING   VENDOR,  <CR> FOR LAST,   E: TO EXIT : ";'CL';
!Input ""I$ \ If I$ = "E" Goto OUTEND
!L4$[1,Len(I$)] = I$[1,Len(I$)]
!If L4$ = "" Let L4$ = "}}}}}}}}}}}}}}}}"
!If L3$ <= L4$ Goto L_1120
!Print @0,12;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_960
Call Dxget("SVEND",tmp$)
let tmp3=tmp$
if tmp3<0 or tmp3>999999
	let eflag=eflag+1
	let message$=message$+" Invalid Starting Vendor Code Entered "
endif
let l3$=tmp3 using "######"
Call Dxget("EVEND",tmp$)
let tmp3=tmp$ \ if tmp$="" let tmp3=999999
if tmp3<0 or tmp3>999999
	let eflag=eflag+1
	let message$=message$+" Invalid Ending Code Vendor Code Entered "
endif
let l4$=tmp3 using "######"
if l3$>l4$
	let eflag=eflag+1
	let message$=message$+" Ending Vendor Code Must Be Greater than Starting Vendor Code  "
endif
L_1120: Rem
!If SORT = 2
!L_1150: Print @0,9;"ENTER NUMBER OF CHARACTERS TO PAGE BREAK ON LOCATION (0-6) ";'CE';
!  Input ""U5$
!  SORTNUM = U5$
!  If SORTNUM < 0 Or SORTNUM > 6 Goto L_1150
!End If 
!L_1200: Rem GET RANGES
!If SORT = 2 Let L1$ = " ",L1$;L2$ = "}",L2$ \ Goto L_1270
!Print @0,11;"ENTER STARTING PRODUCT CODE,  <CR> FOR FIRST,  E: TO EXIT : ";'CE';
!Input ""L1$ \ If L1$ = "E" Goto OUTEND
!Print @6,12;"ENDING   PRODUCT CODE,  <CR> FOR LAST,   E: TO EXIT : ";'CL';
!Input ""L2$ \ If L2$ = "E" Goto OUTEND
!If L2$ = "" Let L2$ = "}}}}}}}}}}}}}}}}"
!L_1270: If L1$ <= L2$ Goto L_1290
!Print @0,15;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1200
l1$=" ",l1$;l2$="}",l2$
Call Dxget("SPROD",tmp$)
if rtrim$(tmp$)<>""
	let l1$=tmp$
endif
Call Dxget("EPROD",tmp$)
if rtrim$(tmp$)<>""
	let l2$=tmp$+"}}}}}}}}}}}}"
endif
if l1$>l2$
	let eflag=eflag+1
	let message$=message$+" Ending Product Code Must Be Greater than Starting Product Code  "
endif
L_1290: L1$ = L1$,"            " \ L2$ = L2$,"            "
!L_1320: Print @0,13;"ENTER WAREHOUSE TO PRINT FOR OR  E: TO EXIT : ";'CE';
!Input Len 16386;""J3$ \ If J3$ = "E" Goto OUTEND
!WH = J3$ \ If WH < 1 Or WH > 99 Goto L_1320
Call dxget("WHSE",TMP$) ! whse 
wh= TMP$                    
If wh < 1 Or wh > 99   
	let eflag=eflag+1
	let message$=message$+" Invalid Warehouse Entered "
else
	!K10$ = " ",K10$;K10$[1,2] = WH Using "##"
	!Search #10,2,1;K10$,R10,E !  \ If E > 1 Gosub err_search
	!if e<>0
	!	let eflag=eflag+1
	!	let message$="Warehouse "+str$(wh)+" Not on File "
	!endif
endif
if not(eflag)
	If P9$[41,41] = "W" Call "CHKWRASL",WH,RASL[]
	!If SORT = 2 Print @0,14;"THE LOCATION WILL BE THE TAG NUMBER.";
	!L_1350: If SORT = 2 Goto L_1520
endif
Call dxget("STAG",TMP$) ! STARTING TAG
IF TMP$="" LET TMP$="1"
LET J3$=RTRIM$(TMP$)
IF LEN(J3$)>5
	let eflag=eflag+1
	let message$=message$+" Invalid Starting Tag Number Entered " 
endif
let stagnum=j3$
If STAGNUM > 0 If STAGNUM < 900000 If Not(Fra(STAGNUM)) 
	! rem ok
else
	let eflag=eflag+1
	let message$="TAG MUST BE IN RANGE OF 1 TO 900000"
endif
                  
!Print @0,14;'CE';"ENTER STARTING TAG #,  <CR>: ONE,  E: TO EXIT:  ";
!Input ""J3$ \ If J3$ = "E" Goto OUTEND
!If Len(J3$) > 5 Goto L_1350
!If J3$ = "" Let J3$ = "1"
!STAGNUM = J3$
!If STAGNUM > 0 If STAGNUM < 900000 If Not(Fra(STAGNUM)) Goto L_1440
!Print @0,20;'RB CE';"TAG MUST BE IN RANGE OF 1 TO 900000!"; \ Signal 3,20
!Goto L_1350
L_1440: Rem.
A2$ = " ",A2$
A2$[1,2] = WH Using "##";A2$[3] = STAGNUM Using "&&&&&&"
Search #7,2,3;A2$,R7,E \ If E > 1 Gosub ERR_SEARCH
If not(e)
!Print @0,21;'RB CE';"THERE ARE TAG NUMBERS ALREADY USED WITH THAT #!";
!Signal 3,20
!Goto L_1350
	let eflag=eflag+1
	let message$=message$+"Transaction with this Tag Number already on file"
endif
L_1520: Rem MAKE/BUY/ALL (for Thermo, of course)
If SORT <> 3 Let TYP$ = "" \ Goto L_1600
!L_1530: Print @0,15;'CE';"PRODUCT TYPE:  1: Make  2: Buy  3: All  E: exit   ";
!Input ""J3$ \ If J3$ = "E" Goto OUTEND
!X2 = J3$ \ If X2 < 1 Or X2 > 3 Or Fra(X2) Goto L_1530
!Call dxget("PRODTYPE",TMP$) ! STARTING TAG
!LET X2=TMP$
!IF X2<1 OR X2>3
!	let eflag=eflag+1
!	let message$=message$+"Invalid Product Type Entered"
!endif
!TYP$ = "" \ If X2 = 1 Let TYP$ = "M"
!If X2 = 2 Let TYP$ = "B"
L_1600: LOCSORT = 0
!If Not(RASL) Or SORT <> 2 Goto L_1685
!K10$ = " ",K10$;K10$[1,2] = WH Using "##";K10$[5,5] = "@"
!Search #10,2,1;K10$,R10,E \ If E > 1 Gosub ERR_SEARCH
!If E = 1 Goto L_1635
!Mat Read #10,R10,40;WL1;
!Mat Read #10,R10,76;WLA;
!L_1635: Rem.  RASL SORT OPTION
!If WL1[1] < 2 Or WL1[1] > 3 Let WL1[1] = 2
!If WL1[2] < 2 Or WL1[2] > 3 Or WL1[2] = WL1[1] Let WL1[1] = 2;WL1[2] = 3
!If WLA[3] + WLA[4] + WLA[5] <> 6 Or Not(WLA[3]) Or Not(WLA[4]) Or Not(WLA[5]) Let WLA[3] = 2;WLA[4] = 3;WLA[4] = 1
!LOCMASK$ = ""
!For I = 1 To WLA[3] \ LOCMASK$ = LOCMASK$,"a" \ Next I
!If WL1[1] = 2
!  For I = 1 To WLA[4] \ LOCMASK$ = LOCMASK$,"b" \ Next I
!  For I = 1 To WLA[5] \ LOCMASK$ = LOCMASK$,"t" \ Next I
!Else 
!  For I = 1 To WLA[5] \ LOCMASK$ = LOCMASK$,"t" \ Next I
!  For I = 1 To WLA[4] \ LOCMASK$ = LOCMASK$,"b" \ Next I
!End If 
!L_1650: Print @0,16;'CL';"PRINT BOOK AISLES:  <CR>: AS IS ";
!Print LOCMASK$;
!Print ", TIER/BIN  1: NUMERIC,  2: ODDS/EVENS ";
!Input Len 16385;""J3$ \ If J3$ = "E" Goto OUTEND
!LOCSORT = J3$
!If LOCSORT < 0 Or LOCSORT > 2 Or Fra(LOCSORT) Goto L_1650
L_1685: Rem --- Inventory Class 
!Print @0,17;"ENTER STARTING INVENTORY CLASS   ";
!Input Len 16384 + 2;""X$
!SICLASS = X$
!Print @0,18;"        ENDING INVENTORY CLASS   ";
!Input Len 16384 + 2;""X$
!X2 = X$
!If Len(X$) = 0 Let X2 = 99
!If X2 < SICLASS
!  Print @0,22;'RB CE';"INVALID RANGE!";
!  Signal 3,15
!  Goto L_1685
!End If 
!EICLASS = X2
!Print Using "###";@32,17;SICLASS;@32,18;EICLASS;
LET SICLASS=0;EICLASS=99
Call Dxget("SICLASS",tmp$)
LET SICLASS=TMP$
If SICLASS < 0 Or SICLASS > 99   
	let eflag=eflag+1
	let message$=message$+" Invalid Starting Inventory Class Entered "
endif
Call Dxget("EICLASS",tmp$)
LET EICLASS=TMP$ \ if tmp$="" let eiclass=99
If EICLASS < 0 Or EICLASS > 99   
	let eflag=eflag+1
	let message$=message$+" Invalid Ending Inventory Class Entered "
endif
if siclass>eiclass
	let eflag=eflag+1
	let message$=message$+" Ending Inventory Class Must Be Greater than Starting "
endif
!RPTTYPE: Rem DETAIL/SUMMARY
!Print @0,19;'CE';"PRINT IN DETAIL (WIDE FORMAT) OR SUMMARY (NARROW FORMAT)? (D/S/E)   ";
!Input ""J3$ \ If J3$ = "E" Goto OUTEND
!If J3$ <> "S" If J3$ <> "D" Goto RPTTYPE
!DETL = 0 \ If J3$ = "D" Let DETL = 1
 
TAGNUM = STAGNUM
!FINALQ: Rem "std
!Print @0,22;'CE';"SELECT  P: print  R: reselect all  E: exit   ";
!Input Len 16384 + 1;""J3$ \ Call String(1,J3$)
!If J3$ = "E" Goto OUTEND
!If J3$ = "R" Goto L_900
!If J3$ <> "P" Goto FINALQ
Call Dxget("PRTOPT",tmp$)
if rtrim$(tmp$)="D"
	let altf=0
	let detl=1
	goto starthere:
endif
if rtrim$(tmp$)="S"
	let altf=0
	let detl=0
	goto starthere:
endif
let eflag=eflag+1
let message$=message$+"Invalid Print Option Selected "
starthere: ! start update here
IF EFLAG<>0 GOTO OUTEND:
Gosub L_8000
If SORT = 1 Gosub L_6500
If SORT = 2 If RASL If LOCSORT Gosub L_6600
K1$ = " ",K1$
K3$ = " ",K3$
J1 = 90 \ J2 = 0
!Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
!If J8 Print 'CS';
!If Err 0 Gosub ERR_ESCAPE
L_2000: Search #9,3,1;K1$,R1,E
If E Goto L_9100
If SORT = 2 And LOCSORT Let EVEN[1] = K1$[2 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5]]
If SORT = 2 If RASL If LOCSORT If PLOC$ = "" Let PLOC$[1,10] = K1$[21,26],"     "
If SORT = 2 If PLOC$ = "" Let PLOC$[1,10] = K1$[3,8]
If SORT = 1 Let VEND = K1$[3,8]
If SORT = 1 If Not(PVEND) Let PVEND = VEND
If SORT = 1 If PVEND <> VEND Let J1 = 99 \ PVEND = VEND
If SORT = 2 Let LOC$ = " ",LOC$ \ LOC$[1,6] = K1$[3,8]
If SORT = 2 If RASL If LOCSORT Let LOC$ = " ",LOC$;LOC$[1,6] = K1$[21,26]
If SORT = 2 If SORTNUM If PLOC$[1,SORTNUM] <> LOC$[1,SORTNUM] Let J1 = 99;PLOC$ = LOC$
If SORT = 2 And LOCSORT And EVEN[0] <> EVEN[1] Let J1 = 99;EVEN[0] = EVEN[1]
Mat Read #2,R1,0;P$;
If TYP$ <> "" If TYP$ <> P$[139,139] Goto L_2000
Mat Read #2,R1,156;B;
Mat Read #2,R1,256;A;
Mat Read #2,R1,460;A2;
Mat Read #2,R1,508;A3;
Mat Read #2,R1,512;PFU1;
Mat Read #2,R1,554;PFU2;
Mat Read #2,R1,944;PA2$;
If PFU1[8] > 0 Mat Read #3,PFU1[8],10;SUNIT$;
If PFU1[8] = -1 Let SUNIT$ = "CWT"
For X9 = 0 To 7
  If PFU1[X9] = PFU1[8] Goto L_2076
Next X9
X9 = 0
L_2076: If X9 Let FACTOR = PFU2[X9 - 1] Else Let FACTOR = 1
LOTCNTL = 0 \ If P$[113,113] = "Y" Let LOTCNTL = 9
If P9$[1,1] = "N" Let LOTCNTL = 0
If P9$[1,1] = "Y" Let LOTCNTL = 9
If LOTCNTL Gosub L_3500
PL$ = " ",PL$ \ PR$ = " "
PL$[1,12] = P$[140,151]
PL$[13,14] = WH Using "##"
PL$[15,20] = LOC$[1,6]
Search #6,2,1;PL$,R6,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_2150
Mat Read #6,R6,20;PRIM;
If PRIM Let PR$ = "P"
L_2150: Gosub L_3000
Gosub L_5800
Gosub L_5000
Gosub L_2200
Goto L_2000
L_2200: Rem TOTALS CALC
Return 
L_3000: Rem VENDOR
Gosub L_8180
V$ = " ",V$
V4$ = " ",V4$
V4$ = B[24] Using "######"
Search #4,2,1;V4$,R4,E
If E And B[24] Let V$ = "**** VENDOR NOT ON FILE ****" \ Return 
If E And Not(B[24]) Let V$ = "*** VENDOR NOT SPECIFIED ***" \ Return 
Mat Read #4,R4,0;V$;
Return 
L_3500: Rem GET LOT CODE
R8 = K1$[27,32] \ If R8 <= 0 Goto L_3560
Mat Read #8,R8,0;P0$;
If P0$[1,12] <> K1$[9,20] Goto L_3560
LOT$ = P0$[13,24]
If LOT$[1,5] = "STOCK" Goto L_3560
Return 
L_3560: Rem NOT LOT \ STOCK LOT
LOT$ = " ",LOT$
Return 
Gosub L_5800
Print #0;"\15\** END **";
Return 
L_5000: Rem PRINT LINE
If Not(DETL) Goto L_5400
Print #0; Tab 1;P$[9,38];
Print #0; Tab 35;P$[93,112];
If Not(WH) Print #0; Tab 57;"____";
If WH Print #0; Using "##"; Tab 57;WH;
If SORT = 2 Print #0; Tab 62;LOC$[1,10];
If SORT = 3 Print #0; Tab 62;K1$[3,8];
If SORT = 1 Print #0; Tab 62;K1$[33,38];
If SORT = 2 Print #0; Tab 72;PR$;
Print #0; Tab 75;P$[140,151];
Print #0; Tab 89;"_________________________________________";
Print #0;""
Print #0; Tab 1;P$[63,92];
Print #0; Tab 35;V$[1,20];
Print #0; Tab 57;PA2$[13,27];
If SORT <> 2 If RASL Print #0; Tab 75;"LCTN= ";K1$[21,26];
BUNIT$ = "ERR."
If PFU1[0] > 0 Mat Read #3,PFU1[0],10;BUNIT$;
Print #0; Using " = ####### "; Tab 89;SUNIT$; Tab 94;FACTOR;
If FACTOR > 1 Print #0;BUNIT$;
Gosub L_5300 ! other UMS
If LOTCNTL
  Print #0; Tab 112;"LOT: ";LOT$
  J1 = J1 + 1
End If 
if not(rasl) ! only non-rasl
	prtlc=1 ! print - not sort
	gosub L_8400
	if lcprt print #0;"  " \ let j1=j1+1
	if j1>j9 gosub L_5800
Endif
Print #0;"  "
Return 
L_5300: Rem PRINT UP TO 3 VAILD UNITS
Print #0;" (";
For VUM = 0 To 3
  If PFU1[VUM] = 0 Goto L_5360
  If PFU1[VUM] > 0 Mat Read #3,PFU1[VUM],10;VUNIT$;
  Print #0;VUNIT$;" ";
L_5360: Next VUM
If P$[127,127] = "Y" Print #0;"LBS ";
Print #0;")"
Return 
L_5400: Rem SUMMARY VERSION
If SORT = 2 Print #0; Tab 0;LOC$[1,10];
If SORT = 3 Print #0; Tab 0;K1$[3,8];
If SORT = 1 Print #0; Tab 0;K1$[33,38];
If SORT = 2 Print #0; Tab 11;PR$;
Print #0; Tab 13;P$[140,151];
Print #0; Tab 26;P$[9,38];
Print #0; Tab 57;"______________________"
If SORT <> 2 If RASL Print #0; Tab 0;"LCTN: ";K1$[21,26];
If LOTCNTL Print #0; Tab 13;LOT$;
Print #0; Tab 26;P$[63,92];
Print #0; Using " = ####### "; Tab 57;SUNIT$;FACTOR;
If P$[127,127] = "Y" Print #0;" & LBS" Else Print #0;""
if not(rasl) ! only non-rasl
	prtlc=1 ! print - not sort
	gosub L_8400
	if lcprt print #0;"  " \ let j1=j1+1
	if j1>j9 gosub L_5800
Endif
Print #0;""
Return 
Print #0; Tab 65;LINE_$;
Print #0;" "
Return 
L_5800: Rem HEADINGS ROUTINE
J1 = J1 + 3 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 6
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
If Not(DETL) Goto L_5900
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;" - 692T - ";T9$;
Print #0; Tab 43;"P H Y S I C A L   I N V E N T O R Y   B O O K"
If RASL If P61$[45,45] = "Y"
  Print #0; Tab 1;"WARNING: REMOVE STOCK FOR ALLOCATED ORDERS BEFORE THE COUNT IS STARTED. IT WILL BE ADDED BY THE SYSTEM TO THE COUNT."
End If 
Print #0;"\15\";
If SORT = 1 Gosub L_3000
If SORT = 1 Print #0; Using "VENDOR ###### ";B[24];V$
Print #0; Tab 2;"DESCRIPTION "; Tab 35;"VENDOR ITEM"; Tab 57;"WHSE";
If SORT = 2 Print #0; Tab 62;"LOCATION";
If SORT <> 2 Print #0; Tab 62;"TAG NO.";
Print #0; Tab 75;"ITEM CODE"; Tab 95;"    STOCKING UNITS"
Print #0;" " \ Goto L_5990
L_5900: Print #0; Tab 0;ARDATE$; Tab 40 - (Len(CNAME$) / 2);CNAME$; Tab 70;"PAGE";J2
Print #0; Tab 0;" -692T- ";
Print #0; Tab 24;"PHYSICAL INVENTORY BOOK";
If WH Print #0;" - WHSE";WH Else Print #0;""
Print #0;"\15\";
If SORT = 1 Gosub L_3000
If SORT = 1 Print #0; Using "VENDOR ###### ";B[24];V$
Print #0; Tab 0;"LOCATION"; Tab 14;"ITEM CODE";
Print #0; Tab 27;"DESCRIPTION"; Tab 59;"STOCKING UNITS"
Print #0;" "
L_5990: Return 
L_6500: Rem THRU BY VENDOR SORT - SET UP PHYSINV
K1$ = " ",K1$
L_6510: Search #9,3,1;K1$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E = 2 Return 
A2$ = K1$
A2$[3,8] = TAGNUM Using "&&&&&&"
Search #9,5,1;K1$,R9,E \ If E Gosub ERR_SEARCH
K1$[33,38] = A2$[3,8]
Search #9,4,1;K1$,R9,E \ If E Gosub ERR_SEARCH
Gosub L_8800
TAGNUM = TAGNUM + 1
If TAGNUM > 999999 Let TAGNUM = 1
Goto L_6510
L_6600: Rem BACK THRU CHANGE PRINT SORT
K1$ = " ",K1$
L_6610: Search #9,3,1;K1$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E = 2 Return 
If E Gosub ERR_SEARCH
If K1$[1,1] = "Z" Return 
LOC$[1,6] = K1$[3,8] \ Gosub L_8300 \ Goto L_6670
A2$[9] = K1$[9]
Search #9,4,1;A2$,R9,E \ If E Gosub ERR_SEARCH
L_6670: Search #9,5,1;K1$,R1,E \ If E Gosub ERR_SEARCH
Goto L_6610
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_8000: Rem SORT BY LOCATION OR VENDOR
If SORT = 1 Let SVND = L3$;EVND = L4$
If SORT = 1 If Not(EVND) Let EVND = 999999
! Print @0,21;"SORTING, PLEASE WAIT...";'CE'; \ Signal 3,0
A1$ = " ",A1$
L_8050: Search #9,3,1;A1$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_8100
Search #9,5,1;A1$,R9,E \ If E Gosub ERR_SEARCH
Goto L_8050
L_8100: Rem INSERT SORTED KEY BY LOCATION OR VENDOR
LOC = 1
A1$ = " ",A1$ \ A1$[1,10] = L1$[1,10]
Search #2,2,1;A1$,R9,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_8140
L_8125: LOC = 1
Search #2,3,1;A1$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E Return 
L_8140: If A1$[1,12] = "Z ZZZZZZZZZZ" Goto L_8125
Mat Read #2,R9,0;P$; \ Mat Read #2,R9,156;B;
LOTCNTL = 0 \ If P$[113,113] = "Y" Let LOTCNTL = 9
If P9$[1,1] = "N" Let LOTCNTL = 0
If P9$[1,1] = "Y" Let LOTCNTL = 9
If A1$ > L2$[1,Len(A1$)] Return 
If A1$ < L1$[1,Len(A1$)] Goto L_8125
If TYP$ <> "" If TYP$ <> P$[139,139] Goto L_8125
Gosub L_8180
If Not(WHSEFOUND) Goto L_8125
If Not(PG1[1]) Goto L_8125
If w0[0]=1 and w3[0]<=0 goto l_8125 ! do not reorder = Y and no on hand skip
If SORT = 1 If SVND > B[24] Goto L_8125
If SORT = 1 If EVND < B[24] Goto L_8125
If W7[6] < SICLASS Or W7[6] > EICLASS Goto L_8125
K11$ = " ",K11$ \ K11$ = P$[152,155]
Search #98,2,1;K11$,R[11],E \ If E Goto L_8170
If K11$[1,4] = P$[152,155] Goto L_8125
L_8170: ! 
If SORT = 2 
	prtlc=0
	Gosub L_8400 \ Goto L_8200
ENDIF
Goto L_8200
L_8180: WH$ = " ",WH$;WH$ = P$[140,151];WH$[13,14] = WH Using "##"
For X = 0 To 9 \ W2[X] = 0 \ Next X
for x = 0 to 24
let w3[x]=0
next x
w0[0]=0
W7[6] = 0
Search #5,2,1;WH$,R8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E)
  Mat Read #5,R8,38;W2;
   Mat Read #5,r8,78;w3;
   mat read #5,r8,420;w0;
  Mat Read #5,R8,696;W7;
  If W2[3] Let B[24] = W2[3]
  WHSEFOUND = 1
  Mat Read #5,R8,846;WHMISC2;
  PG1[1] = 1
  If WHMISC2[0] ! prodgroup
    PRODGRP$ = WHMISC2[0] Using "###"
    Search #CH_PRODGRP,2,1;PRODGRP$,REC_PRODGRP,E
    If Not(E)
      Mat Read #CH_PRODGRP,REC_PRODGRP,122;PG1;
    End If 
  End If 
Else 
  WHSEFOUND = 0
End If 
Return 
L_8200: Rem.
If SORT = 2 Goto L_8270
R8 = 0
A2$ = " ",A2$
A2$[1,2] = WH Using "##"
If SORT = 1 Let A2$[3,8] = B[24] Using "######"
If SORT = 2 Let A2$[3,8] = LOC$[1,6]
A2$[9,20] = A1$[1,12]
L_8240: If Not(RASL) Let A2$[21,26] = "STOCK "
If Not(LOTCNTL) And Not(RASL) Gosub L_8700 Else Gosub L_8600
If R8 Goto L_8250
A2$[27] = ""
Search #9,2,1;A2$,R0,E \ If Not(E) Goto L_8290
If E > 1 Gosub ERR_SEARCH
L_8250: If SORT = 3 Let A2$[3,8] = TAGNUM Using "&&&&&&"
A2$[27,32] = R8 Using "######"
Search #9,4,1;A2$,R9,E \ If E > 1 Gosub ERR_SEARCH
If SORT <> 1 Gosub L_8800
If Not(CFLG) Goto L_8270
L_8270: If SORT <> 3 Goto L_8285
TAGNUM = TAGNUM + 1 \ If TAGNUM > 999999 Let TAGNUM = 1
L_8285: If SORT <> 2 If (LOTCNTL Or RASL) And R8 Goto L_8240
L_8290: Goto L_8125
L_8300: Rem LOCATION IS SORTED OTHER THAN KEY
BIN = 0;TIER$ = ""
If WL1[1] = 2
  BIN = LOC$[1 + WLA[3],WLA[3] + WLA[4]]
  TIER$ = LOC$[1 + WLA[3] + WLA[4],6]
End If 
If WL1[1] = 3
  TIER$ = LOC$[1 + WLA[3],WLA[3] + WLA[5]]
  BIN = LOC$[1 + WLA[3] + WLA[5],6]
End If 
If TIER$ = "" Or TIER$ = " " Goto L_8365
If BIN = 0 Or Fra(BIN) Goto L_8365
A2$ = " ",A2$;A2$[2,1 + WLA[3]] = LOC$[1,WLA[3]]
A2$[2 + WLA[3],1 + WLA[3] + WLA[5]] = TIER$
LOCMASK$ = ""
For I = 1 To WLA[4] \ LOCMASK$ = LOCMASK$,"#" \ Next I
A2$[2 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5]] = " "
A2$[3 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5] + WLA[4]] = BIN Using LOCMASK$
If LOCSORT <= 1 Goto L_8360
If Not(Fra(BIN / 2)) ! "EVENS=one, ODDS=blank (ODDS 1st)
  A2$[2 + WLA[3] + WLA[5],2 + WLA[3] + WLA[5]] = "1"
End If 
If LOCSORT = 3 If Not(Fra(BIN / 2)) Return 
If LOCSORT = 4 If Fra(BIN / 2) Return 
L_8360: Goto L_8370
L_8365: A2$ = " ",A2$;A2$[2,2] = "}";A2$[3,8] = LOC$[1,6]
L_8370: A2$[1,1] = "Z"
Return 1
L_8400: Rem ADD LOCATIONS IN PRODLOC
let lcprt=0
If RASL Let K5$ = " ",K5$;K5$[1,12] = A1$[1,12];K5$[13,14] = WH Using "##"
If RASL Goto L_8650
K5$ = " ",K5$
K5$[1,12] = A1$[1,12]
if prtlc let k5$[1,12]=P$[140,151]
K5$[13,14] = WH Using "##"
L_8450: Search #6,3,1;K5$,R5,E
If E Goto L_8590
if prtlc
	if k5$[1,12]<>p$[140,151] goto L_8590
else
If K5$[1,12] <> A1$[1,12] Goto L_8590
endif
TWH = K5$[13,14] \ If TWH <> WH Goto L_8590
L_8485: Rem "starting point for RASL LOCATIONS
LOC$[1,6] = K5$[15,20]
if not(rasl) and prtlc ! doesn't apply to RASL
	if loc$[1,6]>=l3$[1,6] and loc$[1,6]<=l4$[1,6] goto L_8450 ! in range
	k98$=" ",k98$;k98$="}"+p$[140,151]
	search #98,2,1;k98$,R,E
	if prtlc=2 let e=1 ! we're printing 1st time now!
	if not(e) ! already printed once - per ERG - print message
		if lcprt=0
			print #0;Tab 57;"OVERFLOWS PREVIOUSLY PRINTED"
			J1=J1+1;lcprt=lcprt+1
		ENDIF
		goto L_8590 ! done - no loop
	Else ! first time printing
		if lcprt=0 ! none printed yet - print Header
			Print #0;tab 57;"OTHER LOCATIONS:"
			j1=j1+1
		endif
		Print #0;Tab 57;loc$[1,6];" _______________"
		lcprt=lcprt+1;J1=J1+1;prtlc=2
		k98$=" ",k98$;k98$="}"+p$[140,151]
		search #98,4,1;k98$,R,E ! add so we know product printed once
		goto L_8450 ! next
	Endif ! 1st or other time
Endif 
If LOC$[1,6] > L4$[1,6] Goto L_8570
If LOC$[1,6] < L3$[1,6] Goto L_8570
If RASL If LOC$[1,4] = "NONE" Goto L_8570
A2$ = " ",A2$;R8 = 0
A2$[1,2] = WH Using "##"
A2$[3,8] = LOC$[1,6]
A2$[9,20] = A1$[1,12]
If Not(RASL) Let A2$[21,26] = "STOCK "
If Not(LOTCNTL) And Not(RASL) Gosub L_8700 Else Gosub L_8600
A2$[27] = ""
Search #9,2,1;A2$,R0,E \ If Not(E) Goto L_8560
A2$[27,32] = R8 Using "######"
Search #9,4,1;A2$,R9,E \ If E > 1 Gosub ERR_SEARCH
Gosub L_8800
L_8560: Rem IF (LOTCNTL OR RASL) AND R8 GOTO L_8542: ! "next lot code (R8=record)
L_8570: If RASL Goto L_8660
Goto L_8450
L_8590: let prtlc=0
Return 
L_8600: Rem GET LOT/LOCATION
If R8 Goto L_8620
R8 = 0;K8$ = " ",K8$
K8$[1,12] = P$[140,151];K8$[13,14] = WH Using "##"
If SORT = 2 If RASL Let K8$[15,20] = LOC$[1,6]
CK8$ = K8$
L_8620: Search #8,3,2;K8$,R8,E
If E Let R8 = 0
If K8$[1,14] <> CK8$[1,14] Let R8 = 0
If SORT = 2 If RASL If K8$[1,20] <> CK8$[1,20] Let R8 = 0
If R8
	if k8$[15,20]="NONE  " r8=0 \ goto L_8620
	Let A2$[21,26] = K8$[15,20] 
Else 
	Let A2$[21,26] = "STOCK "
endif
Return 
L_8650: Rem FOR RASL GET LOCATIONS
L_8660: Search #8,3,2;K5$,R5,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_8590
If K5$[1,12] <> A1$[1,12] Goto L_8590
TWH = K5$[13,14] \ If TWH <> WH Goto L_8590
Goto L_8485
L_8700: Rem FIND SPRODLOT
K8$ = " ",K8$
K8$[1,12] = P$[140,151];K8$[13,14] = WH Using "##"
If Not(RASL) Let K8$[15,20] = "STOCK "
CK8$ = K8$
Search #8,3,2;K8$,R8,E
If E Let R8 = 0
If K8$[1,20] <> CK8$[1,20] Let R8 = 0
Return 
L_8800: Rem BUILD PHYSINV FILE
Search #7,2,3;A2$,R7,E \ If Not(E) Return 
K7$ = " ",K7$
K7$[1,2] = A2$[1,2];K7$[3,8] = A2$[21,26];K7$[9,14] = A2$[3,8]
K7$[15,20] = R9 Using "######";K7$[21,26] = A2$[27,32]
Search #7,2,1;K7$,R7,E \ If Not(E) Return 
E = 2;R7 = 0
Search #7,1,0;K7$,R7,E
If E Gosub ERR_SEARCH
Search #7,4,3;A2$,R7,E \ If E > 1 Gosub ERR_SEARCH
If E Return 
K7$ = " ",K7$
K7$[1,2] = A2$[1,2];K7$[3,8] = A2$[21,26];K7$[9,14] = A2$[3,8]
K7$[15,20] = R9 Using "######";K7$[21,26] = A2$[27,32]
Search #7,4,1;K7$,R7,E
If E Gosub ERR_SEARCH
K7$ = " ",K7$
K7$[1,2] = A2$[1,2];K7$[3,8] = R9 Using "######";K7$[9,14] = A2$[21,26]
K7$[15,20] = A2$[27,32];K7$[21,26] = A2$[3,8]
Search #7,4,2;K7$,R7,E \ If E Gosub ERR_SEARCH
P1$ = " ",P1$;P1$[1,6] = A2$[3,8];P1$[7,18] = A2$[9,20];P1$[25,26] = A2$[1,2]
P2$ = " ",P2$;P2$[23,28] = A2$[21,26]
P2$[1,7] = WH Using "STOCK&&"
If R8 Let P2$[1,12] = K8$[21,32]
P1[0] = -99;P1[1] = 0;P1[2] = 0;PWGT = 0
Mat Write #7,R7,0;P1$;
Mat Write #7,R7,26;P1;
Mat Write #7,R7,44;P2$;
Mat Write #7,R7,72;PWGT;
Return 






ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/692t.se!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             




OUTEND: Rem "done
L_9000: Rem EXIT PROGRAM

L_9100: Rem END OF THIS RANGE
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	let message$="Process Complete"
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
