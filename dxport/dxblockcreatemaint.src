! -- dxblockcreatemaint.dl4
!
! Program to create block handler program for file maintenance
!
! 1.0 04/15/2008  new 
!
! loadsave -w -n 100,10 -o dxblockcreatemaint.dl4 src/dxblockcreatemaint.src
!
!include copyright, common libs, common intrinsics
! --- include "src/copyright4/5/2007"
!
!
declare intrinsic sub dxget,dxset,dxsave,dxclose
Declare Intrinsic Function findchannel,DateUsing$,Trim$,replace$
Declare Intrinsic Sub StringSearch
!
external lib "dxblockgeneral.lib" !general routines
declare external sub blocksuberr,blockmainerr,blockreadsystemfile,blockopenfiles
!
declare sub collist,inplist,droplistlist,butlists
!
include "src/dffiles.bsh"
include "src/dxblockfiles.bsh"
!
Dim config. as config
Dim blockconfig. as blockconfig

Dim BlockHdr. As BlockHdr, blockcol. as blockcol, blockinp. as blockinp
dim blockinplst. as blockinplst, blockbut. as blockbut
!
External Lib "dfgeneral.lib"
Declare External Sub ReadSystemFile,Openfiles
!
Declare Sub OpenSection,InputSection,Processdl4Section,CheckForIndex
!  
!
option string redim is legal
!
!
! ------------------------------------------------
!
!
! **main procedure
!
dim DH. as FileDefHdr
dim DF. as FileDefFields
dim DK. as FileDefKey
!
dim optiondir$[60],buttonlist$[5,50],nextlist$[5,100]
dim blockkey$[48]
!
Dim PathInc$[100],PathLib$[100],FileName$[50],CurFile$[50],BatFile$[100]
dim BegKey$[48],EndKey$[48],FileKey$[48],FieldKey$[48],DirKey$[48]
dim FileRec$[36],FieldRec$[50]
Dim e$[200],I8$[1],Field$[50]
dim requiredfield$[60],fieldname$[60],filename$[200]
dim tmp$[300],tmp1$[100],tmpold$[100],tmptext$[100],tmpkey$[48]
dim conditionstring$[100]
dim Blank$[100] \ Blank$=" ",Blank$
dim U$[100] \ U$="-",U$
!
Dim 1%,C[20],FileMat[3],FieldMat[2],tmpcnt,tmp1,loadsaveline$[200]
Dim 2%,tmp2
Dim 3%,tmp3
Dim 4%,tmp4
!
Try 
  !
  !
   !coming from xport button
  try call dxget("u_filekey",begkey$) else let xport=0 !filename  !??blockid
  !!!!!begkey$="" !tmp test
   if begkey$<>""
    endkey$=begkey$
    xport=1
   end if
  !
  if xport=0   call InputSection() \ if errflag chain "" ! input beg/end files
  !
  Call OpenSection() ! open files
  !
  PathLib$=config.srcdir$  !"src/" ! path for lib 'src' file
  !
  BlockKey$=BegKey$
  BlockRec=-2 
  search >= #c[0],1;BlockKey$
  Do
    try read record #c[0],BlockRec;blockhdr. else exit do
	if blockhdr.id$>EndKey$ exit do
	FileKey$=blockhdr.filename$
	FileRec=-2
	didit = 0
	search >= #dfc[0],1;FileKey$
   Do
    try read record #dfc[0],FileRec;DH. else exit do
    if DH.FileName$<>blockhdr.filename$ exit do
    !
    if lcase$(DH.Active$)="a" ! active file
      CurFile$=lcase$(rtrim$(replace$(DH.FileName$,".","")))! current file, used for file naming
      !
      if curfile$<>""
	   if xport=0 print "Processing ";blockhdr.id$;" ";curfile$
	   c[12]=findchannel() ! chan for 'dl4' src file
       !
	   Call CheckForIndex(I8$) ! checks if file is index, I8$="Y" has index
       call Processdl4Section(I8$) ! create .dl4 file
	   didit = 1
	  end if
	  !
	  exit do !did the active one
      !
    endif
	FileRec=-1
   Loop
   !
   if didit
   tmp$=config.codedir$,"block",curfile$,".dl4 ",config.codedir$,"backup/block",curfile$,".dl4",dateusing$(tim#(0),"YYYYMMDDHHNNSS")
   try
    duplicate tmp$ !make a backup copy
   else
    if spc(8)<>42 e$=spc(8),"Error trying to make backup copy of program! block",curfile$,".dl4"\error 10000
   end try
   !
   filename$=config.codedir$,"block",curfile$,".dl4"
   loadsaveline$="loadsave -w -n 10,10 -o ",filename$," ",pathlib$,"block",curfile$,".src"
   if xport=0 print #c[10];loadsaveline$
   !!if needed if xport=0 print #c[10];"chmod 664 ";filename$  !note, only works on unix    664=-rw-rw-r-- per ubs request (default is umask or -rw------)
   end if
   BlockRec=-1 ! next blockid record
  loop
  Close ! close files
  if xport
   e$='fx',"block",curfile$,".dl4 code successfully generated!"
   call dxset("s_msg",e$)
   buttonlist$[0]="Close"
   nextlist$[0]="close"
   call dxset("buttonlist",buttonlist$[])
   call dxset("nextlist",nextlist$[])
   try call dxget("s_view.optiondir",optiondir$) else let optiondir$="dxstd/"
   call dxset("output",optiondir$+"msg.html")
   call dxclose()
  end if
  if xport
   system loadsaveline$
   filename$=filename$," <664>"
   modify filename$ !protection on libfile*.lib
  else
   !was  tmp$="exec ",batfile$ chain tmp$  can swich back if needed,just doesn't work if xport
   tmp$=Batfile$," <700>" !make .bat executable
   !!if needed modify tmp$
   modify tmp$
   system batfile$  !run directly can do more than one (grouping)
  end if
  end

Else 
  ! error routine
  if xport
   if spc(8)<>10000 
    call blocksuberr(e$,spc(8),spc(10),msc$(2))
    !call programdump("")
   end if
   call blockmainerr(e$,spc(8),buttonlist$[],nextlist$[])
  else
   ;e$
   ;"error";spc(8);" at line ";spc(10)
   stop
  end if
End Try 

!
! ------------------------------------------------
Sub OpenSection()
!
Try
 ! need to get filenames from dfsystem.txt
 !
 !read system file parameters
 Call blockReadSystemFile(e$,blockconfig.)
 !
 ! open files
 !
 Call blockopenfiles(e$,blockconfig.,c[])
 !
 ! linked to df File Defs
   Dim 1%,dfc[20],3%
   ! need to get filenames from dfsystem.txt
   !
   !read dfsystem file parameters
   Call ReadSystemFile(e$,config.)
   !
   ! open dffiles
   !
   Call openfiles(e$,config.,dfc[])
 ! end df File Defs

  ! ds
  ! build text file to execute loadsave 
  if xport=0
   c[10]=findchannel()
   BatFile$="dfcreatestruct.bat"
   FileName$=BatFile$,"!"
   build #c[10],+ FileName$
  end if
  !
else
  if xport
   if spc(8)<>10000
    call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
    !call programdump("")
   end if
   error 10000
  else
   ;"error";spc(8);" at line ";spc(10)
   stop
  end if
end try
!
End Sub ! opensection
!
! ------------------------------------------------
Sub InputSection()
!
  !
  try
  BegInput:
  ;'cs';"Create 'dl4' maintenance handler program for block id"
  ;""
  ;""
  ;"Enter Block ID ";
  input ""BegKey$
  BegKey$=Ucase$(BegKey$)
  !if BegKey$="" goto BegInput
  if BegKey$="END" let errflag=1 \ exit sub
  ;""
  ;""
  if BegKey$ print "Block ID ='";BegKey$;"'" else print "All Files"
  CorrInput:
  ;""
  ;"Correct <Y/N> ";
  input ""tmp$
  tmp$=Ucase$(tmp$)
  if tmp$="END" let errflag=1 \ exit sub
  if tmp$="n" or tmp$="N" goto BegInput
  if tmp$<>"Y" goto CorrInput
  ;""
  if BegKey$ let EndKey$=BegKey$," " else let EndKey$="~"
else
  ;"error";spc(8);" at line ";spc(10)
   stop
end try
!
End Sub ! inputsection
!
! ------------------------------------------------
Sub CheckForIndex(I8$)
!
Try
  !
  I8$="N" ! not index file
  !
  DirKey$=DH.FileName$
  DirRec=-2
  search >= #dfc[2],1;DirKey$
  do
    try read record #dfc[2],DirRec;DK. else exit do
	if DK.FileName$=DH.FileName$ let I8$="Y"
	exit do
  loop
  !
else
  if xport
   if spc(8)<>10000
    call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
    !call programdump("")
   end if
   error 10000
  else
   ;"error";spc(8);" at line ";spc(10)
   stop
  end if
end try
!
end Sub ! checkforindex
!
! ------------------------------------------------
sub Processdl4Section(I8$)
!
try
  !
  ! build 'inc' file
  FileName$="block",curfile$,".src"
  tmp$=PathLib$,FileName$,"!"
  build #c[12],+ tmp$
  !
  ;#c[12];"! ";FileName$[1,len(FileName$)-4];".dl4"
  ;#c[12];"!"
  ;#c[12];"! supporting file handler for block ID ";blockkey$;" ";curfile$;" file maintenance routines for browser"
  ;#c[12];"!"
  ;#c[12];"! 1.0 generated by dxblockcreatemaint on ";DateUsing$(tim#(0),"MM/DD/YY");" new"
  ;#c[12];"!"
  ;#c[12];"include ''src/copyright.inc''"
  ;#c[12];"!"
  if i8$<>"Y" print #c[12];"Declare external function dfaudit !libgeneral.lib"
  ;#c[12];"! *declare dl4 intrinsic subs & functions"
  ;#c[12];"declare intrinsic sub getglobals"
  ;#c[12];"declare intrinsic function replace$"
  ;#c[12];"!"
  ;#c[12];"external lib ''ubsfunc.dl4''"
  ;#c[12];"declare external function OpenFile"
  ;#c[12];"!"
  ;#c[12];"external lib ''dxblockcallsx.lib'' !page block routines"
  ;#c[12];"declare external sub setblock,setproperties,setdata"
  ;#c[12];"declare external function blockDTconvert$"
  ;#c[12];"!"
  ;#c[12];"external lib ''dxblockdeleteok.lib''"
  ;#c[12];"declare external function deleteok$"
  ;#c[12];"!"
  !include special conditions lib and sub if needed
  conditionstring$=""
  if blockhdr.conditions$<>""
   xpos=pos(blockhdr.conditions$,=":") !if there, use std Cx:parameters to oncondition() routine
   if blockhdr.conditions$[1,1]="C" if xpos
    ;#c[12];"external lib ''dxblockconditions.lib''"
	;#c[12];"declare external function oncondition"
	conditionstring$="oncondition$(''",blockhdr.conditions$,"'')"
   else !see if paren, then use special call
    ypos=pos(blockhdr.conditions$,="(")
	if ypos>1
	 if xpos !there is a :   whatever is before the colon is the lib file name
	  tmp$=blockhdr.conditions$[1,xpos-1] !lib filename
	  if tmp$[len(tmp$)-3]<>".lib" let tmp$=tmp$,".lib"
	  ;#c[12];"external lib ''";tmp$;"''"
	 else
      ;#c[12];"external lib ''dxblockconditions.lib''"
	 end if
     ;#c[12];"declare external function ";blockhdr.conditions$[xpos+1,ypos-1]
	 conditionstring$=blockhdr.conditions$[xpos+1]
	end if !ypos
   end if !xpos
  end if !conditions
  ;#c[12];"!"
  ;#c[12];"!include structure,filehandler libs & default structure dims"
  ;#c[12];"include ''src/inc/file";CurFile$;".inc''"
  ;#c[12];"dim ";curfile$;". as ";curfile$
  ;#c[12];"!"
  ;#c[12];"function setvalue$(fieldname$,mask$)"
  ;#c[12];"!-----------------------------------------------------------------"
  ;#c[12];"!moves value of fieldname$ in structure to value$"
  ;#c[12];" try"
  !;#c[12];"  if mask$='''' let mask$=''#''"
  ;#c[12];"  Select Case lcase$(fieldname$)"
  ;#c[12];"    Case ''recordnumber''"
  ;#c[12];"	 value$=id$"
  !for each field in curfile$
  requiredfield$=""
  seq=-2
  Try Search >= #dfc[1],1;DH.filename$,DH.version$ Else Rem
  Do
   Try Read Record #dfc[1],seq;DF. Else Exit Do
   if DF.filename$<>DH.filename$ exit do
   if DF.version$<>DH.version$ exit do
   fieldname$=DF.varname$
   if df.required$="y" if requiredfield$="" let requiredfield$=df.varname$
   if len(DF.varname$)>1 if Df.varname$[len(DF.varname$)]="$" let fieldname$=DF.varname$[1,len(DF.varname$)-1],"qqq" !.net patch 3/7/08
   ;#c[12];"    Case ''";lcase$(fieldname$);"''"
   xpos=pos(ucase$(DF.opts$),="DTOC(''")
   if xpos let ypos=pos(ucase$(DF.opts$[xpos+6]),="'')")
   if xpos if ypos !date field conversion option
    if len(DF.varname$)>1 and Df.varname$[len(DF.varname$)]="$"
	 tmp$ = curfile$,".",DF.varname$
	else
	 tmp$ = "str$(",curfile$,".",DF.varname$,")"
	end if
    ;#c[12];"     value$= blockDTconvert$(e$,";tmp$;",''";DF.opts$[xpos+6,xpos+6+ypos-2];"'',''MMDDYY'')"
	;#c[12];"     if e$ <> '''' error 10000 !invalid date field"
   else  if len(DF.varname$)>1 and Df.varname$[len(DF.varname$)]="$"
    ;#c[12];"	  value$=rtrim$(";curfile$;".";DF.varname$;")"
   else !numeric
	;#c[12];"     if rtrim$(mask$)=''''"
	;#c[12];"      value$=str$(";curfile$;".";DF.varname$;")"
    ;#c[12];"     else"
    ;#c[12];"	   value$=";curfile$;".";DF.varname$;" using mask$"
	;#c[12];"      if value$[1,1]=''*'' let value$=str$(";curfile$;".";DF.varname$;") !bad mask"
	;#c[12];"     end if"
   end if
   seq=-1
  Loop
  if i8$<>"Y"   if requiredfield$="" let e$=curfile$," You need to designate a field in the file def as required!"\error 10000

  ;#c[12];"  End Select"
  ;#c[12];" !"
  ;#c[12];" else"
  ;#c[12];"  include ''src/callsuberr.inc''"
  ;#c[12];" end try"
  ;#c[12];"end function value$ !setvalue$"
  ;#c[12];"!"
  ;#c[12];"sub setvalue(fieldname$,value$,mask$)"
  ;#c[12];"!-----------------------------------------------------------------"
  ;#c[12];"!moves value$ to fieldname$ in structure"
  ;#c[12];" try"
  ;#c[12];"   value$=trim$(value$)"
  ;#c[12];"   Select Case lcase$(fieldname$)"
   !for each field in curfile$
  seq=-2
  Try Search >= #dfc[1],1;DH.filename$,DH.version$ Else Rem
  Do
   Try Read Record #dfc[1],seq;DF. Else Exit Do
   if DF.filename$<>DH.filename$ exit do
   if DF.version$<>DH.version$ exit do
   fieldname$=DF.varname$
   if len(DF.varname$)>1 if Df.varname$[len(DF.varname$)]="$" let fieldname$=DF.varname$[1,len(DF.varname$)-1],"qqq" !.net patch 3/7/08
   ;#c[12];"    Case ''";lcase$(fieldname$);"''"
   xpos=pos(ucase$(DF.opts$),="DTOC(''")
   if xpos let ypos=pos(ucase$(DF.opts$[xpos+6]),="'')")
   if xpos if ypos !date field conversion option
    ;#c[12];"     ";curfile$;".";df.varname$;"= blockDTconvert$(e$,value$,''MMDDYY'',''";DF.opts$[xpos+6,xpos+6+ypos-2];"'')"
	;#c[12];"     if e$ <> '''' error 10000 !invalid date field"
   else if len(DF.varname$)>1 and Df.varname$[len(DF.varname$)]="$"
    ;#c[12];"     if rtrim$(mask$)=''''"
    ;#c[12];"	  ";curfile$;".";df.varname$;"=value$,blank$" !9/6/11 blank fill all strings UBS	
    ;#c[12];"     else"
    ;#c[12];"	   value=value$"
    ;#c[12];"	  ";curfile$;".";df.varname$;"=value using mask$ !numeric with a mask,stored as a string"
    ;#c[12];"     end if"
   else
    ;#c[12];"	  ";curfile$;".";df.varname$;"=value$"
   end if
   seq=-1
  Loop
  ;#c[12];"   End Select"
  ;#c[12];"  else"
  ;#c[12];"   include ''src/callsuberr.inc''"
  ;#c[12];" end try"
  ;#c[12];"end sub !setvalue"
  ;#c[12];"!"
  ;#c[12];"sub loadcols";curfile$;"()"
  ;#c[12];"!-----------------------------------------------------------------"
  ;#c[12];"!loads 2 dim array of data,then dxsets columns for table display"
  ;#c[12];"try"
  !!special UBS CONTWT  CCODES lookup code
  if ucase$(CurFile$) = "CONTWT"
   ;#c[12];"ccodeschan = OpenFile(''ccodes'',intCo * -1,''R'')"
  end if
  !!end special
  ;#c[12];"  dim colcnt$[3]"
  ;#c[12];"  call dxget(1,''colcnt'',colcnt$) !from setblock"
  ;#c[12];"  maxrowlength=300    !value code generated from file structure!!!"
  ;#c[12];"  maxcnt=3000  !# rcds/rows per page"
  ;#c[12];"  cnt=0"
  ;#c[12];"  Dim rows$[maxcnt,maxrowlength] !will hold 2dim array of column,row data"
  ;#c[12];"  !"
  ;#c[12];"  !read in all the column fieldnames and masks set by setblock"
  ;#c[12];"  Dim varnames$[val(colcnt$),20],masks$[val(colcnt$),20]"
  ;#c[12];"  for column=0 to val(colcnt$)"
  ;#c[12];"   call dxget(10,''coldefvarname''+str$(column),varnames$[column])"
  ;#c[12];"   call dxget(10,''coldefmask''+str$(column),masks$[column])"
  ;#c[12];"  next column"
   !sort parameters section if keys is generated dxblockcreatemaint in blockcust.dl4 and appears afer header section
  if i8$="ZY" !keyed file    s/b "Y" ZY to disable for UBS
  ;#c[12];"   tmp$=''<sort>COLSEQ'',fdel$,''Description'',fdel$,rdel$"
  ;#c[12];"   call addtostr(e$,rstr$,tmp$)"
  DirKey$=DH.FileName$
  seq=-2
  search >= #dfc[2],1;DirKey$
  do
    try read record #dfc[2],seq;DK. else exit do
	if DK.FileName$<>DH.FileName$ exit do
	if dk.keypart = 1
     ;#c[12];"  tmp$=''";str$(dk.seq);"'',fdel$,''";rtrim$(dk.desc$);"'',fdel$,rdel$"
	 ;#c[12];"   call addtostr(e$,rstr$,tmp$)"
    end if
	seq=-1
  loop
  ;#c[12];"  call addtostr(e$,rstr$,''</sort>'')"
  end if
  ;#c[12];"  dim searchby$[20],begin1$[20],end1$[20],keynext$[100]"
  ;#c[12];"  call dxget(''searchby'',searchby$)" !column #, if null, then search on sortby key
  ;#c[12];"  searchcolumn = searchby$"
  ;#c[12];"  call dxget(''begin'',begin1$)"
  ;#c[12];"  call dxget(''end'',end1$)"
  ;#c[12];"  begin1=begin1$ !if numeric"
  ;#c[12];"  end1=end1$ !if numeric"
  ;#c[12];"  if end1=0 let end1=99999999999"
  ;#c[12];"  call dxget(''keynext'',keynext$)"
  !format begin$ and end$ fields if needed   particularly for keys !!!!!!!!!??
  ;#c[12];"  if end1$='''' let end1$=''zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'' !default to eof"
  if i8$="Y" !keyed file
  ;#c[12];"  call dxget(''sortby'',tmp$)" !will be key number
  ;#c[12];"  keyno=tmp$"
  ;#c[12];"  if keyno=0 let keyno=1"
  ;#c[12];"  keyval$=''''"
  ;#c[12];"  if searchby$='''' let keyval$=begin1$ !searchby same as sort by" 
  ;#c[12];"  if keynext$<>'''' let keyval$=keynext$"
  ;#c[12];"  do"
  ;#c[12];"   r = fileget";curfile$;"(e$,chan,''>'',keyno,keyval$,";curfile$;".)"
  ;#c[12];"   if searchby$=''''"
  ;#c[12];"    if len(keyval$) > 0 if len(keyval$)<= len(end1$) if keyval$>end1$[1,len(keyval$)] let r=-1 !consider end"
  ;#c[12];"    if len(end1$) > 0 if len(keyval$)> len(end1$) if keyval$[1,len(end1$)]>end1$ let r=-1 !consider end"
  ;#c[12];"   end if"
  !;#c[12];"   if len(keyval$)<len(hold$) let r=-1" !future search options, obsolete with begin/end
  !;#c[12];"   if r >=0 if keyval$[1,len(hold$)]<>hold$ let r=-1"  !future search options
  ;#c[12];"   if r < 0 "
  ;#c[12];"    let e$=''''"
  ;#c[12];"    exit do"
  ;#c[12];"   end if"
  ;#c[12];"   id$=keyval$"
  ;#c[12];"   if cnt>maxcnt exit do"
  else !by record #
  ;#c[12];"  for rcd=0 to chf(chan)-2"
  if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  ";curfile$;".";requiredfield$;" = ''''"
  else !required numeric field
    ;#c[12];"  ";curfile$;".";requiredfield$;" = 0"
  end if
  ;#c[12];"     try read record #chan,rcd+1;";curfile$;".; else rem"
  ;#c[12];"		id$=str$(rcd+1)"
  if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  if trim$(";curfile$;".";requiredfield$;") <> '''' !active record"
  else !required numeric field
    ;#c[12];"  if ";curfile$;".";requiredfield$;"  !active record"
  end if
  ;#c[12];"   if cnt>=maxcnt exit for"
  end if !by record #
  !
  !compare to searchby field ??
  ;#c[12];"   checkit=0"
  ;#c[12];"   if searchby$ <> ''''"
  ;#c[12];"    tmp$=setvalue$(varnames$[searchcolumn],masks$[searchcolumn])"
  ;#c[12];"    if rtrim$(masks$[searchcolumn]) <> '''' !numeric compare"
  ;#c[12];"     tmp = tmp$"
  ;#c[12];"     if tmp<begin1 let checkit = 1"
  ;#c[12];"     if tmp>end1 let checkit = 1"
  ;#c[12];"    else"
  ;#c[12];"     if len(tmp$) > 0 if len(tmp$)<= len(begin1$) if tmp$<begin1$[1,len(tmp$)] let checkit = 1"
  ;#c[12];"     if len(begin1$) > 0 if len(tmp$)> len(begin1$) if tmp$[1,len(begin1$)]<begin1$ let checkit = 1"
  ;#c[12];"     if len(tmp$) > 0 if len(tmp$)<= len(end1$) if tmp$>end1$[1,len(tmp$)] let checkit = 1"
  ;#c[12];"     if len(end1$) > 0 if len(tmp$)> len(end1$) if tmp$[1,len(end1$)]>end1$ let checkit = 1"
  ;#c[12];"    end if !mask$"
  ;#c[12];"   end if !searchby"
  ;#c[12];"   if checkit=0 !ok to include"
  ;#c[12];"    !fill in fields$"
  ;#c[12];"    if fdel$=''GUI'' !dl4 GUI display of records"
  ;#c[12];"	 stop"
  ;#c[12];"    else !fdel$  .net web"
  ;#c[12];"     rows$[cnt]=replace$(id$,'' '',''_''),fdel$ !ID is record # (replacing spaces with _ to retain)"
  ;#c[12];"     for column=0 to val(colcnt$)"
  ;#c[12];"      tmp$=setvalue$(varnames$[column],masks$[column])"
   !!special UBS CONTWT  CCODES lookup code
   if ucase$(CurFile$) = "CONTWT" 
    ;#c[12];"if lcase$(varnames$[column]) = ''containerumrec'' !special CONTWT UM record #, need to get code"
    ;#c[12];" try read #ccodeschan,val(tmp$),10;tmp$; else rem"
	;#c[12];"end if"
   end if
   !!end special
  ;#c[12];"      rows$[cnt]=rows$[cnt],tmp$,fdel$"
  ;#c[12];"     next column"
  ;#c[12];"	   end if !fdel$"
  ;#c[12];"    cnt=cnt+1"
  ;#c[12];"   end if !checkit"
  if i8$="Y" !keyed file
   ;#c[12];"  loop"
  else !by record #
   ;#c[12];"   end if !active"
   ;#c[12];"  next rcd !next record"
  end if !by record #
  ;#c[12];"  !"
  ;#c[12];"  call addtostr(e$,rstr$,rows$[])  !add table of data to string"
  ;#c[12];"  call addtostr(e$,rstr$,''</block>'')"
  ;#c[12];"  !"
  ;#c[12];" else"
  ;#c[12];"  include ''src/callsuberr.inc''"
  ;#c[12];" end try"
  ;#c[12];"end sub !loadcols";curfile$
  ;#c[12];"!"
  ;#c[12];"Sub loadinp";curfile$;"()"
  ;#c[12];"!-----------------------------------------------------------------"
  ;#c[12];"try"
  ;#c[12];"  if id$<>''''"
  if i8$="Y"
   ;#c[12];"   keyval$=id$"  
   ;#c[12];"   r = fileget";curfile$;"(e$,chan,''='',1,keyval$,";curfile$;".)"
  else
   ;#c[12];"   !read existing record for field defaults, its always change mode here, add mode handled by dxblockcallsx, doesn't come here"
   ;#c[12];"   try read record #chan,val(id$);";curfile$;".; else rem"
  end if
  if i8$<>"Y" 
  ;#c[12];"  else !add, find first unused record #"
  ;#c[12];"   for cnt=1 to chf(chan)-1"
  if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  ";curfile$;".";requiredfield$;" = ''''"
  else !required numeric field
    ;#c[12];"  ";curfile$;".";requiredfield$;" = 0"
  end if
  ;#c[12];"    try read record #chan,cnt;";curfile$;".; else rem"
  if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  if trim$(";curfile$;".";requiredfield$;") = '''' exit for"
  else !required numeric field
    ;#c[12];"  if ";curfile$;".";requiredfield$;" = 0 exit for"
  end if
  ;#c[12];"   next cnt"
  ;#c[12];"   if cnt>chf(chan-1) !out of room"
  ;#c[12];"    e$=''Can not add any more entries!''"
  ;#c[12];"    error 10000"
  ;#c[12];"   end if"
  !;#c[12];"   id$=str$(cnt)"
  end if
  ;#c[12];"  end if"
  ;#c[12];"  !"
  ;#c[12];"  !create xml with default record values"
  ;#c[12];"  For field= 0 to inpcnt"
  ;#c[12];"   call dxget(10,''inpdef''+str$(field),fields$[])  !get all inp parameters from setblock"
  ;#c[12];"   !"
  ;#c[12];"   if fields$[3] = ''Y'' !active"
  ;#c[12];"    if fdel$=''GUI'' !dl4 GUI display of records"
  ;#c[12];"	 stop"
  ;#c[12];"    else !fdel$  .net web"
  ;#c[12];"     !set default from record"
  ;#c[12];"	    if id$<>'''' let fields$[9]=trim$(setvalue$(fields$[4],fields$[22])) !set default values in struct on edit"
  ;#c[12];"     if fields$[7]=''CHECK''"
  ;#c[12];" 	 if fields$[9]=rtrim$(fields$[23,1,10]) let fields$[9]=''CHECKED'' else let fields$[9]=''''"
  ;#c[12];"  	end if"
if i8$<>"Y"
  ;#c[12];"     if id$='''' if fields$[4]=''RecordNumber'' let fields$[9]=str$(cnt) !next avail record # on add"
  end if
  ;#c[12];"	    call setproperties(e$,fields$[],rstr$) !create xml of control properties"
  ;#c[12];"	    call setdata(e$,chaninplst,blockid$,fields$[],rstr$)"
  ;#c[12];"	    call addtostr(e$,rstr$,''</control>'') !add to string, but don't put eor at end"
  ;#c[12];"	   end if !fdel$"
  ;#c[12];"   end if !active"
  ;#c[12];"  Next field"
  ;#c[12];"  !"
  ;#c[12];"  if action$=''EDIT''  !see if delete button should display"
  ;#c[12];"   deleteflag$ = deleteok$(e$,''";curfile$;"'',id$,chan)"
  if i8$<>"Y" print #c[12];"   if deleteflag$='''' let deleteflag$=''Y'' !default to allow to delete on record # files"
  if i8$="Y"  print #c[12];"   if deleteflag$='''' let deleteflag$=''Y'' !default to allow to delete on indexed files"
  ;#c[12];"   if deleteflag$=''Y'' call env(2,''DXDELETE'',''Y'')"
  ;#c[12];"  end if"
  ;#c[12];" else"
  ;#c[12];"  include ''src/callsuberr.inc''"
  ;#c[12];" end try"
  ;#c[12];"end sub !loadinp";curfile$
  ;#c[12];"!"
  ;#c[12];"Sub save";curfile$;"()"
  ;#c[12];" try"
  ;#c[12];"   call dxget(10,''inpdef0'',fields$[])  !fieldnames in [4]"
  ;#c[12];"   call dxget(fields$[4],tmp$) !get value entered in first input field, assumed to be the unique key field for IC or rcd #"
  ;#c[12];"  if rtrim$(fields$[22])<>''''"
  ;#c[12];"	   value=tmp$"
  ;#c[12];"	   tmp$=value using fields$[22] !numeric with a mask,stored as a string"
  ;#c[12];"  end if"
  !?not sure of this line ;#c[12];"   if origid$='''' let id$=trim$(tmp$) !add mode"
  !  change mode (origid$<>"") if id$<>origid$, changing keys, make sure new id$ not already on file
  !  only works if key 1 is first field only and it requires no formatting
  ;#c[12];"  if origid$<>'''' if trim$(tmp$)<>trim$(origid$)  !key field changed, make sure not already on file"
  ;#c[12];"   mode$=''c'' !not ok"
  if i8$="Y"
     ;#c[12];"   id$=tmp$"
     ;#c[12];"   keyval$=id$"
     ;#c[12];"   r = fileget";curfile$;"(e$,chan,''='',1,keyval$,";curfile$;".)"
	 ;#c[12];"   if r >= 0 let mode$ = ''a'' !ok"
  else
   ;#c[12];"  id$=trim$(tmp$)"
   ;#c[12];"  try read record #chan,val(id$);";curfile$;".; else rem  !"
   if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  if trim$(";curfile$;".";requiredfield$;") = '''' let mode$=''a'' !ok"
   else !required numeric field
    ;#c[12];"  if ";curfile$;".";requiredfield$;"= 0 let mode$=''a''  !ok"
   end if
  end if 
  ;#c[12];"   if mode$=''c''"
  ;#c[12];"    e$=id$,'' already on file!''"
  ;#c[12];"    error 10000"
  ;#c[12];"   end if"
  ;#c[12];"  end if"
  ;#c[12];"  mode$ = ''c''"
  if i8$="Y"
     ;#c[12];"  id$=tmp$"
	 ;#c[12];"  searchid$ = id$"
     ;#c[12];"  if origid$ <> '''' let searchid$ = origid$"
     ;#c[12];"   keyval$=searchid$"
     ;#c[12];"   r = fileget";curfile$;"(e$,chan,''='',1,keyval$,";curfile$;".)"
	 ;#c[12];"   if r < 0 let mode$ = ''a''" !add mode
  else
   ;#c[12];"  id$=trim$(tmp$)"
   ;#c[12];"  searchid$ = id$"
   ;#c[12];"  if origid$ <> '''' let searchid$ = origid$"
   ;#c[12];"  try read record #chan,val(searchid$);";curfile$;".; else rem !"
   ;#c[12];"  try mat read #chan,val(searchid$);old?; else rem !audit"
   if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  if trim$(";curfile$;".";requiredfield$;") = '''' let mode$=''a'' !add mode"
   else !required numeric field
    ;#c[12];"  if ";curfile$;".";requiredfield$;"= 0 let mode$=''a''  !add mode"
   end if
  end if
  ;#c[12];"  if origid$ = '''' if mode$=''c''  !means add mode, but already on file"
  ;#c[12];"   e$=searchid$,'' already on file!''"
  ;#c[12];"   error 10000"
  ;#c[12];"  end if" 
  ;#c[12];"  if origid$ <> '''' if mode$=''a''"
  ;#c[12];"   e$=searchid$,'' not on file!''"
  ;#c[12];"   error 10000"
  ;#c[12];"  end if"
  ;#c[12];"  !add mode set defaults (from filedef)"
  ;#c[12];"  if mode$=''a''"
 !for each field in curfile$
  seq=-2
  Try Search >= #dfc[1],1;DH.filename$,DH.version$ Else Rem
  Do
   Try Read Record #dfc[1],seq;DF. Else Exit Do
   if DF.filename$<>DH.filename$ exit do
   if DF.version$<>DH.version$ exit do
   if df.default$<>""
    df.default$=replace$(df.default$,"b"," ")
    if len(df.default$) >= 9 if ucase$(df.default$[1,9])="RECORDNUM"
	 tmp$="id$"\if i8$="Y" let tmp$="r"
	 ;#c[12];"     ";curfile$;".";df.varname$;"=";tmp$
	else
     ;#c[12];"	 ";curfile$;".";df.varname$;"=''";df.default$;"''"	
    end if
   end if
   seq=-1
  Loop
  ;#c[12];"  end if"
  ;#c[12];"  For field= 0 to inpcnt"
  ;#c[12];"   call dxget(10,''inpdef''+str$(field),fields$[])  !fieldnames in [4],mask in [22]"
  ;#c[12];"   call dxget(fields$[4],tmp$) !get value entered"
  ;#c[12];"   tmp$=trim$(tmp$)"
  ;#c[12];"   if fields$[7]=''CHECK''"
  ;#c[12];"    if tmp$ <> rtrim$(fields$[23,1,10]) let tmp$=rtrim$(fields$[23,11,20]) !if not checked, set field to 11,20 not checked value"
  ;#c[12];"   end if"
  ;#c[12];"   call setvalue(fields$[4],tmp$,fields$[22]) !put into record"
  ;#c[12];"  Next field"
  ;#c[12];"  !"
  ;#c[12];"  !if there are conditions,call function to check before saving"
  if conditionstring$<>""
  ;#c[12];"  e$ = ";conditionstring$
  ;#c[12];"  if e$ <>'''' !failed condition check"
  ;#c[12];"   error 10000"
  ;#c[12];"  end if"
  ;#c[12];"  !"
  end if !conditionstring$
  ;#c[12];"  !save record"
  if i8$="Y"
     ;#c[12];"   r = fileupdate";curfile$;"(e$,chan,mode$,r,";curfile$;".)"
	 ;#c[12];"   if r < 0 error 10000"
  else
   ;#c[12];"  write record #chan,val(searchid$);";curfile$;"."
   !audit
   ;#c[12];"   if mode$=''a'' mat read #chan,val(searchid$);old?; else mat read #chan,val(searchid$);new?; !audit"
   ;#c[12];"   r=dfaudit(e$,-1,''";curfile$;"'',mode$,searchid$,old?,new?)"
  end if
  ;#c[12];"  e$=id$,'' saved!''"
  ;#c[12];"  !"
  ;#c[12];" else"
  ;#c[12];"  include ''src/callsuberr.inc''"
  ;#c[12];" end try"
  ;#c[12];"end sub !save";curfile$;""
  ;#c[12];"!"
  ;#c[12];"Sub delete";curfile$;"()"
  ;#c[12];" try"
  if i8$="Y"
   ;#c[12];"   keyval$=id$"  
   ;#c[12];"   r = fileget";curfile$;"(e$,chan,''='',1,keyval$,";curfile$;".)"
     ;#c[12];"   r = fileupdate";curfile$;"(e$,chan,''d'',r,";curfile$;".)"
     ;#c[12];"   if r < 0 error 100000"
  else
   ;#c[12];"  try read record #chan,val(id$);";curfile$;".; else rem"
   !audit
   ;#c[12];"  try mat read #chan,val(id$);old?; else rem !audit"
   ;#c[12];"  mode$=''d''"
   ;#c[12];"   r=dfaudit(e$,-1,''";curfile$;"'',mode$,searchid$,old?)"
   if requiredfield$[len(requiredfield$)]="$"  !required string field
    ;#c[12];"  ";curfile$;".";requiredfield$;"='''' !indicates deleted"
   else !required numeric field
    ;#c[12];"  ";curfile$;".";requiredfield$;"=0 !indicates deleted"
   end if
   ;#c[12];"  write record #chan,val(id$);";curfile$;"."
  end if
  ;#c[12];"  e$=id$,'' deleted!''"
  ;#c[12];" else"
  ;#c[12];"  include ''src/callsuberr.inc''"
  ;#c[12];" end try"
  ;#c[12];"end sub !delete";curfile$
  ;#c[12];"!"
  ;#c[12];"! **main procedure"
  ;#c[12];"!"
  ;#c[12];"! dim variables used by program"
  ;#c[12];"!"
  ;#c[12];"dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables"
  ;#c[12];"try"
  ;#c[12];"!"
  ;#c[12];" dim blockid$[8],tmp$[100],inpcnt$[3],id$[100],readonly$[1],searchid$[100],origid$[100]"
  ;#c[12];" dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[3000],bsdel$[10],esdel$[10],rdel$[10]"
  ;#c[12];" dim fields$[33,120] !array to load input field varnames into"
  ;#c[12];" dim fieldname$[20],value$[120],mask$[20]"
  ;#c[12];" dim mode$[10],keyval$[100],deleteflag$[1],3%,blank$[1000]"
		;#c[12];" blank$='' '',blank$"
  if i8$<>"Y" print #c[12];" dim old?[3072],new?[3072]"
  ;#c[12];" !"
  ;#c[12];" call getglobals(''blockx'',0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)"
  ;#c[12];" call getglobals(''blockxchan'',0,chaninplst)  !channel # blockinplst is open on for setdata of droplist values"
  ;#c[12];" !open data file"
  ;#c[12];" if action$<>''SAVE'' if action$<>''DELETE'' let readonly$=''R'' !ropen"
  ;#c[12];" chan = OpenFile(''";curfile$;"'',intCo*-1,readonly$)   !modify openfile and pass filename, code generated"
  ;#c[12];" if chan < 0"
  ;#c[12];"  let e$=''Could not open ";curfile$;" file!''"
  ;#c[12];"  error 10000"
  ;#c[12];" end if"
  ;#c[12];" !"
  ;#c[12];" call dxget(1,''inpcnt'',inpcnt$) "
  ;#c[12];" inpcnt=inpcnt$ !# of input fields, set by setblock"
  ;#c[12];" !"
  ;#c[12];" call dxget(''ID'',id$)  !record # or key"
  ;#c[12];" call dxget(''ORIGID'',origid$) !original record # or key, indicates if add or change mode"
  ;#c[12];" id$=replace$(id$,''_'','' '')"
  ;#c[12];" origid$=replace$(origid$,''_'','' '')"
  ;#c[12];" !"
  ;#c[12];" if action$=''TABLE''"
  ;#c[12];"  call loadcols";curfile$;"() !loads table columns with data from file"
  ;#c[12];" else if action$=''EDIT''"
  ;#c[12];"  call loadinp";curfile$;"() !load edit page with input controls & record defaults"
  ;#c[12];" else if action$=''SAVE''"
  ;#c[12];"  call save";curfile$;"() !save record (add or change)"
  ;#c[12];" else if action$=''DELETE''"
  ;#c[12];"  call delete";curfile$;"() !delete record"
  ;#c[12];" end if"
  ;#c[12];" !"
  ;#c[12];" Call addtostr(e$,rstr$,esdel$) !end section"
  ;#c[12];" !!!!!!print rstr$"
  ;#c[12];" Call setoutput(e$,rstr$,1,e$) !1 flag puts 0 status section in, puts </page> in, e$ is message"
  ;#c[12];"else"
  ;#c[12];" ! error routine"
  ;#c[12];"  if spc(8)<>10000"
  ;#c[12];"   call suberr(e$,spc(8),spc(10),msc$(2))"
  ;#c[12];"   !call programdump('''')"
  ;#c[12];"  end if"
  ;#c[12];"  call mainerr(e$,spc(8),buttonlist$[],nextlist$[],rstr$)   !rstr$ for xml"
  ;#c[12];"end try"
  ;#c[12];"end"
!
!
  close #c[12]
else
  if xport
   if spc(8)<>10000
    call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
    !call programdump("")
   end if
   error 10000
  else
   ;e$
   ;"error";spc(8);" at line ";spc(10)
   stop
  end if
end try
End Sub ! Processdl4Section

