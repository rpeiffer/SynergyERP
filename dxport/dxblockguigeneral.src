! dL4 / Library of GUI Calls and Functions
! "dxblockguigeneral.bas" 12/26/2006
!
! loadsave -w -n 100,10 -o dxblockguigeneral.lib src/dxblockguigeneral.src
!
! All rights reserved.  (C) Copyright 2003 by:
! Dynamic Concepts Inc.  Aliso Viejo, California USA
!
!
! This file should be loaded and saved as "dxblockguigeneral.LIB". 
!
! Every program that uses it needs the following line:
!
! External Lib "dxblockguigeneral.lib"
!
! This library is provided as a sample Library
! for developing dL4 GUI programs
!
! Routines may be modified as desired
!
! Contained in this library are the following:
!   Sub guisuberr
!   Function popup$
!   Function countoccur
!   Function eom$
!   Function guiOpenPrinter
!   Sub closeprinter
!   Sub dateprompt
!   Sub begenddate
!   Sub searchoptions
!   Sub printoptions
!   Sub printprompt
!   Sub printinputs
!   Function getdate
!   Function getcheckbox$
!   Function getradio
!   Function getradio$
!   Sub blockScreenInit
!   Sub blockTitleBar
!   Sub blockTitleBar2
!   Sub blockColor
!
Declare Intrinsic Sub GetGlobals,Time,drawimage,env,SetGlobals,dxget,dxset
Declare Intrinsic Function callstat$,dateusing$,findchannel
External Lib "gui1.lib"
Declare External Sub GUIScreenInit,GUILineSeparator,guicalendar
Declare External Sub GUIMessageWindow,GuiButtons,guiinput
Declare External Function GuiQuery$,guiqueryradio$,guihelpfile
Declare External Function Guicolorword
External Lib "gui2.lib"
Declare External Sub GUISetTitle,GUIBackColor,GUIInputBox,guistatusline
External Lib "dl4util.lib"
Declare External Function Left$,datevalidate$
External Lib "dpgui.lib"
Declare External Sub dptextviewer
!
Declare External Sub blockScreenInit
Declare External Function getdate,ScreenReport,TextPrinterOption
!
!
!
External Sub guisuberr(spc8,spc10,msc2$,...)
  ! used only to report programmatic errors in this library, shouldn't ever happen!
  ! call from try/else of subroutines to print error string
  ! pass spc(8) value, spc(10) value, msc$(2) value
  ! optionally pass an error message (if spc8 is 20000 or up this is only message to display)
  Try Enter errmsg$ Else Dim errmsg$[1]
  Dim errtype$[10],e$[300],i$[1],efile$[100],dateformat$[60]

  e$ = "syserror ",spc8," ",msc2$," at ",Str$(spc10)," in "
  Try 
    For callstack = 1 To 10
      e$ = e$,callstat$(callstack,errtype$),":",errtype$,";"
    Next callstack
  Else 
  End Try
  error 10000
  !that's all passes it all to mainerr
  Print 'XX';
  fontcolor = Guicolorword("red")
  Print PChr$(fontcolor);'FONTCOLOR'
  Print errmsg$
  If spc8 < 20000 Print e$
  !write error to errorlog file here
  !echan = findchannel()
  !efile$ = "2/errorlog"
  !Try Open #echan,efile$ Else Build #echan,"<00> " + efile$ As "text"
  !call getglobals("dfsystem",0,dateformat$)
  !dateformat$=dateformat$," HH:NN:SS")
  !Print #echan,-4; \ Print #echan;dateusing$(Tim#(0),dateformat$)
  !Print #echan;e$ \ Print #echan;errmsg$
  Input "Press enter "i$
  Print 
End Sub !guisuberr
!
!
external function dateformat2mmddyy$(i$)
 !converts whatever dateformat is in dfsystem to mmddyy
 try
    dim dateformat$[60],e$[60],tmp$[6]
		call getglobals("dfsystem",0,dateformat$)
		dateformat$=ucase$(dateformat$) !determine positions of Month, Day, Year and convert 
		xpos=pos(dateformat$,="M")
		tmp$=i$[xpos,xpos+1] !mm
		xpos=pos(dateformat$,="D")
		tmp$=tmp$,i$[xpos,xpos+1] !dd
		xpos=pos(dateformat$,="YY",-1)
		tmp$=tmp$,i$[xpos,xpos+1] !yy
 else
	  e$="Error convertin dateformat in dfsystem.txt file to mmddyy,  dateformat2mmddyy$ in dxblockguigeneral.lib"
      call guisuberr(Spc(8),Spc(10),Msc$(2),e$)	  
 end try
end function tmp$ 
!
!
external function mmddyy2dateformat$(i$)
 !converts mmddyy to whatever dateformat is in dfsystem
 try
    dim dateformat$[60],tmp$[60],e$[60]
 	call getglobals("dfsystem",0,dateformat$)
	dateformat$=ucase$(dateformat$)
 	mm=i$[1,2]\dd=i$[3,4]\yy=i$[5,6]\date#=dat#(yy,mm,dd)  
    let tmp$=dateusing$(date#,dateformat$) !sets default to date using dateformat
 else
    e$="Error convertin mmddyy to dateformat in dfsystem.txt file,  mmddyy2dateformat$ in dxblockguigeneral.lib"
	call guisuberr(Spc(8),Spc(10),Msc$(2),e$)
 end try
end function tmp$
!
!
External Function blockguipopup$(type$,message$,...)
  ! displays a popup messsage box and returns response
  ! pass type$= A (Ask question), E (error), I (info box), W (warning box)
  ! pass message$
  ! optionally pass message box title$
  ! optionally pass button options (the first uppercased letter is the default)
  ! "ARI"       "Abort", "Retry", "Ignore"
  ! "O"         "Ok"
  ! "OC"        "Ok", "Cancel"
  ! "RC"        "Retry", "Cancel"
  ! "YN"        "Yes", "No"
  ! "YNC"       "Yes", "No", "Cancel"
  ! returns first character of option button selected
  Try 
    Dim t$[1],ans$[1]
    t$ = UCase$(type$[1,1])
    Try Enter title$,... Else Dim title$[1]
    Try Enter options$ Else Dim options$[1]
    If t$ = "A" Print PChr$(message$,title$,options$);'WCMSGASK';
    If t$ = "E" Print PChr$(message$,title$,options$);'WCMSGERROR';
    If t$ = "W" Print PChr$(message$,title$,options$);'WCMSGWARN';
    If t$ = "I" Print PChr$(message$,title$,options$);'WCMSGINFO';
    Print 'BQ';
    Print #-4,1;'WCBQRYBUF';
    Input #-3,1;ans$
    Print #-4,1;'WCEQRYBUF';
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Function ans$ !popup$
!
!
External Function countoccur(text$,sep$)
  ! counts occurences of sep$)
  Dim tmp$[Len(text$)]
  tmp$ = text$
  Do 
    x = Pos(tmp$, = sep$)
    If x = 0 Exit Function e
    e = e + 1
    If x < Len(tmp$) Let tmp$ = tmp$[x + Len(sep$)] Else Exit Function e
  Loop 
End Function e !countoccur
!
!
External Function guieom$(...)
  ! returns last day of the month in mmddyy
  ! pass cnt to position forward or backward x months from today
  Dim date$[10]
  Try Enter cnt Else Let cnt = 0
  mm = Tim(9)
  yy = Tim(8)
  Do 
    If cnt = 0 Exit Do 
    If cnt < 0 Let mm = mm - 1 \ cnt = cnt + 1
    If cnt > 0 Let mm = mm + 1 \ cnt = cnt - 1
    If mm = 0 Let mm = 12 \ yy = yy - 1
    If mm = 13 Let mm = 1 \ yy = yy + 1
  Loop 
  For dd = 31 To 28 Step -1
    date$ = mm Using "&&",dd Using "&&",yy Using "&&"
    try
	 date#=dat#(yy,mm,dd)
     Exit For
	else
	end try
  Next dd
End Function date$ !eom$
!
!
External Function guiOpenPrinter(e$,Chan,p$,...)
  ! opens printer p$ on chan & displays status line
  ! always assumes printer # prompt is element #120
  ! if error returns non-zero value
  ! followed by optional print parameters string
  !     a=  indicates archive as default filename
  !     a=filename   indicates archive as passed filename
  !     kill=n indicates cannot kill archive file (Wright unique)
  ! followed by optional title (otherwise title is same as menu description)
  !
  Try 
    Dim DT$[10]
    Try Enter pparam$,... Else Dim pparam$[100]
    Try Enter title$ Else Dim title$[100]
    Dim textfile$[100],archdir$[100],tmp$[100]
    Call env(1,"ARCHDIR",archdir$) !archive directory env variable
    If archdir$ = "" Let archdir$ = "arch/" \ Call env(2,"ARCHDIR",archdir$) !temporary if not set,default it and set it
    apos = Pos(pparam$, = "a=")
    If apos Or p$[5,5] = "9" !need a text file
      If apos
        nextpos = Pos(pparam$[apos + 2], = " ") \ If nextpos = 0 Let nextpos = Len(pparam$) - 1
        If nextpos > apos + 3 Let tmp$ = pparam$[apos + 2,nextpos + 1]
      End If 
      If tmp$ = "" Let tmp$ = "textreport",Spc(6) Using "&&&"
      textfile$ = archdir$,tmp$,"_",dateusing$(Tim#(0),"YYMMDDHHNNSS")
    End If 
    If p$[5,5] <> "9"
      Try 
        Open #Chan,p$
      Else 
        Dim i$[1]
        element = 120
        i$ = blockguipopup$("E","Invalid printer selection!","","O")
        Print PChr$(element);'WCSELECT CU 0WCSELECT';PChr$(element);'WCFOCUS';
        Exit Function 1
      End Try 
    End If 
    If textfile$ <> ""
      Try Close #Chan Else Rem 
      tmp$ = "<00> ",textfile$,"!"
      Build #Chan, + tmp$
    End If 
    !
    !no, pass it  If title$ = "" try Call GetGlobals("MENU",2,title$) else let title$="" !default title      !??
    Call SetGlobals("BLOCKPRINT",0,Chan,p$,pparam$,title$,textfile$) !save for closeprinter                       !??
    Call guistatusline(-1,"REPORT IN PROCESS ... PLEASE WAIT ...")
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Function 0 ! guiopenprinter
!
!
External Sub closeprinter()
  ! closes printer channel, if needed prints from text file, or
  ! if printer 9, triggers viewer
  Try 
    Dim p$[5],pparam$[100],title$[100],textfile$[100]
    Call GetGlobals("BLOCKPRINT",0,Chan,p$,pparam$,title$,textfile$)
    If Pos(LCase$(pparam$), = "kill=n") Let del_override = 1 Else Let del_override = 0 ! (was rm=n,changed to match openprinter)
    If p$[5,5] = "9"
      !dptextviewer Call printtextreport(99,Chan,title$,textfile$,del_override)
    Else 
      If textfile$ <> ""
        prtr_chan = findchannel()
        Open #prtr_chan,p$
        !Call PrintTextFile(Chan,prtr_chan)
        Close #prtr_chan
      End If 
    End If 
    Try Close #Chan Else Rem
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub ! closeprinter
!
!
External Sub dateprompt(element,...)
  ! displays date prompt
  ! pass element# & optionally default date (T=today) & override label (default is Report Date if passed null or not passed) -1=no label,
  ! followed by optional positioning column,row in grid units
  ! followed by optional additional text for title 
  Try 
    Dim date$[8],dateformat$[60]
    Try Enter idate$,... Else Dim idate$[1]
    Try Enter label$,... Else Dim label$[30]
    Try Enter column,... Else Let column = 10
    Try Enter row,... Else Let row = 80
    Try Enter addltext$,... Else Dim addltext$[1]
    Try Enter Chan,... Else Let Chan = -1
    !
	!note:assumes if a default date is sent, it is in the proper dateformat (matches format defined in dfsystem.txt)
    date$ = ""
    If UCase$(idate$) = "T" Let date$ = Tim(4) Using "&&&&&&" !mmddyy
    If UCase$(idate$) = "B" !beg of month
      If Tim(10) <= 15 Let date$ = guieom$(-1) Else Let date$ = guieom$() !eom$ returns mmddyy always
      date$[3,4] = "01"
    End If 
    If UCase$(idate$) = "E" !end of month
      If Tim(10) <= 15 Let date$ = guieom$(-1) Else Let date$ = guieom$() !eom$ returns mmddyy always
    End If
	if date$<>"" let idate$=mmddyy2dateformat$(date$)
    If label$ = "" Let label$ = "Report Date"
    If label$ = "-1" Let label$ = "" !no label
    width = 8 \ If Len(label$) >= 12 Let width = Int((8 / 10) * Len(label$)) + 1
    Call GUIInputBox(Chan,element,2,"string",label$,column,row,width,8,date$,"","","DT",addltext$)
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !dateprompt
!
!
External Sub begenddate(element,...)
  ! displays beginning & ending date prompts
  ! pass starting element# & optionally override beg default date & end default date , beg label, end label
  ! for default dates you can pass 'T' today, 'B' 1st day of month, 'E' last day of month (if today is 1st-15th uses previous month)
  ! if you need special positioning, use dateprompt and do them separate
  Try 
    Try Enter begdate$,... Else Dim begdate$[10]
    Try Enter enddate$ Else Dim enddate$[10]
    Try Enter beglabel$,... Else Dim beglabel$[30]
    Try Enter endlabel$,... Else Dim endlabel$[30]
    If beglabel$ = "" Let beglabel$ = "Starting Date"
    Call dateprompt(element,begdate$,beglabel$)
    If endlabel$ = "" Let endlabel$ = "Ending Date"
    Call dateprompt(element + 1,enddate$,endlabel$,160) !160 default column,80 row
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !begenddate
!
!
External Sub searchoptions(startelement,defaultelement,text$,...)
  ! displays print search options radio buttons box
  ! pass starting element #, defaultelement # and 
  ! text$, a string of ~ delimited labels for each radio button
  ! followed by optional positioning column,row in grid units
  ! followed by optional title
  ! followed by optional grouping element# (if needing more than one box)
  ! (assumes 10gridfont)
  ! followed by optional window channel #
  ! followed by optional - length of group box
  Try 
    Try Enter column,... Else Let column = 400
    Try Enter row,... Else Let row = 80
    Try 
      Enter title$,...
    Else 
      Dim title$[80]
      title$ = "Search Options"
    End Try 
    Try Enter grpelement,... Else Let grpelement = 203 !default
    Try Enter Chan,... Else Let Chan = -1
    Try Enter GroupLng,... Else Let GroupLng = 390
    If grpelement = 0 Let grpelement = 203 ! passing channel #
    If Chan = -1 Let Chan = -4
    Dim btext$[Len(text$)]
    nb = countoccur(text$,"~") + 1 !# of buttons
    totlen = (Int((8 / 10) * Len(text$) - nb - 1) + (2 * nb)) * 10 !totlen needed to show radio,text & gap
    endcolumn = column + GroupLng \ endrow = row + 24
    If totlen > endcolumn Let endcolumn = 790 ! need bigger box
    If totlen > endcolumn Let tmprow = Int(totlen / endcolumn)
    If totlen > endcolumn Let endrow = endrow + (12 * tmprow) ! add extra rows
    Print #Chan;PChr$(grpelement,column,row,endcolumn,endrow,title$);'WCGROUP';
    row = row + 12
    start = column + 10
    itext = 1
    For i = 1 To nb
      btext$ = text$[itext] To "~"
      itext = itext + Len(btext$) + 1
      width = (Int((8 / 10) * Len(btext$)) + 2) * 10
      If start + width > endcolumn Let start = column + 10 \ row = row + 12
      Print #Chan;PChr$(startelement - 1 + i,start,row,start + width,row + 10,btext$,0);'WCRADIO';
      start = start + width
    Next i
    Print #Chan;PChr$(defaultelement);'WCSELECT';"1";'0WCSELECT';
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !searchoptions
!
!
External Sub GUIDropList(element,defaultitem,text$,...)
  ! displays drop list
  ! pass element #, defaultitem # (<0 if no default) and 
  ! text$, a string of ~ delimited labels for each item in drop list
  ! followed by optional positioning column,row in grid units
  ! followed by optional length to allow for prompt
  ! followed by optional title
  ! followed by option max drop list length
  ! followed by optional window channel #
  Try 
    Try Enter column,... Else Let column = 400
    Try Enter row,... Else Let row = 80
	try enter plen,... else let plen=170
    Try 
      Enter title$,...
    Else 
      Dim title$[80]
      title$ = "Search Options"
    End Try
	Try Enter MaxLength,... Else let MaxLength=-1 !or calculate
    Try Enter Chan,... Else Let Chan = -1
    If Chan = -1 Let Chan = -4
	if title$<>" " Print #Chan;PChr$(element+1000,column,row,column+plen-1,row+10,title$);'WCLABEL';
	!
	options=2
	if text$<>"" 
	 Dim  btext$[Len(text$)]
	 if pos(text$,='HT') let options=options+16
    end if
	!
	if maxlength=-1 !calculate length of drop list box
	 if text$<>""
	   itext = 1
       Do
         btext$ = text$[itext] To "~"
         if btext$="" exit do
		 itext = itext + Len(btext$) + 1
         width = (Int((8 / 10) * Len(btext$)) + 2) * 10
         If width > maxlength Let maxlength=width
         if itext>len(text$) exit do
       Loop
      end if !text$
	 else
	  maxlength=200 !default it
	 end if
	!
	Print #Chan;PChr$(element,column+plen,row,column+plen+maxlength,row+110,"",options);'WCLISTDROP';
    !
	if text$<>""
	  print #Chan;pchr$(element);'WCSELECT';
      itext = 1
      Do
         btext$ = text$[itext] To "~"
		 if btext$="" exit do
		 print #Chan;btext$
         itext = itext + Len(btext$) + 1
		 if itext>len(text$) exit do
	  Loop
	  if defaultitem<0 let defaultitem=0 !always default to 1st one if no default
      if defaultitem>=0 Print #Chan;PChr$(defaultitem);'WCMARK';
	  Print #Chan;'0WCSELECT';
	end if !text$
	!
	!
    !
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !GUIDropList
!
!
External Sub printoptions(startelement,text$,...)
  ! displays print print options checkboxes box
  ! pass starting element #, 
  ! text$, a string of ~ delimited labels for each check box
  ! If a value starts with "&&" the button will be defined as checked by default
  ! followed by optional positioning column,row in grid units
  ! followed by optional title
  ! followed by optional grouping element# (if needing more than one box)
  Try 
    Try Enter column,... Else Let column = 400
    Try Enter row,... Else Let row = 125
    Try 
      Enter title$,...
    Else 
      Dim title$[80]
      title$ = "Print Options"
    End Try 
    Try Enter grpelement Else Let grpelement = 204
    Dim btext$[Len(text$)]
    nb = countoccur(text$,"~") + 1 !# of checkboxes
    nd = countoccur(text$,"&&") !# checked
    totlen = (Int((8 / 10) * Len(text$) - nb - 1 - nd) + (2 * nb)) * 10 !totlen needed to show
    endcolumn = column + 390 \ endrow = row + 24
    !if totlen>?? !need bigger box
    Print PChr$(grpelement,column,row,endcolumn,endrow,title$);'WCGROUP';
    row = row + 12
    start = column + 10
    itext = 1
    For i = 1 To nb
      btext$ = text$[itext] To "~"
      itext = itext + Len(btext$) + 1
      p = Pos(btext$, = "&&")
      If p Let btext$ = btext$[1,p] + btext$[p + 2]
      width = (Int((8 / 10) * Len(btext$)) + 2) * 10
      Print PChr$(startelement - 1 + i,start,row,start + width,row + 10,btext$,2);'WCCHECK';
      If p Print PChr$(startelement - 1 + i);'WCSELECT';"1";'0WCSELECT';
      start = start + width
    Next i
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !printoptions
!
!
External Sub printprompt(...)
  ! displays print printer # prompt and print,exit,help buttons
  ! always assumes printer # prompt is element #120 
  ! pass optional positioning column,row in grid units for printer # prompt
  ! pass optional positioning for Button Column & ros
  ! pass optional : Chan, channel # of window, defaults to -1
  ! if -1 passed for column, printer # prompt is not displayted (letters)
  Try 
    Try Enter column,... Else Let column = 10
    Try Enter row,... Else Let row = 105
    Try Enter ButtonCol,... Else Let ButtonCol = 800
    Try Enter ButtonRow,... Else Let ButtonRow = 210
    Try Enter Chan Else Let Chan = -1
    If column = 0 Let column = 10
    If row = 0 Let row = 105
    If ButtonCol = 0 Let ButtonCol = 800
    If ButtonRow = 0 Let ButtonRow = 210
    If column >= 0 Call GUIInputBox(Chan,120,2,"number","Printer #",column,row,8,2)
    Call GuiButtons(Chan,3,26,"&Print~E&xit~&Help",ButtonCol,ButtonRow,10,100,10)
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !printprompt
!
!
External Sub printinputs(p$,...)
  ! waits for print prompt inputs to be completed, handles help page
  ! returns p$ as printer # or E to exit (pass -1 to not return printer # (letters))
  ! assumes printer # element is 350,global "BLOCKX",0 is blockid
  ! Optional : Chan, Channel # of Window, defaults to -1
  Try 
    Try Enter Chan,... Else Let Chan = -1
    Dim termkey$[1],i$[30],tmp$[30],dateformat$[60]
    Do 
      Call guiinput(Chan,termkey$,i$)
      If termkey$ = 'F1' Or termkey$ = 'F28' !help
        !no Try Call GetGlobals("MENU",1,tmp$) Else Let tmp$ = ""
		call getglobals("BLOCKX",0,tmp$) !blockid
        e = guihelpfile(tmp$,"",60,15) !help display
      End If 
      If termkey$ = 'F29' Let p$ = "S" \ Exit Sub ! Select all check boxes
      If termkey$ = 'F27' Let p$ = "E" \ Exit Sub !exit
      !If termkey$ = 'F25' Let p$ = "N" \ Exit Sub ! Multiple pages
      If termkey$ = 'F26'  !print
        If p$ = "-1" Exit Sub
        p$ = guiquery$(chan,350)
		if p$<>"" 
		   call dxset(0,"printer",p$)
           exit sub !print
		end if
		      i$ = blockguipopup$("E","You must select a printer!","","O")
      End If 
      If i$ <> "" If i$[Len(i$)] = "D" !popup calendar
        ele = Val(i$[1,Len(i$) - 1]) !element
        i$ = GuiQuery$(Chan,ele) !default current value
		i$=dateformat2mmddyy$(i$) !converts whatever dateformat is in dfsystem to mmddyy
		Call guicalendar(i$,i$) !send mmddyy, returns mmddyy or null
        If i$ <> ""
		 i$=mmddyy2dateformat$(i$) !converts mmddyy to whatever dateforamt is in dfsystem
		 Print #Chan;PChr$(ele);'WCSELECT CU';i$;'0WCSELECT'; !redisplay new date
		end if
      End If 
      If i$ <> "" If i$[Len(i$)] = "T" !fill with today's date
        ele = Val(i$[1,Len(i$) - 1]) !element
		call getglobals("dfsystem",0,dateformat$)
        Print #Chan;PChr$(ele);'WCSELECT CU';dateusing$(tim#(0),dateformat$);'0WCSELECT';
      End If 
    Loop 
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Sub !printinputs
!
!
External Function getdate(element,date$,...)
  ! reads in date field & edit checks & reformats date$ variable to yyyymmdd
  ! pass element # of date field, returns date$
  ! optionally pass argument emptyok, if non-zero ok for null date
  ! optionally pass window channel, else assumes -1
  ! if error returns non-zero value
  Try 
    Try Enter emptyok,... Else Let emptyok = 0
    Try Enter Chan Else Let Chan = -1
    !
    Dim i$[10],dateformat$[60]
    i$ = GuiQuery$(Chan,element)
    If emptyok If i$ = "" Let date$ = "" \ Exit Function 0
	i$ = dateformat2mmddyy$(i$)
    i$ = datevalidate$(i$,"mdy") !to yyyymmdd or ""
    If i$ = ""
	  call getglobals("dfsystem",0,dateformat$)
      i$ = blockguipopup$("E","Invalid date entry, re-enter in "+dateformat$+" format!","","O")
      If Chan = -1 Let Chan = -4
      Print #Chan;PChr$(element);'WCSELECT CU 0WCSELECT';PChr$(element);'WCFOCUS';
      Exit Function 1
    End If 
    date$[1,2] = "20"
    If i$[1,2] > "30" If i$[1,2] <= "99" Let date$[1,2] = "19"
    date$[3] = i$[1,2],i$[3,6]
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Function e !getdate
!
!
External Function getcheckbox$(element)
  ! reads checkbox element and returns string value of Y or N
  ! pass element # of checkbox
  Try 
    Dim selected$[1]
    x = GuiQuery$(-1,element)
    If x = 0 Let selected$ = "N" Else Let selected$ = "Y"
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Function selected$ !getcheckbox$
!
!
External Function getradio(startelement,nelements,...)
  ! reads radiobox elements & returns number of the element selected, ie 1, 2, 3
  ! pass starting element # to check and number of sequential element #'s to check
  ! pass optional for window channel #
  !
  Try 
    Try Enter Chan,... Else Let Chan = -1
    Dim answers$[nelements]
    For i = 1 To nelements \ answers$ = answers$,Str$(i) \ Next i
    e = guiqueryradio$(Chan,startelement,nelements,answers$)
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Function e !getradio
!
!
External Function getradio$(startelement,nelements,answers$,...)
  ! reads radiobox elements & returns answers$ character corresponding to the element selected, ie answers$ passed is "ABC",2nd element selected, "B" returned 
  ! pass starting element # to check, number of sequential element #'s to check, corresponding characters to return
  Try 
    Try Enter Chan,... Else Let Chan = -1
    Dim selected$[1]
    selected$ = guiqueryradio$(Chan,startelement,nelements,answers$)
  Else 
    call guisuberr(Spc(8),Spc(10),Msc$(2))
  End Try 
End Function selected$ !getradio$
!
!
!------------------------------------------------------------------------------
! Name:
!   blockScreenInit() - Initializes the screen for a standard block GUI Screen
!
! Usage:
!   Declare External Sub blockScreenInit
!   Call blockScreenInit(status,mode,[title$,title2$])
!
! Description:
!   Initializes the screen for a standard GUI screen
!
! Arguments:
!   status  Returns status of screen initialization
!   mode    0 = menu
!           1 = nonmenu
!           2 = query screen, 1GRIDFONT,Mono
!           3 = print screen, different background
!           4 = report/print screen - diff rules
!         5,6 = regular screens -- diff rules
!   [title$] optional left side - screen title (if null,trys to getglobal)
!   [title2$] optional right side - screen title (company name or Page) (if null, trys to getglobal)
!
External Sub blockScreenInit(status,mode,...)
  Dim date$[25],prog$[30],desc$[30],progtitle$[60],subtitle$[60],cotitle$[60],footer$[80]
  !minrow is definded in dfsystem.txt
  try call getglobals("dfsystem",5,minrow) else minrow=25
  If Msc(34) < minrow
    Print 'XX';"Please set your dL4Term Preferences, Windows size to a minimum of";minrow;"rows"
    Print "Then close & restart dL4Term."
    Pause 50
    status = 1
    Exit Sub 
  End If 
  Try Enter title$,... Else Dim title$[60]
  Try Enter title2$ Else Dim title2$[60]
  If title$ = ""
    !! Try Call GetGlobals("MENU",1,prog$,desc$) Else Rem    !dxblock not used, it is passed
    progtitle$ = prog$," ",desc$
  Else 
    progtitle$ = title$
  End If 
  If title2$ = ""
    !! Try Call GetGlobals("MENU",3,subtitle$) Else Rem      !dxblock not used, it is passed
  Else 
    subtitle$ = title2$
  End If 
  !
  !main title defined in dfsystem.txt
  try call getglobals("dfsystem",3,cotitle$) else call dxget("s_org.name",cotitle$)
  !
  gridfont = 10 \ fontsize = 8 \ Call SetGlobals("GUI",0,gridfont,fontsize)
  try
   Call GetGlobals("COLOR",0,fclr,bclr,highfclr,highbclr)
  else
   fclr=16744600
   bclr=16512
   highfclr=8421500 
   highbclr=12632300
   call setglobals("COLOR",0,fclr,bclr,highfclr,highbclr)
  end try
  !
  If mode = 0 Or mode = 4 !menu screens & print screens
    Call GUIScreenInit(status,-6,-5)
    Call GUISetTitle(-1,cotitle$)
    Call Time(date$)
    Print @0,0;cotitle$; !!!date$;
    Print @700,0;'BBOLD';"Port  ";'EBOLD';Spc(6) Using "####";
    Print @0,8;progtitle$;
	if subtitle$<>"" print " / ";subtitle$;  !@800 - Len(cotitle$) * 10,8;subtitle$;
    Call GUILineSeparator(-1,0,800,17)
    !
    If mode = 0 Call GUIBackColor(-1,20,-4,-3) !change to std colors at row 2
    If mode = 4 Call GUIBackColor(-1,20,-2,-1)
    !
    Call GUIBackColor(-1,270,-6,-5) !copyright line
	!footer defined in dfsystem.txt
	try call getglobals("dfsystem",4,footer$) else rem
    Print Left$(80,footer$)
    If mode = 0 Print '-4BACKCOLOR -3FONTCOLOR';
    If mode = 4 Print '-2BACKCOLOR -1FONTCOLOR';
    !If mode = 4  Call drawimage("logo2.jpg",210,292,269,584)
    ! 
  Else If mode = 2 !query screens
    Print 'XX'; !clears screen, graphical elements & function keys
    Print 'BQ'; !end input echo mode, turn cursor display off
    Print PChr$("Arial Mono for dl4");'FONTFACE 10GRIDFONT 8FONTSIZE';
    Print PChr$(-6);'BACKCOLOR';
    Print PChr$(-5);'FONTCOLOR CS'; !defaults to Windows colors
    Print PChr$("Arial");'FONTFACE';
    !nono Print 'WCSETFONT';
    Print '2WCEVENT 0WCEVENT'; ! Clear deferred input mode
    !don't allow user to close window by click right hand X on title bar
    Print PChr$(1,"Please exit this application normally.");'ONCLOSE';
    Line @0,0; To @800,0; !Line to separate dL4Term menu bar fro
    Print @0,0;title$;@700 - Len(title2$) * 10,0;title2$;
    !
    Call GUIBackColor(-1,10,-4,-3) !change to std colors at row 1
    !
    Print PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE 1GRIDFONT';
  Else If mode = 5 Or mode = 6 !regular screens
    If mode = 5 Print 'XX';
    Print 'BQ';
    Print PChr$("Arial Mono for dl4");'FONTFACE 10GRIDFONT 8FONTSIZE WCSETFONT 10FONTSIZE 1GRIDFONT'
    Call GUISetTitle(-1,title2$)
    Line @0,1; To @80,1; !Line to separate dL4Term menu bar fro
    Print @0,0;title$;@70 - Len(title2$) * 1,0;title2$;
    gridfont = 1 \ fontsize = 1 \ Call SetGlobals("GUI",0,gridfont,fontsize)
  Else If mode !regular screens
    Call GUIScreenInit(status,-6,-5)
    Print @0,0;progtitle$;@700 - Len(title2$) * 10,0;title2$;
    Print @710,0;'BBOLD';"Port  ";'EBOLD';Spc(6) Using "####";
    Call GUILineSeparator(-1,0,800,12)
    !
    Call GUIBackColor(-1,14,-4,-3) !change to std colors at row 1
    !
    !Print PChr$(25,0,0,1,1,"");'WCDEFAULTBTN';
    !Print PChr$(25,1,'CR');'WCACTION' !hidden button action is same as enter
    Print #-4;'WCBQRYBUF'; !jjg 4/6/06 to use range query on entry screens
    Print 'WCEXTKEYS'; !enter same as tab!
  End If 
  Print 'WCEXTKEYS'; !enter same as tab on ALL screens!     (and enter in memo box as new line)
End Sub !blockScreenInit
!
!
External Sub blockTitleBar(row,strg$,...)
  ! Optional  cnt = Number of lines between separator
  ! Optional grid = Grid font size
  !
  Try Enter cnt,... Else Let cnt = 1
  Try Enter Grid Else Let Grid = 1
  Print '-2BACKCOLOR -1FONTCOLOR';
  tmp = 80 * Grid
  Call GUILineSeparator(-1,0,tmp,row)
  Print @0,row + Grid;strg$;
  Call GUILineSeparator(-1,0,tmp,row + ((cnt + 1) * Grid))
  Print '-4BACKCOLOR -3FONTCOLOR';
End Sub !blockTitleBar
!
!
External Sub blockTitleBar2(row,strg$,...)
  !for 10 gridfont 
  !optionally pass column
  Try Enter column Else Let column = 0
  If column Let width = column + Len(strg$) * 10 Else Let width = 800
  Print '-2BACKCOLOR -1FONTCOLOR';
  Call GUILineSeparator(-1,column,width,row)
  Print @column,row + 2;strg$;
  Call GUILineSeparator(-1,column,width,row + 14)
  Print '-4BACKCOLOR -3FONTCOLOR';
End Sub !blockTitleBar2
!
!
External Sub blockColor(type$)
  Dim 4%
  x = 0
  If type$ = "HIGHLIGHT" Let x = 2
  If type$ = "LIST" Let x = 4
  Call GetGlobals("COLOR",x,fontcolor,backcolor)
  Print PChr$(fontcolor);'FONTCOLOR';
  Print PChr$(backcolor);'BACKCOLOR';
End Sub 
