! >>> Program 202b
!
! description  Truck Routing Report
!
! loadsave -w -n 100,10 -o prog/dxport/202b.dl4 src/202b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP  7, 2005  15:12:01
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx2/mx202b.src (univ2) [txc] {16318}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! custom changes for White River Paper for xrev9
!  03/01/00 sms cct131630 - print zlines "printmess" routine 

Declare Intrinsic Sub InpBuf,String
!!
chain read CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,J8
!! 
!Option Default Dialect IRIS1
Rem MX202B - TRUCK ROUTING REPORT PRINT, SORT IS IN MX202A
Rem AUTHOR: MTK   MAR 28, 1989
Rem LAST UPDATE:
Com 1%,PFU1[20],CNVTU[2],UN[2],2%,D8,3%,PFU2[6],CNVTA,A[33]
If Err 0 Gosub ERR_TRAP
Dim S1$[118],D2$[20],S2$[20],L6$[60],L1$[156],STP$[4]
DIM 1%,L3[3],H4[2],F9[1],TSTOP[2],S2[1],EUN[2],PL1[1]
DIM 2%,S1[1],S5,L2[1],L4[3],L6[5],H0[12],H5[16],H6[8],TRMS[1],coid
DIM C5$[20]
DIM 3%,L5[3],L7[12],S3[17],T2[25],TCOD[2],SRN[4],SLOT4[8],SLOT5[8]
DIM 3%,A1[7],T8[2],A1$[156],UNF[6],SLOT1[8],SLOT2[8],SLOT3[8],TOTSLOT[8]
DIM 2%,B[24]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[70],ARDATE$[8],SUNIT$[4],SHIPDATE$[20]
Dim 1%,F,X1,2%,X2,3%,J,X3,T9[20]
Dim K1$[50],K2$[20],K3$[20],X$[20]
DIM K8$[30],C8$[50],C9$[50],PLOC$[20],SCRATCH$[80],fname$[40]
DIM K12$[13],SA$[142],SR$[33],SI$[120],K14$[10],M1$[40]

dim custom_customer$[30]   

!

Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[2000],tmp1$[500],tmp2$[500],tmp3$[500],tmp4$[500],tmp5$[500]
!
Def FNR(H) = Sgn(H) * (Int(Abs(H) * 100 + .5) * .01)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
Read #1,3,0;CNAME$;
Mat Read #1,0,100;ARDATE$;
Mat Read #1,115,60;CUSTOM_CUSTOMER$;               
CUSTOM_CUSTOMER$ = UCase$(trim$(CUSTOM_CUSTOMER$)) 

!COID = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
COID=intCO
FNAME$ = "2/ARTERMCODE"+Str$(COID) \ Ropen #50,FNAME$

If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
J9 = 55 \ If J8 Let J9 = 18
J1 = 99
X2 = D8 \ Gosub L_7700 \ Gosub L_6900 \ SHIPDATE$ = X$


!
!!Print @0,22;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
!!If J8 Print 'CS';
!If Err 0 Gosub ERR_ESCAPE
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"202b",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!
if J8 
  tmp$ = ""
  tmp$ = tmp$ ,"TRUCK#" , fdel$
  tmp$ = tmp$ ,"ZONE" , fdel$
  tmp$ = tmp$ ,"STOP" , fdel$
  tmp$ = tmp$ ,"ORDER#" , fdel$
  tmp$ = tmp$ ,"CUST #" , fdel$
  tmp$ = tmp$ ,"NAME" , fdel$
  tmp$ = tmp$ ,"PCS" , fdel$
  tmp$ = tmp$ ,"CUBE" , fdel$
  tmp$ = tmp$ ,"WEIGHT" , fdel$
  tmp$ = tmp$ ,"COD", fdel$
  tmp$ = tmp$ ,"ADDRESS", fdel$
  tmp$ = tmp$ ,"field 1", fdel$
  tmp$ = tmp$ ,"NOTE", fdel$
  tmp$ = tmp$ ,"ATTN", fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
!
End if
If Err 0 Gosub ERR_TRAP

!!
J4$ = "";STP$ = " ",stp$
F9[0] = 99;F9[1] = 99;K1$ = " ",K1$
L_2000: Search #9,3,1;K1$,R1,E !!\ If E > 2 Gosub ERR_SEARCH
If E Goto OUTEND
If K1$[1,1] >= "{" Goto OUTEND
!If STP$ = "" Let STP$ = K1$[9,12]
If J4$ = "" Let J4$ = K1$
If K1$[1,6] <> J4$[1,6] Gosub L_4000
If K1$[7,8] <> J4$[7,8] Gosub L_4200
J4$ = K1$
Mat Read #3,R1,0;H0;
Mat Read #3,R1,78;H4;
Mat Read #3,R1,84;C5$;
Mat Read #3,R1,104;H5;
Mat Read #3,R1,408;H6;
Mat Read #4,H0[2],0;S1;
Mat Read #4,H0[2],8;S1$;
Mat Read #4,H0[2],126;S2$;
Mat Read #4,H0[2],146;S5;
MAT READ #4,H0[2],154;SRN;
Mat Read #7,H0[3],8;T2;
K2$ = " ",K2$ \ K2$[1,6] = H0[7] Using "######"
L_2045: Search #5,3,1;K2$,V1,E !!\ If E > 2 Gosub ERR_SEARCH
If E Goto L_2100
X2 = K2$[1,6] \ If X2 <> H0[7] Goto L_2100
If (H5[7] = 21 Or H5[7] = 22) And K2$[7,9] = "   " Goto L_2045
Mat Read #5,V1,8;L3; \ Mat Read #5,V1,16;L4;
Mat Read #5,V1,168;L7; \ Mat Read #5,V1,250;UN; \ Mat Read #5,V1,260;S3;
Mat Read #5,V1,256;S2;
Mat Read #5,V1,56;L6; \ Mat Read #5,V1,80;L6$;
Mat Read #5,V1,446;EUN; \ Mat Read #5,V1,452;UNF;
if custom_customer$="WHITERIVER"
	IF S2[0]=3 GOSUB L_5800 \ GOSUB PRINTMESS
Endif
IF CUSTOM_CUSTOMER$="ACME" 
   LET S7200=L7[2]
   IF NOT(L7[2]-L7[0]) GOTO L_2045
else
   IF NOT(L7[4]) GOTO L_2045          ! "none to ship
endif
if custom_customer$<>"WHITERIVER" ! wrp remmed
	If S2[0] = 3 Goto L_2045
Endif
If L3[0] Gosub L_30000 \ Goto L_2074
Mat Read #6,L4,156;B; \ Mat Read #6,L4,0;A1$; \ Mat Read #6,L4,256;A;
Mat Read #6,L4[0],512;PFU1; \ Mat Read #6,L4[0],554;PFU2;
Mat Read #6,L4[0],460;A1; 
L_2074:!
IF CUSTOM_CUSTOMER$="ACME"   
   IF (L7[2]-L7[0])>0 AND A1[3] LET T8[1]=T8[1]+((L7[2]-L7[0])*L6[2])/A1[3]
   LET BSHIPQTY=L7[2]-L7[0]
   LET TOTCUBE=0
   IF (L7[2]-L7[0])>0 AND A1[3] LET TOTCUBE=((L7[2]-L7[0])*L6[2])/A1[3]
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=L7[2]-L7[0] \ GOSUB L_20000:
   LET L7[2]=AMOUNT
else
   IF L7[4]>0 AND A1[3] LET T8[1]=T8[1]+(L7[4]*L6[2])/A1[3] ! "cube should be calc'd before qty convert
   LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=L7[4] \ GOSUB L_20000:
   LET L7[4]=AMOUNT ! " cct118180
endif
If PFU1[8] > 0 Read #10,PFU1[8],10;SUNIT$;
If PFU1[8] = -1 Let SUNIT$ = "CWT "
IF CUSTOM_CUSTOMER$="ACME"   
   IF L7[2]>0 LET T8=T8+L7[2]
   LET T8[2]=T8[2]+S3[4]
   GOSUB CAL_SLOT:
else
   IF L7[4]>0 LET T8=T8+L7[4] ! "qty 
   LET T8[2]=T8[2]+S3[4]
endif
Goto L_2045
L_2100: If Not(T8[1] + T8[0] + T8[2]) Goto L_2180
Gosub L_8100
Gosub L_5800
Gosub L_5000
Gosub L_8200
Gosub L_5100
Gosub L_5150
If C5$[1,2] = "  " And C9$[1,2] = "  "
	tmp4$=fdel$
	tmp5$=fdel$
	Goto L_2175
end if
Gosub L_5800 \ Gosub L_5200
L_2175: !
if J8 
  !xml
  tmp$ = tmp1$,tmp2$,tmp3$,tmp4$,tmp5$
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
IF CUSTOM_CUSTOMER$="ACME"   
   GOSUB PRNT_SHIPLIST:
   GOSUB PRNT_MESSAGES:
endif
if not(J8) Print #0;" " 
J1 = J1 + 1
If K1$[9,12] <> STP$ Let TSTOP[1] = TSTOP[1] + 1;TSTOP[2] = TSTOP[2] + 1
STP$ = K1$[9,12]
L_2180: Gosub L_2200
!!!Signal 2,J0,A,B \ If J0 <> -1 Gosub L_9615
Goto L_2000
L_2200: Rem TOTALS CALC
T9[0] = T9[0] + T8[0] \ T9[1] = T9[1] + T8[1]
TCOD[1] = TCOD[1] + TCOD[0];TCOD[2] = TCOD[2] + TCOD[0]
T9[2] = T9[2] + T8[0] \ T9[3] = T9[3] + T8[1]
T9[4] = T9[4] + T8[2];T9[5] = T9[5] + T8[2]
T8 = 0 \ T8[1] = 0 \ T8[2] = 0
TCOD[0] = 0
Return 
L_4000: Rem TRUCK TOTAL
IF CUSTOM_CUSTOMER$="ACME"   
   GOSUB L_4200:
endif
if not(J8) Print #0;" " 
J1 = J1 + 1
Gosub L_5800
IF CUSTOM_CUSTOMER$="ACME"  
   IF NOT(T9) AND NOT(T9[1]) AND NOT(T9[4]) RETURN 
!else
!   IF TSTOP[2]=0 LET TSTOP[2]=1 !if only 1 line make sure it is counted 
endif
!Let TSTOP[1] = TSTOP[1] + 1;TSTOP[2] = TSTOP[2] + 1  !! got here because of stop change but did not get to counter yet
If Not(T9[0] + T9[1] + T9[4]) Let TSTOP[2] = 0
if not(J8)
  Print #0;"*** TOTALS FOR TRUCK ";S5;"***";
  Print #0; Using "####"; Tab 35;"(NUMBER OF STOPS: ";TSTOP[2];")";
  Print #0; Using "----------.##"; Tab 91;T9;
  Print #0; Using "-------.##"; Tab 104;T9[1];
  Print #0; Using "------.##"; Tab 111;T9[4];
  If TCOD[2] Print #0; Using "------.##"; Tab 122;TCOD[2];
End if
T9[0] = 0;T9[1] = 0;T9[4] = 0
TSTOP[2] = 0;TCOD[2] = 0
stp$=" ",stp$
J4$ = K1$
if not(J8)
  Print #0;" " \ Print #0;" " 
End if
J1 = J1 + 1
IF CUSTOM_CUSTOMER$="ACME"   
LET J1=J1+8
GOSUB L_5800:
PRINT #0; TAB 30;"******* SHIP TO QTY *******";
PRINT #0; TAB 60;"**QTY ORDER - SHIP TO QTY**";
PRINT #0; TAB 90;"******** ORDER QTY ********"
PRINT #0; TAB 0;"SLOT RANGE";
PRINT #0; TAB 30;"CASE   SPLT     WGT    CUBE";
PRINT #0; TAB 60;"CASE   SPLT     WGT    CUBE";
PRINT #0; TAB 90;"CASE   SPLT     WGT    CUBE"
PRINT #0; TAB 0;"A TO Ezzzzz";
PRINT #0; USING "###### "; TAB 30;SLOT1[0];SLOT1[3];SLOT1[2];SLOT1[1];
PRINT #0; USING "###### "; TAB 60;SLOT1[4]-SLOT1[0];SLOT1[7]-SLOT1[3];SLOT1[6]-SLOT1[2];SLOT1[5]-SLOT1[1];
PRINT #0; USING "###### "; TAB 90;SLOT1[4];SLOT1[7];SLOT1[6];SLOT1[5]
PRINT #0; TAB 0;"F TO Fzzzzz";
PRINT #0; USING "###### "; TAB 30;SLOT2[0];SLOT2[3];SLOT2[2];SLOT2[1];
PRINT #0; USING "###### "; TAB 60;SLOT2[4]-SLOT2[0];SLOT2[7]-SLOT2[3];SLOT2[6]-SLOT2[2];SLOT2[5]-SLOT2[1];
PRINT #0; USING "###### "; TAB 90;SLOT2[4];SLOT2[7];SLOT2[6];SLOT2[5]
PRINT #0; TAB 0;"G TO Hzzzzz";
PRINT #0; USING "###### "; TAB 30;SLOT3[0];SLOT3[3];SLOT3[2];SLOT3[1];
PRINT #0; USING "###### "; TAB 60;SLOT3[4]-SLOT3[0];SLOT3[7]-SLOT3[3];SLOT3[6]-SLOT3[2];SLOT3[5]-SLOT3[1];
PRINT #0; USING "###### "; TAB 90;SLOT3[4];SLOT3[7];SLOT3[6];SLOT3[5]
PRINT #0; TAB 0;"I TO Yzzzzz";
PRINT #0; USING "###### "; TAB 30;SLOT4[0];SLOT4[3];SLOT4[2];SLOT4[1];
PRINT #0; USING "###### "; TAB 60;SLOT4[4]-SLOT4[0];SLOT4[7]-SLOT4[3];SLOT4[6]-SLOT4[2];SLOT4[5]-SLOT4[1];
PRINT #0; USING "###### "; TAB 90;SLOT4[4];SLOT4[7];SLOT4[6];SLOT4[5]
PRINT #0; TAB 0;"Z TO zzzzzz";
PRINT #0; USING "###### "; TAB 30;SLOT5[0];SLOT5[3];SLOT5[2];SLOT5[1];
PRINT #0; USING "###### "; TAB 60;SLOT5[4]-SLOT5[0];SLOT5[7]-SLOT5[3];SLOT5[6]-SLOT5[2];SLOT5[5]-SLOT5[1];
PRINT #0; USING "###### "; TAB 90;SLOT5[4];SLOT5[7];SLOT5[6];SLOT5[5]
PRINT #0; TAB 0;"TRUCK TOTAL:";
PRINT #0; USING "###### "; TAB 30;TOTSLOT[0];TOTSLOT[3];TOTSLOT[2];TOTSLOT[1];
PRINT #0; USING "###### "; TAB 60;TOTSLOT[4]-TOTSLOT[0];TOTSLOT[7]-TOTSLOT[3];TOTSLOT[6]-TOTSLOT[2];TOTSLOT[5]-TOTSLOT[1];
PRINT #0; USING "###### "; TAB 90;TOTSLOT[4];TOTSLOT[7];TOTSLOT[6];TOTSLOT[5]
FOR I=1 TO 8
   LET SLOT1[I-1]=0
   LET SLOT2[I-1]=0
   LET SLOT3[I-1]=0
   LET SLOT4[I-1]=0
   LET SLOT5[I-1]=0
   LET TOTSLOT[I-1]=0
NEXT I
ENDIF
J1 = 99
F9[0] = 99
Return 
L_4200: Rem ZONE TOTAL
F9[1] = 99 !;TSTOP[1] = TSTOP[1] + 1;TSTOP[2] = TSTOP[2] + 1 = K1$[9,12]
If Not(T9[2] + T9[3] + T9[5]) Let TSTOP[1] = 0
Return 
if not(J8) Print #0;" " 
J1 = J1 + 1
Gosub L_5800
if not(J8)
  Print #0;"*** TOTALS FOR ZONE ";S2$[19,20];"***";
  Print #0; Using "####"; Tab 35;"(NUMBER OF STOPS: ";TSTOP[1];")";
  Print #0; Using "----------.##"; Tab 91;T9[2];
  Print #0; Using "-------.##"; Tab 104;T9[3];
  Print #0; Using "------.##"; Tab 111;T9[5];
  If TCOD[1] Print #0; Using "------.##"; Tab 122;TCOD[1];
End if
T9[2] = 0 \ T9[3] = 0 \ T9[5] = 0
TSTOP[1] = 0;TCOD[1] = 0
if not(J8) 
  Print #0;" " \ Print #0;" " 
end if
J1 = J1 + 1
F9[1] = 99
Return 
L_5000: Rem PRINT LINE
if j8
  tmp1$ = ""
  tmp2$ = ""
  tmp3$ = ""
  tmp4$ = ""
  tmp5$ = ""
  If F9[0] 
    tmp1$ = tmp1$ ,S5 Using "######", fdel$
  else
	tmp1$ = tmp1$ ,"", fdel$
  End if

  If F9[1] 
    tmp1$ = tmp1$ ,rtrim$(S2$[19,20]), fdel$
  else
	tmp1$ = tmp1$ ,"", fdel$
  End if
  tmp1$ = tmp1$ ,H4[1] Using "####", fdel$
  tmp1$ = tmp1$ ,H0[7] Using "######", fdel$
  tmp1$ = tmp1$ ,H0[4] Using "######", fdel$
  tmp1$ = tmp1$ ,rtrim$(S1$[1,30]), fdel$
  tmp2$ = tmp2$ ,rtrim$(S1$[31,60])
  tmp1$ = tmp1$ ,T8 Using "--------.##", fdel$
  tmp1$ = tmp1$ ,T8[1] Using "-------.##", fdel$
  tmp1$ = tmp1$ ,T8[2] Using "------.##", fdel$
  If TCOD[0] 
    tmp1$ = tmp1$ ,TCOD[0] Using "------.##", fdel$
  else
    tmp1$ = tmp1$ ,"", fdel$
  end if
  
else
!stop !!line!!
  If F9[0] Print #0; Using "######"; Tab 0;S5;
  If F9[1] Print #0; Tab 8;S2$[19,20];
  Print #0; Using "####"; Tab 12;H4[1];
  Print #0; Using "######"; Tab 17;H0[7];
  Print #0; Using "######"; Tab 24;H0[4];
  Print #0; Tab 31;S1$[1,30];
  Print #0; Tab 62;S1$[31,60];
  Print #0; Using "--------.##"; Tab 93;T8;
  Print #0; Using "-------.##"; Tab 104;T8[1];
  Print #0; Using "------.##"; Tab 111;T8[2];
  If TCOD[0] Print #0; Using "------.##"; Tab 122;TCOD[0];
  Print #0;" "
End if
F9[0] = 0 ! ;F9[1] = 0 !(print zone!)
Return 
L_5100: Rem PRINT SECOND LINE OF SHIP TO

if J8
  tmp2$ = tmp2$ ,rtrim$(S1$[61,90])
else
  Print #0; Tab 62;S1$[61,90]
end if
J1 = J1 + 1
Return 

L_5150: !
if J8
  If C8$[1,2] <> "  " let tmp4$ = tmp4$ ,rtrim$(C8$[1,50]) else tmp4$ = tmp4$ ,"" !!note:
  tmp2$ = tmp2$ ,rtrim$(S1$[91,105]), fdel$ !!address
  tmp3$ = tmp3$ ,rtrim$(S1$[106,107]), " ", rtrim$(S1$[108,117]), fdel$
else
  IF CUSTOM_CUSTOMER$="ACME"   
     IF C8$[1,2]<>"  " PRINT #0; TAB 1;"CUST NOTE: ";C8$[1,50];
  else
     IF C8$[1,2]<>"  " PRINT #0; TAB 1;"NOTE: ";C8$[1,50];
  endif
  Print #0; Tab 62;S1$[91,105];", ";S1$[106,107];" ";S1$[108,117];
  Print #0;"" 
End if
J1 = J1 + 1
Return 
L_5200: 
if J8
  If C9$[1,2] <> "  " And C8$[1,2] <> "  " let tmp4$ = tmp4$ ," ",rtrim$(C9$[1,50]), fdel$ else tmp4$ = tmp4$ ,"", fdel$
  tmp5$ = tmp5$ ,rtrim$(C5$[1,20]), fdel$  !!ATTN:
else
  If C9$[1,2] <> "  " And C8$[1,2] <> "  " Print #0; Tab 7;C9$[1,50];
  Print #0; Tab 62;"ATTN:  ";C5$[1,20];
  Print #0;""
End if
Return 
if not(j8) Print #0;" "
Return 
L_5800: Rem HEADINGS ROUTINE
J1 = J1 + 1 \ If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 6
LET PRNTMSG=0
If Not(J8) Print #0;"\15\";
if not(J8)
  Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
  Print #0;" - 202B - ";Msc$(3);
  Print #0; Tab 44;"TRUCK ROUTING REPORT - ";SHIPDATE$
  Print #0;" "
  Print #0; Tab 0;"TRUCK#";
  Print #0; Tab 7;"ZONE";
  Print #0; Tab 12;"STOP";
  Print #0; Tab 17;"ORDER#";
  Print #0; Tab 24;"CUST #";
  Print #0; Tab 31;"NAME";
  Print #0; Tab 62;"ADDRESS";
  Print #0; Tab 95;"PCS";
  Print #0; Tab 105;"CUBE "; Tab 114;"WEIGHT";
  Print #0; Tab 127;"COD";
  Print #0;" "
  if custom_customer$="WHITERIVER" print #0; tab 31;"MESSAGES"
  Print #0;" "
End if
Return 
L_6900: Rem DAY
Z1 = X$[7,8] \ Z2 = X$[1,2] \ Z3 = X$[4,5]
If Z1 < 85 Let Z1 = Z1 + 100
Z4 = Z2 + 1 \ Z5 = Int(1 / Z4 + .7) \ Z6 = Z1 - Z5 \ Z7 = Z4 + 12 * Z5
Z8 = Int(Z7 * 30.6001) + Int(Z6 * 365.25) + Z3 \ Z9 = Z8 - 7 * (Int(Z8 / 7))
J4$ = "SUNDAY   MONDAY   TUESDAY  WEDNESDAYTHURSDAY FRIDAY   SATURDAY "
X$[9] = " ",J4$[Z9 * 9 + 1,Z9 * 9 + 9],"" \ Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
If Fra(L7[4]) Return 
L6[2] = L7[4] * L6[2]
L7[4] = Int(L7[4])
L6$[58,60] = A1$[123,125]
Return 
L_8100: Rem CHECK FOR COD
TRMS[0] = 0;TRMS[1] = 0
If H0[12] > 0 And H0[12] <= 99
  Mat Read #50,H0[12],52;TRMS;
End If 
If TRMS[1] <> 99 Return 
T2[22] = ((T2[1] - T2[3] - H6[6]) * TRMS[0] / 100)
TCOD[0] = FNR(T2[0] - T2[22])
Return 
L_8200: Rem GET NOTES
K8$ = " ",K8$;K8$[1,6] = H0[4] Using "######"
Search #8,2,1;K8$,K1,E !!\ If E > 1 Gosub ERR_SEARCH
C8$ = " ",C8$;C9$ = " ",C9$
If E Goto L_8270
Mat Read #8,K1,0;C8$;
Mat Read #8,K1,50;C9$;
L_8270: Return 
OUTEND: Rem EXIT ROUTINE
Gosub L_4000
!!Print 'CS'
!!!
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  !
  ! External Lib "libgeneral.lib"
  Declare External Sub XMLtoExcel
  Call XMLtoExcel(e$,"202b.txt",rstr$)
  !
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
End 
!!!
!Chain "MX000C"
Stop 
Stop 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 !\ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !\ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !!\ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_30000: Rem ===== set units for conversions (stock/nonstock version)
If S2[0] = 3 Goto L_30099
A[6] = L6[4];A[5] = UNF[5] \ If Not(A[5]) Let A[5] = 1;UNF[5] = 1
A1[3] = UNF[4]
PFU1[0] = EUN[0];PFU1[1] = UN[0]
PFU1[2] = UN[1];PFU1[3] = UN[2]
PFU1[4] = EUN[1]
PFU1[5] = 0;PFU1[6] = 0;PFU1[7] = 0
PFU1[8] = UN[0];PFU1[9] = UN[0];PFU1[10] = EUN[1]
PFU1[11] = UN[2];PFU1[12] = UN[1]
If Not(L3[0]) Goto L_30060
PFU1[13] = UN[0];PFU1[16] = EUN[0];PFU1[17] = EUN[0]
PFU1[18] = UN[0];PFU1[19] = UN[0]
L_30060: PFU2[0] = UNF[0];PFU2[1] = UNF[1]
PFU2[2] = UNF[2];PFU2[3] = UNF[3]
PFU2[4] = 0;PFU2[5] = 0;PFU2[6] = 0
For X1 = 1 To 4
  For X2 = 0 To X1 - 1
    If PFU1[X1] = PFU1[X2] Let PFU1[X1] = 0;PFU2[X1 - 1] = 0
  Next X2
Next X1
L_30099: Return 

PRINTMESS: REM print messages
if not(j8)
PRINT #0; TAB 31;L6$[1,30];" ";L6$[31,60]
LET J1=J1+1
Endif
RETURN 
!================custom codes for Acme
PRNT_MESSAGES: REM "======================================= messages
LET PRNTMSG=0
LET M1$=" ",M1$
LET K14$=" ",K14$;K14$[1,6]=H0[7] USING "######"
LET K14$[7,9]="  1";K14$[10,10]=""
L_5315: SEARCH #14,3,1;K14$,R14,E  !!"\ IF E>2 GOSUB ERR_SEARCH:
IF E GOTO L_5365:
LET ORDNUM=K14$[1,6]
IF ORDNUM<>H0[7] GOTO L_5365:
LET I=K14$[7,9] \ IF I>600 GOTO L_5365:
MAT  READ #14,R14;M1$;
GOSUB L_5800:
IF NOT(PRNTMSG)
   PRINT #0; TAB 0;"SPECIAL MESSAGE: ";
ENDIF 
PRINT #0; TAB 20;M1$ \ LET J1=J1+1 \ LET PRNTMSG=PRNTMSG+1
GOTO L_5315:

L_5365: REM
RETURN 

PRNT_SHIPLIST: REM
READSHIPLIST: REM
LET SI$=" ",SI$
LET SA$=" ",SA$
LET SR$=" ",SR$
LET K12$=" ",K12$
LET K12$[1,6]=SRN[2] USING "######" \ LET K12$[7,7]="."
LET K12$[8,13]=SRN[1] USING "&&&&&&"
SEARCH #12,2,1;K12$,R12,E \ IF E RETURN 
MAT  READ #12,R12,0;SA$;
MAT  READ #12,R12,150;SR$;
MAT  READ #12,R12,204;SI$;
IF SI$[1,1]<>"" IF SI$[1,4]<>"    "
   PRINT #0; TAB 0;"SHIPPING NOTE: ";
   PRINT #0; TAB 20;SI$[1,30];
ENDIF 
IF SI$[31,31]<>"" IF SI$[31,34]<>"    "
   PRINT #0; TAB 60;SI$[31,60];
ENDIF 
IF (SI$[31,31]<>"" AND SI$[31,34]<>"    ") OR (SI$[1,1]<>"" AND SI$[1,4]<>"    ")
	PRINT #0;" " \ LET J1=J1+1
ENDIF 
IF SI$[61,61]<>"" IF SI$[61,64]<>"    "
   PRINT #0; TAB 20;SI$[61,90];
ENDIF 
IF SI$[91,91]<>"" IF SI$[91,94]<>"    "
   PRINT #0; TAB 60;SI$[91,120];
ENDIF 
IF (SI$[31,31]<>"" AND SI$[31,34]<>"    ") OR (SI$[1,1]<>"" AND SI$[1,4]<>"    ")
	PRINT #0;" " \ LET J1=J1+1
ENDIF 
RETURN 

CAL_SLOT: REM
IF L3[0] RETURN 
LET SCRATCH$=" ",SCRATCH$ \ LET PLOC$=" ",PLOC$
LET SCRATCH$[1,12]=A1$[140,151]
PRODLOC_LOOP: REM
LET PLOC$=" ",PLOC$
SEARCH #15,3,1;SCRATCH$,R15,E
if e return
!!"IF E>2 GOSUB ERR_SEARCH:
IF NOT(E) AND SCRATCH$[1,12]=A1$[140,151]
   LET WHSENO=SCRATCH$[13,14]
   IF WHSENO<>H4[2] GOTO PRODLOC_LOOP:
   MAT  READ #15,R15,0;PLOC$;
   MAT  READ #15,R15,18;PL1;
   IF PL1[1]<>1 GOTO PRODLOC_LOOP:
ENDIF 
IF FRA(L7[2])
   LET CQTY=INT(L7[2])
   LET CNVTU[0]=PFU1[8];CNVTU[1]=0;CNVTU[2]=1;CNVTA=CQTY
   GOSUB L_20000:
   LET SQTY=BSHIPQTY-AMOUNT
ELSE 
   LET CQTY=L7[2]
   LET SQTY=0
ENDIF 
LET BORDQTY=S7200
LET TOTORDCUBE=0
LET TOTORDWGT=0
IF S7200 AND A[5] LET TOTORDWGT=(L6[4]*S7200)/A[5]
IF S7200>0 AND A1[3] LET TOTORDCUBE=(S7200*L6[2])/A1[3]
LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1;CNVTA=S7200 \ GOSUB L_20000:
LET S7200=AMOUNT
IF FRA(S7200)
   LET CORDQTY=INT(S7200)
   LET CNVTU[0]=PFU1[8];CNVTU[1]=0;CNVTU[2]=1;CNVTA=CORDQTY
   GOSUB L_20000:
   LET SORDQTY=BORDQTY-AMOUNT
ELSE 
   LET CORDQTY=S7200
   LET SORDQTY=0
ENDIF 
IF PLOC$[13,18]<="Ezzzzz"
   LET SLOT1[0]=SLOT1[0]+CQTY
   LET SLOT1[1]=SLOT1[1]+TOTCUBE
   LET SLOT1[2]=SLOT1[2]+S3[4]
   LET SLOT1[3]=SLOT1[3]+SQTY
   LET SLOT1[4]=SLOT1[4]+CORDQTY
   LET SLOT1[5]=SLOT1[5]+TOTORDCUBE
   LET SLOT1[6]=SLOT1[6]+TOTORDWGT
   LET SLOT1[7]=SLOT1[7]+SORDQTY
   LET TOTSLOT[0]=TOTSLOT[0]+CQTY
   LET TOTSLOT[1]=TOTSLOT[1]+TOTCUBE
   LET TOTSLOT[2]=TOTSLOT[2]+S3[4]
   LET TOTSLOT[3]=TOTSLOT[3]+SQTY
   LET TOTSLOT[4]=TOTSLOT[4]+CORDQTY
   LET TOTSLOT[5]=TOTSLOT[5]+TOTORDCUBE
   LET TOTSLOT[6]=TOTSLOT[6]+TOTORDWGT
   LET TOTSLOT[7]=TOTSLOT[7]+SORDQTY
ENDIF 
IF PLOC$[13,18]>"Ezzzzz" AND PLOC$[13,18]<="Fzzzzz"
   LET SLOT2[0]=SLOT2[0]+CQTY
   LET SLOT2[1]=SLOT2[1]+TOTCUBE
   LET SLOT2[2]=SLOT2[2]+S3[4]
   LET SLOT2[3]=SLOT2[3]+SQTY
   LET SLOT2[4]=SLOT2[4]+CORDQTY
   LET SLOT2[5]=SLOT2[5]+TOTORDCUBE
   LET SLOT2[6]=SLOT2[6]+TOTORDWGT
   LET SLOT2[7]=SLOT2[7]+SORDQTY
   LET TOTSLOT[0]=TOTSLOT[0]+CQTY
   LET TOTSLOT[1]=TOTSLOT[1]+TOTCUBE
   LET TOTSLOT[2]=TOTSLOT[2]+S3[4]
   LET TOTSLOT[3]=TOTSLOT[3]+SQTY
   LET TOTSLOT[4]=TOTSLOT[4]+CORDQTY
   LET TOTSLOT[5]=TOTSLOT[5]+TOTORDCUBE
   LET TOTSLOT[6]=TOTSLOT[6]+TOTORDWGT
   LET TOTSLOT[7]=TOTSLOT[7]+SORDQTY
ENDIF 
IF PLOC$[13,18]>"Fzzzzz" AND PLOC$[13,18]<="Hzzzzz"
   LET SLOT3[0]=SLOT3[0]+CQTY
   LET SLOT3[1]=SLOT3[1]+TOTCUBE
   LET SLOT3[2]=SLOT3[2]+S3[4]
   LET SLOT3[3]=SLOT3[3]+SQTY
   LET SLOT3[4]=SLOT3[4]+CORDQTY
   LET SLOT3[5]=SLOT3[5]+TOTORDCUBE
   LET SLOT3[6]=SLOT3[6]+TOTORDWGT
   LET SLOT3[7]=SLOT3[7]+SORDQTY
   LET TOTSLOT[0]=TOTSLOT[0]+CQTY
   LET TOTSLOT[1]=TOTSLOT[1]+TOTCUBE
   LET TOTSLOT[2]=TOTSLOT[2]+S3[4]
   LET TOTSLOT[3]=TOTSLOT[3]+SQTY
   LET TOTSLOT[4]=TOTSLOT[4]+CORDQTY
   LET TOTSLOT[5]=TOTSLOT[5]+TOTORDCUBE
   LET TOTSLOT[6]=TOTSLOT[6]+TOTORDWGT
   LET TOTSLOT[7]=TOTSLOT[7]+SORDQTY
ENDIF 
IF PLOC$[13,18]>"Hzzzzz" AND PLOC$[13,18]<="Yzzzzz"
   LET SLOT4[0]=SLOT4[0]+CQTY
   LET SLOT4[1]=SLOT4[1]+TOTCUBE
   LET SLOT4[2]=SLOT4[2]+S3[4]
   LET SLOT4[3]=SLOT4[3]+SQTY
   LET SLOT4[4]=SLOT4[4]+CORDQTY
   LET SLOT4[5]=SLOT4[5]+TOTORDCUBE
   LET SLOT4[6]=SLOT4[6]+TOTORDWGT
   LET SLOT4[7]=SLOT4[7]+SORDQTY
   LET TOTSLOT[0]=TOTSLOT[0]+CQTY
   LET TOTSLOT[1]=TOTSLOT[1]+TOTCUBE
   LET TOTSLOT[2]=TOTSLOT[2]+S3[4]
   LET TOTSLOT[3]=TOTSLOT[3]+SQTY
   LET TOTSLOT[4]=TOTSLOT[4]+CORDQTY
   LET TOTSLOT[5]=TOTSLOT[5]+TOTORDCUBE
   LET TOTSLOT[6]=TOTSLOT[6]+TOTORDWGT
   LET TOTSLOT[7]=TOTSLOT[7]+SORDQTY
ENDIF 
IF PLOC$[13,18]>"Yzzzzz"
   LET SLOT5[0]=SLOT5[0]+CQTY
   LET SLOT5[1]=SLOT5[1]+TOTCUBE
   LET SLOT5[2]=SLOT5[2]+S3[4]
   LET SLOT5[3]=SLOT5[3]+SQTY
   LET SLOT5[4]=SLOT5[4]+CORDQTY
   LET SLOT5[5]=SLOT5[5]+TOTORDCUBE
   LET SLOT5[6]=SLOT5[6]+TOTORDWGT
   LET SLOT5[7]=SLOT5[7]+SORDQTY
   LET TOTSLOT[0]=TOTSLOT[0]+CQTY
   LET TOTSLOT[1]=TOTSLOT[1]+TOTCUBE
   LET TOTSLOT[2]=TOTSLOT[2]+S3[4]
   LET TOTSLOT[3]=TOTSLOT[3]+SQTY
   LET TOTSLOT[4]=TOTSLOT[4]+CORDQTY
   LET TOTSLOT[5]=TOTSLOT[5]+TOTORDCUBE
   LET TOTSLOT[6]=TOTSLOT[6]+TOTORDWGT
   LET TOTSLOT[7]=TOTSLOT[7]+SORDQTY
ENDIF 
RETURN 

Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
stop!!!ii
!
include "src/callmainerrnet.inc"
End
!
!Rem {end rtn.error.s}
