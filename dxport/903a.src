! >>> Program 903a
!
! description update user defined categories and product
! loadsave -w -n 100,10 -o prog/dxport/903a.dl4 src/903a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"


Rem BEDIT Version: 2.5 OBJECT CODE     Created: MAY  3, 2016  12:18:29
Rem /x/w2/pm/r2005//x/usracct/mary/work/custom/xrev9/ut903a.src (synergyux.synergy.n) [mgd] {21944}
Rem  Copyright (c) 2016 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!Declare Intrinsic Sub FindF,InpBuf,String
!Option Default Dialect IRIS1
Declare Intrinsic Sub Date,FileInfo,FindF,InpBuf,String,Time,VerifyDate,DateToJulian,StringSearch
Declare Intrinsic Sub Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Declare External Function GetUIDRec,GetUIDInfo$
External Lib "dxblockgeneral.lib"
Declare External Function blockbuildsort


Try
Rem ut903a - update usder defined categoryies and product
Rem rjs
Rem rjs 09/28/09
If Err 0 Goto ERR_TRAP
Dim X$[1000],WK$[1000],WK1$[1000],DESC$[30],Z1$[50],PROD$[12],K$[12],PATH$[50]
Dim UCAT$[100],FILENAME$[50],J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J5$[80]
Dim D$[30],F$[50],G$[30],SPACE$[30],SCRATCH$[30],KEY_$[50],KEY1$[50]
Dim WORK$[3000],WORK1$[3000],J4$[70],J9$[70],I$[50],J7$[70]
Dim 1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 3%,RECD,RECE,RECF,RECG,USRDEFCAT,UCAT[10]
dim BLANK$[50]
Dim fname$[50],groupid$[1],2%,apdate
Dim 1%,tmpmth,tmpyr,S9[1]
DIM SOURCEDIRNAME$[50],TEXTDIRNAME$[50],tmpfile$[80],txtfile$[80]
Dim 3%!
dim custom_customer$[30]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim eparam$[50],blank$[50]
Dim 3%,uarec
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
uarec= GetUIDRec(e$,IntCo,Userid$)
COID=intCO
COMP=intCO
for ctr=0 to 99
	Try Close #ctr Else Rem
next ctr
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
!E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
!F$ = COID Using "CNTRL#"
!PATH$ = "REPORTDIR"
!System 28,PATH$
!If PATH$ = "REPORTDIR" Let PATH$ = "/tmp"
! look for a 903 ini file

Mat Read #1,88,1792;Z1$; \ Open #2,Z1$ ! product file
Z1$ = COID Using "2/usrdefcat#"
Open #3,Z1$
Z1$ = COID Using "2/usrcatprd#"
Open #4,Z1$
!PROMPT_FOR_FILE: Rem
!Print 'CS';"ut903a   User Defined Category Update Utility "
!Print @5,2;"This program will update the User Defined Category file and";
!Print @5,3;"link them to the products from a TAB delimited file."
!Print @5,4;"The first line is the heading"
!Print @5,5;"The following lines should have as the first column the product code"
!Print @5,6;"The next columns are the User Defined Category DESCRIPTION only "
!Print @5,7;"from highest level to the lowest"
!Print @5,9;"The file must be in ";PATH$
!Print @5,11;"1> File Name: ";
!Print @5,14;"2> What are we doing ";
!Gosub GET_FILENAME
!Gosub HOW_UPDATE
!WHAT_TO_DO: Rem whatcha want to do
!Print @0,23;'CL';"Enter #: Field to edit, U: start update, E: exit ";
!Input Len 16384 + 1;""I$ \ Call String(1,I$)
!If I$ = "E" Goto OUTEND
!If I$ = "U" Goto GET_READY
!J = I$
!If J = 1 Gosub GET_FILENAME
!If J = 2 Gosub HOW_UPDATE
!Goto WHAT_TO_DO
!GET_FILENAME: Rem let's get the file name
!J0$ = "2 00252011"
!FILENAME$ = "",FILENAME$
!J5$ = "Enter the file name max 25 characters <CR> to exit"
!Call "inputlc",J1,J$,J0$,J1$,J4$,J5$
!If J4$ = "" Goto OUTEND
!FILENAME$ = J$[1,25]
!Call String(2,FILENAME$)
!Z1$ = PATH$ + "/" + FILENAME$
!Call FindF(Z1$,FOUND)
!If Not(FOUND)
! Input @5,16;'CL';"File not found press <CR> ";""I$
!  Print @5,16;'CL';
! Goto GET_FILENAME
!End If 
! Return 
!HOW_UPDATE: Rem let's get the file name
!J0$ = "2 00013014"
!J5$ = " C: Clear & Load User Defined Category file, A: Add to file only, <CR> exit"
!Gosub ISINPUT
!If J4$ = "" Goto OUTEND
!If J$ <> "C" If J$ <> "A" Goto HOW_UPDATE
!CLRANDLOAD = 0
!If J$ = "C" Let CLRANDLOAD = 1
!Return 
Mat Read #1,115,60;CUSTOM_CUSTOMER$;
custom_customer$ = UCase$(Trim$(custom_customer$))
!Call dxsave(0,"tmp/903a.txt!")
FILENAME$ = "cntrl/ut903.ini"
Call FindF(FILENAME$,A9)
if not(a9)
	let path$="files/reports/"
else
	Open #90,FILENAME$
	Read #90;path$
	X = Len(path$)
	If x>0
		if path$[x,x]="\15\" let path$[x,x]=""
	endif
	path$ = Trim$(path$)
	If path$ = "" Or path$ = "!"
		eflag=eflag+1
		returnstatus=1
		message$=path$+" source directory not set up properly. "
		Goto OUTEND
	End If 
	X = Len(path$)
	If path$[X,X] <> "/" Let path$[X,X] = ""
	Call FindF(path$,A9)
	If Not(A9)
		eflag=eflag+1
		returnstatus=1	
		message$=path$+" - Source Directory Does not exist. "
		Goto OUTEND
	End If 
endif
Call dxget("FNAME",tmp$)
let filename$=lcase$(rtrim$(tmp$))
If FileNAME$ = "" 
	let eflag=eflag+1
	returnstatus=1
	let message$="Invalid File Name Entered "
	Goto OUTEND
endif
For X = 1 To Len(FileNAME$)
  If FileNAME$[X,X] = " " Let FileNAME$[X,X] = "_"
Next X
Z1$ = PATH$ + FILENAME$
Call FindF(Z1$,FOUND)
if not(found)
	let eflag=eflag+1
	let returnstatus=1
	let message$="File "+filename$+" Not Found "
	goto outend:
endif
Call dxget("UPDATEFLAG",tmp$)
LET CLRANDLOAD=99
IF UCASE$(RTRIM$(TMP$))="C" let clrandload=1
if ucase$(rtrim$(tmp$))="A" let clrandload=0
if clrandload<0 or clrandload>1
	let eflag=eflag+1
	let returnstatus=1
	let message$="Invalid Update Flag "
	goto outend:
endif
!HOW_UPDATE: Rem let's get the file name
!J0$ = "2 00013014"
!J5$ = " C: Clear & Load User Defined Category file, A: Add to file only, <CR> exit"
!Gosub ISINPUT
!If J4$ = "" Goto OUTEND
!If J$ <> "C" If J$ <> "A" Goto HOW_UPDATE
!CLRANDLOAD = 0
!If J$ = "C" Let CLRANDLOAD = 1
GET_READY: Rem
CTR = 0
Ropen #5,Z1$
Read #5;WORK$
If rtrim$(WORK$) = "" 
	let eflag=eflag+1
	let returnstatus=1
	let message$="The first line should be the heading - No Update Done "
	goto outend:
endif
!Print @5,5;"The following lines should have as the first column the product code"Goto OUTEND
SPACE$ = " ",SPACE$
!Print #0;WORK$[1,Len(WORK$)]
If CLRANDLOAD=1
	Gosub CLR_FILES
endif
! Print @5,16;'CL';"Updating file ";
GET_USERDEF: Rem get user defined categories
WORK$ = " ",WORK$
Read #5;WORK$
If rtrim$(WORK$) = ""
  Goto OUTEND
End If 
CTR = CTR + 1 ! \ If Not(Fra(CTR / 100)) Print @20,16;'CL';CTR;
Call String(1,WORK$)
POS_ = 1
Gosub L_8000 !
PROD$ = WK$[1,12]
K$ = PROD$[1,12]
Search #2,2,1;K$,R2,E
If E
  Print #0;WORK$[1,Len(WORK$)] + "\11\PRODUCT NOT FOUND"
  Goto GET_USERDEF
End If 
PREC = 0 ! the first one is supposed to be the highest level
GET_UDC_LOOP: Rem let's set them up
Gosub L_8000 !
If PREC = 0 And WK$[1,30] = SPACE$[1,30]
  Print #0;WORK$[1,Len(WORK$)] + "\11\MISSING TOP LEVEL"
  Goto GET_USERDEF
End If 
If WK$[1,30] = SPACE$[1,30]
  Read #2,R2,1254;USRDEFCAT
  KEY_$ = " ",KEY_$
  KEY_$ = USRDEFCAT Using "########"
  KEY_$[9] = PROD$[1,12]
  Search #4,2,1;KEY_$,R4,E
  If Not(E) If KEY_$[9,20] = PROD$[1,12]
    Search #4,5,1;KEY_$,R4,E \ If E Gosub ERR_SEARCH
    E = 3
    Search #4,1,0;KEY_$,R4,E \ If E Gosub ERR_SEARCH
  End If 
  USRDEFCAT = PREC
  KEY_$ = " ",KEY_$
  KEY_$ = USRDEFCAT Using "########"
  KEY_$[9] = PROD$[1,12]
  Search #4,2,1;KEY_$,R4,E
  If Not(E) Goto GET_USERDEF
  E = 2
  Search #4,1,0;KEY_$,R4,E \ If E Gosub ERR_SEARCH
  Write #4,R4;USRDEFCAT
  Mat Write #4,R4,6;PROD$
  Search #4,4,1;KEY_$,R4,E \ If E Gosub ERR_SEARCH
  Write #2,R2,1254;USRDEFCAT
  Goto GET_USERDEF ! reached the end
End If 
UCAT$ = " ",UCAT$
For LOOP_ = 0 To 10 \ UDCAT[LOOP_] = 0 \ Next LOOP_
UCAT$ = WK$[1,30]
Gosub L_3000 !
Goto GET_UDC_LOOP
 
L_3000: Rem ================= look for stuff
KEY_$ = " ",KEY_$
KEY_$[1,8] = PREC Using "########" ! always the upper level's rec
KEY_$[9] = UCAT$[1,30]
Search #3,2,1;KEY_$,REC,E
If E
  E = 2
  Search #3,1,0;KEY_$,REC,E \ If E Gosub ERR_SEARCH
  UCAT$[1,30] = KEY_$[9,38]
  UCAT[0] = REC
  UCAT[1] = KEY_$[1,8]
  Mat Write #3,REC;UCAT$
  Mat Write #3,REC,100;UCAT
  Search #3,4,1;KEY_$,REC,E \ If E Gosub ERR_SEARCH
End If 
PREC = REC
Return 
CLR_FILES: Rem clear out usercatfile, usercatprod & prod file
! Print @5,16;"Clearing out old ";
USRDEFCAT = 0
KEY_$ = " ",KEY_$ \ KEY_$ = ""
CLRPROD_LOOP: Rem clear out user cat in prod
Search #2,3,1;KEY_$,R2,E \ If E If E <> 2 Gosub ERR_SEARCH
If Not(E)
  CTR = CTR + 1 ! \ If Not(Fra(CTR / 100)) Print @25,16;'CL';CTR;
  Write #2,R2,1254;USRDEFCAT
  Goto CLRPROD_LOOP
End If 
KEY_$ = " ",KEY_$ \ KEY_$ = ""
UDCCLR_LOOP: Rem clear out user defined categoery file
Search #3,3,1;KEY_$,R3,E
If Not(E)
  CTR = CTR + 1 ! \ If Not(Fra(CTR / 100))  !  Print @25,16;'CL';CTR;
  Search #3,5,1;KEY_$,R3,E \ If E Gosub ERR_SEARCH
  E = 3
  Search #3,1,0;KEY_$,R3,E \ If E Gosub ERR_SEARCH
  Goto UDCCLR_LOOP
End If 
KEY_$ = " ",KEY_$ \ KEY_$ = ""
UDCPRDCLR_LOOP: Rem clear out user cat prod file
Search #4,3,1;KEY_$,R4,E
If Not(E)
  CTR = CTR + 1 ! \ If Not(Fra(CTR / 100)) Print @25,16;'CL';CTR;
  Search #4,5,1;KEY_$,R4,E \ If E Gosub ERR_SEARCH
  E = 3
  Search #4,1,0;KEY_$,R4,E \ If E Gosub ERR_SEARCH
  Goto UDCPRDCLR_LOOP
End If 
CTR = 0
Return 

L_8000: Rem search comma delimited files
WK1$ = " ",WK1$ \ WK1$ = WORK$[POS_]
Search WK1$,"\11\",CT
WK$ = " ",WK$
If CT = 1 Goto L_8060
If CT = 0
  CT = Len(WK1$)
  If CT <= 1 Goto L_8060
End If 
WK$[1,CT - 1] = WK1$[1,CT - 1]
L_8060: POS_ = POS_ + CT
Return 


ERR_SEARCH: Rem                         
ENUM = E;ELINE = Spc(16);CTERR = 0           
If E = 5 Let CTERR = Err(8)                  
msg$ = "RETURN STATUS",(E + (CTERR * .001))  
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump()
e$ = msg$ \ Error 10000                      
Return ! End  
                             
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

ERR_MSG: ! send message
ReturnStatus=0! need report to print still
let eflag=1
Message$=E$
call programdump()


OUTEND: Rem END
if eflag<>0 let returnstatus=1 ! error

Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	let message$="Update Complete"
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
! try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
end try
End ! the whole program
