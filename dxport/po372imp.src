Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAR 25, 2003  11:32:40
! loadsave -w -n 100,10 -o prog/dxport/po372imp.dl4 src/po372imp.src
Rem /w/papermaster/r2002//usr/acct/jcs/work/r2002/po/po372imp.src (univ2) [jcs] {05660}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem



Declare Intrinsic Sub FindF,InpBuf,String
Declare Intrinsic Sub FormatDate,Logic,MiscStr,Time,VerifyDate
!Option Default Dialect IRIS1
Declare Intrinsic Sub getglobals
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function Openfile

Rem REM  po372imp - PO receipts Boat/Container Prints
Rem REM    For Etna - Feb  9, 1996  11:02 am
Rem rem    2 diff sorts 1:boat/cont/item, 2:boat/cont/PO #
TRY
Enter SOURCE,REPRINT,chan[],specs[],e$,IntCo,rstr$
! If Err 0 Gosub ERR_TRAP
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.vend.i}
Dim 1%,VNDA[4],VNDM4[1]
Dim 2%,VND1[6],VND3
Dim 3%,VNDA2[11],VNDC1[5],VND4[1],VNDA3[7]
Dim VNDA$[264],VNDC2$[44],VNDA1$[20],VNDA2$[8],VNDA3$[4],VNDA5$[60]
Rem {end dim.vend.i}
Rem {begin src/inc/dim.pohead.i}
Dim 2%,POH0[5],POH3[4],POH[4],POH6[1]
Dim 1%,POH4[3],POH1[9],POH5[10]
Dim 3%,POH7,POH8[9],POH9[12]
Dim POH$[82],POH1$[116],ST$[14],POH2$[40]
Rem {end dim.pohead.i}
Rem {begin src/inc/dim.poline.i}
Dim 1%,POL1[5],POL0[4],POMISC[2]
Dim 2%,POL2[2]
Dim 3%,POL3[6],POL[5],POL4[23],POL5[9],POL6[9]
Dim POL1$[120]
Rem {end dim.poline.i}
Dim FLE$[16],DATE$[8],X$[10],J$[60],J4$[50],CNAME$[30],P9$[50],P60$[50]
Dim TME$[26],KEY_POHEAD$[10],KEY_POLINE$[20],KEY_POLOT$[50],BOAT$[14]
Dim CONT$[14],STKUM$[4],SELLUM$[4],NSD$[96],POLT1$[38]
Dim KEY_SORT$[60],LOT$[20],WFLE$[20]
Dim 1%,CNVTU[2],FLAG,SC,SR,NSD1[7]
Dim 2%,DATE,NSD2[4]
Dim 3%,CNVTA,AMOUNT,NSD3[9],POLT1[4],DSPL[10],P0TTL,P2TTL[5],P3TTL[5]
Dim 3%,P1TTL,BTTTL[5],DISP_COST,DISP_QTY,DISP_EXT
dim msg$[100]
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]

Dim 3%
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) / 100)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
OPNFILES: Rem "Open any needed files
! COID = Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
COID=INTCO
!chan[0] = cntrl file
!chan[1] = purchase order header  #60 	
!chan[2] = purchase order lines   #61
!chan[3] = po lot file
!chan[4] = product file #64
!chan[5] = vendor file 
!chan[6] = nonstock #66
!chan[7] = unit of measure file #67

!specs[0]= receipt date (yymmdd) 

! openfiles 
if not (chan[0]) ! cntrl file
	ch_cntrl= OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ch_cntrl=chan[0]
endif
if not (chan[1]) ! purchase order header  #60
	 Ch_Pohead = openfile(2416,intCo) \ If Ch_Pohead = -1 Error 42     !"po header file
else
	ch_pohead=chan[1]
endif
if not (chan[2]) ! po lines #61
	Ch_PoLine = openfile(2432,intCo) \ If Ch_Poline = -1 Error 42     !"po lines file
else
	let ch_poline=chan[2]
endif
if not (chan[3]) ! po lot
	Ch_polot = openfile(1088,intCo) \ If Ch_Polot = -1 Error 42     !"po lines file
else
	let ch_polot=chan[3]
endif
if not (chan[4]) ! product file #64
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
else
	let ch_prod=chan[4]
endif
if not(chan[5])
	Ch_Vend = OpenFile(2400,intCo) \ If Ch_Vend = -1 Error 42  !product file 
else
	let CH_VEND=chan[5]
endif
if not (chan[6]) !  nonstock #66
	ch_ponstk=OpenFile(2448,intCo) \ If Ch_ponstk = -1 Error 42 ! nonstock product
else
	let ch_ponstk=chan[6]
endif
if not (chan[7]) ! unit of measure file #67
	Ch_Ccodes = OpenFile(-1728,intCo) \ If Ch_Ccodes = -1 Error 42  !u/m codes file
else
	let ch_ccodes=chan[7]
endif


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
CH_SORT=FindChannel()
WFLE$ = "6/IMPWORK" + Str$(Spc(6))

Try 
	kill wfle$
else
	rem
end try

J$ = "[1:256]<00>" + WFLE$
Build #CH_SORT,J$
KSIZE = 25
Search #CH_SORT,0,1;J4$,KSIZE,E \ If E Gosub ERR_SEARCH
NUMRECS = 100;E = 0
Search #CH_SORT,0,0;J4$,NUMRECS,E \ If E Gosub ERR_SEARCH
close #ch_sort
open #ch_sort,wfle$

GET_CNTRLINFO: Rem "get Control file info
Read #CH_CNTRL,3,0;CNAME$;
Mat Read #CH_CNTRL,19,50;P9$;
Mat Read #CH_CNTRL,60,50;P60$;
Call Time(TME$)
TME$[13] = "" \ Call VerifyDate(TME$,X$,E)
Call FormatDate(X$,DATE$,E)
If P60$[46,46] <> "Y" Goto OUTEND
if specs[0]<>0 ! receipt date is sent
	let x$=specs[0] using "&&&&&&" ! mmddyy
	let date$=x$[1,2],"/",x$[3,4],"/",x$[5,6]
endif
STRTHERE: Rem "Start here
STRTSORT: Rem "Go thru PO Head & Lines
!Print @0,22;'CE';"SORTING, PLEASE WAIT. . ." \ Signal 3,0
KEY_POHEAD$ = " ",KEY_POHEAD$;KEY_POHEAD$[1,2] = " 5"
If SOURCE = 373 And REPRINT Let KEY_POHEAD$[1,2] = " 6"
POH_LOOP: Rem "Loop Until Done
Search #CH_POHEAD,3,1;KEY_POHEAD$,REC_POHEAD,E \ If E = 2 Goto SORTDONE
If E Gosub ERR_SEARCH
X2 = KEY_POHEAD$[1,2]
If X2 > 6 Goto SORTDONE
If SOURCE = 372 
	If Not(REPRINT) And X2 > 5 Goto SORTDONE
endif
Gosub READ_POHEAD
If POH4[0] < 4 Or POH4[0] > 6 Goto POH_LOOP
KEY_POLINE$ = " ",KEY_POLINE$
KEY_POLINE$[1,6] = POH0[2] Using "######"
POL_LOOP: Rem "loop thru PO Lines
Search #CH_POLINE,3,1;KEY_POLINE$,REC_POLINE,E \ If E = 2 Goto POH_LOOP
If E Gosub ERR_SEARCH
If KEY_POLINE$[1,6] <> KEY_POHEAD$[3,8] Goto POH_LOOP
Gosub READ_POLINE
If POL1[0] <> 2 Goto POL_LOOP
If POL3[4] = 0 Goto POL_LOOP
KEY_SORT$ = " ",KEY_SORT$
KEY_SORT$[1,1] = " "
KEY_SORT$[2,15] = POL1$[107,120]
KEY_SORT$[16,29] = POL1$[93,106]
KEY_SORT$[30,41] = POL1$[81,92]
KEY_SORT$[42] = KEY_POLINE$
Search #CH_SORT,4,1;KEY_SORT$,REC_POLINE,E \ If E Gosub ERR_SEARCH
KEY_SORT$[1,1] = "2"
KEY_SORT$[30] = KEY_POLINE$
Search #CH_SORT,4,1;KEY_SORT$,REC_POLINE,E \ If E Gosub ERR_SEARCH
Goto POL_LOOP
SORTDONE: Rem "Sort is Done, Print it
J1 = 90;J9 = 60;J2 = 0;EOF = 0
KEY_SORT$ = " ",KEY_SORT$
!Print @0,22;'CE';"PRINTING, PLEASE WAIT. . ." \ Signal 3,0
!If Err 0 Gosub ERR_ESCAPE
If PASS > 1 Let KEY_SORT$[1,1] = "2"
Call MiscStr(1,J4$)
SORT_LOOP: Rem "Loop Thru all
Search #CH_SORT,3,1;KEY_SORT$,REC_POLINE,E \ If E = 2 Goto RNGDONE
If E Gosub ERR_SEARCH
If PASS < 2 If KEY_SORT$[1,1] <> " " Goto RNGDONE
If J4$ = "" Let J4$ = KEY_SORT$[2]
If J4$[1,14] <> KEY_SORT$[2,15] Gosub NEW_BOAT
If J4$[15,28] <> KEY_SORT$[16,29] Gosub NEW_CONTR
J4$ = KEY_SORT$[2]
Gosub READ_POLINE
REC_POHEAD = POL3[0]
Gosub READ_POHEAD
REC_VEND = POH0[1]
Gosub READ_VENDOR
Gosub GET_PROD
If PASS < 2 And LOTCNTRL Gosub GET_POLOT \ Goto SORT_LOOP
POLT1[3] = POL3[4];LOT$ = "STOCK" + POL1[1] Using "&&"
Gosub CONV_INFO
Gosub PRNT_HEDNG
Gosub PRNT_DETL
If PASS = 1 Gosub PRNT_BLNKS
Gosub ADD_TOTALS
Goto SORT_LOOP
ADD_TOTALS: Rem "Add Needed Totals
If PASS < 2
  P0TTL = P0TTL + DSPL[1]
End If 
If PASS > 1
  P2TTL[0] = P2TTL[0] + DSPL[1]
  P2TTL[1] = P2TTL[1] + POL4[7]
  P2TTL[2] = P2TTL[2] + POL3[6]
  P2TTL[3] = P2TTL[3] + POL5[0]
End If 
Return 
NEW_BOAT: Rem "New Boat - Print Totals
If PASS < 2 Gosub PASS0_TTL
If PASS > 1 Gosub PASS2_TTL
If PASS = 3 Gosub BOAT_TTL
J1 = 90
If PASS > 1 Let J4$ = KEY_SORT$[2]
Return 
NEW_CONTR: Rem "New Container - Print Totals
If PASS < 2 Gosub PASS0_TTL \ Return 
Gosub PASS2_TTL
If PASS = 2 And J4$[1,14] = KEY_SORT$[2,15] Let J4$ = KEY_SORT$[2] \ Gosub HEADONLY
Return 
PASS0_TTL: Rem "Print Totals Pass 0
If P0TTL = 0 Return 
Print #0;""
Print #0;"** SUB-TOTALS **";
Print #0; Using "########.##"; Tab 26;P0TTL
If PASS > 0 Let J1 = 90
P1TTL = P1TTL + P0TTL;P0TTL = 0
Return 
PASS1_TTL: Rem "print Totals
Print #0;""
Print #0;"** REPORT TOTALS **";
Print #0; Using "########.##"; Tab 26;P1TTL
J1 = 90
P1TTL = 0
Return 
PASS2_TTL: Rem "Totals for Containers
Print #0;J4$[15,28];
Print #0; Using "######"; Tab 50;P2TTL[0];
Print #0; Using "########.##"; Tab 63;P2TTL[1];
Print #0; Using "######.##"; Tab 82;P2TTL[2];
Print #0; Using "######.##"; Tab 91;P2TTL[3];
If PASS = 3
  DSPL[9] = 0 \ If P2TTL[2] Let DSPL[9] = FNR(P2TTL[3] / P2TTL[2])
  Print #0; Using "#####.##"; Tab 105;DSPL[9];
  DSPL[8] = 0 \ If P2TTL[0] Let DSPL[8] = FNR(P2TTL[2] / P2TTL[0])
  Print #0; Using "#####.##"; Tab 118;DSPL[8];
  For X = 0 To 3
    BTTTL[X] = BTTTL[X] + P2TTL[X]
    P3TTL[X] = P3TTL[X] + P2TTL[X]
  Next X
End If 
For X = 0 To 3 \ P2TTL[X] = 0 \ Next X
Print #0;"" \ J1 = J1 + 1
If PASS = 2 Print #0;"" \ J1 = J1 + 1
Return 
PASS3_TTL: Rem "Final Totals
J1 = 90 \ Gosub PRNT_HEDNG
Print #0;"\15\"
Print #0;"*** REPORT TOTALS ***";
Print #0; Using "#######"; Tab 49;P3TTL[0];
Print #0; Using "########.##"; Tab 63;P3TTL[1];
Print #0; Using "######.##"; Tab 82;P3TTL[2];
Print #0; Using "######.##"; Tab 91;P3TTL[3];
DSPL[9] = 0 \ If P3TTL[2] Let DSPL[9] = FNR(P3TTL[3] / P3TTL[2])
Print #0; Using "#####.##"; Tab 105;DSPL[9];
DSPL[8] = 0 \ If P3TTL[0] Let DSPL[8] = FNR(P3TTL[2] / P3TTL[0])
Print #0; Using "#####.##"; Tab 118;DSPL[8]
Print #0;""
DSPL[7] = 0 \ If P3TTL[0] Let DSPL[7] = FNR(P3TTL[1] / P3TTL[0])
Print #0;"AVERAGE FOB CARTON";
Print #0; Using "#######.##"; Tab 64;DSPL[7]
Print #0;"AVERAGE OCEAN FRT PER CUBIC FOOT";
DSPL[7] = 0 \ If P3TTL[2] Let DSPL[7] = FNR(P3TTL[3] / P3TTL[2])
Print #0; Using "#######.##"; Tab 64;DSPL[7]
Print #0;"AVERAGE CUBE PER CARTON";
DSPL[7] = 0 \ If P3TTL[0] Let DSPL[7] = FNR(P3TTL[2] / P3TTL[0])
Print #0; Using "#######.##"; Tab 64;DSPL[7]
Return 
BOAT_TTL: Rem "Boat Total
If J1 + 5 > J9 Let J1 = 90 \ Gosub PRNT_HEDNG
Print #0; Using "#######"; Tab 49;BTTTL[0];
Print #0; Using "########.##"; Tab 63;BTTTL[1];
Print #0; Using "######.##"; Tab 82;BTTTL[2];
Print #0; Using "######.##"; Tab 91;BTTTL[3];
DSPL[9] = 0 \ If BTTTL[2] Let DSPL[9] = FNR(BTTTL[3] / BTTTL[2])
Print #0; Using "#####.##"; Tab 105;DSPL[9];
DSPL[8] = 0 \ If BTTTL[0] Let DSPL[8] = FNR(BTTTL[2] / BTTTL[0])
Print #0; Using "#####.##"; Tab 118;DSPL[8]
Print #0;""
DSPL[7] = 0 \ If BTTTL[0] Let DSPL[7] = FNR(BTTTL[1] / BTTTL[0])
Print #0;"AVERAGE FOB CARTON";
Print #0; Using "#######.##"; Tab 64;DSPL[7]
Print #0;"AVERAGE OCEAN FRT PER CUBIC FOOT";
DSPL[7] = 0 \ If BTTTL[2] Let DSPL[7] = FNR(BTTTL[3] / BTTTL[2])
Print #0; Using "#######.##"; Tab 64;DSPL[7]
Print #0;"AVERAGE CUBE PER CARTON";
DSPL[7] = 0 \ If BTTTL[0] Let DSPL[7] = FNR(BTTTL[2] / BTTTL[0])
Print #0; Using "#######.##"; Tab 64;DSPL[7]
For X = 0 To 5 \ BTTTL[X] = 0 \ Next X
Return 
PRNT_DETL: Rem "Line Detail
If PASS < 2
  Print #0;POL1$[93,106];
  Print #0; Tab 15;POL1$[81,92];
  Print #0; Using "######.##"; Tab 28;DSPL[1];"/";STKUM$;
  DSPL[5] = 0 \ If DSPL[1] Let DSPL[5] = DSPL[2] / DSPL[1]
  Print #0; Using "#####.##"; Tab 43;DSPL[5];
  Print #0; Using "######.##"; Tab 52;DSPL[2];"/";SELLUM$;
  Print #0; Using "#####.##"; Tab 67;DSPL[3];
  Print #0; Using "######"; Tab 76;POH0[2];
  Print #0; Using "######"; Tab 83;POH3[3];
  Print #0; Tab 90;LOT$
  J1 = J1 + 1
  If SOURCE = 373 Print #0; Tab 15;POL1$[1,30] \ J1 = J1 + 1
End If 
If PASS = 2
  Print #0;VNDA$[1,30];
  Print #0; Using "######"; Tab 31;POH0[2];
  Print #0; Tab 38;POL1$[81,92];
  Print #0; Using "######"; Tab 50;DSPL[1]; Tab 57;DSPL[2];
  Print #0; Using "#######.##"; Tab 64;POL4[7];
  DSPL[5] = 0 \ If DSPL[1] Let DSPL[5] = FNR(POL3[6] / DSPL[1])
  Print #0; Using "####.##"; Tab 75;DSPL[5];
  Print #0; Using "#####.##"; Tab 83;POL3[6];
  Print #0; Using "######.##"; Tab 91;POL5[0]
  J1 = J1 + 1
End If 
Return 
PRNT_BLNKS: Rem "For PASS 1
If J1 + 14 > J9 Let J1 = 90
For X = 1 To 14
  Print #0;""
Next X
J1 = J1 + 14
Return 
PRNT_HEDNG: Rem "Report Heading
If PASS = 1 If J1 < 54 Return 
If PASS <> 1 If J1 < J9 Return 
Print #0;"\14\";
Print #0;""
J2 = J2 + 1;J1 = 3
TME$ = "" \ Call Time(TME$)
Print #0; Tab 5;TME$; Tab (64 - (Int(Len(CNAME$) / 2)));CNAME$;
Print #0; Tab 100;"PAGE ";J2
Print #0; Tab 55;"BOAT PAPERS";
If SOURCE = 372 Print #0;" VERIFICATION" Else Print #0;" JOURNAL"
HEADONLY: Rem "Don't want new Page
If PASS < 2
  Gosub CONTDTL_HEDNG
Else 
  If PASS = 2
    Gosub CONTSUM_HEDNG
  Else 
    If Not(EOF) Gosub BOATSUM_HEDNG
  End If 
End If 
Return 
CONTDTL_HEDNG: Rem "Container Detail
Print #0;""
Print #0; Tab 2;"BOAT: ";J4$[1,14]
Print #0; Tab 2;"ARRIVAL DATE: ";DATE$
Print #0;""
Print #0; Tab 29;"# OF"; Tab 45;"CASE"; Tab 54;"EA/DOZ"; Tab 68;"WEIGHT"
Print #0;"CONTAINER #"; Tab 15;"ITEM CODE";
Print #0; Tab 29;"CARTONS"; Tab 45;"PACK"; Tab 52;"QUANTITY";
Print #0; Tab 66;"OF CARTON"; Tab 77;"PO #";
Print #0; Tab 83;"VENDOR"; Tab 90;"LOT #"
Print #0;""
J1 = J1 + 7
Return 
CONTSUM_HEDNG: Rem "Container Part 2 Heading
Print #0;""
Print #0;"VESSEL: ";J4$[1,14];
Print #0; Tab 38;"B/L#"; Tab 57;"CONTAINER#"
Print #0;"ARRIVAL DATE: ";DATE$;
Print #0; Tab 33;"________________";
Print #0; Tab 57;J4$[15,28]
Print #0; Tab 69;"FOB"; Tab 77;"CFT /";
Print #0; Tab 86;"TOTAL"; Tab 95;"OCEAN"
Print #0;"VENDOR"; Tab 31;"P.O. #";
Print #0; Tab 38;"ITEM CODE"; Tab 49;"CARTONS";
Print #0; Tab 57;"EA/DOZ"; Tab 69;"COST";
Print #0; Tab 76;"CARTON"; Tab 87;"CFT";
Print #0; Tab 96;"FRT"
J1 = J1 + 4
Return 
BOATSUM_HEDNG: Rem "Heading for Boat Summary
Print #0;""
Print #0; Tab 31;J4$[1,14]
Print #0; Tab 31;"OCEAN FREIGHT SUMMARY"
Print #0;""
Print #0; Tab 69;"FOB"; Tab 86;"TOTAL";
Print #0; Tab 95;"OCEAN"; Tab 105;"OCN FRT";
Print #0; Tab 119;"CFT /"
Print #0; Tab 49;"CARTONS"; Tab 69;"COST";
Print #0; Tab 87;"CFT"; Tab 96;"FRT";
Print #0; Tab 105;"PER CFT"; Tab 119;"CARTON"
J1 = J1 + 6
Return 
READ_POHEAD: Rem "that's right
Rem {begin src/inc/read.pohead.i}
Mat Read #CH_POHEAD,REC_POHEAD,0;POH0;
Mat Read #CH_POHEAD,REC_POHEAD,24;POH$;
Mat Read #CH_POHEAD,REC_POHEAD,106;POH1$;
Mat Read #CH_POHEAD,REC_POHEAD,222;POH3;
Mat Read #CH_POHEAD,REC_POHEAD,242;POH4;
Mat Read #CH_POHEAD,REC_POHEAD,250;POH8;
Mat Read #CH_POHEAD,REC_POHEAD,310;POH;
Mat Read #CH_POHEAD,REC_POHEAD,330;POH1;
Mat Read #CH_POHEAD,REC_POHEAD,350;POH9;
Mat Read #CH_POHEAD,REC_POHEAD,428;ST$;
Mat Read #CH_POHEAD,REC_POHEAD,442;POH2$;
Mat Read #CH_POHEAD,REC_POHEAD,482;POH5;
Mat Read #CH_POHEAD,REC_POHEAD,504;POH6;
Mat Read #CH_POHEAD,REC_POHEAD,528;POH7;
Rem {end read.pohead.i}
Return 
READ_POLINE: Rem "you are correct
Rem {begin src/inc/read.poline.i}
Mat Read #CH_POLINE,REC_POLINE,0;POL1;
Mat Read #CH_POLINE,REC_POLINE,12;POL2;
Mat Read #CH_POLINE,REC_POLINE,24;POL3;
Mat Read #CH_POLINE,REC_POLINE,66;POL1$;
Mat Read #CH_POLINE,REC_POLINE,186;POL;
Mat Read #CH_POLINE,REC_POLINE,222;POL0;
Mat Read #CH_POLINE,REC_POLINE,232;POL4;
Mat Read #CH_POLINE,REC_POLINE,376;POMISC;
Mat Read #CH_POLINE,REC_POLINE,382;POL5;
Mat Read #CH_POLINE,REC_POLINE,442;POL6;
Rem {end read.poline.i}
DISP_QTY = POL3[4];DISP_COST = POL4[0] \ Gosub CALC_DISP_EXT
POL4[7] = DISP_EXT
Return 
GET_PROD: Rem "either stock or nonstock
Call Logic(1,2 ^ 0,POL1[3],NONSTK)
LOTCNTRL = 0
If Not(NONSTK)
  REC_PROD = POL3[1]
  Rem {begin src/inc/read.prod.i}
  Mat Read #CH_PROD,REC_PROD,0;A$
  Mat Read #CH_PROD,REC_PROD,156;B
  Mat Read #CH_PROD,REC_PROD,256;A
  Mat Read #CH_PROD,REC_PROD,460;A1
  Mat Read #CH_PROD,REC_PROD,508;A2
  Mat Read #CH_PROD,REC_PROD,512;PFU1
  Mat Read #CH_PROD,REC_PROD,554;PFU2
  Mat Read #CH_PROD,REC_PROD,596;PRPARC
  Mat Read #CH_PROD,REC_PROD,620;LM
  Mat Read #CH_PROD,REC_PROD,624;PR_PO
  Read #CH_PROD,REC_PROD,630;LLC
  Mat Read #CH_PROD,REC_PROD,632;PSN$
  Mat Read #CH_PROD,REC_PROD,652;PSN
  Mat Read #CH_PROD,REC_PROD,660;U2
  Mat Read #CH_PROD,REC_PROD,670;U4
  Read #CH_PROD,REC_PROD,678;U3
  Mat Read #CH_PROD,REC_PROD,684;U3$
  Mat Read #CH_PROD,REC_PROD,744;HZ$
  Mat Read #CH_PROD,REC_PROD,834;A3
  Mat Read #CH_PROD,REC_PROD,846;PFTB
  Read #CH_PROD,REC_PROD,854;UPCT
  Mat Read #CH_PROD,REC_PROD,856;C1$
  Mat Read #CH_PROD,REC_PROD,894;PR_C4
  Read #CH_PROD,REC_PROD,938;PF_LOAD2
  Mat Read #CH_PROD,REC_PROD,944;PR_A2$
  Mat Read #CH_PROD,REC_PROD,974;PFCO
  Mat Read #CH_PROD,REC_PROD,990;PLV
  Mat Read #CH_PROD,REC_PROD,1002;PLC
  Mat Read #CH_PROD,REC_PROD,1018;PFN
  Rem {end read.prod.i}
  If P9$[1,1] = "Y" Or (P9$[1,1] = "B" And A$[113,113] = "Y") Let LOTCNTRL = 1
Else 
  REC_NONSTK = POL3[1]
  Mat Read #CH_PONSTK,REC_NONSTK;NSD$
  Mat Read #CH_PONSTK,REC_NONSTK,96;NSD1
  Mat Read #CH_PONSTK,REC_NONSTK,112;NSD2
  Mat Read #CH_PONSTK,REC_NONSTK,132;NSD3;
  For X0 = 0 To 20
    If X0 < 21 Let PFU1[X0] = 0
    If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
    If X0 < 7 Let PFU2[X0] = 0
    If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
  Next X0
  A[5] = NSD3[7];A[6] = NSD3[6];B[23] = NSD3[2];A1[3] = NSD3[8]
  POL4[12] = NSD3[6];POL4[13] = NSD3[7];POL4[14] = NSD3[2];POL4[15] = NSD3[8]
  PFU1[8] = NSD1[5];PFU1[10] = NSD1[4];PFU1[11] = NSD1[3]
  POLT1[3] = POL3[4]
End If 
Return 
READ_VENDOR: Rem "that's what it says
Rem {begin src/inc/read.vend.i}
Mat Read #CH_VEND,REC_VEND,0;VNDA$
Mat Read #CH_VEND,REC_VEND,264;VND1
Mat Read #CH_VEND,REC_VEND,292;VNDA2
Mat Read #CH_VEND,REC_VEND,364;VNDC1
Mat Read #CH_VEND,REC_VEND,400;VNDC2$
Mat Read #CH_VEND,REC_VEND,444;VND3
Mat Read #CH_VEND,REC_VEND,448;VND4
Mat Read #CH_VEND,REC_VEND,460;VNDA1$
Mat Read #CH_VEND,REC_VEND,480;VNDA2$
Mat Read #CH_VEND,REC_VEND,488;VNDA
Mat Read #CH_VEND,REC_VEND,498;VNDA3
Mat Read #CH_VEND,REC_VEND,546;VNDA3$
Mat Read #CH_VEND,REC_VEND,554;VNDM4
Mat Read #CH_VEND,REC_VEND,576;VNDA5$
Rem {end read.vend.i}
Return 
GET_POLOT: Rem "Get The Lot (If needed)
Call MiscStr(1,LOT$)
If NONSTK Return 
KEY_POLOT$ = " ",KEY_POLOT$
KEY_POLOT$ = KEY_SORT$[42]
POLOT_LOOP: Rem "Loop thru
Search #CH_POLOT,3,1;KEY_POLOT$,REC_POLOT,E \ If E = 2 Return 
If E Gosub ERR_SEARCH
If KEY_POLOT$[1,9] <> KEY_SORT$[42,50] Return 
Mat Read #CH_POLOT,REC_POLOT;POLT1$;
Mat Read #CH_POLOT,REC_POLOT,38;POLT1;
LOT$ = POLT1$[1,12]
Gosub CONV_INFO
Gosub PRNT_HEDNG
Gosub PRNT_DETL
If PASS = 1 Gosub PRNT_BLNKS
Gosub ADD_TOTALS
Goto POLOT_LOOP
CONV_INFO: Rem "Convert Info to Appropriate U/M
CTNUM = PFU1[8];SELLUM = PFU1[9]
CNVTU[0] = 0;CNVTU[1] = CTNUM;CNVTU[2] = 1;CNVTA = POLT1[3]
Gosub CONVERT \ DSPL[1] = AMOUNT
DSPL[3] = 0 \ If POL4[13] > 0 Let DSPL[3] = (POLT1[3] * POL4[12] / POL4[13])
If DSPL[1] Let DSPL[3] = FNR(DSPL[3] / DSPL[1])
CNVTU[0] = 0;CNVTU[1] = SELLUM;CNVTU[2] = 1;CNVTA = POLT1[3]
Gosub CONVERT \ DSPL[2] = AMOUNT
STKUM$ = "ERR."
If CTNUM = -2 Let STKUM$ = "LOT "
If CTNUM = -1 Let STKUM$ = "CWT "
If CTNUM = -3 Let STKUM$ = "LB  "
If CTNUM > 0 Read #CH_CCODES,CTNUM,10;STKUM$;
SELLUM$ = "ERR."
If SELLUM = -2 Let SELLUM$ = "LOT "
If SELLUM = -1 Let SELLUM$ = "CWT "
If SELLUM = -3 Let SELLUM$ = "LB  "
If SELLUM > 0 Read #CH_CCODES,SELLUM,10;SELLUM$;
If POL4[15] Let POL3[6] = FNR(POLT1[3] * POL4[14] / POL4[15])
Return 
CALC_DISP_EXT: Rem convert qty and cost to cost um, then calc ext cost
CNVTA = DISP_QTY;CNVTU[0] = 0;CNVTU[1] = POL1[5];CNVTU[2] = 1 \ Gosub CONVERT
DISP_QTY = AMOUNT
CNVTA = DISP_COST;CNVTU[0] = 0;CNVTU[1] = POL1[5];CNVTU[2] = 2 \ Gosub CONVERT
DISP_COST = AMOUNT
DISP_EXT = FNR(DISP_QTY * DISP_COST)
Return 
RNGDONE: Rem "Done with a pass
EOF = 1 \ Gosub PRNT_HEDNG
If PASS < 2 Gosub PASS0_TTL \ Gosub PASS1_TTL
If PASS = 2 Gosub PASS2_TTL
If PASS = 3 Gosub PASS2_TTL \ Gosub BOAT_TTL
If PASS < 3 Let PASS = PASS + 1 \ Goto SORTDONE
Gosub PASS3_TTL
Goto OUTEND
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: goto CVTSTARTB
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
!CVTTRY: Rem "this is a remark
!Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto CVTTRY
!If CNVTU[2] = 0 Goto CVTDONE
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! En
Rem {end rtn.convert.s}
OUTEND: Rem "We're Outta Here
!Print 'CS'
Close #CH_SORT
Kill WFLE$
if not (chan[0]) ! cntrl file
	close #ch_cntrl
endif
if not (chan[1]) ! purchase order header  #60
	 close #Ch_Pohead
endif
if not (chan[2]) ! po lines #61
	close #Ch_PoLine 
endif
if not (chan[3]) ! po lot
	close #Ch_polot
endif
if not (chan[4]) ! product file #64
	 close #Ch_Prod 
endif
if not(chan[5])
	close #Ch_Vend
endif
if not (chan[6]) !  nonstock #66
	close #ch_ponstk
endif
if not (chan[7]) ! unit of measure file #67
	close #Ch_Ccodes 
endif

End 

else
!
!include "src/callmainerrnet.inc"
end try
End ! the whole program
