! >>> Program 426a
!
! description Product Stock Sales Report - Print Detail
!
! loadsave -w -n 100,10 -o prog/dxport/426a.dl4 src/426a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV 25, 2003  17:43:35
Rem /w/papermaster/r2002//usr/acct/zyc/work/devl/mx/mx426a.src (univ2) [zyc] {64262}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX426A         Stock Sales  (print section)
Rem Author:        Roman   (01/04/1993)
Rem                UNIVERSAL BUSINESS SYSTEMS
!
External Lib "libprod.lib"
Declare External Sub ProdGroup
!
Declare Intrinsic Sub FormatDate,InpBuf,Logic,String
! - Option Default Dialect IRIS1
!
! - Com 1%,PFU1[20],CNVTU[2],S[4,1],ARMONTH,DDF
! - Com 2%,N1[10],N2[5],N3[3],N4[39],C4[10],V9[4],J8
! - Com 3%,PFU2[6],CNVTA,A[33],AMOUNT 
! - Com N1$[50],LABEL$[25],LABEL1$[50],CNAME$[30]
!
chain read CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,ARMONTH,N1,N2,N3,N4,N1$,J8
!
If Err 0 Gosub ERR_TRAP
!
Def FND(H) = Int(Abs(H) * 10 + .5) * .1 * Sgn(H)
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[500],tmp1$[500],tmp2$[50]
!
dim N1$[50],LABEL$[25],LABEL1$[50],CNAME$[30]
Dim 1%,BRKLVL,BREAK,LINE_OK,L1[5],NONSTOCK,EOYMONTH,CURMONTH,BOYMONTH
dim 1%,PFU1[20],CNVTU[2],S[4,1]
Dim 2%,R[10],E,C2,DSP3[4],I,I1,X,RCTR[1],L2[2],V9[4]
Dim 3%,P2[12,2],LYP2[12,2],Q_ON_HAND,CURR_SLS,AVG_SLS,W3[24],A[33],I2
Dim 3%,LAST_3_SLS,LAST_6_SLS,LAST_12_SLS,ON_PO,TURNS,L3[6]
Dim 3%,Q_ON_HAND_WT,CURR_SLS_WT,AVG_SLS_WT,LAST_3_SLS_WT,LAST_6_SLS_WT
Dim 3%,LAST_12_SLS_WT,ON_PO_WT,PFU2[6],CNVTA,AMOUNT 
dim 3%,parm[10],whmisc2[7]
Dim 4%,Z,Z1,T1[4,7],T2[4,7],T3[6],T4[6]
Dim BREAK$[20],Z$[50],K2$[40],A2$[12],DSP3$[6],K3$[12],K5$[14],K6$[16]
Dim F$[16],FILE$[30],K9$[18],BDESC$[20],BKEY$[20]
Dim P9$[50],A$[156],CCD$[14],STOCK_UM$[4],SELL_UM$[4]
! - If Err 0 Let J8 = Spc(8)
! - J8 = 0;V9[4] = Chf(0)
! - If Err 0 Gosub ERR_TRAP
! - If J8 If J8 <> 49 Gosub ERR_TRAP
V9[4] = 55 \ If J8 Let V9[4] = 20
LABEL$ = "GRANDMAT  CAT  COMM BRAND"
LABEL1$ = "GRANDTOTALMATERIAL  CATEGORY  COMMODITY BRAND     "
S[1,0] = 1;S[1,1] = 2;S[2,0] = 3;S[2,1] = 4;S[3,0] = 5;S[3,1] = 8
S[4,0] = 9;S[4,1] = 8 + Abs(Fra(N2[3]) * 100)
Mat Read #1,3,0;CNAME$;
Mat Read #1,51,74;BOYMONTH;
Mat Read #1,0,120;CURMONTH;
Mat Read #1,51,72;EOYMONTH;
Mat Read #1,19,50;P9$;
! - Gosub L_7000 ! build sort
V9[1] = 100;V9[0] = 0;RCTR[0] = 0;TCTR[1] = 0
! - If J8 Print 'CS';
! - If Err 0 Gosub ERR_ESCAPE
!
! *** Process Section
!
if j8 ! dx xml headings
  if N2[3]>0 ! product detail
    tmp$="PRODUCT",fdel$,"PRODUCT DESC",fdel$
	If P9$[26,26] = "Y" let tmp$=tmp$,"PRODUCT DESC #2",fdel$
  else
    tmp$="TYPE",fdel$,"TYPE DESC",fdel$,"BREAK DESC",fdel$
  endif
  tmp$=tmp$,"QUANTITY ON HAND",fdel$,"CURRENT SALES",fdel$
  tmp$=tmp$,"AVERAGE SALES",fdel$,"LAST 3 MO SALES",fdel$
  tmp$=tmp$,"LAST 6 MO SALES",fdel$,"LAST 12 MO SALES",fdel$
  if N2[3]>0 let tmp$=tmp$,"SELL UNIT",fdel$,"TURNS",fdel$
  if N1$[37,37]<>"N"
    tmp$=tmp$,"WEIGHT",fdel$,"WGT QTY ON HAND",fdel$,"WGT CURR SALES",fdel$
    tmp$=tmp$,"WGT AVG SALES",fdel$,"WGT LAST 3 MO SALES",fdel$
    tmp$=tmp$,"WGT LAST 6 MO SALES",fdel$,"WGT LAST 12 MO SALES",fdel$
  endif  
  if N2[3]>0
	if N1$[37,37]<>"N" let tmp$=tmp$,"WGT QTY ON ORDER",fdel$
    tmp$=tmp$,"PO #",fdel$,"QUANTITY ON ORDER",fdel$
	tmp$=tmp$,"DUE DATE",fdel$
  endif
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
end if
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If
!
K2$ = " ",K2$;K2$[1,2] = N1$[1,2];BREAK$ = ""
L_2000: Rem "===================================== start print
Search #2,3,2;K2$,R[2],E 
If E Goto L_9100
! - If Fra(RCTR[0] / 250) Or J8 Goto L_2025
! - Print @0,22;'CL';RCTR[0];"Records read.";RCTR[1];"Records processed.";
L_2025: RCTR[0] = RCTR[0] + 1
Mat Read #2,R[2],488;DSP3;
If K2$[1,2] > N1$[3,4] Goto L_9100
If DSP3[4] < N1[0] Goto L_2000
If DSP3[4] > N1[1] Let K2$[3,4] = "zz" \ Goto L_2000
If K2$[5,8] < N1$[5,8] Goto L_2000
If K2$[5,8] > N1$[9,12] Let K2$[5,8] = "zzzz" \ Goto L_2000
If K2$[9,20] < N1$[13,24] Goto L_2000
If K2$[9,20] > N1$[25,36] Let K2$[9,20] = "zzzzzzzzzzzz" \ Goto L_2000
If N1[2] If DSP3[1] <> N1[2] Goto L_2000
If Int(N4[39]) If Not(Int(N4[DSP3[3]])) Goto L_2000
If Fra(N4[DSP3[3]]) Goto L_2000
Mat Read #2,R[2],0;A2$;
Mat Read #2,R[2],12;C2;
Mat Read #2,R[2],16;P2;
Mat Read #2,R[2],250;LYP2;
Mat Read #2,R[2],508;DSP3$;
If ARMONTH < 0 Gosub L_2400
RCTR[1] = RCTR[1] + 1
If BREAK$ <> "" If K2$[1,20] <> BREAK$ ! "something broke
  Gosub L_3300
  If N1$[37,37] <> "N" Gosub L_3400
  Gosub L_3500
  Gosub L_2200
  Gosub L_4000
End If 
Gosub L_6000 \ Goto L_2000
Gosub L_3000
BREAK$ = K2$[1,20]
Goto L_2000
!
L_2200: Rem "===================================== accumulate totals
Z = Fra(N2[3]) * 100
For I = 0 To 4
  If I = 4 If Z = 12 Goto L_2250
  T1[I,1] = T1[I,1] + Q_ON_HAND;T2[I,1] = T2[I,1] + Q_ON_HAND_WT
  T1[I,2] = T1[I,2] + CURR_SLS;T2[I,2] = T2[I,2] + CURR_SLS_WT
  T1[I,3] = T1[I,3] + AVG_SLS;T2[I,3] = T2[I,3] + AVG_SLS_WT
  T1[I,4] = T1[I,4] + LAST_3_SLS;T2[I,4] = T2[I,4] + LAST_3_SLS_WT
  T1[I,5] = T1[I,5] + LAST_6_SLS;T2[I,5] = T2[I,5] + LAST_6_SLS_WT
  T1[I,6] = T1[I,6] + LAST_12_SLS;T2[I,6] = T2[I,6] + LAST_12_SLS_WT
L_2250: Next I
For I = 0 To 4 \ For I1 = 1 To 6
    T1[I,0] = T1[I,0] + T1[I,I1];T2[I,0] = T2[I,0] + T2[I,I1]
  Next I1 \ Next I
Return 
!
L_2400: Rem "================================ shift last year to this year
For I = 0 To 12 \ For I1 = 0 To 2
    P2[I,I1] = LYP2[I,I1]
    LYP2[I,I1] = 0
  Next I1 \ Next I
Return 
!
L_2500: Rem "================================ write to sort/summary file
If BREAK = 4 If (Not(N2[3]) Or Fra(N2[3]) = .12) Goto L_2680
If BREAK If Not(N3[BREAK - 1]) Goto L_2680
K9$ = " ",K9$;K9$[1,5] = LABEL$[BREAK * 5 + 1,BREAK * 5 + 5]
If BREAK Let K9$[6,18] = BREAK$[S[BREAK,0],S[BREAK,1]],"              "
Search #9,2,1;K9$,R[9],E
If Not(E) Goto L_2600
E = 2 \ Search #9,1,0;K9$,R[9],E
If E Let e$ = "can't get record # from 426 sortfile!" \error 10000
Search #9,4,1;K9$,R[9],E
If E Let e$ = "syserrorfile 426 sortfile mode (m)=4 keyno (k)=1 r=",R[9]," e=",e," keyval (k$)=",K9$ \error 10000
For I = 0 To 6 \ T3[I] = 0;T4[I] = 0 \ Next I
Mat Write #9,R[9],0;T3
Mat Write #9,R[9],56;T4
L_2600: Rem "
Mat Read #9,R[9],0;T3
Mat Read #9,R[9],56;T4
For I = 0 To 6
  T3[I] = T3[I] + T1[BREAK,I]
  T4[I] = T4[I] + T2[BREAK,I]
Next I
Mat Write #9,R[9],0;T3
Mat Write #9,R[9],56;T4;
L_2680: Return 
!
L_3000: Rem "================================ process cumulative data
CURR_SLS = CURR_SLS + P2[Abs(ARMONTH),0]
I2 = 0;Z = 0
For I = 1 To 12
  I1 = Abs(ARMONTH) - I \ If I1 < 1 Let I1 = I1 + 12
  If I1 = CURMONTH Or Z
    I2 = I2 + LYP2[I1,0] \ Z = 1
  Else 
    I2 = I2 + P2[I1,0]
  End If 
Next I
AVG_SLS = AVG_SLS + (I2 / 12)
Z = 0
For I = 1 To 11
  I1 = Abs(ARMONTH) - I \ If I1 < 1 Let I1 = I1 + 12
  If I1 = CURMONTH Or Z
    If I <= 3 Let LAST_3_SLS = LAST_3_SLS + LYP2[I1,0]
    If I <= 6 Let LAST_6_SLS = LAST_6_SLS + LYP2[I1,0]
    LAST_12_SLS = LAST_12_SLS + LYP2[I1,0]
    Z = 1
  Else 
    If I <= 3 Let LAST_3_SLS = LAST_3_SLS + P2[I1,0]
    If I <= 6 Let LAST_6_SLS = LAST_6_SLS + P2[I1,0]
    LAST_12_SLS = LAST_12_SLS + P2[I1,0]
  End If 
Next I
LAST_12_SLS = LAST_12_SLS + LYP2[Abs(ARMONTH),0]
Return 
!
L_3300: Rem "================================ process product data
If N1[2] Let Q_ON_HAND = W3[0] Else Let Q_ON_HAND = A[0]
If Not(N1[2]) Let TURNS = 0 \ Goto L_3325
TURNS = (((W3[11] + W3[5] - W3[6]) / 2) + W3[7]) * W3[15]
If TURNS Let TURNS = FND(W3[9] / TURNS)
L_3325: Return 
!
L_3400: Rem "============================== calculate weights
If Not(A[5]) Let A[5] = 1
If N1$[37,37] = "T" Let Z = 2000 Else Let Z = 1
Q_ON_HAND_WT = Q_ON_HAND_WT + A[6] * Q_ON_HAND / (A[5] * Z)
CURR_SLS_WT = CURR_SLS_WT + A[6] * CURR_SLS / (A[5] * Z)
AVG_SLS_WT = AVG_SLS_WT + A[6] * AVG_SLS / (A[5] * Z)
LAST_3_SLS_WT = LAST_3_SLS_WT + A[6] * LAST_3_SLS / (A[5] * Z)
LAST_6_SLS_WT = LAST_6_SLS_WT + A[6] * LAST_6_SLS / (A[5] * Z)
LAST_12_SLS_WT = LAST_12_SLS_WT + A[6] * LAST_12_SLS / (A[5] * Z)
Return 
!
L_3500: Rem "================================ convert to print/display units
LINE_OK = 0
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[3]];CNVTU[2] = 1;CNVTA = Q_ON_HAND
Gosub L_20000 \ Q_ON_HAND = AMOUNT / N4[0] \ If AMOUNT Let LINE_OK = 1
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[4]];CNVTU[2] = 1;CNVTA = CURR_SLS
Gosub L_20000 \ CURR_SLS = AMOUNT / N4[0] \ If AMOUNT Let LINE_OK = 1
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[4]];CNVTU[2] = 1;CNVTA = AVG_SLS
Gosub L_20000 \ AVG_SLS = AMOUNT / N4[0] \ If AMOUNT Let LINE_OK = 1
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[4]];CNVTU[2] = 1;CNVTA = LAST_3_SLS
Gosub L_20000 \ LAST_3_SLS = AMOUNT / N4[0] \ If AMOUNT Let LINE_OK = 1
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[4]];CNVTU[2] = 1;CNVTA = LAST_6_SLS
Gosub L_20000 \ LAST_6_SLS = AMOUNT / N4[0] \ If AMOUNT Let LINE_OK = 1
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[4]];CNVTU[2] = 1;CNVTA = LAST_12_SLS
Gosub L_20000 \ LAST_12_SLS = AMOUNT / N4[0] \ If AMOUNT Let LINE_OK = 1
If PFU1[7 + N1[3]] = -1 Let STOCK_UM$ = "CWT "
If PFU1[7 + N1[3]] > 0 Mat Read #4,PFU1[7 + N1[3]],0;CCD$ \ STOCK_UM$ = CCD$[11,14]
If PFU1[7 + N1[4]] = -1 Let SELL_UM$ = "CWT "
If PFU1[7 + N1[4]] > 0 Mat Read #4,PFU1[7 + N1[4]],0;CCD$ \ SELL_UM$ = CCD$[11,14]
Return 
!
L_4000: Rem "================================ sort break(s)
BRKLVL = 0
If K2$[1,2] <> BREAK$[1,2] Let BRKLVL = 1
If Not(BRKLVL) If K2$[3,4] <> BREAK$[3,4] Let BRKLVL = 2
If Not(BRKLVL) If K2$[5,8] <> BREAK$[5,8] Let BRKLVL = 3
Z = Abs(Fra(N2[3]) * 100)
If Not(N2[3]) Or Z = 12 Goto L_4030
If Not(BRKLVL) If K2$[9,8 + Z] <> BREAK$[9,8 + Z] Let BRKLVL = 4
L_4030: If Not(BRKLVL) If K2$[9,20] <> BREAK$[9,20] Let BRKLVL = 5
X = 0
L_4100: Rem "====== do breaks
For BREAK = 5 To BRKLVL Step -1
  If V9[1] > V9[4] Gosub L_5800
  If BREAK <> 5 ! "all breaks except product detail
    If BREAK If Not(T1[BREAK,0]) Goto L_4225
    If BREAK If Not(Int(N2[BREAK - 1])) Goto L_4220
	if J8 ! dx xml sub totals
	  tmp2$=LABEL$[BREAK * 5 + 1,BREAK * 5 + 5]
	  if tmp2$<>"GRAND"
	    tmp$=tmp2$,fdel$
        if BREAK
	      tmp$=tmp$,BREAK$[S[BREAK,0],S[BREAK,1]],fdel$
		  if BREAK<4
		    gosub L_6300
		    tmp$=tmp$,rtrim$(BDESC$),fdel$
          else
		    tmp$=tmp$,"",fdel$
		  endif
	    else
	      tmp$=tmp$,"",fdel$,"",fdel$
	    endif
	    for cnt=1 to 6
	      tmp$=tmp$,T1[BREAK,cnt] Using "--------#.##",fdel$
        next cnt
        if N1$[37,37]<>"N" ! weight
	      if N1$[37,37]="T" tmp2$="TONS" else tmp2$="POUNDS"
		  tmp$=tmp$,tmp2$,fdel$
	      for cnt=1 to 6
	        tmp$=tmp$,T2[BREAK,cnt] Using "--------#.##",fdel$
          next cnt
        endif
        !
        call addtostr(e$,rstr$,tmp$+rdel$)
	  endif
	  goto L_4210
    endif
	!
    Print #0;" " \ V9[1] = V9[1] + 1
    Print #0;LABEL$[BREAK * 5 + 1,BREAK * 5 + 5];
    If BREAK Print #0;" ";BREAK$[S[BREAK,0],S[BREAK,1]];
    If BREAK If BREAK < 4 Gosub L_6300 \ Print #0;" ";BDESC$;
    Print #0;" TOTALS:"; Tab 30;"<---------------------------<<<<<<"
    Print #0; Using "--------#.##"; Tab 10;T1[BREAK,1];
    Print #0; Using "--------#.##"; Tab 27;T1[BREAK,2];T1[BREAK,3];
    Print #0; Using "--------#.##"; Tab 51;T1[BREAK,4];T1[BREAK,5];T1[BREAK,6];
    If T1[BREAK,7] Print #0; Using "--------#.##"; Tab 106;T1[BREAK,7];
    Print #0;" " \ V9[1] = V9[1] + 2
    If N1$[37,37] = "N" Goto L_4210
    If N1$[37,37] = "T" Print #0;"TONS --->"; Else Print #0;"POUNDS ->";
    Print #0; Using "--------#.##"; Tab 10;T2[BREAK,1];
    Print #0; Using "--------#.##"; Tab 27;T2[BREAK,2];T2[BREAK,3];
    Print #0; Using "--------#.##"; Tab 51;T2[BREAK,4];T2[BREAK,5];T2[BREAK,6];
    If T2[BREAK,7] Print #0; Using "--------#.##"; Tab 106;T2[BREAK,7];
    Print #0;" " \ V9[1] = V9[1] + 1
L_4210: X = X + .1
    If BRKLVL If BREAK < 4 If Fra(N2[BREAK - 1]) Let X = X + 1
L_4220: Gosub L_2500
L_4225: For I1 = 0 To 7 \ T1[BREAK,I1] = 0;T2[BREAK,I1] = 0 \ Next I1
  Else ! "individual product breaks
      If Int(N2[3]) If N2[3] > 0 If LINE_OK Gosub L_5000
      Q_ON_HAND = 0;CURR_SLS = 0;AVG_SLS = 0
      LAST_3_SLS = 0;LAST_6_SLS = 0;LAST_12_SLS = 0;ON_PO = 0
      Q_ON_HAND_WT = 0;CURR_SLS_WT = 0;AVG_SLS_WT = 0
      LAST_3_SLS_WT = 0;LAST_6_SLS_WT = 0;LAST_12_SLS_WT = 0;ON_PO_WT = 0
  End If 
Next BREAK
if J8=0
  If Fra(X) Print #0;" " \ V9[1] = V9[1] + 1
  If Int(X) Let V9[1] = 100
endif
Return 
!
L_5000: Rem "========================================= print detail line
if J8
  tmp$=A$[140,151],fdel$,rtrim$(A$[9,38]),fdel$
  If P9$[26,26] = "Y" let tmp$=tmp$,rtrim$(A$[63,92]),fdel$
  tmp$=tmp$,Q_ON_HAND using "-------#.##/",STOCK_UM$,fdel$
  tmp$=tmp$,CURR_SLS using "-------#.##",fdel$
  tmp$=tmp$,AVG_SLS using "-------#.##",fdel$
  tmp$=tmp$,LAST_3_SLS using "-------#.##",fdel$
  tmp$=tmp$,LAST_6_SLS using "-------#.##",fdel$
  tmp$=tmp$,LAST_12_SLS using "-------#.##",fdel$
  If P9$[20,20] = "F" If A$[140,151] = "Z ZZZZZZZZZZ" Let SELL_UM$ = "LB  "
  tmp$=tmp$,SELL_UM$,fdel$
  If N1[2] let tmp2$=TURNS Using "--#.#" else tmp2$=""
  tmp$=tmp$,tmp2$,fdel$
  if N1$[37,37]<>"N" ! Weight
    if N1$[37,37]="T" let tmp2$="TONS --->" else tmp2$="POUNDS ->"
    tmp$=tmp$,tmp2$,fdel$
    tmp$=tmp$,Q_ON_HAND_WT using "-------#.##",fdel$
    tmp$=tmp$,CURR_SLS_WT Using "-------#.##",fdel$
	tmp$=tmp$,AVG_SLS_WT Using "-------#.##",fdel$
	tmp$=tmp$,LAST_3_SLS_WT Using "-------#.##",fdel$
	tmp$=tmp$,LAST_6_SLS_WT Using "-------#.##",fdel$
	tmp$=tmp$,LAST_12_SLS_WT Using "-------#.##",fdel$
  endif
  tmp1$=tmp$ ! keep beginning of xml line for po's
  Gosub L_5300 ! po information
  if CntPO=0 ! no po's
    tmp$=tmp1$
    if N1$[37,37]<>"N" let tmp$=tmp$,"",fdel$
	tmp$=tmp$,"",fdel$,"",fdel$,"",fdel$
    !
    call addtostr(e$,rstr$,tmp$+rdel$)
  endif
  return
endif
!
Print #0;A$[140,151];" ";A$[9,38];" ";
If P9$[26,26] = "Y" Print #0;A$[63,92] Else Print #0;" "
V9[1] = V9[1] + 1
If P9$[20,20] = "F" If A$[140,151] = "Z ZZZZZZZZZZ" Let SELL_UM$ = "LB  "
Print #0; Using "-------#.##/"; Tab 10;Q_ON_HAND;STOCK_UM$;
Print #0; Using "-------#.## "; Tab 27;CURR_SLS;AVG_SLS;
Print #0; Using "-------#.## "; Tab 51;LAST_3_SLS;LAST_6_SLS;LAST_12_SLS;
Print #0; Tab 87;SELL_UM$;
If N1[2] Print #0; Using "--#.#"; Tab 92;TURNS;
Gosub L_5300
If N1$[37,37] = "N" Goto L_5150
If N1$[37,37] = "T" Print #0;"TONS --->"; Else Print #0;"POUNDS ->";
Print #0; Using "-------#.##"; Tab 10;Q_ON_HAND_WT;
Print #0; Using "-------#.## "; Tab 27;CURR_SLS_WT;AVG_SLS_WT;
Print #0; Using "-------#.## "; Tab 51;LAST_3_SLS_WT;LAST_6_SLS_WT;LAST_12_SLS_WT;
If ON_PO_WT Print #0; Using "-------#.## "; Tab 106;ON_PO_WT;
Print #0;" " \ V9[1] = V9[1] + 1
L_5150: Rem
Return 
!
L_5300: Rem "========================================= find/print on po qty's
CntPO=0
ON_PO = 0;ON_PO_WT = 0;Z1 = 0
K6$ = " ",K6$;K6$ = R[3] Using "######"
L_5315: Search #6,3,2;K6$,R[6],E 
If E Goto L_5405
Z = K6$[1,6] \ If Z <> R[3] Goto L_5405
Mat Read #6,R[6],0;L1;
If L1[0] >= 3 Goto L_5315
Call Logic(1,2 ^ 0,L1[3],NONSTOCK) \ If NONSTOCK Goto L_5315
Mat Read #6,R[6],12;L2;
Mat Read #6,R[6],24;L3;
If V9[1] > V9[4] Gosub L_5800
CNVTU[0] = 0;CNVTU[1] = PFU1[7 + N1[3]];CNVTU[2] = 1;CNVTA = L3[2] - L3[3]
Gosub L_20000 \ AMOUNT = AMOUNT / N4[0]
E = 0;Z$ = L2[2] Using "&&&&&&" \ Call FormatDate(Z$,Z$,E) \ If E Or Not(L2[2]) Let Z$ = "N/A"
!
if J8
  tmp$=tmp1$ ! beg of xml line
  if N1$[37,37]<>"N" ! weight
    Z1 =L3[2] - L3[3]
    If Not(A[5]) Let A[5] = 1
    If N1$[37,37] = "T" Let Z = 2000 Else Let Z = 1
    ON_PO_WT = A[6] * Z1 / (A[5] * Z)
    let tmp$=tmp$,ON_PO_WT Using "-------#.##",fdel$
  endif
  tmp$=tmp$,K6$[7,12],fdel$
  tmp$=tmp$,AMOUNT Using "-------#.##/",STOCK_UM$,fdel$
  tmp$=tmp$,Z$,fdel$ ! due date
  !
  call addtostr(e$,rstr$,tmp$+rdel$)
  CntPO=CntPO+1
else
  Print #0; Tab 99;K6$[7,12];
  Print #0; Using "-------#.##/"; Tab 106;AMOUNT;STOCK_UM$;
  Print #0; Tab 123;Z$
endif
V9[1] = V9[1] + 1
ON_PO = ON_PO + AMOUNT;Z1 = Z1 + (L3[2] - L3[3])
Goto L_5315
!
L_5405: Rem end of po's
if J8=0 If Not(ON_PO) Print #0;" " \ V9[1] = V9[1] + 1
If N1$[37,37] = "N" Goto L_5430
if J8=0
  If Not(A[5]) Let A[5] = 1
  If N1$[37,37] = "T" Let Z = 2000 Else Let Z = 1
  ON_PO_WT = A[6] * Z1 / (A[5] * Z)
endif
!
L_5430: Z = Fra(N2[3]) * 100
For I = 0 To 4
  If I = 4 If Z = 12 Goto L_5450
  T1[I,7] = T1[I,7] + ON_PO;T2[I,7] = T2[I,7] + ON_PO_WT
L_5450: Next I
Return 
!
L_5800: Rem "============================================ headings
if J8 return ! dx xml
!
! - If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "Z$ \ Print 'CS';
If V9[0] If Not(J8) Print #0;"\14\";
V9[0] = V9[0] + 1;V9[1] = 9
If Not(J8) Print #0;"\12\";
Print #0;"AR MONTH";Abs(ARMONTH); Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE:";V9[0]
Print #0;" - 426A - ";Msc$(3);
Print #0; Tab 44;"S T O C K  S A L E S  R E P O R T";
If N1[2] Print #0; Tab 110;"WAREHOUSE: ";N1[2]
If Not(N1[2]) Print #0; Tab 110;"ALL WAREHOUSES"
If N4[0] <> 1 Print #0;"SCALING FACTOR:";N4[0];", ";
Print #0;"MATERIAL CODE: ";BREAK$[S[1,0],S[1,1]];
Print #0;", CATEGORY: ";BREAK$[S[2,0],S[2,1]];", COMMODITY: ";BREAK$[S[3,0],S[3,1]];
If N2[3] And Fra(N2[3]) <> .12 Print #0;", BRAND: ";BREAK$[S[4,0],S[4,1]];
Print #0;" "
If Int(N4[39]) ! "has include parameters
  Print #0;"ORDER TYPES:";
  For I = 1 To 38 \ If Int(N4[I]) Print #0;I;
  Next I
  Print #0;"ONLY" \ Print #0;" "
End If 
If Fra(N4[39]) ! "has exclude parameters
  Print #0;"ORDER TYPES:";
  For I = 1 To 38 \ If Fra(N4[I]) Print #0;I;
  Next I
  Print #0;"EXCLUDED" \ Print #0;" "
End If 
If Not(N4[39]) Print #0;" "
Print #0; Tab 0;"PRODUCT"; Tab 12;"QUANTITY"; Tab 28;"CURRENT";
Print #0; Tab 40;"AVERAGE"; Tab 52;"LAST 3 MO"; Tab 64;"LAST 6 MO";
Print #0; Tab 76;"LAST 12 MO"; Tab 87;"SELL"; Tab 92;"TURNS";
Print #0; Tab 100;"PO #"; Tab 108;"QUANTITY"; Tab 123;"DUE DATE"
Print #0; Tab 12;"ON HAND"; Tab 29;"SALES"; Tab 41;"SALES";
Print #0; Tab 53;"SALES"; Tab 65;"SALES"; Tab 77;"SALES"; Tab 87;"UNIT";
Print #0; Tab 108;"ON ORDER"
Print #0;""
Return 
!
L_6000: Rem "================================ read product/whse record
I = 1
If K3$ = A2$ If R[3] If R[5] Goto L_6200
K3$ = " ",K3$;K3$ = A2$
Search #3,2,1;K3$,R[3],E 
If Not(E) Goto L_6070
I = 0 \ Goto L_6200
L_6070: Mat Read #3,R[3],0;A$;
Mat Read #3,R[3],256;A;
Mat Read #3,R[3],512;PFU1;
Mat Read #3,R[3],554;PFU2;
Mat Read #3,R[3],894;C4;
If Not(N1[2]) Goto L_6200
K5$ = " ",K5$;K5$[1,12] = A2$;K5$[13,14] = N1[2] Using "##"
Search #5,2,1;K5$,R[5],E 
If Not(E) Goto L_6180
I = 0 \ Goto L_6200
L_6180: rem read prodwhse
Mat Read #5,R[5],78;W3;
MAT  READ #5,R[5],846;WHMISC2;
CHK_PRODGRP: REM         
LET PARM[0]=0            
LET PARM[1]=WHMISC2[0]   
Call ProdGroup(e$,intco,Parm[])
if parm[2]=0 let i=0     
L_6200: Return + I
!
L_6300: Rem READ BREAK DETAIL description
BDESC$ = " ",BDESC$
If BREAK <> 1 Goto L_6360
BKEY$ = " ",BKEY$;BKEY$ = BREAK$[S[BREAK,0],S[BREAK,1]]
BKEY$[2] = ""
Search #8,2,1;BKEY$,R[8],E 
if E=0 Mat Read #8,R[8],0;BDESC$;
Return 
!
L_6360: Rem CTGY?
If BREAK <> 2 Goto L_6400
R[7] = BREAK$[S[BREAK,0],S[BREAK,1]]
If R[7] < 1 Or R[7] > Chf(7) = 1 Goto L_6390
Mat Read #7,R[7],0;BDESC$;
L_6390: Return 
!
L_6400: Rem COMMODITY
If BREAK <> 3 Return 
BKEY$ = " ",BKEY$;BKEY$ = BREAK$[S[BREAK,0],S[BREAK,1]]
Search #10,2,1;BKEY$,R[10],E 
if E=0 Read #10,R[10],0;BDESC$[1,16];
Return 
!
! - L_7000: Rem "======== create indexed sort file to store sub-totals for mx426b
! - F$ = Spc(6) Using "6/SORTWORK&&&!"
! - FILE$ = "[1:060] ",F$
! - Build #9,FILE$
! - R[9] = 9 \ Search #9,0,1;F$,R[9],E 
! - If E Let e$ = "can't build 426 sortfile!" \error 10000
! - R[9] = 1 \ Search #9,0,0;F$,R[9],E 
! - If E Let e$ = "can't build from 426 sortfile!" \error 10000
! - R[9] = 0 \ Search #9,1,0;F$,R[9],E 
! - If E Let e$ = "can't build from 426 sortfile!" \error 10000
! - Return 
!
! - Close 
! - Chain "MX000"
! - Stop 
!
L_9100: Rem "============================================= end of file
Gosub L_3300
If N1$[37,37] <> "N" Gosub L_3400
Gosub L_3500 \ Gosub L_2200
BRKLVL = 0 \ Gosub L_4100
! - If V9[0] If J8 Input @0,23;"PRESS <CR> TO CONTINUE "Z$ \ Print 'CS';
Chain "426b.dl4"
chain write CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,ARMONTH,N1,N2,N3,N4,N1$,J8,LABEL$,LABEL1$,CNAME$
!
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT (INTERNAL VERSION)
Dim 2%,X1[9],Q0[1]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
E = 0 
e$="invalid option '",CNVTU[2],"' selected"
Gosub ERR_TRAP
!
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] <> -1 Goto L_20510
  If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
  If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Goto L_20530
L_20510: If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
  If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
end
