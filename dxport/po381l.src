! >>> Program po381l
!
! description Debit Memo  - Prodlot/Sordlot allocation
! loadsave -w -n 100,10 -o prog/dxport/po381L.dl4 src/po381L.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"

Rem BEDIT Version: 2.2 OBJECT CODE     Created: MAY  2, 2003  09:30:19
Rem /w/papermaster/r2002//usr/acct/txc/work/r2002/po/po381l.src (univ2) [txc] {05003}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$,openfile
Rem PO381L - assign lots/locations - debit memo
Rem UNIVERSAL BUSINESS SYSTEMS, INC.
Rem LAST UPDATE: mtg 5/93
Try
Enter Chan[],spec[],msg$,errtype,rstr$
! dxgets needed for # of order lines to copy, order line num, # order message line copy, order msg line #
!! call parameters are as follows
! spec variable is the same of the s9 -- except added spec[10] for the company # 

	
!spec[0] = purchase order record #
!spec[1] = vendor record # 

!Spec[10] = Company #

!chan[0] = cntrl file	*
!chan[1] = purchase order header  #8 *	
!chan[2] = purchase order lines   #9*
!chan[3] = a80vm  - vendor file #5 
!chan[4] = product file #ch_prod *
!chan[5] = product warehouse #10 *
!chan[6] = nonstock #14 *
!chan[7] = unit of measure file #67
!chan[8] = sprodlot
!chan[9] = sordlot
Dim 1%,PFU1[20],CNVTU[2],WH,SOURCE,COST_LEV[3]
Dim 3%,PFU2[6],CNVTA,A[33],Z9[9],R[17]
Dim 2%,L9,S9[9],TYPE,J4$[50],A$[156],WLOT$[12],SEL,SEL$[5]
! If Err 0 Gosub ERR_TRAP
Dim F$[17],V$[60],V1$[31],V6$[60],K1$[60],K2$[60],M1$[4],I$[80]
Dim 2%,X,X2,L7[6],TS9[3]
Dim 1%,POL1[5],PH4[2],P1[1],S1[3],POMISC[2],NSD1[7],RASL[5],LINE_WH
Dim 1%,CH_POH,CH_VEND,CH_POL,CH_SORDLOT,CH_SPRODLOT
Dim 1%,D1,E,J0,J2,J3,J4,J5,J6,J8,J9[5],X1[9],3%,J1,R0[100]
Dim J$[40],J0$[12],J1$[40],J2$[40],J5$[75],J7$[75],J9$[40],LOT$[12]
Dim 2%,PH0[5],P2[2],S2[3],AXCESS,PH3[4],D9[20]
Dim C0$[30],C2$[12],P0$[66],P1$[156],S0$[36],LOC$[6],P60$[50]
Dim B1$[200],B2$[200],CL$[77],A$[156],KLOT$[60]
Dim OL2$[16],SP1$[6],P9$[50],POL1$[120],X$[20],PN$[16]
Dim KL$[58],1%,KL1[5],3%,KL3[1],2%,KL2[1],NSD$[96]
Dim 3%,P3[4],T7[5],S3[5],K17$[60],K18$[60],SK17$[60]
Dim 3%,POL3[6],NSD3[9],PL4[21]
Dim 3%,QSHP,QORD,QBO,AVAL,TORD,TSHP,TBO
Dim 4%,AMOUNT
Dim 2%,N0,V2$[30],B1[24],K15$[60],NSD2[4],3%
DIM A9$[60],I9$[60],K5$[60]                 
DIM 3%,S5[5],P4[4],v1,r17 
Dim DFLTRCVLOC$[6]
Dim DEV$[20],HM$[30],nextblockid$[8],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],Message$[600]
N0 = 0
Z9[1] = 3 \ Z9[3] = 22
CL$ = " ",CL$
!If Err 0 Let F = Spc(8)
!N0 = Chf(1)
!If Err 0 Gosub ERR_TRAP
!If F If F <> 49 Gosub ERR_TRAP
!If Not(F) Goto L_815
!X2 = Spc(5)
!F$ = Int((X2 - Int(X2 / 16384) * 16384) / 64) Using "CNTRL#"
!Open #ctlc,F$
L_815: Rem S9[4]=program number, S9[5]=poflel rec#, S9[8]=kit rec#, S9[9]=line#
! rem s9[0]= poheader record #
!CH_VEND = 5
!CH_POH = 8
!CH_POL = 9
!CH_SPRODLOT = 22
!CH_SORDLOT = 23
! FILES
let intco=spec[10] ! set the company #
for ctr=0 to 9
	let s9[ctr]=spec[ctr]
next ctr
! openfiles 
! need sprodlot
! need sordlot
if not (chan[0]) ! cntrl file ! ok
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
if not (chan[1]) ! purchase order header  #8 ok
	 Ch_Poh = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
else
	ch_poh=chan[1]
endif
if not (chan[2]) ! po lines #9 ok
	Ch_PoL = openfile(2432,intCo) \ If Ch_Pol = -1 Error 42     !"po lines file
else
	let ch_pol=chan[2]
endif
If not (chan[3]) ! vendor
	ch_vend=OpenFile(2400,intCo) \ If Ch_vend = -1 Error 42 ! vendor code * 
else
	let ch_vend=chan[3]
endif
if not (chan[4]) ! product file #3 ok
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file --- *
else
	let ch_prod=chan[4]
endif
if not (chan[5]) ! product warehouse #10
	Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
else
	let ch_prwh=chan[5]
endif
if not (chan[6]) !  nonstock #66
	ch_nstk=OpenFile(2448,intCo) \ If Ch_nstk = -1 Error 42 ! nonstock product
else
	let ch_nstk=chan[6]
endif
if not (chan[7]) ! unit of measure file #67
	Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file OK
else
	let ch_ccode=chan[7]
endif
if not (chan[8]) ! sprodlot
	Ch_sprodlot = OpenFile(2528,IntCo) \ If Ch_sprodlot = -1 Error 42 ! PRODLOT
else
	ch_sprodlot=chan[8]
endif
if not (chan[9]) ! sordlot
	Ch_sordlot = OpenFile(2320,IntCo) \ If ch_sordlot = -1 Error 42 ! SORDLOT
else
	ch_sordlot=chan[9]
endif



Mat Read #ctlc,19,50;P9$;
Mat Read #ctlc,60,50;P60$;
Mat Read #ctlc,69,52;DFLTRCVLOC$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
RASL =0 ! RASL -- NOT IMPLEMENTED AT THIS TIME
If Not(RASL) Or DFLTRCVLOC$ = "      " Let DFLTRCVLOC$ = "STOCK "
Mat Read #CH_POH,S9[0],0;PH0;
If PH0[0] = 14 Goto Outend: ! already Accepted
Mat Read #CH_POH,S9[0],222;PH3;
Mat Read #CH_POH,S9[0],242;PH4;
uselot=0 ! Gosub L_6500 \ 
V1$ = ""
AXCESS = 0
AUTO = 90
If Not(USELOT) Let AUTO = 90 \ Goto L_910
INVOICE = 99 \ AUTO = 0 \ Goto L_910
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
If P9$[1,1] = "N" If Not(RASL) Let AUTO = 90 \ Goto L_910
AUTO=90! Always auto
!If P9$[1,1] = "Y" Or RASL Let AUTO = 0
!If AXCESS Let J$ = "N" \ Goto L_895
!If P9$[1,1] = "N" Print @0,20;'CE RB';@5,21;"MAKE LOCATION ASSIGNMENTS Y/N ";
!L_880: If P9$[1,1] <> "N" If RASL Print @0,20;'CE RB';@5,21;"MAKE LOT / LOCATION  ASSIGNMENTS Y/N ";
!If P9$[1,1] <> "N" If Not(RASL) Print @0,20;'CE RB';@5,21;"MAKE LOT ASSIGNMENTS Y/N ";
!Input ""J$
!L_895: If J$ = "N" Let AUTO = 90
!If J$ = "Y" Let AUTO = 0
!If J$ <> "Y" And J$ <> "N" Goto L_880
L_910: Mat Read #ctlc,115;D9;
N0 = 0
KIT = 0
TYPE = 2
!If Not(SEL) Print @0,22;'CE';"      ALLOCATING PRODUCT...PLEASE WAIT ";
!If Err 0 Gosub ERR_TRAP
!Signal 3,0
Mat Read #CH_POH,S9[0],0;PH0;
Mat Read #CH_POH,S9[0],242;PH4;
If PH4[1] <= 0 Let PH4[1] = 1
If PH4[1] > D9[5] Let PH4[1] = 1
V$ = " ",V$
WH = PH4[1];POL1[1] = PH4[1]
GOSUB l_6600: ! delete existing lots for this debit memo
Gosub L_2150  ! set up default stock lot
V$[1,6] = PH3[3] Using "######"
V$[7] = ""
Search #CH_VEND,2,1;V$,V1,E
If E Gosub ERR_SEARCH
Read #CH_VEND,V1,30;C0$;
! If KIT Goto L_10100
V1$ = " ",V1$
V1$[1,6] = PH0[2] Using "######"
L_1700: Search #CH_POL,3,1;V1$,R[9],E \ If E > 2 Gosub ERR_SEARCH
If E Goto OutEnd:
X2 = V1$[1,6] \ If X2 <> PH0[2] Goto outend:
If NOLOT Let AUTO = TAUTO \ NOLOT = 0
Mat Read #CH_POL,R[9],0;POL1;
Call Logic(1,2 ^ 0,POL1[3],NONSTOCK)
Call Logic(1,2 ^ 2,POL1[3],ZLINE) \ If ZLINE Goto L_1700
If NONSTOCK Goto L_1700
Mat Read #CH_POL,R[9],24;POL3;
Mat Read #ch_prod,POL3[1],0;A$;
Mat Read #ch_prod,POL3[1],156;B1;
Mat Read #ch_prod,POL3[1],256;A;
Mat Read #ch_prod,POL3[1],512;PFU1;
Mat Read #ch_prod,POL3[1],554;PFU2;
Mat Read #CH_POL,R[9],146;C2$;
Mat Read #CH_POL,R[9],66;POL1$;
Mat Read #CH_POL,R[9],376;POMISC;
If Not(POMISC[0]) Goto L_1700
WH = POL1[1]
Gosub L_2150 ! set up lot
If C2$[1,12] <> A$[140,151] Let C2$[1,12] = A$[140,151]
L_1950: Gosub L_2950 ! check for lots that should be there
If Not(POL1[1]) Let POL1[1] = PH4[1]
If P9$[41,41] = "W" Call "CHKWRASL",POL1[1],RASL[]
If NONSTOCK Goto L_2130
WFLAG = 0
Gosub L_3710
If Not(RASL) And LOTCNT = 0 Let NOLOT = 99 \ TAUTO = AUTO \ AUTO = 99
AUTO=99 ! SET TO AUTOMATICALLY UPDATE
!If AUTO Let ITM = 0 \ Gosub L_5490
!If AUTO If POL3[4] < QTA Let AUTO = 0
If AUTO If QTA = POL3[4] Let POL3[4] = 0
!If Not(AUTO) Gosub L_4390
If AUTO Goto L_2005
!If Not(AUTO) Goto L_2130
!If Not(AUTO) Let POL3[4] = 0 \ AUTO = 90 \ Goto L_2010
L_2005: If AUTO If QTA If QTA < POL3[4] Let POL3[4] = POL3[4] - QTA
L_2010: QORD = POL3[4] \ QSHP = POL3[4] \ QBO = 0
Gosub L_2150
Gosub L_2660
K1$ = " ",K1$
K1$[1,12] = C2$[1,12]
K1$[13,18] = PH0[2] Using "######"
K1$[19,21] = POL1[2] Using "###"
K1$[22,23] = POL1[1] Using "##"
K1$[24,29] = LOC$[1,6]
K1$[30,41] = LOT$[1,12]
LINE_WH = POL1[1]
M1 = 1
Gosub L_3610
L_2130: Rem GOSUB L_3790: \ gosub l_3610:
Gosub L_6800
If Not(KIT) Goto L_1700
Return 
L_2150: Rem SET UP STOCK
LOT$ = " ",LOT$
LOT$[1,7] = POL1[1] Using "STOCK##"
If LOT$[6,6] = " " Let LOT$[6,6] = "0"
LOC$[1,6] = "STOCK "   !! since there is no "select from where" window, use STOCK all the time
Return 
L_2210: Rem CREATE SORDLOT
K1$ = " ",K1$
K1$[1,12] = C2$[1,12]
K1$[13,18] = PH0[2] Using "######"
K1$[19,21] = POL1[2] Using "###"
K1$[22,23] = POL1[1] Using "##"
K1$[24,29] = LOC$[1,6]
K1$[30,41] = LOT$[1,12]
If KIT Let K1$[42,44] = "KIT";K1$[45,47] = KL1[1] Using "&&&"
K1$[52,52] = "4"
Search #CH_SORDLOT,2,1;K1$,V1,E
If Not(E) Return 
If E < 2 Goto L_2340
Gosub ERR_SEARCH
L_2340: E = 2
Search #CH_SORDLOT,1,0;K1$,V1,E
If E Gosub ERR_SEARCH
Search #CH_SORDLOT,4,1;K1$,V1,E
If E Gosub ERR_SEARCH
K2$ = " ",K2$
K2$[1,22] = K1$[30,51]
K2$[23,39] = K1$[13,29]
K2$[40,51] = K1$[1,12]
K2$[52,52] = "4"
Search #CH_SORDLOT,4,2;K2$,V1,E
If E Gosub ERR_SEARCH
K2$ = " ",K2$
K2$[1,39] = K1$[13,51]
K2$[40,40] = "4"
Search #CH_SORDLOT,4,3;K2$,V1,E
If E Gosub ERR_SEARCH
S0$[1,12] = C2$[1,12]
S0$[13,24] = LOT$[1,12]
OL2$ = " ",OL2$ \ OL2$[11,16] = LOC$[1,6]
If KIT Let OL2$[1,3] = "KIT";OL2$[4,6] = KL1[1] Using "&&&"
S1 = POL1[2] \ S1[1] = 4 \ S1[2] = POL1[1]
S2 = PH0[2];S2[1] = PH0[3];S2[2] = PH3[3]
S3[0] = 0;S3[1] = 0;S3[2] = P3[2];S3[3] = 0;S3[4] = 0
S0$[25,36] = " ",S0$[25,36] \ S1[3] = 0 \ S2[3] = 0
Mat Write #CH_SORDLOT,V1;S0$;
Mat Write #CH_SORDLOT,V1,36;S1;
Mat Write #CH_SORDLOT,V1,44;S2;
Mat Write #CH_SORDLOT,V1,60;S3;
Mat Write #CH_SORDLOT,V1,96;OL2$;
Return 
L_2660: Rem ORDER LOTS MAINT.
K1$ = " ",K1$
K1$[1,6] = PH0[2] Using "######"
K1$[7,9] = POL1[2] Using "###"
K1$[10,11] = POL1[1] Using "##"
K1$[12,17] = LOC$[1,6]
K1$[18,29] = LOT$[1,12]
If KIT Let K1$[30,32] = "KIT";K1$[33,35] = KL1[1] Using "&&&"
K1$[40,40] = "4"
K2$ = K1$ \ K6 = 0 \ X = 9
Search #CH_SORDLOT,2,3;K1$,V1,E
If E Gosub L_2210 \ Goto L_2660
If K1$[1,11] <> K2$[1,11] Goto L_2940
If K1$[40,40] <> "4" Goto L_2940
R[7] = V1
Mat Read #CH_SORDLOT,R[7];S0$;
Mat Read #CH_SORDLOT,R[7],36;S1;
Mat Read #CH_SORDLOT,R[7],44;S2;
Mat Read #CH_SORDLOT,R[7],60;S3;
Mat Read #CH_SORDLOT,R[7],96;OL2$;
If S1[1] <> 4 Gosub ERR_SEARCH ! Print "DEBIT MEMO --- DUPLICATE WITH ORDER #'S " \ Gosub ERR_SEARCH
TORD = QORD \ TSHP = QSHP \ TBO = QBO \ M1 = -1
LINE_WH = S1[2]
QSHP = S3[1] \ QBO = S3[3] \ Gosub L_3610
QORD = QORD + TORD \ QSHP = QSHP + TSHP \ QBO = QBO + TBO
S3[0] = QSHP;S3[1] = QSHP;S3[2] = P3[2];S3[3] = QBO;S3[4] = 0
S2[2] = PH3[3]
Mat Write #CH_SORDLOT,R[7];S0$;
Mat Write #CH_SORDLOT,R[7],36;S1;
Mat Write #CH_SORDLOT,R[7],44;S2;
Mat Write #CH_SORDLOT,R[7],60;S3;
Mat Write #CH_SORDLOT,R[7],96;OL2$;
L_2940: Return 
L_2950: Rem CHECK FOR LOTS WHICH SHOULDN'T BE THERE
V$ = " ",V$ \ V$[1,6] = PH0[2] Using "######"
V$[7,9] = POL1[2] Using "###"
I$ = V$ \ V1 = 0 \ E = 0
Search #CH_SORDLOT,2,3;V$,V1,E
If Not(E) Goto L_3070
L_3040: Search #CH_SORDLOT,3,3;V$,V1,E
If E = 2 Return 
If E Gosub ERR_SEARCH
L_3070: If V$[1,9] <> I$[1,9] Return 
If V$[40,40] <> "4" Goto L_3040
If Not(KIT) And V$[30,32] = "KIT" Goto L_3040
If KIT And V$[30,32] <> "KIT" Goto L_3040
LN = V$[33,35] \ If KIT And LN <> KL1[1] Goto L_3040
E = V$[10,11] \ If E <> POL1[1] Goto NO_GOOD_SORDLOT
If RASL !    p9$[41,41]="Y"  ! rasl on
  If V$[12,17] <> "STOCK " And V$[12,17] <> DFLTRCVLOC$ And V$[12,17] <> "NONE  "
    Goto L_3040
  End If 
Else 
  If V$[12,17] = "STOCK " Or V$[12,17] = DFLTRCVLOC$ Or V$[12,17] = "NONE  "
    Goto L_3040
  End If 
End If 
NO_GOOD_SORDLOT: R[7] = V1
Mat Read #CH_SORDLOT,V1;S0$;
Mat Read #CH_SORDLOT,V1,36;S1;
Mat Read #CH_SORDLOT,V1,44;S2;
Mat Read #CH_SORDLOT,V1,60;S3;
Mat Read #CH_SORDLOT,V1,96;OL2$;
If S1[1] <> 4 Goto L_3040
QSHP = S3[1] \ QORD = S3[1] \ QBO = S3[3]
Gosub L_3190
V$ = I$
Goto L_3040
L_3190: Rem DELETE SORDLOT
K1$ = " ",K1$ \ K2$ = " ",K2$
K1$[1,12] = S0$[1,12]
K1$[13,18] = S2 Using "######"
K1$[19,21] = S1 Using "###"
K1$[22,23] = S1[2] Using "##"
K1$[24,29] = OL2$[11,16]
K1$[30,41] = S0$[13,24]
K1$[42,51] = OL2$[1,10]
K1$[52,52] = "4"
T7 = S3[0] \ E = 0
Search #CH_SORDLOT,5,1;K1$,V1,E \ If E Gosub ERR_SEARCH
! If V1 <> R[7] Print "RECORDS DO NOT AGREE" \ E = 0 \ Gosub ERR_SEARCH
K2$[1,22] = K1$[30,51]
K2$[23,39] = K1$[13,29]
K2$[40,51] = K1$[1,12]
K2$[52,52] = "4"
Search #CH_SORDLOT,5,2;K2$,V1,E \ If E Gosub ERR_SEARCH
! If V1 <> R[7] Print "RECORDS DO NOT AGREE" \ E = 0 \ Gosub ERR_SEARCH
K2$ = " ",K2$ \ E = 0
K2$[1,39] = K1$[13,51]
K2$[40,40] = "4"
Search #CH_SORDLOT,5,3;K2$,V1,E \ If E Gosub ERR_SEARCH
! If V1 <> R[7] Print "RECORDS DO NOT AGREE" \ E = 0 \ Gosub ERR_SEARCH
K2$ = " ",K2$ \ E = 3 \ V1 = R[7]
Search #CH_SORDLOT,1,0;K2$,V1,E
If E Gosub ERR_SEARCH
! If V1 <> R[7] Print "RECORDS DO NOT AGREE" \ E = 0 \ Gosub ERR_SEARCH
LINE_WH = S1[2]
M1 = -1 \ Gosub L_3610
Return 
L_3610: Rem "================================== UPDATE SPRODLOT
K2$ = " ",K2$
K2$[1,12] = S0$[13,24] \ K2$[23,24] = LINE_WH Using "##" \ K2$[25,30] = OL2$[11,16]
K2$[31,42] = C2$[1,12]
Search #CH_SPRODLOT,2,1;K2$,V1,E
If E = 1 And LOT$[1,5] = "STOCK"
  If LOC$[1,6] = DFLTRCVLOC$ Or LOC$[1,5] = "STOCK" Or LOC$[1,5] = "NONE "
    Gosub L_3790
  End If 
End If 
If E Gosub ERR_SEARCH
Mat Read #CH_SPRODLOT,V1,82;P3
If TYPE = 3 Goto L_3690
P3[3] = P3[3] + (QSHP * M1)
P3[4] = P3[4] + (QBO * M1)
If P3[4] < 0 Let P3[4] = 0
L_3690: Mat Write #CH_SPRODLOT,V1,82;P3;
Return 
L_3710: Rem CHECK LOT CNTRL
LOTCNT = 0
If P9$[1,1] = "N" Return 
If P9$[1,1] <> "Y" If A$[113,113] = "N" Let LOT$[1,7] = POL1[1] Using "STOCK##"
If P9$[1,1] <> "Y" If A$[113,113] = "N" If POL1[1] < 10 Let LOT$[6,6] = "0"
If P9$[1,1] <> "Y" If A$[113,113] = "N" Return 
LOTCNT = 1
Return 1
L_3790: Rem CREATE STOCK LOT
K1$ = " ",K1$
K1$[1,12] = C2$[1,12]
K1$[13,18] = PH0[2] Using "######"
K1$[19,21] = POL1[2] Using "###"
K1$[22,23] = LINE_WH Using "##"
K1$[24,29] = LOC$[1,6]
K1$[30,41] = LOT$[1,12]
E = 2 \ V1 = 0
Search #CH_SPRODLOT,1,0;I$,V1,E
If E Gosub ERR_SEARCH
R[6] = V1
V6$ = " ",V6$
V6$[1,22] = K1$[30,51];V6$[23,30] = K1$[22,29];V6$[31,42] = K1$[1,12]
Search #CH_SPRODLOT,4,1;V6$,V1,E \ If E Gosub ERR_SEARCH
P0$ = " ",P0$
SP1$ = " ",SP1$
For I = 0 To 4
  P3[I] = 0
  If I <= 2 Let P2[I] = 0
  If I <= 1 Let P1[I] = 0
Next I
P0$[1,12] = C2$[1,12]
P0$[13,24] = V6$[1,12]
SP1$[1,6] = LOC$[1,6]
P1 = LINE_WH \ P1[1] = 3
P2 = PH0[3];P3[2] = B1[21]
Mat Write #CH_SPRODLOT,R[6];P0$;
Mat Write #CH_SPRODLOT,R[6],66;P1;
Mat Write #CH_SPRODLOT,R[6],70;P2;
Mat Write #CH_SPRODLOT,R[6],82;P3;
Mat Write #CH_SPRODLOT,R[6],114;SP1$;
V6$ = " ",V6$
V6$[1,12] = K1$[1,12]
V6$[13,20] = K1$[22,29]
V6$[21,42] = K1$[30,51]
V1 = R[6]
Search #CH_SPRODLOT,4,2;V6$,V1,E
If E Gosub ERR_SEARCH
V6$ = " ",V6$
V6$[1,8] = K1$[22,29]
V6$[9,20] = K1$[1,12]
V6$[21,42] = K1$[30,51]
V1 = R[6]
Search #CH_SPRODLOT,4,3;V6$,V1,E
If E Gosub ERR_SEARCH
V6$ = " ",V6$
V6$[1,12] = K1$[1,12]
V6$[13,14] = K1$[22,23]
V6$[15,36] = K1$[30,51]
V6$[37,42] = K1$[24,29]
V1 = R[6]
Search #CH_SPRODLOT,4,4;V6$,V1,E
If E Gosub ERR_SEARCH
V6$ = " ",V6$
M1 = 1
Return 
L_4390: Rem
!For X = 0 To 100 \ R0[X] = 0 \ Next X
!Print @0,4;'CE';@5,4;"PRODUCT ";C2$[1,12];"  ";POL1$[1,30];
!X1 = POL1[4] \ Gosub L_6220
!CNVTA = POL3[2] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[4] \ CNVTU[2] = 1
!Gosub L_6260 \ ORD = AMOUNT
!CNVTA = POL3[4] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[4] \ CNVTU[2] = 1
!Gosub L_6260 \ SHIP = AMOUNT
!Print Using "LINE ###";@10,5;POL1[2];
!Print Using "QTY RETURNED #######.##  ";@50,5;SHIP;M1$;
!X1 = POL1[4] \ Gosub L_6220
!K17$ = " ",K17$;K17$[1,6] = PH0[2] Using "######";K17$[7,9] = POL1[2] Using "###"
!ITM = 0
!SR = 6 \ SC = 0 \ NR = 17 \ NC = 80
!B1$ = 'GH',B1$ \ X$ = 'ML','MD','GV' \ B2$ = X$,B2$
!B1$[NC - 2] = "" \ B2$[NR * 3 - 3] = ""
!Print 'BG';@SC + 1,SR;B1$;'G2';B2$;'G4';
!Print @SC,SR;'G1';B2$;'G3';B1$;'EG';
!ROW = 9
!Gosub L_5490
!If QTA >= POL3[4] Goto L_4790
!Gosub L_3710
!L_4640: If RASL If LOTCNT Print @1,19;CL$;@2,19;'BD BR'; Tab 15;"LOT CODE "; Tab 30;"LOCATION"; Tab 45;"QTY"; Tab 78;'ED ER';
!If Not(RASL) If LOTCNT Print @1,19;CL$;@2,19;'BD BR'; Tab 15;"LOT CODE "; Tab 45;"QTY"; Tab 78;'ED ER';
!If Not(LOTCNT) Print @1,19;CL$;@2,19;'BD BR'; Tab 15;"LOCATION"; Tab 30;"QTY"; Tab 78;'ED ER';
!Print @1,20;CL$;@2,20;'BR BD';"ENTER => ";'ER ED';
!If QTA >= POL3[4] Goto L_4790
!S0$ = " ",S0$ \ OL2$ = " ",OL2$
!Gosub L_3710 \ Goto L_4700
!Gosub L_8000
!L_4700: Gosub L_8150
!Gosub L_8310
!QTA = QTA + S3[1]
!QTA1 = QTA1 + Q2[3]
!Gosub L_2660
!LINE_WH = POL1[1]
!M1 = 1 \ Gosub L_3610
!Gosub L_5490
!Goto L_4640
!L_4790: X1 = POL1[4] \ Gosub L_6220 \ Print Using "------#.## ";@40,7;"QTY OPEN ";SHIP - QTA1;M1$;
!Print @1,20;CL$; \ Print @1,21;CL$;
!If QTA > POL3[4] Print @55,21;'RB BR BD';"ASSIGNED > QTY RETURN";'ED ER';
!Print @1,19;CL$;
!If Not(F9) Print @2,20;'BD BR';"ENTER ITEM # TO EDIT  R: relist  E: exit ";'ED ER';
!If F9 Print @2,20;'BD BR';"<< MORE >> ENTER ITEM # TO EDIT  R: relist <CR>: continue ";'ED ER';
!Input ""J4$
!If F9 If J4$ = "" Let ROW = 9 \ SK17$ = K17$ \ Gosub L_5190
!If J4$ = "E" Goto L_5090
!If J4$ = "R"
 ! K17$ = " ",K17$
  !For X = 0 To 100 \ R0[X] = 0 \ Next X
  !ITM = 0
  !K17$[1,6] = PH0[2] Using "######";K17$[7,9] = POL1[2] Using "###";ROW = 9
  !QTA = 0 \ QTA1 = 0 \ Gosub L_5490
!End If 
!X2 = J4$
!If X2 < 0 Or X2 > 100 Goto L_4790
!If Not(X2) Or R0[X2] = 0 Goto L_4790
!Mat Read #CH_SORDLOT,R0[X2],0;S0$;
!Mat Read #CH_SORDLOT,R0[X2],36;S1;
!Mat Read #CH_SORDLOT,R0[X2],44;S2;
!Mat Read #CH_SORDLOT,R0[X2],60;S3;
!Mat Read #CH_SORDLOT,R0[X2],96;OL2$;
!LOT$[1,12] = S0$[13,24] \ LOC$[1,6] = OL2$[11,16]
!Gosub L_3710
!R[7] = R0[X2]
!Gosub L_5840
!Goto L_4790
!L_5090: If QTA < POL3[4] Goto L_4640
!If QTA > POL3[4] Goto L_4640
!QTA = 0
!Return 
!X2 = S3[1]
!Mat Read #CH_SORDLOT,R16,60;S3;
!S3[1] = S3[1] + X2
!Goto L_5350
!L_5160: Rem DISPLAY LINES
!CNT = 0
!K17$ = " ",K17$;K17$[1,6] = PH0[2] Using "######";K17$[7,9] = POL1[2] Using "###";SK17$ = K17$
!L_5190: F9 = 0
!X1 = POL1[4] \ Gosub L_6220
!For X = 8 To 18 \ Print @1,X;CL$; \ Next X
!Print @1,8;'BD BR';"ITM  LOT "; Tab 24;"LOCATION "; Tab 42;"ASSIGNED"; Tab 70;"B/O"; Tab 78;'ER ED';
!L_5240: Search #CH_SORDLOT,3,3;K17$,R17,E
!If E Goto L_5480
!X2 = K17$[10,11]
!If X2 <> POL1[1] Goto L_5240
!If KIT And K17$[30,32] <> "KIT" Goto L_5240
!If Not(KIT) And K17$[30,32] = "KIT" Goto L_5240
!PO = K17$[1,6] \ LN = K17$[7,9]
!If PO <> PH0[2] Or LN <> POL1[2] Goto L_5480
!LN = K17$[33,35] \ If KIT And LN <> KL1[1] Goto L_5240
!If K17$[40,40] <> "4" Goto L_5240
!CNT = CNT + 1
!If ITM2 > CNT Goto L_5240
!Mat Read #CH_SORDLOT,R17,0;S0$;
!Mat Read #CH_SORDLOT,R17,60;S3;
!Mat Read #CH_SORDLOT,R17,96;OL2$;
!ITM = ITM + 1
!R0[ITM] = R17
!L_5350: Print Using "###> ";@1,ROW;ITM;
!Print @6,ROW;S0$[13,24];
!Print @25,ROW;OL2$[11,16];
!CNVTA = S3[1] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[4] \ CNVTU[2] = 1
!Gosub L_6260 \ Q2[3] = AMOUNT
!X1 = POL1[4] \ Gosub L_6220
!CNVTA = S3[3] \ CNVTU[0] = 0 \ CNVTU[1] = POL1[4] \ CNVTU[2] = 1
!Gosub L_6260 \ Q2[4] = AMOUNT
!Print Using "#######.##   ";@40,ROW;Q2[3];M1$;
!If Q2[4] Print Using "#######.##  ";@60,ROW;Q2[4];M1$;
!ROW = ROW + 1
!If ROW = 16 Let F9 = 99 \ Goto L_5480
!Goto L_5240
!L_5480: Return 
L_5490: Rem ADD UP TOTAL ASSIGNED
ROW = 9
If ITM > 7 Let ITM2 = (ITM - (ITM - 7)) + 1 Else Let ITM2 = 0
If ITM2 < 0 Let ITM2 = 0
If ITM2 Let ITM = ITM2 - 1 Else Let ITM = 0
QTA = 0 \ QTA1 = 0
K18$ = " ",K18$;K18$[1,6] = PH0[2] Using "######";K18$[7,9] = POL1[2] Using "###"
K18$[10,11] = POL1[1] Using "##"
L_5570: Search #CH_SORDLOT,3,3;K18$,K17,E
If E Goto L_5750
X2 = K18$[10,11]
If X2 <> POL1[1] Goto L_5570
O2 = K18$[1,6] \ LN = K18$[7,9]
If O2 <> PH0[2] Or LN <> POL1[2] Goto L_5750
If KIT And K18$[30,32] <> "KIT" Goto L_5570
If Not(KIT) And K18$[30,32] = "KIT" Goto L_5570
LN = K18$[33,35] \ If KIT And LN <> KL1[1] Goto L_5570
If K18$[40,40] <> "4" Goto L_5570
Mat Read #CH_SORDLOT,K17;S0$;
Mat Read #CH_SORDLOT,K17,36;S1;
Mat Read #CH_SORDLOT,K17,44;S2;
Mat Read #CH_SORDLOT,K17,60;S3;
Mat Read #CH_SORDLOT,K17,96;OL2$;
If INVOICE If K18$[12,17] = "NONE  "
  QORD = S3[1] \ QSHP = S3[1] \ QBO = S3[3]
  R[7] = K17 \ Gosub L_3190 \ Goto L_5570
End If 
If AUTO And RASL And K18$[12,17] = "NONE  "
  QSHP = S3[1] \ QBO = S3[3]
  R[7] = K17 \ Gosub L_3190 \ Goto L_5570
End If 
If AUTO And Not(RASL) And (K18$[12,17] = "STOCK " Or K18$[12,17] = DFLTRCVLOC$)
  QSHP = S3[1] \ QBO = S3[3]
  R[7] = K17 \ Gosub L_3190 \ Goto L_5570
End If 
QTA = QTA + S3[1]
Goto L_5570
L_5750: If AUTO Goto L_5830
CNVTA = QTA \ CNVTU[0] = 0 \ CNVTU[1] = POL1[4] \ CNVTU[2] = 1
ROW = 9
Gosub L_6260 \ QTA1 = AMOUNT
X1 = POL1[4] \ Gosub L_6220
!Print Using "#######.## ";@5,7;"QTY ASSIGNED ";QTA1;M1$;
!X1 = POL1[4] \ Gosub L_6220 \ Print Using "------#.## ";@40,7;"QTY OPEN ";SHIP - QTA1;M1$;
!Gosub L_5160
L_5830: Return 

L_6220: Rem GET UNITS
If X1 = -1 Let M1$ = "CWT " \ Goto L_6250
If X1 = -3 Let M1$ = "LB  " \ Goto L_6250
Read #CH_CCODE,X1,10;M1$;
L_6250: Return 

L_6260: Rem UNIT CONVERSION RETURNS AMOUNT
Gosub L_20000
Return 
L_6500: Rem CHECK IF NEED TO ASK LOTS
USELOT = 0
If Not(RASL) Let USELOT = 0 \ Return 
If KIT Goto L_10000
V1$ = " ",V1$;V1$[1,6] = PH0[2] Using "######"
L_6550: Search #CH_POL,3,1;V1$,R[9],E \ If E > 2 Gosub ERR_SEARCH
If E Return 
X2 = V1$[1,6] \ If X2 <> PH0[2] Return 
Mat Read #CH_POL,R[9],0;POL1;
Mat Read #CH_POL,R[9],24;POL3
Mat Read #CH_POL,R[9],376;POMISC
If Not(POMISC[0]) Goto L_6550
Call Logic(1,2 ^ 0,POL1[3],NONSTOCK)
Call Logic(1,2 ^ 2,POL1[3],ZLINE) \ If ZLINE Goto L_6550
If Not(NONSTOCK)
  Mat Read #ch_prod,POL3[1],0;A$;
  Mat Read #ch_prod,POL3[1],156;B1;
  Mat Read #ch_prod,POL3[1],256;A;
  Mat Read #ch_prod,POL3[1],512;PFU1;
  Mat Read #ch_prod,POL3[1],554;PFU2;
Else 
  Gosub L_6900
End If 
Mat Read #CH_POL,R[9],66;POL1$;
If C2$[1,12] <> A$[140,151] Let C2$ = A$[140,151]
If NONSTOCK Goto L_6550
Gosub L_3710
If LOTCNT Let USELOT = 99
If P9$[41,41] = "W" Call "CHKWRASL",POL1[1],RASL[]
If RASL Let USELOT = 99
Goto L_6550
L_6600: ! delete sordlots for the po
LET A9$=" ",A9$ \ LET A9$=PH0[2] USING "######"                                                        
L_6630: SEARCH #ch_sordlot,3,3;A9$,V1,E \ IF E>2 GOSUB Err_Search:                      
IF E RETURN  ! "eof                                                             
let tmp3=a9$[1,6]\ if tmp3<>ph0[2] return ! IF A9$[1,6]<>I9$[1,6] RETURN  ! "order/line/whse changed              
IF A9$[30,32]="KIT" GOTO L_6630: ! "kits deleted separately                     
IF A9$[40,40]<>"4" GOTO L_6630: ! NOT A DEBIT MEMO                              
LET I9$=A9$ \ LET R17=V1                                                        
MAT  READ #ch_sordlot,V1;S0$; \ MAT  READ #ch_sordlot,V1,60;S5;                                 
MAT  READ #ch_sordlot,V1,106;LOC$; \ MAT  READ #ch_sordlot,V1,36;S1;                            
IF S1[1]<>4 GOTO L_6630: 
! S1 = POL1[2] \ S1[1] = 4 \ S1[2] = POL1[1]
LET A9$=" ",A9$ \ LET A9$[1,2]=s1[2] USING "##" !rel qty in prodlot             
LET A9$[3,8]=LOC$[1,6] \ LET A9$[9,32]=S0$[1,24]                                
SEARCH #ch_sprodlot,2,3;A9$,V1,E \ IF E>1 GOSUB Err_Search:                              
IF E GOTO L_6705:                                                               
MAT  READ #ch_sprodlot,V1,82;P4                                                          
LET P4[3]=P4[3]-S5[1] \ IF P4[3]<0 LET P4[3]=0 ! "qty allocated                 
LET P4[4]=P4[4]-S5[3] \ IF P4[4]<0 LET P4[4]=0 ! "qty b'ord                     
MAT  WRITE #ch_sprodlot,V1,82;P4;                                                        
L_6705: LET K5$=" ",K5$ \ LET K5$[1,12]=S0$[13,24] \ LET K5$[23,39]=I9$[1,17]   
LET K5$[40,51]=S0$[1,12] \ LET K5$[52,52]="4" \ LET V1=R17 \ LET A9$=I9$        
SEARCH #ch_sordlot,5,3;A9$,V1,E \ IF E GOSUB Err_Search: !delete ordlot                  
SEARCH #ch_sordlot,5,2;K5$,V1,E \ IF E GOSUB Err_Search:                                
LET K5$=" ",K5$                                                                 
LET K5$[1,12]=S0$[1,12];K5$[13,29]=I9$[1,17];K5$[30,41]=S0$[13,24]              
LET K5$[52,52]="4"                                                              
SEARCH #ch_sordlot,5,1;K5$,V1,E                                                         
IF E GOSUB Err_Search:                                                          
LET V1=R17                                                                      
LET E=3 \ SEARCH #ch_sordlot,1,0;K5$,V1,E \ IF E GOSUB Err_Search:                      
LET A9$=I9$                                                                     
GOTO L_6630: 

L_6800: Rem ENTER SERIAL #'S
return !  no serial # yet
If NONSTOCK Return 
If A$[8,8] <> "Y" Return 
If TYPE = 3 And POL1[3] <> 0 Return 
TS9[0] = S9[0];TS9[1] = S9[1];TS9[2] = S9[2];TS9[3] = S9[3]
S9[5] = R[9]
If KIT Let TYPE = 1000 + TYPE;S9[8] = R46
Swap 1,"SNDMENT"
S9[0] = TS9[0];S9[1] = TS9[1];S9[2] = TS9[2];S9[3] = TS9[3]
If KIT And TYPE > 1000 Let TYPE = TYPE - 1000
Return 

L_6900: Rem read in nonstock data
Mat Read #ch_nstk,POL3[1];NSD$
Mat Read #ch_nstk,POL3[1],96;NSD1
Mat Read #ch_nstk,POL3[1],112;NSD2
Mat Read #ch_nstk,POL3[1],132;NSD3;
For X0 = 0 To 20
  If X0 < 21 Let PFU1[X0] = 0
  If X0 < 4 Let PFU1[X0] = NSD1[X0 + 2]
  If X0 < 7 Let PFU2[X0] = 0
  If X0 < 3 Let PFU2[X0] = NSD3[X0 + 3]
Next X0
A[5] = NSD3[7];A[6] = NSD3[6];B1[23] = NSD3[2];A1[3] = NSD3[8]
PL4[12] = NSD3[6];PL4[13] = NSD3[7];PL4[14] = NSD3[2];PL4[15] = NSD3[8]
PFU1[8] = NSD1[5];PFU1[10] = NSD1[4];PFU1[11] = NSD1[3];PFU1[15] = NSD1[7]
A$[140,151] = NSD$[1,12];A$[9,38] = NSD$[13,42];A$[63,92] = NSD$[43,72]
A$[93,112] = NSD$[73,92]
POL1$[1,30] = NSD$[13,42];POL1$[31,60] = NSD$[43,72];POL1$[61,80] = NSD$[73,92]
POL1$[81,92] = NSD$[1,12]
Return 

L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 








L_10000: Rem FROM KIT ENTRY
If Not(KIT) Return 
Return ! no kits from debit memo


L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
If L3 Let AMOUNT = CNVTA \ Goto L_20160
L_20050: goto L_20120: ! If Spc(4) > 1280 Goto L_20120
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Goto L_20160
!L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto L_20080
!If CNVTU[2] = 0 Goto L_20160
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem "=============================
if not (chan[0])
	Try close #ctlc else rem
endif
if not (chan[1]) ! purchase order header  #8 ok
	 Try Close #Ch_Poh else rem 
endif
if not (chan[2]) ! po lines #9 ok
	Try Close #Ch_PoL  else rem
endif
If not (chan[3]) ! vendor
	Try Close #ch_vend else rem
endif
if not (chan[4]) ! product file #3 ok
	Try Close #Ch_Prod else rem 
endif
if not (chan[5]) ! product warehouse #10
	Try Close #Ch_PrWh else Rem
endif
if not (chan[6]) !  nonstock #66
	Try Close #ch_nstk else Rem
endif
if not (chan[7]) ! unit of measure file #67
	Try Close #Ch_Ccode else Rem 
endif
if not (chan[8]) ! sprodlot
	Try Close #Ch_sprodlot else Rem 
endif
if not (chan[9]) ! sordlot
	Try Close #Ch_sordlot else Rem 
endif

ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program