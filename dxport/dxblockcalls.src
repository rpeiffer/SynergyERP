! -- dxblockcall.lib
! library of page block routines called by custom applications
!
! 1.0 01/19/2005 new
!
! loadsave -w -n 100,10 -o dxblockcalls.lib src/dxblockcalls.src
!
!all rights reserved. (c)copyright 2005 by: dynamicconcepts
!
declare intrinsic function findchannel
declare intrinsic sub dxget,dxset,dxsave,env
!
!
external lib "dxblockgeneral.lib" !general routines
declare external sub blocksuberr,blockmainerr,blockreadsystemfile,blockopenfiles
declare external function blockgetprogrampath$,blockcrc$,blockgetmsg$
!
external lib "libgeneral.lib"
declare external sub addtostr
!
include "src/dxblockfiles.bsh"
!
!
external sub setblock(e$,blockid$,...)
!--------------------------------------------------------------------
! reads page definition for passed blockid and sets xport values for template
! if optional rstr$ sent, no dxset's, populate rstr$ instead
!
!
Dim BlockHdr. As BlockHdr, blockcol. as blockcol, blockinp. as blockinp
dim blockinplst. as blockinplst, blockbut. as blockbut
!
sub hdrlist(e$,blockid$,rstr$)
!--------------------------------------------------------------------
! header routine
! dxset's block header parameters
! called by setblock!
 try
 !
  keys$=blockid$
  Try
   Search = #c[0],1;keys$ 
  Else 
   e$="Blockid ",blockid$," not in hdr"
   error 10000 
  End Try
  Read Record #c[0],-2;blockhdr.;
  !
  call dxset(10,"blockid",blockid$) !in tmp table for other programs to retrieve
  !

  !
  if rstr$=""
  call dxset("blockid",blockid$)
  call dxset("description",blockhdr.desc$)
  Call dxset("filename",blockhdr.filename$)
  Call dxset("title",blockhdr.title$)
  call dxset("subtitle",blockhdr.subtitle$)
  call dxset("include1",blockhdr.include1$)
  call dxset("include2",blockhdr.include2$)
  call dxset("custom1",blockhdr.custom1$)
  call dxset("custom2",blockhdr.custom2$)
  call dxset("custom3",blockhdr.custom3$)
  call dxset("rowlink",blockhdr.rowlink$)
  call dxset("evenodd",blockhdr.evenodd$)
  else
   !populate rstr$
   !?? or xml ??
   tmp$="<blockid>BLOCKID",fdel$,"TYPE",fdel$ 
   call addtostr(e$,rstr$,tmp$) !blockid headers row
   !tmp$=blockid$,fdel$,type$,fdel$ 
   !tmp$=tmp$,blockhdr.desc$,fdel$,blockhdr.filename$,fdel$,blockhdr.title$,fdel$
   !tmp$=tmp$,blockhdr.subtitle$,fdel$,blockhdr.include1$,fdel$,blockhdr.include2$,fdel$
   !tmp$=tmp$,blockhdr.custom1$,fdel$,blockhdr.custom2$,fdel$,blockhdr.custom3$,fdel$
   !tmp$=tmp$,blockhdr.rowlink$,fdel$,fdel$,blockhdr.evenodd$,fdel$
   call addtostr(e$,rstr$,tmp$) !blockid data row
  end if !rstr$
  !
else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !hdrlist
!
sub collist(e$,blockid$,rstr$)
!--------------------------------------------------------------------
! columns routine
! dxset's block column parameters
! called by setblock!
 try
 !
  fieldcnt=10
  maxrowcnt=50
  free fields$
  dim fields$[fieldcnt,maxrowcnt,120] !#cols,#rows,maxfieldlength
  keys$=blockid$
  seq=-2
  Try Search >= #c[1],1;keys$ Else Rem
  Do
   Try Read Record #c[1],seq;blockcol.; Else Exit Do
   if blockcol.id$<>blockid$ exit do
   if cnt>maxrowcnt exit do
   !
   fields$[0,cnt]=blockcol.id$
   fields$[1,cnt]=str$(blockcol.seq)
   fields$[2,cnt]=blockcol.label$
   fields$[3,cnt]=blockcol.active$
   fields$[4,cnt]=blockcol.link$
   fields$[5,cnt]=blockcol.style$
   fields$[6,cnt]=blockcol.width$
   fields$[7,cnt]=str$(blockcol.dbposition)
   fields$[8,cnt]=str$(blockcol.dbprecision)
   fields$[9,cnt]=blockcol.dbtype$
   fields$[10,cnt]=blockcol.varname$
   !
   cnt=cnt+1
   seq=-1 !get next
 Loop
 !
 if cnt>0 let cnt=cnt-1
 call dxset("colcnt",str$(cnt)) !# of columns in table
 !
 if rstr$=""
  For i=0 to fieldcnt
   call dxset("coldef"+str$(i),fields$[i][])  !for template
  Next i
 else
   tmp1$="<type>table"
   call addtostr(e$,rstr$,tmp1$,fields$[])  !for .net
   rstr$=rstr$,"</type>"
 end if
 !
 for i=0 to cnt
  call dxset(10,"coldefvarname"+str$(i),fields$[10][i]) !tmp table
 next i
 !
 !
 else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !collist
!
sub inplist(e$,blockid$,rstr$)
!--------------------------------------------------------------------
! inputs routine
! dxset's block inputs (edit page) parameters
! called by setblock!
 try
 !
  cnt=0
  fieldcnt=19
  rowcnt=50
  free fields$
  dim fields$[fieldcnt,rowcnt,120] !#cols,#rows,maxfieldlength
  keys$=blockid$
  seq=-2
  Try Search >= #c[2],1;keys$ Else Rem
  Do
 Try Read Record #c[2],seq;blockinp.; Else Exit Do
   if blockinp.id$<>blockid$ exit do
   if cnt>rowcnt exit do
   !
   fields$[0,cnt]=blockinp.id$
   fields$[1,cnt]=str$(blockinp.seq)
   fields$[2,cnt]=blockinp.label$
   fields$[3,cnt]=blockinp.active$
   fields$[4,cnt]=blockinp.varname$
   fields$[5,cnt]=str$(blockinp.row)
   fields$[6,cnt]=str$(blockinp.column)
   fields$[7,cnt]=blockinp.type$
   fields$[8,cnt]=blockinp.required$
   fields$[9,cnt]=blockinp.default$
   fields$[10,cnt]=blockinp.helppage$
   fields$[11,cnt]=blockinp.onfocus$
   fields$[12,cnt]=blockinp.onchange$
   fields$[13,cnt]=str$(blockinp.dbposition)
   fields$[14,cnt]=str$(blockinp.dbprecision)
   fields$[15,cnt]=blockinp.dbtype$
   fields$[16,cnt]=blockinp.disabled$
   fields$[17,cnt]=blockinp.notab$
   fields$[18,cnt]=blockinp.focus$
   fields$[19,cnt]=blockinp.lookuplink$
   !
   for i=0 to fieldcnt
    if fields$[i,cnt]="" let fields$[i,cnt]=" "
   next i
   !
  cnt=cnt+1
   seq=-1 !get next
 Loop
 if cnt>0 let cnt=cnt-1
 call dxset("inpcnt",str$(cnt)) !# of columns in table
 !
 if rstr$=""
 For i=0 to fieldcnt
  call dxset("inpdef"+str$(i),fields$[i][])  !for template
 Next i
 else
   tmp1$="<type>edit"
   call addtostr(e$,rstr$,tmp1$,fields$[])  !for .net
   rstr$=rstr$,"</type>"
 end if
 !
 for i=0 to cnt
  call dxset(10,"inpdefvarname"+str$(i),fields$[4][i])
 next i
 
 !
!
!
  !
else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !inplist
!
sub butlist(e$,blockid$,rstr$)
!--------------------------------------------------------------------
! buttons routine
! dxset's block huttons parameters
! called by setblock!
 try
 !
  colcnt=4
  rowcnt=50
  free fields$
  dim fields$[colcnt,rowcnt,120] !#cols,#rows,maxfieldlength
  keys$=blockid$
  seq=-2
  Try Search >= #c[4],1;keys$ Else Rem
  Do
 Try Read Record #c[4],seq;blockbut.; Else Exit Do
   if blockbut.id$<>blockid$ exit do
   if cnt>rowcnt exit do
   !
   fields$[0,cnt]=blockbut.id$
   fields$[1,cnt]=str$(blockbut.seq)
   fields$[2,cnt]=blockbut.label$
   fields$[3,cnt]=blockbut.active$
   fields$[4,cnt]=blockbut.link$
  !
 cnt=cnt+1
   seq=-1 !get next
 Loop
 !
 if rstr$=""
 For i=0 to 4
  call dxset("butdef"+str$(i),fields$[i][])  !for template
 Next i
  else
   tmp1$="<type>button"
   call addtostr(e$,rstr$,tmp1$,fields$[])  !for .net
   rstr$=rstr$,"</type>"
 end if
 !
!
!
  !
else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !butlist
!
! **main setblock  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !
 try
  try enter rstr$,... else dim rstr$[1]
 !
 Dim blockconfig. as blockconfig
 Dim 1%,c[20],3%,keys$[120],blockid$[8]
 dim tmp$[1000],tmp1$[100],tmp2$[100]
 dim fdel$[10]
 call env(1,"FDEL",fdel$)
 ! need to get filenames from dxsystem.txt
 !
 !read system file parameters
 Call blockReadSystemFile(e$,blockconfig.)
 !
 ! open files
 !
 Call blockopenfiles(e$,blockconfig.,c[])
 !
 Call hdrlist(e$,blockid$,rstr$)
 !
 Call collist(e$,blockid$,rstr$)
 !
 Call inplist(e$,blockid$,rstr$)
 !
 Call butlist(e$,blockid$,rstr$)
 !
 else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !setblock
!
!
external sub loadcols(e$,fields$[],cnt,a$,...)
!UBS NOT USED using structures so needs to be in calling program!!!
! reads a$,a1,a2,a3,a4 and populates fields$[] for row=cnt based on 
! column definitions for blockid lasted loaded by setblock
! pass fields$[] 3-dim array being populated by loadcols
! pass cnt, which is row in fields$[] array to populate 
! pass a$ string, and optionally numeric arrays 1%,2%,3%,4% in any order
 !
try 
   try
    enter a1[],...
    enter a2[],...
    enter a3[],...
    enter a4[]
   else
   end try
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !loadcols
!
!
external sub setcols(e$,blockno,fields$[])
! dxsets column arrays in fields$[] to output to xport
! column definitions from blockid lasted loaded by setblock
! pass blockno to use on web page 0=none, <0 = blockid
! pass fields$[] array previously loaded by loadcols
try
 dim tmp$[30],blockid$[8]
 for i=0 to ubound(fields$[],1)
 tmp$="col"+str$(i)
 if blockno>0 let tmp$=str$(blockno)+"col"+str$(i)
 !get blockid from setblock if blockno<0
 if blockno<0 call dxget(10,"blockid",blockid$) \ let tmp$=blockid$ +"col"+str$(i)
  call dxset(tmp$,fields$[i])
 next i
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !setcols
!
!
external sub setvalues(e$,blockno,a$,...)
! reads a$,a1,a2,a3,a4 and dxsets default value array to output to xport
! field definitions from blockid lasted loaded by setblock
! pass blockno to use on web page 0=none, <0 = blockid
! pass a$ string, and optionally numeric arrays 1%,2%,3%,4% in any order
 !
try
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !setvalues
!
!
external sub getvalues(e$,blockid$,blockno,a$,...)
! reads in xport values from blockno, based on field definitions in blockid$
! and populates a$ string, and optional numeric arrays
! pass blockid$ for field definitions
! pass blockno that matches blockno section of web page
! pass a$ string, and optionally numeric arrays 1%,2%,3%,4% in any orde 
 !
try
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !getvalues
