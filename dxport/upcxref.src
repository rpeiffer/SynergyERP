! upcxref.dl4
!
! UPC Product XREF Library 
!
! loadsave -w -n 100,10 -o prog/dxport/upcxref.dl4 src/upcxref.src
!
!
include "src/copyright.inc"
! internal files needed
External Lib "libfilecustgrp.lib"
Declare External Sub filedroplistcustgrp
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,PDate$
Declare External Function ChkAltItem$,formatdate2$,getuidrec
Declare External Sub UserCntrl,getportdefault

External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus,GetDelimiters

! OPTIONS WITHIN
!  addedit
!  lookup
!  display
!  custgrp - add/edit
Dim e$[500]
External Sub UPCADDEDIT(e$,IntCo,UPC1$,UPC[])
Try
Rem  upcxfaddedit UPC ADD AND EDIT CALL...
Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR  2, 2007  14:46:51
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/misc/upcxfaddedit.src (univ2) [txc] {44278}
Rem  Copyright (c) 2007 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! MODE=1 Edit, MODE=2 Inquiry
! also uses UPC[6] for Edit mode 1=add, 2=edit
Declare Intrinsic Sub InpBuf,String,FindF
Declare Intrinsic Function Findchannel
!Option Default Dialect IRIS1

Rem #include com.prod.i
! If Err 0 Gosub ERR_TRAP
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}
Dim 2%,E
Dim 2%,CH_PROD,CH_CUST,CH_CCODES,CH_UPCXF,STARTCHAN
Dim 3%,UPC3[7],KSIZE,SEL[25],CSTGRP[10]
Dim 3%,REC_UPC,REC_TMP
Dim UPC$[57],PROD$[12],FILE$[16],BFILE$[50],KUPC$[50],KCSTGRP$[50],KCCODE$[50],KPROD$[50]
Dim TITLE$[50],CUSTGRPNAME$[30],CUSTGRP$[60],CCD$[14],X$[10],ENTDATE$[10]
Dim SOURCE$[8],J$[75],J0$[16],J1$[75],J4$[75],J5$[75],J6$[1],4%,J1,3%
Dim RETDATE$[8],UNIT$[4],SEL$[10],ALTCODE$[25],UPC2$[50],Blank$[100]
! dx variables
  dim Message$[200],WebStr$[600]
dim tmp$[1200],tmp1$[300]
dim action$[30],options$[30],userid$[8],b$[200],action1$[30],action2$[30]
  Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
Blank$=" ",Blank$
! we will reget all session info (for rstr$ and action$)
! action$ will = prodm (as that where we came from
! action1$ will = upcxref
! action2$ will = what we're doing (along with mode)
call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
! Enter UPC1$,UPC[]
! CALL DXSAVE(0,"tmp/upcedt.txt!")
CH_UPCXF = UPC[0]
CH_PROD = UPC[1]
CH_CSTGRP = UPC[2]
CH_CCODES = UPC[3]
MODE = UPC[4]
If MODE = 0 Let MODE = 2
GROUP = UPC[5]
EDITMODE = UPC[6]
REC_UPC = UPC[7] ! get it in prodm
STARTCHAN = 99
Returnstatus=1;message$="OK"
If CH_UPCXF < 0
  CH_UPCXF=findchannel()
  File$="2/upcxref"+Str$(COID)
  Call Findf(File$,found)
  if not(found) Gosub BUILDFILE
  If MODE = 1
    Open #CH_UPCXF,FILE$
  End If 
  If MODE = 2
    Ropen #CH_UPCXF,FILE$
  End If 
End If 
If CH_PROD < 0
  StartChan=findchannel()
  CH_PROD = STARTCHAN
  Mat Read #1,88,1792;FILE$;
  Ropen #CH_PROD,FILE$
End If 
If CH_CSTGRP < 0
  StartChan=Findchannel()
  CH_CSTGRP = STARTCHAN
    FILE$ = "2/custgrp"+Str$(COID)
  Ropen #CH_CSTGRP,FILE$
End If 
If CH_CCODES < 0
  StartChan=Findchannel()
  CH_CCODES = STARTCHAN
  Mat Read #1,88,1728;FILE$;
  Ropen #CH_CCODES,FILE$
End If 
Gosub GETPROD
TITLE$ = " ",TITLE$
!If EDITMODE = 1 Let TITLE$ = "Add code for product ",UPC1$[1,12]
!If EDITMODE = 2 Let TITLE$ = "Edit ",UPC1$[13,37]," for product ",UPC1$[1,12]
!Window Open @3,4; Size 70,13; Using TITLE$
!Gosub DRAWSCREEN
!If EDITMODE = 1 ! always as we don't know existing
  UPC$ = " ",UPC$
  For X = 0 To 7
    UPC3[X] = 0
  Next X
  UPC$[1,12] = UPC1$[1,12] ! prodcode
  If Rec_upc>0 and rec_upc<CHF(CH_UPCXF) ! sent record
	Gosub READUPC
	let editmode=2 ! definitely edit mode!
	goto Gotarec ! no need to enter fields
  Endif
  For FIELD = 1 To 6
    Gosub EDITFIELDS
  Next FIELD
  Gotarec: ! got one from passed record - check it
  KUPC$ = " ",KUPC$
	KUPC$[1,12] = UPC$[1,12]
	KUPC$[13,37] = UPC$[13,37]
	KUPC$[38,43] = UPC3[0] Using "######"
	KUPC$[44,49] = UPC3[1] Using "######"
	Search #CH_UPCXF,2,1;KUPC$,REC_UPC,E
	if not(e) let Editmode=2 ! edit
	if e ! did not find - consider it NEW/ADD
		let editmode=1 ! add
		X$ = Tim(4) Using "&&&&&#" ! returns mmddyy
	  X2 = X$[5,6],X$[1,4]
	  UPC3[4] = X2
	  !Gosub CNVDATE
	  !ENTDATE$ = X$
	Endif
! End If  ! need to determine editmode 1=add, 2=edit

If EDITMODE = 2
  Gosub READUPC
  CCD$ = " ",CCD$
  UNIT$ = " ",UNIT$
  If UPC3[0]
    Mat Read #CH_CCODES,UPC3[0],0;CCD$
    UNIT$[1,4] = CCD$[11,14]
  End If 
  ! Gosub FILLINDATA
  Gosub DELKEYS ! always delete keys
  UPC$[1,12] = UPC1$[1,12] ! prodcode
  ! as we read old data - reget sent data
  For FIELD = 1 To 6
    Gosub EDITFIELDS
  Next FIELD
End If 
SELECTION: Rem get an edit selection
!Print @1,9;'CE';"Enter #:field to edit, DELETE or  E:end  ";
!Input ""SEL$
If Mode=1 and editmode<>0 let SEL$="E"
If Action2$="DELETE" let SEL$="DELETE"

If SEL$ = "DELETE"
  UPC$ = " ",UPC$
  For X = 0 To 7
    UPC3[X] = 0
  Next X
  If EDITMODE = 2 ! found rec, editmode 1 = new (no rec yet)
    Mat Write #CH_UPCXF,REC_UPC,0;UPC$
    Mat Write #CH_UPCXF,REC_UPC,57;UPC3
    Mat Write #CH_UPCXF,REC_UPC,105;UPC2$;
    E = 3
    Search #CH_UPCXF,1,0;KUPC$,REC_UPC,E
    If E ERROR 11000 ! Gosub ERR_SEARCH
  End If 
  returnstatus=1;Message$="Record Deleted"
  Goto OUTEND
  Return 
End If 
If SEL$ = "E"
  Gosub CODECHECK
  Goto OUTEND
  If EDITMODE = 1
    Gosub GETAREC
    Gosub ADDAUPC
  End If 
  If EDITMODE = 2
    Gosub ADDAUPC
  End If 
  returnstatus=1;Message$="Record Updated"
  Goto OUTEND
End If 
Goto OutEnd
EDITFIELDS: Rem edit
On FIELD Gosub UPCCODE,UNIT,UPCYN,GROUP,GRPITEM,MFGITEM
Return 
UPCCODE: Rem ENTER CODE
!J5$ = "Enter the alternate item code or UPC code"
!J0$ = "2 002510 2"
!J1$ = UPC$[13,37]
!Gosub L_7000
call dxget("ALUPCCD",tmp$)
let j$=Rtrim$(tmp$)
if j$=""
	returnstatus=0
	message$="A UPC or Alt Item is required"
	goto OutEnd
Endif
UPC$[13,37] = UCase$(J$)+Blank$
Gosub PRODCHECK \ let e=e
If returnstatus=0 ! Goto UPCCODE
	goto OutEnd
Endif
Return 
UNIT: Rem ENTER CODE
!J5$ = "Enter the u/m associated with this code '-' to list or <cr> for none."
!J0$ = "2 000410 3-"
!J1$ = UNIT$
!Gosub L_7000
!If J$[1,1] = "-"
!  CNVTU[2] = 3
!  Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
!  Goto UNIT
!End If 
call dxget("UM",tmp$)
let j$=RTrim$(tmp$)
UNIT$ = UCase$(J$)+Blank$
If UNIT$ <> "    " And Len(UNIT$) > 1
  Gosub SEARCHUNIT
  If E
	returnstatus=0
    Message$="INVALID: UNIT NOT DEFINED ON THE SYSTEM"
    Goto OUTEND ! UNIT
  End If 
  For X = 0 To 7
    If REC_CCODES = PFU1[X] Goto VALIDUNIT
  Next X
  Message$="INVALID UNIT FOR THIS PRODUCT";returnstatus=0
  Goto OUTEND ! UNIT
VALIDUNIT: Rem GOT ONE
  UPC3[0] = REC_CCODES
Else 
  UPC3[0] = 0
End If 
Return 
UPCYN: Rem IS THIS A TRUE UPC ??
!J5$ = "Is this a UPC Y/ N"
!J0$ = "6 000110 4"
!J1 = UPC3[3]
!Gosub L_7000
call dxget("UPCYN",tmp$)
j1=0 \ if UCase$(RTrim$(tmp$))="Y" let J1=1
UPC3[3] = J1
Return 
GROUP: Rem enter group
!J0$ = "3 000611 5-"
!J5$ = "Enter the group this UPC is for <CR> for none or '-' to list"
!J1 = UPC3[1]
!Gosub L_7000
!If J4$[1,1] = "-"
!  Call "mxcstgrp",CSTGRP[]
!  Goto GROUP
!End If 
Call dxget("CGRP",tmp$)
x2=tmp$ \ let j$=X2 using "######"
UPC3[1] = J$
CUSTGRPNAME$ = " ",CUSTGRPNAME$
If UPC3[1]
  Gosub GETCUSTGRP
  If E
    MEssage$="Customer group not on file"
	returnstatus=0
    Goto OUTEND !  GROUP
  End If 
End If 
!Print @18,5;CUSTGRPNAME$;
Return 
GRPITEM: Rem for upc's enter the group item code for ref
!J5$ = "Enter the groups item code for this UPC code"
!J0$ = "2 002519 6"
!J1$ = UPC2$[1,25]
!Gosub L_7000
Call dxget("GRPITEM",tmp$)
let j$=RTrim$(tmp$)
UPC2$[1,25] = J$+Blank$
Return 
MFGITEM: Rem manufactures item code
!J5$ = "Enter the manufactures item code for this UPC code"
!J0$ = "2 002519 7"
!J1$ = UPC2$[26,50]
!Gosub L_7000
Call dxget("MFRITEM",tmp$)
let j$=RTrim$(tmp$)
UPC2$[26,50] = J$+Blank$
Return 
Return 
DRAWSCREEN: Rem
!Print @0,0;'CS';
!Print @2,2;"1> CODE ";
!Print @39,2;"ENTERED ";
!Print @2,3;"2> U/M ";
!Print @2,4;"3> UPC ";
!Print @2,5;"4> GROUP ";
!Print @39,4;"SOURCE ";
!If UPC3[5] Print @39,3;"RETIRED ";
!Print @2,6;"5> GRP ITEM CODE ";
!Print @2,7;"6> MFG ITEM CODE ";
Return 
FILLINDATA: Rem
!X2 = UPC3[4]
!Gosub CNVDATE
!ENTDATE$ = X$
!If UPC3[5]
!  X2 = UPC3[5]
!  Gosub CNVDATE
!  RETDATE$ = X$
!End If 
!Print @10,2;UPC$[13,37];
!Print @47,2;ENTDATE$;
!If UPC3[0] Print @10,3;UNIT$[1,4]; Else Print @10,3;"N/A ";
!If UPC3[3] = 0 Print @10,4;"N";
!If UPC3[3] = 1 Print @10,4;"Y";
!Print Using "###### ";@11,5;UPC3[1];CUSTGRPNAME$[1,15];
!Print @19,6;UPC2$[1,25];
!Print @19,7;UPC2$[26,50];
Return 
GETUNIT: Rem get unit of measure
Mat Read #CH_CCODES,UPC3[0],0;CCD$
UNIT$[1,4] = CCD$[11,14]
Return 
SEARCHUNIT: Rem find um by code not rec num
KCCODE$ = " ",KCCODE$
KCCODE$[1,4] = UNIT$[1,4]
Search #CH_CCODES,2,1;KCCODE$,REC_CCODES,E
If E > 1 ERROR 11000 ! ERR_SEARCH
If E Return 
Mat Read #CH_CCODES,REC_CCODES,0;CCD$
Return 
GETPROD: Rem read product rec
KPROD$ = " ",KPROD$
KPROD$[1,12] = UPC1$[1,12]
Search #CH_PROD,2,1;KPROD$,REC_PROD,E
!If E > 1 Gosub ERR_SEARCH
If E  ! Goto OUTEND
	let returnstatus=0
	message$="PRODUCT NOT FOUND"
	goto OutEnd
Endif
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Unlock #ch_Prod
Return 
GETAREC: Rem get a new record
E = 2
Search #CH_UPCXF,1,0;KUPC$,REC_UPC,E
If E  ! Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" getting new upcxref record"
	Goto OutEnd
Endif
Return 
PRODCHECK: Rem   upc can not be a prod code
KPROD$ = " ",KPROD$;returnstatus=1
KPROD$[1,25] = UPC$[13,37]
For X = 12 To 25
  If KPROD$[X,X] <> " "
    Let E=1 \ Return 1
  End If 
Next X
Search #CH_PROD,2,1;KPROD$,REC,E
If E > 1 !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" doing product lookup"
	Goto OutEnd
Endif
If Not(E)
  Returnstatus=0
  Message$="The code can not be the same as a product code "
  Return 
End If 
Return 1
ADDAUPC: Rem add a new record
KUPC$ = " ",KUPC$
KUPC$[1,12] = UPC$[1,12]
KUPC$[13,37] = UPC$[13,37]
KUPC$[38,43] = UPC3[0] Using "######"
KUPC$[44,49] = UPC3[1] Using "######"
Search #CH_UPCXF,4,1;KUPC$,REC_UPC,E
If E !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" adding upcxref directory 1"
	Goto OutEnd
Endif
KUPC$ = " ",KUPC$
KUPC$[1,25] = UPC$[13,37]
KUPC$[26,37] = UPC$[1,12]
KUPC$[38,43] = UPC3[0] Using "######"
KUPC$[44,49] = UPC3[1] Using "######"
Search #CH_UPCXF,4,2;KUPC$,REC_UPC,E
If E !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" adding upcxref directory 2"
	Goto OutEnd
Endif
KUPC$ = " ",KUPC$
KUPC$[1,6] = UPC3[1] Using "######"
KUPC$[7,18] = UPC$[1,12]
KUPC$[19,24] = UPC3[0] Using "######"
KUPC$[25,49] = UPC$[13,37]
Search #CH_UPCXF,4,3;KUPC$,REC_UPC,E
If E !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" adding upcxref directory 3"
	Goto OutEnd
Endif
Mat Write #CH_UPCXF,REC_UPC,0;UPC$
Mat Write #CH_UPCXF,REC_UPC,57;UPC3
Mat Write #CH_UPCXF,REC_UPC,105;UPC2$;
Return 
DELKEYS: Rem delete the keys
KUPC$ = " ",KUPC$
KUPC$[1,12] = UPC$[1,12]
KUPC$[13,37] = UPC$[13,37]
KUPC$[38,43] = UPC3[0] Using "######"
KUPC$[44,49] = UPC3[1] Using "######"
Search #CH_UPCXF,5,1;KUPC$,REC_UPC,E
If E !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" deleting upcxref directory 1"
	Goto OutEnd
Endif
KUPC$ = " ",KUPC$
KUPC$[1,25] = UPC$[13,37]
KUPC$[26,37] = UPC$[1,12]
KUPC$[38,43] = UPC3[0] Using "######"
KUPC$[44,49] = UPC3[1] Using "######"
Search #CH_UPCXF,5,2;KUPC$,REC_UPC,E
If E !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" deleting upcxref directory 2"
	Goto OutEnd
Endif
KUPC$ = " ",KUPC$
KUPC$[1,6] = UPC3[1] Using "######"
KUPC$[7,18] = UPC$[1,12]
KUPC$[19,24] = UPC3[0] Using "######"
KUPC$[25,49] = UPC$[13,37]
Search #CH_UPCXF,5,3;KUPC$,REC_UPC,E
If E !Gosub ERR_SEARCH
	returnstatus=0
	Message$="Search Error "+Str$(E)+" deleting upcxref directory 3"
	Goto OutEnd
Endif
Return 
READUPC: Rem READ UPC FOR EDIT
Mat Read #CH_UPCXF,REC_UPC,0;UPC$;
Mat Read #CH_UPCXF,REC_UPC,57;UPC3;
Mat Read #CH_UPCXF,REC_UPC,105;UPC2$;
Return 
CODECHECK: Rem is it already on file
KUPC$ = " ",KUPC$
KUPC$[1,12] = UPC$[1,12]
KUPC$[13,37] = UPC$[13,37]
KUPC$[38,43] = UPC3[0] Using "######"
KUPC$[44,49] = UPC3[1] Using "######"
Search #CH_UPCXF,2,1;KUPC$,REC_TMP,E
If E > 1 ERROR 11000 ! Gosub ERR_SEARCH
If Not(E)
  Message$="WARNING: THIS CODE FOR THIS UNIT AND GROUP IS ALREADY ON FILE"
  returnstatus=0
  Return 
End If 
Return 1
L_7000: Rem INPUT ROUTINE

Return 
CNVDATE: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
GETCUSTGRP: Rem customer specific code
KCSTGRP$ = " ",KCSTGRP$
KCSTGRP$[1,6] = UPC3[1] Using "######"
CUSTGRPNAME$ = "!error customer group not on file "
Search #CH_CSTGRP,2,1;KCSTGRP$,REC_CSTGRP,E
If E Return 
Mat Read #CH_CSTGRP,REC_CSTGRP,0;CUSTGRP$
CUSTGRPNAME$[1,30] = CUSTGRP$[1,30]
Return 
BUILDFILE: Rem build the upcxref file in not already built
!If Err 0 Gosub ERR_TRAP
!If Spc(8) <> 42 Gosub ERR_TRAP
BFILE$ = " ",BFILE$
BFILE$ = "[1:78] ",FILE$
Build #CH_UPCXF,BFILE$
KSIZE = 25
Search #CH_UPCXF,0,1;KUPC$,KSIZE,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Search #CH_UPCXF,0,2;KUPC$,KSIZE,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Search #CH_UPCXF,0,3;KUPC$,KSIZE,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
REC_UPC = 1 \ Search #CH_UPCXF,0,0;KUPC$,REC_UPC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Close #CH_UPCXF
!If MODE = 1
!  Open #CH_UPCXF,FILE$
!End If 
!If MODE = 2
!  Ropen #CH_UPCXF,FILE$
!End If 
Return 
OUTEND: Rem exit out
If Not(UPC[0]) Close #CH_UPCXF
If Not(UPC[1]) Close #CH_PROD
If Not(UPC[2]) Close #CH_CSTGRP
If Not(UPC[3]) Close #CH_CCODES
! add status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	!
	call SetOutPut(e$,rstr$)
Else
   include "src/callsuberr.inc"
End Try                                                                     
End sub !'"UPCADDEDIT
! 
!--------------------------------------------------------------------
External Sub UPCLookup(e$,Intco,MODE,GROUP,UNIT,SCODE$,RCODE$)
Try
Declare Intrinsic Sub InpBuf,String
Declare Intrinsic Function findchannel
! Option Default Dialect IRIS1
Rem LOOKUP A UPC FOR PRODUCT CODE OR A PRODUCT CODE VIA UPC
! MODE=1 - by product, MODE=2 - by upc
! MODE=11 - Lookup/return UPC only
! MODE=12 - UPC Only - UOM 0 only
! returns code in RCode$?
Dim UPC$[57],UPC2$[50],Blank$[50]
Dim 2%,STARTCHAN
Dim 3%,UPC3[7],KUPC$[50],FILE$[16]
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
Blank$=" ",Blank$
! Enter MODE,GROUP,UNIT,SCODE$,RCODE$
Clear RCode$ ! clear return code
SCode$=SCode$+Blank$ ! space fill it
If MODE = 11 ! want only UPC code returned from lookup
	MODE=1;UPCO=1
Endif
If MODE=12 ! UPC = Y and UOM = 0 (none)
	let MODE=1;UPCO=2 ! switch to normal lookup
Endif
Rem CALL "UTCHAN5",STARTCHAN
STARTCHAN = Findchannel() ! 55
CH_UPCXF = STARTCHAN
FILE$ = " ",FILE$
  FILE$ = "2/upcxref"+Str$(COID)
  Call FINDF(file$,found)
  if not(found) goto OutEnd1a ! no file - no UPC
Ropen #CH_UPCXF,FILE$
If MODE = 1 ! look up upc code for a giver product code
  KUPC$ = " ",KUPC$
  KUPC$[1,12] = SCODE$[1,12]
UPC_LOOP: Rem scan upc file
  Search #CH_UPCXF,3,1;KUPC$,REC_UPC,E
  If E Goto OUTEND1
  If KUPC$[1,12] <> SCODE$[1,12] Goto OUTEND1
  Mat Read #CH_UPCXF,REC_UPC,0;UPC$;
  Mat Read #CH_UPCXF,REC_UPC,57;UPC3;
  Mat Read #CH_UPCXF,REC_UPC,105;UPC2$;
  If UNIT ! specific UOM
    If UNIT <> UPC3[0] Goto UPC_LOOP
  End If 
  If GROUP ! specific group
    If GROUP <> UPC3[1] Goto UPC_LOOP
  End If 
  If UPCO ! ONLY WANT UPC CODES (rype 1 or 2)
	if UPC3[3] <> 1 GOTO UPC_LOOP  ! 0=NOT UPC
  ENDIF
  if UPCO=2 and Unit=0 ! checking for NONE UOM!
		if UPC3[0]<>0 goto UPC_Loop: ! has specific UOM
	Endif ! rest have UOM=0
  RCODE$ = " ",RCODE$
  RCODE$[1,25] = UPC$[13,37]+Blank$
  Goto OUTEND1
End If 
If MODE = 2 ! loop up product for a given upc
  KUPC$ = " ",KUPC$
  KUPC$[1,25] = SCODE$[1,25]
PROD_LOOP: Rem scan upc file.
  Search #CH_UPCXF,3,2;KUPC$,REC_UPC,E
  If E Goto OUTEND1
  If KUPC$[1,25] <> SCODE$[1,25] Goto OUTEND1
  Mat Read #CH_UPCXF,REC_UPC,0;UPC$;
  Mat Read #CH_UPCXF,REC_UPC,57;UPC3;
  Mat Read #CH_UPCXF,REC_UPC,105;UPC2$;
  If GROUP
    If GROUP <> UPC3[1] Goto PROD_LOOP
  End If 
  If UPC3[0] Let UNIT = UPC3[0]
  RCODE$ = " ",RCODE$
  RCODE$[1,12] = UPC$[1,12]
  Goto OUTEND1
End If 
OUTEND1: Rem end of the line
If CH_UPCXF Try Close #CH_UPCXF Else Rem
OutEnd1a: ! bypass close
Else
   include "src/callsuberr.inc"
End Try                                                                     
End sub !'"UPCLOOKUP
! 
!--------------------------------------------------------------------
External Sub UPCINQUIRY(e$,Intco,UPC1$,UPC[],List$[],Maxcnt)
Try 
Declare Intrinsic Sub InpBuf,String,FindF
Declare Intrinsic Function Findchannel
!Option Default Dialect IRIS1
Rem  UPCXREF MAINTENANCE AND INQUIRY CALL
! for ERP it is strictly send a list
Rem #include com.prod.i
Dim 1%,E,PFU1[20]
Dim 2%,CH_PROD,CH_CSTGRP,CH_CCODES,CH_UPCXF,STARTCHAN
Dim 3%,UPC3[7],KSIZE,SEL[25]
Dim UPC$[57],PROD$[12],FILE$[16],BFILE$[50],KUPC$[50],KCSTGRP$[50],KCCODE$[50],KPROD$[50]
Dim TITLE$[50],CUSTGRPNAME$[30],CCD$[14],X$[10],ENTDATE$[10]
Dim SOURCE$[8],CUSTGRP$[60],TUPC$[57],P$[156],UPC2$[50]
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[500]
    dim tmp$[200],tmp1$[200],WebStr$[400],Message$[200]
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
COID = INTCO ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
! Enter UPC1$,UPC[]
tmpcnt=Maxcnt
Clear List$[]
CH_UPCXF = UPC[0]
CH_PROD = UPC[1]
CH_CSTGRP = UPC[2]
CH_CCODES = UPC[3]
MODE = UPC[4]
If MODE = 0 Let MODE = 2
GROUP = UPC[5]
STARTCHAN = 99
If CH_UPCXF < 0
  Startchan=findchannel()
  CH_UPCXF = STARTCHAN
  FILE$ = " ",FILE$
    FILE$ = "2/upcxref"+Str$(COID)
  Call FindF(file$,Found)
  If Not(found) Gosub BUILDFILE2
  If MODE = 1
    Open #CH_UPCXF,FILE$
  End If 
  If MODE = 2
    Ropen #CH_UPCXF,FILE$
  End If 
End If 
If CH_PROD < 0
  STARTCHAN=Findchannel()
  CH_PROD = STARTCHAN
  Mat Read #1,88,1792;FILE$;
  Ropen #CH_PROD,FILE$
End If 
If CH_CSTGRP < 0
  STARTCHAN=Findchannel()
  CH_CSTGRP = STARTCHAN
    FILE$ = "2/custgrp"+Str$(COID)
  If MODE = 2 Ropen #CH_CSTGRP,FILE$
  If MODE = 1 Open #CH_CSTGRP,FILE$
End If 
If CH_CCODES < 0
  STARTCHAN=Findchannel()
  CH_CCODES = STARTCHAN
  Mat Read #1,88,1728;FILE$;
  Ropen #CH_CCODES,FILE$
End If 
!TITLE$ = " ",TITLE$
!TITLE$ = " UPC AND ALTERNATE ITEM CODES FOR ",UPC1$[1,12]
List$[0]=bsdel$,"UPCALT LISTING",fdel$
! tmp$="PRODID",fdel$,"DESC1",fdel$,"DESC2",FDEL$ ! SENT ALREADY
tmp$="UPCALT",fdel$,"UM",fdel$,"GRP",fdel$,"GDESC",fdel$
tmp$=tmp$,"UPCYN",fdel$,"ENTDATE",fdel$,"SRCDESC",fdel$,"GRPITEM",fdel$
tmp$=tmp$,"MFRITEM",fdel$,"RECNO",fdel$
! tmp$=tmp$,"SDESC",fdel$
List$[1]=tmp$
row=2
! Window Open @1,1; Size 78,22; Using TITLE$
KUPC$ = " ",KUPC$
KUPC$[1,12] = UPC1$[1,12]
Search #ch_prod,2,1;kupc$,rec_prod,E
if e
	clear p$
Else
	mat read #ch_prod,rec_prod,0;p$;
	mat read #ch_prod,rec_prod,512;pfu1;
Endif
tmp1$=RTrim$(KUPC$),fdel$,RTrim$(p$[9,38]),fdel$,RTrim$(p$[63,92]),fdel$
DISPLAYUPC: Rem LIST ALL CODES FOR THIS ITEM.
!Print @0,0;'CS';
SEARCH_LOOP: Rem scan the file
Search #CH_UPCXF,3,1;KUPC$,REC_UPC,E
!If E > 2 Gosub ERR_SEARCH
If E Goto ENDOFLIST
If UPC1$[1,12] <> KUPC$[1,12] Goto ENDOFLIST
Mat Read #CH_UPCXF,REC_UPC,0;UPC$
Mat Read #CH_UPCXF,REC_UPC,57;UPC3
Mat Read #CH_UPCXF,REC_UPC,105;UPC2$;
CCD$ = " ",CCD$
If UPC3[0]>0 Mat Read #CH_CCODES,UPC3[0],0;CCD$
If UPC3[1]
  Gosub GETCUSTGRP2
Else 
  CUSTGRPNAME$ = "All"
End If 
ENTDATE = "??????"
If UPC3[4]
  X2 = UPC3[4]
  Gosub CNVDATE2
  ENTDATE$ = X$
End If 
SOURCE$ = " ",SOURCE$
If UPC3[2] = 0 Let SOURCE$ = "Manual"
If UPC3[2] = 1 Let SOURCE$ = "PB imprt"
If UPC3[2] = 2 Let SOURCE$ = "Convert"
CLEAR tmp$ ! tmp$=tmp1$ ! product details (not needed?)
tmp$=tmp$,UPC$[13,37],fdel$
tmp$=tmp$,CCD$[11,14],fdel$
tmp$=tmp$,UPC3[1],fdel$
tmp$=tmp$,CUSTGRPNAME$,fdel$
If UPC3[3] = 0 tmp$=tmp$,"N",fdel$ Else tmp$=tmp$,"Y",fdel$
!If UPC3[3] = 1 Print @58,LINE_;"Y";
tmp$=tmp$,ENTDATE$[1,8],fdel$
tmp$=tmp$,SOURCE$,fdel$ ! just the source desc (not edittable)
tmp$=tmp$,RTrim$(UPC2$[1,25]),fdel$,RTrim$(UPC2$[26,50]),fdel$
tmp$=tmp$,Str$(Rec_UPC),fdel$
List$[row]=tmp$
row=row+1
if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
Goto SEARCH_LOOP

ENDOFLIST: Rem thats it folks
List$[ROW]=esdel$
If Mode=1 ! entry edit - send all needed droplists
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]=bsdel$,"CUSTGRPS",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]="ID",fdel$,"DESC",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]="0",fdel$,"ALL GROUPS",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	KCSTGRP$=" ",KCSTGRP$
	Do
		Search #CH_CSTGRP,3,1;KCSTGRP$,REC_CSTGRP,E
		if e exit do
		Mat Read #CH_CSTGRP,REC_CSTGRP,0;CUSTGRP$;
		If RTrim$(CustGrp$)="" 
			let CustGrp$="CUST GRP "+kcstgrp$
		Endif
		List$[row]=KCSTGRP$,fdel$,RTrim$(CustGrp$),fdel$
		row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	Loop
	List$[row]=esdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	! now UMList$
	List$[row]=bsdel$,"UMLIST",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]="UM",fdel$,"DESC",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]="   ",fdel$,"None",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	for i=0 to 7
		if pfu1[i]<>0
			CCD$ = " ",CCD$
			If PFU1[i]>0 Mat Read #CH_CCODES,PFU1[i],0;CCD$;
			List$[row]=CCD$[11,14],fdel$,CCD$[1,10],fdel$
			row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
		End if
	Next i
	List$[row]=esdel$
Endif
goto OutEnd2
CNVDATE2: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
GETCUSTGRP2: Rem customer specific code
KCSTGRP$ = " ",KCSTGRP$
KCSTGRP$[1,6] = UPC3[1] Using "######"
CUSTGRPNAME$ = "!error customer not on file "
Search #CH_CSTGRP,2,1;KCSTGRP$,REC_CSTGRP,E
If E Return 
Mat Read #CH_CSTGRP,REC_CSTGRP,0;CUSTGRP$
CUSTGRPNAME$[1,30] = CUSTGRP$[1,30]
Return 
BUILDFILE2: Rem build the upcxref file in not already built
!If Err 0 Gosub ERR_TRAP
!If Spc(8) <> 42 Gosub ERR_TRAP
call findf(File$,found)
if found return ! it's there!!
BFILE$ = " ",BFILE$
BFILE$ = "[1:53] ",FILE$
Build #CH_UPCXF,BFILE$
KSIZE = 25
Search #CH_UPCXF,0,1;KUPC$,KSIZE,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Search #CH_UPCXF,0,2;KUPC$,KSIZE,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Search #CH_UPCXF,0,3;KUPC$,KSIZE,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
REC_UPC = 1 \ Search #CH_UPCXF,0,0;KUPC$,REC_UPC,E \ If E ERROR 11000 ! Gosub ERR_SEARCH
Close #CH_UPCXF
!If MODE = 1
!  Open #CH_UPCXF,FILE$
!End If 
!If MODE = 2
!  Ropen #CH_UPCXF,FILE$
!End If 
Return 
OUTEND2: Rem exit out
! Window Close 
If Not(UPC[0]) Close #CH_UPCXF
If Not(UPC[1]) Close #CH_PROD
If Not(UPC[2]) Close #CH_CSTGRP
If Not(UPC[3]) Close #CH_CCODES
Else
   include "src/callsuberr.inc"
End Try                                                                     
End sub !'"UPCINQUIRY
! 
!--------------------------------------------------------------------
External Sub EDTCUSTGRP(e$,Intco,CSTGRP[],rstr$)
! add or edit a Custgrp
 try
	DIM J$[50],K5$[60],U5$[80],X$[10],SPACE$[30]
	DIM BUYCL$[30],P9$[50],NEW$[10],BUYER$[30],CUSTGRP$[60],CUSTGRPNAME$[30],NCODE$[50]
	DIM 1%,SC,SR,J4$[50],kcustgrp$[50],action2$[30]
	DIM 2%,I1,R[30],L1,R4,E,X2,K1,3%,CUSTGRP[1]
	DIM U9$[40],ACODE$[10],ANS$[10],FILE$[16],KCSTGRP$[50]
	Dim Message$[100],WebStr$[200],List$[50,100]
	  Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10]
	tmpcnt=50
	call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
	call dxget("ACTION2",U5$)
	Action2$=UCAse$(RTrim$(U5$))
	COID=Intco
	LET FILE$="2/custgrp"+Str$(COID)
	CH_CstGrp=Findchannel()
	If CSTGRP[0]<=0
		OPEN #CH_CSTGRP,FILE$
	ELSE 
		LET CH_CSTGRP=CSTGRP[0]
	ENDIF 
	MAT  READ #1,19,50;P9$;
	LET SPACE$=" ",SPACE$
	Call dxget("CSTGRP",ANS$)
	New$=ANS$
	LET GROUP_CODE=NEW$
	IF GROUP_CODE<=0 OR GROUP_CODE>999999 
		let returnstatus=0
		message$="INVALID CUSTOMER GROUP ID"
		goto CGPDone
	Endif
	LET NCODE$=" ",NCODE$
	LET NCODE$[1,6]=GROUP_CODE USING "######"
	LET NEWCODE=0
	SEARCH #CH_CSTGRP,2,1;NCODE$,REC,E
	IF E
		LET NEWCODE=99
		LET CUSTGRP$=" ",CUSTGRP$
		LET CUSTGRP[0]=GROUP_CODE
	ELSE 
		LET NEWCODE=0
		MAT  READ #CH_CSTGRP,REC;CUSTGRP$
		MAT  READ #CH_CSTGRP,REC,60;CUSTGRP;
	ENDIF 
	if action2$="DELETE"
		if not(newcode)
			SEARCH #CH_CSTGRP,5,1;NCODE$,REC,E
			IF E ERROR 11000
			LET E=3
			SEARCH #CH_CSTGRP,1,0;NCODE$,REC,E
			IF E ERROR 11000
		ENDIF
		goto ecgpdone
	Endif
	Call dxget("GRPNAME",CUSTGRPNAME$)
	IF CUSTGRPNAME$="" !GOTO L_3190:
		let returnstatus=0
		message$="INVALID CUSTOMER GROUP NAME"
		goto CGPDone
	Endif
	LET CUSTGRPNAME$=CUSTGRPNAME$+SPACE$[1,30]
	LET CUSTGRP$=" ",CUSTGRP$
	LET CUSTGRP$[1,LEN(CUSTGRPNAME$)]=CUSTGRPNAME$[1,LEN(CUSTGRPNAME$)]
	IF NEWCODE
		LET E=2
		SEARCH #CH_CSTGRP,1,0;NCODE$,REC,E
		IF E ERROR 11000 ! GOSUB ERR_SEARCH:
		SEARCH #CH_CSTGRP,4,1;NCODE$,REC,E
		IF E ERROR 11000 ! GOTO ERR_SEARCH:
	ENDIF 
	MAT  WRITE #CH_CSTGRP,REC;CUSTGRP$
	MAT  WRITE #CH_CSTGRP,REC,60;CUSTGRP;
	ECGPDONE: ! EDIT DONE
	Returnstatus=1
	Message$="UPDATED OK" ! resend list now!
	Clear List$[]
	row=0
	List$[row]=bsdel$,"CUSTGRPS",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]="ID",fdel$,"DESC",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	List$[row]="0",fdel$,"ALL GROUPS",fdel$
	row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	KCSTGRP$=" ",KCSTGRP$
	Do
		Search #CH_CSTGRP,3,1;KCSTGRP$,REC_CSTGRP,E
		if e exit do
		Mat Read #CH_CSTGRP,REC_CSTGRP,0;CUSTGRP$;
		If RTrim$(CustGrp$)="" 
			let CustGrp$="CUST GRP "+kcstgrp$
		Endif
		List$[row]=KCSTGRP$,fdel$,RTrim$(CustGrp$),fdel$
		row=row+1 \ if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	Loop
	List$[row]=esdel$
	call AddToStr(e$,rstr$,List$[])
	CGPDone: ! 
	If CSTGRP[0]<=0 Try Close #CH_CSTGRP ELSE REM 
	! add status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	!
	call SetOutPut(e$,rstr$)
 Else
   include "src/callsuberr.inc"
End Try                                                                     
End sub ! "EDTCUSTGRP
! 
!--------------------------------------------------------------------