!"mx091" === description  synergy erp  Mat Handling - Putaway Rack
!
! loadsave -w -n 100,10 -o prog/dxport/mx091.dl4 src/mx091.src
!
include "src/copyright.inc"
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL  5, 2001  12:11:42
Rem /usr/acct/r97//usr/acct/rgp/work/devl/mx0/mx091.src (univ2) [rgp] {44472}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus

Declare Intrinsic Sub InpBuf,String,Time,programdump
! Option Default Dialect IRIS1
Rem **********************************************************
Rem *-
Rem *- Universal Business Systems
If Err 0 Gosub ERR_TRAP

Dim TITLE$[60],MHTT$[2],MHD$[20],MHA$[120],FILENAME$[40],COMP$[30]
Dim MHKEY$[8],INPUTVAR$[7],WHLOC_KEY$[50],N1$[4],N2$[30]
Dim p9$[50],p60$[50],p61$[256],B4k$[2]
Dim 1%,MHWH,GOT_BLANK,WL1[2],WLA[7],PD1[9],N1[6]
Dim 2%,E,MHTN,C2,MHREC,I,FCHAN,AISLE,X,Y,WHLOC_REC,MHBIN[3]
Dim 4%,J1
Dim 3%,A4,maxcnt
Dim J$[75],J0$[12],J1$[75],J4$[75],J5$[75]
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
	dim action$[30],options$[30],userid$[8],b$[200],action1$[30]
	Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[2000]
	dim tmp$[1200],tmp1$[300],Msgdesc$[150],List$[200,1000]
	dim Message$[200],WebStr$[2000],SessionID$[200]
! call dxopen() ! already done in whmenu
call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$)
B$=" ",b$
Maxcnt=200 ! set to list size
C2 = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
FILENAME$ = "2/MHPUTAWAY"+Str$(C2)
Open #2,FILENAME$
Ropen #4,"CNTRL/USERCNTRL"
Ropen #5,"CNTRL/PRTDFLT"
For I = 2 To 6
  Read FCHAN
  If FCHAN And FCHAN <> -1
    Read #1,88,Abs(FCHAN);J4$[1,16];
    If FCHAN > 0 Open #I,J4$
    If FCHAN < 0 Ropen #I,J4$
  End If 
Next I
Data "-1","-2736","-1","-1","-2768"
Read #1,3,0;COMP$;
Mat Read #1,19,50;p9$;
mat read #1,60,50;p60$;
mat read #1,61,0;p61$;
If P61$[32,32]="" Or P61$[32,32]=" " let P61$[32,32]="N"
Comp$=RTrim$(Comp$)
! Mat Read #4,Spc(6),10;A4; \ If Not(A4) Let A4 = Spc(6)
tmp$=" ",tmp$
tmp$=UCase$(RTrim$(userid$))+B$
tmp$[11]=""
search #4,2,1;tmp$,R,E
if not(e)
	read #4,r,300;a4;
Endif
if a4<=0 or a4>CHF(5)-1 let a4=spc(6)
Try
	Mat Read #5,A4,0;PD1;
Else
	clear pd1[]
End try
MHWH = PD1[2]
FIRST_TIME = 0
Returnstatus=0
Message$="Action 1 not found"
action1$=UCase$(RTrim$(action1$))
Select case action1$
	Case "SYSTEM"
		Gosub DISPLAY_SCREEN_PROMPTS
		returnstatus=1
		Message$="OK"
	Case "GETTBLLIST"
		returnstatus=1
		Message$="OK"
		First_time=1
		gosub Fld_1
		First_time=0
		if returnstatus=0 goto OutEnd
		! send aisle size (whse dependent)
		List$[0]=bsdel$,"MAXAISLESZ",fdel$
		List$[1]="MAXLEN",fdel$
		List$[2]=Str$(WLA[3]),fdel$
		List$[3]=esdel$
		call AddToStr(e$,rstr$,List$[])
		Gosub GetTableList
	Case "GETDATA"
		returnstatus=1
		Message$="OK"
		Gosub GET_KEY_INFO
		If returnstatus=0 goto OutEnd
		
		Gosub READ_REC
		if MHRec<=0
			clear MHD$
			clear MHA$
		Endif
		Gosub Display_screen_data
	Case "SUBMITDATA"
		RETURNSTATUS=1
		MESSAGE$="OK"
		Gosub GET_KEY_INFO
		If returnstatus=0 goto OutEnd
		Gosub READ_REC
		If MHRec<=0
			gosub New_Rec
		Endif
		Gosub GET_DESCRIPTION
		Gosub GET_AISLE
		Gosub WRITE_REC
	Case "DELRECORD"
		returnstatus=1
		Message$="OK"
		Gosub GET_KEY_INFO
		If returnstatus=0 goto OutEnd
		Gosub READ_REC
		If MHRec>0
			Gosub DEL_REC
		Endif
END SELECT
GOTO OUTEND

DISPLAY_SCREEN_PROMPTS: Rem
! send the system stuff
clear List$[]
List$[0]=bsdel$,"SYSFLAGS",fdel$
List$[1]="DEFWHSE",fdel$,"MHFLAG",fdel$ ! ,"MAXLEN",fdel$ (don't know til whse sent)
List$[2]=Str$(MHWH),fdel$,P61$[32,32],fdel$ ! ,Str$(WLA[3]),fdel$
List$[3]=esdel$
call AddToStr(e$,rstr$,List$[])
Clear List$[]
! send active rasl whses
List$[0]=bsdel$,"WHSES",fdel$
List$[1]="WHSE",fdel$,"WHSENAME",fdel$
If p61$[32,32]<>"Y" and p61$[32,32]<>"M"
	let list$[2]="",fdel$,"NOT USING MATERIAL HANDLING",fdel$
	row=3
	Goto Notanoption
Endif ! send no whses - so user can't use this
Row=2
For x=0 to 98 ! whinfo
	Try
		mat read #6,x,0;N1$;
		mat read #6,x,4;n2$;
		mat read #6,x,122;N1;
	Else
		clear N1[]
		Clear n1$
		clear n2$
	End try
	If RTrim$(N2$)<>"" ! set up
		If N1[4] ! uses rasl - as only rasl can use MatHdlg
			List$[Row]=Str$(X+1),fdel$,RTrim$(N2$),fdel$
			Row=Row+1
		Endif
	Endif
Next X
NotanOption: ! done
List$[row]=esdel$
call AddToStr(e$,rstr$,List$[])
Return 
DISPLAY_SCREEN_DATA: Rem
!Print @13,4;MHWH;@76,4;MHTN;
!Print @15,6;MHD$
!For I = 0 To 9
!  Print @6,10 + I;MHA$[(I * 4) + 1,(I * 4) + 4];
!  Print @37,10 + I;MHA$[(I * 4) + 41,(I * 4) + 44];
!  Print @74,10 + I;MHA$[(I * 4) + 81,(I * 4) + 84];
!Next I
Clear List$[]
List$[0]=bsdel$,"FLEDATA",fdel$
Webstr$="WHSE",fdel$,"TABLENO",fdel$,"DESC",fdel$
for x=1 to 30
	Webstr$=Webstr$,"AISLE"+str$(x),fdel$
next X
List$[1]=webstr$
webstr$=Str$(MHWH),fdel$,Str$(MHTN),fdel$,RTrim$(MHD$),fdel$
for i=0 to 29
	webstr$=webstr$,RTrim$(MHA$[(I * 4) + 1,(I * 4) + 4]),fdel$
Next I
List$[2]=webstr$
List$[3]=esdel$
call AddToStr(e$,rstr$,List$[])
Return 
CLEAR_SCREEN_DATA: Rem

Return 
GET_KEY_INFO: Rem
! If Not(FIRST_TIME) Goto FLD_2
FLD_1: Rem
!J0$ = "3002021304E"
!J5$ = "Enter warehouse this table will apply to, E: Exit."
!J1 = MHWH
!Call "INPUT",J1,J$,J0$,J1$,J4$,J5$
!If J4$ = "E" Goto OUTEND
!If J1 = 0 Goto FLD_1
Call dxget("WHSE",tmp$)
j1=tmp$
if j1<1 or j1>99 or fra(j1)
	returnstatus=0
	message$="Invalid Warehouse"
	return
Endif
WHLOC_KEY$ = J1 Using "##","  @"
Search #3,2,1;WHLOC_KEY$,WHLOC_REC,E \ If E > 1 Error 11000 ! Gosub ERR_SEARCH
If E
  Message$="Warehouse control record not found!"
  Returnstatus=0
  Return
End If 
Mat Read #3,WHLOC_REC,40;WL1;
Mat Read #3,WHLOC_REC,76;WLA;
If WLA[3]<=0 let WLA[3]=2 ! set it for 2 chars of bin
MHWH = J1
If First_Time=1 return ! just want whse
FLD_2: Rem
!J0$ = "3000037604"
!J5$ = "Enter the table number (1-999), <CR>: Enter warehouse."
!J1 = 0
!Call "INPUT",J1,J$,J0$,J1$,J4$,J5$
!If J1 = 0
!  Goto FLD_1
!End If 
call dxget("TABLENO",tmp$)
j1=tmp$
if j1<1 or j1>999 or fra(j1)
	returnstatus=0
	message$="Invalid table number"
	return
Endif
MHTN = J1
Return 
READ_REC: Rem
MHKEY$ = MHWH Using "##",MHTN Using "###"
Search #2,2,1;MHKEY$,MHREC,E
If E > 2 Error 11000 ! Gosub ERR_SEARCH
If E Let MHREC = -1 \ Return 
Read #2,MHREC,6;MHD$
Read #2,MHREC,26;MHA$
Return 
NEW_REC: Rem
E = 2 \ Search #2,1,0;MHKEY$,MHREC,E
If E Error 11000 ! Gosub ERR_SEARCH
Search #2,4,1;MHKEY$,MHREC,E
If E Error 11000 ! Gosub ERR_SEARCH
Write #2,MHREC,0;MHWH
Write #2,MHREC,2;MHTN
Return 
DEL_REC: Rem
WHLOC_KEY$ = MHWH Using "##"
WHLOC_LOOP: Rem
Search #3,3,1;WHLOC_KEY$,WHLOC_REC,E \ If E > 2 Error 11000 ! Gosub ERR_SEARCH
If E Goto END_WHLOC_LOOP
I = WHLOC_KEY$[1,2]
If I <> MHWH Goto END_WHLOC_LOOP
Mat Read #3,WHLOC_REC,92;MHBIN;
If MHTN <> MHBIN[0] Goto WHLOC_LOOP
Returnstatus=0
Message$="Table in use, can't delete!"
Return 
END_WHLOC_LOOP: Rem
Search #2,5,1;MHKEY$,MHREC,E
If E Error 11000 ! Gosub ERR_SEARCH
E = 3 \ Search #2,1,0;MHKEY$,MHREC,E
If E Error 11000 ! Gosub ERR_SEARCH
Return 
WRITE_REC: Rem
mat Write #2,MHREC,6;MHD$
mat Write #2,MHREC,26;MHA$;
let B4K$=B$
mat write #2,MHRec,146;b4k$; ! always!
Return 
GET_DESCRIPTION: Rem
Call dxget("DESC",tmp$)
If RTrim$(tmp$)=""
	let returnstatus=0
	Message$="Description is required"
	goto OutEnd
Endif
J$=RTrim$(tmp$)+B$
MHD$ = J$
Return 
GET_AISLE: Rem
!X = 6
!If AISLE > 10 Let X = 37
!If AISLE > 20 Let X = 74
!If AISLE Mod 10 = 0
!  Y = 19
!Else 
!  Y = 9 + (AISLE Mod 10)
!End If 
!J0$ = "2 0204",X Using "&&",Y Using "&&"
!J1$ = MHA$[((AISLE - 1) * 4) + 1,((AISLE - 1) * 4) + 4]
!J5$ = "Enter aisle to include in this zone/table, '*' for ALL ","aisles in warehouse."
For X=1 to 30
Call dxget("AISLE"+Str$(x),tmp$)
Aisle=x
J$=RTrim$(tmp$)
MHA$[((AISLE - 1) * 4) + 1,((AISLE - 1) * 4) + 4] = J$+B$
!TRIM: If J$[Len(J$)] = " " Let J$[Len(J$)] = "" \ Goto TRIM
!If Len(J$) > WLA[3] Call "msgbox","WARNING! Length of input aisle exceeds maximum!"
! ON native - allows & saves entry - just pops box - so why bother?
Next X
Return 
GetTableList: ! get list of existing tables for whse
MHKey$=" ",MHKey$
Clear list$[]
tmpcnt=maxcnt
List$[0]=bsdel$,"CURRTBLS",fdel$
List$[1]="TABLENO",fdel$,"DESC",fdel$
row=2
MHKEY$ = MHWH Using "##" !,MHTN Using "###"
GTLoop: ! thru all for whse
Search #2,3,1;MHKEY$,MHREC,E
If E = 2 Goto GTLDone
let x=mhkey$[1,2] \ if x<>mhwh goto GTLDone
Read #2,MHREC,6;MHD$;
List$[row]=mhkey$[3,5],fdel$,mhkey$[3,5]," - ",RTrim$(MHD$),fdel$
row=row+1
if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
goto GTLoop

GTLDone: ! done
List$[row]=esdel$
call AddToStr(e$,rstr$,List$[])
Return
OUTEND: Rem
	! status section                                                       
	Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)                 
	Call AddToStr(e$,rstr$,WebStr$)                                        
	Call SetOutPut(e$,rstr$)
End 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
End