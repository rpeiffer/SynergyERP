! >>> Program 305A
!
! description CASH RECEIPTS ACCEPT part deux
!
! loadsave -w -n 100,10 -o prog/dxport/305a.dl4 src/305a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" 
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL 18, 2007  12:13:06
Rem /w2/papermaster/r2005//usr/acct/mary/work/r2005/mx/mx305a.src (univ2) [mary] {26443}
Rem  Copyright (c) 2007 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub FindF,InpBuf,String
Option Default Dialect IRIS1
Rem MX305A - G/L INTERFACE  FOR CASH  RECEIPTS
Rem AUTHOR: MTK   JUNE 1988
Rem LAST UPDATE: 2/93 OPENS MOH,MOL,MOA,CRTEMP FILES BY COMP
Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,VerifyDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
! start here
Try
Com P60$[50],1%,BANK,ALLBANK,2%,intco
! If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim 1%,B,B3,E,I,L,L9,S,X1
Dim 2%,C3[2],D0,I2,J8,K1,R,R1,S1[8],V1,X,X2,X9,COMP,M0
Dim 3%,C2[1],D1[3],T
dim 2%,crbnk
Dim B$[3],C$[4],D$[4],F$[20],F2$[50],F3$[50],G$[2],G9$[140],J$[30]
Dim L9$[2],K2$[30],DESC$[30]
Dim P6$[64],P9$[30],R9$[64],T9$[64],U5$[50],V2$[30],X$[10],2%
Dim P8$[6],D8$[8]
Dim 2%,ACPER[1],BATCH,GRP[1],USR[1],W,L1,PDATE
Dim 1%,PRGNUM,CHGL[3],glpstat
Dim H$[50],DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1],glpmsg$[100]
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=IntCo ! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
let comp=coid
Mat Read #1,19,50;P9$;
If P9$[17,17] <> "Y" Goto L_8100 ! no gl inteface
Goto L_865
!!! this is the restart !!!! 
Rem let bank=0
Rem let allbank=0
J8 = Spc(5)
COMP = Int((J8 - Int(J8 / 16384) * 16384) / 64)
J$ = COMP Using "cntrl/CNTRL#"
Open #1,J$
J$ = COMP Using "3/SCRMOH#" \ Open #6,J$
J$ = COMP Using "3/SCRMOL#" \ Open #7,J$
J$ = COMP Using "6/GLCRTEMP#" \ Open #12,J$
J$ = COMP Using "3/SCRMOA#" \ Open #13,J$
For I = 2 To 16
  Read L
  If L = -1 Goto L_840
  Read #1,88,L;J$;
  Open #I,J$
L_840: Next I
Data "1536","-1","1808","1504","-1","-1","464","-1","1456","1440","-1","-1"
Data "48","-1","1488"
L_865: ! start processing here 
Mat Read #1,52,0;S1;
If S1[7] <> 2 Goto L_8000 ! not daily posting -- 0: no post, 1=monthly 2=daily
Mat Read #1,52,60;P8$; \ Mat Read #1,0,100;D8$;
G$[1,1] = S1[1] Using "#"
G$[2,2] = S1[2] Using "#"
GRP[0] = S1[1];USR[0] = S1[2]
!W = Spc(5)
!L1 = Int(W / 16384)
Call DXGet("u_group",groupid$)
GRP[1] = comp ! Int((W - L1 * 16384) / 64)
USR[1] = groupid$ ! W - (L1 * 16384 + GRP[1] * 64)
!L_1100: Rem SELECT POSTING PERIOD
!Print 'CS';
!Print @11,4;'CL';"*** CASH RECEIPTS TO GENERAL LEDGER INTERFACE ***  "
Mat Read #1,0,108;D0;
X$ = D0 Using "&&&&&&"
C3[0] = X$[1,4]
ACPER = C3[0]
X$ = C3[0] Using "&&&&"
!Print @10,7;'CL';"POSTING MONTH: ";X$[3,4];"/";X$[1,2];
!If P8$[6,6] = "Y" Let X$ = D8$[1,2],D8$[4,5],D8$[7,8] \ Goto L_1205
!L_1190: Print @10,12;'CL';"ENTER POSTING DATE (MMDDYY) ";
!Input ""X$
!L_1205: If Len(X$) <> 6 Goto L_1190
X$ = D8$[1,2],D8$[4,5],D8$[7,8]
C3[1] = X$[1,6]
PDATE = C3[1]
F$ = X$[5,6],X$[1,2],X$[3,4]
!X9 = X$[3,4] \ If X9 < 1 Goto L_1190
!If X9 > 31 Goto L_1190
!If X$[1,2] = "02" If X9 > 29 Goto L_1190
C3[2] = F$
X9 = F$[1,4]
if c3<>x9 ! If C3 = X9 ! Goto L_1260
	let f$=c3 using "&&&&" ! set ar year and month
	let f$[5,6]="01" ! set to 1st day of the month
	let c3[1]=f$
	let pdate=f$
endif
!Print @0,23;'CL RB';"POSTING DATE MUST AGREE WITH POSTING MONTH!!";
!Signal 3,30 \ Print @0,23;'CL'; \ Goto L_1190
!L_1260: Print @0,23;'CL';"Enter  A: accept  R: reject ";
!If P8$[6,6] = "Y" Let X$ = "A" \ Goto L_1310
!Input ""X$
!If X$ = "R" Goto L_1100
!L_1310: If X$ = "A" Goto L_1900
!If X$ <> "E" Goto L_1260
!Print @0,20;'CL RB';"*** WARNING *** NO JOURNAL ENTRIES WILL BE MADE!!";
!Print @0,21;'CL RB';"MAY CAUSE DISCREPANCIES FROM MONTHLY TOTALS AND GENERAL LEDGER";
!Print @0,22;"JOURNAL ENTRIES WILL BE LOST!!!!!";
!L_1335: Print @0,23;'CL';"DO YOU WISH TO POST JOURNAL ENTRIES TO THE GENERAL LEDGER (Y/N) ";
!Input ""X$
!If X$ = "Y" Goto L_1100
!If X$ <> "N" Goto L_1335
!L_1355: Print @0,23;'CL RB';"ARE YOU SURE NO GENERAL LEDGER UPDATE WILL BE PERFORMED? (Y/N) ";
!Input ""X$
!If X$ = "N" Goto L_1100
!If X$ <> "Y" Goto L_1355
!Goto L_8000
!L_1900: Print @0,23;'CL';"PROCESSING...PLEASE WAIT...";
Goto L_6100
L_6100: Rem *** MAIN LOGIC BEGINS HERE ***
CLIENT = 0
DESC$ = " ",DESC$
!Print @0,22;'CL';"PLEASE WAIT....NOW POSTING."; \ Signal 3,0
V2$ = " ",V2$
L_6125: Search #12,3,1;V2$,V1,E
If E = 2
  Gosub L_6300
  Goto L_8000
End If 
If E Gosub ERR_TRAP
Mat Read #12,V1,0;D1;
! If Not(D1[1]) Goto L_6125
Mat Read #12,V1,30;M0;
If CLIENT <> M0
  If CLIENT Gosub L_6300
  Gosub L_6400
  CLIENT = M0
End If 
mat read #12,v1,34;crbnk;
If Not(D1[2]) Goto L_6205
Mat Read #2,D1[2],126;DESC$;
L_6205: R9$ = " ",R9$
R = R + 1
R9$[1,1] = "R"
R9$[3,10] = D1 Using "########" ! acct #
R9$[14,19] = D1[3] Using "&&&&&&" ! ref
R9$[20,25] = C3[1] Using "&&&&&&" ! date
R9$[26,40] = "CASHREC UPDATE "
R9$[41,49] = D1[3] Using "JRN######"
If D1[2]<>0
	If rtrim$(desc$)<>"" Let R9$[26,49] = DESC$[1,24]
endif
r9$[50,53]="/BNK"
R9$[54,56]= crbnk using "&&&"
R9$[59,62] = R Using "####"
R9$[63,63] = "0"
T = D1[1]
Write #15,R1;R9$
Write #15,R1,1;T;
R1 = R1 + 1
If D1[1] > 0 Let C2 = C2 + D1[1]
If D1[1] < 0 Let C2[1] = C2[1] + D1[1]
Goto L_6125
L_6300: Rem RESET BATCH
If Not(M0) Return 
R = R + 1
T9$[59,62] = R Using "####"
T = 0
Write #15,R1;T9$
Write #15,R1,1;T;
R1 = R1 + 1
P6$ = " ",P6$
C2[1] = Abs(C2[1])
P6$[31,40] = (C2[0] * 100) Using "##########"
P6$[41,50] = (C2[1] * 100) Using "##########"
P6$[51,60] = ((C2[0] - C2[1]) * 100) Using "----------"
P6$[10,20] = "1  PAY    1"
P6$[21,21] = "0"
P6$[25,25] = GRP[0] Using "#"
P6$[26,26] = USR[0] Using "#"
T = 0
Write #15,R1;P6$;
Write #15,R1,1;T;
!If Err 0 Rem
Try  Close #15 Else Rem  
!If Err 0 Gosub ERR_TRAP
PRGNUM = 305
For Q = 0 To 3 \ CHGL[Q] = 0 \ Next Q
ACPER[1] = 0
Call "glpost.dl4",CLIENT,ACPER[],BATCH,GRP[],USR[],CHGL[],PRGNUM,PDATE,intco,rstr$,glpstat,glpmsg$
                    
Return 
L_6400: Rem LOOKUP CLIENT & CREATE BATCH
K2$ = " ",K2$ \ K2$[3,6] = M0 Using "####"
Search #14,2,1;K2$,K1,E \ If E Gosub ERR_SEARCH
Mat Read #14,K1,0;G9$;
L9 = G9$[135,136]
If L9 < 10 Let L9$ = L9 Using "#" Else Let L9$ = L9 Using "##"
C$ = M0 Using "####"
For I = 1 To 4
  If C$[I,I] = " " Let C$[I,I] = "."
Next I
TIEBREAKER = 0
GETNUM: Rem get the batch #
TIEBREAKER = TIEBREAKER + 1
K2$ = " ",K2$ \ K2$[3,6] = M0 Using "####" \ K2$[7,8] = "PG"
Search #14,2,1;K2$,K1,E \ If E Gosub ERR_SEARCH
Mat Read #14,K1,132;B
B3 = B \ B3 = B3 + 1 \ If B3 > 999 Let B3 = 1
Mat Write #14,K1,132;B3;
!Print @0,23;'CL';"PROCESSING CLIENT#: ";K2$[3,6];" BATCH #: ";B;
BATCH = B
!Signal 3,10
D$ = C3[0] Using "&&&&"
B$ = B Using "###"
For I = 1 To 3
  If B$[I,I] = " " Let B$[I,I] = "."
Next I
!If Err 0 Rem
Try  Close #15 Else Rem
!If Err 0 Gosub ERR_TRAP
! F2$ = "<00> ",L9$,"/G",G$[1,2],C$,D$,B$[1,3]
F2$ = "FILES/",L9$,"/G",G$[1,2],C$,D$,B$[1,3]
F3$ = "FILES/",L9$,"/G",G$[1,2],C$,D$,B$[1,3] ! =F2$[6]
Call FindF(F3$,A9)
If A9 ! already exists
  If TIEBREAKER > 999
      Msg$="No Available Batch Numbers to process " \ Gosub ERR_SEARCH
    !Print @0,23;'CL';"No Available Batch Numbers to process "; 
    Gosub ERR_SEARCH
  End If 
  Goto GETNUM
End If 
Build #15,F2$
R1 = 0 \ T9$ = " ",T9$ \ T = 0
Write #15,R1;T9$
Write #15,R1,1;T
Try  Close #15 Else Rem ! Close #15
tmp$="chmod go+rw "+F3$
System tmp$
open #15,F3$
R = 0
T9$[1,1] = "*"
T9$[2,5] = C$
T9$[6,9] = C3 Using "&&&&"
T9$[10,12] = B Using "###"
T9$[13,50] = G9$[1,38]
T9$[51,52] = G$[1,2]
T9$[63,63] = "9"
C2[0] = 0 \ C2[1] = 0
CLIENT = M0
Return 
L_8000: Rem CLEAR GLCRFLE
V2$ = ""
L_8010: Search #12,3,1;V2$,V1,E
If E = 2 Goto L_8100
If E Gosub ERR_SEARCH
Search #12,5,1;V2$,V1,E
If E Gosub ERR_SEARCH
E = 3 \ Search #12,1,0;V2$,V1,E
If E Gosub ERR_SEARCH
Goto L_8010
L_8100: Rem RESET FLAG
If ALLBANK
  For REC = 1 To Chf(10) - 1
    Read #10,REC,36;S;
    If S = 5
      Read #10,REC,44;I2
      Write #10,REC,40;I2
      S = 0 \ Write #10,REC,36;S;
    End If 
  Next REC
  S = 0 \ Write #1,20,8;S;
Else 
  S = 0
  If BANK
    Write #10,BANK,36;S;
    Read #10,BANK,44;I2;
    Write #10,BANK,40;I2;
  Else 
    Write #1,20,8;S;
    Read #1,20,38;I2;
    Write #1,20,34;I2;
  End If 
End If 
!Print 'CR RB CL';"----ACCEPTED----"
!Signal 3,20
! Call addtostr(e$,rstr$,esdel$) !end section 
let returnstatus=1
let message$="Accept Complete "
if not (glpstat)
	let message$=message$+"OK"
else
	let message$=message$+"Batch Not Updated Because "+glpmsg$
	
endif
! "ACCEPT COMPLETE - OK"

!Call SetOutput(e$,rstr$,returnstatus,tmp$)
Let AOK=1
Goto OUTEND

U5$ = X2 Using "######"
X$[1,2] = U5$[3,4]
X$[3,3] = "/"
X$[4,5] = U5$[5,6]
X$[6,6] = "/"
X$[7,8] = U5$[1,2]
Return 


ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/mx305ase!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                                                        



OUTEND: Rem EXIT ROUTINE
Call addtostr(e$,rstr$,esdel$) !end section 
If Not(AOK) ! some other reason 
   let returnstatus=0
   message$ = "ACCEPT NOT COMPLETE!"     
   !Call SetOutput(e$,rstr$,1,tmp$)   
 End If                              
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
!Close 
!Chain "MX000"
!Stop 
!End 
Else
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
Rem {end rtn.error.s}



