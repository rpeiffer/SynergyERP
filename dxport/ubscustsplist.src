!Program Name: ubscustsplist
! loadsave -w -s -n 100,10 -o prog/dxport/ubscustsplist.dl4 src/ubscustsplist.src
!                                                  
!Last Updated:                                     
!

Declare External sub custsplist
Declare Sub updatelog,errTrap
Declare Function GetOtype$

Include "src/custspvars.inc"

Dim custsp.[1000] as custspinfo
dim dlog$[200],temp$[200],msg$[200],progname$[50]
dim message$[200],2%,returnstatus
LET custid=110020
stop
Call CustspList(1,custsp.[], ii,returnstatus,message$, 1000, custid)
Print returnstatus
Stop

!Chain ""
!! need to pass the custid
External Sub custspList(intCo, custsp.[] as custspinfo, ii,returnstatus,message$, iLimit, custid)
try 
Dim custid$[6]
custid$ = custid using "######"

Declare Intrinsic Function FindChannel,Trim$
Declare External Function PDate$, OpenFile,xamount
Declare Intrinsic Sub DXGet,DXPut

External Lib "ubsfunc.dl4","ubsprconv.dl4" 
!! end ubscustomer.inc
!! start "custspvars.inc"
!Include "src/custspvars.inc
!! start include of product file and functions
Include "src/inc/fileprod.inc"
!! end include of product file and functions
!! Start include for special price file
Include "src/inc/filespecprice.inc"
!! End include for special price file
!! start include for commhead file
Include "src/inc/filecommhead.inc"
!! end include for commhead file
!! start include for contract file 
Include "src/inc/filecontracth.inc"
!! end include for contract file
!! start include for customer
Include "src/inc/filecust.inc"
!! end include for customer

Dim P9$[50],P61$[256]
DIM A$[156]
DIM K1$[50],X$[10]
DIM KC$[40],UM$[14],QUM$[14]

dim 1%,ii,ilimit
dim 1%,psize,allprod,comdty
DIM 1%,F,X1,DESC$[16],PFU1[20],CNVTU[9]
DIM 2%,D6,Q0[1]
DIM 3%,J,X3,T9[20],PFU2[6],CNVTA[4],A[33]


Dim Prod. as Prod
Dim Commh. as Commhead
Dim SpPr. as SpecPrice
Dim Ctch. as Contracth
Dim CustSp.[ilimit] as Custspinfo
dim Cust. as Cust

dim dlog$[80],tmp$[100]
Dim QMASK$[20],PMASK$[20],EMASK$[20],dec$[5]
Dim Msg$[256],pgmName$[20]
Dim EN$[10], ST$[80], Status$[10], Sales$[35], Temp$[100]
Dim SLS$[3],CO$[2],Hold$[10],HLD$[80],U5$[50],EnteredBy$[10]
dim p60$[50],p61$[256]

Dim 1%,t9[11],factor
Dim 2%, t2,lpppcust,orgcust
Dim 2%, Q0[1]
Dim 3%
! dim for channel numbers
dim 2%,ch_cntrl, ch_prod, ch_sppr, ch_ctch, ch_commh, ch_ccodes,ch_cust
!! key variables
dim keyprod$[50],keycommh$[50],keysppr$[50],keyctchh$[50]
!! variables for channels
dim 2%,ch_contrh
!! variables for record
dim 3%,rec_prod,rec_commh,rec_sppr,rec_ctch,rec_cust
!! variables for search error
dim 2%,e_prod, e_commh,e_sppr,e_ctch



debugDetail=0
pgmName$="ubscustsplist"
msg$[1,50]="-",msg$ \ Call updatelog(debug)               
msg$="start...program "+pgmName$ \ Call updatelog(debug)     

ii=1

CO$=Str$(intCo) ! Company
msg$="doing...company-"+CO$! 
msg$=msg$+" customer "+custid$ ! +" salesman-"+SLS$
Call updatelog(debug)

!! *** OPen File Section ***
Ch_cntrl= OpenFile(-9999,intCo) \ If Ch_cntrl=-1 Error 42 ! control file
ch_prod= OpenFile(-1792,intCo)  \ If ch_prod=-1  Error 42  ! product file
ch_sppr= OpenFile(-1936,intCo) \ if ch_sppr=-1 Error 42 ! spec price file
ch_ctch= OpenFile(-2880,intCo) \ if ch_ctch=-1 Error 42 ! contract header file
ch_commh= OpenFile(-2288,intCo)  \ If ch_commh=-1  Error 42 ! commodity code head 
ch_ccode=OpenFile(-1728,intCo) \ if ch_ccode=-1 Error 42 ! unit of measure codes
ch_cust=OpenFile(-1808,intCo) \ if ch_cust=-1 Error 42 ! customer file
!! ** End Open File Section **

Mat Read #Ch_cntrl,115,40;Q0; 
Mat read #ch_cntrl,60,50;P60$;
Mat read #ch_cntrl,61,0;p61$;

If not(Q0[1]) let Q0[1]=2                                                       
Let Dec$="#",Dec$;Qmask$="---,---,--#"                                         
If Q0[0] Let Qmask$="---,---,--#.",Dec$[1,Q0[0]]         !qty mask      
If Q0[1] Let Pmask$="---,---,---,---.",Dec$[1,Q0[1]]     !price mask        
Let Emask$="-$$$,$$$,$$$,$$$.##"                         !ext. price mask       

READ #ch_cntrl,0,112;D6;
IF D6=999999 READ #ch_cntrl,0,108;D6;
IF D6=888888 READ #ch_cntrl,0,108;D6;
MAT  READ #ch_cntrl,115,40;Q0; \ IF Q0[1]<=0 LET Q0[1]=2
LET PMASK$="##########"
LET X=LEN(PMASK$)-Q0[1] \ IF X<0 LET X=Q0[1]
LET PMASK$[X,X]="."
let orgcust=custid
let lpppcust=0
if p60$[33,33]="Y" and p61$[100,100]="Y" ! perm price and price master is on
	let k1$=custid using "######"
	search #ch_cust,2,1;k1$,rec_cust,e
	if not(e)
		read record #ch_cust,rec_cust;cust.;
		let lpppcust=Cust.LpPpGrpCust
		If CUST.AuthBuyList$="Y" Let lpppcust=0
		If lpppcust=CUST.CustomerCode let lpppcust=0
		if lpppcust<1 or lpppcust>999999 or Fra(lpppcust) Let lpppcust=0
	endif
endif
if lpppcust<>0 let custid=lpppcust
	
let k1$=custid using "######"

srchspc: ! "================================ spcprice loop
SEARCH #ch_sppr,3,1;K1$,rec_sppr,E \ IF E>2 GOSUB Err_Search_Log:
IF NOT (CONTRACT)
	 IF E GOTO end_range: ! "eof spcprice 
	 let x2=k1$[1,6]\if x2<>custid goto end_range:
endif
IF CONTRACT
	IF E GOTO srchcontr:
	IF K1$[1,6]<>KC$[7,12] goto srchcontr:
endif
read record #ch_sppr,rec_sppr;sppr.
LET ALLPROD=0 \ LET COMDY=0 \ LET pSIZE=0
IF K1$[7,7]="#" LET ALLPROD=99
IF K1$[7,7]="*" LET COMDY=99
IF K1$[7,7]="&" LET pSIZE=99
GOSUB get_prod: !  "get product
GOSUB loadvars: ! ! "detail line spcprice
GOTO srchspc: ! "next

startcontract: ! PRINT CONTRACTS TOO?
LET KC$=" ",KC$;KC$[1,6]=custid using "######";CONTRACT=1
srchcontr: ! CONTRACT LOOP
SEARCH #ch_ctch,3,2;KC$,rec_ctch,E \ IF E GOTO end_range:
let x2=kc$[1,6]\if x2<>custid goto end_range:
LET K1$=" ",K1$;K1$[1,6]=KC$[7,12]
GOTO srchspc: 

get_prod: ! "==================================== get product
LET prod.desc1$=" ",prod.desc1$
LET prod.desc2$=" ",prod.desc2$
IF ALLPROD LET prod.desc1$="-- ALL PRODUCTS -- " \ RETURN 
IF pSIZE LET prod.desc1$="-- SIZE "+K1$[8,11]+" --" \ RETURN 
LET keyprod$=" ",keyprod$ \ LET keyprod$=sppr.prodcode$
IF not (COMDY) ! 
	SEARCH #ch_prod,2,1;keyprod$,rec_prod,E \ IF E>1 GOSUB Err_Search_log:
	IF E
		 LET prod.desc1$="PRODUCT NOT FOUND!";rec_prod=0
	else
		read record #ch_prod,rec_prod;prod.
		mat read #ch_prod,rec_prod,256;a
		mat read #ch_prod,rec_prod,512;pfu1;
		mat read #ch_prod,rec_prod,554;pfu2;
	endif
else 
	SEARCH #ch_commh,2,1;keyprod$,Rec_commh,E
	IF E 
		LET prod.desc1$="COMMODITY NOT FOUND " ;rec_prod=0
	else
		read record #ch_commh,rec_commh;commh.;
		LET prod.desc1$=commh.CodeDescription$
	endif
endif
RETURN 

Get_Unit: ! "==================================== get u/m  
IF sppr.UMPrice=-2 LET UM$="LOT " \ GOTO End_Get_Unit:            
IF sppr.UMPrice=-1 LET UM$="CWT " \ GOTO End_Get_Unit:            
if sppr.UMPrice=-3 let um$="LB  " \ goto end_get_unit:
IF sppr.UMPrice<=0 LET UM$="N/A" \ GOTO End_Get_Unit:             
READ #ch_ccode,sppr.UMPrice;UM$;                                        
End_Get_Unit: Return                                       

GET_QUNIT: REM " quantity UM
LET QUM$=" ",QUM$
IF sppr.UMCost=-2 LET QUM$="LOT "
IF sppr.UMCost=-1 LET QUM$="CWT "
if sppr.UMCost=-3 let qum$="LB  "
IF sppr.UMCost<=0 AND NOT(COMDY) AND NOT(ALLPROD) AND NOT(pSIZE)
  LET sppr.UMCost=prod.UMSellDefault ! PFU1[9]
ENDIF 
IF sppr.UMCost>0 MAT  READ #ch_ccode,sppr.UMCost,0;QUM$;
RETURN 

loadvars: !  "============================= detail line for spcprice
IF rec_prod AND sppr.PrcType=3 AND NOT (COMDY) AND NOT (ALLPROD) AND NOT (pSIZE)
	cnvta=sppr.SPFact
	LET CNVTU[0]=0
	let CNVTU[1]=sppr.UMPrice
	let CNVTU[2]=2 
	sppr.SPFact= XAMOUNT(CNVTU[],CNVTA,PFU1[],PFU2[],A[],ch_cntrl,FLAG)
ENDIF 
if ii<ilimit
	let custsp.[ii].Prodcode$=" ",custsp.[ii].prodcode$
	IF COMDY
		let custsp.[ii].prodcode$="COMDY "+sppr.prodcode$[1,4]
	ELSE
		IF NOT (pSIZE)
			let custsp.[ii].prodcode$=sppr.prodcode$[1,12] ! "prod code
		endif
	endif
	let custsp.[ii].proddesc1$=" ",custsp.[ii].proddesc1$
	let custsp.[ii].proddesc1$=prod.desc1$
	let custsp.[ii].proddesc2$=prod.desc2$
	let custsp.[ii].contractno$=" ",custsp.[ii].contractno$
	IF CONTRACT
		let custsp.[ii].contractno$=kc$[8,12]
	endif
	IF sppr.startdate
		 LET X$=Pdate$(sppr.startdate) ! "start date   
	else
		let x$="NONE    "
	endif
	let custsp.[ii].startdate$=x$
	let custsp.[ii].canceldate$=" ",custsp.[ii].canceldate$
	if sppr.CancelDate
		LET x$=pdate$(sppr.CancelDate)
	else
		let x$="NONE     "
	endif
	let custsp.[ii].canceldate$=x$
	let custsp.[ii].factortype$=""
	IF sppr.PrcType=6
	 	let custsp.[ii].factortype$="BRK JUMP " 
	else
		GOSUB Get_Unit:  ! "get u/m 
		IF sppr.PrcType=3 or sppr.PrcType=7
		 	let custsp.[ii].factortype$=sppr.SPFact using pmask$
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"/"+um$[11,14]+" "
		else
			let custsp.[ii].factortype$=sppr.SPFact using "###.###% "
		endif
	endif
	let custsp.[ii].minimumqty$=" ",custsp.[ii].minimumqty$
	If sppr.minqtyforsp 
  		Gosub Get_QUnit:
  		let custsp.[ii].minimumqty$=sppr.minqtyforsp using "######" ! 
  		If Not(Comdy) and Not(AllProd) and Not(pSIZE)
			let custsp.[ii].minimumqty$=custsp.[ii].minimumqty$+"/"+qum$[11,14]+" "
 		 endif 
	Else
  		custsp.[ii].minimumqty$=" NONE "
	Endif
	if sppr.PrcType=1
		IF sppr.SPFact>0
			  let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARK UP "
		else
			  let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARK DOWN "
		endif
	endif

	if sppr.PrcType=2
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARGIN "
	endif

	if sppr.PrcType=3
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+"FLAT "
	endif

	if sppr.PrcType=4
		IF sppr.SPFact=0
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+"FIXED BRACKET OF "
		let custsp.[ii].factortype$=custsp.[ii].factortype$+STR$(sppr.basetype)+" "
		endif
		IF sppr.SPFact>0
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARKUP OF BRACKET "
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+STR$(sppr.basetype)+" "
		endif
		if sppr.SPFact<0
		  let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARKDOWN OF BRACKET "
		  let custsp.[ii].factortype$=custsp.[ii].factortype$+STR$(sppr.basetype)+" "
		endif
	endif

	if sppr.PrcType=5
		IF sppr.SPFact=0
		  let custsp.[ii].factortype$=custsp.[ii].factortype$+"BRKT JMP "
		endif
		IF sppr.SPFact>0 
		  let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARKUP  "
		  let custsp.[ii].factortype$=custsp.[ii].factortype$+str$(sppr.basetype)
		  let custsp.[ii].factortype$=custsp.[ii].factortype$+" BRKT JMP "
		endif
		IF sppr.SPFact<0 
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+"MARKDOWN  "
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+str$(sppr.basetype)
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+" BRKT JMP "
		endif
	endif

	if sppr.PrcType=6
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+str$(sppr.basetype)
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+" LEVELS "
	endif
	if sppr.PrcType=7
		 let custsp.[ii].factortype$=custsp.[ii].factortype$+"FREE GOODS"
	endif
	IF sppr.PrcType<3 
		if sppr.basetype=1
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"OF BASE "
		endif

		if sppr.basetype=2
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"OF LOAD "
		endif

		if sppr.basetype=3
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"OF LAST "
		endif

		if sppr.basetype>3 and sppr.basetype<10
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"OF LIST "
			let custsp.[ii].factortype$=custsp.[ii].factortype$+str$(sppr.basetype-3)
		endif

		if sppr.basetype=10
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"OF SP. CST "
		endif

		if sppr.basetype=11
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"OF SLSM CST "
		endif

		if sppr.basetype=12
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"CALC PRICE "
		endif

		if sppr.basetype=13
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"REDI COST "
		endif

		if sppr.basetype=14
			let custsp.[ii].factortype$=custsp.[ii].factortype$+"REBATE CST "
		endif
	endif
	If sppr.PrcType=6 And sppr.SPFact<>0
		let tmp$=sppr.SPFact using "+###.###%"
		let custsp.[ii].factortype$=custsp.[ii].factortype$+tmp$
	endif
	if p60$[33,33]="Y" and p61$[100,100]="Y" and lpppcust<>0 and lpppcust=custid! perm price and price master is on
		let tmp$="PM#"+str$(custid)
		let custsp.[ii].factortype$=custsp.[ii].factortype$+tmp$
	endif
	let ii=ii+1
	
else
	goto outend: ! reach the max
endif
RETURN 



end_range: ! END OF THIS RANGE
IF NOT (CONTRACT) GOTO startcontract:

if p60$[33,33]="Y" and p61$[100,100]="Y" and lpppcust<>0 and lpppcust=custid! perm price and price master is on
	let custid=orgcust
	let k1$=custid using "######"
	let lpppcust=0
	let contract=0
	goto srchspc:
endif
GOTO OutEnd:



Else                                            
  returnstatus = 0                              
  message$ = "Can not Process this Transaction" 
  ! include "src/callmainerr.inc"               
  !  call dxclose()                             
  Temp$=""
  Call errTrap(pgmName$)
End Try





Sub updatelog(debug)                                        
	If not(debug) Exit Sub                                    
	System "echo ''" + msc$(0) + " " + msg$ + "'' >> " + dlog$
End Sub       


Sub errTrap(pgmName$)
  msg$="error...",Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ",pgmName$
  Call updatelog(1)
End Sub
		

ss=0 !ss=Spc(10)

ERR_SEARCH_LOG: Rem                                                    
returnstatus=0
message$="*** SE# "+Str$(E)+" at line "+Str$(Spc(16))+" in "+Msc$(4)
!Gosub UPDATE_LOG                                                          
return
! ----------------------------------------
outend: !==============================================================
if ii
 ii=ii-1
endif
Close #ch_prod
Close #ch_sppr
Close #ch_ctch
Close #ch_commh
close #ch_ccode
msg$="doing...end of "+pgmName$ \ Call updatelog(debug)
ss=0
End sub