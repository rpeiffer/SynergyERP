! >>> Program 524b2
!
! description Accounts Payable Check Print - Delete Checks
! loadsave -w -n 100,10 -o prog/dxport/524b2.dl4 src/524b2.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JAN 25, 2001  13:24:46
Rem /usr/acct/r97//usr/acct/kag/work/r97/ap/la524b.src (univ2) [kag] {53413}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
Declare External Function OpenFile
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Rem LA524B -  CHECK WRITE  DELETE/VOID CHECKS
Rem LAST UPDATE 01/91 - VOID CHECK BEYOND RANGE
!If Err 0 Gosub ERR_TRAP
Try
Dim 1%,B9[1],C0[8],E,F8,F9,G1[2],G3,H1[2],O1[2],S,S9,X1
Dim 2%,B[1],C,F1[2],G2,G[1],H[1],O2[6],R[15],V
Dim 2%,X,X2
Dim 3%,O3[9]
Dim I$[8],K1$[20],K4$[20]
Dim O$[3],O1$[12],R$[63]
Dim V$[6],X$[10],2%
DIM P61$[256],1%,ch_curr,keycurr$[30],3%,rec_curr,1%,currid,3%,currfact,2%,bnkcurrid,1%,ch_apcash, 3%,rec_apcash
DIM 1%, A2CCURRID                
DIM 3%, A2CCURRFACT   
dim 1%,oiCURRID
dim 3%,oiCURRFACT 
Mat Read #1,51,18;C0;
Mat Read #1,61,0;p61$;
	Dim fname$[50],groupid$[1],J$[50],F$[20],G$[2],K2$[30],R1$[13]
	Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
	Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
	Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
	Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
! call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
COID=intCO
Close #1 ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=0 ! blockid no errors
Mat Read #1,88,16;F$; \ Open #15,F$ ! a00ap
Mat Read #1,88,48;F$; \ Open #16,F$ ! acf
! let open the files here
 LET V$=" 0" \ SEARCH #15,2,1;V$,R[15],E 
 If E = 1 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '20' Not On File. "
	goto outend:
endif
 IF E GOSUB ERR_SEARCH:                                                    
 MAT  READ #15,R[15],2;R$;                                                 
 IF R$[51,51]<>" " GOTO L_860: 
 If E = 1 
	eflag=eflag+1
	message$="Update In Process Elsewhere. Try Again Later"
	goto outend:
endif
 L_860: ! LET R$[51,51]=" " \ MAT  WRITE #15,R[15],2;R$; 
Call DXGet("u_group",groupid$)
if rtrim$(groupid$)="" let groupid$="0"
G$[1,1] = intco Using "#"
g$[2,2]=groupid$
                                              

                                        
 LET F$=R$[31,31],"/A80VM",G$[1,2] \ OPEN #2,F$                            
 LET F$=R$[53,53],"/A20OI",G$[1,2] \ OPEN #3,F$                            
 LET F$=R$[56,56],"/A20CR",G$[1,2] \ OPEN #5,F$                            
 LET F$=R$[39,39],"/A50DB",G$[1,2] \ OPEN #6,F$                            
 LET F$=R$[43,43],"/A50CR",G$[1,2] \ OPEN #7,F$                            
 MAT  READ #1,88,112;F$; \ OPEN #8,F$                                      
 LET F$=R$[40,40],"/A50DD",G$[1,2] \ OPEN #10,F$                           
V8=0
MAXL = 60 
	Mat Read #1,51,18;C0;
V$ = "20" \ Search #15,2,1;V$,R[15],E
If E = 1 
	eflag=eflag+1
	message$="Error In A/P Control File. Record '20' Not On File. "
	goto outend:
endif
If E Gosub ERR_SEARCH
Mat Read #15,R[15];R1$;


If R1$[13,13]<> "1" 
	eflag=eflag+1
	message$="CHECKS HAVE NOT BEEN PROCESSED"
	goto outend:
endif
! get bank flag
a5=0
let b9=1;b9[1]=1
If C0[0]
	call dxget("BANK",tmp$)\ let  BNKFLG = tmp$
	if bnkflg<=0 or bnkflg>99
		let eflag=eflag+1
		let message$=message$+"Invalid Bank Submitted"
		goto outend:
	endif
	K2$ = BNKFLG Using "##"
	Search #8,2,1;K2$,R[8],E
	If E <>0
		eflag=eflag+1
		message$=Message$+"BANK NOT ON FILE!!!"
		goto outend:
	End If 
	let b9=bnkflg
	
endif
Call dxget("SCHK",tmp$) \ B[0] = tmp$ !!STARTING Check #
	If b[0] < 0 Or b[0] > 999999
		RETURNSTATUS=0
		Let MESSAGe$ = "Invalid starting Check Number"
		Goto outend:
	ENDIF         
	call dxget("ECHK",tmp$) \ If tmp$ = "" Let b[1] = 999999 Else Let b[1]=TMP$
	If b[1] < 0 Or b[1] > 999999
		RETURNSTATUS=0
		Let MESSAGe$ = "Invalid ending Check Number"
		Goto outend
	ENDIF                                   
	If b[1]<b[0]
		returnstatus=0
		message$=message$+"Starting Check Must Be Less Than Ending Check."
		Goto outend
	endif
!R1$[13,13] = "1" \ Mat Write #15,R[15];R1$;
If eflag<>0 Goto OUTEND
totrec=0
L_3000: Rem DELETING CHECKS
K4$ = " ",K4$ \ K4$[1,2] = B9 Using "##"
K4$[3,8] = B[0] Using "######"
L_3030: Search #5,3,1;K4$,R[5],E
If E = 2 Goto outend
If E Gosub ERR_SEARCH
X1 = K4$[1,2]
If X1 <> B9 Goto outend
F1[1] = K4$[3,8]
If F1[1] = 999999 Goto outend
If F1[1] > B[1] Goto outend
If K4$[18,18] = "9" Goto L_3220
Gosub L_7000
If G1[0] = 9 Goto L_3170
If G1[1] = 1 Goto L_3400
If G1[0] = 3 Goto L_3170
R[3] = G2
Gosub L_5200
If O$[1,1] = "4" Goto L_3190
L_3170: Message$= "ERROR IN STATUS CODE-VENDOR: "+str$(G[1])+" INVOICE: "+rtrim$(O1$[1,12])
Gosub ERR_SEARCH
L_3190: O2[1] = 0 \ O2[6] = 0
O$[1,1] = "2"
Gosub L_5400
L_3220: Rem *** DELETING CHECK ***
!Print @0,23;'CL';"DELETING CHECK #: ";F1[1]
let totrec=totrec+1
Search #5,5,1;K4$,R[5],E
If E Gosub ERR_SEARCH
E = 3
Search #5,1,0;K4$,R[5],E
If E Gosub ERR_SEARCH
Goto L_3030
L_3400: Rem REPRINT DD
R[6] = G2
Gosub L_4600
H1[2] = 3
Gosub L_4800
Goto L_3220

L_4600: Rem READ DD
Mat Read #6,R[6],0;H;
Mat Read #6,R[6],8;H1;
Return 

L_4800: Rem WRITE DIRECT DISBURSE
Mat Write #6,R[6],0;H;
Mat Write #6,R[6],8;H1;
Return 

L_5200: Rem ...READ OPEN ITEM REC.
Mat Read #3,R[3],0;O$;
Mat Read #3,R[3],6;O1;
Mat Read #3,R[3],12;O2;
Mat Read #3,R[3],40;O3;
Mat Read #3,R[3],100;O1$;
Return 

L_5400: Rem ...WRITE C/R IN O/I REC
Mat Write #3,R[3],12;O2
Mat Write #3,R[3],40;O3
Mat Write #3,R[3];O$
Return 


L_7000: Rem READ A20CR
Mat Read #5,R[5],0;G;
Mat Read #5,R[5],8;G1;
Mat Read #5,R[5],14;G2;
Mat Read #5,R[5],18;O1$;
Mat Read #5,R[5],30;G3;
Return 

L_7060: Rem WRITE A20CR VALUES
Mat Write #5,R[5],0;G;
Mat Write #5,R[5],8;G1;
Mat Write #5,R[5],14;G2;
Mat Write #5,R[5],18;O1$;
Mat Write #5,R[5],30;G3;
Return 
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
call programdump()
E$=msg$ \ Error 10000
Return ! End


OUTEND: Rem END
V$ = "20" \ Search #15,2,1;V$,R[15],E
If E Gosub ERR_SEARCH
Mat Read #15,R[15];R1$;
let recchk=0
let k1$=" ",k1$
search #5,3,1;k1$,r[5],e
if not(e) let recchk=99
if recchk<>0
	R1$[13,13] = "1" 
else
	r1$[13,13] = "0"
endif
Mat Write #15,R[15],0;R1$;
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
if not(eflag)
	if not(totrec)
		returnstatus=1
		let message$=message$+"There are no Checks to Delete"
		message$=message$+"."
	else
		Let message$=message$+" Check(s) Deleted"
	endif
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
