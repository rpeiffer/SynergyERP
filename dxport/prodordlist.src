! --- prodordlist.dl4 
! description 671a product order/po list called from prodm.dl4
!  and prodwh.dl4
!
! loadsave -w -n 100,10 -o prog/dxport/prodordlist.dl4 src/prodordlist.src
! 1.0 mm/dd/yyyy change??
! add cost sec(po) and slsm security (orders)
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
!DOC= ProdOrdersClosed.doc
!
!
!include structure,filehandler libs & default structure dims
Include "src/ubsprod.inc"
Include "src/ubswhse.inc"
Include "src/ubspo.inc"
Include "src/ubsorder.inc"
Include "src/inc/filea80vm.inc"
Include "src/inc/filecust.inc"
!
!
! *declare additional dl4 intrinsic subs & functions
Declare Intrinsic Sub env
!
! *declare additional external libs & subs & functions
External Lib "ubsfunc.dl4","ubsprconv.dl4"
Declare External Function XAmount, Xunit$, formatdate$

!
External Lib "libgeneral.lib"
Declare External Sub SubErr,CreateNetStatus

External Lib "sffiles.lib"
Declare External Function getum,getprod,getcust,getcartdet,getmisccharge$,getwhavail

External Lib "ubsfunc.dl4"
Declare External Function OpenFile
Declare External Sub UserCntrl
Declare External Function PDate$
Declare sub OpenFiles
Declare Sub GetOrders,GETONPO, GETCLOSEDPO


	

!
! **main procedure
!
!
! dim variables used by program
!
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try

	option string redim is legal

	dim action$[30],options$[30],userid$[8],b$[200],3%
	dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[2000] ! .net delimiters

	DEF FNR(X)=SGN(X)*(INT(ABS(X)*100+.5)*.01)

	Dim PDK$[20],PHK$[20]
	Dim OHK$[20],ODK$[20]

	Dim PR. As Prod
	Dim WH. As WHSE
	Dim Cust. As cust
	Dim PH. As POHDR
	Dim PD. As PODet
	Dim Vend. As a80vm
	Dim OH. As ORDH
	Dim OD. As ORDD

	Dim 1%,debugDetail,wh
! Variables for Channel#'s
	Dim 2%,WHC,PRC,VNC,CUC,CTC,CCC,PLC,SLC,PHC,PDC,OHC,ODC
! Variables for Search Record#
	Dim 3%,WHR,PRR,VNR,CUR,CTR,PLR,SLR,PHR,PDR,OHR,ODR
! Variables for Search Error
	Dim 2%,WHE,PRE,VNE,CME,CTE,PLE,SLE,PHE,PDE,OHE,ODE

	Dim Msg$[256],pgmName$[20],Message$[200],WebStr$[600]
	Dim P9$[50],P60$[50],P61$[256]
	Dim Temp$[100],Space$[100]
	Dim QMASK$[20],PMASK$[20],EMASK$[20],dec$[5]
	Dim WHSE$[2],VENDITEM$[20],POSTATUS$[100,20],ORDSTATUS$[100,20]
	Dim NOF$[10]
	Dim 1%,FndUID,UA5[10],Cost_Lev[3] ! vars for call usercntrl
	Dim UA2$[50],TUID$[10] ! vars for call usercntrl
	Dim 1%,nonstock,zline
	Dim 2%,Q0[1],D9[5],custsec[1]
	Dim 2%,ErrStat,X1,X2
	Dim 3%,cost
	Dim 3%,onpo
	DIM UM$[4]
	Dim prod$[12],whse$[2],tmp$[1000],tmp1$[50]
	dim action1$[30],ACTION2$[30]
	dim Company$[2],UserID$[8]
    Dim PDK$[20],PHK$[20],POSTATUS$[100,20],O$[50]
	Dim 1%,T9[20],mssg
	Dim tmp$[1000],Vend$[60],3%,X2
	dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20] ! ,rstr$[1000]
!
	call env(1,"BSDEL",bsdel$)
	call env(1,"ESDEL",esdel$)
	call env(1,"RDEL",rdel$)
	call env(1,"FDEL",fdel$)
!
	poStatus$[1] ="PO ENTERED"
	poStatus$[2] ="PO PRINTED"
	poStatus$[3] ="PO REGISTERED"
	poStatus$[4] ="PO OPEN"
	poStatus$[5] ="RECEIPTS IN PROC"
	poStatus$[6] ="RECEIPTS REGISTERED"
	poStatus$[7] ="PO CLOSED"
	POSTATUS$[11]= "  DM ENTERED"  
	POSTATUS$[12]= "  DM PRINTED" 
	POSTATUS$[13]= "  DM REG'D"     
	POSTATUS$[14]= "  DM CLOSED"
	POSTATUS$[90]="IN PROCESS"
	poStatus$[91]="PO IN PROCESS"
	Postatus$[95]=" PO PROC ERP"  
	postatus$[96]=" RTS PROC ERP" 
	postatus$[97]=" DM PROC ERP"  
	LET O$="W D I M IWIDII  "

	Space$=" ",Space$


	b$=" ",b$
 !
 ! Try call dxopen() else rem
 !
	call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)
 !
 ! open files
	Call OpenFiles()
 !
	! Start Prog.
	Read #CTLC,19,50;P9$; 
	Read #CTLC,60,50;P60$; 
	Read #CTLC,61,0;P61$;

	Mat Read #CTLC,115;D9;  
	Mat Read #CTLC,115,40;Q0; 
	If NOT(Q0[0]) let Q0[0]=2
	If not(Q0[1]) let Q0[1]=2                                                       
	Let Dec$="#",Dec$;Qmask$="---,---,--#"                                         
	If Q0[0] Let Qmask$="---,---,--#.",Dec$[1,Q0[0]]         !qty mask      
	If Q0[1] Let Pmask$="---,---,---,--#.",Dec$[1,Q0[1]]     !price mask        
	Let Emask$="-$$$,$$$,$$$,$$$.##"                         !ext. price mask  
	Let NOF$="-NOF-"
	
	let TUID$=UserID$+"          " ! set up temp var
	If Len(TUID$)>10 Let TUID$[11]="" ! Cut it at max as usercntrl is 10 chars vs 8 for .net
	If TUID$[1,10]<>"          " !  no blank users!
	  Call UserCntrl(TUID$,UA2$,UA5[],FndUID,intCo)
	  If FndUID=0 ! means found it, =1 is not found
	    Cost_Lev[0]=UA5[0];Cost_Lev[1]=UA5[1] ! avg / load
		Cost_Lev[2]=UA5[2];Cost_Lev[3]=UA5[3] ! PO / base
	  Endif ! if not found would be zeroes from dim
	Endif
	USlsm=UA5[5] ! for security (hard code version)
 ! get product record
	Call DXGet("prodid",prod$)
	prod$ = prod$+"            "
	prr = getprod(e$,PRC,prod$,PR.)
	If PRR<0 Clear PR.
	Call DXGet("option",pgmName$) \ pgmName$=UCase$(pgmName$)
	Warehouse=0
	If pgmName$="PRODWH" ! from prodwh
	  Call DXGet("warehouse",whse$) \ warehouse=whse$ ! passed a warehouse!
	  If warehouse<1 or warehouse>d9[5] let warehouse=0 ! bad pass
	Endif
	If Action1$<>"CLOSEDPO"
		! Section 1   Product for display
		tmp$=bsdel$+"ProductInfo"+fdel$+rdel$
		tmp$=tmp$+"ID"+fdel$+"Description1"+fdel$+"Description2"+fdel$+"WHSE"+fdel$+rdel$
		tmp$=tmp$+PR.A$[140,151]+fdel$+RTrim$(PR.A$[9,38])+fdel$+RTrim$(PR.A$[63,92])+fdel$
		tmp$=tmp$+Str$(Warehouse)+fdel$+rdel$
		Call AddToStr(e$,rstr$,tmp$)
		Call AddToStr(e$,rstr$,esdel$) ! end of prod section

		! Section 2   Order details
		tmp$=bsdel$+"OrderInfo"+fdel$+rdel$
		tmp$=tmp$+"Order/Line"+fdel$+"Customer"+fdel$+"Name"+fdel$+"Order Date"+fdel$
		tmp$=tmp$+"Ship Date"+fdel$+"Qty Order"+fdel$+"Qty Ship"+fdel$+"Qty BO"+fdel$
		tmp$=tmp$+"Price"+fdel$+"Prev Ship"+fdel$+"Status"+fdel$+"WH"+fdel$+rdel$
		Call AddToStr(e$,rstr$,tmp$)

		If Warehouse let wh=warehouse

		Call GetOrders(ODC,OHC,PRR,CUC,prod$,wh,qmask$)
		Call AddToStr(e$,rstr$,esdel$) ! end of order section
	endif

	! Section 3   now get PO's
	tmp$=bsdel$+"POInfo"+fdel$+rdel$
	tmp$=tmp$+"POrder/Line"+fdel$+"Vendor"+fdel$+"Name"+fdel$+"PO Date"+fdel$
	tmp$=tmp$+"Due Date"+fdel$+"Qty Order"+fdel$+"Qty Ship"+fdel$+"Qty Recvd"+fdel$
	tmp$=tmp$+"Cost"+fdel$+"PO Type"+fdel$+"Status"+fdel$+"WH"+fdel$+"Highlight"+fdel$
	tmp$=tmp$+rdel$
	Call AddToStr(e$,rstr$,tmp$)
	if action1$<>"CLOSEDPO"
		Call GetONPO(PDC,PHC,PRR,VNC,wh,qmask$)
	else
		Call GetCLOSEDPO(PDC,PHC,PRR,VNC,wh,qmask$)
	endif

	Call AddToStr(e$,rstr$,esdel$)
	! web status
	If PrR<0
	    ReturnStatus=0
		tmp$="Can't get "
		If WHRec<0 let tmp$=tmp$,"Warehouse record "
		If PrR<0 let tmp$=tmp$,"Product record "
		Message$=tmp$
	else
	    ReturnStatus=1
		Message$="OK"
	endif
	  !
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)

	Call SetOutput(e$,rstr$)
 ! call dxclose()
else
 include "src/callmainerrnet.inc"
end try
end
!---------------- done with main -----------------------------------------


!--------------------------------------------------------------------
sub OpenFiles()
  !
  ! Open files for this program
  !
  Try
    !
	CTLC= OpenFile(-9999,intCo) \ If CTLC=-1 Error 42    !control
	WHC= OpenFile(-1744,intCo)  \ If WHC=-1  Error 42    !prodwhse
	PRC=OpenFile(-1792,intCo)   \ If PRC=-1  Error 42    !prod
	VNC= OpenFile(-2400,intCo)  \ If VNC=-1  Error 42    !vendor
	CUC= OpenFile(-1808,intCo)  \ If CUC=-1  Error 42    !customer
	
	CCC= OpenFile(-1728,intCo)  \ If CCC=-1  Error 42    !ccodes

	PHC= OpenFile(-2416,intCo)  \ If PHC=-1  Error 42    !pohead
	PDC= OpenFile(-2432,intCo)  \ If PDC=-1  Error 42    !poline
	OHC= OpenFile(-1840,intCo)  \ If OHC=-1  Error 42    !roh
	ODC= OpenFile(-1888,intCo)  \ If ODC=-1  Error 42    !rolnew
    !
  else
    include "src/callsuberr.inc"
  end try
end sub ! openfiles

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Sub GetOnPO(PDC,PHC,PRR,VNC,whichwhse,qmask$)



Try
	Declare External Function PDate$

	Dim PDK$[20],PHK$[20],POSTATUS$[100,20],O$[50]
	Dim 1%,T9[20],mssg
	Dim tmp$[1000],Vend$[60],3%,X2
	dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20] ! ,rstr$[1000]
!
	call env(1,"BSDEL",bsdel$)
	call env(1,"ESDEL",esdel$)
	call env(1,"RDEL",rdel$)
	call env(1,"FDEL",fdel$)
!
	poStatus$[1] ="PO ENTERED"
	poStatus$[2] ="PO PRINTED"
	poStatus$[3] ="PO REGISTERED"
	poStatus$[4] ="PO OPEN"
	poStatus$[5] ="RECEIPTS IN PROC"
	poStatus$[6] ="RECEIPTS REGISTERED"
	poStatus$[7] ="PO CLOSED"
	POSTATUS$[11]= "  DM ENTERED"  
	POSTATUS$[12]= "  DM PRINTED" 
	POSTATUS$[13]= "  DM REG'D"     
	POSTATUS$[14]= "  DM CLOSED"
	POSTATUS$[90]="IN PROCESS"
	poStatus$[91]="PO IN PROCESS"
	Postatus$[95]=" PO PROC ERP"  
	postatus$[96]=" RTS PROC ERP" 
	postatus$[97]=" DM PROC ERP"  
	LET O$="W D I M IWIDII  "
!

	Let PDK$=" ",PDK$;PDK$[1,6]=PRR using "######"  

getPoline: !=============================================================
	Search #PDC,3,2;PDK$,PDR,PDE
	If Val(PDK$[1,6])<>PRR then let PDE=22 
	If PDE Exit Sub                                                             

	If PDE                        
		Clear PD.                  
	Else                          
		Read Record #PDC,PDR; PD.; 
	Endif


!check
!Call $LOGIC,1,2^0,PD.L1[3],nonstock
	REM UNPACK L1[3] TO T9[x]
	LET X2=PD.L1[3]
	nonstock=0;mssg=0
	If X2>0
	  FOR K=0 TO 11
		LET T9[K]=SGN(FRA(X2/2))
		LET X2=INT(X2/2)
	  NEXT K
	  nonstock=t9[0];mssg=t9[2]
	Endif
	If nonstock or mssg   goto getPoline:    !nonstock / message         
	If PD.L1[0]=3 then     goto getPoline:    !line closed/filled 
	If whichwhse and PD.L1[1]<>whichwhse goto getPoline:    !check whse
	!If PD.L1[0]>5 then     goto getPoline:    !Debit Memo     
	If PD.L3[3]>=PD.L3[2]  goto getPoline:    !Over ship
	if PD.L3[1]<>PRR GOTO getPOLine ! not same prod record - bad index?

	PHR=PD.L3[0]
	If PHR                        
		Read Record #PHC,PHR; PH.; 
	Else
		Clear PH.
	Endif                         

!more check
	If Val(PDK$[7,12])<>PH.H0[2]   goto getPoline:  !po# don't match     
	!If PH.H0[0]>=7 and PH.H0[0]<91 goto getPoline:  !status check                 
	! If not(PD.POMISC[0])           goto getPoline:  !no stock update/ignore 
	! get vendor name
	Vend$=PH.h3[3] Using "######"
	VNR=filegeta80vm(e$,VNC,"=",1,vend$,vend.)
	If VNR<0 Clear vend.
	! build the string
	tmp$=Str$(PH.H0[2])+"-"+Str$(PD.L1[2]) +fdel$	! po & Line
	tmp$=tmp$+LTrim$(PH.H3[3] using "######")+fdel$+RTrim$(vend.name$)+fdel$	! Vend & name
	tmp$=tmp$+Pdate$(PH.H0[3])+fdel$				! PO date
	if pd.l2[2]
		tmp$=tmp$+Pdate$(PD.l2[2])+fdel$				! due date from poline
	else
		tmp$=tmp$+Pdate$(PH.H0[4])+fdel$				! due date
	endif
	CNVTU[0] = 0
	CNVTU[1] = PR.PFU1[10]
	CNVTU[2] = 1

	CNVTA = PD.L3[2]
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[10],ccc) ! u/m
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! ordered
	CNVTA = PD.PL4[5]
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! to ship
	CNVTA = PD.L3[3]
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! received to date
	Cnvtu[0]=0;CNVTU[1]=PR.PFU1[11];Cnvtu[2]=2
	CNVTA=PD.pl4[0]
	OrdPrc = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[11],ccc) ! u/m
	if Cost_Lev[2]=0 ! let ORDPRC=0 ! cost security
		tmp$=tmp$+" "+UM$+fdel$ ! CAN NOT SEE COST
	ELSE ! CAN SEE COST
		tmp$=tmp$+LTrim$(OrdPrc Using PMask$)+" "+UM$+fdel$ ! net COST
	ENDIF
	tmp$=tmp$+O$[PH.H4[0]*2+1,PH.H4[0]*2+2]+fdel$			! type
	tmp$=tmp$+poStatus$[PH.H0[0]]+ fdel$			! status
	tmp$=tmp$+Str$(PD.L1[1])+fdel$ ! whse 
	let tmp1$="N" ! highlight
	if ph.delvtime1>0 let tmp1$="Y"
    let tmp$=tmp$+tmp1$+fdel$ ! highlight
	tmp$=tmp$+rdel$		! end of record
	Call AddToStr(e$,rstr$,tmp$)
    Goto GetPOLine	! next prod line

Else
	Call suberr(e$,Spc(8),Spc(10),Msc$(2))
end Try

End Sub


!--------------------------------------------------------------------
! STARTCLOSEPO
! --------------------------------------------------------------

Sub GetCLOSEDPO(PDC,PHC,PRR,VNC,whichwhse,qmask$)



Try

	Let PDK$=" ",PDK$;PDK$[1,6]=PRR using "######"  
	LET PDK$[7]="}}}}}}" 
	GETNXTPOL: ! GET NEXT POLINE
	Search #PDC,6,2;PDK$,PDR,PDE 
	IF PDE=2
		EXIT SUB
	ENDIF
	If Val(PDK$[1,6])<>PRR 
		EXIT SUB                                                          
	ENDIF
	If PDE                        
		Clear PD.                  
	Else                          
		Read Record #PDC,PDR; PD.; 
	Endif
	!Call $LOGIC,1,2^0,PD.L1[3],nonstock
	REM UNPACK L1[3] TO T9[x]
	If PD.L1[0]<>3 and pd.l1[0]<>14 goto getnxtPol:    !line closed/filled 
	if PD.L3[1]<>PRR GOTO getnxtpol: ! not same prod record - bad index?
	If whichwhse and PD.L1[1]<>whichwhse goto getnxtpol:    !check whse 
	LET X2=PD.L1[3]
	nonstock=0;mssg=0
	If X2>0
		FOR K=0 TO 11
			LET T9[K]=SGN(FRA(X2/2))
			LET X2=INT(X2/2)
		NEXT K
		nonstock=t9[0];mssg=t9[2]
	Endif
	If nonstock or mssg   goto getnxtpol:    !nonstock / message         
	
	    
	! If PD.L3[3]>=PD.L3[2]  goto getnxtPol:    !Over ship
	
	PHR=PD.L3[0]
	If PHR                        
		Read Record #PHC,PHR; PH.; 
	Else
		Clear PH.
	Endif                         
	If Val(PDK$[7,12])<>PH.H0[2]   goto getNXTPOL:  !po# don't match     
	
	Vend$=PH.h3[3] Using "######"
	VNR=filegeta80vm(e$,VNC,"=",1,vend$,vend.)
	If VNR<0 Clear vend.
	! build the string
	tmp$=Str$(PH.H0[2])+"-"+Str$(PD.L1[2]) +fdel$	! po & Line
	tmp$=tmp$+LTrim$(PH.H3[3] using "######")+fdel$+RTrim$(vend.name$)+fdel$	! Vend & name
	tmp$=tmp$+Pdate$(PH.H0[3])+fdel$				! PO date
	if pd.l2[2]
		tmp$=tmp$+Pdate$(PD.l2[2])+fdel$				! due date from poline
	else
		tmp$=tmp$+Pdate$(PH.H0[4])+fdel$				! due date
	endif
	CNVTU[0] = 0
	CNVTU[1] = PR.PFU1[10]
	CNVTU[2] = 1

	CNVTA = PD.L3[2]
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[10],ccc) ! u/m
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! ordered
	CNVTA = PD.PL4[5]
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! to ship
	CNVTA = PD.L3[3]
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! received to date
	Cnvtu[0]=0;CNVTU[1]=PR.PFU1[11];Cnvtu[2]=2
	CNVTA=PD.pl4[0]
	OrdPrc = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[11],ccc) ! u/m
	if Cost_Lev[2]=0 ! let ORDPRC=0 ! cost security
		tmp$=tmp$+" "+UM$+fdel$ ! CAN NOT SEE COST
	ELSE ! CAN SEE COST
		tmp$=tmp$+LTrim$(OrdPrc Using PMask$)+" "+UM$+fdel$ ! net COST
	ENDIF
	tmp$=tmp$+O$[PH.H4[0]*2+1,PH.H4[0]*2+2]+fdel$			! type
	tmp$=tmp$+poStatus$[PH.H0[0]]+ fdel$			! status
	tmp$=tmp$+Str$(PD.L1[1])+fdel$ ! whse 
	let tmp1$="N" ! highlight
	if ph.delvtime1>0 let tmp1$="Y"
    let tmp$=tmp$+tmp1$+fdel$ ! highlight
	tmp$=tmp$+rdel$		! end of record
	Call AddToStr(e$,rstr$,tmp$)
    Goto Getnxtpol:	! next prod line

Else
	Call suberr(e$,Spc(8),Spc(10),Msc$(2))
end Try

End Sub





! END -- CLOSEPO
!--------------------------------------------------------------------

Sub GetOrders(ODC,OHC,PRR,CUC,prod$,whichwhse,qmask$)


Try
	Declare External Function PDate$
	Dim Cust$[60],OHK$[20],ODK$[20],ORDSTATUS$[100,20],whse$[2],temp$[20]
	Dim tmp$[1000],src$[10],3%

	dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20] ! rstr$[1000],e$[500]
!
	call env(1,"BSDEL",bsdel$)
	call env(1,"ESDEL",esdel$)
	call env(1,"RDEL",rdel$)
	call env(1,"FDEL",fdel$)
!
	ordStatus$[1] ="ORD ENTERED"            
	ordStatus$[2] ="ORD PRINTED"            
	ordStatus$[3] ="ORD REGISTERED"         
	ordStatus$[4] ="READY TO INVOICE"               
	ordStatus$[5] ="INV ENTERED"  
	ordStatus$[6] ="INV PRINTED"
	ordStatus$[7] ="INV REGISTERED" 
	ordStatus$[9] ="CM ENTERED"
	ordStatus$[10]="CM PRINTED"
	ordStatus$[11]="CM REGISTERED"
	ordStatus$[58]="CS ON PICK"
	ordStatus$[59]="CS ON HOLD"
	ordStatus$[90]="ORD IN PROCESS"
	ordStatus$[91]="ORD IN EDIT"         
	ordStatus$[92]="ORD IN JOURNAL"
	ordStatus$[93]="CM IN JOURNAL" 
!
	whse$=whichwhse using "##"


	Let ODK$=PRR Using "######"
	Let Temp$=" ",Temp$;Temp$=ODK$
getRol: !===========================================================
	Search #ODC,3,2;ODK$,ODR,ODE                                                    
	If ODK$[1,6]<>Temp$[1,6] then let ODE=22                                 
	If ODE Exit Sub
	Read Record #ODC,ODR,0;OD.;

	If whichwhse and OD.L4[3]<>whichwhse goto getRol ! diff whse
	If OD.L3[0]=1 GOTO getRol ! nonstock
	If OD.S2[0]=3 goto getRol ! message
	if OD.L4[0]<>PRR goto getRol ! rec not same as prod rec - bad index?
	! If OD.L3[1]=0 goto getRol ! no stk updt
! get the header detail
	For x=1 to 99
		If x>19 and x<30 goto nxtsts
		Let OHK$=" ",OHK$
		Let OHK$[1,2]=X using "##"
		Let OHK$[3,12]=OD.L2[1] using "######" 
  
		Search #OHC,2,1;OHK$,OHR,OHE                                                    
		If Not(OHE) then goto gotOH
	Nxtsts: ! missed it
	Next X
	Goto getRol ! no header - no line

gotOH: ! found a header
	If OHE                                                                          
		Clear OH.                                                                    
	Else                                                                            
		Read Record #OHC,OHR; OH.;                                                   
	Endif                                                                           

	If OH.H5[7]=16 and OD.L4[3]=OH.H5[11] then goto getRol
! get customer name
	Cust$=OH.H0[4] Using "######"
	CUR=filegetcust(e$,CUC,"=",1,cust$,cust.)
	If CUR<0 Clear cust.
	! first do a sslsm sec check - Do internal chk instead of call "custsec.dl4"
	if USlsm>0 and CUR>0 ! has usercntrl slsm and cust is valid
	     custsec[0]=cust.customercode
		  CUSTSEC[1] = 1
		 if p9$[21,21]="N"
         call "custsec.dl4",Custsec[],ctlc,userid$,e$,rstr$
		 ELSE
		 custsec[0]=0
		 endif
		 if custsec[0]=-1 goto getRol
		rem if cust.SalesmanCode<>USlsm goto getRol ! next sprod line
	Endif
	! start the data load
	tmp$=Str$(OH.H0[7])+"-"+Str$(OD.L3[2])+fdel$	! order & line
	tmp$=tmp$+Cust$+fdel$+RTrim$(cust.name$)+fdel$ ! cust # & name
	tmp$=tmp$+PDate$(OH.H0[9])+fdel$				! order date
	tmp$=tmp$+Pdate$(OH.H0[10])+fdel$				! ship date
	CNVTU[0] = 0
	CNVTU[1] = PR.PFU1[9]
	CNVTU[2] = 1

	CNVTA = OD.L7[2] \ If OD.L2[0]=12 Let CNVTA=0-CNVTA
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[9],ccc) ! u/m
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! ordered
	CNVTA = OD.L7[4] \ If OD.L2[0]=12 Let CNVTA=0-CNVTA
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$  ! shipped
	CNVTA = OD.L7[3] \ If OD.L2[0]=12 Let CNVTA=0-CNVTA
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$   ! backorder
	Cnvtu[0]=0;CNVTU[1]=PR.PFU1[12];Cnvtu[2]=2
	CNVTA=OD.OLM[3]
	OrdPrc = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[12],ccc) ! u/m
	tmp$=tmp$+LTrim$(OrdPrc Using PMask$)+" "+UM$+fdel$ ! net price
	CNVTU[0] = 0
	CNVTU[1] = PR.PFU1[9]
	CNVTU[2] = 1

	CNVTA = OD.L7[0] \ If OD.L2[0]=12 Let CNVTA=0-CNVTA
	OrdQty = XAMOUNT(CNVTU[],CNVTA,PR.PFU1[],PR.PFU2[],PR.A[],ctlc,FLAG)
	um$=xunit$(PR.PFU1[9],ccc) ! u/m
	tmp$=tmp$+LTrim$(OrdQty Using QMask$)+" "+UM$+fdel$ ! Previous Shipped?
	tmp$=tmp$+ordStatus$[OH.H0[0]] + fdel$			! status
	tmp$=tmp$+Str$(OD.L4[3])+fdel$+rdel$		! warehouse ends record
	Call AddToStr(e$,rstr$,tmp$)
	Goto getRol ! next sprod line

Else
	Call suberr(e$,Spc(8),Spc(10),Msc$(2))
end Try

End Sub


!--------------------------------------------------------------------