! >>> Program 135b
!
! description Mass Change Percents 
! loadsave -w -n 100,10 -o prog/dxport/135b.dl4 src/135b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Declare Intrinsic Sub InpBuf,String,programdump,FindF
Declare Intrinsic Function findchannel
! Option Default Dialect IRIS1
Rem   MX135b   -  Inventory/whse percentages utility prog  
Rem   author:  rce 06/09/95      
Rem   update: rjs 06/11/97 add vendor range option also added msgs cct104028
!   update: rjs 06/11/97 add vendor range option also added msgs cct104028
!           jcs 05/10/00 - change months to ave to forecast table
! jliu 8/18/00 - add the optoin "Change the do not reorder flag to? "
!              - also bring up the standard
! zyc 03/16/01 cct145277 fix typo
! zyc 09/18/01 cct150389 fix comm code range
! kag 4/18/02 cct156523 fix vendor lookup-used called version
! jliu 12/22/10 cct244890 add the new prompt "Term Discount %" 
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUL 27, 2005  12:55:44
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx1/mx135b.src (univ2) [txc] {21761}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenMySQLMirror
include "src/inc/sql_prod.inc" ! SQL defintions

If Err 0 Gosub ERR_TRAP
Dim 1%,SC,SR,CNVTU[2],SRC,COST_LEV[3],COST_SEC,Z9[9],UN[2]
Dim 2%,E1
Dim 3%,UNIT,CNVTA
Dim e$[500],buttonlist$[5,50],nextlist$[5,100],Msg$[500],rstr$[2000] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
B$=" ",B$
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.prwh.i}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i}
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
DIM_VARS: Rem
Dim 1%,BWH,EWH,BICLASS,EICLASS,URECFLAG
DIM 1%,HOLDFLAG,PORTSCR,AA1$[40],file$[80],cmd$[80],line_$[200] 
Dim 2%,LTIME,SALE,SSTOCK,BVEND,EVEND,VEND,X
Dim 3%,R[99],termdisc
Dim K2$[16],K3$[14],P9$[50],P60$[50],BCOMM$[4],ECOMM$[4]
Dim BPROD$[12],EPROD$[12],V1$[10],W9$[4],P61$[256]
Dim RETVAL$[512],RFLG$[1],Z2$[2],u9$[50],Custom_customer$[30]
Def FNR(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
! call dxsave(0,"tmp/135bsv.txt!") ! save web send data
OPEN_FILES: Rem          opens files here
For J = 2 To 4
  Read J1
  If J1 = -1 Goto NXTF
  Read #1,88,Abs(J1);J$;
  If J1 > 0 Open #J,J$ Else Ropen #J,J$
NXTF: Rem
Next J
Data "1792","1744","-2288"
sqlChan = OpenMySQLMirror(e$)
Mat Read #1,60,50;P60$;
Mat Read #1,19,50;P9$;
Mat Read #1,61,0;P61$;
Mat read #1,115,60;custom_customer$;
Custom_customer$=UCase$(Trim$(custom_customer$))
!"cct208298                                                                
AA1$=UCase$(Userid$)                                                             
if custom_customer$="MORRISETTE" ! may not work on other customers/systems!!
	LET FILE$="/v/reports/dnrlog"                                              
	CALL FindF(file$,FOUND)
	MDNRLog=1 ! deflt=y
	IF NOT(FOUND)
	   LET CMD$="touch "+file$ 
	   Try
		SYSTEM CMD$
		MDNRLog=1
	   Else
		MDNRLog=0
	   End try
	ENDIF    
	If MDNRLog
		MDNRch=findchannel()
		Try
			OPEN #MDNRch,file$
			MDNRLog=1
		Else
			MDNRLog=0
		End try
		IF MDNRLog and NOT(FOUND)
		   PRINT #MDNRch;"      The DO NOT RECORDER FLAG Log           ";MSc$(0)        
		   print #MDNRch;tab 0;"Access Code"; tab 12;"Old Flag"; tab 22;"New Flag";    
		   print #MDNRch;tab 40;"Prod code";tab 60;"whse";tab 70;"Date changes";       
		   print #MDNRch;tab 100;"Program#"                                            
		endif
	Endif
Endif ! custom - morrisette dnr log
INIT_VARS: Rem sort flags
FLG = 0;returnstatus=0;message$=""
BPROD$ = " ",BPROD$;EPROD$ = "z",EPROD$
BCOMM$ = "    ";ECOMM$ = "zzzz"
BVEND = 0;EVEND = 999999;SSTOCK = -1;LTIME = -1;SALE = -1;termdisc=-1
CH_PRWH = 3;CH_PROD = 2;BWH = 0;EWH = 99;FTBL = 0;BICLASS = 0;EICLASS = 99
MAIN: Rem

PRINT_SCREEN: Rem
!Print 'CS'
!Print @20,0;"Mass Change Percentages";@0,0;"-MX135B-";
!Print @35,2;'BR';"STARTING";@55,2;"ENDING";'ER';
!Print @2,4;"1> WAREHOUSE :";
!Print @2,6;"2> COMMODITY CODE :";
!Print @2,8;"3> INVENTORY CLASS  :";
!Print @2,10;"4> PRODUCT CODE  :";
!Print @2,12;"5> VENDOR CODE  :";
!Print @2,14;"6> Safety Stock %                  :";
!Print @2,15;"7> Exceptional Lead Time %         :";
!Print @2,16;"8> Exceptional Sale %              :";
!print @2,17; "9> Term Discount %                 :";
!Print @2,17;"9> Default Forecast Weight Table   :";
!Print @1,18;"10> Change the Do Not Reordered flag to?  ";

INPUTS: Rem

!EDT_FLDS: Rem "edit them here
!FLG = 1
!On X Gosub FLD1,FLD3,FLD5,FLD7,FLD9,FLD11
!On X - 6 Gosub FLD12,FLD13,FLD14,FLD15
!Return 
FLD1: Rem warehouse range
!J5$ = "Enter starting warehouse number maximum 99"
!J1 = BWH;J0$ = "3000023504"
!Gosub ISINPUT
call dxget("BWH",tmp$)
j1=tmp$
BWH = J1
FLD2: Rem
!J5$ = "Enter ending warehouse number maximum 99"
!J1 = EWH;J0$ = "3000025504"
!Gosub ISINPUT
Call dxget("EWH",tmp$) \ IF RTRIM$(TMP$)="" LET TMP$="99"
j1=tmp$
EWH = J1
!Print Using "##";@55,4;EWH;'CL';
If BWH > EWH
  Message$ = message$+ "Invalid warehouse range  "
  Returnstatus=1
End If 
!RETVAL$[3,4] = EWH Using "##"
!Return 
FLD3: Rem commodity range
!J5$ = "Enter starting commodity code maximum zzzz, or  -: list"
!J1$ = BCOMM$;J0$ = "2 00043506"
!Gosub ISINPUT
!V1$ = " ",V1$;V1$ = "FIRST COMMODITY"
!If J4$[1,1] = "-" Swap 1,"sw684" \ Goto FLD3
call dxget("BCOMM",tmp$)
BCOMM$ = UCase$(tmp$)+B$ ! J$

FLD4: Rem
!J5$ = "Enter ending commodity code maximum zzzz, or  -: list"
!J1$ = ECOMM$;J0$ = "2 00045506"
!Gosub ISINPUT
!If J4$[1,1] = "-" Swap 1,"sw684" \ Gosub FLD4
Call dxget("ECOMM",j$) \ IF RTRIM$(J$)="" LET J$="ZZZZ"
ECOMM$ = UCASE$(J$)+B$ ! ;V1$ = " ",V1$;V1$ = "LAST COMMODITY"
!Print @55,6;ECOMM$;
J5$ = " ",J5$
If BCOMM$ > ECOMM$
  Message$ = message$+"Invalid commodity code range  "
  Returnstatus=1
End If 

FLD5: Rem inventory class
!J5$ = "Enter starting inventory class code maximum 99"
!J1 = BICLASS;J0$ = "3000023508"
!Gosub ISINPUT
call dxget("BICLASS",tmp$)
J1=tmp$
BICLASS = J1
!Print Using "##";@35,8;BICLASS;'CL';
J5$ = " ",J5$
!RETVAL$[13,14] = BICLASS Using "##"
FLD6: Rem
!J5$ = "Enter ending inventory class code maximum 99"
!J1 = EICLASS;J0$ = "3000025508"
!Gosub ISINPUT
Call dxget("EICLASS",tmp$) \ IF RTRIM$(TMP$)="" LET TMP$="99"
j1=tmp$
EICLASS = J1
If BICLASS > EICLASS
  Message$ = message$+"Invalid class code range  "
  Returnstatus=1
End If 

FLD7: Rem product code
!J5$ = "Enter starting product code maximum zzzzzzzzzzzz, or  -: ,&?:list option"
!J1$ = BPROD$;J0$ = "2 00123510"
!Gosub ISINPUT
!Gosub PRODSCAN \ Goto FLD7
Call dxget("SPROD",j$)
BPROD$ = UCase$(J$)+B$
J5$ = " ",J5$
FLD8: Rem
!J5$ = "Enter ending product code maximum zzzzzzzzzzzz, or  -: ,&?:list option"
!J1$ = EPROD$;J0$ = "2 00125510"
!Gosub ISINPUT
!Gosub PRODSCAN \ Goto FLD8
Call dxget("EPROD",j$) \ IF RTRIM$(J$)="" LET J$="ZZZZZZZZZZZZ"
EPROD$ = UCase$(J$)+B$
!Print @55,10;EPROD$;'CL';
If BPROD$ > EPROD$
  Message$ = message$+"Invalid product code range  "
  Returnstatus=1
End If 
J5$ = " ",J5$

FLD9: Rem vendor range
!J5$ = "Enter starting vendor code maximum 999999, or  -: list"
!J1$ = BVEND Using "######";J0$ = "2 00063512"
!Gosub ISINPUT
!If J4$[1,1] = "-" Call "MXVEND5",J4$ \ Goto FLD9
Call dxget("BVEND",j$)
BVEND = J$
!Print Using "######";@35,12;BVEND;'CL';
J5$ = " ",J5$
!RETVAL$[41,46] = BVEND Using "######"
FLD10: Rem
!J5$ = "Enter ending vendor code maximum 999999,  or  -: list"
!J1$ = EVEND Using "######";J0$ = "2 00065512"
!Gosub ISINPUT
!If J4$[1,1] = "-" Call "MXVEND5",J4$ \ Goto FLD10
Call dxget("EVEND",j$) \ IF RTRIM$(J$)="" LET J$="999999"
EVEND = J$
!Print Using "######";@55,12;EVEND;'CL';
If BVEND > EVEND
  Message$ = message$+"Invalid vendor code range  "
  Returnstatus=1
End If 

FLD11: Rem
!J5$ = "Enter % to be used to calculate safety stock in warehouse file"
!J1 = SSTOCK;J0$ = "3200064014"
!Gosub ISINPUT
!Print Using "###.##%";@40,14;J1;'CL';
!If J1 = 0 Print @50,14;"No Change";'CL';
call dxget("SSTOCK",j$) \ if RTrim$(J$)="" let j$="-1" ! no chg
j1=j$
IF J1<-1 OR J1>999.99
	message$=message$+"Invalid safety stock percent  "
	returnstatus=1
Endif
SSTOCK = J1
J5$ = " ",J5$

FLD12: Rem
!J5$ = "Enter % to be used to calculate exceptional lead time in product file"
!J1 = LTIME;J0$ = "3200074015"
!Gosub ISINPUT
!Print Using "###.##%";@40,15;J1;'CL';
!If J1 = 0 Print @50,15;"No Change";'CL';
!J7$ = "Note! This field will get updated regardless of warehouse selected!"
!Gosub ISERRMSG
Call dxget("LTIME",j$) \ if RTrim$(J$)="" let j$="-1" ! no chg
J1=J$
IF J1<-1 OR J1>999.99
	message$=message$+"Invalid lead time percent  "
	returnstatus=1
Endif
LTIME = J1
J5$ = " ",J5$

FLD13: Rem
!J5$ = "Enter % to be used to calculate exceptional sale in product file"
!J1 = SALE;J0$ = "3200074016"
!Gosub ISINPUT
!Print Using "###.##%";@40,16;J1;'CL';
!If J1 = 0 Print @50,16;"No Change";'CL';
!J7$ = "Note! This field will get updated regardless of warehouse selected!"
!Gosub ISERRMSG
Call dxget("SALE",j$) \ if RTrim$(J$)="" let j$="-1" ! no chg
J1=J$
IF J1<-1 OR J1>999.99
	message$=message$+"Invalid sale percent  "
	returnstatus=1
Endif
SALE = J1
J5$ = " ",J5$

FLD14: Rem
!J5$ = "Enter the forecast weight table in warehouse,  0: no change"
!J1 = FTBL;J0$ = "3000034017"
!Gosub ISINPUT
!Print Using "###";@40,17;J1;'CL';
!If J1 = 0 Print @50,17;"No Change";'CL';
Call dxget("FTBL",j$)
J1=J$
IF J1<0 OR J1>999
	message$=message$+"Invalid forecast table  "
	returnstatus=1
Endif
FTBL = J1
J5$ = " ",J5$

FLD15: Rem  do not reorder flag
!J5$ = "Enter  Y: Change to 'Y',  N: Change to 'N', <CR>: No Change"
!J1$ = "";J0$ = "2 00014518"
!Gosub ISINPUT
If custom_customer$<>"GSC" ! General Sales - NO ENTRY
Call dxget("RFLG",j$) ! entry for all others
Else
	j$=" " ! <CR>-no change
Endif
J$=UCASE$(J$)
if j$="-" let j$=" "
If J$ = "" Or J$ = " " Let RFLG = 0
If J$ = "Y" Let RFLG = 99
If J$ = "N" Let RFLG = 1
If J$ <> "" And J$ <> " " and J$ <> "Y" and J$ <> "N"
	Message$ = message$+"DNR answer is Y, N, or -"
	Returnstatus=1
Endif
!If RFLG = 99 Print @45,18;"Yes, Change to 'Y' ";'CL'
!If RFLG = 1 Print @45,18;"No, Change to 'N'";'CL';
!If RFLG = 0 Print @45,18;"No Change ";'CL';
J5$ = " ",J5$
! new field " cct#244890 
Call dxget("TRMDISC",tmp$)
J1=tmp$
IF J1<0 OR J1>999.99
	message$=message$+"Invalid lead time percent  "
	returnstatus=1
Endif
termdisc=j1


CHECK_INPUTS: ! check if any failed
If returnstatus=1 ! 1 = failed on blockid - instead of 0=fail
	e$=Message$ ! it uses e$
	goto ERR_MSG
Endif
UPDATE: Rem "removed the flag stuff to make more straight forward
If FTBL = 0 And SSTOCK <= 0 And LTIME <= 0 And SALE <= 0 And RFLG = 0 and termdisc<=0 ! "no update needed
  Message$=Message$+"No fields to be updated! - No Update performed"
  Returnstatus=1;e$=message$
  Goto ERR_MSG
End If 
!Print @0,23;"Records processed...";'CL';
K2$ = " ",K2$;K3$ = " ",K3$;K = 0
K2$ = BPROD$[1,12]
Search #2,2,1;K2$,REC_PROD,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto GOT_FIRSTP
SEARCHP: Rem 
Search #2,3,1;K2$,REC_PROD,E \ If E > 2 Gosub ERR_SEARCH
If E Goto NEXTSTEP
GOT_FIRSTP: Rem "matched mode 2 first prod
If K2$[1,12] > EPROD$ Goto NEXTSTEP
Gosub READ_PROD
K3$ = " ",K3$;K3$[1,12] = K2$[1,12]
If A$[152,155] < BCOMM$ Goto SEARCHP
If A$[152,155] > ECOMM$ Goto SEARCHP
If B[24] < BVEND Goto STRTCHW
If B[24] > EVEND Goto STRTCHW
If LTIME<>-1 Let U4[1] = LTIME
If SALE<>-1 Let U4[0] = SALE
! If Not(Fra(K / 100)) Print Using "######";@18,23;'CL';K;
Mat Write #2,REC_PROD,670;U4;
if sqlChan >= 0 ! MySQL enabled and channel opened
	e = prod_UpdateSQLFromDL4(e$, intCo, K2$, sqlChan, 2)
	if e <> 1 ! returns the number of records add/updated/deleted
		error 11000 ! search error
	end if
end if
STRTCHW: Rem "start Warehouse search
K3$[13,14] = BWH Using "##"
Search #3,2,1;K3$,REC_PRWH,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto GOTWHSE
SEARCHW: Rem
Search #3,3,1;K3$,REC_PRWH,E \ If E > 2 Gosub ERR_SEARCH
If E Goto SEARCHP
GOTWHSE: Rem "found begginning
If K3$[1,12] <> A$[140,151] Goto SEARCHP
If K3$[13,14] > "98" Goto SEARCHP
W1[0] = K3$[13,14]
If W1[0] < BWH Goto SEARCHW
If W1[0] > EWH Goto SEARCHP
Gosub READ_PRWH
If W7[6] < BICLASS Or W7[6] > EICLASS Goto SEARCHW
VEND = W2[3]
If Not(VEND) Let VEND = B[24]
If VEND < BVEND Goto SEARCHW
If VEND > EVEND Goto SEARCHW
LET HOLDFLAG=W0[0]
If SSTOCK<>-1 Let W2[5] = SSTOCK
if termdisc<>-1 let whmisc[3]=termdisc
If FTBL Let FCWGT = FTBL
If RFLG = 99 Let W0[0] = 1
If RFLG = 1 Let W0[0] = 0
WRITEW: Rem
K = K + 1
! If Not(Fra(K / 100)) Print Using "######";@18,23;'CL';K;
Mat Write #3,REC_PRWH,38;W2;
Mat Write #3,REC_PRWH,78;W3;
Mat Write #3,REC_PRWH,420;W0;
Write #3,REC_PRWH,404;FCWGT;
MAT write #3,REC_PRWH,800;WHMISC; 
if custom_customer$="MORRISETTE"
	IF MDNRLog and HOLDFLAG<>W0[0]                                                
		   U9$=msc$(0)
		   LOOP_LOG: READ #MDNRch;LINE_$; \ IF LINE_$ GOTO LOOP_LOG:             
		   print #MDNRch;tab 0;aa1$[1,10];                                     
		   if holdflag=1 print #MDNRch;tab 12;"Y";                             
		   if holdflag=0 print #MDNRch;tab 12;"N";                             
		   if holdflag=2 print #MDNRch;tab 12;"O";                             
		   if wh0[0]=1 print #MDNRch;tab 22;"Y";                               
		   if wh0[0]=0 print #MDNRch;tab 22;"N";                               
		   if wh0[0]=2 print #MDNRch;tab 22;"O";                               
		   print #MDNRch;tab 40;w1$[1,12];tab 60;w1[0];tab 70;u9$[1,30];       
		   print #MDNRch;tab 100;"135B"                                         
	ENDIF
Endif ! custom - morrisette - dnr log
Goto SEARCHW
READ_PRWH: Rem
Rem {begin src/inc/read.prwh.i}
Mat Read #CH_PRWH,REC_PRWH,0;W1$
Mat Read #CH_PRWH,REC_PRWH,32;W1
Mat Read #CH_PRWH,REC_PRWH,38;W2
Mat Read #CH_PRWH,REC_PRWH,78;W3
Mat Read #CH_PRWH,REC_PRWH,228;W5
Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
Read #CH_PRWH,REC_PRWH,396;WHLPOOL
Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
Read #CH_PRWH,REC_PRWH,404;FCWGT
Mat Read #CH_PRWH,REC_PRWH,420;W0
Mat Read #CH_PRWH,REC_PRWH,428;WH7
Mat Read #CH_PRWH,REC_PRWH,444;WH8
Mat Read #CH_PRWH,REC_PRWH,540;WH9
Mat Read #CH_PRWH,REC_PRWH,696;W7
Mat Read #CH_PRWH,REC_PRWH,756;WH3$
Mat Read #CH_PRWH,REC_PRWH,780;WHLV
Read #CH_PRWH,REC_PRWH,798;WHRPLN
Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
Mat Read #CH_PRWH,REC_PRWH,842;WHLM
Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
Read #CH_PRWH,REC_PRWH,894;RESTRICTED
Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
Read #CH_PRWH,REC_PRWH,922;VLIST
Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
Read #CH_PRWH,REC_PRWH,938;WHBASE
Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
Rem {end read.prwh.i}
Return 
READ_PROD: Rem
Rem {begin src/inc/read.prod.i}
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Mat Read #CH_PROD,REC_PROD,628;AGEDAY
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,664;LBSORD
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;STK
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
Mat Read #CH_PROD,REC_PROD,1088;FUT
Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
Mat Read #CH_PROD,REC_PROD,1108;PRREDI
Mat Read #CH_PROD,REC_PROD,1120;PIC$
Mat Read #CH_PROD,REC_PROD,1270;PRD0
Mat Read #CH_PROD,REC_PROD,1282;PRIML$
Mat Read #CH_PROD,REC_PROD,1294;PRD1
Mat Read #CH_PROD,REC_PROD,1304;PRD2
Rem {end read.prod.i}
Return 
Rem {begin rtn.input.s}
ISINPUT: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER

ISERRMSG: ! X1 = Len(J7$)
Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end rtn.input.s}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: !
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
NEXTSTEP: Rem
Unlock #2,#3
!Print Using "######";@18,23;K;'CL';
!Print @0,22;'CL';"  Press <CR> to continue,  E: exit  ";
!Input Len 16385;""X$ \ Call String(1,X$)
!If X$ = "" Goto INPUTS
!If X$ <> "E" Goto NEXTSTEP
OUTEND: Rem
ReturnStatus=0 ! 0= ok in blockid, is =1 elsewhere
Message$="Complete - "+Str$(K)+" Product & Warehouse Records Updated"
 call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
 call AddToStr(e$,rstr$,WebStr$)
 call SetOutPut(e$,rstr$)
 try Call dxclose() else rem
!Close 
!Chain "mx000"
End
ERR_SEARCH: Rem
If Msg$<>"" let e$=msg$ \ goto err_msg ! Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+Msc$(4)
call programdump("tmp/135bse!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
  call AddToStr(e$,rstr$,WebStr$)
  call SetOutPut(e$,rstr$)
  
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End
Rem {end rtn.error.s}
