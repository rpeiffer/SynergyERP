! >>> Program 784b
!
! description Transaction, Inventory Balance by Date, Time Order
!
! loadsave -w -n 100,10 -o prog/dxport/784b.dl4 src/784b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 1.9 OBJECT CODE     Created: SEP 11, 1998  16:20:17
Rem /usr/acct/r97/src/mx784b.s (univ2) [blv] {37229}
Rem  Copyright (c) 1998 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX784B - TRANSACTION REPORT
Rem AUTHOR: FREDDY   DEC 19, 1988
Rem LAST UPDATE:  SLS 980701 cct112841 - add ability to select a list of transaction types
!
Declare Intrinsic Sub DateToJulian,InpBuf,JulianToDate,StrSrch44,String,Time
! - Option Default Dialect IRIS1
Com 1%,COST,UNITX
Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
If Err 0 Gosub ERR_TRAP
Dim L1$[56],A$[156],T1$[12],T2$[12],PREVCODE$[50],DATE$[10]
Dim 1%,L1[3],TRANTYP[34]
Dim 2%,B[24],UNIT$[4],LT3[1],INDX
Dim 3%,L2[5],TOTEXT,GRTOTEXT,R1,gtot_units,gtot_ext_cost
Dim J$[40],J1$[30],J2$[20],J3$[20],J4$[40],J8$[8]
Dim 1%,F,X1,2%,X2,3%,J,X3,T9[20]
Dim K1$[50],K2$[20],K3$[20],X$[10],T9$[26]
Dim TRANTYPES$[50],TRANTYP$[512],SCRATCH$[80],SPACES$[12],K5$[50],U5$[50]
Dim 2%,D1,D2,W1
DIM TNAME$[30],custom_customer$[30],3%
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[2000],tmp1$[100],tmp2$[100],tmp3$[100],TransType$[150]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="~",EndParam$
!
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
For J = 2 To 7
  Read J1
  If Not(J1) Goto L_830
  Read #1,88,J1;J$;
  Open #J,J$
L_830: Next J
Data "2512","1792","1728","2528","1808","2400"
Mat Read #1,0,100;J8$;
Read #1,3;J1$;
mat read #1,115,60;custom_customer$;
custom_customer$=UCase$(rtrim$(custom_customer$))
SPACES$ = " ",SPACES$
Mat Read #1,108,0;TRANTYP$;
Mat TRANTYP = Zer
TRANTYP = 0
TRANTYPES$ = "ALL"
PREVCODE$ = " ",PREVCODE$!!
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 62 \ If J8 Let J9 = 18
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"784b",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!
call dxget("PCOST",tmp1$) \ If tmp1$ = "" let tmp1$ = "N" else tmp1$ = "Y" !!CHECK
call dxget("COST",tmp$) \  COST = tmp$ !!DROP LIST 1, 2
call dxget("um",tmp$) \  UNITX = tmp$!!DROP LIST
call dxget("SCODE",K2$)  \ K2$ = UCase$(K2$),Blank$
call dxget("ECODE",K3$) \  K3$ = UCase$(K3$),EndParam$
call dxget("SDATE",tmp2$) 
call dxget("EDATE",tmp3$) 
call dxget("TransType",TransType$) !trans types format (1,2,4,5) <cr> for all
call dxget("WHSE",tmp$) \ W1 = tmp$
call dxget("PNAME",tmp$) \ DTL=0 \ if RTrim$(tmp$)<>"" let DTL=1
!
! print cost
If tmp1$ = "N" let COST = 0 
!
! verify product
If K2$ > K3$ LET  e$ = "Invalid ending item code, must be >= than starting item code!" \ error 10000
K1$ = K2$ 
!
!validations Starting date
If tmp2$ = ""
  D1 = 0
else
  If Len(tmp2$) <> 6 Let e$ = "Invalid starting date!" \ error 10000
  DATE$ = tmp2$[5,6],tmp2$[1,4]
  Call DateToJulian(1,DATE$,DATE$,E) \ If E let e$ = "Invalid starting date!" \ error 10000
  D1 = DATE$
End if
!
!validations Ending date
if tmp3$ = ""
  D2 = 36525
else
  If Len(tmp3$) <> 6 Let e$ = "Invalid ending date!" \ error 10000
  DATE$ = tmp3$[5,6],tmp3$[1,4]
  Call DateToJulian(1,DATE$,DATE$,E) \ If E Let e$ = "Invalid ending date!" \ error 10000
  D2 = DATE$
End if
If D1 > D2 let e$ = "Invalid ending date, must be >= starting date!" \ error 10000
!
!tranaction type
SCRATCH$ = ""
If TransType$
  tmp$=TransType$
  X = 1
  For cnt = 1 To 34 \ TRANTYP[cnt] = 0 \ Next cnt
NextType:
  X2 = 0 \ Let X$ = tmp$ To "," : X2
  X1 = X$ \ If X1 < 1 Or X1 > 34 Let X = 0 \ Goto ExitType
  TRANTYP[X1] = 1
  if X2 let tmp$ = tmp$[X2+1] \ goto NextType
ExitType:
  if X=0 let e$ = "Invalid tranaction type!" \ error 10000
else
  for cnt=1 to 34 \ TRANTYP[cnt]=1 \ next cnt
end if
!
Gosub END_TYPE_QUEST
!
!validations warehouse
If W1 < 0 Or W1 > 99 let e$ = "Invalid warehouse, must be between 0 and 99!" \ error 10000
!change var
T1$ = K2$ \ T2$ = K3$
K1$ = D1 Using "&&&&&"
K3$ = D2 Using "&&&&&"
!
!L_900: Rem GET RANGES
!!Print @0,0;"MX784B"
!!PREVCODE$ = " ",PREVCODE$
!Print @0,14;"ENTER STARTING ITEM CODE, <RETURN> FOR ALL,  ''E'' TO EXIT : ";'CE';
!Input ""K2$ \ If K2$ = "E" Goto OUTEND
!If K2$ = "" Let K2$ = " ",K2$ \ K3$ = "~",K3$ \ Goto L_970
!Print @0,15;"ENTER ENDING  ITEM CODE, <RETURN> FOR LAST, ''E'' TO EXIT : ";'CL';
!Input ""K3$ \ If K3$ = "E" Goto OUTEND
!If K3$ = "" Let K3$ = "~",K3$
!If Len(K2$) < 12 Let K2$[Len(K2$) + 1,12] = SPACES$[Len(K2$) + 1,12]
!If Len(K3$) < 12 Let K3$[Len(K3$) + 1,12] = SPACES$[Len(K3$) + 1,12]
!L_970: If K2$ <= K3$ Goto L_990
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_900
!L_990: K1$ = K2$ \ If J2 If Not(J8) Print #0;"\14\";
!J1 = 90 \ J2 = 0
!L_1000: Rem DATES
!D1 = 0 \ D2 = 0
!L_1005: Print @0,16;"ENTER STARTING DATE(MMDDYY), <RETURN> FOR ALL ''E'' TO EXIT : ";'CE';
!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!If J2$ = "" Let D1 = 0 \ D2 = 36525 \ Goto TRANTYP_PROMPT
!If Len(J2$) <> 6 Goto L_1005
!DATE$ = J2$[5,6],J2$[1,4]
!Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto L_1005
!D1 = DATE$
!L_1025: Print @0,17;"ENTER ENDING   DATE (MMDDYY) OR ''E'' TO EXIT : ";'CL';
!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!If Len(J2$) <> 6 Goto L_1025
!DATE$ = J2$[5,6],J2$[1,4]
!Call DateToJulian(1,DATE$,DATE$,E) \ If E Goto L_1025
!D2 = DATE$
!If D1 <= D2 Goto TRANTYP_PROMPT
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_1000
!!
!!TRANTYP_PROMPT: Rem "display prompt for transaction type
!!Gosub TRANTYP_QUEST
!!L_1100: Rem CHANGE VAR
!T1$ = K2$ \ T2$ = K3$
!K1$ = D1 Using "&&&&&"
!K3$ = D2 Using "&&&&&"
!Print @0,19;'CE';"ENTER WHSE #, <CR> FOR ALL ";
!Input ""J2$
!W1 = J2$
!Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
!If J8 Print 'CS';
!!If Err 0 Gosub ERR_ESCAPE
!!
if j8
  tmp$ = "ITEM CODE",fdel$
  tmp$ = tmp$, "DESCRIPTION 1",fdel$
  tmp$ = tmp$, "DESCRIPTION 2",fdel$
  tmp$ = tmp$, "TRANS#",fdel$
  tmp$ = tmp$, "LOT CODE",fdel$
  tmp$ = tmp$, "SOURCE/DEST",fdel$
  tmp$ = tmp$, "COMMENT",fdel$
  tmp$ = tmp$, "TC",fdel$
  tmp$ = tmp$, "DATE",fdel$
  tmp$ = tmp$,"QUANTITY",fdel$
  tmp$ = tmp$,"UM",fdel$
  tmp$ = tmp$,"WH",fdel$
  tmp$ = tmp$,"PRC",fdel$,"PRC UM",fdel$  !!UM
  If COST let tmp$ = tmp$,"CST",fdel$,"CST UM",fdel$  !!UM
  tmp$ = tmp$,"EXT PRC",fdel$
  If COST let tmp$ = tmp$,"EXT CST",fdel$
  Call addtostr(e$,rstr$,tmp$+rdel$)
End if
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If
!
If J2 If Not(J8) Print #0;"\14\";
J1 = 90 \ J2 = 0
!
L_2000: 
Search #2,3,1;K1$,R1,E
If E Goto outend !!L_9100
If K1$[1,Len(K3$)] > K3$ Goto outend !!L_9100
PREVCODE$[1,5] = K1$[1,5]
Mat Read #2,R1,0;L1$;
Mat Read #2,R1,56;L1;
Mat Read #2,R1,64;L2;
Mat Read #2,R1,106;LT3;
If L1$[1,12] < T1$[1,12] Goto L_2000
If L1$[1,12] > T2$[1,12] Goto L_2000
If W1 If W1 <> L1[1] Goto L_2000
If TRANTYP And Not(TRANTYP[L1]) Goto L_2000
if custom_customer$="ZEPHYR"
	IF L1>=15 LET L2[2]=0-L2[2]
Endif
UNIT$ = "    "
A$ = "NOT FOUND ",A$
J2$ = L1$[1,12]
Search #3,2,1;J2$,R3,E !!\ If E > 1 Gosub ERR_SEARCH
If E Goto L_2100
Gosub L_6000
Gosub L_3000
Gosub L_3050
Gosub L_3100
L_2100: Rem.
If L1 >= 15 Let L2[2] = 0 - L2[2]
J = L1 - 1
Read #1,108,(J * 15);J3$[1,15];
let TNAME$=" ",TNAME$
if dtl
	IF L1=1 OR L1=31 GOSUB L_3500:
	IF L1=3 OR L1=16 GOSUB L_3600:
Endif
Gosub L_5800
Gosub L_5000
! - Signal 2,J0,A,B \ If J0 <> -1 Gosub ERR_TRAP
Goto L_2000
!
L_3000: Rem CONVERSIONS HERE
UWORK[0] = 0;UWORK[1] = 0
If COST = 1 Let UWORK[0] = L2[3]
If COST = 2 Let UWORK[0] = L2[4]
UWORK[1] = L2[5]
UN[0] = 0
UN[0] = PFU1[UNITX + 7]
Return 
!
L_3050: CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = L2[2] \ Gosub L_20000
L2[2] = AMOUNT
CNVTU[2] = 2;CNVTA = UWORK[0]
Gosub L_20000 \ UWORK[0] = AMOUNT
CNVTU[2] = 2;CNVTA = UWORK[1]
Gosub L_20000 \ UWORK[1] = AMOUNT
UWORK[2] = FNR(UWORK[0] * L2[2])
UWORK[3] = FNR(UWORK[1] * L2[2])
Return 
!
L_3100: Rem PRODUCT CONVERT
CNVTU[0] = 0;CNVTU[1] = UN[0];CNVTU[2] = 1
CNVTA = A[0] \ Gosub L_20000
A[0] = AMOUNT
UNIT$ = "    "
If UN[0] > 0 Read #4,UN[0],10;UNIT$;
Return 
!
A[0] = 0;K5$ = " ",K5$
K5$[1,12] = A$[140,151]
L_3220: 
Search #5,3,2;K5$,R5,E
If E = 2 Return 
If K5$[1,12] <> A$[140,151] Return 
Mat Read #5,R5,66;P1;
If L9 If L9 <> P1[0] Goto L_3220
Mat Read #5,R5,82;P3;
A[0] = A[0] + P3[0] - P3[1]
Goto L_3220

L_3500: ! GET VENDOR
LET VEND=L1$[42,47]
IF VEND<=0 OR VEND>999999 OR FRA(VEND)
	LET TNAME$=" ",TNAME$
ELSE 
	LET J4$=VEND USING "######"
	SEARCH #7,2,1;J4$,R7,E !! \ IF E>1 GOSUB Err_Search:
	IF NOT(E)
		MAT  READ #7,R7,0;TNAME$;
	ELSE 
		LET TNAME$="VENDOR NOT ON FILE"
	ENDIF 
ENDIF 
RETURN 

L_3600: ! GET CUSTOMER
LET CUST=L1$[43,48]
IF CUST<=0 OR CUST>999999 OR FRA(CUST)
	LET TNAME$=" ",TNAME$
ELSE 
	LET J4$=CUST USING "######"
	SEARCH #6,2,1;J4$,R6,E !! \ IF E>1 GOSUB Err_Search:
	IF NOT(E)
		MAT  READ #6,R6,30;TNAME$;
	ELSE 
		LET TNAME$="CUSTOMER NOT FOUND"
	ENDIF 
ENDIF 
RETURN
!
L_5000: Rem PRINT LINE
if j8
  tmp$ = rtrim$(L1$[1,12]),fdel$
  tmp$ = tmp$,rtrim$(A$[9,36]),fdel$
  tmp$ = tmp$,rtrim$(A$[63,92]),fdel$
  tmp$ = tmp$,R1 Using "#######",fdel$
  tmp$ = tmp$,rtrim$(L1$[13,24]),fdel$
  tmp$ = tmp$,rtrim$(L1$[25,36]),fdel$
  tmp$ = tmp$,rtrim$(L1$[37,56])
  IF DTL AND RTRIM$(TNAME$)<>"" LET TMP$=TMP$,"  ",RTRIM$(TNAME$)
  TMP$=TMP$,fdel$
  tmp$ = tmp$,L1[0] Using "##"," ",J3$[1,8],fdel$
  X2 = LT3[0] \ Gosub L_7700
  tmp$ = tmp$,X$[1,8],fdel$
  tmp$ = tmp$,L2[2] Using "-------#.##",fdel$
  tmp$ = tmp$,UNIT$[1,4],fdel$
  tmp$ = tmp$,L1[1] Using "##",fdel$
  J1 = J1 + 1
  tmp$ = tmp$,UWORK[1] Using "#####.#####",fdel$,UNIT$,fdel$ !!UM
  If COST let tmp$ = tmp$,UWORK[0] Using "#####.#####",fdel$,UNIT$,fdel$ !!UM
  tmp$ = tmp$, UWORK[3] Using "$-----#.##",fdel$
  If COST let tmp$ = tmp$,UWORK[2] Using "$-----#.##",fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
Else
  Print #0; Tab 0;L1$[1,12];
  Print #0; Tab 12;A$[9,36];
  Print #0; Using "#######"; Tab 41;R1;
  Print #0; Tab 49;L1$[13,24];
  Print #0; Tab 62;L1$[25,36];
  Print #0; Tab 74;L1$[37,56];
  Print #0; Using "##"; Tab 94;L1[0];" ";J3$[1,8];
  X2 = LT3[0] \ Gosub L_7700
  Print #0; Tab 107;X$[1,8];
  Print #0; Using "-------#.##"; Tab 114;L2[2];
  Print #0; Tab 126;UNIT$[1,4];
  Print #0; Using "##"; Tab 130;L1[1];
  Print #0;"" \ J1 = J1 + 1
  Print #0; Tab 12;A$[63,92];
  if custom_customer$="ZEPHYR"
	PRINT #0; USING "PRC:----#.#####"; TAB 44;UWORK[1];"/";UNIT$;" **";
	IF COST PRINT #0; USING " CST:----#.#####"; UWORK[0];"/";UNIT$;" **";
  Else
    Print #0; Using "PRC:#####.#####"; Tab 44;UWORK[1];"/";UNIT$;" **";
    If COST Print #0; Using " CST:#####.#####";UWORK[0];"/";UNIT$;" **";
  Endif
  Print #0; Using " EXT PRC $-----#.##";UWORK[3];" **";
  If COST Print #0; Using " EXT CST $-----#.##";UWORK[2];
  IF DTL AND TNAME$[1,5]<>"     "
	PRINT #0;"" \ LET J1=J1+1
	PRINT #0; TAB 75;TNAME$;
  ENDIF 
  Print #0;"\15\";
End if
if custom_customer$="ZEPHYR"
	GTOT_UNITS=GTOT_UNITS+L2[2]
	GTOT_EXT_COST=GTOT_EXT_COST+UWORK[2]
Endif
Return 
!
L_5800: Rem HEADINGS ROUTINE
if J8 return
!
J1 = J1 + 1 \ If J1 < J9 Return 
!!If J2 If J8 Input @0,23;"PRESS <RETURN> TO CONTINUE "J$ \ Print 'CS';
If J2 Print #0;"\14\";
J2 = J2 + 1 \ J1 = 8
Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 10;J8$; Tab (64 - Len(J1$) / 2);J1$; Tab 120;"PAGE";J2
Print #0;" - 784B - ";T9$;
Print #0; Tab 44;"I N V E N T O R Y   T R A N S A C T I O N S"
Print #0;"\15\";
Print #0; Tab 20;"IN DATE/TIME ORDER"
Print #0; Tab 0;"ITEM CODE";
Print #0; Tab 12;"DESCRIPTION";
Print #0; Tab 41;"TRANS#";
Print #0; Tab 49;"LOT CODE";
Print #0; Tab 62;"SOURCE/DEST";
Print #0; Tab 74;"COMMENT";
Print #0; Tab 94;"TC";
Print #0; Tab 109;"DATE";
Print #0; Tab 117;"QUANTITY";
Print #0; Tab 126;"UM";
Print #0; Tab 130;"WH";
Print #0;" "
Print #0;"\15\";
Return 
!
L_5900:! grand TOTALS
if j8 Return ! not for browser
J1=j1+1
GOSUB L_5800:
print #0;""
PRINT #0; TAB 0;"***** GRAND TOTALS *****  ";
PRINT #0; USING "UNITS -------------#.##"; TAB 80;GTOT_UNITS;
IF COST PRINT #0; USING "   EXT CST $------------#.##";GTOT_EXT_COST;
PRINT #0;""
j1=j1+1
print #0;""
Gtot_units=0
Gtot_ext_cost=0
return
!
L_6000: Rem READ PROD FILE
Mat Read #3,R3;A$;
Mat Read #3,R3,156;B;
Mat Read #3,R3,256;A;
Mat Read #3,R3,512;PFU1;
Mat Read #3,R3,554;PFU2;
Return 
!
L_7700: Rem CONVERT FROM JULIAN
DATE$ = " ",DATE$;X$ = " ",X$
DATE$ = X2 Using "&&&&&"
Call JulianToDate(1,DATE$,DATE$,E) 
If E let DATE$=""
X$ = DATE$
Return 
!
!OUTEND: Rem EXIT ROUTINE
!Print 'CS'
!Close 
!Chain "MX000"
!Stop 
!L_9100: Rem END OF THIS RANGE
!If J8 Print @0,23;"PRESS <RETURN> TO CONTINUE ";'CL'; \ Input ""J$
!For K = 0 To 20
!  T9[K] = 0
!Next K
!Goto L_900
!Goto OUTEND
!Stop 
!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: Goto L_20120!!!If Spc(4) > 1280 Goto L_20120

L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !!\ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
!
!!TRANTYP_QUEST: Rem
!!Window Open @0,5; Size 79,19; Using "TRANSACTION TYPE SELECTION"
!!Gosub DISP_TRANTYPS
!!TRANTYP_SELECT: Rem
!!Print @0,20;'CL';"Enter one type, or a range at a time, C:clear all.";
!!Print " <cr> when done.";
!!Print @0,14;'CL';"Type(s) ? ";
!!Input ""SCRATCH$
!!If SCRATCH$ = "" Goto END_TYPE_QUEST
!!If SCRATCH$ = "E" Goto outend!!DONE
!!If SCRATCH$ = "C"
!!  Mat TRANTYP = Zer
!!  TRANTYP = 0
!!  Gosub DISP_TRANTYPS
!!  Goto TRANTYP_SELECT
!!End If 
!!SCR = 0
!!Call StrSrch44(1,"-",SCRATCH$,SCR)
!!If SCR ! a range was entered
!!  X = SCRATCH$[1,SCR - 1]
!!  SCR = SCRATCH$[SCR + 1]
!!Else 
!!  SCR = SCRATCH$
!!  X = SCR
!!End If 
!!If X < 1 Or SCR < 1 Or X > 34 Or SCR > 34
!!  Print 'RB';
!!  Goto TRANTYP_SELECT
!!End If 
!!For INDX = X To SCR
!!  If INDX
!!    If TRANTYP[INDX]
!!      TRANTYP[INDX] = 0
!!    Else 
!!      TRANTYP[INDX] = 1
!!    End If 
!!  End If 
!!Next INDX
!!If SCR = X
!!  INDX = X
!!  If TRANTYP[INDX]
!!    X$ = 'BR'
!!  Else 
!!    X$ = ""
!!  End If 
!!  If INDX > 12
!!    If INDX > 23
!!      X = 23
!!      X1 = 2
!!    Else 
!!      X = 12
!!      X1 = 1
!!    End If 
!!  Else 
!!    X = 0
!!    X1 = 0
!!  End If 
!!  SCR = (INDX - 1) * 15
!!  Print USING_;@X1 * 25 + 4,INDX - X;
!!  Print X$;TRANTYP$[1 + SCR,15 + SCR];'ER';
!!Else 
!!  Gosub DISP_TRANTYPS
!!End If 
!!Goto TRANTYP_SELECT
!
END_TYPE_QUEST: Rem
!!!Window Close 
!!!Window Off 
TRANTYPES$ = ""
X = 0
SCR = 0
For INDX = 1 To 34
  If TRANTYP[INDX]
    If Not(X)
      X = INDX
    End If 
  Else 
    If X
      If TRANTYPES$ <> ""
        TRANTYPES$ = TRANTYPES$ + ","
      End If 
      If X = INDX - 1
        TRANTYPES$ = TRANTYPES$ + Str$(X)
      Else 
        TRANTYPES$ = TRANTYPES$ + Str$(X) + Str$( - (INDX - 1))
      End If 
      X = 0
    End If 
  End If 
Next INDX
If TRANTYPES$ = ""
  TRANTYP = 0
  TRANTYPES$ = "ALL"
Else 
  TRANTYP = 1
End If 
Return 
!
!!DISP_TRANTYPS: Rem
!!For INDX = 1 To 12
!!  If TRANTYP[INDX] Let X$ = 'BR' Else Let X$ = ""
!!  SCR = (INDX - 1) * 15
!!  Print Using "##) ";@0,INDX;INDX;X$;TRANTYP$[1 + SCR,15 + SCR];'ER';
!!  If INDX < 12
!!    If TRANTYP[INDX + 12] Let X$ = 'BR' Else Let X$ = ""
!!    SCR = (INDX + 11) * 15
!!    Print Using "##) ";@25,INDX;INDX + 12;X$;TRANTYP$[1 + SCR,15 + SCR];'ER';
!!    If TRANTYP[INDX + 23] Let X$ = 'BR' Else Let X$ = ""
!!    SCR = (INDX + 22) * 15
!!    Print Using "##) ";@50,INDX;INDX + 23;X$;TRANTYP$[1 + SCR,15 + SCR];'ER';
!!  End If 
!!Next INDX
!!Return 
!
OUTEND: Rem EXIT ROUTINE
if custom_customer$="ZEPHYR"
	gosub l_5900:! report totals
Endif
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
Try Call dxclose() ELSE REM
End 
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
include "src/callmainerrnet.inc"
End 
Rem {end rtn.error.s}
