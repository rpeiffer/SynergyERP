! >>> Program 780
!
! description: STATUS REPORT
!
! loadsave -w -n 100,10 -o prog/dxport/780.dl4 src/780.src
!
! 1.0 04/09/2008 change
!
include "src/copyright.inc" ! dx
!
External Lib "librasl.lib"
Declare External Sub ChkWhRasl

External Lib "ubsfunc.dl4"
Declare External Function OpenMySQLBrowserOutput,GetMySQLReportHeader
Declare External Sub AddMySQLReportColumnHeadings
Declare External Function AddMySQLReportData
Declare External Sub FinishMySQLReport

Rem BEDIT Version: 2.2 OBJECT CODE     Created: SEP 22, 2004  09:01:08
Rem /w/papermaster/r2002//usr/acct/dek/work/r2002/mx77/mx773.src (univ2) [dek] {13100}
Rem  Copyright (c) 2004 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem MX780 - Inventory LOCATION STATUS REPORT (
Rem AUTHOR: ARNOLD ZIFFLE   FEB 23, 1988
Rem LAST UPDATE:  12/96 cct98120-added 8275 & 8280 to check lot range
! ------------------------------------------------------------------------------
! custom_customer$
! 
! ACME - task#14702/cct192283 - print the primary bin locatioin
! ACME - task#14702/cct216865 -sort by the sel loc, then sort  primary loc within the selection location.
! ------------------------------------------------------------------------------!
Declare Intrinsic Sub InpBuf,Logic,String
!!Option Default Dialect IRIS1
Com 1%,PFU1[20],CNVTU[2],UN[2],COST_LEV[3] 
Com 3%,PFU2[6],CNVTA,A[33],UWORK[10]
COST_LEV[0] = 1 !!ADD
If Err 0 Gosub ERR_TRAP
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)

Dim 1%,MySQL_ch,reportAborted
Dim 3%,MySQLQueueID
DIM 3%,S1[12,2],A1[7]
Dim P0$[66],A$[156],P9$[50],PROD$[12],plkey$[30],primloc$[6]
Dim 1%,P1[1],L1[5],F,X4,WHSE,H4[3],WHSE_BREAK,PRINT_FLAG,URECFLAG
DIM 1%,PL1[1]
Dim 2%,P2[2],B1[24],L2[2],H0[5],X2,D9[10],Q0[1],R1,R2,R4,R6,R7,R8,R9,J1
Dim 3%,P3[3],L3[6],J,X3,T8[20],T9[20],AMOUNT,AVGCOST,W3[24]
dim 3%,usagelm,usagelm2
dim sellum$[4],stkum$[4]
Dim CNAME$[30],J2$[20],J3$[40],ARDATE$[8]
Dim U5$[30],K6$[50],PMASK$[12],WORK$[12],X$[20],RETVAL$[512]
Dim K1$[50],K2$[20],K3$[20],K9$[50],V$[30],V4$[50]
Dim BREAK$[40],SUNIT$[4],UNIT$[10],UNITX,LOC$[6],ITEM$[12],Z$[50],Z2$[1]
Dim SCODE$[12],ECODE$[12],PSKEY1$[1],ZEROSP$[1],SUPCOST$[1],DISPU5$[20]
Dim J$[75],J0$[16],J1$[75],J4$[75],J5$[75],TEMPJ5$[75]
Dim DISPITEM$[12],MAX$[12],P1$[6],EXCLNONE$[1],LOCSORT$[1]
dim p61$[256]
dim rl0$[62],2%,rl1[5],3%,rl2[2],rec_roll,keyroll$[50],prflg$[10] 
dim 3%,totroll,1%,hist,2%,Rasl[2]
dim prtroll$[1],Sloc$[6],ELoc$[6]
dim k10$[50],ploc$[18]
dim custom_customer$[30]
DIM 2%,ARDT,LSTMTH,LSTMTH2,3%,TMP3
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="z",EndParam$
!
For J = 2 To 11
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,Abs(J1);J$;
  If J1 > 0 Open #J,J$ Else Ropen #J,J$
L_830: Next J
Data "-2528","-1792","-2400","-1728","-2432","-2416","-1744","-1","-208", "-2080"   ! all ropen
! #2 - sprodlot, #3- prod, #4-vend, #5-ccodes, #6-poline, #7-pohead, #8-prodwh, #9-sort, #10-prodloc, #11-prodsls
!!Window On 

Mat Read #1,0,100;ARDATE$;
MAT  READ #1,0,108;ARDT;
LET X$=ARDT USING "&&&&&&"
LET ARMTH=X$[3,4]
LET LSTMTH=ARMTH-1
IF LSTMTH<=0 LET LSTMTH=12
LET LSTMTH2=LSTMTH-1
IF LSTMTH2<=0 LET LSTMTH2=12
Read #1,3;CNAME$;
Mat Read #1,19,50;P9$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
Mat Read #1,115,0;D9;
Mat Read #1,115,40;Q0; \ If Q0[1] <= 0 Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
mat read #1,115,60;custom_customer$;
let custom_customer$=rtrim$(custom_customer$)
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 55 \ If J8 Let J9 = 20;SCRPRT = 99
PJ1 = 90;J2 = 0!!;WHSE = 0
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
! call dxsave(0,"tmp/780in.txt!")
mat read #1,61,0;p61$;
if p61$[104,104]="Y"
	let j$="2/prodroll"+str$(intCO)
	ropen #40,j$
	let ch_prodroll=40
endif
!if rasl ! in case
	SLoc$=Blank$
	ELoc$="}}}}}}"
!endif
!
IF NOT(RASL)
	LET E$="Report is Only Available for RASL " \ error 10000
endif

call dxget("SCODE",K2$) \ K2$=rTRIM$(UCase$(K2$)) ! all code UPPERCASE
if k2$="" let k2$=blank$
call dxget("ECODE",K3$) \ K3$=RTRIM$(UCase$(K3$))+EndParam$ ! UPPERCASE
 
If K3$ < K2$ 
	LET  e$ = "Invalid ending Product must be >= than starting !" \ error 10000
End if
call dxget("WHSE",tmp$) \ WHSE = tmp$
X2 = 99 \ If D9[5] < 99 Let X2 = D9[5]
IF D9[5]=1 
	LET WHSE=0
Else
	If WHSE < 1 Or WHSE > X2 Let e$ = "Invalid warehouse, must be between 1 and ",X2,"!" \ error 10000 
Endif 
if p9$[41,41]="W" and whse<>0 ! rasl for warehoue	 
	RASL=0;whch=0;cwhse=whse
	call chkwhrasl(e$,intco,Ctlc,WHCh,CWhse,RASL[])
	if not(rasl)
		let e$="Report is Only Available for RASL Warehouses " \ error 10000
	endif
endif
!if RASL <>0 
	call dxget("SLOC",tmp$)\ if rtrim$(tmp$)<>"" let SLOC$=rtrim$(UCase$(tmp$))+Blank$
	call dxget("ELOC",tmp$) \ if rtrim$(tmp$)<>"" let ELOC$=rtrim$(UCase$(tmp$))+EndParam$
!endif

!
! Gosub L_4700 ! display name for report by
!

!
MySQL_ch = -1 ! OpenMySQLBrowserOutput(e$)
MySQLQueueID = 0
if MySQL_ch <> -1
	MySQLQueueID = GetMySQLReportHeader(e$,MySQL_ch,"780")
	if MySQLQueueID = 0
		e$ = "Could not get MySQL report header!"
		error 10000
	end if
end if

If J8 = 0 or MySQLQueueID !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
End If 
!
If J8 and not(MySQLQueueID) ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"780",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
PROCESS: Rem ======= processing
If J2 If Not(J8) Print #0;"\14\";
if j8<>0
	tmp$="Item Code",fdel$
	tmp$=tmp$,"Description 1",fdel$
	tmp$=tmp$,"Description 2",fdel$
	tmp$=tmp$,"Usage Last Mo",fdel$
	tmp$=tmp$,"Usage +2 Mo",fdel$
	tmp$=tmp$,"Sell UM",fdel$
	tmp$=tmp$,"Cubic Ft",fdel$
	tmp$=tmp$,"Ext Cubic Ft",fdel$
	tmp$=tmp$,"Location",fdel$
	tmp$=tmp$,"QTY in Bin",fdel$
	tmp$=tmp$,"Prim Loc",fdel$
	tmp$=tmp$,"Stk Um",fdel$
	if MySQLQueueID
		call AddMySQLReportColumnHeadings(e$,MySQL_ch,MySQLQueueID,fdel$,tmp$)
	else
		Call addtostr(e$,rstr$,tmp$+rdel$) 
	 end if
End if
!
!!Print @0,22;'CE';"Printing...please wait"; \ Signal 3,0
!!If J8 Print 'CS';
!!If Err 0 Gosub ERR_ESCAPE
let k1$=" ",k1$
let k1$[1,12]=k2$[1,12]
if whse<>0 let k1$[13,14]=whse using "##"
L_2000: ! search sprodlot
Search #2,3,2;K1$,R1,E 
If E<>0 Goto L_9100
let work$=k1$[1,12]
if work$>K3$ goto L_9100: ! Check prod
if reportAborted goto OUTEND:
if whse<>0 ! check whse
	let tmp3=k1$[13,14]
	if tmp3<>whse goto L_2000:
endif
Mat Read #2,R1,0;P0$;
Mat Read #2,R1,66;P1;
If WHSE<>0
	If WHSE <> P1[0] Goto L_2000
endif
RASL=0;whch=0;cwhse=P1[0]
call chkwhrasl(e$,intco,Ctlc,WHCh,CWhse,RASL[])
if not(rasl) goto L_2000
Mat Read #2,R1,70;P2;
Mat Read #2,R1,82;P3;
Mat Read #2,R1,114;P1$;
!if rasl<>0 ! not if sort is by location!
  if P1$<SLoc$ goto L_2000
  if P1$>Eloc$ goto L_2000
!Endif
! If ZEROSP If (P3[0] - P3[1] - P3[3]) = 0 Goto L_2000
PROD$[1,12] = P0$[1,12]
LET BADPROD=0
Gosub L_3000 ! get product
IF BADPROD<>0 GOTO l_2000:
QTY=P3[0]-P3[1] !   ! QTY REC - QTY USED
let stkqty=0
if qty<>0
	CNVTU[0] = 0;CNVTU[1] = PFU1[8];CNVTU[2] = 1;CNVTA = QTY
	Gosub L_20000
	STKQTY= AMOUNT ! IN STOCKING UM
ENDIF
LET EXTCUBE=0
IF A1[3]<>0 LET EXTCUBE=B1[23]*QTY/A1[3]  
If P9$[32,32] = "Y" Gosub GET_WHSE
gosub get_plocation: !

!T9[2] = FNR((P3[0] - P3[1]) * AVGCOST)
! Gosub L_10000
!T9[0] = P3[0] - P3[1]
!T9[1] = P3[0] - P3[1] - P3[3]
!If P9$[28,28] = "Y" Let T9[1] = T9[1] + ONPO
!If SORT = 4 Let PRINT_FLAG = 1 ! vendor
 
Gosub L_5800
Gosub L_5000
! Gosub L_2320 no totals
Goto L_2000
!
L_2320: Rem TOTALS CALC
return! no totals 
T9[6] = T9[6] + T9[0]
T9[7] = T9[7] + P3[3]
T9[8] = T9[8] + T9[1]
T9[10] = T9[10] + T9[2]
T8[6] = T8[6] + T9[0]
T8[7] = T8[7] + P3[3]
T8[8] = T8[8] + T9[1]
T8[10] = T8[10] + T9[2]
If PRTPO Let SUBPO = SUBPO + ONPO;TOTPO = TOTPO + ONPO
T8[0] = T8[0] + 1
Return 
!
L_3000: Rem GET PRODUCT
BADPROD=0
let b1[23]=0;a1[3]=0;EXTCUBE=0
usagelm=0
usagelm2=0
sellum$=" ",sellum$
stkum$=" ",stkum$
J2$ = " ",J2$ \ J2$ = P0$[1,12] \ VALIDPROD = 1
Search #3,2,1;J2$,R2,E 
If NOT(E) 
	Mat Read #3,R2,0;A$;
	Mat Read #3,R2,256;A;
	Mat Read #3,R2,156;B1;
	Mat Read #3,r2,460;a1;
	Mat Read #3,R2,512;PFU1;
	Mat Read #3,R2,554;PFU2;
	mat  read #3,r2,1056;prflg$;
	MAT  READ #11,R2,16;S1;
	if s1[lstmth,0]<>0
		CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = s1[lstmth,0]
		Gosub L_20000
		usagelm= AMOUNT
	endif
	if s1[lstmth2,0]<>0
		CNVTU[0] = 0;CNVTU[1] = PFU1[9];CNVTU[2] = 1;CNVTA = s1[lstmth2,0]
		Gosub L_20000
		usagelm2= AMOUNT
	endif
	If PFU1[9] > 0 
		Mat Read #5,PFU1[9],10;SUNIT$;
		let sellum$=sunit$
	else
		If PFU1[9] = -1 Let Sellum$ = "CWT "
		If PFU1[9] = -3 Let Sellum$ = "LB  "
	endif
	If PFU1[8] > 0 
		Mat Read #5,PFU1[8],10;SUNIT$;
		let stkum$=sunit$
	else
		If PFU1[8] = -1 Let Stkum$ = "CWT "
		If PFU1[8] = -3 Let Stkum$ = "LB  "
	endif
eLSE
	CLEAR S1
	BADPROD=99
	A$=" ",A$
	A$[141,150]=P0$[1,12]
	A$[9,38] = "INVALID! ITEM NOT FOUND                ";VALIDPROD = 0
ENDIF
Return 
!
GET_WHSE: Rem "============ get prodwhse record
J2$ = " ",J2$;J2$ = P0$[1,12];J2$[13,14] = P1[0] Using "##"
Search #8,2,1;J2$,R8,E !!\ If E > 1 Gosub ERR_SEARCH
If not(e) 
	Mat Read #8,R8,78;W3;
	If W3[15] Let AVGCOST = W3[15]
endif
Return 
!
L_3600: Rem "========================================== ACCUMULATE OPEN PO'S
ONPO = 0
If R2 = R7 And P1[0] = WHSE_BREAK Goto L_3810
K6$ = " ",K6$;K6$ = R2 Using "######";K6$[7] = ""
L_3630: 
Search #6,3,2;K6$,R6,E 
If E Goto L_3810
R7 = K6$[1,6] \ If R2 <> R7 Let R7 = R2 \ Goto L_3810
Mat Read #6,R6;L1;
Mat Read #6,R6,12;L2;
Mat Read #6,R6,24;L3;
If L1[0] = 3 Goto L_3630
If P1[0] <> L1[1] Goto L_3630
Call Logic(1,2 ^ 0,L1[3],NONSTOCK) \ If NONSTOCK Goto L_3630
If L1[0] > 5 Goto L_3630
If (L3[4] + L3[3]) >= L3[2] Goto L_3630
Mat Read #7,L3[0];H0;
S2 = K6$[7,13] \ If S2 <> H0[2] Goto L_3630
Mat Read #7,L3[0],242;H4;
If H4[0] Goto L_3630
ONPO = ONPO + (L3[2] - (L3[4] + L3[3]))
Goto L_3630 ! next po
L_3810: ! end of open po
Return 
!
L_4000: Rem TOTAL PRINT
If J8 Return
RETURN  ! Totals not used
!
Gosub L_5800
Print #0;"\15\** TOTALS **";
Print #0; Using "-----------#.##"; Tab 54;T9[6];
Print #0; Using "--------#.##"; Tab 69;T9[7];
If PRTPO Print #0; Using "--------#.##"; Tab 81;TOTPO;
Print #0; Using "-----------#.##"; Tab 94;T9[8];
If Not(COST_LEV[0]) Print #0;" " \ Goto L_4190
If Not(SUPCOST) Print #0; Using "-------#.##"; Tab 121;T9[10]
L_4190: 
Return 
!
L_4500: Rem "============================== sub total
Return ! subtotals not used
If J8 Goto L_4527
if custom_customer$="ACME"
	IF X4<>4 IF T8[0]<=1 GOTO L_4527: ! "not by vendor & <=1 item printed
else
	if sort=2 and prtroll$="Y" and prflg$[6,6]="Y" gosub prntroll:
endif

!
If X4 <> 4
	If T8[0] <= 1 Goto L_4530
else
	!If X4 = 4 If T8[0] < 1 Goto L_4530
	If T8[0] < 1 Goto L_4530
endif
Print #0;"\15\** SUB-TOTALS **";
Print #0; Using "-----------#.##"; Tab 54;T8[6];
Print #0; Using "--------#.##"; Tab 69;T8[7];
If PRTPO Print #0; Using "--------#.##"; Tab 81;SUBPO;
Print #0; Using "-----------#.##"; Tab 94;T8[8];
If Not(COST_LEV[0]) Print #0;"" \ Goto L_4527
If Not(SUPCOST)
  Print #0; Using "-------#.##"; Tab 121;T8[10]
Else 
  Print #0;""
End If 
L_4527:  ! 
If Not(J8)
	Print #0;"" \ PJ1 = PJ1 + 3
endif
If X4 = 4
	If T8[0] > 0 Let J1 = 999
endif
L_4530: !
For I = 0 To 20 \ T8[I] = 0 \ Next I
SUBPO = 0
Return 
!
prntroll: ! print roll inventory here
let hist=0;totroll=0
let keyroll$=" ",keyroll$
let keyroll$[1,12]=a$[140,151]
if wh let keyroll$[13,14]=wh using "##"
srchroll: ! search for rolls
search #ch_prodroll,3,1;keyroll$,rec_roll,e\if e=2 goto eggroll: 
if e<>0 goto eggroll: ! gosub err_search:
if keyroll$[1,12]<>a$[140,151] goto eggroll:
if wh
	let x9=keyroll$[13,14]\if x9<>wh goto eggroll:
endif
mat read #ch_prodroll,rec_roll,0;rl0$;
mat read #ch_prodroll,rec_roll,74;rl1;
mat read #ch_prodroll,rec_roll,102;rl2;
let totroll=totroll+rl2[0]
gosub l_5800:
if not(hist)
	print #0;tab 15;"   ROLL IDS:  ";
endif
print #0;tab 30;rl0$[13,32];
print #0; using "------------.##";tab 54;rl2[0]
let hist=99
goto srchroll:
eggroll: ! print total roll weights
if not (hist) return ! not rolls to write about
gosub l_5800:
print #0;tab 15;"*** ROLL TOTAL ***";
print #0; using "------------.##";tab 54;totroll;
if totroll<>t8[6]
	print #0; "  <VAR> ";
endif
print #0;""
return
!
L_4700: Rem LOAD LABEL FOR RANGES
Return! 
ITEM$ = "" \ DISPITEM$ = ""
If SORT = 1 Let ITEM$ = "LOT CODE" \ DISPITEM$ = "lot code"
If SORT = 2 Let ITEM$ = "ITEM CODE" \ DISPITEM$ = "item code"
If SORT = 3 Let ITEM$ = "WAREHOUSE" \ DISPITEM$ = "warehouse"
If SORT = 4 Let ITEM$ = "VENDOR CODE" \ DISPITEM$ = "vendor code"
If SORT = 5 Let ITEM$ = "LOCATION" \ DISPITEM$ = "location"
Return 
!
L_5000: Rem PRINT LINE
!if custom_customer$="ACME" or custom_customer$="SWP"
!	if sort=5 gosub get_plocation:  ! "cct192283
!endif
If J8
	Let tmp$=rtrim$(A$[140,151]),fdel$				!  Item Code 
	let tmp$=tmp$,rtrim$(A$[9,38]),fdel$			!  Description 1 
	let tmp$=tmp$,rtrim$(A$[63,92]),fdel$			!  Description 2 
	tmp$=tmp$,usagelm Using "----------#.##",fdel$	! Usage Last Mo 
	tmp$=tmp$,usagelm2 Using "----------#.##",fdel$ ! Usage +2 Mo 
	tmp$=tmp$,rtrim$(sellum$),fdel$					! Sell UM 
	tmp$=tmp$,B1[23] USING "####.##",fdel$			! Cubic Ft 
	tmp$=tmp$,EXTCUBE USING "------,--#.##",FDEL$   ! Ext Cubic Ft 
	tmp$=tmp$,rtrim$(P1$[1,6]),fdel$ !				! Location ! 
	tmp$=tmp$,STKQTY USING "----------.##",FDEL$	! "QTY in Bin",fdel$
	tmp$=tmp$,RTRIM$(PLOC$[13,18]),fdel$					! PRIMARY LOCATION
	tmp$=tmp$,rtrim$(stkum$),fdel$					! stock um 
  if MySQLQueueID
	if not(AddMySQLReportData(e$,MySQL_ch,MySQLQueueID,fdel$,tmp$))
		! possible user abort - report deleted exit now
		reportAborted = 1
	end if
  else
	Call addtostr(e$,rstr$,tmp$+rdel$) 
  end if
Return
End if
!
Print #0; Tab 0;A$[140,151];
Print #0; Tab 14;A$[9,37];
Print #0; using "---------.##";tab 44; usagelm;
Print #0; using "---------.##";tab 57; usagelm2;
Print #0; tab 70;sellum$[1,4];
print #0; using "####.##";tab 75;b1[23];
print #0; using "---------.##";tab 83;extcube;
print #0; tab 96;P1$[1,6]; ! p1$[1,6];
print #0; using "---------.##";tab 103;stkqty;              
print #0; tab 117;ploc$[13,18];
print #0; tab 125;stkum$[1,4];
print #0;""
print #0; tab 14;a$[63,92];
print #0;""
Return
!
L_5800: Rem HEADINGS ROUTINE
If J8 Return
!
PJ1 = PJ1 + 2 \ If PJ1 < J9 Return 
!!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2<>0 Print #0;"\14\";
J2 = J2 + 1 \ PJ1 = 7
Print #0;"\15\";
Print #0; Tab 10;ARDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;" -780- ";Msc$(3);
Print #0; Tab 50;"Inventory Location Status"
Print #0;" "
Print #0; Tab 0;"ITEM CODE";
Print #0; Tab 14;"DESCRIPTION";
Print #0; Tab 45;"PRIOR MONTH";
Print #0; Tab 58;"2 MOS PRIOR";
Print #0; Tab 70;"SELL";
Print #0; Tab 78;"CUBE";
Print #0; tab 86;"EXT CUBE";
Print #0; tab 96;"LOC";
PRINT #0; TAB 105;"IN BIN QTY";
Print #0; tab 118;"PRIM";
Print #0; tab 125;"STK";
print #0;""
Print #0; Tab 44;"     USAGE";
Print #0; Tab 57;"     USAGE";
Print #0; Tab 71;"UM";
Print #0; tab 118;"LOC";
Print #0; tab 126;"UM";
print #0;""
Print #0;""
Return 
!
L_6000: Rem READ VENDOR
V$ = " ",V$
V4$ = B1[24] Using "######"
Search #4,2,1;V4$,R4,E 
If E Let V$ = "***** VENDOR NOT ON FILE *****" 
if E=0 Mat Read #4,R4,0;V$;
Return 
!
!!L_7000: Rem " ========= call input
!!Call "Input",J1,J$,J0$,J1$,J4$,J5$
!!Return 
!
 

L_8000: Rem "========================== SORT FILE BY LOT, WHSE, OR VENDOR
!!***** no sort *****
SVAL = K2$[1,6]
EVAL = K3$[1,6] \ If Not(EVAL) Let EVAL = 999999
!!Print @0,22;'CE';"Sorting...please wait";
DIR = 1
K1$ = " ",K1$
L_8070: 
Search #9,3,1;K1$,R9,E 
If E Goto L_8120
Search #9,5,1;K1$,R9,E 
If E Let e$ = "syserrorfile 780 sortfile mode (m)=5 keyno (k)=1 r=",R9," e=",e," keyval (k$)=",K1$ \error 10000
Goto L_8070
!
L_8120: 
Search #2,3,2;K1$,R1,E 
If E Goto L_8400
!!PCTR = PCTR + 1
!!If Not(Fra(PCTR / 500)) Print Using "#######";@25,22;PCTR;" Records Processed";
Mat Read #2,R1,0;P0$;
Mat Read #2,R1,66;P1;
if whse>0 and whse<100
	if p1[0]<>whse goto L_8120:
endif
RASL=0;whch=0;cwhse=P1[0]
call chkwhrasl(e$,intco,Ctlc,WHCh,CWhse,RASL[])
Mat Read #2,R1,70;P2;
Mat Read #2,R1,82;P3;
Mat Read #2,R1,114;P1$;
!if rasl and sort<>5 ! not if sort is by location!
  if P1$<SLoc$ goto L_8120
  if P1$>Eloc$ goto L_8120
!Endif
BADPROD=0
Gosub L_3000
IF BADPROD<>0 GOTO L_8120:
K9$ = " ",K9$
If SORT = 4 ! "vendor sort
  If B1[24] < SVAL Goto L_8120
  If B1[24] > EVAL Goto L_8120
  If RASL If EXCLNONE If P1$[1,4] = "NONE" Goto L_8120
  K9$[1,6] = B1[24] Using "######"
  If LOCSORT
    K9$[7,12] = K1$[15,20]
    K9$[13,26] = K1$[1,14]
    K9$[27,48] = K1$[21,42]
  Else 
    K9$[7] = K1$
  End If 
End If 
If SORT = 1 ! "lot sort
  If P0$[13,12 + Len(K2$)] < K2$ Goto L_8120
  If P0$[13,12 + Len(K3$)] > K3$ Goto L_8120
  K9$[1,12] = P0$[13,24]
  K9$[13] = K1$
End If 
If SORT = 3 ! "whse sort
  If P1[0] < SVAL Goto L_8120
  If P1[0] > EVAL Goto L_8120
  K9$[1,2] = P1[0] Using "##"
  K9$[3] = K1$
End If 
if custom_customer$="ACME"
	if SORT=5
		IF K2$<>""
			IF K1$[15,(14+LEN (K2$))]<K2$[1,LEN (K2$)] GOTO L_8120:! too low
		endif
		IF K1$[15,(14+LEN (K3$))]>K3$[1,LEN (K3$)] GOTO L_8120:! too high
		gosub get_PLOCATION:
		k9$[1,2]=P1[0] USING "##"!whse
		K9$[3,8]=P1$[1,6]!location
		k9$[9,14]=RTRIM$(ploc$[13,18])+BLANK$!products primary location
		k9$[15,26]=p0$[1,12]!product code
		k9$[27,48]=k1$[21,42]!lot & stock
	end if
endif
Search #9,4,1;K9$,R1,E 
IF E=1 GOTO l_8120: ! already there
If E<>0
	Let e$ = "syserrorfile 780 sortfile mode (m)=4 keyno (k)=1 r=",R1," e=",e," keyval (k$)=",K9$ \error 10000
endif
Goto L_8120
!
L_8400: 
K1$ = " ",K1$
Return 
!
L_9100: Rem END OF THIS RANGE
Gosub L_4500
Gosub L_4000
!!If J8 Print @0,23;"PRESS <CR> TO CONTINUE ";'CL'; \ Input ""J$
Goto OUTEND
!!Stop 
!
L_10000: Rem CONVERT
If Not(VALIDPROD) Goto L_10090
For X = 0 To 3
  CNVTU[0] = 0;CNVTU[1] = PFU1[UNITX];CNVTU[2] = 1;CNVTA = P3[X]
  If X = 2 Let CNVTU[2] = 2
  Gosub L_20000
  P3[X] = AMOUNT
Next X
CNVTU[0] = 0;CNVTU[1] = PFU1[UNITX];CNVTU[2] = 2;CNVTA = AVGCOST
Gosub L_20000 \ AVGCOST = AMOUNT
CNVTU[0] = 0;CNVTU[1] = PFU1[UNITX];CNVTU[2] = 1;CNVTA = ONPO
Gosub L_20000 \ ONPO = AMOUNT
L_10090: If PFU1[UNITX] > 0 Mat Read #5,PFU1[UNITX],10;SUNIT$;
If PFU1[UNITX] = -1 Let SUNIT$ = "CWT "
If PFU1[UNITX] = -3 Let SUNIT$ = "LB  "
Return 

!
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: Goto L_20120 !!If Spc(4) > 1280 Goto L_20120
Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 !!\ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !!\ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !!\ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
!
get_plocation: !
let k10$=" ",K10$
LET K10$[1,12]=P0$[1,12]
loc_loop: !
SEARCH #10,3,1;K10$,R10,E                          
LET PLOC$=" ",PLOC$                                  
IF E=2 GOTO END_GET_LOCATION:                        
IF E<>0 GOTO END_GET_LOCATION: ! GOSUB ERR_SEARCH:                               
if custom_customer$="ACME"
	IF k10$[1,12]<>p0$[1,12] GOTO END_GET_LOCATION: 
else
	IF k10$[1,12]<>A$[140,151] GOTO END_GET_LOCATION:    
endif
LET WHSENO=K10$[13,14]                               
IF WHSENO<> p1[0] GOTO loc_loop: 
MAT  READ #10,R10,18;PL1;                          
IF PL1[1]<>1 GOTO loc_loop: 
MAT  READ #10,R10,0;PLOC$;                         
                     
END_GET_LOCATION: REM              
RETURN

L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
!
OUTEND: Rem EXIT ROUTINE
! dx close
If j8 ! dx xml
	if MySQLQueueID and not(reportAborted)
		call FinishMySQLReport(e$,MySQL_ch,MySQLQueueID)
	else
		Call addtostr(e$,rstr$,esdel$) !end section
		Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
	end if
End If 
!
try call dxclose() else rem
End 
!
!!Print 'CS'
!!Chain "MX000C"
!!Stop 
!
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End 
Rem {end rtn.error.s}
