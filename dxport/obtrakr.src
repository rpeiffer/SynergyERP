! >>> Program obtrakr
!
! description Track Inv/CM accepted for OB10 customers
!
! loadsave -w -n 100,10 -o prog/dxport/obtrakr.dl4 src/obtrakr.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
External Lib "libgeneral.lib"
Declare External Sub suberr,mainerr,GetSession,AddToStr,SetOutput,CreateNetStatus
Declare Intrinsic Sub FindF,InpBuf,String
! Option Default Dialect IRIS1
Rem OBTRACK - Track INV/CM #'s for OB10 Customers
Rem call from the Accepts
Rem
If Err 0 Gosub ERR_TRAP
Enter CUSTNO,CUSTREC,REFNO,CUSTCHAN,e$,IntCo,rstr$,statchan
Rem {begin src/inc/dim.getchan.i}
Dim 1%,CHNL
Dim 3%,CHNLSCR,CHNLFREE
Rem {end dim.getchan.i}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Dim K1$[50],K2$[30],ANS$[20]
Dim FLE$[16],CMD$[64],A$[142],U2$[60]
Dim 1%,COID
Dim 3%,R2,R3
Dim buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],nextblockid$[8],Message$[600],WebStr$[600],blockid$[100]
COID = Intco ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
CHNL = 90 \ Gosub GETCHAN
OBC_CHAN = CHNL
FLE$ = "7/OBCUST" + Str$(COID)
Call FindF(FLE$,FOUND)
If Not(FOUND) ! "first time? - Build it
  CMD$ = "[1:256] ",FLE$
  Build #OBC_CHAN,CMD$
  KSIZE = 5 ! "10 Chars
  Search #OBC_CHAN,0,1;K1$,KSIZE,E \ If E Gosub ERR_SEARCH
  X3 = 1 \ Search #OBC_CHAN,0,0;K1$,X3,E \ If E Gosub ERR_SEARCH
  Close #OBC_CHAN
End If 
Open #OBC_CHAN,FLE$ ! "file holding valid Custs
CHNL = 90 \ Gosub GETCHAN
OBT_CHAN = CHNL
FLE$ = "7/OBTRACK" + Str$(COID)
Call FindF(FLE$,FOUND)
If Not(FOUND) ! "first time? - Build it
  CMD$ = "[1:256] ",FLE$
  Build #OBT_CHAN,CMD$
  KSIZE = 10 ! "20 Chars
  Search #OBT_CHAN,0,1;K1$,KSIZE,E \ If E Gosub ERR_SEARCH
  X3 = 1 \ Search #OBT_CHAN,0,0;K1$,X3,E \ If E Gosub ERR_SEARCH
  Close #OBT_CHAN
End If 
Open #OBT_CHAN,FLE$ ! "file holding new ref's
If CUSTCHAN <= 0
  CHNL = 90 \ Gosub GETCHAN
  CUST_CHAN = CHNL
  Read #1,88,1808;FLE$;
  Ropen #CUST_CHAN,FLE$ ! "customer File
Else 
  CUST_CHAN = CUSTCHAN
End If 
STARTHERE: Rem "no need for Screen
If CUSTNO = 0 And CUSTREC = 0 Goto OUTEND ! can't do anything
If REFNO = 0 Goto OUTEND ! another gotta have
If CUSTREC = 0
  K1$ = " ",K1$
  K1$ = CUSTNO Using "######"
  Search #CUST_CHAN,2,1;K1$,R2,E
  If E Goto OUTEND ! no go
Else 
  R2 = CUSTREC
End If 
Gosub READ_CUSTFLE
ANS$ = U2$[41,60] ! uda #3
ans$=UCase$(TRIM$(ans$)) ! Call "TRIM",ANS$ ! trim start/end space
! Call String(1,ANS$) ! just to be sure
If ANS$[1,3] <> "AAA" Goto OUTEND ! ALWAYS STARTS WITH AAA
If REFNO
  K2$ = " ",K2$
  K2$ = REFNO Using "##########"
  Search #OBT_CHAN,4,1;K2$,R,E
  If E > 1 Gosub ERR_SEARCH
End If 
K2$ = " ",K2$
K2$ = CUSTNO Using "######"
Search #OBC_CHAN,2,1;K2$,R,E
If E = 1 ! not there - addit
  Search #OBC_CHAN,4,1;K2$,R2,E
  If E Gosub ERR_SEARCH
End If 
Goto OUTEND
READ_CUSTFLE: Rem "Read customer data
Mat Read #CUST_CHAN,R2,0;A$;
Mat Read #CUST_CHAN,R2,426;U2$;
Return 
OUTEND: Rem "Done
If Err 0 Rem
Close #OBT_CHAN
Close #OBC_CHAN
If CUSTCHAN = 0 Close #CUST_CHAN
End 
Rem {begin src/inc/rtn.getchan.i}
GETCHAN: Rem search for open channel (counts down from supplied chnl #)
For SCR = CHNL To 1 Step -1
  CHNL = SCR
  Gosub CHNLFREE
  If CHNLFREE
    SCR = 1
  Else 
    CHNL = 0
  End If 
Next SCR
Return 
CHNLFREE: Rem check to see if a channel is being used
If Err 0 Let CHNLFREE = Spc(8)
CHNLFREE = 0
CHNLSCR = Chf(CHNL)
If Err 0 Gosub ERR_TRAP
If CHNLFREE And CHNLFREE <> 49 Gosub ERR_TRAP
END_CHNLFREE: Rem
Return 
Rem {end rtn.getchan.i}
ERR_SEARCH: Rem
! If Msg$<>"" let e$=msg$ \ Error 10000 ! sent reason
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
e$ = "RETURN STATUS",(E + (CTERR * .001))
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
Call programdump("tmp/seobtrakr!","")
goto err_msg ! Error 10000
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
if statchan
	print #statchan;message$
	Print #statchan;"Accept has ended with an error"
Else ! not open yet - send to user
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
Endif
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End ! the whole program