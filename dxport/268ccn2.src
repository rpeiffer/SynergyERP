! 268ccn2
!   description - cost change notifier (taken from 268ccn)
!	with changes for Jersey Paper 64777
! 1.0 mm/dd/yyyy change??
!
! loadsave -w -n 100,10 -o prog/dxport/268ccn2.dl4 src/268ccn2.src
!
Rem"op268pcn
Rem"Customer Price Change Notification (batched and sent by fax)
Rem"Author: Anna 12/2/98 Converted from mx268pcn for optio fax
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN  3, 2010  13:43:34
Rem /w2/papermaster/r2005//usr/acct/dave/work/custom/htberry.r9/op268pcn.src (univ2) [dave] {61221}
Rem  Copyright (c) 2010 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
External Lib "ubsfunc.dl4"
Declare External Function OpenFile,JDate$,Pdate$
External Lib "libprice.lib"
Declare External Sub SysPriceCalc
Declare Intrinsic Sub DateToJulian,FormatDate,InpBuf,JulianToDate,String,VerifyDate
Declare Intrinsic Sub programdump
! Option Default Dialect IRIS1

Com 1%,PFU1[20],CNVTU[2],UN[2]
Com 3%,PFU2[6],CNVTA,A[33],AMOUNT
Com ADDRESS1$[30],ADDRESS2$[30],CITY$[15],STATE$[2],ZIP$[10]
Com CONTACT$[30],FAXNO$[30],NAME$[30],COID$[1],COVER$[80]
Com FROM$[30],REMARK$[10000],FAX$[40],FAXDRV$[8]
Com CNAME$[30]
Com USR$[10],TIMER$[12],FXDIR$[80]
If Err 0 Gosub ERR_TRAP
! If Spc(13) = 11 Print @0,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Rem {begin dim.rtn.input}
Dim J$[70],J0$[18],J1$[70],J2$[20],J3$[40],J4$[60],J5$[80],J7$[80],J9$[70]
Dim X$[100],1%,J0,J2,J3,J4,J5,J7[2],J8,X1[9]
Dim 2%,J9[9],X2[9],4%,J1
Rem {end dim.rtn.input}
Rem {begin src/inc/dim.cust.i}
Dim A3$[22],BT$[20],U2$[60],A2$[30],A1$[142]
Dim 2%,A0[3],C1[12],REC,C3[1],LPPPCust
Dim 1%,S0[20],SUB_,SZN,C7[4],C0,C2[2],C8,C11[2],prcsrc
Dim 3%,C4[6],C10[5],CFIN[8],U1,C9,C5[5],C6[9],C12[1]
Rem {end dim.cust.i}
Rem {begin src/inc/dim.prod.i}
Dim A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Dim PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Dim 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Dim 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Dim 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Dim 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Dim 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Dim 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3]
Rem {end dim.prod.i}
Rem {begin src/inc/dim.lastpr.i}
Dim LP$[12],LP2$[84],LPMT$[2]
Dim 1%,LPC3[4],AI,LPEUN[2],LPWH,LPCPT,PPPUSERID
Dim 2%,LPDF,LPC1[2],LPR1[3],LPC5[3],LPPCDATE,LPCSDT,LPDEPT,PPPCID[1]
Dim 3%,LPC2[2],LPC4[3],LPR[4],LPUNF[6],PERM[1],LPLPERM,LPCURR[1]
Dim 3%,LPFPERM[1],LPUNIT[1]
Rem {end dim.lastpr.i}
Rem {begin src/inc/dim.prwh.i}
Dim W1$[32],WH3$[24],WHFLG$[10],WHMKUPTYP$[4],WCOMM$[4]
Dim 2%,W2[9],W7[14],WH7[3],WHLPOOL,WHFDT[1],WHMKUP[3]
Dim 1%,W0[3],W1[2],WH8[47],WHPARC[5],WHRPLN,WHLM[1],FCWGT
Dim 1%,RESTRICTED,WHBASE,WHPARC2[3]
Dim 3%,W3[24],W5[25],WH9[25],WHLV[2],WHMISC[6],WHMISC2[7]
Dim 3%,WHFUT[2],VLIST,WHREDI[1],WHLBS[1]
Rem {end dim.prwh.i}
Rem {begin src/inc/dim.custnotes.i}
Dim 1%,CNA$[100],CNA0$[68]
Dim 2%,CNODATE
Rem {end dim.custnotes.i}
Dim 1%,RESP$[10],MSGDESC$[150],LAST_DATE$[8],CURRENT_DATE$[8],DASH$[132]
Dim 1%,JULIAN_LAST_DATE$[8],JULIAN_CURRENT_DATE$[8],F$[16],P60$[50],P9$[50]
Dim 1%,KCUST$[50],KLP$[50],KSORT$[50],KPROD$[50],KINVH$[50],KCCODES$[50]
Dim 1%,KCMDTY$[50],SPACES$[132],KCUSTNOTES$[50],TITLE$[80],KPRWH$[50]
Dim 1%,WORK$[1023],P61$[256]
Dim 1%,NOLOWER,FIRSTFF,scrn,CostInc
Dim 1%,XPOS,YPOS,PT[37],FUTURE,CURRENT,TRUE,FALSE,PRICE_CHANGED,PRICE_MAY_CHANGE
Dim 1%,STATE,PRT_SELECTED,CH_LPT,CH_CNTRL
Dim 2%,CURRENT_DATE,LAST_DATE,JULIAN_LAST_DATE,JULIAN_CURRENT_DATE,EFF_DATE
Dim 2%,JULIAN_EFF_DATE,D5,DFT_DAYS
Dim 2%,BEGIN_EFFDATE,ENDING_EFFDATE,JULIAN_BEGIN_EFFDATE,JULIAN_ENDING_EFFDATE
Dim 3%,FLEPTR[20,1],SPECS[50],PRICE[1],FLEPTR2[20],COST1[1]
Dim PPU$[6],3%,PTYPE[1],Contr[1],RContr[1],DPRICE[1],DCOST1[1],CTYPE[1]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],msg$[100],Message$[400],WebStr$[600]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
! call dxopen() ! needed?
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
CH_LPT = 0 ! 62?
CH_CNTRL = CTLC
Mat Read #CH_CNTRL,60,50;P60$;
Mat Read #CH_CNTRL,19,50;P9$;
Mat Read #CH_CNTRL,61,0;P61$;
SSLSM = 0;ESLSM = 999
SCUST = 0;ECUST = 999999
DFT_DAYS = 365
TRUE = 1;FALSE = 0
DASH$ = "_",DASH$
FUTURE = 1;CURRENT = 0
WHSE_FOUND = FALSE
FIRSTFF = 0
SPACES$ = " ",SPACES$
If P9$[32,32] = "Y" Let WHSEPR = TRUE Else Let WHSEPR = FALSE
TIMER$ = "NOW"
Mat Read #1,3,172;D5;
!CURRENT_DATE$ = D5 Using "&&&&&&" ! ON demo/learn CAN BE TOO OLD!!!
current_date$=Tim(8) using "&&"+tim(9) using "&&"+Tim(10) using "&&"
CURRENT_DATE = CURRENT_DATE$
Call DateToJulian(1,CURRENT_DATE$,JULIAN_CURRENT_DATE$,E) \ If E JULIAN_CURRENT_DATE$=Str$(Tim(6))
JULIAN_CURRENT_DATE = JULIAN_CURRENT_DATE$
If WHSEPR
  WHSE = 1
Else 
  WHSE = 0
End If 
BEGIN_EFFDATE = CURRENT_DATE
JULIAN_BEGIN_EFFDATE = JULIAN_CURRENT_DATE
JULIAN_ENDING_EFFDATE = JULIAN_BEGIN_EFFDATE + 180
WORK$ = JULIAN_ENDING_EFFDATE Using "&&&&&"
Call JulianToDate(1,WORK$,WORK$,E) \ If E Gosub ERR_SEARCH
Call VerifyDate(WORK$,WORK$,E) \ If E Gosub ERR_SEARCH
ENDING_EFFDATE = WORK$
NOLOWER = 0; COSTINC=0
EFlg=0
!Window On 
MAIN: Rem"================
!Print 'CS';"OP268PCN"; Tab (25);"PRICE CHANGE NOTIFICATIONS"
!Print @0,5;'CL';"Did you run program   70  first? YES/<CR> ";
!Input Len 16384 + 3;"";RESP$
!Call String(1,RESP$)
!If RESP$[1,3] <> "YES" If RESP$ <> "" Goto MAIN
!If RESP$[1,3] <> "YES" Goto OUTEND
!Print @0,1;'CE';
! If Spc(13) = 11 Print @0,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!Print @0,3;"Price change notifications will be faxed for those products that have"
!Print @0,4;"been purchased in the last ";Str$(DFT_DAYS);" days and which will have a price change"
!Print @0,5;"in the near future."
!Print @0,7;" 1> Time to fax notifications: ";TIMER$
!If WHSEPR
!  Print @0,9;" 2> Warehouse: ";WHSE
!  WORK$ = BEGIN_EFFDATE Using "&&&&&&" \ Call FormatDate(WORK$,WORK$,E)
!  Print @0,11;" 3> Beginning Date: ";@19,11;WORK$
!  WORK$ = ENDING_EFFDATE Using "&&&&&&" \ Call FormatDate(WORK$,WORK$,E)
!  Print @0,13;" 4> Ending Date: ";@19,13;WORK$
!  Print @0,15;" 5> Print lower future price:  ";
!  If Not(NOLOWER) Print "Y" Else Print "N"
!  Print @26,16;'BR';"STARTING";'ER';@46,16;'BR';"ENDING";'ER';
!  Print @0,18;"6> SALESMAN CODE : ";
!  Print Using "###";@25,18;SSLSM;@45,18;ESLSM
!  Print @0,20;"7> CUSTOMER CODE : ";
!  Print Using "######";@25,20;SCUST;@45,20;ECUST
!  Print @0,21;"8> #DAYS AGO, TO INCLUDE PURCHASES";
!  Print Using "####";@45,21;DFT_DAYS
!Else 
!  WORK$ = BEGIN_EFFDATE Using "&&&&&&" \ Call FormatDate(WORK$,WORK$,E)
!  Print @0,9;" 2> Beginning Date: ";@19,9;WORK$
!  WORK$ = ENDING_EFFDATE Using "&&&&&&" \ Call FormatDate(WORK$,WORK$,E)
!  Print @0,11;" 3> Ending Date: ";@19,11;WORK$
!  Print @0,13;" 4> Print lower future price:  ";
!  If Not(NOLOWER) Print "Y" Else Print "N"
!  Print @30,14;'BR';"STARTING";'ER';@50,14;'BR';"ENDING";'ER';
!  Print @0,16;"5> SALESMAN CODE : ";
!  Print Using "###";@25,16;SSLSM;@45,16;ESLSM
!  Print @0,18;"6> CUSTOMER CODE : ";
!  Print Using "######";@25,18;SCUST;@45,18;ECUST
!  Print @0,20;"7> #DAYS AGO, TO INCLUDE PURCHASES";
!  Print Using "####";@45,20;DFT_DAYS
!End If 
PROMPT_ACTION: Rem
!Print @0,23;"ENTER: #:Field  F: Fax  P: Print  B: Both F & P  R: Report  E: Exit ";'CL';
!Input Len 16384 + 1;"";RESP$
!Call String(1,RESP$)
RESP$="R" ! ALWAYS A REPORT (sort by slsm)
! If Spc(13) = 11 Print @0,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTDIS.hsf\177\";
!If RESP$ = "1" Gosub EDT_TIME
If WHSEPR
  !If RESP$ = "2" Gosub EDT_WHSE
  EDT_WHSE: Rem" allow the user to specify the whse (each whse may have diff costs)
!J0$ = "3000021409"
!J5$ = "Enter the warehouse number that is affected by price changes"
	CALL DXGET("WHSE",tmp$)
	if rtrim$(tmp$)="" let tmp$=Str$(Whse) ! use 1
J1 = tmp$ ! WHSE
	if j1<1 or j1>99 or fra(j1) let j1=whse ! use default(1)
!Gosub ISINPUT
WHSE = J1
!Return 
  !If RESP$ = "3" Gosub EDT_BEGIN_EFFDATE
  !If RESP$ = "4" Gosub EDT_ENDING_EFFDATE
  !If RESP$ = "5" Gosub EDT_NOLOWER
  !If RESP$ = "6" Gosub EDT_SLSM
  !If RESP$ = "7" Gosub EDT_CUST
  !If RESP$ = "8" Gosub EDT_DFT_DAYS
!Else 
  !If RESP$ = "2" Gosub EDT_BEGIN_EFFDATE
  !If RESP$ = "3" Gosub EDT_ENDING_EFFDATE
  !If RESP$ = "4" Gosub EDT_NOLOWER
  !If RESP$ = "5" Gosub EDT_SLSM
  !If RESP$ = "6" Gosub EDT_CUST
  !If RESP$ = "7" Gosub EDT_DFT_DAYS
End If 
! REST ARE ALWAYS GOTTEN
EDT_BEGIN_EFFDATE: Rem"allow the user to specify the range of effective dates
!J0$ = "5000061909" \ If WHSEPR Let J0$[9,10] = "11"
!J5$ = "Enter the beginning effective date of pending cost changes"
call dxget("BEFDATE",tmp$) ! returns as MMDDYY
if rtrim$(tmp$)="" 
	let tmp$=Str$(BEGIN_EFFDATE)
Else ! convert to yymmdd
	tmp1$=tmp$[5,6],tmp$[1,2],tmp$[3,4]
	tmp$=tmp1$
Endif
J1 = tmp$ ! BEGIN_EFFDATE
!Gosub ISINPUT
If J1
	BEGIN_EFFDATE = J1
	WORK$ = BEGIN_EFFDATE Using "&&&&&&"
	Call DateToJulian(1,WORK$,WORK$,E)
	if not(e)
		JULIAN_BEGIN_EFFDATE = Val(WORK$)
		goto EDT_ENDING_EFFDATE
	end if
endif
! if we get here, we had an error
J7$ = "Invalid Begin date"
Gosub ISERRMSG
EFlg=Eflg+1 ! Goto EDT_BEGIN_EFFDATE


!If JULIAN_BEGIN_EFFDATE > JULIAN_ENDING_EFFDATE
!  J7$ = "Beginning date is greater than ending date; please adjust ending date"
!  Gosub ISERRMSG
!  EFlg=Eflg+1 !Goto EDT_ENDING_EFFDATE
!End If  ! CAN'T DO NOW - WAIT FOR END (IF REALLY OLD DATE IN D5!)
!Return 
EDT_ENDING_EFFDATE: Rem"allow the user to specify the range of effective dates
!J0$ = "5000061911" \ If WHSEPR Let J0$[9,10] = "13"
!J5$ = "Enter the ending effective date of pending cost changes"
call dxget("EEFDATE",tmp$) ! returns as MMDDYY
if rtrim$(tmp$)="" 
	let tmp$=Str$(ENDING_EFFDATE)
Else ! convert to yymmdd
	tmp1$=tmp$[5,6],tmp$[1,2],tmp$[3,4]
	tmp$=tmp1$
Endif
J1 = tmp$ ! ENDING_EFFDATE
!Gosub ISINPUT
j7$ = ""
IF J1
	ENDING_EFFDATE = J1
	WORK$ = ENDING_EFFDATE Using "&&&&&&"
	Call DateToJulian(1,WORK$,WORK$,E) 
	if not(e)
		JULIAN_ENDING_EFFDATE = Val(WORK$)
		If JULIAN_ENDING_EFFDATE < JULIAN_BEGIN_EFFDATE
			J7$ = "Ending date is greater than starting date; please adjust starting date"
		else
			goto EDT_NOLOWER
		End If 
	end if
end if
! if we get here, there was an error
if j7$ = "" let J7$ = "Invalid ending date"
Gosub ISERRMSG
EFlg=Eflg+1 !Goto EDT_ENDING_EFFDATE
!Return 
EDT_NOLOWER: Rem"==(ONLY AFFECTS PERM PRICING)======================
!J0$ = "6000013113" \ If WHSEPR Let J0$[9,10] = "15"
!J5$ = "Enter Y:do print lower price  N:do not print lower price "
call dxget("NOLOWER",tmp$)
J1 = 0 \ if rtrim$(tmp$)<>"" let j1=1
!Gosub ISINPUT
If J1 Let NOLOWER = 0 Else Let NOLOWER = 1
!Return 
EDT_SLSM: Rem
SSLSM_NUM: Rem
!Print @0,22;'CL';
!J5$ = "Please enter the Staring Salesman Code maximum 999"
!J0$ = "3 00032516" \ If WHSEPR Let J0$[9,10] = "18"
call dxget("SSLSM",tmp$)
if rtrim$(tmp$)="" Let tmp$=Str$(SSLSM)
J1 = tmp$ ! SSLSM
!Gosub ISINPUT
SSLSM = J1
ESLSM_NUM: Rem
!J5$ = "Please enter the Ending Salesman Code maximum 999"
!J0$ = "3 00034516" \ If WHSEPR Let J0$[9,10] = "18"
call dxget("ESLSM",tmp$)
if RTrim$(tmp$)="" let tmp$=Str$(ESLSM)
J1 = tmp$ ! ESLSM
!Gosub ISINPUT
ESLSM = J1
If ESLSM < SSLSM
  J7$="Ending salesperson must be Greater than or Equal to starting value!"
  Gosub ISERRMSG
  EFlg=Eflg+1 !Goto SSLSM_NUM
End If 
!Return 
EDT_DFT_DAYS: Rem
!Print @0,22;'CL';
!J5$ = "Please enter # days ago to include purchases"
!J0$ = "3 00044520" \ If WHSEPR Let J0$[9,10] = "21"
call dxget("NUMDAYS",tmp$)
if rtrim$(tmp$)="" let tmp$=Str$(DFT_DAYS)
J1 = DFT_DAYS
!Gosub ISINPUT
DFT_DAYS = J1
JULIAN_ENDING_PRTDATE = JULIAN_BEGIN_EFFDATE + DFT_DAYS
!Print @0,4;'CL';
!Print @0,4;"been purchased in the last ";Str$(DFT_DAYS);" days and which will have a price change"
!Return 
EDT_CUST: Rem
SCUST_NUM: Rem
!Print @0,22;'CL';
!J5$ = "Please enter the Staring Customer Code maximum 999999"
!J0$ = "3 00062518" \ If WHSEPR Let J0$[9,10] = "20"
call dxget("SCUST",tmp$)
if rtrim$(tmp$)="" let tmp$=Str$(SCUST)
J1 = tmp$ ! SCUST
! Gosub ISINPUT
SCUST = J1
ECUST_NUM: Rem
!J5$ = "Please enter the Ending Customer Code maximum 999999"
!J0$ = "3 00064518" \ If WHSEPR Let J0$[9,10] = "20"
call dxget("ECUST",tmp$)
if rtrim$(tmp$)="" let tmp$=Str$(ECUST)
J1 = tmp$ ! ECUST
!Gosub ISINPUT
ECUST = J1
If ECUST < SCUST
  j7$="Ending Customer must be Greater than or Equal to starting value!"
  Gosub ISERRMSG
  EFlg=Eflg+1 !Goto SCUST_NUM
End If 
!Return
! new prompt - type of price to check (0=all, 1=mtrx/10b, 2=special, 3=perm)
call dxget("PRCTYPE",tmp$)
Prctype=tmp$
! another new prompt - only print items where cost increased Y/N
call dxget("COSTINCO",tmp$)
costinc=0 \ if RTrim$(UCase$(tmp$))="Y" let costinc=1
if eflg goto Err_msg ! entry issues
! check printer selected
Scrn=0
try
	x3=chf(0)
Else
	scrn=1 ! yes as no chan 0 open
End try
if scrn ! xml/browser
	!<section>
  tmp$ = bsdel$,"ccn2rpt",fdel$,rdel$
  call addtostr(e$,rstr$,tmp$)
Else ! printed
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
Endif
!If RESP$ = "E" Goto OUTEND
!If RESP$ = "F"
!  Gosub NOTIFY_BY_FAX
!  Goto OUTEND
!End If 
!If RESP$ = "P"
!  Gosub NOTIFY_BY_PRINT
!  If Not(PRT_SELECTED) Goto PROMPT_ACTION Else Goto OUTEND
!End If 
!If RESP$ = "B"
!  Gosub NOTIFY_BY_BOTH_METHODS
!  If Not(PRT_SELECTED) Goto PROMPT_ACTION Else Goto OUTEND
!End If 
!If RESP$ = "R" ! ALWAYS REPORT BY SALESMAN!!
  REPORT = 1
  Gosub NOTIFY_BY_PRINT
!  If Not(PRT_SELECTED) Goto PROMPT_ACTION Else Goto OUTEND
!End If 
!If Spc(13) = 11 Print @0,24;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Goto OUTEND ! PROMPT_ACTION
EDT_TIME: Rem"===== allow the user to specify the time to fax notifications
!XPOS = 30;YPOS = 7
!Call "op268time",XPOS,YPOS,TIMER$
Return 


NOTIFY_BY_PRINT: Rem"==== lets generate all those price change notifications
NOTIFY_BY_BOTH_METHODS: Rem"== ditto
!TITLE$ = "268_PRICE_CHANGE_NOTIFICATIONS"
!PROGSEL = 268 + 2000
!Call "mxprtsel",CH_LPT,PROGSEL,TITLE$,PRT_SELECTED
!If Not(PRT_SELECTED) Return 
!NOTIFY_BY_FAX: Rem"====== same as other two methods, but don't prompt for printer
!Print @0,7;'CE';"Notification Method: ";
!If RESP$ = "R" Print "Summary Report by Salesman"
!If RESP$ = "P" Or RESP$ = "B" Print "Print";
!If RESP$ = "B" Print " and ";
!If RESP$ = "F" Or RESP$ = "B"
!  If TIMER$ = "NOW" Print "Fax"; Else Print "Fax (faxing to begin at ";TIMER$;")";
!End If 
!Print @0,8;"Effective Dates: ";
!WORK$ = BEGIN_EFFDATE Using "&&&&&&" \ Call FormatDate(WORK$,WORK$,E)
!Print WORK$;
!WORK$ = ENDING_EFFDATE Using "&&&&&&" \ Call FormatDate(WORK$,WORK$,E)
!Print " - ";WORK$
!If WHSEPR And WHSE
!  Print @0,9;"Warehouse: ";WHSE
!  Print @0,10;DASH$[1,79];
!Else 
!  Print @0,9;DASH$[1,79];
!End If 
!Print @0,11;'BB';"Processing...";'EB';
NOTIFY = TRUE
CH_CUST = 5 \ mat read #ch_cntrl,88,1808;f$; \ ROpen #CH_CUST,f$
CH_PROD = 50 \ Mat Read #CH_CNTRL,88,1792;F$; \ Ropen #CH_PROD,F$
CH_PRWH = 51 \ Mat Read #CH_CNTRL,88,1744;F$; \ Ropen #CH_PRWH,F$
CH_CMDTY = 52 \ Mat Read #CH_CNTRL,88,2288;F$; \ Ropen #CH_CMDTY,F$
CH_LASTPR = 53 \ Mat Read #CH_CNTRL,88,1376;F$; \ Ropen #CH_LASTPR,F$
CH_SPECPRICE = 54 \ Mat Read #CH_CNTRL,88,1936;F$; \ Ropen #CH_SPECPRICE,F$
CH_CONTRACTH = 55 \ Mat Read #CH_CNTRL,88,2880;F$; \ Ropen #CH_CONTRACTH,F$
CH_CCODES = 56 \ Mat Read #CH_CNTRL,88,1728;F$; \ Ropen #CH_CCODES,F$
CH_BRKTBL = 57 \ Mat Read #CH_CNTRL,88,1952;F$; \ Ropen #CH_BRKTBL,F$
CH_PRCTYPE = 58 \ Mat Read #CH_CNTRL,88,752;F$; \ Ropen #CH_PRCTYPE,F$
CH_SORT = 9 ! always opened in dxblockx on chan 9
CH_VEND = 60 \ Mat Read #CH_CNTRL,88,2400;F$; \ Ropen #CH_VEND,F$
CH_CUSTNOTES = 61 \ Mat Read #CH_CNTRL,88,720;F$; \ Ropen #CH_CUSTNOTES,F$
CH_SLSM = 64 \ Mat Read #CH_CNTRL,88,1824;F$; \ Ropen #CH_SLSM,F$
Unlock #CH_CNTRL
If Err 0 Gosub ERR_TRAP
!If REPORT ! "send a -1 to build secondary sort
  FLEPTR2[0] = CH_CNTRL
  FLEPTR2[1] = CH_PROD
  FLEPTR2[2] = CH_PRWH
  FLEPTR2[3] = CH_CMDTY
  FLEPTR2[4] = CH_LASTPR
  FLEPTR2[5] = CH_SPECPRICE
  FLEPTR2[6] = CH_CONTRACTH
  FLEPTR2[7] = CH_CCODES
  FLEPTR2[8] = CH_PRCTYPE
  FLEPTR2[9] = CH_SORT
  FLEPTR2[10] = CH_CUST
  FLEPTR2[11] = CH_VEND
  FLEPTR2[12] = CH_CUSTNOTES
  FLEPTR2[13] = CH_SLSM
  REC_CUST = -1
  Call "SERPCCN2RPT.DL4",BEGIN_EFFDATE,ENDING_EFFDATE,FLEPTR2[],REC_CUST,CH_LPT,rstr$,scrn
!End If 
KCUST$ = " "
If SCUST Let KCUST$ = SCUST - 1 Using "######"
LOOP_CUSTOMER: Search #CH_CUST,3,1;KCUST$,REC_CUST,E \ If E > 2 Gosub ERR_SEARCH
If Not(E)
  Mat Read #CH_CUST,REC_CUST,0;A1$
  Mat Read #CH_CUST,REC_CUST,142;C1
  Mat Read #CH_CUST,REC_CUST,194;C2
  Mat Read #CH_CUST,REC_CUST,200;C3
  Mat Read #CH_CUST,REC_CUST,208;C0
  Mat Read #CH_CUST,REC_CUST,210;C4
  Mat Read #CH_CUST,REC_CUST,252;C5
  Mat Read #CH_CUST,REC_CUST,288;C6
  Mat Read #CH_CUST,REC_CUST,348;A2$
  Mat Read #CH_CUST,REC_CUST,378;C7
  Mat Read #CH_CUST,REC_CUST,388;A3$
  Mat Read #CH_CUST,REC_CUST,410;C8
  Mat Read #CH_CUST,REC_CUST,412;C9
  Mat Read #CH_CUST,REC_CUST,418;SUB_
  Mat Read #CH_CUST,REC_CUST,420;U1
  Mat Read #CH_CUST,REC_CUST,426;U2$
  Mat Read #CH_CUST,REC_CUST,486;A0
  Mat Read #CH_CUST,REC_CUST,502;S0
  Mat Read #CH_CUST,REC_CUST,544;CFIN
  Mat Read #CH_CUST,REC_CUST,598;SZN
  Mat Read #CH_CUST,REC_CUST,600;BT$
  Mat Read #CH_CUST,REC_CUST,620;REC
  Mat Read #CH_CUST,REC_CUST,624;C10
  Mat Read #CH_CUST,REC_CUST,660;C11
  Mat Read #CH_CUST,REC_CUST,668;C12
  mat read #ch_cust,Rec_Cust,724;lpppcust;
  ! mat read #ch_cust,Rec_cust,728;PPu$
  Unlock #ch_cust
  If C1[1] > ECUST Goto END_CUSTLOOP
  If C1[2] < SSLSM Goto LOOP_CUSTOMER
  If C1[2] > ESLSM Goto LOOP_CUSTOMER
  ! If A0[2] = 3 !"this customer wants to be notified by fax
    !Gosub GET_FAX_NUMBER \ If RESP$ = "F" And Not(FOUND) Goto LOOP_CUSTOMER
    !Print @0,13;"Checking prices for customer #";KCUST$;'CL';
    If NOTIFY ! 1st time in
      Gosub BLD_SORT_FILE
      NOTIFY = FALSE
    End If 
    DFT_COST = 0
    REC_PRCTYPE = C1[7]
    If REC_PRCTYPE <= 0 Or REC_PRCTYPE > 999 Let REC_PRCTYPE = 1 ! task#63688
    Mat Read #CH_PRCTYPE,REC_PRCTYPE,28;PT;
    DFT_COST = PT[0]
    If Not(DFT_COST) Let DFT_COST = P60$[29,29]
    KLP$ = KCUST$
LOOP_LASTPRICE: Search #CH_LASTPR,3,1;KLP$,REC_LASTPR,E
    If E > 2 Gosub ERR_SEARCH
    If Not(E) And KLP$[1,6] = KCUST$[1,6]
      Rem {begin src/inc/read.lastpr.i}
      Mat Read #CH_LASTPR,REC_LASTPR,0;LP$
      Read #CH_LASTPR,REC_LASTPR,12;LPDF
      Mat Read #CH_LASTPR,REC_LASTPR,16;LPC1
      Mat Read #CH_LASTPR,REC_LASTPR,28;LPC2
      Mat Read #CH_LASTPR,REC_LASTPR,46;LPC3
      Mat Read #CH_LASTPR,REC_LASTPR,56;LP2$
      Mat Read #CH_LASTPR,REC_LASTPR,140;LPC4
      Mat Read #CH_LASTPR,REC_LASTPR,164;LPMT$
      Read #CH_LASTPR,REC_LASTPR,166;AI
      Mat Read #CH_LASTPR,REC_LASTPR,168;LPR
      Mat Read #CH_LASTPR,REC_LASTPR,198;LPR1
      Mat Read #CH_LASTPR,REC_LASTPR,214;LPEUN
      Mat Read #CH_LASTPR,REC_LASTPR,220;LPUNF
      Mat Read #CH_LASTPR,REC_LASTPR,262;PERM
      Read #CH_LASTPR,REC_LASTPR,274;LPWH
      Mat Read #CH_LASTPR,REC_LASTPR,276;LPC5
      Read #CH_LASTPR,REC_LASTPR,292;LPPCDATE
      Read #CH_LASTPR,REC_LASTPR,296;LPLPERM
      Mat Read #CH_LASTPR,REC_LASTPR,302;LPCURR
      Read #CH_LASTPR,REC_LASTPR,314;LPCPT
      Read #CH_LASTPR,REC_LASTPR,316;LPCSDT
      Read #CH_LASTPR,REC_LASTPR,320;LPDEPT
      Mat Read #CH_LASTPR,REC_LASTPR,324;LPFPERM
      Mat Read #CH_LASTPR,REC_LASTPR,336;PPPUSERID
      Mat Read #CH_LASTPR,REC_LASTPR,340;LPUNIT
      Mat Read #CH_LASTPR,REC_LASTPR,352;PPPCID
      Rem {end read.lastpr.i}
      Unlock #CH_LASTPR
      LAST_DATE = LPC1[2]
      LAST_DATE$ = LAST_DATE Using "&&&&&&"
      Call DateToJulian(1,LAST_DATE$,JULIAN_LAST_DATE$,E) \ If E Goto LOOP_LASTPRICE
      JULIAN_LAST_DATE = JULIAN_LAST_DATE$
      If (JULIAN_CURRENT_DATE - JULIAN_LAST_DATE) <= DFT_DAYS !"within the (WAS) 365 day purchase limit
        KPROD$ = LP$
        Search #CH_PROD,2,1;KPROD$,REC_PROD,E
        If E > 2 Gosub ERR_SEARCH
        If E Goto LOOP_LASTPRICE ! no nonstks 
        Rem {begin src/inc/read.prod.i}
        Mat Read #CH_PROD,REC_PROD,0;A$
        Mat Read #CH_PROD,REC_PROD,156;B
        Mat Read #CH_PROD,REC_PROD,256;A
        Mat Read #CH_PROD,REC_PROD,460;A1
        Mat Read #CH_PROD,REC_PROD,508;A2
        Mat Read #CH_PROD,REC_PROD,512;PFU1
        Mat Read #CH_PROD,REC_PROD,554;PFU2
        Mat Read #CH_PROD,REC_PROD,596;PRPARC
        Mat Read #CH_PROD,REC_PROD,620;LM
        Mat Read #CH_PROD,REC_PROD,624;PR_PO
        Mat Read #CH_PROD,REC_PROD,628;AGEDAY
        Read #CH_PROD,REC_PROD,630;LLC
        Mat Read #CH_PROD,REC_PROD,632;PSN$
        Mat Read #CH_PROD,REC_PROD,652;PSN
        Mat Read #CH_PROD,REC_PROD,660;U2
        Mat Read #CH_PROD,REC_PROD,664;LBSORD
        Mat Read #CH_PROD,REC_PROD,670;U4
        Read #CH_PROD,REC_PROD,678;U3
        Mat Read #CH_PROD,REC_PROD,684;U3$
        Mat Read #CH_PROD,REC_PROD,744;HZ$
        Mat Read #CH_PROD,REC_PROD,834;A3
        Mat Read #CH_PROD,REC_PROD,846;PFTB
        Read #CH_PROD,REC_PROD,854;UPCT
        Mat Read #CH_PROD,REC_PROD,856;C1$
        Mat Read #CH_PROD,REC_PROD,894;PR_C4
        Read #CH_PROD,REC_PROD,938;PF_LOAD2
        Mat Read #CH_PROD,REC_PROD,944;PR_A2$
        Mat Read #CH_PROD,REC_PROD,974;PFCO
        Mat Read #CH_PROD,REC_PROD,990;PLV
        Mat Read #CH_PROD,REC_PROD,1002;PLC
        Mat Read #CH_PROD,REC_PROD,1018;PFN
        Mat Read #CH_PROD,REC_PROD,1030;STK
        Mat Read #CH_PROD,REC_PROD,1048;FDT
        Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
        Mat Read #CH_PROD,REC_PROD,1066;PRBASE
        Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
        Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
        Mat Read #CH_PROD,REC_PROD,1088;FUT
        Mat Read #CH_PROD,REC_PROD,1100;PRPARC2
        Mat Read #CH_PROD,REC_PROD,1108;PRREDI
        Mat Read #CH_PROD,REC_PROD,1120;PIC$
        Mat Read #CH_PROD,REC_PROD,1270;PRD0
        Mat Read #CH_PROD,REC_PROD,1282;PRIML$
        Mat Read #CH_PROD,REC_PROD,1294;PRD1
        Mat Read #CH_PROD,REC_PROD,1304;PRD2
        Rem {end read.prod.i}
        Unlock #CH_PROD
        If WHSEPR
          If WHSE = 0 Let WHSE = 1
          KPRWH$ = " ",KPRWH$
          KPRWH$[1,12] = A$[140,151]
          KPRWH$[13,14] = WHSE Using "##"
          Search #CH_PRWH,2,1;KPRWH$,REC_PRWH,E
          If E > 2 Gosub ERR_SEARCH
          If Not(E)
            Rem {begin src/inc/read.prwh.i}
            Mat Read #CH_PRWH,REC_PRWH,0;W1$
            Mat Read #CH_PRWH,REC_PRWH,32;W1
            Mat Read #CH_PRWH,REC_PRWH,38;W2
            Mat Read #CH_PRWH,REC_PRWH,78;W3
            Mat Read #CH_PRWH,REC_PRWH,228;W5
            Mat Read #CH_PRWH,REC_PRWH,384;WHPARC
            Read #CH_PRWH,REC_PRWH,396;WHLPOOL
            Mat Read #CH_PRWH,REC_PRWH,400;WCOMM$
            Read #CH_PRWH,REC_PRWH,404;FCWGT
            Mat Read #CH_PRWH,REC_PRWH,420;W0
            Mat Read #CH_PRWH,REC_PRWH,428;WH7
            Mat Read #CH_PRWH,REC_PRWH,444;WH8
            Mat Read #CH_PRWH,REC_PRWH,540;WH9
            Mat Read #CH_PRWH,REC_PRWH,696;W7
            Mat Read #CH_PRWH,REC_PRWH,756;WH3$
            Mat Read #CH_PRWH,REC_PRWH,780;WHLV
            Read #CH_PRWH,REC_PRWH,798;WHRPLN
            Mat Read #CH_PRWH,REC_PRWH,800;WHMISC
            Mat Read #CH_PRWH,REC_PRWH,842;WHLM
            Mat Read #CH_PRWH,REC_PRWH,846;WHMISC2
            Read #CH_PRWH,REC_PRWH,894;RESTRICTED
            Mat Read #CH_PRWH,REC_PRWH,896;WHFUT
            Mat Read #CH_PRWH,REC_PRWH,914;WHFDT
            Read #CH_PRWH,REC_PRWH,922;VLIST
            Mat Read #CH_PRWH,REC_PRWH,928;WHFLG$
            Read #CH_PRWH,REC_PRWH,938;WHBASE
            Mat Read #CH_PRWH,REC_PRWH,940;WHMKUP
            Mat Read #CH_PRWH,REC_PRWH,956;WHMKUPTYP$
            Mat Read #CH_PRWH,REC_PRWH,960;WHPARC2
            Mat Read #CH_PRWH,REC_PRWH,968;WHREDI
            Mat Read #CH_PRWH,REC_PRWH,980;WHLBS
            Rem {end read.prwh.i}
            Unlock #CH_PRWH
            WHSE_FOUND = TRUE
          Else 
            WHSE_FOUND = FALSE
          End If 
        End If 
        Gosub DID_PRICE_CHANGE
        If PRICE_CHANGED
          NOTIFY = TRUE
          KSORT$ = KLP$[11,40]+KLP$[1,10] ! KLP$[31,36] + KLP$[11,30]
          E = 2 \ Search #CH_SORT,1,0;KSORT$,REC_SORT,E
          If E Gosub ERR_SEARCH
          Mat Write #CH_SORT,REC_SORT,0;LPC3
          Mat Write #CH_SORT,REC_SORT,10;PRICE
          Mat Write #CH_SORT,REC_SORT,22;EFF_DATE;
          Mat Write #CH_SORT,REC_SORT,26;COST1;
		  mat write #ch_sort,rec_sort,38;Contr;
		  mat write #ch_sort,rec_sort,50;RContr;
		  mat write #ch_sort,Rec_sort,62;ptype; ! price type from call price
		  MAT WRITE #CH_SORT,REC_SORT,74;CTYPE; ! cost type from price call
          Search #CH_SORT,4,1;KSORT$,REC_SORT,E
          If E > 2 Gosub ERR_SEARCH
        End If !"price has changed
      End If !"within 120 purchase date (now 365)(now dft_Days)
      Goto LOOP_LASTPRICE
    End If !"exhausted all products purchased by this customer.
    If NOTIFY Gosub NOTIFY_CUSTOMER
  ! End If !"customer wants to be notified by fax
  Goto LOOP_CUSTOMER
END_CUSTLOOP: Rem
End If !"processing of customer
!If REPORT ! "now print the report
  FLEPTR2[0] = CH_CNTRL
  FLEPTR2[1] = CH_PROD
  FLEPTR2[2] = CH_PRWH
  FLEPTR2[3] = CH_CMDTY
  FLEPTR2[4] = CH_LASTPR
  FLEPTR2[5] = CH_SPECPRICE
  FLEPTR2[6] = CH_CONTRACTH
  FLEPTR2[7] = CH_CCODES
  FLEPTR2[8] = CH_PRCTYPE
  FLEPTR2[9] = CH_SORT
  FLEPTR2[10] = CH_CUST
  FLEPTR2[11] = CH_VEND
  FLEPTR2[12] = CH_CUSTNOTES
  FLEPTR2[13] = CH_SLSM
  REC_CUST = -99 ! print it flag
  Call "SERPCCN2RPT.DL4",BEGIN_EFFDATE,ENDING_EFFDATE,FLEPTR2[],REC_CUST,CH_LPT,rstr$,scrn
!End If 
!Print @0,11;'CE'
!If RESP$ = "F" !"fax notifications
!  Print @0,23;TOTAL_NOTIFICATIONS;"notification";
!  If TOTAL_NOTIFICATIONS <> 1 Print "s";
!  Print " will be faxed. ";
!End If 
!If RESP$ = "P" !"print notifications
!  Print @0,23;TOTAL_NOTIFICATIONS;"notification";
!  If TOTAL_NOTIFICATIONS <> 1 Print "s have"; Else Print " has";
!  Print " been printed. ";
!End If 
!If RESP$ = "B" !"fax and print notifications
!  Print @0,23;TOTAL_NOTIFICATIONS;"notification";
!  If TOTAL_NOTIFICATIONS <> 1 Print "s have"; Else Print " has";
!  Print " been printed & faxed. ";
!End If 
!If RESP$ = "R" ! "report print
!  Print @0,23;TOTAL_NOTIFICATIONS;"notification";
!  If TOTAL_NOTIFICATIONS <> 1 Print "s have"; Else Print " has";
!  Print " been printed on report.";
!End If 
!Print " Press <CR> to exit ";
!Input Len 1;"";RESP$
Return 
DID_PRICE_CHANGE: Rem"============ determine if the price changed
PRICE_CHANGED = FALSE
PRICE_MAY_CHANGE = FALSE
JULIAN_EFF_DATE = 0
If PLC[0] And PLC[1] !"is there a pending last cost change?
  WORK$ = PLC[1] Using "&&&&&&"
  Gosub CHECK_DATE
End If 
If PFCO[0] And PFCO[1] !"is there a pending base cost change?
  WORK$ = PFCO[1] Using "&&&&&&"
  Gosub CHECK_DATE
End If 
If FUT[1] And FDT[0]
  WORK$ = FDT[0] Using "&&&&&&"
  Gosub CHECK_DATE
End If 
If FUT[1] And FDT[1]
  WORK$ = FDT[1] Using "&&&&&&"
  Gosub CHECK_DATE
End If 
If LPFPERM[0] And LPFPERM[1] ! "future pending
  WORK$ = LPFPERM[1] Using "&&&&&&"
  Gosub CHECK_DATE
End If 
If WHSEPR And WHSE_FOUND !"check for warehouse specific cost changes
  If W7[7] And W7[13] !"is there an pending last cost change?
    WORK$ = W7[13] Using "&&&&&&"
    Gosub CHECK_DATE
  End If 
  If W7[2] And W7[3] !"is there an pending base cost change?
    WORK$ = W7[3] Using "&&&&&&"
    Gosub CHECK_DATE
  End If 
  If WHFUT[1] And WHFDT[0]
    WORK$ = WHFDT[0] Using "&&&&&&"
    Gosub CHECK_DATE
  End If 
  If WHFUT[1] And WHFDT[1]
    WORK$ = WHFDT[1] Using "&&&&&&"
    Gosub CHECK_DATE
  End If 
End If !"end of warehouse specific pending cost changes
!! we want call price to determine price/cost change so ALL PASS THRU
! If Not(PRICE_MAY_CHANGE) Return 
If not(price_may_change) ! still need eff_date!!
	Julian_eff_date=JULIAN_ENDING_EFFDATE ! set to end date
Endif
WORK$ = JULIAN_EFF_DATE Using "&&&&&"
Call JulianToDate(1,WORK$,WORK$,E) \ If E Gosub ERR_SEARCH
Call VerifyDate(WORK$,WORK$,E) \ If E Gosub ERR_SEARCH
EFF_DATE = Val(WORK$)
KCMDTY$ = A$[152,155]
Search #CH_CMDTY,2,1;KCMDTY$,REC_CMDTY,E \ If E Gosub ERR_SEARCH
For STATE = CURRENT To FUTURE
  PCust=lpppcust
  if A1$[138,138]="Y" let PCust=0
  If PCust=C1[1] let PCust=0
  if PCust<1 or PCust>999999 or Fra(PCust) Let PCust=0
  IF P61$[100,100]<>"Y" let PCust=0
  let FLEPTR[0,1]=PCust ! price master?
  FLEPTR[1,0] = CH_PROD;FLEPTR[1,1] = REC_PROD
  FLEPTR[2,0] = CH_PRWH;FLEPTR[2,1] = 0
  If WHSE_FOUND Let FLEPTR[2,1] = REC_PRWH
  FLEPTR[3,0] = CH_CMDTY;FLEPTR[3,1] = REC_CMDTY
  FLEPTR[4,0] = CH_LASTPR;FLEPTR[4,1] = REC_LASTPR
  FLEPTR[5,0] = CH_SPECPRICE;FLEPTR[5,1] = 0
  FLEPTR[6,0] = CH_CONTRACTH;FLEPTR[6,1] = 0
  FLEPTR[7,0] = CH_CCODES;FLEPTR[7,1] = 0
  FLEPTR[8,0] = CH_BRKTBL;FLEPTR[8,1] = 0
  SPECS[0] = 0
  SPECS[1] = LPC2[0]
  SPECS[2] = LPR1[0] * SPECS[1] / LPUNF[5]
  SPECS[3] = LPC1[0]
  SPECS[4] = WHSE
  If STATE = CURRENT
    SPECS[5] = CURRENT_DATE
  Else 
    SPECS[5] = - ENDING_EFFDATE ! EFF_DATE
  End If 
  SPECS[6] = LPDEPT
  SPECS[7] = REC_PRCTYPE
  SPECS[8] = 1
  SPECS[9] = DFT_COST
  SPECS[10] = 0
  SPECS[11] = 0
  If STATE = CURRENT
    SPECS[12] = 0
  Else 
    SPECS[12] = NOLOWER
  End If 
  SPECS[13] = LPC3[2]
  SPECS[14] = LPC3[3]
  SPECS[15] = LPC3[4]
  SPECS[16] = 0
  SPECS[17] = 0
  SPECS[18] = 0
  SPECS[19] = 0
  SPECS[20] = 0
  SPECS[21] = 0
  !Call "price",FLEPTR[],SPECS[],MSGDESC$
  call SysPriceCalc(e$,FLEPTR[],SPECS[],MSGDESC$)
  If SPECS[0] Return 
  PRICE[STATE] = SPECS[23]
  COST1[STATE] = SPECS[17]
  PTYPE[STATE] = SPECS[25] ! pricing type
  CTYPE[STATE] = SPECS[26] ! cost type
  CONTR[STATE] = SPECS[27] ! contract number
  RCONTR[STATE] = SPECS[24] ! rebate contract #
  If STATE = 0 And LPEUN[2] = -7 ! LPC3[0] = -7 !if current and it's a permanent price
  ! is this only fixed permprice or any manual permprice?
	! this sets the cost to perm cost so will appear on report if different from future!
    If PPU$[1] <> "P"
      If PERM[1] Let COST1[STATE] = PERM[1]
    End If 
  End If ! Burke 191642 - (does not read ppu$)?
  LET X1=PTYPE[STATE]
  IF X1=2 OR X1=3 OR X1=4 OR x1=6 or X1=7 or x1=8 or x1=11 or x1=12 or x1=13
	IF CONTR[STATE]=0 LET CONTR[STATE]=0-X1 ! IT'S SPECIAL, NOT A CONTRACT
  End if
  if X1>82 and X1<118
		let prcsrc=X1-100
		IF PRC=2 OR PRC=3 OR PRC=4 OR PRC=6 or PRC=7 or PRC=8 or PRC=11 or PRC=12 or PRC=13
			IF CONTR[STATE]=0 LET CONTR[STATE]=0-PRC ! IT'S SPECIAL, NOT A CONTRACT
		End if
   endif
  ! need to check display cost/prices (not base)
  CNVTA = PRICE[STATE]
	CNVTU[0] = 0
	CNVTU[1] = LPC3[3]
	CNVTU[2] = 2
	Gosub CONVERT
	DPRICE[STATE] = AMOUNT
	CNVTA = COST1[STATE]
	CNVTU[0] = 0
	CNVTU[1] = LPC3[3]
	CNVTU[2] = 2
	Gosub CONVERT
	DCOST1[STATE] = AMOUNT
Next STATE
If DPRICE[CURRENT] <> DPRICE[FUTURE] AND PRICE_MAY_CHANGE = TRUE Let PRICE_CHANGED = TRUE ! per 241721 ** Only show products with a cost change ** 
Rem next line, if report only, cost change=margin change so print it
If DCOST1[CURRENT] <> DCOST1[FUTURE] Let PRICE_CHANGED = TRUE
if costinc ! only want where cost increased
	if dcost1[future]<=Dcost1[current] let price_changed=false ! did not increase cost
Endif
! ADD - CHECK IF WANTED PRICE TYPE changed
IF PRCTYPE=1 ! PRODUCT PRICED
	IF LPEUN[2]=-7 Let PRICE_CHANGED = FALSE ! PERM
	let x1=ptype[0] ! Curr price type from call price
	if x1=2 or x1=3 or x1=4 or x1=6 or X1=7 or x1=8 or x1=11 or x1=12 or x1=13 Let PRICE_CHANGED = FALSE
	if X1>82 and X1<118
		let X1=X1-100
		if x1=2 or x1=3 or x1=4 or x1=6 or X1=7 or x1=8 or x1=11 or x1=12 or x1=13 Let PRICE_CHANGED = FALSE
	ENDIF
Endif
if PRCTYPE=2 ! SPECIAL/CONTRACT ONLY
	IF LPEUN[2]=-7 Let PRICE_CHANGED = FALSE ! PERM
	let x1=ptype[0] ! curr price type from call price
	IF X1<2 OR X1=5 OR X1=9 OR x1=10 or x1=14 Let PRICE_CHANGED = FALSE
	if X1>82 and X1<118
		let X1=X1-100
		IF X1<2 OR X1=5 OR X1=9 OR x1=10 or x1=14 Let PRICE_CHANGED = FALSE
	ENDIF
Endif
if prctype=3 ! PERM ONLY
	if LPEUN[2]<>-7 Let PRICE_CHANGED = FALSE ! NOT PERM
Endif
iF Ptype[current]=14 and ptype[future]=14 ! man gtm - works differently
	if DPRICE[CURRENT]=DPRICE[FUTURE] LET PRICE_CHANGED=FALSE ! same price - diff cost?
Endif ! cost may have changed above (PPU$) - but price still the same
iF Ptype[current]=114 and ptype[future]=114 ! man gtm - works differently from last price
	if DPRICE[CURRENT]=DPRICE[FUTURE] LET PRICE_CHANGED=FALSE ! same price - diff cost?
Endif ! cost may have changed above (PPU$) - but price still the same
Return 
CHECK_DATE: Rem
Call DateToJulian(1,WORK$,WORK$,E)
If Not(E)
  If Val(WORK$) >= JULIAN_BEGIN_EFFDATE And Val(WORK$) <= JULIAN_ENDING_EFFDATE
    If JULIAN_EFF_DATE < Val(WORK$) Let JULIAN_EFF_DATE = Val(WORK$)
    PRICE_MAY_CHANGE = TRUE
  End If 
End If 
Return 
NOTIFY_CUSTOMER: Rem"notify this particular customer about pricing changes
!Print @0,15;"Generating price change notification...";'CL'
!If RESP$ = "F" Or RESP$ = "B" !"notify by fax or both methods -- display fx messages
!  For I = 19 To 22 \ Print SPACES$[1,50] \ Next I
!  Print @0,17;"Messages"
!  Print @0,18;"--------"
!End If 
FLEPTR2[0] = CH_CNTRL
FLEPTR2[1] = CH_PROD
FLEPTR2[2] = CH_PRWH
FLEPTR2[3] = CH_CMDTY
FLEPTR2[4] = CH_LASTPR
FLEPTR2[5] = CH_SPECPRICE
FLEPTR2[6] = CH_CONTRACTH
FLEPTR2[7] = CH_CCODES
FLEPTR2[8] = CH_PRCTYPE
FLEPTR2[9] = CH_SORT
FLEPTR2[10] = CH_CUST
FLEPTR2[11] = CH_VEND
FLEPTR2[12] = CH_CUSTNOTES
FLEPTR2[13] = CH_SLSM
!If RESP$ = "F" Or RESP$ = "B" !"to be faxed or both faxed and printed
!  If FOUND
!    Call "op268pcnfax",WHSE,FLEPTR2[],REC_CUST,COVER$,FAXNO$,CONTACT$,NAME$,FROM$,REMARK$,TIMER$,CNAME$
!  End If 
!End If 
!If RESP$ = "P" Or RESP$ = "B" !"to be printed or both printed and faxed
!  If FIRSTFF
!    Print #CH_LPT;"\14\";
!  End If 
!  FIRSTFF = 1
!  Call "op268pcnprt",WHSE,FLEPTR2[],REC_CUST,CH_LPT,CNAME$
!End If 
!If RESP$ = "R" ! "add customer to sort
  Call "SERPCCN2RPT.DL4",BEGIN_EFFDATE,ENDING_EFFDATE,FLEPTR2[],REC_CUST,CH_LPT,rstr$,scrn
!End If 
TOTAL_NOTIFICATIONS = TOTAL_NOTIFICATIONS + 1
!Print @0,15;'CL';
!Print @0,13;'CL';
Return 
BLD_SORT_FILE: Rem"====== build/clear the sort file
If Err 0 Rem
Close #CH_SORT
If Err 0 Gosub ERR_TRAP
KSORT$ = "[1:64] 6/sortwork" + Spc(6) Using "&&&&" + "!"
Build #CH_SORT,KSORT$ ! 64 words / 128 bytes
REC_SORT = 25
Search #CH_SORT,0,1;KSORT$,REC_SORT,E
If E Gosub ERR_SEARCH
REC_SORT = 0
Search #CH_SORT,0,0;KSORT$,REC_SORT,E
If E Gosub ERR_SEARCH
Return 
GET_FAX_NUMBER: Rem"get the fax number
FOUND = FALSE
KCUSTNOTES$ = C1[4] Using "######"
Search #CH_CUSTNOTES,2,1;KCUSTNOTES$,REC_CUSTNOTES,E
If E > 2 Gosub ERR_SEARCH
If Not(E)
  Rem {begin src/inc/read.custnotes.i}
  Mat Read #CH_CUSTNOTES,REC_CUSTNOTES,0,30;CNA$
  Mat Read #CH_CUSTNOTES,REC_CUSTNOTES,100;CNA0$
  Mat Read #CH_CUSTNOTES,REC_CUSTNOTES,168;CNODATE
  Rem {end read.custnotes.i}
  Unlock #CH_CUSTNOTES
Else 
  FAXNO$ = ""
  Return 
End If 
I = 9
LOOP_VALIDATE_PHONE: Rem"make sure phone number is legit
If I <= 28 And (CNA0$[I,I] < "0" Or CNA0$[I,I] > "9")
  I = I + 1
  Goto LOOP_VALIDATE_PHONE
End If 
If I = 29
  FAXNO$ = ""
  Return 
End If 
FAXNO$ = CNA0$[I,28]
FOUND = TRUE
Return 

Rem {begin call.input.i}
ISINPUT: Rem  Drop-in change to Call Input   G.Doscher  10/29/96
!Call "Input",J1,J$,J0$,J1$,J4$,J5$
Return 
ISERRMSG: ! X1 = Len(J7$)
	e$=e$+"  "+J7$
Return
!Window Open @(38 - X1 / 2),(Msc(34) / 2 - 2); Size (X1 + 6),3; Using ""
!Print @0,0;" ";'K0 BR RB';" ";J7$;" ";'ER'; \ Signal 3,X1 / 2 + 10
!Print 'K1'; \ Window Close \ Return 
ISDUNPACK: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
If Not(X2) Let X$ = "        "
Return 
ISDPACK: Rem  *PACK DATE    X$ TO X2      V1.0  4/04/84  G.DOSCHER
X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
Return 
Rem {end call.input.i}
Rem {begin rtn.convert.s}
CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: Rem ALL UB 5+!!  IF SPC 4>1280 GOTO cvtstartb: ! "unibasic 5+
Rem REM "======= unibasic <5 logic
Rem SWAP 1,"MXPRCONV"
Rem IF CNVTU[2]=3 or CNVTU[2]=4 GOTO cvtdone: ! "um window
Rem cvttry: ! "this is a remark
Rem SIGNAL 2,X1,AMOUNT,FLAG \ IF X1=-1 LET E=0 \ GOSUB err_search:
Rem IF X1<>SPC(6) GOTO cvttry:
Rem IF CNVTU[2]=0 GOTO cvtdone: !!TEST IF VALID CONVERSION
Rem IF FLAG LET E=FLAG \ GOSUB err_search:
Rem GOTO cvtdone:
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.DL4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 
Rem {end rtn.convert.s}
OUTEND: Rem"========= exit
If scrn ! dx xml 
	
  Call addtostr(e$,rstr$,esdel$) !end section
   !
  !External Lib "libgeneral.lib"
  !Declare External Sub XMLtoExcel ! drops all but report data - convert to tab delimited
  !Call XMLtoExcel(e$,"ccn2rpt",rstr$)
  !
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
End
ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "+MSC$(4)
E$=msg$
Call programdump("tmp/268ccn2se!","")
Goto Err_Msg 
Return ! End
ERR_MSG: ! send message
ReturnStatus=1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)
Message$=E$
	  call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	  call AddToStr(e$,rstr$,WebStr$)
	  call SetOutPut(e$,rstr$)
End
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"

End ! the whole program