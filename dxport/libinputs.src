! -- libinputs.lib
!
! loadsave -w -n 100,10 -o prog/dxport/libinputs.lib src/libinputs.src
!
! supporting library of general routines for programming
!
! 1.0 06/27/07 new
!
include "src/copyright.inc"
!
declare intrinsic sub DateToJulian,JulianToDate
!
! List of Subs and functions for Library
!
!   S  SelectWH          Converts string of warehouses to a numeric matrix
!   S  SelectSalesReps   Converts string of salesmen to a numeric matrix
!   S  SelectZones       Converts string of zones to a string
!   S  SelectStates      Converts string of states to a string
!   S  SelectCategories  Converts string of categories to a numeric matrix
!
!
! ---------------------------------------------------------
External Sub SelectWH(e$,SelWhse$,WH[],SelFlag$)
  !
  !  converts a string of warehouses to a numeric matrix of warehouses selected
  !
  !  e$           : programming error desc
  !  SelWare$     : warehouses to be selected, separated by a comma
  !  WH[]         : warehouses selected, 1=yes 0=no
  !                 WH[0]=-1 equals all   WH[0]=0 selecting warehouses
  !  SelFlag$     : position 32 in control rec# 19, offset 50
  !                 select warehouses = Y
  !
  Try
    !
	dim tmp$[200],X$[200]
	e$=""
    if SelFlag$="Y" ! allow warehouse selection
      WH[0]=0
      If SelWhse$ 
        tmp$=SelWhse$
        X = 1
        For cnt = 1 To 99 \ WH[cnt] = 0 \ Next cnt
NextWHType:
        X2 = 0 \ Let X$ = tmp$ To "," : X2
        X1 = X$ \ If X1 < 1 Or X1 > 99 Let X = 0 \ Goto ExitWHType
        WH[X1] = 1 
        if X2 let tmp$=tmp$[X2+1] \ goto NextWHType
ExitWHType:
        if X=0 let e$="Invalid warehouse entered!" 
      else ! default all, nothing entered
        for cnt=1 to 99 \ WH[cnt]=1 \ next cnt
      endif
    else ! warehouse selection not allowed
      SelWhse$="" 
      WH[0]=-1
      for cnt=1 to 99 \ WH[cnt]=1 \ next cnt
    endif
  else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! SelectWH
!
! ---------------------------------------------------------
External Sub SelectSalesReps(e$,Chan,SelSalesRep$,SalesReps[],MaxNo)
  !
  !  converts a string of salesmen to a numeric matrix of salesmen selected
  !
  !  e$            : programming error desc
  !  Chan          : Channel for Salesman File
  !  SelSalesRep$  : salesmen to be selected, separated by a comma
  !  SalesReps     : Salesmen selected
  !  MaxNo         : Maxium # of salesmen that can be selected
  !
  Try
    !
	dim tmp$[600],X$[600],K$[48]
	dim 3%
	!
	e$=""
    tmp$=SelSalesRep$
    X = 0
    For cnt = 1 To MaxNo \ SalesReps[cnt] = 0 \ Next cnt
NextRepType:
    X2 = 0 \ Let X$ = tmp$ To "," : X2
    X1 = X$ \ If X1 < 1 Or X1 > 999 Let X = 0 \ Goto ExitRepType
    K$=X1 using "###"
	Search #Chan,2,1;K$,R1,V2
	if V2 let X=0 \ goto ExitRepType
    if X>MaxNo let X=-1 \ goto ExitRepType
    SalesReps[X] = X1 \ X=X+1
    if X2 let tmp$=tmp$[X2+1] \ goto NextRepType
ExitRepType:
    if X=0 let e$="Invalid salesman '",str$(X1),"' entered!" 
	if X=-1 let e$="Too many salesmen selected, maximum is ",str$(MaxNo),"!"
  else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! SelectSalesReps
!
! ---------------------------------------------------------
External Sub SelectZones(e$,Chan,SelZones$,Zones$,MaxNo)
  !
  !  converts a string of zones to a string of zones selected
  !
  !  e$            : programming error desc
  !  Chan          : Channel for Zone File
  !  SelSalesRep$  : Zones to be selected, separated by a comma
  !  SalesReps     : Zones selected
  !  MaxNo         : Maxium # of zones that can be selected
  !
  Try
    !
	dim tmp$[200],X$[200],K$[48]
	dim 3%
	!
	e$=""
    tmp$=SelZones$
    X = 1 \ cnt=1
	Zones$=""
NextZoneType:
    X2 = 0 \ Let X$ = tmp$ To "," : X2
    X$=X$,"  "
	K$=X$[1,2]
	Search #Chan,2,1;K$,R1,V2
	if V2 let X=0 \ goto ExitZoneType
    if cnt>MaxNo let X=-1 \ goto ExitZoneType
    Zones$[X,X+1] = K$ \ X=X+2
    if X2 let tmp$=tmp$[X2+1] \ goto NextZoneType
ExitZoneType:
    if X=0 let e$="Invalid Zone '",K$,"' entered!" 
	if X=-1 let e$="Too many zones selected, maximum is ",str$(MaxNo),"!"
  else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! SelectZones
!
! ---------------------------------------------------------
External Sub SelectStates(e$,SelStates$,States$,NoStates,MaxNo)
  !
  !  converts a string of states to a string of states selected
  !
  !  e$            : programming error desc
  !  SelStates$    : States to be selected, separated by a comma
  !  SalesReps     : States selected
  !  NoStates      : Number of states selected
  !  MaxNo         : Maxium # of states that can be selected
  !
  Try
    !
	dim tmp$[200],X$[200],K$[48]
	dim 3%
	!
	e$=""
    tmp$=SelStates$
    X = 1 \ NoStates=0
	States$=""
NextStateType:
    X2 = 0 \ Let X$ = tmp$ To "," : X2
    X$=X$,"  "
    if cnt>MaxNo let X=-1 \ goto ExitStateType
    States$[X,X+1] = X$ \ X=X+2
	NoStates=NoStates+1
    if X2 let tmp$=tmp$[X2+1] \ goto NextStateType
ExitStateType:
	if X=-1 let e$="Too many states selected, maximum is ",str$(MaxNo),"!"
  else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! SelectStates
!
! ---------------------------------------------------------
External Sub SelectCategories(e$,SelCategory$,Category[])
  !
  !  converts a string of categories to a numeric matrix of categories selected
  !
  !  e$            : programming error desc
  !  SelCategory$  : categories to be selected, separated by a comma
  !  Category[]    : categories selected
  !
  Try
    !
	dim tmp$[600],X$[600],K$[48]
	dim 3%
	!
	e$=""
    tmp$=SelCategory$
    X = 0
    For cnt = 1 To 99 \ Category[cnt] = 0 \ Next cnt
NextCatType:
    X2 = 0 \ Let X$ = tmp$ To "," : X2
    X1 = X$ \ If X1 < 1 Or X1 > 99 Let X = 0 \ Goto ExitCatType
    Category[X1] = 1 \ X=X+1
    if X2 let tmp$=tmp$[X2+1] \ goto NextCatType
ExitCatType:
    if X=0 let e$="Invalid category '",str$(X1),"' entered!" 
  else
    include "src/callsuberr.inc"
  end try
  !
End Sub ! SelectSalesReps
!
! ---------------------------------------------------------
