! libfilehandler.lib
!
! supporting library for browser
! filehandler called by dxblockcallsx/inplist/setdata to generate drop lists from files
! done as a separate handler so that all libfile*.lib libraries would not be declared in dxblockcallsx
!
! ***** NOTE: WHEN ADDING CUSTOM DROPLIST FOR BLOCKIDS the droplist name needs to be added to
! ************************ prog/dxport/sfdroplists.txt **********************************************
! ***** and in this program to the sub filehandler(e$,filename$,rstr$,...) call *****8***
!
! loadsave -w -n 100,10 -o  prog/dxport/libfilehandler.lib src/libfilehandler.src
!
! 1.0 04/17/08 new
! 8/27/08 added prodcatgy
!
include "src/copyright.inc"
!
external lib "ubsfunc.dl4"
declare external function OpenFile

Declare Intrinsic Sub FindF
Declare Intrinsic Function findchannel
!
External Lib "libfileglglmz.lib" !overridden, lots of exceptions for droplist
Declare External Sub filedroplistglglmz
External Lib "libfilesprodcatgy.lib"
Declare External Sub filedroplistsprodcatgy
External Lib "libfilecashacc.lib"
Declare External Sub filedroplistcashacc
External Lib "libfilewhinfo.lib"  
Declare External sub filedroplistwhinfo
External Lib "libfilematcode.lib"  
Declare External sub filedroplistmatcode
External Lib "libfilersnrts.lib"  
Declare External sub filedroplistrsnrts
External Lib "libfilesslsm.lib"
Declare External sub filedroplistsslsm
External Lib "libfileapcash.lib"
Declare External sub filedroplistapcash
External Lib "libfileccodes.lib"
Declare External sub filedroplistccodes
External Lib "libfileccodesx.lib"
Declare External sub filedroplistccodesx
External Lib "libfileusercntrl.lib"
Declare External sub filedroplistusercntrl
External Lib "libfilecommhead.lib"
Declare External sub filedroplistcommhead
External Lib "libfilea80vm.lib"
Declare External sub filedroplista80vm
External Lib "libfilebuyer.lib"
Declare External sub filedroplistbuyer
External Lib "libfileprodgroup.lib"
Declare External sub filedroplistprodgroup
!External lib "libfileprod.lib"
!Declare External sub filedroplistprod
External Lib "libfilepickedby.lib"
Declare External sub filedroplistpickedby
External Lib "libfilecurrency.lib"
Declare External sub filedroplistcurrency
External Lib "libfilemiscchrg.lib"
Declare External sub filedroplistmiscchrg

!
!
!
external sub filedroplistordertypes(e$,list$[],maxcnt,...)
  !
	  ! creates a drop list of ordertypes,  hard coded here becuase your name here are in control file, not own file so libfileordertypes.lib could not be generated automatically
  !
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
	dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row
    dim 2%,tmpcnt
	dim fields$[20]
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
	If Section$ = "" Let Section$ = "droplistordertypes"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
	clear list$[]
    List$[1]="ID",fdel$,"Description",fdel$
	
    !
    ! create data section
      for cnt=1 to 38
        read #chan,62,cnt*20-20;fields$;   !byte pos starting at 0, then every 20...
        if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
        !
        if rtrim$(fields$) <>""
		  if blockformat = 0 Let List$[row] = Str$(cnt),fdel$,rtrim$(fields$),fdel$
          if blockformat Let List$[row]=rtrim$(fields$),fdel$,str$(cnt),fdel$,fdel$     !format is reversed!, text,value,defaultflag(not used,but extra fdel$
          row=row+1
        end if
        !
      next cnt
    !
    if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist ordertypes in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistordertypes
!
external sub filedroplistshipvia(e$,list$[],maxcnt,...)
  !
  ! creates a drop list of ship via's,  hard coded here becuase ship via's are in company file, not own file so libfileshipvia.lib could not be generated automatically
  !
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
	dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row
    dim 2%,tmpcnt
	dim fields$[12]
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
	If Section$ = "" Let Section$ = "droplistshipvia"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
	clear list$[]
    List$[1]="ID",fdel$,"Description",fdel$
	
    !
    ! create data section
      for cnt=1 to 106
        read #chan,130,cnt*12-12;fields$;   !byte pos starting at 0, then every 12...12,24,36,etc
        if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
        !
        if rtrim$(fields$) <>""
		  if blockformat = 0 Let List$[row] = Str$(cnt),fdel$,rtrim$(fields$),fdel$
          if blockformat Let List$[row]=rtrim$(fields$),fdel$,str$(cnt),fdel$,fdel$     !format is reversed!, text,value,defaultflag(not used,but extra fdel$
          row=row+1
        end if
        !
      next cnt
    !
    if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist shipvia in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistshipvia
!
external sub filedroplistglcolumns(e$,list$[],maxcnt,...)
  !
  ! creates a drop list of G/L reports drop list of column options, see block 625,6251 hard coded here
  !
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
    dim 1%,budget,2%,client,intco,groupid$[1],client$[4],fname$[50]
    dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row
    dim 2%,tmpcnt
	dim fields$[30]
	dim compare$[1],tmp$[3]
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
	If Section$ = "" Let Section$ = "droplistglcolumns"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
	clear list$[]
    List$[1]="ID",fdel$,"Description",fdel$
	
    !
    ! create data section
	Call DXGET("U_CMPAR",compare$)
	if rtrim$(compare$)<>"" let compare$="Y" ! flag as comparison on
	Call DXGET("U_CLIENT",tmp$)
	let client=tmp$
	If not(client) let client=1
	let chan=1 ! for cntrl file
	read #chan,51,8;budget;
	if budget<>0 
		let client$=client using "####"
		for cnt=1 to 3
			if client$[cnt,cnt]=" " let client$[cnt,cnt]="."
		next cnt
		Call dxget("S_USER.AppID",tmp$) !company #               
		Try Let intco = Val(tmp$) Else Let intco = 1 !company #  
		Call dxget("u_group",groupid$)              
		If RTrim$(groupid$) = "" Let groupid$ = "0" 
		let fname$="1/GLB"+str$(intco)+groupid$+rtrim$(client$)
		Call FindF(Fname$,tmp3)
		if not(tmp3)
			let budget=0	
		endif
	endif
	!budget flag
      for cnt=0 to 14
	   fields$=""
	   if cnt=0 let fields$="None"
	   if cnt=1 let fields$="Actual Current Period MTD"
	   if cnt=2 let fields$="Actual Current Period YTD"
	   if compare$="Y"
	    if cnt=3 let fields$="Actual Prior Period MTD"
	    if cnt=4 let fields$="Actual Prior Period YTD"
	    if cnt=5 let fields$="Actual Var Curr to Prior MTD"
	    if cnt=6 let fields$="Actual Var Curr to Prior YTD"
	   end if !compare$
	   if budget
	    if cnt=7 let fields$="Budget Current Period MTD"
		if cnt=8 let fields$="Budget Current Period YTD"
		if cnt=9 let fields$="Budget Variance Curr Per MTD"
		if cnt=10 let fields$="Budget Variance Curr Per YTD"
		 if compare$="Y"
		   if cnt=11 let fields$="Budget Prior Period MTD"
		   if cnt=12 let fields$="Budget Prior Period YTD"
		   if cnt=13 let fields$="Budget Variance Prior MTD"
		   if cnt=14 let fields$="Budget Variance Prior YTD"
		end if !compare$
	   end if !budget
        if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
        !
        if rtrim$(fields$) <>""
		  if blockformat = 0 Let List$[row] = Str$(cnt),fdel$,rtrim$(fields$),fdel$
          if blockformat Let List$[row]=rtrim$(fields$),fdel$,str$(cnt),fdel$,fdel$     !format is reversed!, text,value,defaultflag(not used,but extra fdel$
          row=row+1
        end if
        !
      next cnt
    !
    if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist glcolumns in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistglcolumns

! start here
external sub  filedroplistglclientdept(e$,list$[],maxcnt,...)     
  !
  ! creates a drop list of G/L reports drop list of a clients department, see block 625,625R, 626,626R hard coded here
  ! **** custom droplist name needs to be added to prog/dxport/sfdroplists.txt ***
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
    dim 2%,client,intco,groupid$[1],client$[4],fname$[50]
    dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row,deptflag
    dim 2%,tmpcnt,dept
    dim fields$[30]
    dim tmp$[3], tmp1$[50],keydept$[50],deptname$[30]
    dim 3%,rec_dept,tmp3
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
    clear list$[]
   If rtrim$(Section$) = "" Let Section$ = "droplistglclientdept"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
     clear list$[]
    List$[1]="ID",fdel$,"Description",fdel$
	
    !
    ! create data section
	Call DXGET("U_CLIENT",tmp1$)
	let client=tmp1$
	if not(client) let client=1
	let chan=1 ! for cntrl file
	read #chan,51,10;deptflag;
	if deptflag<>0 
		read #chan,88,128;fname$;
		Call FindF(Fname$,tmp3)
		if not(tmp3)
			let deptflag=0	
		endif
		Call dxget("S_USER.AppID",tmp$) !company #               
		Try Let intco = Val(tmp$) Else Let intco = 1 !company #
		ch_dept = OpenFile(-128,IntCo)
		If ch_dept = -1 let deptflag=0
	endif
	if blockformat=0
		let list$[row]="A",fdel$,"All Departments",fdel$ 
	else
		let list$[row]="All Departments ",fdel$,"A",fdel$,fdel$
	endif
	let row=row+1  !3
	if deptflag<>0
		let keydept$=" ",keydept$
		let keydept$[1,4]=client using "####"
		Do
			search #ch_dept,3,1;keydept$,rec_dept,e
			if e<>0 exit do
			let tmp3=keydept$[1,4]
			if tmp3<>client exit do
			read #ch_dept,rec_dept,4;dept;
			read #ch_dept,rec_dept,8;deptname$;
    			if rtrim$(deptname$)<>""
				if blockformat=0
					let list$[row]=Str$(dept),fdel$,rtrim$(deptname$),fdel$
				else
					let list$[row]=rtrim$(deptname$),fdel$,str$(dept),fdel$,fdel$
				endif
				let row=row+1
				if row>tmpcnt let tmpcnt=expandarray(E$,List$[]) !
			endif
		Loop
		if blockformat=0
			let list$[row]="C",fdel$,"Consolidate Select Departments",fdel$
		else
			let list$[row]="Consolidate Select Departments",fdel$,"C",fdel$,fdel$
		endif
		let row=row+1
		if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
	endif
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist glclientdept in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistglclientdept

!---------- Start FIleDroplistglclient --------
external sub  filedroplistglclient(e$,list$[],maxcnt,...)     
  !
  ! creates a drop list of G/L reports drop list of a clients , see block 121 hard coded here
  ! **** custom droplist name needs to be added to prog/dxport/sfdroplists.txt ***
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
    dim 2%,client,intco,groupid$[1],fname$[50]
    dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row,deptflag
    dim 2%,tmpcnt,dept
    dim fields$[30]
    dim tmp$[3], tmp1$[50],keyacf$[50],clientname$[40]
    dim 3%,rec_acf,tmp3
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
    clear list$[]
   If rtrim$(Section$) = "" Let Section$ = "droplistglclient"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
     clear list$[]
    List$[1]="ID",fdel$,"Description",fdel$
	
    !
    ! create data section
     read #chan,88,48;fname$;
     Call FindF(Fname$,tmp3)
     if not(tmp3)
		let ch_acf=-1
     else
		Call dxget("S_USER.AppID",tmp$) !company #               
		Try Let intco = Val(tmp$) Else Let intco = 1 !company #
		ch_acf= OpenFile(-48,IntCo)
	
     endif
     !if blockformat=0
	!	let list$[row]="A",fdel$,"All Clients",fdel$ 
    ! else
	!let list$[row]="All Clients ",fdel$,"A",fdel$,fdel$
    ! endif
     !let row=row+1  !3
     if ch_acf>0
		let keyacf$=" ",keyacf$
		Do
			search #ch_acf,3,1;keyacf$,rec_acf,e
			if e<>0 exit do
			if keyacf$[7,8]="  "
				let tmp=keyacf$[3,6]
				read #ch_acf,rec_acf,10;clientname$;
    			if rtrim$(clientname$)<>""
					if blockformat=0
						let list$[row]=Str$(tmp),fdel$,rtrim$(clientname$),fdel$
					else
						let list$[row]=rtrim$(clientname$),fdel$,str$(tmp),fdel$,fdel$
					endif
					let row=row+1
					if row>tmpcnt let tmpcnt=expandarray(E$,List$[]) !
				endif
			endif
		Loop
     else
		if blockformat=0
			let list$[row]="1",fdel$,"Default",fdel$ 
 		else
			let list$[row]="Default",fdel$,"1",fdel$,fdel$
     	endif
     	let row=row+1  !3	
    endif
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist glclientdept in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistglclient

!--------- End FileDroplistglclient -------

! end here!
external sub filedroplistcntrlfile(e$,list$[],recordno,fieldsno,...)
  !
  ! creates a drop list form record in cntrlfile,  assumes open on channel #1
  !
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! recordno    : record # in cntrl file
  ! fieldsno    : # of fields to read
  ! fieldlen[]  : length of each field (can specify length for each field, or if all the same just send one fieldlen, not an array....numerics are indicated as negative numbers for precision, ie -2=2%
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  ! Others$     : list of flags to display other drop list options 0=None,A=All
  !
  !
  Try
    ! 
	Try 	 Enter fieldlen[],... 	Else	 Enter onefieldlen,...
	!
	Try Enter blockformat,... Else let blockformat=0
	Try Enter iSection$,... Else Dim iSection$[1]
    Try enter Others$ else dim Others$[1]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
	dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],section$[30]
    dim 1%,row
    dim 2%,tmpcnt
	dim fields$[100],1%,field1,2%,field2,3%,field3,4%,field4,2%
	!
	section$=isection$
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
	If Section$ = "" Let Section$ = "droplistcntrl",str$(recordno)
    tmpcnt=ubound(list$[],1)
	row=0
    !
    ! beginning section
	clear list$[]
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
	!any other optional elements to include in drop list (defined in page block userdef2
 xpos=pos(ucase$(others$),="A")
 if xpos
          if blockformat=0 List$[row]="A",fdel$,"All",fdel$
          if blockformat let list$[row]="All",fdel$,"A",fdel$,fdel$
          row=row+1
 end if
 xpos=pos(ucase$(others$),="0")
 if xpos
          if blockformat=0 List$[row]="0",fdel$,"None",fdel$
          if blockformat let list$[row]="None",fdel$,"0",fdel$,fdel$
          row=row+1
 end if
    !
    ! create data section
	bytepos=0 !beg byte pos in record
	startfield=1
	if recordno=50 let startfield=0
      for cnt=startfield to fieldsno  !was 1 but statement types off 1
	   if onefieldlen let thislen=onefieldlen else let thislen=fieldlen[cnt-1]
	   if thislen<0 !numeric
        if int(thislen)=-1 read #chan,recordno,bytepos;field1; \bytes=2\fields$=str$(field1)
		if int(thislen)=-2 read #chan,recordno,bytepos;field2; \bytes=4\fields$=str$(field2)
		if int(thislen)=-3 read #chan,recordno,bytepos;field3; \bytes=6\fields$=str$(field3)
		if int(thislen)=-4 read #chan,recordno,bytepos;field4; \bytes=8\fields$=str$(field4)
		if fra(thislen) !can mask fields$ for decimal places
		 field4=fields$
		 !fields$=field4 using ??  not done
		end if
	   else !string
        read #chan,recordno,bytepos;fields$[1,thislen];
		bytes=thislen
	   end if
	   bytepos=bytepos+bytes
        if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
        !
        if rtrim$(fields$) <>""
		  if blockformat = 0 Let List$[row] = Str$(cnt),fdel$,rtrim$(fields$),fdel$
          if blockformat Let List$[row]=rtrim$(fields$),fdel$,str$(cnt),fdel$,fdel$     !format is reversed!, text,value,defaultflag(not used,but extra fdel$
          row=row+1
        end if
        !
      next cnt
    !
    if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist cntrlfile in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistcntrlfile
!
!
external sub filedroplistaddons(e$,list$[],key1$,begbytepos,fieldsno,...)
  !
  ! creates a drop list from record in addon file
  !
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! key1$       : key in addon file
  ! "     0" is sls zone descriptions  
  ! begbytepos  : beginning byteposition to read
  ! fieldsno    : # of fields to read
  ! fieldlen[]  : length of each field (can specify length for each field, or if all the same just send one fieldlen, not an array....numerics are indicated as negative numbers for precision, ie -2=2%
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
    Try Enter fieldlen[] Else Enter onefieldlen
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan = OpenFile(-2832,IntCo) \ If SZNC = -1 Error 42 ! addon/sales zone
	search #chan,2,1;key1$,recordno,e
    !
	dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row
    dim 2%,tmpcnt
	dim fields$[100],1%,field1,2%,field2,3%,field3,4%,field4,2%
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
	If Section$ = "" Let Section$ = "droplistaddon",trim$(key1$)
    tmpcnt=ubound(list$[],1)
	row=0
    !
    ! beginning section
	clear list$[]
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
    List$[1]="ID",fdel$,"Description",fdel$
    !
	bytepos=begbytepos
    ! create data section
	if e=0 !record is on file
      for cnt=0 to fieldsno   !was 1 to but #'s on statement type were off 1
	   if onefieldlen let thislen=onefieldlen else let thislen=fieldlen[cnt-1]
	   if thislen<0 !numeric
        if int(thislen)=-1 read #chan,recordno,bytepos;field1; \bytes=2\fields$=str$(field1)
		if int(thislen)=-2 read #chan,recordno,bytepos;field2; \bytes=4\fields$=str$(field2)
		if int(thislen)=-3 read #chan,recordno,bytepos;field3; \bytes=6\fields$=str$(field3)
		if int(thislen)=-4 read #chan,recordno,bytepos;field4; \bytes=8\fields$=str$(field4)
		if fra(thislen) !can mask fields$ for decimal places
		 field4=fields$
		 !fields$=field4 using ??  not done
		end if
	   else !string
        read #chan,recordno,bytepos;fields$[1,thislen];
		bytes=thislen
	   end if
	   bytepos=bytepos+bytes
        if row>tmpcnt let tmpcnt=expandarray(E$,List$[])
        !
        if rtrim$(fields$) <>""
		  if blockformat = 0 Let List$[row] = Str$(cnt),fdel$,rtrim$(fields$),fdel$
          if blockformat Let List$[row]=rtrim$(fields$),fdel$,str$(cnt),fdel$,fdel$     !format is reversed!, text,value,defaultflag(not used,but extra fdel$
          row=row+1
        end if
        !
      next cnt
	end if !e
    !
    if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
	close #chan
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist addon in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistaddons
!
! ----------------------------------------
!
External Sub filedroplistfrzfle(e$,list$[],maxcnt,...)
! get a list of frozen monthly files for deletion
!
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
  Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal

	dim tmpline$[500],Tfname$[128],CMD$[256],tmp$[60]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row
    dim 2%,tmpcnt
	dim Tfields$[90],BFname$[16],P61$[256]
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
	If Section$ = "" Let Section$ = "droplistfrzfle"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
	clear list$[]
    if blockformat=0 let List$[1]="ID",fdel$,"Description",fdel$
	! ROW=2
	! ok - we're off
	chan=1   ! Chan        : the channel # is always 1 for file name
	Mat read #chan,61,0;P61$;
	if p61$[20,20]<>"Y" goto GFLstDone
	Read #chan,88,1504;BFName$;
	BFName$=LCase$(BFName$) ! we deal in lowercase!
	tfname$="/tmp/frozflst"+Str$(SPC(6))
	CMD$="ls files/"+BFName$+"* > "+tfname$
	System CMD$ ! a list of all files starting with "2/saract#"
	Chan2=findchannel()
	Open #chan2,tfname$
	tfleread: ! read file for 
	READ #CHAN2;tmpline$;
	if RTrim$(Tmpline$)="" goto GFLstDone
	If tmpline$[len(tmpline$)]<" " let tmpline$[len(tmpline$)]="" ! strip <cr>
	If tmpline$[len(tmpline$)]<" " let tmpline$[len(tmpline$)]="" ! strip <cr>
	TFields$=RTrim$(tmpline$[9]) ! drop the files/2/
	tmp$="froz" ! exclude
	LET POS0=1;POS1=0             
	SEARCH Tfields$[POS0],tmp$,POS1
	if pos1>0 goto tfleread ! match
	tmp$="idx"
	LET POS0=1;POS1=0             
	SEARCH Tfields$[POS0],tmp$,POS1
	if pos1>0 goto tfleread ! match
	! ok add to list
	tmp$="." ! look for . in ".YYMM"
	LET POS0=1;POS1=0             
	SEARCH Tfields$[POS0],tmp$,POS1
	if pos1<=0 goto tfleread ! no match
	tmp$=Tfields$[pos1+pos0]
	If Len(RTrim$(tmp$))>5 goto tfleread ! not YYMM - YYMMDD?
	let x3=Tfields$[pos1+pos0]
	if x3<=0 or X3>9912 goto tfleread ! other names (NOT YYMM)
	if blockformat=0 let List$[row]=Tfields$[pos1+pos0],fdel$,TFields$[1],fdel$ ! after the . is ID 
	if blockformat Let List$[row]=Tfields$[1],fdel$,TFields$[pos1+pos0],fdel$,fdel$ !format is reversed!, text,value,defaultflag(not used,but extra fdel$
	row=row+1
	if row>tmpcnt let tmpcnt=expandarray(e$,List$[])
	Goto tfleread ! next file on list
	GFLstDone: ! finished
	try close #chan2 Else Rem
	if blockformat=0 List$[row]=esdel$
  else
    if spc(8) <> 10000
      e$="error in filedroplist frzfle in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistfrzfle
!
! ----------------------------------------
!
!---------- Start FIleDroplistMiscCodez --------
external sub  filedroplistmisccodez(e$,list$[],maxcnt,...)     
  !
  ! creates a drop list misc codes 
  ! **** custom droplist name needs to be added to prog/dxport/sfdroplists.txt ***
  ! e$          : to return error msg if any
  ! List$[]     : the record created from the field array
  ! maxcnt      : maxmium # of lines for list array
  ! Optional parameters
  ! blockformat : if 0, formats for normal drop list <section>,  if 1, formats for DXBLOCKX action=edit <Control><Data> section  default is 0
  ! Section$    : .net, the section to be created and sent to web
  !
  !
Try
    ! 
	Try Enter blockformat,... Else let blockformat=0
	Try Enter Section$,... Else Dim Section$[30]
	!
    option string redim is legal
	chan=1   ! Chan        : the channel # is always 1 for CNTRL file, so not passed
    !
    dim fname$[50]
    dim tmpline$[500]
    dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
    dim 1%,row,deptflag
    dim 2%,tmpcnt,dept
    dim fields$[30]
    dim tmp$[3], tmp1$[50],mcodedesc$[20]
    dim 3%,rec_mcode,tmp3
    !
    !
    call env(1,"BSDEL",bsdel$)
    call env(1,"ESDEL",esdel$)
    call env(1,"RDEL",rdel$)
    call env(1,"FDEL",fdel$)
    !
    clear list$[]
	If rtrim$(Section$) = "" Let Section$ = "droplistmisccodez"
    tmpcnt=maxcnt
	row=0
    !
    ! beginning section
    List$[0]=bsdel$,section$,fdel$ ! beginning section
    !
	! heading section for .net
    cnt = 0
    tmpline$ = "ID",fdel$,"Description",fdel$
    If blockformat = 0
     List$[1] = tmpline$
     row = 2
    End If 
    ! heading section for .net
    cnt=0
    !
    clear list$[]
    List$[1]="ID",fdel$,"Description",fdel$
	
    !
    ! create data section
     read #chan,88,2032;fname$;
     Call FindF(Fname$,tmp3)
     if not(tmp3)
		let ch_mcode=-1
     else
		Call dxget("S_USER.AppID",tmp$) !company #               
		Try Let intco = Val(tmp$) Else Let intco = 1 !company #
		ch_mcode= OpenFile(-2032,IntCo)	
     endif
	 if ch_mcode>0
		if blockformat=0
			let list$[row]="0",fdel$,"None",fdel$ 
 		else
			let list$[row]="None",fdel$,"0",fdel$,fdel$
     	endif
     	let row=row+1 
		for rec=1 to (chf(ch_mcode)-1)
			read #ch_mcode,rec,6;mcodedesc$;
			if rtrim$(mcodedesc$)<>""
				if blockformat=0
					let list$[row]=str$(rec),fdel$,rtrim$(mcodedesc$),fdel$
				else
					let list$[row]=rtrim$(mcodedesc$),fdel$,str$(rec),fdel$,fdel$
				endif
				let row=row+1
				if row>tmpcnt let tmpcnt=expandarray(E$,List$[]) !
			endif
		next rec
	  else
		if blockformat=0
			let list$[row]="0",fdel$,"None",fdel$ 
 		else
			let list$[row]="None",fdel$,"0",fdel$,fdel$
     	endif
     	let row=row+1  !3	
    endif
    if blockformat=0 Let List$[row]=esdel$ ! end of section delimiter
    !
  else
    if spc(8) <> 10000
      e$="error in filedroplist misccodez in libfilehandler.lib"
    if spc(8) = 123 let e$=" record locked"
      if spc(8)<10000 if spc(8)<>123 call suberr(e$,Spc(8),Spc(10),Msc$(2))
    end if
    error 10000
  end try
end sub ! filedroplistmiscodez





! ------------------------------------------------------------
!
!  function  filehandler
!
! ----------------------------------------
external sub filehandler(e$,filename$,rstr$,...)
!
! get a file droplist
!
! pass e$ to return error msg if any
!
Try enter others$ else dim others$[1]
Try
!

 maxcnt=1000
 dim List$[maxcnt,100],tmp$[3]
 Call dxget("S_USER.AppID",tmp$) !company #               
 Try Let intco = Val(tmp$) Else Let intco = 1 !company #
 !
 if filename$="shipvia" 
   call filedroplistshipvia(e$,list$[],maxcnt,1)   !1=action=edit <CONTROL><DATA> format
 else if filename$="ordertypes" 
   call filedroplistordertypes(e$,list$[],maxcnt,1)   !1=action=edit <CONTROL><DATA> format
 else if filename$="glcolumns"
   call filedroplistglcolumns(e$,list$[],maxcnt,1)
 else if filename$="glclientdept"
   call filedroplistglclientdept(e$,list$[],maxcnt,1)
 else if filename$="glclient"
	call filedroplistglclient(e$,list$[],maxcnt,1)
 else if Lcase$(filename$)="frzfle"
	call filedroplistfrzfle(e$,List$[],maxcnt,1)
 else
  if filename$="CCODESX"
   chan = OpenFile("CCODES",IntCo)
  else
   chan = OpenFile(filename$,IntCo)
  end if
  if chan < 0 let e$="Could not open ",filename$," file!"\error 10000
  !
  if filename$="GL.GLM" 
   call filedroplistglglmz(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="SPRODCATGY" 
   call filedroplistsprodcatgy(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="CASHACC" 
   call filedroplistcashacc(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="WHINFO" 
   call filedroplistwhinfo(e$,list$[],maxcnt,chan) ! ,"","",others$)  
  else if filename$="MATCODE"
   call filedroplistmatcode(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="RSNRTS"
   call filedroplistrsnrts(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="SSLSM"
   call filedroplistsslsm(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="APCASH"
   call filedroplistapcash(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="CCODES"
   call filedroplistccodes(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="CCODESX"
   call filedroplistccodesx(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="USERCNTRL"
   call filedroplistusercntrl(e$,list$[],maxcnt,chan,"","",others$)
   else if filename$="COMMHEAD"
   call filedroplistcommhead(e$,list$[],maxcnt,chan,"","",others$)
  else if filename$="WHINFOZ"
	call filedroplistwhinfo(e$,list$[],maxcnt,chan) ! ,"","",others$)
  else if filename$="BUYER"
	call filedroplistbuyer(e$,list$[],maxcnt,chan) ! ,"","",others$)
  else if filename$="PRODGROUP"
	call filedroplistprodgroup(e$,list$[],maxcnt,chan) ! ,"","",others$) ! new is ,section$,ifld$,keyno,keyval,others$
  else if filename$="A80VM"
	call filedroplista80vm(e$,list$[],maxcnt,chan) ! etc
  else if filename$="PICKEDBY"
	call filedroplistpickedby(e$,list$[],maxcnt,chan,"","",others$) ! etc
  else if filename$="CURRENCY"
	call filedroplistcurrency(e$,list$[],maxcnt,chan,"","",others$) ! etc
  else if filename$="MISCCHRG"
	call filedroplistmiscchrg(e$,list$[],maxcnt,chan,"","",others$) ! etc
  else if filename$="MISCCODEZ"
	call filedroplistmisccodez(e$,list$[],maxcnt,chan,"","",others$) ! etc
  end if
 end if !need/don't need chan opened
 !
 !
 call AddToStr(e$,rstr$,List$[])
 !
 try close #chan else rem
 !
else
  if spc(8) <> 10000
    if spc(8) < 10000 call suberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
end try
end sub ! filehandler
