!Program Name: ubsvendlist
! loadsave -w -n 100,10 -o prog/dxport/ubsvendlist.dl4 src/ubsvendlist.src
!                                                  
!Last Updated:                                     

!


declare external sub vendlist
declare sub updatelog,errTrap
 External Lib "libgeneral.lib" !general routines 
Declare External Function expandarray

! maxcnt = 2000
! Dim List$[999,maxcnt]
!call vendlist(1,maxcnt,"a","", "1", "",0,list$[])

!stop

External Sub VendList(intCo,maxcnt,strSearch$,logic$,what$, Key1$, vend, list$[])
Try
	Declare Intrinsic Sub env 
	Declare Intrinsic Function FindChannel,Trim$
	Declare External Function XMLFile$,FDate$,BaseName$,FMTPhone$,OpenFile
	Declare Intrinsic Sub DXGet,DXPut,StringSearch
	External Lib "ubsfunc.dl4"
	External Lib "libgeneral.lib" !general routines 
	Declare External Function expandarray
	Include  "src/inc/filea80vm.inc"
	dim vend. as a80vm
	Dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20]
	Dim VendKey$[50],P9$[50],P61$[256]




	
	! Variables for Channel#'s
	Dim 2%,Ch_vend
	! Variables for Search Record#
	Dim 3%,rec_vend
	! Variables for Search Error
	Dim 2%,e



Dim CO$[1]
Dim Msg$[256],pgmName$[20],tmp$[100]
Dim QMASK$[20],PMASK$[20],EMASK$[20],DEC$[5],keyvar$[30]
dim webstr$[2500],e$[300],dlog$[50]

Dim 3%,ARS[5]
Dim 2%, t2
Dim 2%, Q0[1]
Dim 3% 
Call env(1,"BSDEL",bsdel$)   
Call env(1,"ESDEL",esdel$)   
Call env(1,"RDEL",rdel$)     
Call env(1,"FDEL",fdel$)     


CO$=Str$(intCo) ! Company

ch_vend= OpenFile(-2400,intCo)  \ If ch_vend=-1  Error 42    
CTLC= OpenFile(-9999,intCo) \ If CTLC=-1 Error 42    
  

Read #CTLC,19,50;P9$; ! What is this?
Mat Read #CTLC,115,40;Q0; 

If not(Q0[1]) let Q0[1]=2                                                       
Let Dec$="#",Dec$;Qmask$="---,---,--#"                                          
If Q0[0] Let Qmask$="---,---,--#.",Dec$[1,Q0[0]]         !qty mask      
If Q0[1] Let Pmask$="---,---,---,---.",Dec$[1,Q0[1]]     !price mask        
Let Emask$="-$$$,$$$,$$$,$$$.##"                         !ext. price mask       
Vendkey$=" ",vendkey$
if key1$ > "" let vendkey$ = key1$
Clear list$[]
list$[0]= bsdel$,"VendorList",fdel$ 
webstr$="ID",fdel$
webstr$=webstr$,"Name",fdel$
webstr$=webstr$,"Contact",fdel$
webstr$=webstr$,"Address",fdel$
webstr$=webstr$,"Address 2",fdel$
webstr$=webstr$,"City",fdel$
webstr$=webstr$,"State",fdel$
webstr$=webstr$,"Zip",fdel$
webstr$=webstr$,"Telephone",fdel$
list$[1]=webstr$
let tmpcnt=maxcnt
let row=2
if vend let vendkey$ = vend using "######" ! overrides all
if vend let strsearch$ = ""  ! if they pass a vendcode use it only

VendOP: Rem Loop Through Vendor on Name directory (default sort)
if vend
	Search #Ch_vend,2,1;Vendkey$,rec_vend,e
	if val(VendkEY$)=vend
		E=0  
	else
		E=22
	endif
else
	Search #ch_vend,3,2;VendKey$,rec_vend,e
	if e=2 goto vendend:
	
endif





If E Then
   Keyvar$=""
   Goto vendEND:
End If

Try Read Record #Ch_vend,rec_vend; vend.; else clear vend.


! Perform Search Tests on fields.
If Trim$(strSearch$)="" Goto FoundVend:

!VendName
If What$="1" Or what$="8"
   Call StringSearch(UCase$(vend.name$),UCase$(strSearch$),P)
   If logic$="1" If P=1 Goto FoundVend:
   If logic$="2" If p>=1 Goto FoundVend:
   if what$<>"8" Goto Vendop:
End If

!Contact
If What$="2" Or what$="8"
   Call StringSearch(UCase$(vend.contact$),UCase$(strSearch$),P)
   If logic$="1" If P=1 Goto Foundvend:
   If logic$="2" If p>=1 Goto FoundVend
   if what$<>"8" Goto Vendop:
End If


!City
If What$="3" Or what$="8"
   Call StringSearch(UCase$(Vend.City$),UCase$(strSearch$),P)
   If logic$="1" If P=1 Goto Foundvend:
   If logic$="2" If p>=1 Goto FoundVend
   if what$<>"8" Goto Vendop:
End If

!State
If What$="4" Or what$="8"
   Call StringSearch(UCase$(Vend.State$),UCase$(strSearch$),P)
   If logic$="1" If p=1 goto Foundvend:
   If logic$="2" If p>=1 Goto FoundVend
   if what$<>"8" Goto Vendop:
End If

!zip
If What$="5" Or what$="8"
   Call StringSearch(UCase$(Vend.zip$),UCase$(strSearch$),P)
   If logic$="1" If p=1 goto Foundvend:
   If logic$="2" If p>=1 Goto FoundVend
   if what$<>"8" Goto Vendop:
End If

!addr
if What$="6" Or what$="8"
	tmp$=Vend.Address$,vend.OptAddress$
	Call StringSearch(UCase$(tmp$),UCase$(strSearch$),P)
   If logic$="1" If p=1 goto Foundvend:
   If logic$="2" If p>=1 Goto FoundVend
   if what$<>"8" Goto Vendop:
End If

! phone
if what$="7" Or what$="8"
	Call StringSearch(UCase$(Vend.TelephoneNumber$),UCase$(strSearch$),P)
   If logic$="1" If p=1 goto Foundvend:
   If logic$="2" If p>=1 Goto FoundVend
   if what$<>"8" Goto Vendop:
End If
goto Vendop ! bad field or not found in all

Foundvend: Rem

	webstr$=(vend.vendorcode using "######"),fdel$
	webstr$=webstr$,RTrim$(vend.name$),fdel$
	webstr$=webstr$,RTrim$(vend.contact$),fdel$
	webstr$=webstr$,RTrim$(vend.address$),fdel$
	webstr$=webstr$,RTrim$(vend.optaddress$),fdel$
	webstr$=webstr$,RTrim$(vend.city$),fdel$
	webstr$=webstr$,vend.state$,fdel$
	webstr$=webstr$,vend.zip$,fdel$
	webstr$=webstr$,RTrim$(vend.TelePhoneNumber$),fdel$
	let list$[row]=webstr$
	row=row+1
	If row > tmpcnt Let tmpcnt = expandarray(e$,List$[]) 
	if row>1000 ! time or size limit
		goto VendEnd
	Endif

   Goto vendop:



VendEnd: Rem End it all !
if not(e) let key1$ = keyvar$
if ctlc<>1 close #ctlc
Close #ch_vend
msg$="doing...end of "+pgmName$ \ Call updatelog(debug)
ss=0
Exit Sub
Else
  ss=spc(10)
  Call errTrap(pgmName$)
End Try


Sub updatelog(debug)                                        
	If not(debug) Exit Sub                                    
	System "echo ''" + msc$(0) + " " + msg$ + "'' >> " + dlog$
End Sub   


Sub errTrap(pgmName$)
  msg$="error...",Spc(8)," ",Msc$(2)," at ",Str$(Spc(10))," ",pgmName$
  Call updatelog(1)
End Sub
		

ss=Spc(10)

End Sub

