! >>> Program 883
!
! description   BOM COST Update
!
! loadsave -w -n 100,10 -o prog/dxport/883.dl4 src/883.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem MX883 - BOMCOST UPDATE USING 854 ROUTINES
Rem         ************
Rem
Rem   THERE IS NO PRINT HERE - JUST UPDATES COSTS w/Status(productcode) display
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN  3, 2003  18:03:07
Rem /w/papermaster/r2002//usr/acct/bill/work/r2002/mfg/mx883.src (univ2) [bill] {56007}
Rem  Copyright (c) 2003 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function AddToMYReports
!
External Lib "ubsfunc.dl4"
Declare External Sub GetCostLevels
!
Declare Intrinsic Sub InpBuf,String,FindF
!Option Default Dialect IRIS1

If Err 0 Gosub ERR_TRAP

Dim 1%,SC,SR,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],J4$[50]
Dim 1%,COST_LEV[3]
Dim 3%,P3,A1[20],A2[17],A3[10],A4[10],Q
Dim 3%,I8,T1[10],L1[10],WGHT
Dim 3%,G[4],BMAMT,COST,AMNT
Dim P9$[50],X$[10],K9$[60]
Dim G$[20],N9$[30],N1$[36]
Dim L$[5],P1$[10],D1$[10],K30$[40]
Dim 3%,T0,R[40],W3[24],PREC[1],WHMISC[6],PRPARC[3],PF_LOAD2
Dim 3%,R4[100],R5,S3,2%,S4,C4[10],1%,ECOST,WHSE,LM[1],WHLM[1]
Dim 2%,D9[5],P0[2],1%,D0[100],LLC
Dim 2%,C2,Y,B[24],B1
Dim 2%,R2,C,R1,E2,1%,I,S2[3]
Dim 1%,E1,X,F,P9,S9,P[1],L9,T,F9,Z1
Dim F$[20],P$[156],U$[9],N$[12],H$[156],A1$[31]
Dim A$[20],J$[20],C$[800],B1$[12],E1$[12],N2$[26]
Dim I$[30],B$[30],K$[66],K1$[30],U5$[50]
Dim M1$[20],M2$[20],J0$[5],J1$[5]
Dim P0$[4],T9$[26]
Dim 2%,I2
Dim U9$[132],D8$[8]
Dim Y$[12]
Dim ReportDir$[128],BaseName1$[128],Statusfile$[128]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[200],WebStr$[200]
dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[20]	  \ Blank$=" ",Blank$
dim EndParam$[20] \ EndParam$="}",EndParam$
Dim 3% ! default for un-dimmed numbers
WHSE = 0
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 10000 + .5) * .0001)
Def FNP(X) = (X * X1)
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!call dxsave(0,"tmp/882in.txt!")
!R1 = Spc(5)
call GetCostLevels(e$,Cost_Lev[],IntCO,UserID$)
B$ = "CNTRL"+Str$(IntCo)
For E1 = 2 To 7
  Read X
  If I6 > 1 Goto L_840
  If Not(X) Goto L_830
  Read #1,88,X;F$[1,16];
  Open #E1,F$
L_830: Next E1
Data "0","1792","1728","0","656","1744"
L_840: Rem 0=$LPT   1=CNTRL     3=PARTS     6=BOMFNEW
U$ = "---,###"
Mat Read #1,3;N9$;
Mat Read #1,19,50;P9$;
Read #1,3,164;D8$;
Mat Read #1,115,0;D9;
I4 = 0
M1$ = "######.####"
M2$ = "##,###.####"
If COST_LEV[1] < 2 Goto L_8950
!Print 'CS MH CR'; Tab 18;"BILL OF MATERIALS COST UPDATE"
!Print @0,2;"THE LLC UPDATE PROGRAM (882) MUST BE RUN PRIOR TO THIS UPDATE!"
Goto L_1300
L_950: Rem process a product
S2[3] = 0
E2 = C2 \ Gosub L_3800
B1 = PFU1[8]
R2 = C2
S8 = 0
Gosub L_3000 ! explode
P = 0
I4 = I4 + 1
If UCOST <> 2 Gosub L_4225 ! update cost
If UCOST = 2 Gosub L_4000 ! another update?
Goto L_1615
L_1300: Rem *** SELECT PARTS ***
!Print @0,4;"PRESS <RETURN> TO START,  E:exit  ";
!Input ""F$ \ If F$ = "E" Goto OUTEND
!If F$ <> "" Goto L_1300
L_1350: ! display costs
!Read #1,18,130;D1$; \ Print @0,4;'CE';@10,4;"1) ";D1$
!Read #1,18,120;D1$; \ Print @10,5;"2) ";D1$
!Print @30,5;"(IF NO LOAD MARKUP)";
!Read #1,18,110;D1$; \ Print @10,6;"3) ";D1$
!Print @10,7;"4) BASE"
!Read #1,18,220;D1$; \ Print @10,8;"5) ";D1$
!Print @30,8;"(IF NO LOAD MARKUP)";
!Read #1,18,230;D1$; \ Print @10,9;"6) ";D1$
L_1380: ! Print @10,12;'CE';"SELECT COST TO USE/UPDATE (1-6,E)   ";
call dxget("COSTUPDT",tmp$) \ let F$=RTrim$(tmp$)
! Input ""F$ \ If F$ = "E" Goto OUTEND
X2 = F$
If X2 < 1 Or X2 > 6 ! 
	message$="Please Select a listed Cost (1-6)"
	goto OutErr
	!Goto L_1380
Endif
UCOST = X2
B1$ = ""
E1$ = "}}}}}}"
L$ = "S"
L_1480: If P9$[32,32] <> "Y" Goto L_1535
L_1490: ! Print @0,16;'CE';"Enter Whse number, 0:none    ";
WHSE = 0
! Input ""F$ \ If F$ = "0" Goto L_1535
call dxget("WHSE",tmp$) \ let f$=RTrim$(tmp$)
X2 = F$
If X2 < 1 Or X2 > D9[5] Or Fra(X2) ! Goto L_1490
	message$="Please select a whse from 1 to "+Str$(D9[5])
	goto OutErr
Endif
WHSE = X2
L_1535: Rem DISCOUNT DOUBLE CHECK
!Print @0,22;'CE';"    SELECT: G:go, R:reselect, E:exit   ";
!Input ""F$ \ If F$ = "E" Goto OUTEND
!If F$ = "R" Goto L_1350
F$="G" ! go baby go
If F$ <> "G" Goto L_1480
Gosub L_7100 ! sort/look 4 llc's
If Not(CHKLLC) Goto L_8900 ! get out if no levels
!! set up file for report 
ReportDir$ = "REPORTDIR" \ System 28,ReportDir$
	BaseName1$ = "cost_updater_883_"+dateusing$(Tim#(0),"YYMMDDHHNNSS")
	StatusFile$ = ReportDir$ + "/"+BaseName1$
	Call FindF(StatusFile$,tmp)
	If tmp Kill StatusFile$
	StatChan = 88 ! FindChannel() ! channel to build text file need fixed channel
	Try Close #88 Else Rem
	Try
		Build #StatChan,StatusFile$ As "TEXT"
	Else
		returnstatus=1
		let e$="Error in Building Status File "
		goto OutErr
	end TRY
	Try Close #StatChan Else Rem
	Try
		Open #StatChan,StatusFile$
	else
		returnstatus=1
		let e$="Error in Opening Status File "
		goto OutErr
	end TRY
	Print #StatChan;"883 - Process Started..."
	! PAUSE 20
	e = AddToMYReports(BaseName1$) 
	if e<0
		e$="Error adding to my reports!" 
		returnstatus=1
		goto OutErr
	endif
	returnstatus=0 ! or is it 1?
	message$="Please check under My Reports "+basename1$+" for status and completion"
	Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
	Call AddToStr(e$,rstr$,WebStr$)                            
	Call SetOutPut(e$,rstr$)
A1$ = " ",A1$
! Print @0,22;'CE';"UPDATING, PLEASE WAIT. . ." \ Signal 3,0
K9$ = " ",K9$
L_1615: Search #9,3,1;K9$,R3,E
If E = 2 Goto OUTEND
If E Gosub ERR_SEARCH
A1$ = K9$[5];R = R3
Y$ = A1$
C2 = R
Read #3,C2,0;P1$;
A$ = R Using "#####   0    0"
Search #6,2,1;A$,I2,E
If A$[15,16] <> P1$[6,7] Let E = 1
If Not(E) Goto L_1690
L_1660: Search #6,3,1;A$,I2,E
If E Goto L_1615
I2 = A$[1,5]
If I2 <> C2 Goto L_1615
If A$[15,16] <> P1$[6,7] Goto L_1660
I2 = 0
A$ = ""
L_1690: ! Print @0,20;"UPDATING ";K9$[5]
print #statchan;"Updating ";k9$[5]
B$ = " ",B$
T0 = 0
For E1 = 1 To 10
  L1[E1] = 0
  T1[I] = 0
  If E1 > 4 Goto L_1735
  G[E1] = 0
L_1735: Next E1
C$ = " ",C$
Mat Read #3,R,0;H$;
A$ = A1$
X1 = 1
Goto L_950
L_3000: Rem EXPLOSION
D0 = 1
A$ = R2 Using "#####   0    0"
Search #6,2,1;A$,R,R1
F$ = A$
If R1 = 0 Goto L_3065
L_3060: Search #6,3,1;F$,R,R1
L_3065: If R1 <> 0 Return 
If A$[1,5] <> F$[1,5] Return 
R3 = F$[1,5] \ If R3 <= 0 Goto L_3060
Read #3,R3,0;P1$;
If F$[15,16] <> P1$[6,7] Goto L_3060
I = 0
F$ = A$
L_3130: Search #6,3,1;F$,S4,R1
If R1 <> 0 Goto L_3540
If A$[1,5] <> F$[1,5] Return 
R3 = F$[1,5] \ If R3 <= 0 Goto L_3130
Read #3,R3,0;P1$;
If F$[15,16] <> P1$[6,7] Goto L_3130
Read #6,S4;S3;
Mat Read #6,S4,6;N1$;
Mat Read #6,S4,48;S2;
Mat Read #6,S4,56;N2$;
R4[I] = S3
H = 999
J$[1,14] = F$[1,14]
S = J$[6,9]
J0$ = "Y";J1$ = "Y"
Gosub L_5000
If J0$ = "N" Goto L_3510
If L$ = "S" Goto L_3510
H = 0
I = 1
L_3270: C$[I * 15 + 1,I * 15 + 14] = E2 Using "#####   0    0"
G$ = C$[I * 15 + 1,I * 15 + 14]
R3 = G$[1,5] \ If R3 <= 0 Goto L_3480
Read #3,R3,0;P1$;
G$[15,16] = P1$[6,7]
Search #6,2,1;G$,R,R1
D0[1] = 1
If R1 = 0 Goto L_3325
L_3320: Search #6,3,1;G$,R,R1
L_3325: If R1 <> 0 Goto L_3480
If G$[1,5] <> C$[I * 15 + 1,I * 15 + 5] Goto L_3480
R3 = G$[1,5] \ If R3 <= 0 Goto L_3320
Read #3,R3,0;P1$;
If G$[15,16] <> P1$[6,7] Goto L_3320
L_3350: G$ = C$[I * 15 + 1,I * 15 + 14]
R3 = G$[1,5] \ Read #3,R3,0;P1$;
G$[15,16] = P1$[6,7]
L_3360: Search #6,3,1;G$,S4,R1
If R1 <> 0 Goto L_3480
If G$[1,5] <> C$[I * 15 + 1,I * 15 + 5] Goto L_3480
R3 = G$[1,5] \ If R3 <= 0 Goto L_3360
Read #3,R3,0;P1$;
If G$[15,16] <> P1$[6,7] Goto L_3360
Read #6,S4;S3;
Mat Read #6,S4,6;N1$;
Mat Read #6,S4,48;S2;
Mat Read #6,S4,56;N2$;
R4[I] = S3
J$ = G$;J0$ = "Y";J1$ = "Y"
Gosub L_5000
C$[I * 15 + 1,I * 15 + 14] = G$
If J0$ = "N" Goto L_3320
I = I + 1
Goto L_3270
L_3480: I = I - 1
If I = 0 Goto L_3510
Goto L_3350
L_3510: C$ = " ",C$
I = 0
Goto L_3130
L_3540: Return 
L_3700: Rem READ PRODWHSE
K30$ = " ",K30$;K30$[1,12] = P$[140,151]
If Not(WHSE) Let K30$[13] = 1 Using "##" Else Let K30$[13] = WHSE Using "##"
Search #7,2,1;K30$,R[7],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_3770
Mat Read #7,R[7],78;W3;
Mat Read #7,R[7],800;WHMISC;
Mat Read #7,R[7],842;WHLM;
If W3[14] > 0 Let PF_LOAD2 = W3[14]
If W3[15] > 0 Let B[21] = W3[15]
If W3[16] > 0 Let B[10] = W3[16]
If W3[17] > 0 Let B[8] = W3[17]
If W3[18] > 0 Let C4[4] = W3[18]
If WHMISC[2] > 0 Let PRPARC[2] = WHMISC[2]
Return 
L_3770: Mat W3 = Zer \ Mat WHMISC = Zer \ Mat WHLM = Zer
W3[0] = 0;WHMISC[0] = 0;WHLM[0] = 0
Return 
L_3800: Rem READ PROD
If S2[3] = 1 Return 
L_3805: Mat Read #3,E2;P$;
Mat Read #3,E2,156;B;
Mat Read #3,E2,256;A;
Mat Read #3,E2,512;PFU1;
Mat Read #3,E2,554;PFU2; \ Mat Read #3,E2,620;LM;
Mat Read #3,E2,596;PRPARC; \ Mat Read #3,E2,894;C4;
Mat Read #3,E2,938;PF_LOAD2;
PREC[0] = E2;R[3] = E2
Read #3,E2,630;LLC;
If WHSE Gosub L_3700 \ Gosub L_69000
If ECOST Gosub L_8300
COST = 0 \ If UCOST = 1 Let COST = B[21]
If UCOST = 2 Let COST = B[8]
If UCOST = 3 Let COST = B[10]
If UCOST = 4 Let COST = C4[4]
If UCOST = 5 Let COST = PF_LOAD2
If UCOST = 6 Let COST = PRPARC[2]
A2 = COST;ECOST = 0
If PFU1[8] <= 0 Let PFU1[8] = PFU1[0]
If PFU1[13] <= 0 Let PFU1[13] = PFU1[0]
Return 
L_4000: Rem UPDATE WHOLE THING
S2[3] = 0;E2 = R3 \ Gosub L_3800
Mat Read #3,E2,156;B
COST = A2[5]
B[4] = COST
COST = A2[6]
B[5] = COST
COST = A2[7]
B[6] = COST
A2[7] = A2[7] - A2[8]
If A2[7] < 0 Let A2[7] = 0
COST = A2[8]
B[18] = COST
COST = A2[5] + A2[6] + A2[7] + A2[8]
B[15] = COST
COST = A2[1] \ Gosub L_6870
B[1] = COST
COST = A2[2] \ Gosub L_6870
B[2] = COST
COST = A2[3] \ Gosub L_6870
B[2] = B[2] + COST
COST = A2[4] \ Gosub L_6870
B[3] = COST
B[14] = B[1] + B[2] + B[3]
Mat Write #3,E2,156;B
L_4225: Rem UPDATE COST
A2[12] = A2[1] + A2[2] + A2[3] + A2[4]
S2[3] = 0;E2 = R3 \ Gosub L_3800
Mat Read #3,E2,156;B
COST = A2[12] \ Gosub L_6870
If COST <= 0 Goto L_4260
If WHSE Gosub L_4400 \ Goto L_4260
If UCOST = 1 Let B[21] = COST
If UCOST = 2 If Not(LM[0]) Let B[8] = COST
If UCOST = 3 Let B[10] = COST
If UCOST = 4 Let C4[4] = COST
If UCOST = 5 If Not(LM[1]) Let PF_LOAD2 = COST
If UCOST = 6 Let PRPARC[2] = COST
Mat Write #3,E2,156;B
Mat Write #3,E2,596;PRPARC
Mat Write #3,E2,894;C4
Mat Write #3,E2,938;PF_LOAD2;
L_4260: Rem.
Unlock #3
For T = 0 To 17
  If T > 10 Goto L_4285
  A4[T] = 0
  A3[T] = 0
L_4285: A2[T] = 0
Next T
Return 
L_4400: Rem WHSE SELECTED
K30$ = " ",K30$;K30$[1,12] = P$[140,151]
If Not(WHSE) Let K30$[13] = 1 Using "##" Else Let K30$[13] = WHSE Using "##"
Search #7,2,1;K30$,R[7],E \ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_4480
Mat Read #7,R[7],78;W3
Mat Read #7,R[7],800;WHMISC \ Mat Read #7,R[7],842;WHLM
If UCOST = 1 Let W3[15] = COST
If UCOST = 2 If Not(WHLM[0]) Let W3[17] = COST
If UCOST = 3 Let W3[16] = COST
If UCOST = 4 Let W3[18] = COST
If UCOST = 5 If Not(WHLM[1]) Let W3[14] = COST
If UCOST = 6 Let WHMISC[2] = COST
Mat Write #7,R[7],78;W3
Mat Write #7,R[7],800;WHMISC;
Return 
L_4480: Rem NOT FOUND - UPDATE SPROD?
Return 
L_4700: Rem EXT WEGHT
E2 = J$[1,5]
Gosub L_3805
If I < 1 Let I8 = 1 \ Goto L_4715
I8 = R4[I - 1] \ If I8 <= 0 Let I8 = 1
L_4715: CNVTA = I8;CNVTU[0] = PFU1[8];CNVTU[1] = 0;CNVTU[2] = 1
Gosub L_6952
If A[5] = 0 Let A[5] = 1
WGHT = (A[6] * AMNT / A[5])
Return 
L_5000: Rem
Gosub L_4700
E2 = J$[10,14]
If S2[3] = 1 Goto L_5040
ECOST = 1 \ Gosub L_3800
If S2[2] = 1 Let J1$ = "N"
If S2[2] = 1 If P$[139,139] = "M" If J1$ = "Y" Gosub L_6500
If J1$ = "N" Return 
If S2[2] = 2 Let J0$ = "N"
S3 = R4[I]
R4[I] = S3;BMAMT = S3
COST = A2
A2 = COST
L_5040: Rem
If I = 0 Goto L_5072
L_5072: If S2[3] = 1 Let P$ = " ",P$;P$[140,141] = "Z ";P$[9,34] = N2$[1,26]
If S2[3] = 1 Goto L_5090
Gosub L_5115
Gosub L_5400
L_5090: Rem
If S2[3] = 1 Goto L_5220
If L$ = "M" Gosub L_5605
If L$ = "M" If Not(I) Let T0 = T0 + I8
If L$ = "S" Let T0 = T0 + I8
Goto L_5195
L_5115: R5 = 1
X9 = 0 \ If I > 0 Let X9 = I - 1
For X = X9 To I
  R5 = R5 * R4[X]
Next X
If I >= 1 Let R5 = R5 / 1
If S2[1] <> 1 Let R5 = R4[I]
X1 = 1
If S2[1] = -1 Let X1 = 1
If S2[1] = 0 Let X1 = .01
If S2[1] = 1 Let X1 = 1
If S2[1] = 2 Let X1 = .01
Return 
L_5195: Rem
If UCOST = 2 If S2[2] <> 2 If P$[139,139] = "M" Gosub L_6200
If S2[1] <> 1 Let R5 = R4[I]
L_5220: Rem
Return 
L_5400: Rem COST CALCULATION & PRINT
ECOST = 1 \ Gosub L_3800
COST = A2 \ If S2[1] = 0 Or S2[1] = 2 Gosub L_6820
I2 = COST
If UCOST = 2 If S2[2] <> 2 If P9$[16,16] = "M" If P$[139,139] = "M" Let I2 = I2 - B[3]
If I2 < 0 Let I2 = COST
I8 = FNR(R5 * I2);X1 = 1
If S2[1] = 0 Let I8 = FNR(R5 * COST);X1 = .01
If S2[1] = 2 Let I8 = FNR((WGHT * R5) * COST);X1 = .01
If UCOST = 2 If S2[2] <> 2 If P9$[16,16] = "M" If P$[139,139] = "M" Let I8 = I8 + B[3]
I8 = FNP(I8)
If I > 0 Goto L_5490
If UCOST = 2 If S2[2] <> 2 If P9$[16,16] = "M" If P$[139,139] = "M" Goto L_5480
If S2[1] = -1 Goto L_5580
If P$[152,155] = "MACH" Goto L_5555
If P$[152,155] = "LABR" Goto L_5555
L_5480: Rem REST JUST COST TIMES QUANTITY
If I > 0 Goto L_5490
A2[1] = A2[1] + I8
L_5490: Return 
L_5555: Rem MACHINE / LABOR
If P$[152,155] = "MACH" Let Z7 = 2 \ A2[6] = A2[6] + R5
If P$[152,155] <> "MACH" Let Z7 = 3 \ A2[5] = A2[5] + R5
A2[Z7] = A2[Z7] + I8
Return 
L_5580: Rem FIXED WHATEVER
A2[4] = A2[4] + I8
A2[7] = A2[7] + R5
If P$[152,155] = "TIME" Let A2[8] = A2[8] + R5
Return 
L_5605: Rem TOTAL COST CALC
P0$ = P$[152,155]
A2[12] = A2[12] + I8
Return 
L_6200: Rem PRDTN=>STK
E2 = J$[10,14] \ Gosub L_3800
BMAMT = R5;S3 = R5
R4[I] = S3
E2 = J$[10,14]
Return 
L_6500: Rem OPTIONAL PATH -> TAKE IT?
Let J0$ = "N" \ Return ! no optionals?
If L$ = "S" Let J0$ = "N" \ Return 
! Print @0,20;'CE';N1$[13,24];" IS OPTIONAL MAKE ITEM.  EXPLODE IT? (Y/N)  ";
!Input ""J0$ \ Print @0,20;'CL'
If J0$ <> "Y" If J0$ <> "N" Goto L_6500
If J0$ = "Y" Return 
If J0$ = "N" Return 
Goto L_6500
L_6550: Rem OPT - RM
J0$ = "N";J1$ = "N" \ Return 
!Print @0,21;'CE';N1$[13,24];" IS OPTIONAL ITEM.  USE IT? (Y/N)  ";
!Input ""J1$ \ Print @0,21;'CL'
If J1$ <> "Y" If J1$ <> "N" Goto L_6550
If J1$ = "Y" Return 
If J1$ = "N" Return 
Goto L_6550
L_6800: Rem BASE(S3) -> PRDTN
CNVTA = S3;CNVTU[0] = 0;CNVTU[1] = S2[0];CNVTU[2] = 5
If (S2[1] = 0 Or S2[1] = 2) Let AMNT = S3 \ Goto L_6810
Gosub L_6950
L_6810: If AMNT <= 0 Let AMNT = S3
BMAMT = AMNT
L_6820: Rem BASE COST -> PRDTN COST
CNVTA = A2 \ CNVTU[0] = 0 \ CNVTU[1] = S2[0] \ CNVTU[2] = 2
Gosub L_6950
If AMNT <= 0 Let AMNT = A2
COST = FNR(AMNT)
Return 
L_6850: Rem PRDTN -> STK  UNITS
CNVTA = BMAMT;CNVTU[0] = PFU1[13];CNVTU[1] = PFU1[8];CNVTU[2] = 5
If (S2[1] = 0 Or S2[1] = 2) Let AMNT = BMAMT \ Goto L_6860
Gosub L_6950
L_6860: If AMNT <= 0 Let AMNT = BMAMT
S3 = AMNT \ Return 
L_6870: Rem STOCK -> BASE COST
CNVTA = COST \ CNVTU[0] = PFU1[8] \ CNVTU[1] = 0 \ CNVTU[2] = 2
Gosub L_6950 \ If AMNT <= 0 Let AMNT = COST
COST = AMNT
Return 
CNVTA = B[3];CNVTU[0] = 0;CNVTU[1] = S2[0];CNVTU[2] = 2
Gosub L_6950 \ B[3] = AMNT
Return 
L_6940: Rem "====== unibasic 5+ logic
Call "MXPRCONV5.DL4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMNT = CNVTA
Return 
L_6950: Rem STD
If S2[3] = 1 Let AMNT = CNVTA \ Goto L_6990
L_6952: Goto L_6940
L_6990: Return 
L_7100: Rem SORT
! Print @0,22;'CE';"SORTING, PLEASE WAIT. . ." \ Signal 3,0
K9$ = " ",K9$
L_7120: Search #9,3,1;K9$,R9,E \ If E > 2 Gosub ERR_SEARCH
If E = 2 Goto L_7200
Search #9,5,1;K9$,R9,E \ If E Gosub ERR_SEARCH
Goto L_7120
L_7200: A1$ = " ",A1$
L_7210: Search #3,3,1;A1$,R3,E \ If E > 2 Gosub ERR_SEARCH
If E = 2 Return 
E2 = R3 \ Gosub L_3800
If LLC Let CHKLLC = LLC
If P$[139,139] <> "M" Goto L_7210
K9$ = " ",K9$
K9$[1,4] = (100 - LLC) Using "####"
K9$[5] = A1$
E = 0
Search #9,4,1;K9$,R3,E \ If E Gosub ERR_SEARCH
Goto L_7210
L_8300: Rem CALC LOADS FROM LOAD MARKUP
If P9$[32,32] = "Y" And WHSE > 0
  If WHLM[0]
    WH = WHSE;LTBL = WHLM[0];CNVTA = 0
    Gosub L_8405 \ If R[3] > 0 Let W3[17] = CNVTA;B[8] = CNVTA
  End If 
  If WHLM[1]
    WH = WHSE;LTBL = WHLM[1];CNVTA = 0
    Gosub L_8405 \ If R[3] > 0 Let W3[14] = CNVTA;PF_LOAD2 = CNVTA
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    Gosub L_8405 \ If R[3] > 0 Let B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    Gosub L_8405 \ If R[3] > 0 Let PF_LOAD2 = CNVTA
  End If 
End If 
Return 
L_8405: Rem CALL
OTYPE = 1
!Call "MXLOAD5",OTYPE,WH,LTBL,PREC[],CNVTA
Call "MXLOAD5.DL4",OTYPE,WH,LTBL,PREC[],CNVTA,IntCo,e$,rstr$
Return 
L_8900: Rem
Message$="THERE ARE NO LLC CODES - PLEASE RUN 882 AND RETRY!"
ReturnStatus=1
Goto OUTERR
L_8950: Message$="YOU ARE NOT AUTHORIZED TO CHANGE COSTS!"
ReturnStatus=1
Goto OUTERR

L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
OutErr: ! something entered wrong
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
End 
OUTEND: Rem EXIT
End
!Print 'CS'
Close 
!Chain "MX000"
End 
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Error 11000
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End