! >>> Program 302A
!
! description CASH RECEIPTS VERIFICATION  part 2 - Summary
!
! loadsave -w -n 100,10 -o prog/dxport/302a.dl4 src/302a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc"
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  3, 2008  10:34:00
Rem /w2/papermaster/r2005//usr/acct/jcs/work/custom/xrev9/mx302a.src (univ2) [jcs] {36053}
Rem  Copyright (c) 2008 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,FindF,InpBuf,String,VerifyDate,Time
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic Sub DateToJulian
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$

! Declare Sub CurrConvUP,CurrConvDown

Rem *     MX302A C/R VERIFICATION LIST   *
Rem **************************************
Rem *   UNIVERSAL BUSINESS SYSTEM        *
try
Com P60$[50],1%,BANK
!If Err 0 Gosub ERR_TRAP
dim 3%,currvar,currfact,currvartot,1%,currid,currpass,bcurrid
Dim 1%,cnvcu[10],3%,cnvca[10]
dim keycurr$[20],currdesc$[30]
Dim 1%,A8,A9,E,L9,P0[1023],2%,J,D9,B6,C9
Dim 1%,A[2],F,L1,P,P1[2],S[2],V,V1,X,TOTALFLAG,TOTALFLAG2
Dim 2%,B[3],D[8],N,R9,L,X1
Dim 3%,T[6],T1[7]
Dim 3%,T9[9],T8[2],M1[9]
Dim 3%,S1[10],S6[5],S7[10],S8[10],S9[10]
Dim C$[30],C1$[24],C2$[30],D$[8],M$[12],P$[127]
Dim Z$[30],P61$[256],HC$[30]
dim USR$[40],p9$[50]
Dim B$[60],T9$[26]
Dim F$[16],X$[10],K9$[60],CUST$[10]
Dim 2%,I2,I3
Dim H$[50],DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[800],tmp1$[200],blockid$[100],msg$[100]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],rstr$[1000],bsdel$[10],esdel$[10],rdel$[10]
! call dxopen() ! needed?

! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)

COID=IntCo ! E = Spc(5) \ COID = Int((E - Int(E / 16384) * 16384) / 64)
Close #1 ! getsession open cntrl# as READONLY
F$="cntrl/cntrl"+Str$(COID)
Open #1,f$
For X = 2 To 6
  Read J
  If J = -1 Goto L_460
  Mat Read #1,88,Abs(J);F$;
  If J < 0 Ropen #X,F$ Else Open #X,F$
L_460: Next X
Data "-1536","-1","-1440","-1488","1456"
Mat Read #1,61,0;P61$;
if p61$[136,136]="Y"
	let f$=coid using "2/CURRENCY#"
	ropen #20,f$
endif
Mat Read #1,60,50;P60$;
Call DXGet("M_BANK",tmp$)
let f$=tmp$
 LET BANK=TMP$
If Len(F$) > 2 OR BANK=0
    Eflg=eflg+1;Message$=Message$+STR$(EFLG)+"- Invalid Bank Number "+ STR$(BANK)
    !goto outend: ! !Print @0,23;'CL RB';"Invalid";
    !Signal 3,10 \ Goto L_1030
  End If 
If P60$[6,6] = "Y"
	 Gosub L_8300
Else 
	BANK = 0
	Gosub L_8000
End If 

!Print 'CS'; Tab 0;"-MX302A-"; Tab 15;"CASH RECEIPTS VERIFICATION";
!L_840: Print @0,9;'CL';" DO YOU WANT TO PRINT IN CUSTOMER NUMBER ORDER (Y/<CR>) ";
!Input ""CUST$
!If CUST$ = "" Let CUST$ = "N"
if eflg goto L_9070: ! have error leave program
LET Cust$="N" 
Call DXGet("M_CUSTORD",tmp$) ! bank - customer order 
if tmp$<>"" let Cust$="Y"
If CUST$ = "" Let CUST$ = "N"
If CUST$ = "Y" Let C9 = 9 
If CUST$ = "N" Let C9 = 2 
L_925: R9 = Chf(4) \ Dim 3%,M9[R9]
R9 = Chf(5) \ Dim 3%,O9[R9]
Gosub L_7000
F = 0
Read #1,0,108;D;
If BANK
  Read #6,BANK,40;I3;
Else 
  Read #1,20,34;I3;
End If 
Read #1,3;P$[1,30];
Mat Read #1,0,100;D$;
Mat Read #1,61,0;P61$;
M$[1,11] = "----,--#.##"
If CUST$ = "Y" Gosub L_6500
! Print @0,22;'CL';"Printing....";
Gosub L_5800
B$ = " ",B$ \ B$ = I3 Using " 1#####"
If BANK Let B$[1,2] = BANK Using "##"
If C9 = 9 Let B$ = " ",B$
L_2000: Search #C9,3,1;B$,L,E
If E Goto L_9100
A8 = B$[1,2] \ I2 = B$[3,7];DTLNO = B$[8,10]
If C9 = 9 Let I2 = B$[9,13];DTLNO = B$[14,16]
If Not(BANK)
  If I2 <= I3 Goto L_2000
  If A8 <> A9 If A9 Gosub L_5000 \ X1 = 0 \ F = 0 \ Gosub L_4500
  If A8 <> A9 If L1 = 8 Gosub L_3000
  A9 = B$[1,2]
Else 
  If I2 <= I3 Goto L_2000
  If L1 = 8
    If A8 > BANK Let A8 = BANK \ Gosub L_3000 \ A8 = B$[1,2] \ Goto L_2070
    Gosub L_3000
L_2070: End If 
  If A8 > BANK Goto L_9100
End If 
Mat Read #2,L;S
Read #2,L,38;D[8];
If Not(F) Read #2,L,86;C$[1,30];
If Not(F) Mat Read #2,L,126;C2$;
If X1 = D[8] Goto L_2120
Gosub L_5000
L_2120: Mat Read #2,L,6;D;
If P61$[41,41] = "Y" ! "only for posting Cust (d[0] could be diff #)
  If DTLNO = 1
    HLDCUST = D[0]
  Else 
    D[0] = HLDCUST
  End If 
End If 
Mat Read #2,L,44;T;
Mat Read #2,L,172;currid;
Mat Read #2,L,174;currfact;
Mat Read #2,L,180;CURRVAR;
If Not(F) Read #2,L,86;C$[1,30],C1$[1,10];
If Not(F) Mat Read #2,L,126;C2$;
If X1 = D[8] Goto L_2200
X1 = D[8]
B6 = 0
B6 = D[6]
F = 0
L_2200: If F > 0 Goto L_2240
If S = 0 Let C$ = "DELETED"
Gosub L_3100
L_2240: If C1$ <> "" Goto L_2270
If T = 0 Goto L_2270
C1$ = T
L_2270: On S Goto L_2290,L_2400,L_2450,L_2490,L_2540,L_2590,pay_dep,app_dep,del_dep
Goto L_2750
L_2290: Rem      TYPE 1 APPLIED.
Gosub L_3200
If Not(T[3]) If Not(T[2]) Goto L_2740
On S[2] Goto L_2350,L_2350,L_2350,L_2360,L_2360,L_2350,L_2350,L_2340,L_2350
Goto L_2360
L_2340: Rem
L_2350: If S[2] > 5 Goto L_2500
L_2360: Rem  DO NOT REMOVE
T1[3] = T1[3] + T[3]
S1[3] = S1[3] + T[3]
Goto L_2740
L_2400: Rem      TYPE 2 UNAPPLIED.
Gosub L_3200
T1[3] = T1[3] + T[3]
S1[3] = S1[3] + T[3]
Goto L_2740
L_2450: Rem      TYPE 3 JOURNAL ENTRY CR.
T1[3] = T1[3] + T[3]
S1[3] = S1[3] + T[3]
Goto L_2740
L_2490: Rem      TYPE 4 JOURNAL ENTRY DR.
L_2500: T[3] = T[2]
T1[3] = T1[3] - T[2]
S1[3] = S1[3] - T[2]
Goto L_2740
L_2540: Rem      TYPE 5 NF.
T[3] = T[2]
T1[3] = T1[3] - T[2]
S1[3] = S1[3] - T[2]
Goto L_2740
L_2590: Rem      TYPE 6 G/L.
If Not(F) Let M9[D[5]] = M9[D[5]] - T[2] + T[3]
If Not(F) Let S7[0] = S7[0] - T[2] + T[3]
If Not(F) Goto L_2740
T1[4] = T1[4] + T[2]
S1[4] = S1[4] + T[2]
T1[5] = T1[5] + T[3]
S1[5] = S1[5] + T[3]
If Not(B6) Let T8[0] = T8[0] + T[2]
If Not(B6) Let S8[0] = S8[0] + T[2]
If B6 = 1 Let T8[1] = T8[1] + T[2]
If B6 = 1 Let S8[1] = S8[1] + T[2]
If B6 = 2 Let T8[2] = T8[2] + T[2]
If B6 = 2 Let S8[2] = S8[2] + T[2]
goto L_2740:

Pay_dep: Rem Type 7 - sales order deposit
if not(f)
	let deptot=deptot-t[2]+t[3]
	let s7[0]=s7[0]-t[2]+t[3]
	goto L_2740:
endif
If Not(B6) Let T8[0] = T8[0] + T[2]
If Not(B6) Let S8[0] = S8[0] + T[2]
If B6 = 1 Let T8[1] = T8[1] + T[2]
If B6 = 1 Let S8[1] = S8[1] + T[2]
If B6 = 2 Let T8[2] = T8[2] + T[2]
If B6 = 2 Let S8[2] = S8[2] + T[2]
goto L_2750

app_dep: Rem Type 8 - sales order deposit applied to invoice
if not(f)
	let deptot=deptot-t[2]+t[3]
	let s7[0]=s7[0]-t[2]+t[3]
	goto L_2740:
endif
If Not(B6) Let T8[0] = T8[0] + T[2]
If Not(B6) Let S8[0] = S8[0] + T[2]
If B6 = 1 Let T8[1] = T8[1] + T[2]
If B6 = 1 Let S8[1] = S8[1] + T[2]
If B6 = 2 Let T8[2] = T8[2] + T[2]
If B6 = 2 Let S8[2] = S8[2] + T[2]
goto L_2750

del_dep: Rem Type 9 - sales order deposit delete
if not(f)
	let deptot=deptot-t[2]+t[3]
	let s7[0]=s7[0]-t[2]+t[3]
	goto L_2740:
endif
If Not(B6) Let T8[0] = T8[0] + T[2]
If Not(B6) Let S8[0] = S8[0] + T[2]
If B6 = 1 Let T8[1] = T8[1] + T[2]
If B6 = 1 Let S8[1] = S8[1] + T[2]
If B6 = 2 Let T8[2] = T8[2] + T[2]
If B6 = 2 Let S8[2] = S8[2] + T[2]
goto L_2750

L_2740: Rem
L_2750: F = 1
Goto L_2000
L_3000: Mat Read #6,A8;Z$;
Print #0;"************* ";Z$;" **************"
L1 = L1 + 1
Return 
L_3100: Rem      PRINT DESCRIPTION.
If Not(S) Return 
T1 = T1 + T[1]
S1 = S1 + T[1]
Return 
L_3200: Rem      PRINT DISCOUNT.
T1[1] = T1[1] + T[4]
S1[1] = S1[1] + T[4]
If D[7] < 0 Let D[7] = 0
If D[7] > (Chf(5) - 1) Let D[7] = 0
O9[D[7]] = O9[D[7]] + T[4]
S9[10] = S9[10] + T[4]
T1[2] = T1[2] + T[6]
S1[2] = S1[2] + T[6]
if p61$[136,136]="Y" and currvar<>0
	Let S7[0] = S7[0] -CURRVAR
	LET CURRVARTOT=CURRVARTOT-CURRVAR
endif
Return 
L_4000: Rem PRINT TOTALS
L1 = L1 + 2
TOTALFLAG2 = 1
If L1 > L9 Gosub L_5800 Else Gosub L_4100
Print #0;"\15\  REPORT TOTALS";
Print #0; Using "###,###,###.##"; Tab 46;S6[0];
If S6[0] <> Abs(S6[0]) Print #0;"DR";
Print #0; Using "####,###.##"; Tab 62;S6[1];
If S6[1] <> Abs(S6[1]) Print #0;"CR";
Print #0; Using "#####,###.##"; Tab 76;S6[2];
If S6[2] <> Abs(S6[2]) Print #0;"DR";
Print #0; Using "#####,###.##"; Tab 90;S6[3];
If S6[3] <> Abs(S6[3]) Print #0;"CR";
Print #0; Using "#####,###.##"; Tab 104;S6[4];
If S6[4] <> Abs(S6[4]) Print #0;"CR";
Print #0; Using "#####,###.##"; Tab 117;S6[5];
If S6[5] <> Abs(S6[5]) Print #0;"CR";
L1 = L1 + 2 \ If L1 > L9 Gosub L_5800
Print #0;"\15\\15\  MTD REPORT TOTALS";
Mat Read #1,110,6;M1;
M1[0] = M1[0] + S6[0] \ M1[4] = M1[4] + S6[0]
M1[1] = M1[1] + S6[1] \ M1[5] = M1[5] + S6[1]
M1[2] = M1[2] + S6[2] - S6[4] \ M1[6] = M1[6] + S6[2] - S6[4]
M1[3] = M1[3] + S6[5] \ M1[7] = M1[7] + S6[5]
M1[8] = M1[8] + S6[3] \ M1[9] = M1[9] + S6[3]
Print #0; Using "##,###,###,###,###.##"; Tab 39;M1[0];
If M1[0] <> Abs(M1[0]) Print #0;"DR";
Print #0; Using "####,###.##"; Tab 62;M1[1];
If M1[1] <> Abs(M1[1]) Print #0;"CR";
Print #0; Using "#####,###.##"; Tab 76;M1[2];
If M1[2] <> Abs(M1[2]) Print #0;"DR";
Print #0; Using "#####,###.##"; Tab 90;M1[8];
If M1[8] <> Abs(M1[8]) Print #0;"CR";
Print #0; Using "##,###,###,###,###.##"; Tab 108;M1[3];
If M1[3] <> Abs(M1[3]) Print #0;"CR";
L1 = L1 + 2 \ If L1 > L9 Gosub L_5800
Print #0;"\15\\15\  YTD REPORT TOTALS";
Print #0; Using "##,###,###,###,###.##"; Tab 39;M1[4];
If M1[4] <> Abs(M1[4]) Print #0;"DR";
Print #0; Using "####,###.##"; Tab 62;M1[5];
If M1[5] <> Abs(M1[5]) Print #0;"CR";
Print #0; Using "######,###.##"; Tab 75;M1[6];
If M1[6] <> Abs(M1[6]) Print #0;"DR";
Print #0; Using "#####,###.##"; Tab 90;M1[9];
If M1[9] <> Abs(M1[9]) Print #0;"CR";
Print #0; Using "##,###,###,###,###.##"; Tab 108;M1[7];
If M1[7] <> Abs(M1[7]) Print #0;"CR";
Return 
L_4100: Rem PRINT HEADINGS FOR REPORT TOTALS
Print #0;"\15\";
Print #0; Tab 52;"ACCOUNTS";
Print #0; Tab 82;"OTHER"; Tab 93;"WRITE OFF";
Print #0; Tab 110;"SUNDRY"
Print #0; Tab 50;"RECEIVABLE"; Tab 65;"DISCOUNTS";
Print #0; Tab 84;"A/R"; Tab 94;"BAD DEBT";
Print #0; Tab 111;"CASH"; Tab 122;"NET CASH"
L1 = L1 + 9
Return 
L_4500: Rem PRINT #0;"\214\"
TOTALFLAG = 1
Gosub L_5800
M9[0] = 0
L1 = L1 + 1
Print #0;"NET CASH................";
Print #0; Using "##,###,###.##"; Tab 45;T1;
If T1 <> Abs(T1) Print #0;"CR";
Print #0;""
L1 = L1 + 1
Print #0;"CASH DISCOUNT...........";
Print #0; Using "##,###,###.##"; Tab 45;O9[0];
If O9 <> Abs(O9) Print #0;"CR";
Print #0;""
L1 = L1 + 1
For X = 1 To (Chf(5) - 1)
  If Not(O9[X]) Goto L_4615
  If L1 > L9 Gosub L_5800
  Mat Read #5,X;C1$;
  Print #0;C1$[1,21];
  Print #0; Using "##,###,###.##"; Tab 45;O9[X];
  If O9[X] <> Abs(O9[X]) Print #0;"CR";
  Print #0;""
  L1 = L1 + 1
  ! Signal 3,2
L_4615: Next X
If L1 > L9 Gosub L_5800
Print #0;"FREIGHT ALLOWANCES......";
Print #0; Using "##,###,###.##"; Tab 45;T1[2];
If T1[2] <> Abs(T1[2]) Print #0;"CR";
Print #0;""
L1 = L1 + 1
If L1 > L9 Gosub L_5800
Print #0;"GROSS A/R CREDIT........";
Print #0; Using "##,###,###.##"; Tab 60;T1[3];
If T1[3] <> Abs(T1[3]) Print #0;"DR";
Print #0;""
L1 = L1 + 1
if deptot<>0 or p61$[94,94]="Y"
	L1 = L1 + 1
	If L1 > L9 Gosub L_5800
	Print #0;"DEPOSITS................";
	Print #0; Using "##,###,###.##"; Tab 60;Deptot;
	If Deptot <> Abs(Deptot) Print #0;"DR";
	Print #0;""
endif
IF currvartot<>0 and p61$[136,136]="Y"  and not(currpass)
	L1 = L1 + 1
	If L1 > L9 Gosub L_5800
	Print #0;"CURRENCY VARIANCE......";
	Print #0; Using "##,###,###.##"; Tab 60;CURRVARTOT;
	If currvartot <> Abs(currvartot) Print #0;"DR";
	Print #0;""
endif
Print #0;"OTHER REC. CREDIT......."
For X = 1 To Chf(4) - 1
  If Not(M9[X]) Goto L_4725
  If L1 > L9 Gosub L_5800
  Mat Read #4,X;C1$;
  Print #0;C1$[1,21];
  Print #0; Using "##,###,###.##"; Tab 60;M9[X];
  If M9[X] <> Abs(M9[X]) Print #0;"DR";
  Print #0;""
  L1 = L1 + 1
  ! Signal 3,2
  M9[0] = M9[0] + M9[X]
L_4725: Next X
Print #0;"........................"
L1 = L1 + 1
If L1 > L9 Gosub L_5800
Print #0;"TOTAL DEBIT ADJUSTMENTS.";
Print #0; Using "##,###,###.##"; Tab 45;T1[5];
If T1[5] <> Abs(T1[5]) Print #0;"DR";
If T1[5] = Abs(T1[5]) Print #0;"CR";
Print #0;""
L1 = L1 + 1 \ If L1 > L9 Gosub L_5800
Print #0;"CREDIT ADJUSTMENTS.....";
Print #0; Using "##,###,###.##"; Tab 45;T8[0];
If T8[0] <> Abs(T8[0]) Print #0;"CR";
Print #0;""
L1 = L1 + 1 \ If L1 > L9 Gosub L_5800
Print #0;"WRITE OFFS (CR.ADJ)....";
Print #0; Using "##,###,###.##"; Tab 45;T8[1];
If T8[1] <> Abs(T8[1]) Print #0;"CR";
Print #0;""
L1 = L1 + 1 \ If L1 > L9 Gosub L_5800
Print #0;"BAD DEBTS (CR.ADJ).....";
Print #0; Using "##,###,###.##"; Tab 45;T8[2];
If T8[2] <> Abs(T8[2]) Print #0;"CR";
Print #0;""
L1 = L1 + 1 \ If (L1 + 4) > L9 Gosub L_5800
Print #0; Tab 44;"--------------"; Tab 59;"--------------"
Print #0; Using "---,---,---.##"; Tab 44;T1 + (T1[4] - T1[5]) + T1[1] + T1[2]; Tab 59;T1[3] + M9[0]+deptot+CURRVARTOT
Print #0; Tab 44;"--------------"; Tab 59;"--------------"
Print #0; Using "---,---,---.##"; Tab 44;(T1 + (T1[4] - T1[5]) + T1[1] + T1[2]) - T1[3] - M9[0] -deptot-CURRVARTOT
L1 = L1 + 4 \ If L1 > L9 Gosub L_5800
For X = 0 To Chf(4) - 1
  M9[X] = 0
Next X
For X = 0 To Chf(5) - 1
  O9[X] = 0
Next X
For X = 0 To 9
  If X < 6 Let T1[X] = 0
  If X < 3 Let T8[X] = 0
Next X
If Not(E) Gosub L_5800
Return 
L_5000: Rem PRINT LINE
If X1 = 0 Return 
Print #0;"\15\";
L1 = L1 + 1
If D = 0 Let C$ = C2$
Print #0; Using "######";D[0]; Tab 10;C$; Tab 40;X1;
Print #0; Using "##,###,###.##"; Tab 47;S1[3];  ! A/R 
S6[0] = S6[0] + S1[3]
If S1[3] <> Abs(S1[3]) Print #0;"DR";
S9[10] = S9[10] + S1[2]
Print #0; Using "####,###.##"; Tab 62;S9[10]; ! DISCOUNT 
If S9[10] <> Abs(S9[10]) Print #0;"CR";
S6[1] = S6[1] + S9[10]
Print #0; Using "#####,###.##"; Tab 76;S7[0]; ! OTHER AR 
If S7[0] <> Abs(S7[0]) Print #0;"DR";
S6[2] = S6[2] + S7
Print #0; Using "#####,###.##"; Tab 90;S8[1] + S8[2]; ! WRITE OFF 
If S8[1] + S8[2] <> Abs(S8[1] + S8[2]) Print #0;"CR";
S6[3] = S6[3] + S8[1] + S8[2]
Print #0; Using "#####,###.##"; Tab 104;S8[0] - S1[5]; ! SUNDRY CASH 
If S8[0] - S1[5] <> Abs(S8[0] - S1[5]) Print #0;"CR";
S6[4] = S6[4] + S8 - S1[5]
Print #0; Using "#####,###.##"; Tab 117;S1[0]; ! NET CASH 
If S1[0] <> Abs(S1[0]) Print #0;"CR";
S6[5] = S6[5] + S1
For X = 0 To 10
  S9[X] = 0
  S8[X] = 0
  S7[X] = 0
  S1[X] = 0
Next X
Gosub L_5700
F = 0
Return 
L_5700: Rem HEADING CHECK
If L1 < L9 Goto L_5730
Gosub L_5800
L_5730: Return 
L_5800: Rem      HEADING ROUTINE.
If V = 0 Goto L_5825
If L9 <> 22 Goto L_5825
!Input "\15\PRESS <CR> TO CONTINUE "F$
!Print 'CS'
L_5825: If V Print #0;"\14\"
V = V + 1
Print #0;" - 302A - "; Tab 8;"DATE: ";D$;
Print #0; Tab 51;P$; Tab 115;"  PAGE ";V;
Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
Print #0; Tab 5;T9$;
If TOTALFLAG Gosub L_6000 \ Goto L_5850
Print #0; Tab 42;"C A S H  R E C E I P T S  L I S T I N G"
Print #0;"\15\";
Print #0; Tab 2;"CUST"; Tab 41;"REF"; Tab 52;"ACCOUNTS";
Print #0; Tab 82;"OTHER"; Tab 93;"WRITE OFF";
Print #0; Tab 110;"SUNDRY"
Print #0; Tab 1;"NUMBER"; Tab 10;"CUSTOMER NAME";
Print #0; Tab 40;"NUMBER"; Tab 50;"RECEIVABLE"; Tab 65;"DISCOUNTS";
Print #0; Tab 84;"A/R"; Tab 94;"BAD DEBT";
Print #0; Tab 111;"CASH"; Tab 122;"NET CASH"
Print #0;"\15\";
L_5850: L1 = 8
Return 
L_6000: Rem TOTALS HEADINGS
Print #0; Tab 42;"C A S H  R E C E I P T S  T O T A L S"
Print #0;"\15\"
Print #0;"********** TOTALS: ************ FOR ";Z$
If TOTALFLAG2 Gosub L_4100 \ Goto L_6100
Print #0;
L_6100: Return 
L_6500: Rem GET IN BANK, CUST ORDER
! Print @0,22;'CL';"Sorting....";
K9$ = " ",K9$
L_6515: Search #9,3,1;K9$,R9,E \ If E = 2 Goto L_6530
If E Gosub ERR_SEARCH
Search #9,5,1;K9$,R9,E \ If E Gosub ERR_SEARCH
Goto L_6515
L_6530: B$ = " ",B$ \ B$ = I3 Using " 1#####"
If BANK Let B$[1,2] = BANK Using "##"
L_6540: Search #2,3,1;B$,L,E \ If E = 2 Goto L_6599
If E Gosub ERR_SEARCH
A8 = B$[1,2] \ I2 = B$[3,7]
If I2 <= I3 Goto L_6540
If BANK If A8 <> BANK Goto L_6599
DTLNO = B$[8,10]
If P61$[41,41] <> "Y" Or DTLNO <= 1
  Mat Read #2,L,6;D;
End If 
K9$ = " ",K9$ \ K9$[1,2] = B$[1,2] \ K9$[3,8] = D[0] Using "######"
K9$[9] = B$[3]
Search #9,4,1;K9$,L,E \ If E Gosub ERR_SEARCH
Goto L_6540
L_6599: Return 
L_7000: Rem CHECK PRINTER TYPE
F = 0
!If Err 0 Let F = Spc(8)
!N = Chf(0)
!If Err 0 Gosub ERR_ESCAPE
L9 = 60
!If F Let L9 = 22
!F = 0
!Print 'CR MU';"PRINTING, PLEASE WAIT . . . ";'CL'
!If L9 = 22 Print 'CS'
!Signal 3,0
Return 
L_8000: Rem TEST PROCESS STATUS
FLAGB = 1
Mat Read #1,120;P0;
If P0[301] <> 0 Let P0 = 1 \ Goto L_8090
If P0[302] <> 0 Let P0 = 2 \ Goto L_8090
If P0[304] <> 0 Let P0 = 3 \ Goto L_8090
If P0[305] <> 0 Let P0 = 5 \ Goto L_8090
If P0[306] <> 0 Let P0 = 3 \ Goto L_8090
If P0[311] <> 0 Let P0 = 5 \ Goto L_8090
If P0[227] <> 0 Let P0 = 5 \ Goto L_8090
FLAGB = 2
Read #1,20,8;P0[0];
If P0[0] Goto L_8090
Goto L_8200
L_8090: S0 = P0[0]
If S0 = 0 Or S0 = 2 Goto L_8200
Goto L_8600
L_8200: I = 302 \ P0[0] = 0
!Call "getuidrec",UIDREC[1]
UIDRec[1] = GetUIDRec(e$,IntCo,Userid$)
P0[I] = UIDREC[1]
Mat Write #1,120;P0;
P0[0] = 2 \ Write #1,20,8;P0[0];
Return 1
L_8300: Rem TEST PROCESS STATUS C/R BY BANK
FLAGB = 3
Read #1,20,8;S0;
Mat Read #1,120;P0;
If S0 Goto L_8620
FLAGB = 4
Mat Read #1,120;P0;
X2 = 0
If P0[302] <> 0 Let P0 = 2 \ Goto L_8390
If P0[304] <> 0 Let P0 = 3 \ Goto L_8390
If P0[305] <> 0 Let P0 = 5 \ Goto L_8390
If P0[306] <> 0 Let P0 = 3 \ Goto L_8390
If P0[311] <> 0 Let P0 = 5 \ Goto L_8390
If P0[227] <> 0 Let P0 = 5 \ Goto L_8390
L_8350: Rem NEXT I
FLAGB = 5
Read #6,BANK,36;P0[0];
If P0[0] Goto L_8390
Goto L_8490
L_8390: S0 = P0[0]
If Not(S0) Or S0 = 2 Goto L_8490
Goto L_8600
L_8490: I = 302 \ P0[0] = 0
!Call "getuidrec",UIDREC[1]
UIDRec[1] = GetUIDRec(e$,IntCo,Userid$)
P0[I] = UIDREC[1]
Mat Write #1,120;P0;
P0[0] = 2 \ Write #6,BANK,36;P0[0];
Return 
L_8600: Rem display ip
S0 = Int(S0)
L_8620: !  Print 'CR RB';" ";
Rem IF PORT FLAGS NOT CHECKED, CHECK TO GIVE CLUES ON PROBLEM PORT
Rem THIS PORT IS THE PROBLEM
L_8625: Rem SEARCH FOR PORT # DONE- NOW GIVE MESSAGE
On S0 Goto L_8650,L_8660,L_8670,L_8680,L_8690
L_8630:eflg=eflg+1
Message$=Message$+str$(eflg)+" - CANNOT LIST" 
!\ Signal 3,20 \ Return 
Return 

L_8650:  ! Print "ENTRY RUNNING(301 OR 303)";
eflg=eflg+1
Message$=Message$+Str$(eflg)+"-ENTRY RUNNING(301 OR 303)  "
If P0[301] Or P0[303]
  UIDREC = P0[301]
  If Not(UIDREC) Let UIDREC = P0[303]
  !Call "getuidinfo",UIDREC,USR$
   USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
  Message$=Message$+" BY USER "+USR$[21]
End If 
Goto L_8630
L_8660: !Print "VERF.LIST(302)";
eflg=eflg+1
Message$=Message$+Str$(eflg)+"-VERF.LIST(302) "
If P60$[6,6] <> "Y" Message$=Message$+ " OR 306"
Message$=Message$+" IN PROGRESS"
If P0[302] Or P0[306]
  UIDREC = P0[302]
  If Not(UIDREC) Let UIDREC = P0[306]
  !Call "getuidinfo",UIDREC,USR$
   USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
  Message$=Message$+" BY USER "+USR$[21] !Print " BY USER ";USR$[21];
End If 
Goto L_8630
L_8670:!  Print "JOURNAL(304";
eflg=eflg+1
Message$=Message$+Str$(eflg)+"-JOURNAL(304  "
If P60$[6,6] = "Y" let message$=message$+" OR 306"
Message$=Message$+") IN PROGRESS"
If P0[304] Or P0[306]
  UIDREC = P0[304]
  If Not(UIDREC) Let UIDREC = P0[306]
  !Call "getuidinfo",UIDREC,USR$
  USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
  Message$=Message$+" BY USER "+USR$[21] !Print " BY USER ";USR$[21];
End If 
Goto L_8630
L_8680: ! Print "JOURNAL(304) HAS BEEN RUN"
eflg=eflg+1
Message$=Message$+Str$(eflg)
Message$=Message$+"Journal (304) Had Been Run. "
Message$=Message$+"JOURNAL AND ACCEPT(304 & 305) MUST BE RUN BEFORE MORE ENTRIES CAN"
message$=Message$+ "BE MADE"
! Signal 3,30
Goto L_8630
L_8690: ! Print "ACCEPT(305, 311, 320 OR 227) IN PROGRESS";
Message$=Message$+Str$(eflg)
Message$=Message$+"ACCEPT(305, 311, 320 OR 227) IN PROGRESS"
UIDREC = 0
If P0[305] Let UIDREC = Int(P0[305])
If Not(UIDREC) If P0[311] Let UIDREC = Int(P0[311])
If Not(UIDREC) If P0[227] Let UIDREC = Int(P0[227])
If UIDREC
  !Call "getuidinfo",UIDREC,USR$
   USR$ = GetUIDInfo$(e$,IntCo,UIDRec)
  Message$=Message$+" BY USER "+USR$[21] !Print " BY USER ";USR$[21];
End If 
Goto L_8630
L_8900: Print #0;"\15\\15\"
L1 = L1 + 3
Print #0;" "
Gosub L_4000
Print #0;"\15\\15\ - END -"
TOTALFLAG = 0 \ TOTALFLAG2 = 0
If BANK
  X = 0 \ Write #6,BANK,36;X;
Else 
  X = 0 \ Write #1,20,8;X;
End If 
! If L9 = 22 Input "\15\PRESS <CR> TO EXIT "F$
GOTO OUTEND:

L_9100: Gosub L_5000
Gosub L_4500
Goto L_8900
Stop ! how did it get here 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End

OUTEND: Rem RESET
Mat Read #1,120;P0
P0[302] = 0
Mat Write #1,120;P0;
If BANK
  Read #6,BANK,36;P0 \ If P0 < 3 Let P0 = 0
  Write #6,BANK,36;P0;
Else 
  Read #1,20,8;P0 \ If P0 < 3 Let P0 = 0
  Write #1,20,8;P0;
End If 
L_9070: Rem CLOSE
!Chain "MX000C"
!Stop 
Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
returnstatus=0

If Eflg>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Else
	let message$="Report Complete"
endif
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
try Call dxclose() else rem
ELSE
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
end try
End ! the whole program
