! >>> Program 695b
!
! description PHYSICAL INVENTORY VARIANCE COUNT SHEETS WITH RASL
!
! loadsave -w -n 100,10 -o prog/dxport/695b.dl4 src/695b.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB  9, 2006  14:42:47
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/mx/mx695b.src (univ2) [txc] {49115}
Rem  Copyright (c) 2006 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "librasl.lib"
Declare External Sub ChkWHRasl
Declare Intrinsic Sub InpBuf,String
!!Option Default Dialect IRIS1
Rem MX695B     -  PHYSICAL INVENTORY VARIANCE COUNT SHEETS WITH RASL
Rem
Rem REV. 1.2 - 02/18/85 -    - REV. 3/85 FOR MULTI-WHSE
Com 1%,PFU1[20],CNVTU[2],UN[2],W9[5],3%,PFU2[6],CNVTA,A[33]
If Err 0 Gosub ERR_TRAP
! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim K1$[50],P1$[26],P2$[28],D1$[30],N$[30],D$[50],D8$[8],K9$[50],TP1$[26],TP2$[28]
Dim 3%,P1[2],T[9],T1[9],T2[9],TP1[2],SKUN[5],BASE[5]
Dim 3%,P3[3],K5$[20],T9[9],W3[24],BASE$[4],FAKE
Dim 3%,AMOUNT,CUNIT,SUNIT,CTUNIT,BKUNIT,SUNIT$[4],CUNIT$[4],CTUNIT$[4],PLOC$[18],VARIANT
Dim 1%,D[5],PL1[1],WL1[2],RASL[5],2%,P9,C1
Dim STAG$[6],ETAG$[6],SORT$[60],TIER$[5],K10$[50]
Dim W9$[2],K2$[20],K3$[20],K4$[20],J$[10],K15$[50],VENDCODE$[20],LOC1$[6],LOC2$[6]
Dim P9$[50],X$[10],P0$[156],2%,D9[20],W1$[32],W2$[16],A$[156],Z1$[50],K7$[50]
!
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[100],message$[500],msg$[500],webstr$[1000]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="Z",EndParam$
!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!

If Err 0 Let F = Spc(8)
N = Chf(0)
If Err 0 Gosub ERR_TRAP
L9 = 60;scrn=0
If F Let L9 = 20;scrn=1
Def FNR(X) = Int((X) * 100 + .5) * .01
!For I = 0 To 5
 ! Read D[I]
!Next I
!Data "8","116","139","0","256","240"
!D[0]=8;D[1]

For I = 2 To 10
  Read X
  If X = -1 Goto L_260
  Read #1,88,Abs(X);K1$[1,16];
  If X <= 0 Ropen #I,K1$ Else Open #I,K1$
L_260: Next I
Data "704","-2528","-1792","-1728","-1744","-208","-1","-1","-2736"
Mat Read #1,3,0;N$;
Mat Read #1,3,164;D8$;
Mat Read #1,115;D9;
Mat Read #1,19,50;P9$;
RASL = 0
D[0] = D9[2] \ D[2] = D9[3] \ D[3] = D9[5] \ D[4] = D9[6] \ D[5] = D9[4]
If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
If P9$[41,41] = "W" And W9 <> 0 Call ChkWhRasl(e$,intco,Ctlc,0,W9,RASL[])
eflag=0;msg$=""
L_310: !Print @0,6;'CE';"ENTER THE POSITION OF THE SYSTEM ON HAND (1-5),  E: TO EXIT: ";
!Input ""K9$ \ If K9$ = "E" Goto L_9020
!If K9$ = "" Goto L_310
call dxget("POHAND",k9$)
SYS = K9$
If SYS < 1 Or SYS > 5 !Goto L_310
	let eflag=eflag+1
	msg$=Str$(Eflag)+" Invalid On Hand Position  "
Endif
L_335: !Print @0,7;'CE';"ENTER THE POSITION OF THE COUNTED QTY (1-5),  E: TO EXIT: ";
!Input ""K9$ \ If K9$ = "E" Goto L_9020
!If K9$ = "" Goto L_335
call dxget("PCOUNT",k9$)
COUNT = K9$
If (COUNT < 1 Or COUNT > 5) or Count=SYS !  Goto L_335
!If COUNT = SYS Goto L_335
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Invalid Count Position  "
Endif
L_400: Rem PRINT @0,9;'CE';"ENTER ";'BRBD';"D";'EDER';"OLLARS OR ";'BRBD';"Q";'ERED';"UANTITY OR ";'BRBD';"E";'ERED';"XIT: ";
!Print @0,9;'CE';"ENTER  D: DOLLARS,  Q: QUANTITY OR  E: EXIT: ";
TYPE = 0
!Input ""K9$ \ If K9$ = "E" Goto L_9020
Call dxget("VARTYPE",tmp$) \ K9$=UCase$(tmp$)
If K9$ = "Q" Let TYPE = 1
If K9$ = "D" Let TYPE = 2
If Not(TYPE) ! Goto L_400
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Invalid Variance Type (Q/D Only)  "
Endif
L_450: Rem PRINT @0,10;'CE';"ENTER ";'BRBD';"C";'EDER';"ONSTANT VARIANCE OR ";'BRBD';"P";'ERED';"ERCENTAGE OR ";'BRBD';"E";'ERED';"XIT: ";
! Print @0,10;'CE';"ENTER  C: CONSTANT VARIANCE,  P: PERCENTAGE OR  E: EXIT: ";
VTYPE = 0
! Input ""K9$ \ If K9$ = "E" Goto L_9020
Call dxget("VTYPE",tmp$) \ K9$=UCase$(tmp$)
If K9$ = "C" Let VTYPE = 1
If K9$ = "P" Let VTYPE = 2
If Not(VTYPE) ! Goto L_450
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Invalid Type (C/P Only)  "
Endif
! Print @0,12;'CE';"ENTER VARIANCE AMOUNT, OR  E: TO EXIT: ";
! Input ""K9$ \ If K9$ = "E" Goto L_9020
Call dxget("VAMNT",K9$)
VAMOUNT = K9$
L_900: Rem ENTER WAREHOUSE
If Not(W9) ! "only if not already entered
  !Print @0,14;'CE';"ENTER WAREHOUSE, OR  E: TO EXIT  ";
  !Input ""D$ \ If D$ = "E" Goto L_9020
  Call dxget("WHSE",d$)
  W9 = D$
  If W9 > D9[5] Or W9 < 1 ! Let W9 = 0 \ Goto L_900
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Invalid Warehouse 1-"+Str$(D9[5])+"  "
  Endif
  ! If P9$[41,41] = "W" Call "CHKWRASL",W9,RASL[]
Else 
  !Print @0,14;'CE';"WAREHOUSE ";W9
End If 
Call ChkWhRasl(e$,intco,Ctlc,0,W9,RASL[])
if not(Rasl)
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Whse "+Str$(W9)+" is not RASL  "
Endif
Random (1)
L_1000: !Print @0,16;"ENTER STARTING TAG/LOCATION, OR  E: TO EXIT:  ";
!Input ""STAG$ \ If STAG$ = "E" Goto L_9020
Call dxget("STAG",tmp$) \ stag$=RTrim$(tmp$)
If STAG$ = "" Let STAG$ = "      "
!Print @8,17;"ENDING TAG/LOCATION, OR  E: TO EXIT:   ";
!Input ""ETAG$ \ If ETAG$ = "E" Goto L_9020
call dxget("ETAG",tmp$) \ etag$=RTrim$(TMP$)
If ETAG$ = "" Let ETAG$ = "}}}}}}"
If ETAG$ < STAG$ !Goto L_1090
!Print @0,22;'RB CE';"INVALID RANGE!" \ Signal 3,20
!Print @0,16;'CE'; \ Goto L_1000
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Invalid Tag Range  "
Endif
L_1090: Rem FINALLY PAGE BREAK
L_1100: !Print @0,18;'CE';"  0: all bins,  1: odd bins,  2: even bins  ";
!Input ""Z1$ \ If Z1$ = "E" Goto L_9020
call dxget("BSEL",z1$)
FILTER = Z1$
If FILTER > 2 ! Goto L_1100
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Bin Selector is 0-2  "
Endif
Gosub L_8500 ! get whse control
!Print @0,19;'CE';"  PAGE BREAK ON ITEM CHANGE? (Y/N)   ";
!Input ""Z1$ \ If Z1$ = "E" Goto L_9020
call dxget("PGBRK",tmp$) \ z1$="N"
if UCase$(RTrim$(tmp$))="Y" let z1$="Y"
If Z1$ <> "Y" and Z1$ <> "N" ! Goto L_1100
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Page Break is Y or N  "
Endif
PGBRK = 0 \ If Z1$ = "Y" Let PGBRK = 1
L_1250: Rem"cct186303
!Print @0,20;'CE';"  PRINT ONLY CATCH WEIGHT ITEMS? (Y/N)   ";
!Input ""Z1$ \ If Z1$ = "E" Goto L_9020
call dxget("CWTONLY",tmp$) \ z1$="N"
if UCase$(RTrim$(tmp$))="Y" let z1$="Y"
If Z1$ <> "Y" and Z1$ <> "N" ! Goto L_1250
	eflag=eflag+1
	msg$=msg$+Str$(Eflag)+" Catch Wgt Only is Y or N  "
Endif
PRNTCWT = 0 \ If Z1$ = "Y" Let PRNTCWT = 1
L_1450: Rem "================== all picked
!Print @10,22;'CL'; \ Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "Z1$ \ If Z1$ = "E" Goto L_9020
!If Z1$ = "R" Goto L_310
!If Z1$ <> "P" Goto L_1450
If EFlag>0 goto OutErr
if scrn
	let msg$="Browser Option is not available"
	eflag=1
	goto OutErr
Endif
If scrn = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!
Goto L_1900 ! evidently no sort
!Print @0,22;'CE';"SORTING, PLEASE WAIT. . " \ Signal 3,0
K7$ = " ",K7$
L_1520: Search #9,3,1;K7$,R9,E \ If E Goto L_1550
Search #9,5,1;K7$,R9,E \ If E Error 11000 ! Gosub ERR_SEARCH
Goto L_1520
L_1550: Rem THRU TAGE
K7$ = " ",K7$;K7$[1,2] = W9 Using "##"
L_1560: Search #2,3,2;K7$,R1,E \ If E > 2 Error 11000 ! Gosub ERR_SEARCH
If E Goto L_1900
X2 = K7$[1,2] \ If X2 <> W9 Goto L_1900
Mat Read #2,R1,0;P1$;
If P1$[1,Len(STAG$)] < STAG$ Goto L_1560
If P1$[1,Len(ETAG$)] > ETAG$ Goto L_1560
If P1$[7,10] = "VOID" Goto L_1560
K1$ = " ",K1$;K1$[1,12] = P1$[7,18];K1$[13,18] = P1$[1,6];R1 = K7$[3,8]
Search #9,4,1;K1$,R1,E \ If E > 1 Error 11000 ! Gosub ERR_SEARCH
Goto L_1560
! if sorted (should not do on RASL!)
L_1900: ! If L9 = 60 Print @0,22;'CE';"PRINTING...PLEASE WAIT";
If RASL Let CH = 2;DIR = 3 Else Let CH = 9;DIR = 1
X0 = 1 \ If W9 Let X0 = W9
! If Scrn Print 'CS'
If Err 0 Gosub ERR_TRAP
Gosub L_5800
L_1925: Rem.
SORT$ = " ",SORT$;SORT$[1,2] = W9 Using "##"
If RASL Let SORT$[1,2] = W9 Using "##"
L_1932: E8 = Spc(14) \ If E8 Goto L_1932
E8 = 0
L_1940: Search #2,3,3;SORT$,R1,E \ If E > 2 Error 11000 ! Gosub ERR_SEARCH
If E = 2 Let E8 = 9
If E Goto L_8000
W9[1] = SORT$[1,2]
If W9 If W9[1] <> W9 Goto L_8000
If W9 If W9 < W9[1] Let E8 = 9 \ Goto L_8000
If W9$ <> SORT$[1,2] Gosub L_4500
Mat Read #2,R1,0;P1$;
Gosub L_8600 \ Goto L_1940
If P1$[1,Len(STAG$)] < STAG$ Goto L_1940
If P1$[1,Len(ETAG$)] > ETAG$ Let E8 = 9 \ Goto L_8000
If P1$[7,10] = "VOID" Goto L_1940
Gosub L_3000 \ Goto L_1940
Rem holder comment
If PRNTCWT If A$[127,127] <> "Y" Goto L_1940
Gosub L_2500
K4$[1,12] = K2$[1,12]
Mat Read #2,R1,25;P1;
Mat Read #2,R1,44;P2$;
If P1[0] = -99 Let P1[0] = 0;SKP = 99 Else Let SKP = 0
If P1$[7,10] = "VOID" Goto L_2270
Gosub L_3200
Gosub L_3500
Gosub L_10000
If TYPE = 1
  If VTYPE = 1 If Abs(BKUNIT2 - SUNIT) >= VAMOUNT Goto L_2270
  If BKUNIT2 If VTYPE = 2 If Abs(BKUNIT2 - SUNIT) / BKUNIT2 * 100 >= VAMOUNT Goto L_2270
End If 
If TYPE = 2
  If VTYPE = 1 If Abs(((P3[0] - P3[1]) * C1) - (P1[0] * C1)) >= VAMOUNT Goto L_2270
  If ((P3[0] - P3[1]) * C1) If VTYPE = 2 If Abs((P3[0] - P3[1]) - (P1[0])) / (P3[0] - P3[1]) * 100 >= VAMOUNT Goto L_2270
End If 
Goto L_1940
L_2270: Rem IF W2$[1,6]<>"      " LET LOC1$=W2$[1,6] ELSE  LET LOC1$=A$[127,132] ! "no sprod locations
If W1$[13,18] <> "      " Let VENDCODE$ = W1$[13,32] Else Let VENDCODE$ = A$[93,112]
If TYPE = 1 Let VARIANT = (STKUNIT - BKUNIT) Else Let VARIANT = FNR((T9[0] - A[0]) * C1)
Gosub L_5000
T[0] = T[0] + SUNIT
Gosub L_4000
Goto L_1940
L_2500: Rem LOOP IT HERE !!
K9$ = " ",K9$
K9$[1,2] = W9 Using "##";K9$[3,8] = V3 Using "######"
If L8 Return 
T9[0] = 0 \ T[1] = 0
L_2510: Search #2,3,2;K9$,R9,V2
If V2 Goto L_2750
X2 = K9$[1,2] \ If X2 <> W9 Goto L_2750
X2 = K9$[3,8] \ If X2 <> V3 Goto L_2750
Mat Read #2,R9,0;TP1$;
Mat Read #2,R9,25;TP1;
Mat Read #2,R9,44;TP2$;
If TP1$[7,10] = "VOID" Goto L_2510
If TP1[0] = -99 Goto L_2510
T9[0] = T9[0] + TP1[0]
T[1] = T[1] + FNR(TP1[0] * C1)
Goto L_2510
L_2750: CNVTU[0] = 0 \ CNVTU[1] = PFU1[8]
CNVTU[2] = 1 \ CNVTA = T9[0]
Gosub L_20000
STKUNIT = AMOUNT
Return 
L_3000: Rem READ PRODUCT
K2$ = P1$[7,18]
Search #4,2,1;K2$,V3,E \ If E > 1 Error 11000 ! Gosub ERR_SEARCH
If E Goto L_3120
Read #4,V3,236;P9;
Mat Read #4,V3,D[0];D1$;
Mat Read #4,V3,0;A$;
Mat Read #4,V3,512;PFU1;
Mat Read #4,V3,554;PFU2;
Read #4,V3,D[5];C1;
If P9 = 0 Let P9 = 1
Mat Read #4,V3,0;P0$;
For STK = 0 To 7
  If PFU1[STK] = PFU1[8] Goto L_3105
Next STK
E = 0 \ Error 11000 ! Gosub ERR_SEARCH
L_3105: Rem
Return 1
L_3120: Rem NOT FOUND !!
D1$[1,30] = "PRODUCT NOT FOUND !!"
C1 = 0
For I = 0 To 4 \ A[I] = 0
Next I
P1$[7,18] = "VOID        "
P9 = 1
Mat Write #2,R1,0;P1$;
Return 
L_3200: Rem GET LOT INFO
If D$[3,14] = P1$[7,18] If D$[15,26] = P2$[1,12] Return 
D$ = " ",D$ \ D$[1,2] = W9[1] Using "##" \ D$[3,8] = P2$[23,28]
D$[9,20] = P1$[7,18] \ D$[21] = P2$[1,22]
Search #3,2,3;D$,V4,E \ If E > 1 Error 11000 ! Gosub ERR_SEARCH
If E Return 
Mat Read #3,V4,82;P3;
A[0] = A[0] + (P3 - P3[1])
If P3[2] Let C1 = P3[2]
Return 
L_3300: Rem PROD LOC
PLOC$ = " ",PLOC$
Search #7,3,1;K7$,R7,E
If E Return 
If K7$[1,12] <> P1$[7,18] Return 
Mat Read #7,R7,18;PL1;
If PL1[0] <> W9 Return 
Mat Read #7,R7,0;PLOC$;
Return 
K7$ = " ",K7$ \ K7$[1,12] = P1$[7,18]
PTAB = 15 \ K7$[13,14] = W9 Using "##"
L_3420: Gosub L_3300
If PLOC$[13,18] = "      " Return 
Print #0; Tab PTAB;PLOC$[13,18];
PTAB = PTAB + 8
If PTAB > 119 Let PTAB = 15 \ Print #0;" " \ L = L + 1
Goto L_3420
L_3500: Rem READ WAREHOUSE
For X = 0 To 24 \ W3[X] = 0 \ Next X
W1$ = " ",W1$ \ W2$ = " ",W2$
K15$ = " ",K15$
K15$[1,12] = K4$[1,12]
K15$[13,14] = W9[1] Using "##"
Search #6,2,1;K15$,R5,E
If E Goto L_3570
Mat Read #6,R5,0;W1$;
Mat Read #6,R5,78;W3;
Mat Read #6,R5,404;W2$;
L_3570: A[0] = W3[0]
Return 
L_4000: Rem TOTAL FOR THIS PART
Goto L_4210
If L8 = 0 Return 1
If L8 = 1 Goto L_4070
Print #0; Tab 50;"TAG TOTALS";
Print #0; Using "------#.##"; Tab 70;T[0];
Print #0; Using "---------#.##"; Tab 84;T[1]
L = L + 1
L_4070: Print #0; Tab 50;"BOOK TOTALS";
X = W9$
X = X - 1
X = 0
If D[3] = 0 Let X = 0
If X > 4 Let X = 4
Print #0; Using "------#.## "; Tab 70;BKUNIT;SUNIT$;
Print #0; Using "---------#.##"; Tab 84;FNR(A[0] * C1);
T[2] = T[0] - BKUNIT
T9[1] = T9[0] - A[0]
Print #0; Using "-------#.##";T[2];
Print #0; Using "---------#.##";FNR(T9[1] * C1)
L = L + 2
Print #0;" "
L_4210: T1 = T1 + T[0]
T1[1] = T1[1] + T[1]
T1[2] = T1[2] + BKUNIT
T1[3] = T1[3] + FNR(A[0] * C1)
T1[4] = T1[4] + T[2]
T1[5] = T1[5] + (T9[1] * C1)
For I = 0 To 9
  T[I] = 0
  T9[I] = 0
Next I
If PRTFLAG If PGBRK Let L = 99
L8 = 0 \ A[0] = 0
If PRTFLAG If Not(PGBRK) Print #0;"\15\" \ L = L + 1
PRTFLAG = 0
If L > L9 Gosub L_5800
Return 
L_4500: Rem CHECK WAREHOUSE
If K4$ = "" Goto L_4550
Goto L_8000
L_4530: Rem
Gosub L_5800
If X0 > D[3] Let E9 = 1 \ Goto L_8100
X0 = X0 + 1
L_4550: Rem PRINT WAREHOUSE
W9$ = X0 Using "##"
Print #0;"  WAREHOUSE: ";W9$
L = L + 3
If E8 If W9 = 0 If E9 = 0 Goto L_1925
Return 
L_5000: Rem PRINT LINE
If Not(L8) And L + 5 > L9 Gosub L_5800
If L8 >= 1 !!! IF MORE THAN 1 SKIP # & NAME
  If L + 2 > L9 Gosub L_5800
  Goto L_5140
End If 
Print #0; Tab 1;"LOCATION : ";P2$[23,28];" ";P1$[7,18];D1$[1,30];" ";P0$[63,83];
Print #0; Tab 88;"BASE UNIT =     ";BASE$;
Print #0; Tab 113;"STOCK UNIT =    ";SUNIT$
If STK Print #0; Using "######"; Tab 105;"      PACK = ";PFU2[STK - 1] Else Print #0;" "
L = L + 2
CTQTY = T9[0] \ Gosub L_7000
Print #0; Tab 108;"ADJUST AREA "
L = L + 1
L_5140: Rem IF L>L9 GOSUB L_5800: ! "PAGE BREAK
If P9$[1,1] = "N" Goto L_5180
If P9$[1,1] = "Y" Goto L_5170
If P0$[113,113] <> "Y" Goto L_5180
L_5170: Rem IF L>L9 GOSUB L_5800: ! "PAGE BREAK
L_5180: Rem PRINT #0; TAB 20;P1$[25,26]; ! "whse
Print #0; Tab 10;"TAG NO. ";P1$[1,6];
If SKP Print #0; Tab 25;"SKIPPED";
L8 = L8 + 1
Print #0; Tab 35;"UNIT=";SUNIT$;"=__________________________";BASE$;"=____________";
Print #0;"          __________ ";SUNIT$;" __________ ";BASE$
L = L + 1
Print #0; Tab 20; \ CTQTY = P1[0] \ Gosub L_7000
L = L + 1
PRTFLAG = 99
Return 
L_5800: Rem TOP OF FORM
If P = 0 Goto L_5835
!If L9 <> 20 Goto L_5830
!Print "\15\PRESS <CR> TO CONTINUE ";
!Input ""J$
!Print 'CS';
L_5830: Print #0;"\14\"
L_5835: P = P + 1
Print #0; Tab 2;D8$; Tab (66 - (Len(N$) / 2));N$; Tab 115;"PAGE ";P
Print #0;" - 695 - ";Msc$(3);
Print #0; Tab 34;"I N V E N T O R Y   V A R I A N C E   C O U N T   S H E E T S "
Print #0;" "
Print #0; Tab 1;"PRODUCT"; Tab 19;"D E S C R I P T I O N";
Print #0; Tab 80;"VENDOR ITEM CODE"
Gosub L_4550
Print #0; Using "PHYSICAL##"; Tab 5;(SYS * 10) + COUNT
L = 7
Return 
L_7000: Rem PRINT REAL AND FAKE AMOUNTS
For X2 = 1 To 5
  CNVTU[0] = 0 \ CNVTU[1] = PFU1[8]
  CNVTU[2] = 1
  If X2 = SYS ! AND NOT L8
    If Not(L8) Let SKUN[SYS] = Int(BKUNIT) Else Let SKUN[SYS] = Int(BKUNIT2)
    If L8 If STK Let BASE[SYS] = P3[0] - P3[1] - (PFU2[STK - 1] * SKUN[SYS])
    If Not(L8) If STK Let BASE[SYS] = A[0] - (PFU2[STK - 1] * SKUN[SYS])
    If Not(STK) Let BASE[SYS] = A[0] - SKUN[SYS]
  End If 
  If X2 = COUNT
    If L8
      CNVTA = P1[0] \ Gosub L_20000
      STKUNIT = AMOUNT
    End If 
    SKUN[COUNT] = Int(STKUNIT)
    If STK Let BASE[COUNT] = CTQTY - (PFU2[STK - 1] * SKUN[COUNT])
    If Not(STK) Let BASE[COUNT] = CTQTY - SKUN[COUNT]
  End If 
  If (X2 <> SYS) And X2 <> COUNT
    SIGN = Rnd(101)
L_7180: PRCNT = Rnd(21)
    PRCNT = Int(PRCNT)
    If Not(PRCNT) Goto L_7180
    If SIGN > 50 Let SIGN = -1 Else Let SIGN = 1
    PRCNT = PRCNT * SIGN
    FAKE = Int(CTQTY + (CTQTY * PRCNT / 100))
    CNVTA = FAKE
    Gosub L_20000
    SKUN[X2] = Int(AMOUNT)
    If STK Let BASE[X2] = FAKE - (PFU2[STK - 1] * SKUN[X2])
    If Not(STK) Let BASE[X2] = FAKE - SKUN[X2]
  End If 
  If Not(L8)
    Print #0; Using "#)-------#/----# ";X2;SKUN[X2];BASE[X2];
  End If 
  If L8
    Print #0; Using " #)-------#/----# ";X2;SKUN[X2];BASE[X2];
  End If 
Next X2
Return 
L_8000: Rem END OF FILE
Gosub L_4000
If Not(E8) Goto L_1940
Goto L_8092
Print #0;"\15\\15\";
Print #0; Tab 20;"*** WAREHOUSE TOTALS ***";
Print #0; Tab 50;"TAG TOTALS";
Print #0; Using "-------#.##"; Tab 69;T1;
Print #0; Using "----------#.##"; Tab 83;T1[1]
Print #0; Tab 50;"BOOK TOTALS";
Print #0; Using "-------#.##"; Tab 69;T1[2];
Print #0; Using "----------#.##"; Tab 83;T1[3];
Print #0; Using "-------#.##";T1[4];
Print #0; Using "---------#.##";T1[5]
L_8092: For I = 0 To 5
  T2[I] = T2[I] + T1[I]
  T1[I] = 0
Next I
L_8100: If W9 = 0 If E9 = 0 Goto L_4530
If W9 <> 0 Goto OUTEND
Goto OUTEND
Print #0;"\15\\15\\15\";
Print #0; Tab 20;"*** GRAND TOTALS ***";
Print #0; Tab 50;"TAG TOTALS";
Print #0; Using "-------#.##"; Tab 69;T2;
Print #0; Using "----------#.##"; Tab 83;T2[1]
Print #0; Tab 50;"BOOK TOTALS";
Print #0; Using "-------#.##"; Tab 69;T2[2];
Print #0; Using "----------#.##"; Tab 83;T2[3];
Print #0; Using "-------#.##";T2[4];
Print #0; Using "---------#.##";T2[5]
L_8500: Rem GET WHSE CONTROL RECORD
WL1[1] = 0;WL1[2] = 0
K10$ = " ",K10$;K10$[1,2] = W9 Using "##";K10$[5,5] = "@"
Search #10,2,1;K10$,R10,E \ If E > 1 Error 11000 ! Gosub ERR_SEARCH
If E = 1 Goto L_8560
Mat Read #10,R10,40;WL1;
L_8560: Rem.  RASL SORT OPTION
If WL1[1] < 2 Or WL1[1] > 3 Let WL1[1] = 2
If WL1[2] < 2 Or WL1[2] > 3 Or WL1[2] = WL1[1] Let WL1[1] = 2;WL1[2] = 3
Return 
L_8600: Rem LOCATION IS SORTED OTHER THAN KEY
If Not(FILTER) Return 1
BIN = 0;TIER$ = ""
If WL1[1] = 2 Let BIN = P1$[3,5];TIER$ = P1$[6,6]
If WL1[1] = 3 Let TIER$ = P1$[3,3];BIN = P1$[4,6]
If TIER$ = "/" If FILTER = 1 Return 1
If TIER$ = "/" If FILTER <> 1 Return 
If Not(Fra(BIN / 2)) If FILTER = 1 Return 
If Fra(BIN / 2) If FILTER = 2 Return 
Return 1

L_10000: Rem CONVERT
CNVTU[0] = 0
CNVTU[1] = PFU1[8]
CNVTU[2] = 1
CNVTA = P1[0]
Gosub L_20000
SUNIT = AMOUNT
CNVTU[0] = 0
CNVTU[1] = P1[2]
CNVTU[2] = 1
CNVTA = P1[0]
Gosub L_20000
CTUNIT = AMOUNT
If PFU1[0] > 0 Mat Read #5,PFU1[0],10;BASE$;
If PFU1[8] > 0 Mat Read #5,PFU1[8],10;SUNIT$;
If P1[2] > 0 Mat Read #5,P1[2],10;CTUNIT$;
If PFU1[11] > 0 Mat Read #5,PFU1[11],10;CUNIT$;
If PFU1[11] = -1 Let CUNIT$ = " CWT"
If PFU1[11] = -3 Let CUNIT$ = "LB  "
CNVTU[0] = 0
CNVTU[1] = PFU1[8]
CNVTU[2] = 1
CNVTA = A[0]
Gosub L_20000
BKUNIT = AMOUNT
CNVTA = P3[0] - P3[1] \ Gosub L_20000
BKUNIT2 = AMOUNT
CNVTU[0] = 0
CNVTU[1] = PFU1[11]
CNVTU[2] = 2
CNVTA = C1
Gosub L_20000
CUNIT = AMOUNT
Return 
L_20000: Rem   MXPRCONV    PRODUCT FILE UNITS CONVERT UNIBASIC 4<
Dim 2%,Q0[1],3%
Def FNN(H) = Int(Abs(H) * 10 ^ Q0[1] + .5) * 10 ^ - Q0[1] * Sgn(H)
Def FNT(H) = Int(Abs(H) * 10 ^ Q0[1]) * 10 ^ - Q0[1] * Sgn(H)
Def FNV(H) = Int(Abs(H) * 10 ^ Q0[1] + .9999999) * 10 ^ - Q0[1] * Sgn(H)
Def FNU(H) = Int(Abs(H) + Sgn(Fra(Abs(H)))) * Sgn(H)
BUNIT = 0
If CNVTU[2] <> 5 Goto L_20170
BUNIT = 1
CNVTU[2] = 1
Goto L_20180
L_20170: BUNIT = 0
L_20180: Rem
If SC = 0 Let SC = 10
If SR = 0 Let SR = 8
Mat Read #1,19,50;P9$;
Mat Read #1,115,40;Q0;
On CNVTU[2] + 1 Goto L_20250,L_20350,L_20350,L_20640
Error 11000 ! Gosub ERR_SEARCH
L_20250: Rem CHECK IF VALID CONVERSION
For X1[1] = 0 To 1
  If CNVTU[X1[1]] = 0 Goto L_20330
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20330
  For X1[2] = 0 To 7
    If CNVTU[X1[1]] = PFU1[X1[2]] Goto L_20330
  Next X1[2]
  FLAG = 1 \ Goto L_20650
L_20330: Next X1[1]
FLAG = 0 \ Goto L_20650
L_20350: Rem CONVERT COST/PRICE/QTY
AMOUNT = CNVTA
For X1[1] = 0 To 1
  CMODE = 1 \ If X1[1] Let CMODE = -1
  If CNVTU[X1[1]] = 0 Goto L_20530
  If CNVTU[X1[1]] = -1 Or CNVTU[X1[1]] = -3 Goto L_20460
  For CUNIT = 0 To 7
    If PFU1[CUNIT] = CNVTU[X1[1]] Goto L_20450
  Next CUNIT
  FLAG = 0 \ Goto L_20650
L_20450: If CUNIT = 0 Goto L_20530
L_20460: If CNVTU[2] = 2 Let CMODE = - CMODE
  If CNVTU[X1[1]] = -1 ! " <>-1 GOTO L_20510: ! ITS CWT
    If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5])) / 100
    If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT * 100 / (A[6] / A[5])
  Else 
    If CNVTU[X1[1]] = -3 ! "Catch Weight Item
      If A[5] If CMODE < 0 Let AMOUNT = (AMOUNT * (A[6] / A[5]))
      If A[6] If A[5] If CMODE > 0 Let AMOUNT = AMOUNT / (A[6] / A[5])
    Else 
      If CMODE > 0 Let AMOUNT = AMOUNT * PFU2[CUNIT - 1]
      If PFU2[CUNIT - 1] If CMODE < 0 Let AMOUNT = AMOUNT / PFU2[CUNIT - 1]
    End If 
  End If 
L_20530: Next X1[1]
If CNVTU[2] <> 1 Goto L_20580
If BUNIT Goto L_20580
If CNVTU[1] If CNVTU[1] <> PFU1[0] Let AMOUNT = FNR(AMOUNT)
If Fra(AMOUNT) If Not(CNVTU[1]) Or CNVTU[1] = PFU1[0] Let AMOUNT = FNU(AMOUNT)
L_20580: If CNVTU[2] <> 2 Goto L_20630
If Not(CNVTU[1]) Goto L_20630
If P9$[42,42] = "N" Let AMOUNT = FNN(AMOUNT)
If P9$[42,42] = "T" Let AMOUNT = FNT(AMOUNT)
If P9$[42,42] = "U" Let AMOUNT = FNV(AMOUNT)
L_20630: FLAG = 0 \ Goto L_20650
L_20640: Rem
L_20650: Rem RETURN FROM MODES 0-2
Return 
OutErr: ! bad data
let e$=msg$ \ Error 10000
! if above doesn't work
!Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
let returnstatus=0
If Eflag>0
	ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
	tmp$=""
Endif
Message$=msg$ ! all from entry
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call AddToStr(e$,rstr$,WebStr$)
call SetOutPut(e$,rstr$)
OUTEND: Rem EXIT ROUTINE
!If L9 = 20 Goto L_9100
L_9005: Rem
!Print 'CS'
L_9020: !Close 
!Chain "MX000"
!Stop 
try call dxclose() else rem
End
L_9100: Rem FOR SCREEN PRINT ONLY
!Print "\15\PRESS <CR> TO EXIT ";
!Input ""K1$
Goto L_9005
END
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End
