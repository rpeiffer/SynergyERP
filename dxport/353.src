! >>> Program 353
!
! description Commission Audit Report
!
! loadsave -w -n 100,10 -o prog/dxport/353.dl4 src/353.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX353 - PRIMARY LOCATION REPLENISHMENT
Rem AUTHOR: UBS   FEB  4, 1994
Rem LAST UPDATE:  08/03/1994 - ADD UNITS/SKIDS(PALLETS) OPTION
Rem BEDIT Version: 2.2 OBJECT CODE     Created: JUN 25, 2001  11:50:28
Rem /usr/acct/r97//usr/acct/jcs/work/devl/mx/mx353.src (univ2) [jcs] {14756}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
! 6/29/05 jliu cct190320 add the start and end range for location
Declare Intrinsic Sub InpBuf,String,Time,DatetoJulian
!!Option Default Dialect IRIS1

Com 1%,SC,SR,PFU1[20],CNVTU[2],3%,PFU2[6],CNVTA,A[33],J4$[50]
If Err 0 Gosub ERR_TRAP
Dim P0$[66],P1$[6],P$[156],WL$[40],A2$[30]
Dim 1%,P1[1],WL1[2],PL1[1],RASL[5]
Dim 2%,P2[2],B[24]
Dim 3%,P3[4],A1[7],WL3[4],WHMISC[5],PL2,W3[24]
Dim STKUM$[4],LOC$[6],SLOC$[6],ELOC$[6],tk1$[60]
Dim J$[40],J1$[30],J2$[20],J3$[40],J8$[8]
Dim 1%,F,X1,2%,X2,3%,J,X3,T9[20]
Dim K1$[60],SPROD$[12],EPROD$[12],X$[10],T9$[26],P9$[50],PLOC$[18],S9$[50]
Dim PRIM$[6],K2$[12],K3$[20],K4$[40],K5$[20],K6$[20],K7$[40],K9$[60]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[1500],tmp1$[500]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[200],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[12]	  \ Blank$=" ",Blank$
dim EndParam$[12] \ EndParam$="Z",EndParam$
!
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)

!
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
For J = 2 To 7
  Read J1
  If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "2528","1792","208","2736","1728","1744"
!
! Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
! call dxsave(0,"tmp/353in.txt!")
Mat Read #1,0,100;J8$;
Mat Read #1,19,50;P9$;
RASL = 0 \ If P9$[41,41] = "Y" Or P9$[41,41] = "W" Let RASL = 9
P9$[41,41] = "Y";RASL = 9 ! on for everyone?
Read #1,3;J1$;
!If Not(RASL) Goto L_8900
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Goto ERR_TRAP
J9 = 60 \ If J8 Let J9 = 20
If Not(RASL) let e$ = "There are no locations in your file to fill" \ error 10000 

SPROD$ = "";EPROD$ = "}",EPROD$;SKID = 1;ALLP = 0
call dxget("WHSE",tmp$) \ if tmp$="" let WH=1 Else let WH = tmp$ !!whse
call dxget("MINQ",tmp$) \ MINQ = tmp$ !Minimum Qty AVAIL. in primary to print
!call dxget("SPROD",tmp$) ! the below are bypassed on native (and here)
!Let sprod$=UCase$(RTrim$(tmp$))+Blank$
!call dxget("EPROD",tmp$)
!let EProd$=UCase$(RTrim$(tmp$))+EndParam$
!call dxget("QTYTYPE",TMP$)  !1=WGT, 2=SKID
!LET SKID=0 \ IF TMP$="2" LET SKID=1
!CALL DXGET("PRDTYPE",TMP$) ! A=ALL, Q=MIN, Z=ZERO
!ALLP=1 \ IF TMP$="Q" OR TMP$="Z" LET ALLP=0
CALL DXGET("OVRFLW",TMP$) ! print only items with overflow locs
OVERFLAG=0 \ IF TMP$="Y" LET OVERFLAG=1
CALL DXGET("SLOC",TMP$)
LET SLOC$=RTRIM$(TMP$)+Blank$ ! ucase?
call dxget("ELOC",tmp$)
let ELoc$=RTrim$(tmp$)+EndParam$ ! Upper case?
If WH <= 0 Or WH > 99 let e$ = "Invalid warehouse !!" \ error 10000 

K1$ = SPROD$;K2$ = SPROD$
If MINQ < 0 Or Fra(MINQ * 100) let e$= "Invalid Minimum !!" \ error 10000
!
If SLOC$>ELOC$
	let e$="Invalid Location Range!!" \ Error 10000
Endif
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"353",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  ! try call dxclose() else rem
End If 
!
!L_900: Rem GET RANGES
!Print @0,12;'CE';@0,14;"ENTER WAREHOUSE #, OR ''E'' TO EXIT:   ";
!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!WH = J2$
!If WH <= 0 Or WH > 99 Goto L_900
!!SPROD$ = "";EPROD$ = "}",EPROD$;SKID = 1;ALLP = 0 \ Goto L_1100
!L_910: Print @0,15;"ENTER STARTING CODE, <RETURN> FOR ALL,  ''E'' TO EXIT : ";'CE';
!Input ""SPROD$ \ If SPROD$ = "E" Goto OUTEND
!If SPROD$ = "" Let EPROD$ = "}}}}}}" \ Goto L_970
!Print @0,16;"ENTER ENDING   CODE, <RETURN> FOR LAST, ''E'' TO EXIT : ";'CL';
!Input ""EPROD$ \ If EPROD$ = "E" Goto OUTEND
!If EPROD$ = "" Let EPROD$ = "}}}}}}"
!L_970: If SPROD$ <= EPROD$ Goto L_990
!Print @0,21;"INVALID RANGE ! ";'CE'; \ Signal 3,15 \ Goto L_910
!!L_990: K1$ = SPROD$;K2$ = SPROD$
!L_1000: Rem OPTION BY PALLETS / STK UNITS
!SKID = 0
!Print @0,18;'CE';"PRINT as  1:wgt/cube, or 2:units/skids     ";
!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!X2 = J2$ \ If X2 > 0 If X2 < 3 If Not(Fra(X2)) Goto L_1030
!Print 'RB' \ Goto L_1000
!L_1030: SKID = 0
!If X2 = 2 Let SKID = 1
!L_1040: Print @0,19;"PRINT  A:all, Q:minimum qty, or Z:zero in primary Products    ";
!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!If J2$ <> "A" If J2$ <> "Q" If J2$ <> "Z" Goto L_1040
!ALLP = 1
!If J2$ = "Z" Or J2$ = "Q" Let ALLP = 0
!If J2$ <> "Q" Goto L_1200
!L_1100: Rem SELECT QTY
!!Print @0,20;'CE';"ENTER the Minimum Qty AVAIL. in primary to print   ";
!!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!!MINQ = J2$
!!If MINQ < 0 Or Fra(MINQ * 100) Goto L_1100
!L_1200: Rem.
!L_1250: Print @0,22;'CE';"CHOOSE  P:print, R:reselect, E:exit    ";
!Input ""J2$ \ If J2$ = "E" Goto OUTEND
!If J2$ = "R" Goto L_900
!If J2$ <> "P" Goto L_1250

K1$ = SPROD$;K2$ = SPROD$ \ If J2 If Not(J8) Print #0;"\14\";
J1 = 90 \ J2 = 0
if J8
    tmp$ = "PRODUCT CODE",fdel$ 
	tmp$ =tmp$ ,"PRODUCT NAME",fdel$
	tmp$ = tmp$,"field 1",fdel$
	tmp$ = tmp$ ,"field 2",fdel$
    tmp$ = tmp$,"LOCATION",fdel$ 
	tmp$ = tmp$ ,"LAST RECEIPT",fdel$
    tmp$ = tmp$,"LAST USAGE",fdel$
    tmp$ = tmp$,"LOCATION CURRENTLY HOLDS AVAILABLE" ,fdel$
  If SKID
    tmp$ = tmp$,"LOCATION CURRENTLY HOLDS UN/SKID" ,fdel$
    tmp$ = tmp$,"LOCATION CURRENTLY HOLDS SKIDS" ,fdel$
    tmp$ = tmp$,"LOACTION UNITS" ,fdel$
    tmp$ = tmp$,"CAN HOLD SKIDS" ,fdel$
    tmp$ = tmp$,"REMAINDER TO FILL UNITS" ,fdel$
    tmp$ = tmp$,"REMAINDER TO FILL SKIDS" ,fdel$
  else
    tmp$ = tmp$,"LOCATION CURRENTLY HOLDS WEIGHT" ,fdel$
    tmp$ = tmp$,"LOCATION CURRENTLY HOLDS CUBES" ,fdel$
    tmp$ = tmp$,"LOACTION WEIGHT" ,fdel$
    tmp$ = tmp$,"CAN HOLD CUBES" ,fdel$
    tmp$ = tmp$,"REMAINDER TO FILL WEIGHT" ,fdel$
    tmp$ = tmp$,"REMAINDER TO FILL CUBES" ,fdel$
  End if
  call addtostr(e$,rstr$,tmp$+rdel$)
End if
Gosub L_8000
!!Print @0,21;"PRINTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
!!If J8 Print 'CS';
!!
!-!If Err 0 Gosub ERR_ESCAPE
If Err 0 Gosub ERR_TRAP
K9$ = " ",K9$;S9$ = "}",S9$
L_1930:  Search #9,3,1;K9$,R1,E ! THRU sprodlot sorted by primary
If E Goto L_9100
If S9$[1,1] = "}" Let S9$ = K9$
! If S9$[1,1] <> K9$[1,1] Let J1 = 99;S9$ = K9$ ! page break on aisle chg
IF S9$[7,7]<>K9$[7,7] 
   !LET J1=99
   LET S9$=K9$ ! FORCE PAGE BRK! added 'S9$='
   let on_hand=0
endif
K1$ = " ",K1$;K1$[1,12] = K9$[7,18]
let k1$[13,42]=k9$[25,54]
SEARCH #2,2,2;K1$,R1,E
If E Goto L_1930
X2 = K1$[13,14] \ If X2 <> WH Goto L_1930 !L_2000
If K1$[1,6] = "      " Goto L_1930 !L_2000
If K1$[1,12] <> K9$[7,18] Goto L_1930
If K2$[1,12] <> K1$[1,12] Gosub L_3000
If HEADR = 0 Or ON_HAND <= 0 Goto L_1930 ! L_2000
Mat Read #2,R1,0;P0$;
Mat Read #2,R1,66;P1;
Mat Read #2,R1,70;P2;
Mat Read #2,R1,82;P3;
Mat Read #2,R1,114;P1$;
!If P1$[1,6] = PRIM$ Goto L_2000
IF P1$[1,6]=PRIM$ GOTO L_1930: ! "primary is done first
IF P1$[1,4]="NONE" goto L_1930: 
LOC$ = P1$[1,6] \ Gosub L_3200
Gosub L_2400
if a[0]=0 goto L_1930 ! L_2000
Gosub L_5800
Gosub L_5000
Gosub L_2200
!!-!Signal 2,J0,A,B \ If J0 <> -1 Gosub L_9615
Goto L_1930 ! L_2000
L_2200: Rem TOTALS CALC
Return 
L_2400: Rem CALCULATE ALL
LET CNVTU[0]=0;CNVTU[1]=PFU1[8];CNVTU[2]=1    
LET CNVTA=(P3[0]-P3[1]) \ GOSUB L_20000:      
LET ONHAND=AMOUNT
CNVTU[0] = 0;CNVTU[1] = PFU1[8];CNVTU[2] = 1
CNVTA = (P3[0] - P3[1] - P3[3]) \ Gosub L_20000
A[0] = AMOUNT \ If SKID Goto L_2500
WGHT = 0 \ If A[5] Let WGHT = A[6] * A[0] / A[5]
CUBE = 0 \ If A1[3] Let CUBE = B[23] * A[0] / A1[3]
RWGHT = WL3[0] - WGHT
RCUBE = WL3[1] - CUBE
If WL3[0] = 0 Let RWGHT = 0
If WL3[1] = 0 Let RCUBE = 0
If WGHT < 0 Let RWGHT = Abs(WGHT)
If CUBE < 0 Let RCUBE = Abs(CUBE)
Return 
L_2500: Rem WANT BASED ON PALLET
If P1$[1,6] <> PRIM$ Let PL2 = 0
WGHT = 0
CUBE = 0
WGHT = WHMISC[4] * WHMISC[5]
If WGHT Let CUBE = FNR(A[0] / WGHT)
RWGHT = (PL2 * WGHT) - A[0]
RCUBE = PL2 - CUBE
If PL2 = 0 Let RCUBE = 0;RWGHT = 0
If A[0] < 0 And PL2 = 0 Let RWGHT = Abs(A[0])
If RWGHT < 0 And WGHT = 0 Let RWGHT = Abs(WGHT)
If RCUBE And CUBE = 0 Let RCUBE = 0
If CUBE < 0 Let RCUBE = Abs(CUBE)
WL3[0] = (PL2 * WGHT)
WL3[1] = PL2
Return 
L_3000: Rem GET PRIMARY LOCATION
K4$ = " ",K4$;K4$ = K1$[1,14]
PRIM$=BLANK$
LP_loc: ! can be >1 loc - find primary
Search #4,3,1;K4$,R4,E !!-!\ If E > 1 Gosub ERR_SEARCH
If E Goto L_3070
if k4$[1,14]<>K1$[1,14] goto L_3070 ! did not find primary
MAT READ #4,R4,18;PL1;
IF PL1[1]<>1 GOTO LP_LOC
PRIM$ = K4$[15,20];HEADR = 0
Read #4,R4,22;PL2;
Goto L_3090
L_3070: Rem NO PRIMARY
PRIM$ = " ",PRIM$;PL2 = 0;HEADR = 0
L_3090: LOC$ = PRIM$
K3$ = " ",K3$;K3$ = K1$[1,12];K2$ = K1$[1,12]
Search #3,2,1;K3$,R3,E !!-!\ If E > 1 Gosub ERR_SEARCH
If E = 1 Return 
Mat Read #3,R3,0;P$;
Mat Read #3,R3,156;B;
Mat Read #3,R3,256;A;
Mat Read #3,R3,460;A1;
Mat Read #3,R3,512;PFU1;
Mat Read #3,R3,554;PFU2;
Mat Read #3,R3,944;A2$;
Gosub L_3700
If PFU1[8] <= 0 Let PFU1[8] = PFU1[0]
If PFU1[8] > 0 Read #6,PFU1[8],10;STKUM$;
Gosub L_3200
If ON_HAND <= 0 Return 
If Not(ALLP) Gosub L_4500 \ Return 
Gosub L_3300
If PRIM$ = "      " Goto L_5200
Goto L_3500
L_3200: Rem CHECK INFO ON LOCATION
If LOC$ = "" Or LOC$ = "NONE  " Or LOC$ = "      " Goto L_3260
K5$ = " ",K5$;K5$[1,2] = WH Using "##";K5$[3] = LOC$[1,6]
Search #5,2,1;K5$,R5,E !!-!\ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_3260
Mat Read #5,R5,0;WL$;
Mat Read #5,R5,40;WL1;
Mat Read #5,R5,46;WL3;
Return 
L_3260: Rem LOC NO GOOD
WL$ = " ",WL$
WL3[0] = 0;WL3[1] = 0
Return 
L_3300: Rem PRINT PRODUCT HEADR INFO
If J1 + 4 > J9 Let J1 = J9 + 10
J1 = J1 + 2 \ Gosub L_5800
 Gosub L_5500  !!
Return 
L_3500: Rem PRIMARY
J4$ = " ",J4$;J4$[1,14] = K1$[1,14];J4$[15] = PRIM$;J3$ = J4$;LINP = 0
Search #2,2,2;J4$,R2,E !!-!\ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_3530
L_3520: Search #2,3,2;J4$,R2,E !!-!\ If E > 2 Gosub ERR_SEARCH
If E = 2 Goto L_3680
L_3530: If J4$[1,20] <> J3$[1,20] Goto L_3680
Mat Read #2,R2,0;P0$;
Mat Read #2,R2,66;P1;
Mat Read #2,R2,70;P2;
Mat Read #2,R2,82;P3;
Mat Read #2,R2,114;P1$;
Gosub L_2400
Gosub L_5800
Gosub L_5000
Gosub L_2200
Goto L_3520
L_3680: Rem DONE - PROCEED AS NORMAL
If Not(LINP) Goto L_5300
Return 
L_3700: Rem GET PRODWHSE
K7$ = " ",K7$;K7$[1,12] = P$[140,151];K7$[13] = WH Using "##"
Search #7,2,1;K7$,R7,E !!-!\ If E > 1 Gosub ERR_SEARCH
If E = 1 Goto L_3770
Mat Read #7,R7,78;W3;
ON_HAND = W3[0] - W3[2]
Mat Read #7,R7,800;WHMISC;
Return 
L_3770: Rem NO GOOD
WHMISC[4] = 0;WHMISC[5] = 0
Return 
L_4000: Rem TOTAL PRINT
Gosub L_5800
if not(j8)  Print #0;"\15\** END **";
Return 
L_4500: Rem CHECK FOR PRIMARY ONHAND
A[0] = 0;J4$ = " ",J4$;J4$[1,14] = K1$[1,14];J4$[15] = PRIM$;J3$ = J4$
Search #2,2,2;J4$,R2,E !!-!\ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_4530
L_4520: Search #2,3,2;J4$,R2,E !!-!\ If E > 2 Gosub ERR_SEARCH
If E = 2 Goto L_4570
L_4530: If J4$[1,20] <> J3$[1,20] Goto L_4570
Mat Read #2,R2,82;P3;
A[0] = A[0] + P3[0] - P3[1] - P3[3]
Goto L_4520
L_4570: Rem.
If Not(ALLP) And MINQ Goto L_4600
If Not(ALLP) And A[0] <= 0 Return 1
Return 
L_4600: Rem CONVERT & COMPARE TO MINIMUM
CNVTU[0] = 0;CNVTU[1] = PFU1[8];CNVTU[2] = 1
CNVTA = A[0] \ Gosub L_20000
If AMOUNT > MINQ Return 
Return 1
L_5000: Rem PRINT LINE
if J8
  tmp$ = tmp1$, LOC$[1,6] 
  If LOC$ = PRIM$ let tmp$ = tmp$, " P"
  tmp$ = tmp$,fdel$
  X2 = P2[0] \ Gosub L_7700 \ tmp$ = tmp$,X$[1,8],fdel$
  X2 = P2[1] \ Gosub L_7700 \ tmp$ = tmp$,X$[1,8],fdel$
  tmp$ = tmp$, A[0] Using "--------,--#.##"," ",STKUM$,fdel$
  tmp$ = tmp$, WGHT Using "------,--#.##",fdel$
  tmp$ = tmp$,CUBE Using "------,--#.##",fdel$
  tmp$ = tmp$, WL3[0] Using "####,###.##",fdel$
  tmp$ = tmp$, WL3[1] Using "####,###.##",fdel$
  tmp$ = tmp$, RWGHT Using "-------,--#.##",fdel$
  tmp$ = tmp$, RCUBE Using "-------,--#.##",fdel$
  call addtostr(e$,rstr$,tmp$+rdel$)
else
  Print #0; Tab 1;LOC$[1,6];
  If LOC$ = PRIM$ Print #0;" P";
  X2 = P2[0] \ Gosub L_7700 \ Print #0; Tab 10;X$[1,8];
  X2 = P2[1] \ Gosub L_7700 \ Print #0; Tab 19;X$[1,8];
  Print #0; Using "--------,--#.##"; Tab 28;A[0];" ";STKUM$;
  Print #0; Using "------,--#.##"; Tab 49;WGHT;
  Print #0; Using "------,--#.##"; Tab 63;CUBE;
  Print #0; Using "####,###.##"; Tab 77;WL3[0];
  Print #0; Using "####,###.##"; Tab 89;WL3[1];
  Print #0; Using "-------,--#.##"; Tab 101;RWGHT;
  Print #0; Using "-------,--#.##"; Tab 116;RCUBE;
  Print #0;"\15\";
End if 
LINP = 1

Return 
L_5200: Rem NO PRIMARY MESSAGE
if not(j8) Print #0; Tab 1;"*** PRIMARY LOCATION MISSING OR INVALID ***"
J1 = J1 + 1
Return 
L_5300: Rem NO PRIMARY MESSAGE
if not(j8)  Print #0; Tab 1;PRIM$; Tab 10;"*** PRIMARY LOCATION IS EMPTY ***"
J1 = J1 + 1
Return 
L_5500: Rem PRODUCT HEADER
If J1 > 11 if not(j8) Print #0;"\15\"
if j8
  tmp1$ =  K3$[1,12],fdel$
  tmp1$ = tmp1$,P$[9,38] ,fdel$
  tmp1$ = tmp1$,P$[63,92] ,fdel$
  tmp1$ = tmp1$,A2$[13,27] ,fdel$
else
  Print #0;K3$[1,12];
  Print #0; Tab 15;P$[9,38];
  Print #0; Tab 46;P$[63,92];
  Print #0; Tab 80;A2$[13,27];
  Print #0;""
End if
HEADR = 1

Return 
L_5800: Rem HEADINGS ROUTINE
J1 = J1 + 1 \ If J1 < J9 Return 
!!If J2 If J8 Input @0,23;"PRESS <RETURN> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 8
If Not(J8) Print #0;"\15\";
T9$ = "" \ Call Time(T9$)
if not(j8)
  Print #0; Tab 10;J8$; Tab (64 - Len(J1$) / 2);J1$; Tab 120;"PAGE";J2
  Print #0;" - 353 - ";T9$;
  Print #0; Tab 45;"P R I M A R Y   R E P L E N I S H M E N T"
  If Not(ALLP) And MINQ Print #0; Tab 5;"MINIMUM AVAILABLE=";MINQ;
  Print #0; Tab 55;"WAREHOUSE";WH
  if overflag
   print #0;tab 55;"ITEMS WITH OVERFLOW LOCATION"
	else
	   PRINT #0;"\15\";
	endif
  Print #0; Tab 13;"LAST"; Tab 22;"LAST";
  Print #0; Tab 35;"* * * * LOCATION CURRENTLY HOLDS * * * *";
  Print #0; Tab 80;" LOCATION CAN HOLD ";
  Print #0; Tab 105;" * * REMAINDER TO FILL * * "
  Print #0; Tab 1;"LOCATION";
  Print #0; Tab 11;"RECEIPT"; Tab 21;"USAGE";
  Print #0; Tab 34;"AVAILABLE";
End if
If SKID Goto L_6000
if not(j8)
  Print #0; Tab 55;"WEIGHT";
  Print #0; Tab 70;"CUBES";
  Print #0; Tab 81;"WEIGHT";
  Print #0; Tab 94;"CUBES";
  Print #0; Tab 109;"WEIGHT";
  Print #0; Tab 123;"CUBES";
End if
L_5900: 
if not(j8)
  Print #0;" "
  Print #0;"\15\";
End if
If J2 = 1 If Not(J8) Let J1 = J1 + 2
Return 
L_6000: Rem SKID HEADINGS
if not(j8) 
  Print #0; Tab 54;"UN/SKID";
  Print #0; Tab 70;"SKIDS";
  Print #0; Tab 81;" UNITS";
  Print #0; Tab 94;"SKIDS";
  Print #0; Tab 109;" UNITS";
  Print #0; Tab 123;"SKIDS";
End if
Goto L_5900
L_7700: Rem  *X2 TO X$ V1.0
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
L_8000: Rem SORT PRODUCTS BY PRIMARY LOCATION
!!Print @0,21;"SORTING, PLEASE WAIT . . .  ";'CE'; \ Signal 3,0
LET K1$=" ",K1$                                   
LET K1$=SPROD$    ! thru sprodlot                                
L_8030: SEARCH #2,3,2;K1$,R1,E                    
IF E GOTO L_8130:                                 
LET X2=K1$[13,14] \ IF X2<>WH GOTO L_8030:        
IF K1$[1,6]="      " GOTO L_8030: ! "no product!? 
!IF K1$[1,LEN EPROD$]>EPROD$ GOTO L_8130:  
MAT  READ #2,R1,0;P0$;                            
MAT  READ #2,R1,66;P1;                            
MAT  READ #2,R1,70;P2;                            
MAT  READ #2,R1,82;P3;                            
MAT  READ #2,R1,114;P1$;                          
let overcount=0  
LET K4$=" ",K4$;Prim$=Blank$
LET K4$[1,12]=K1$[1,12] ! thru prodloc
L_8230:  SEARCH #4,3,1;K4$,R4,E
IF E GOTO L_8240:
LET X2=K4$[13,14] \ IF WH<>X2 GOTO L_8230:
IF k4$[1,12]<>k1$[1,12] goto L_8240:
MAT  READ #4,R4,0;PLOC$;
MAT  READ #4,R4,18;PL1;

IF PL1[1] ! primary/Perm
   IF PLOC$[13,18]<SLOC$[1,6] GOTO L_8030:     
   IF PLOC$[13,18]>ELOC$[1,6] GOTO L_8030:
   Prim$=PLoc$[13,18]
Else ! not prim - try again
  goto L_8230
ENDIF
L_8240: ! now thru all all for overflows
LET K4$=" ",K4$
LET K4$[1,12]=K1$[1,12] ! thru prodloc
L_8245:  SEARCH #4,3,1;K4$,R4,E
IF E GOTO L_8030:
LET X2=K4$[13,14] \ IF WH<>X2 GOTO L_8245:
IF k4$[1,12]<>k1$[1,12] goto L_8030:
MAT  READ #4,R4,0;PLOC$;
MAT  READ #4,R4,18;PL1;
LET TK1$=" ",TK1$;TK1$[1,12]=PLOC$[1,12]         
sort_loop: SEARCH #2,3,2;TK1$,TR1,E              
IF E GOTO end_sortloop:                           
IF TK1$[1,12]<>PLOC$[1,12] GOTO end_sortloop:        
LET X2=TK1$[13,14] \ IF X2<>WH GOTO sort_loop:   
IF tK1$[1,6]="      " GOTO sort_loop:  
IF TK1$[15,20]<>PRIM$ if tk1$[15,18]<>"NONE" let overcount=overcount+1
goto sort_loop:

end_sortloop: !
if overflag if overcount<=0 goto L_8030:
let x2=p2[0] \ gosub L_7840: \ let x2=0
LET K9$=" ",K9$
LET K9$[1,6]=PRIM$+Blank$                  !"primary bin location
LET K9$[7,18]=K1$[1,12]                    !"product code
LET K9$[19,24]=x2 using "######"           !"date received
let k9$[25,54]=k1$[13,42]
SEARCH #9,4,1;K9$,R1,E
! IF E>1 GOSUB Err_Search:
GOTO L_8030:

L_8130: RETURN
L_7840: ! YMD to julian
If X2 <= 0 Let E=1 \ Return 
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5]
Return 1
L_8900: Rem NO LLOCATIONS
!Print @0,20;'CE RB';" THERE ARE NO LOCATIONS IN YOUR FILE TO FILL!"
!Print @0,21;" You do not  ''USE RASL'' "
!Signal 3,20
Goto OUTEND
!OUTEND: Rem EXIT
!Print 'CS'
!Close 
!!!-!Chain "MX000"
!
L_9100: Rem END
Gosub L_4000
!!If J8 Print @0,23;"PRESS <RETURN> TO CONTINUE ";'CL'; \ Input ""J$
For K = 0 To 20
  T9[K] = 0
Next K
Goto OUTEND
!If SPROD$ = "" Goto OUTEND
!Goto L_900
L_9905: !Print @0,Msc(34);'CL RB';"RECORD LOCKED ERROR. Enter  R:retry,  E:exit  ";
!Input ""X$ \ Print @0,Msc(34);'CL';
!If X$ = "R" Return -1
!If X$ <> "E" Goto L_9905
Goto OUTEND
End 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: Goto L_20120  !!If Spc(4) > 1280 Goto L_20120
!!-!Swap 1,"MXPRCONV"
If CNVTU[2] = 3 Goto L_20160
L_20080: Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 !!-!\ Gosub ERR_SEARCH
If X1 <> Spc(6) Goto L_20080
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !!-!\ Gosub ERR_SEARCH
Goto L_20160
L_20120: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG !!-!\ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
OUTEND: Rem EXIT
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If 
!
! try call dxclose() else rem
End 
!Print 'CS'
!Close 
!!!-!Chain "MX000"
!Stop
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End