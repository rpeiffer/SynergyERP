! >>> Program 390
!
! description Purchasing P.O. Expediting Report (input)
!
! loadsave -w -n 100,10 -o prog/dxport/390.dl4 src/390.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
Rem BEDIT Version: 2.2 OBJECT CODE     Created: FEB  8, 2001  17:21:27
Rem /usr/acct/r97//usr/acct/kag/work/r97/po/po390.src (univ2) [kag] {38998}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE ****
Rem
Rem PO390          P.O. Expediting Report  (selector)
Rem Author:        UBS  TAKEN FROM MX445
Rem                UNIVERSAL BUSINESS SYSTEMS
!4/7/05 jliu cct185775 add the level range
! n1[12] - starting level
! n1[13] - ending level
!???:04/17/00:Converted to Bedit   (mkbedit 1.2b)
! dek: 02/07/05 cct 185775 select on range of levels

!
Declare Intrinsic Sub FindF,InpBuf,String
! - Option Default Dialect IRIS1
COM 2%,N1[13],1%,N2[4],N1$[42]

If Err 0 Gosub ERR_TRAP
! - If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
!
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim Blank$[50] \ Blank$=" ",Blank$
dim EndParam$[50] \ EndParam$="z",EndParam$
!
Dim Z1$[50],F1$[16],F2$[26],A$[26],K$[130],3%
Dim J$[75],J0$[10],J1$[75],J2$[40],J4$[75],J5$[75],J6$[40],J7$[75],J9$[75]
Dim 1%,J0,J2,J3,J4,J5,J6,J8,J9[2],X1,X$[40]
Dim 2%,X2,D9[5],4%,J1
Mat Read #1,115,0;D9;
!
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0) \ If Err 0 Gosub ERR_TRAP
If Err 0 Gosub ERR_TRAP
!
! dx add xport reporting code
DXSetup:
Dim tmp$[500],tmp1$[300],tmp2$[300]
Dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],rstr$[500],bsdel$[10],esdel$[10],rdel$[10]
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
!
If J8 ! dx xml, setup rstr$
  !<section>
  tmp$ = bsdel$,"390",fdel$,rdel$
  Call addtostr(e$,rstr$,tmp$)
End If 
!
!  dx add xport reporting code
call dxget("begbuyer",tmp$) \ if tmp$="" let N1[1]=0 else N1[1]=tmp$ ! starting buyer
call dxget("endbuyer",tmp$) \ if tmp$="" let N1[2]=999 else n1[2]=tmp$ ! ending buyer
call dxget("begprod",tmp$) \ N1$[1,12]=UCase$(rtrim$(tmp$)),Blank$ ! starting product code
call dxget("endprod",tmp$) \ N1$[13,24]=UCase$(rtrim$(tmp$)),EndParam$ ! ending product code
call dxget("begvendor",tmp$) \ if tmp$="" let N1[3]=0 else N1[3]=tmp$ ! starting vendor
call dxget("endvendor",tmp$) \ if tmp$="" let N1[4]=999999 else N1[4]=tmp$ ! ending vendor
call dxget("whse",tmp$) \ N1[5]=tmp$ ! warehouse
call dxget("stockflg",tmp$) \ N2[0]=tmp$ ! print stock & order flags primary=0  all vendors=1
Call dxget("um",tmp$) \ N2[1]=tmp$ ! show u/m in stock=1  purchasing=2
call dxget("pastdue",tmp$) \ N1[7]=tmp$ ! days past due
call dxget("slevel",tmp$) \ if rtrim$(tmp$)="" let N1[12]=1 Else let N1[12]=tmp$
call dxget("elevel",tmp$) \ if rtrim$(tmp$)="" let N1[13]=5 else let N1[13]=tmp$
!  dx end
!
! buyer section
If N1[1]<0 Or N1[1]>999 let e$="Invalid starting buyer, must be between 0 and 999!" \ error 10000
If N1[2]<N1[1] Or N1[2]>999 let e$="Invalid ending buyer, must be between starting buyer and 999!" \ error 10000
!
! product code section
if N1$[13,24]<N1$[1,12] let e$="Invalid ending product, must be greater than starting product!" \ error 10000
!
! vendor section
If N1[3]<0 Or N1[3]>999999 let e$="Invalid starting vendor, must be between 0 and 999999!" \ error 10000
If N1[4]<N1[3] Or N1[4]>999999 let e$="Invalid ending vendor, must be between starting vendor and 999999!" \ error 10000
!
! warehouse
If N1[5]<1 Or N1[5]>D9[5] let e$="Invalid warehouse, must be between 0 and ",D9[5],"!" \ error 10000
N1[6]=N1[5]
!
! days past due
If N1[7]<0 Or N1[7]>99999 let e$="Invalid days past due, must be between 0 and 99999!" \ error 10000
!
if N1[12]<1 or n1[12]>5 let e$="Invalid starting level, must be between 1 and 5!" \ error 10000
if N1[13]<1 or n1[13]>5 let e$="Invalid ending level, must be between 1 and 5!" \ error 10000
if N1[12]>N1[13] let e$="Invalid Level Range!" \ error 10000

If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
End If 
!
!
Chain "390a.dl4"
chain write CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,J8,N1,N1$,N2
!
!
! - L_1000: Rem "=================================== get ranges
! - Gosub L_6000
! - L_1010: J5$ = "<CR> FOR FIRST,  E: TO EXIT";J0$ = "1 00032103";J1$ = "  "
! - Gosub L_7000 \ N1[1] = J$
! - If J4$ = "E" Goto OUTEND
! - J5$ = "<CR> FOR LAST" \ J0$ = "3000033503" \ J1 = 999
! - Gosub L_7000 \ N1[2] = J1
! - If N1[2] < N1[1] Gosub L_1390 \ Goto L_1010
! - L_1040: J5$ = "<CR> FOR FIRST" \ J0$ = "2 00121504" \ J1$ = "            "
! - Gosub L_7000 \ N1$[1,12] = J$
! - J5$ = "<CR> FOR LAST" \ J0$ = "2 00122904" \ J1$ = "zzzzzzzzzzzz"
! - Gosub L_7000 \ N1$[13,24] = J$
! - If N1$[13,24] < N1$[1,12] Gosub L_1390 \ Goto L_1040
! - L_1070: J5$ = "<CR> FOR FIRST" \ J0$ = "3000061905" \ J1 = 0
! - Gosub L_7000 \ N1[3] = J1
! - J5$ = "<CR> FOR LAST" \ J0$ = "3000063405" \ J1 = 999999
! - Gosub L_7000 \ N1[4] = J1
! - If N1[4] < N1[3] Gosub L_1390 \ Goto L_1070
! - X$ = D9[5] Using "&&"
! - L_1100: J5$ = "ENTER WAREHOUSE NUMBER (1-",X$,")" \ J0$ = "3000021908" \ J1 = 0
! - Gosub L_7000 \ N1[5] = J1 \ N1[6] = J1
! - R2 = J1 - 1 \ If R2 >= 0 If R2 < D9[5] Goto L_1260
! - J7$ = "INVALID WAREHOUSE NUMBER" \ Gosub L_7600 \ Goto L_1100
! - L_1260: J5$ = "ENTER  P: FOR PRIMARY OR  A: FOR ALL VENDORS" \ J0$ = "2 00016215" \ J1$ = "P"
! - Gosub L_7000
! - If J$ <> "P" And J$ <> "A" Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1260
! - N2[0] = 0 \ If J$ = "A" Let N2[0] = 1
! - L_1300: J5$ = "ENTER THE U/M TYPE" \ J0$ = "3 00014117" \ J1 = 2
! - Gosub L_7000
! - If J1 < 1 Or J1 > 2 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1300
! - N2[1] = J1
! - Goto L_1400
! - L_1390: J7$ = "ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE! " \ Gosub L_7600 \ Return 
! - L_1400: Rem
! - J5$ = "ENTER DAYS PAST DUE" \ J0$ = "3000052819" \ J1 = 0
! - Gosub L_7000
! - If J1 < 0 Or J1 > 99999 Let J7$ = "INVALID ENTRY" \ Gosub L_7600 \ Goto L_1400
! - N1[7] = J1
! - L_1450: Rem "================== all picked
! - Print @10,22;'CL'; \ Input "CHOOSE  P: Print  R: Reselect  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
! - If Z1$ = "R" Goto L_1000
! - If Z1$ <> "P" Goto L_1450
! - A$ = Spc(6) \ A$ = A$[2,Len(A$) - 1]
! - Read #1,88,912;F1$;
! - L_1540: If F1$[Len(F1$)] = " " Let F1$ = F1$[1,Len(F1$) - 1] \ Goto L_1540
! - P2 = 0 \ Let F2$ = F1$ To "*" : P2 \ If Not(P2) Gosub ERR_SEARCH
! - Print @0,22;"OPENING SORT FILE, PLEASE WAIT . . . ";'CE';
! - KSIZE = 20
! - F1$[P2] = A$
! - Call FindF(F1$,H1)
! - try Close #9 else rem
! - If H1 Kill F1$
! - F2$ = "[1:256] ",F1$
! - Build #9,F2$
! - Search #9,0,1;K$,KSIZE,E \ If E Gosub ERR_SEARCH
! - L1 = 1000 \ Search #9,0,0;K$,L1,E \ If E Gosub ERR_SEARCH
! - Chain "PO390A"
! - L_6000: Rem "========================================== screen
! - Print 'CS'
! - Print @0,0;"PO390";@33,0;"P.O. EXPEDITING REPORT"
! - Print @17,2;"-STARTING-";@33,2;"-ENDING-";
! - Print @1,3;"BUYER";
! - Print @1,4;"PRODUCTS";
! - Print @1,5;"VENDORS";
! - Print @1,8;"WAREHOUSE";
! - Print @1,15;"PRINT STOCK & ORDER FLAGS ON  P: PRIMARY OR  A: ALL VENDORS? "
! - Print @1,17;"SHOW U/M'S IN  1: STOCK  2: PURCHASING? "
! - Print @1,19;"DAYS PAST DUE FOR P.O.'S? "
! - Return 
! - L_7000: Rem  INPUT SUBROUTINE  V2.2  4/84  1/91  CHAR ATTRB  G.DOSCHER
! - J0 = J0$[1,1]
! - J6 = J0$[2,2]
! - J2 = J0$[3,4]
! - J3 = J0$[5,6]
! - J4 = J0$[7,8]
! - J5 = J0$[9,10]
! - If J0 < 3 Let J2$ = " ",J2$
! - If J1$ = "" Let J1$[1,J3] = " ",J1$
! - If J0 <> 3 If J0 <> 4 Goto L_7070
! - If J0 = 3 Let J2$ = "#",J2$
! - If J0 = 4 Let J2$ = "-",J2$
! - J2$[J3] = "#","" \ If J6 Let J2$[Len(J2$) - J6,Len(J2$) - J6] = "."
! - L_7070: J1$[J3 + 1] = ""
! - If J0 < 3 Goto L_7105
! - If J0 = 6 Let J1$ = "N" \ J3 = 1 \ If J1 Let J1$ = "Y"
! - If J0 = 6 Goto L_7105
! - If J0 <> 5 Goto L_7100
! - J9$ = J1 + 10 ^ 6 Using "#######" \ J3 = 6
! - J1$ = J9$[4,7],J9$[2,3],"  " \ Goto L_7105
! - L_7100: J1$ = J1 Using J2$[1,J3] \ J1$[J3 + 1] = ""
! - If Len(J5$) > Msc(33) - 2 Let J5$[Msc(33) - 2] = ""
! - L_7105: Print @0,Msc(34) - 1; Tab (Msc(33) / 2 - Len(J5$) / 2);J5$;'CL';
! - Print @J4,J5;'BU';J1$[1,J3]; Tab (J4 + J3);'EU';" "; \ If J0 = 5 Print "  ";
! - Print @J4,J5;'BU'; \ Input Len J3 + 1;""J4$
! - Print @0,Msc(34) - 1;'CL';@J4 - 1,J5;'EU';@J4 + J3,J5;'EU';
! - If Len(J4$) <= J3 Goto L_7130
! - J7$ = "TOO LONG !" \ Gosub L_7600 \ Goto L_7105
! - L_7130: J9$ = J4$ \ If Len(J9$) Goto L_7145
! - If J0$[3,4] = "00" Let J9$ = J1$ \ Goto L_7145
! - J7$ = "FIELD MUST BE ENTERED !" \ Gosub L_7600 \ Goto L_7105
! - L_7145: For J8 = 1 To Len(J9$)
! -   If J9$[J8,J8] >= " " If J9$[J8,J8] <= "~" Next J8 \ Goto L_7160
! - J7$ = "ILLEGAL CHARACTER DETECTED IN FIELD!" \ Gosub L_7600 \ Goto L_7105
! - L_7160: On J0 Goto L_7165,L_7165,L_7185,L_7185,L_7265,L_7330 \ Stop 
! - L_7165: J$ = J0$[2,2],J$
! - If J0 = 1 Let J$[J3 - Len(J9$) + 1] = J9$
! - If J0 = 2 Let J$[1,Len(J9$)] = J9$
! - Goto L_7345
! - L_7185: J9 = 0 \ For J8 = 1 To Len(J9$)
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "-" Goto L_7235
! -   If J0 = 4 If J8 = 1 If J9$[1,1] = "+" Goto L_7235
! -   If J9$[J8,J8] > "/" If J9$[J8,J8] < ":" Goto L_7230
! -   If J9$[J8,J8] = " " Goto L_7235
! -   If Len(J0$) < 11 Goto L_7210
! -   J7$ = "" \ J7$ = J0$[10] To J9$[J8,J8] \ If J7$ <> "" Goto L_7235
! - L_7210: If J9$[J8,J8] <> "." Goto L_7250
! -   If Not(J6) Let J7$ = "NO DECIMAL POINT ALLOWED IN FIELD !" \ Goto L_7260
! -   If J9 Goto L_7250
! -   J9 = 1
! - L_7230: If J9 Let J9 = J9 + 1
! - L_7235: Next J8
! - If J9 - 2 > J6 Let J7$ = "TOO MANY DECIMAL PLACES FOR FIELD !" \ Goto L_7260
! - J1 = J9$ \ J$ = J1 Using J2$ \ J$[J3 + 1] = "" \ Goto L_7345
! - L_7250: J7$ = "ILLEGAL NUMBER ENTERED FOR FIELD !"
! - If J0 = 3 If J9$[1,1] = "-" Let J7$ = "NO SIGN ALLOWED FOR FIELD !"
! - L_7260: Gosub L_7600 \ Goto L_7105
! - L_7265: If Len(J9$) <> 6 If J9$[7,8] <> "  " Goto L_7325
! - J9[0] = J9$[1,2] \ J9[1] = J9$[3,4] \ J9[2] = J9$[5,6]
! - If J9 = 0 If J9[1] = 0 If J9[2] = 0 Goto L_7315
! - On J9 Goto L_7290,L_7300,L_7290,L_7285,L_7290,L_7285
! - On J9 - 6 Goto L_7290,L_7290,L_7285,L_7290,L_7285,L_7290
! - Goto L_7325
! - L_7285: If J9[1] > 30 Goto L_7325
! - L_7290: If J9[1] > 31 Goto L_7325
! - Goto L_7315
! - L_7300: If J9[1] > 29 Goto L_7325
! - If Not(Fra(J9[2] / 4)) Goto L_7315
! - If J9[1] > 28 Goto L_7325
! - L_7315: J1 = J9[2] * 10 ^ 4 + J9 * 10 ^ 2 + J9[1] \ X2 = J1 \ Gosub L_7700
! - J$ = X$ \ J3 = 8 \ Goto L_7345
! - L_7325: J7$ = "INVALID DATE !" \ Gosub L_7600 \ Goto L_7105
! - L_7330: If J9$ = "N" Let J1 = 0 \ J$ = "N" \ Goto L_7345
! - If J9$ = "Y" Let J1 = 1 \ J$ = "Y" \ Goto L_7345
! - J7$ = "RESPONSE MUST BE ''Y'' OR ''N'' !" \ Gosub L_7600 \ Goto L_7105
! - L_7345: J$[J3 + 1] = "" \ Print @J4,J5;J$;" "; \ Return 
! - L_7600: If Len(J7$) > Msc(33) - 2 Let J7$[Msc(33) - 2] = ""
! - Print @0,Msc(34) - 1;'BR'; Tab (Msc(33) / 2 - Len(J7$) / 2);J7$;
! - Print Tab Msc(33) - 2;'ER RB'; \ Signal 3,20
! - Print @0,Msc(34) - 1;'CL'; \ Return 
! - L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
! - X$ = " ",X$ \ X$[10] = ""
! - X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
! - X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
! - X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
! - X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
! - If Not(X2) Let X$ = "        "
! - Return 
! - X2 = X$[4,5] \ X1 = X$[1,2] \ X2 = X2 + X1 * 10 ^ 2
! - X1 = X$[7,8] \ X2 = X2 + X1 * 10 ^ 4
! - Return 
! - OUTEND: Rem EXIT PROGRAM
! - Print 'CS'
! - Chain "MX000C"
! - Stop 
! - End 
Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 
