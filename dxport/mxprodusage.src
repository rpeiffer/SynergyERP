! MXPRODUSAGE  --- Displays the product usage --- from po361u
!
! loadsave -w -n 100,10 -o prog/dxport/mxprodusage.dl4 src/mxprodusage.src
!
! used by: serp377, po367b, serppol
!
!!Option Default Dialect IRIS1
Declare External sub mxprodusage
Rem BEDIT Version: 2.2 OBJECT CODE     Created: AUG 24, 2005  15:35:25
Rem /w2/papermaster/r2005//usr/acct/txc/work/r2005/po/po361u.src (univ2) [txc] {06381}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem PO361U - Product Usage
Rem last update:  cct 84657 4/23/97 show po's in process, jlp
Rem               09/26/97 cct100330 vst lines 1220 & 5090 now use prod$[1,12] also now the vdr phone # comes from a5$
! UPDATE: 02/18/14 - task 31796 - include whse trans requests (xfer not approved)
! need chan
! need wh
! need product code
! cost levels 
! need main

include "src/copyright.inc"

External Sub mxprodusage(Chan[],specs[],prod$,msg$,errtype,rstr$,maxcnt,cost_lev[])
Declare Intrinsic Sub InpBuf,String
!!Option Default Dialect IRIS1
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault
Declare External Function OpenFile,PDate$,FormatDate2$
External Lib "libgeneral.lib"
Declare External Sub SubErr,CreateNetStatus,GetDelimiters
Declare External Sub GetSession,AddToStr,SetOutPut
Declare External Function getmsg$,expandarray 
External Lib "libprodconv.lib" 
Declare External Function ConvProdAmount 

include "src/inc/filewhinfoz.inc" ! warehouse


Try
!!! start of com variables !!!
dim wh. as whinfo
dim 1%,PFU1[20],CNVTU[9],MAIN,MODE,DIR,WH ! COST_LEV[3],
dim 2%,PF_B[24],VENDOR,ORDER
dim 3%,PFU2[6],A[33],CNVTA[4],AMOUNT,FIELD,BASE,PO_COST,SUG_QTY,DSP_UNIT
dim 3%,R2,PF_A1[7],POLREC,rec_wh
dim J4$[50],PF_A$[156],VEN$[264],VEND_C2$[44],UNT$[4] ! PROD$[12],
dim VEN_ITEM$[20]

!!! end of com variables
!IF NOT (MAXCNT) LET MAXCNT=100
!DIM LIST$[MAXCNT,1500]
! rstr$ is returned - set maxct in here!
maxct=100
Dim List$[maxct,1500] ! new larger size 
Dim 1%,J9[2],J0,J2,J3,J4,J5,J6,J8,X1,MAIN_W0[3],MAIN_W1[2]
Dim 1%,ALT1_W0[3],ALT1_W1[2],BOYMTH,OL1[3],uwhse[99]
Dim 1%,ALT2_W0[3],ALT2_W1[2],PO_H4[3],x[9],h4[2],OWHT[1]
Dim 1%,ALT3_W0[3],ALT3_W1[2],PO_L1[5],POMISC[2],ARMONTH,MTHDAYS
Dim 2%,X2[9],MAIN_W2[9],MAIN_WH7[3],MAIN_W7[14],PO_H3[4],M3[1],BDAYS[24]
Dim 2%,ALT1_W2[9],ALT1_WH7[3],ALT1_W7[14],PO_H0[5],PO_L2[2],OL2[3],H5[16],OLL2[1]
Dim 2%,ALT2_W2[9],ALT2_WH7[3],ALT2_W7[14],PF_C4[10],PFCO[3],L4[3]
Dim 2%,ALT3_W2[9],ALT3_WH7[3],ALT3_W7[14],AR_DATE,FIXPO,CUST,cwhse
Dim 3%,J,J1,MAIN_W3[24],MAIN_WHLV[2],MAIN_WH5[25],MAIN_WH9[25],PRPARC[3]
Dim 3%,ALT1_W3[24],ALT1_WHLV[2],ALT1_WH5[25],ALT1_WH9[25],ONBO[99],ONTRAN[99]
Dim 3%,ALT2_W3[24],ALT2_WHLV[2],ALT2_WH5[25],ALT2_WH9[25],LIST[6],SUG_QTY
Dim 3%,ALT3_W3[24],ALT3_WHLV[2],ALT3_WH5[25],ALT3_WH9[25],TOTAL_W3[2]
Dim 3%,S1[12,2],S2[12,2],USAGE1[12],USAGE2[12],USAGE3[12],USAGE0[12],P3[4]
Dim 3%,W3[24],PLTR,K14$[50],PO_L3[6],PL4[5],WHMISC[6],PO_H8[9],PO_PO3[10]
Dim 3%,M1[17],OL3[5],R[99],U3,OL7[12],TRREQ[99]
dim 3%,WHSE_W30[99],WHSE_W31[99],WHSE_W32[99],USAGEW[99,12] ! new style vars
Dim J$[75],J0$[10],J1$[75],J2$[40],J3$[40],J5$[75],J7$[75],J9$[75]
Dim X$[10],P9$[50],J6$[40],MAIN_W2$[36],MAIN_W1$[32],KEY_$[50],A5$[60]
Dim ALT1_W2$[36],ALT1_W1$[32],PF_A2$[30],REA$[10],K12$[50],Custom_customer$[30]
Dim ALT2_W2$[36],ALT2_W1$[32],F$[16],BUYER$[30],BASE$[4],WEBSTR$[2500]
Dim ALT3_W2$[36],ALT3_W1$[32],WH_NAME$[4],P60$[50],P61$[256],F1$[16]
Dim MTH1$[10],MTH2$[10],MTH3$[10],MTH4$[10],MTH5$[10],MTH6$[10],K18$[60],K19$[60]
dim mth7$[10],mth8$[10],mth9$[10],mth10$[10],mth11$[10],mth12$[10]
Dim K2$[50],K3$[50],K6$[50],K10$[50],PHONE$[15],K16$[50],TY$[2],C$[16],TMP$[100],E$[256]
DIM KOL$[60],L1$[20],KEYTMP$[50],2%,VW5[1],3%,REC_TMP
Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10] ! ,rstr$[2000] 
dim 3%,ONTR,req_qty
Def FNR(X) = Sgn(X) * (Int(Abs(X) * 100 + .5) * .01)
call GetDelimiters(e$,bsdel$,esdel$,rdel$,fdel$)
wh=specs[1] ! wh for po's
main=specs[2] ! main / default whse
vendor=specs[3]
intco=specs[10] ! company #
oldstyle=0 ! 1=the original 4 whse version ! (0=new all whse version)
! openfiles 
if not (chan[0]) ! cntrl file #1
	ctlc = OpenFile(9999,intCo) \ If ctlc = -1 Error 42 !control 
else
	let ctlc=chan[0]
endif
if not (chan[1]) ! purchase order header  #8
	 Ch_Poh = openfile(2416,intCo) \ If Ch_Poh = -1 Error 42     !"po header file
else
	ch_poh=chan[1]
endif
if not (chan[2]) ! po lines #14
	Ch_PoL = openfile(2432,intCo) \ If Ch_Pol = -1 Error 42     !"po lines file
else
	let ch_pol=chan[2]
endif
if not (chan[3]) ! order header #18
	 Ch_Roh = openfile(1840,intCo) \ If Ch_Roh = -1 Error 42     !order  header file
else
	let ch_roh=chan[3]
endif
if not (chan[4]) ! product file #2 * 
	 Ch_Prod = OpenFile(1792,intCo) \ If Ch_Prod = -1 Error 42  !product file 
else
	let ch_prod=chan[4]
endif
if not (chan[5]) ! product warehouse #3 * 
	Ch_PrWh = OpenFile(1744,intCo) \ If Ch_PrWh = -1 Error 42  !"product warehouse file
else
	let ch_prwh=chan[5]
endif
if not (chan[7]) ! unit of measure file #5* 
	Ch_Ccode = OpenFile(-1728,intCo) \ If Ch_Ccode = -1 Error 42  !u/m codes file
else
	let ch_ccode=chan[7]
endif
if not (chan[8]) ! order lines #68
	ch_rol=OpenFile(1888,intCo) \ If Ch_rol = -1 Error 42 ! order line
else
	let ch_rol=chan[8]
endif
If not (chan[12]) ! deals #12
	ch_deal=OpenFile(-864,intCo) \ If Ch_deal = -1 Error 42 ! deals file
else
	let ch_deal=chan[12]
endif
If not (chan[16]) ! product sales #4
	ch_prsls=OpenFile(-2080,intCo) \ If Ch_prsls = -1 Error 42 ! product sales
else
	let ch_prsls=chan[16]
endif
if not (chan[17]) ! vendor #6
	ch_vend=OpenFile(-2400,intCo) \ If Ch_vend = -1 Error 42 ! vendor code
else
	let ch_vend=chan[17]
endif
if not (chan[18]) ! sprodlot #10
	ch_prlot=OpenFile(-2528,intCo) \ If Ch_prlot = -1 Error 42 ! sprodlot
else
	let ch_prlot=chan[18]
endif
if not (chan[19]) ! WHinfo #13
	ch_wh=OpenFile(-2768,intCo) \ If Ch_wh = -1 Error 42 ! whinfo
else
	let ch_wh=chan[19]
endif
if not (chan[20]) ! Vendor Tag File
	ch_vtag=OpenFile(-1120,intCo) \ If Ch_vtag = -1 Error 42 ! vendor tag
else
	let ch_vtag=chan[20]
endif
if not (chan[21]) ! sordlot
	ch_ordlot=OpenFile(-2320,intCo) \ If Ch_ordlot = -1 Error 42 ! sordlot
else
	let ch_ordlot=chan[21]
endif
if not (chan[22]) ! buyer
	ch_buyer=OpenFile(-9991,intCo) \ If Ch_buyer = -1 Error 42 ! buyer
else
	let ch_buyer=chan[21]
endif


Read #ctlc,0,120;ARMONTH;
Mat Read #ctlc,11,0;BDAYS;
MTHDAYS = BDAYS[ARMONTH]
If MTHDAYS <= 0 Let MTHDAYS = 21
Read #ctlc,0,108;AR_DATE;
Read #ctlc,3,184;FIXPO;
Mat Read #ctlc,19,50;P9$; \ Mat Read #ctlc,60,50;P60$;
Mat Read #ctlc,61,0;P61$;
MAT  READ #ctlc,115,60;CUSTOM_CUSTOMER$;
custom_customer$=UCase$(Trim$(custom_customer$))
read #ctlc,60,16;cwhse; ! cons whs start
if cwhse<=1 let cwhse=50 ! not set up??
If Not(WH) Let WH = MAIN
If Not(WH) Let WH = 1
if wh>cwhse let wh=1 ! only to cons
if main>cwhse let main=1
If WH = 1 Let ALT_WH1 = 2;ALT_WH2 = 3;ALT_WH3 = 4;MAIN = 1 ! was or WH>3
If WH = 2 Let ALT_WH1 = 3;ALT_WH2 = 1;ALT_WH3 = 4;MAIN = 2
If WH = 3 Let ALT_WH1 = 2;ALT_WH2 = 1;ALT_WH3 = 4;MAIN = 3
iF WH > 3 LET MAIN=WH;ALT_WH1=1;ALT_WH2=2;ALT_WH3=3
if custom_customer$="MORRISETTE"
	LET ALT_WH1=3;ALT_WH2=4;ALT_WH3=6;MAIN=1;ALT_WH4=8
	IF WH=3 LET ALT_WH1=1;ALT_WH2=4;ALT_WH3=6;MAIN=3;ALT_WH4=8
	IF WH=4 LET ALT_WH1=1;ALT_WH2=3;ALT_WH3=6;MAIN=4;ALT_WH4=8
	IF WH=6 LET ALT_WH1=1;ALT_WH2=3;ALT_WH3=4;MAIN=6;ALT_WH4=8
	IF WH=8 LET ALT_WH1=1;ALT_WH2=3;ALT_WH3=4;MAIN=8;ALT_WH4=6
	IF WH<>MAIN LET WH=MAIN
Endif
! or is it always 1 2 3 4 then rest - I say yes (as no specs at all)
! Main=1;ALT_WH1 = 2;ALT_WH2 = 3;ALT_WH3 = 4
! set up all valid whses
clear uwhse[]
x[1]=1
for x=1 to cwhse-1
	wr=x-1 ! whse is 1 less
	try
		read #ch_wh,wr,0;x$[1,4];
	Else
		x$="    "
	End try
	if RTrim$(X$)>" "
		uwhse[x]=x[1] ! it's used (set up)
		! x[1]=x[1]+1 ! set whse is in use to 1
	Endif
Next x
DIR = 3
! calculate accounting periods
K2$ = AR_DATE Using "&&&&&&&";YEAR_ = K2$[2,3];MTH = K2$[4,5]
ARMTH = MTH
MTH1 = MTH;YEAR1 = YEAR_
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH1$[1,2] = MTH1 Using "&&";MTH1$[3,3] = "/";MTH1$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH2$[1,2] = MTH1 Using "&&";MTH2$[3,3] = "/";MTH2$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH3$[1,2] = MTH1 Using "&&";MTH3$[3,3] = "/";MTH3$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH4$[1,2] = MTH1 Using "&&";MTH4$[3,3] = "/";MTH4$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH5$[1,2] = MTH1 Using "&&";MTH5$[3,3] = "/";MTH5$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH6$[1,2] = MTH1 Using "&&";MTH6$[3,3] = "/";MTH6$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH7$[1,2] = MTH1 Using "&&";MTH7$[3,3] = "/";MTH7$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH8$[1,2] = MTH1 Using "&&";MTH8$[3,3] = "/";MTH8$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH9$[1,2] = MTH1 Using "&&";MTH9$[3,3] = "/";MTH9$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH10$[1,2] = MTH1 Using "&&";MTH10$[3,3] = "/";MTH10$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH11$[1,2] = MTH1 Using "&&";MTH11$[3,3] = "/";MTH11$[4,5] = YEAR1 Using "&&"
MTH1 = MTH1 - 1
If MTH1 < 1 Let MTH1 = 12;YEAR1 = YEAR1 - 1 \ If YEAR1 < 0 Let YEAR1 = 99
MTH12$[1,2] = MTH1 Using "&&";MTH12$[3,3] = "/";MTH12$[4,5] = YEAR1 Using "&&"
if prod$=""
	let errtype=99
	let msg$="Invalid Product Code"
endif
if not (errtype)
	Gosub L_5900 ! prod,vend,qtrs, vend, reorder, b/o, transfer
	Gosub L_6825 ! convert qty - all whses
endif
Gosub L_5000 ! send all details
goto outend: 


L_3000: Rem LOOK FOR PO'S
PO_FOUND = 0
LineNum = 19
K14$ = " ",K14$
K14$[1,6] = R2 Using "######"
K14$[7,12] = "999999"
L_3060: Search #ch_pol,6,2;K14$,R14,E
If E Goto L_3310
X2 = K14$[1,6] \ If X2 <> R2 Goto L_3310
If row > 12 Goto L_3310 ! last 10 purchase orders
Mat Read #ch_pol,R14,0;PO_L1;
Mat Read #ch_pol,R14,12;PO_L2;
Mat Read #ch_pol,R14,24;PO_L3;
Mat Read #ch_pol,R14,232;PL4;
Mat Read #ch_pol,R14,376;POMISC;
If PO_L1[0] = 3 Or PO_L1[0] > 5 Goto L_3060
If Not(POMISC[0]) Goto L_3060
If (PO_L3[3]) >= PO_L3[2] Goto L_3060
Mat Read #ch_poh,PO_L3[0],0;PO_H0;
Mat Read #ch_poh,PO_L3[0],222;PO_H3;
Mat Read #ch_poh,PO_L3[0],242;PO_H4;
Mat Read #ch_poh,PO_L3[0],250;PO_H8;
Mat Read #ch_poh,PO_L3[0],350;PO_PO3;
If PO_H0[0] > 4 Goto L_3060
If PO_H4[1] <> WH Goto L_3060
Gosub L_3320 ! vendtag
CNVTA[0] = PO_L3[2] + PL4[1];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
PO_QTY = AMOUNT
CNVTA[0] = PL4[0];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 2 \ Gosub L_20000
CST = AMOUNT
PO_FOUND = 99
TY$ = "  "
Goto L_3280
If MIN_TYPE < 0 If M3[1] If M3[0]
  If M3[1] = 1 Let PO_QTY = PO_H8[1];TY$ = "LB"
  If M3[1] = 2 Let PO_QTY = PO_PO3[9];TY$ = "CB"
End If 
If MIN_TYPE < 0 If Not(M3[0]) Let PO_QTY = PO_PO3[9];TY$ = "CB"
If MIN_TYPE = 0 Or MIN_TYPE = 4 Let PO_QTY = PO_H8[0];TY$ = "$"
If MIN_TYPE = 1 Or MIN_TYPE = 5 Let PO_QTY = PO_H8[1];TY$ = "LB"
If MIN_TYPE = 2 Or MIN_TYPE = 6 Let PO_QTY = PO_PO3[9];TY$ = "CB"
If MIN_TYPE = 3 Or MIN_TYPE = 7 Let PO_QTY = PO_PO3[10];TY$ = "PC"
L_3280: ! load line Print Using "###### ###### ####.## ";@54,LineNum;PO_H0[2];PO_QTY;CST;
let webstr$=rtrim$(PO_H0[2] USING "######"),fdel$
let webstr$=webstr$+ltrim$(PO_QTY USING "#######"), fdel$
let webstr$=webstr$+ltrim$(CST USING "#####.##"),fdel$
let list$[row]=webstr$
let row=row+1
Goto L_3060
L_3310: Return 
L_3320: Rem READ VEND TAG FILE
K16$ = " ",K16;K16$[1,6] = PO_H3[3] Using "######"
Mat M1 = Zer \ Mat M3 = Zer \ MIN_TYPE = -1
Search #ch_vtag,2,1;K16$,R16,E
If E Return 
Mat Read #ch_vtag,R16,206;M1;
Mat Read #ch_vtag,R16,386;M3;
If P61$[63,63] = "Y" ! "look for vend/whse minimums
  X = 0
 !  Call "POVWMIN",PO_H3[3],PO_H4[1],M1[],J$,X
  X = 0
  ! vendor warehouse info -- truck size
  Ch_tmp = openfile(-9961,intCo)
  if ch_tmp>0 
	let keytmp$=" ",keytmp$
	let keytmp$[1,6]=PO_H3[3] USING "######" ! vendor 
	let keytmp$[7,8]=PO_H4[1] USING "##" ! WHSE
	search #ch_tmp,2,1;keytmp$,rec_tmp,e
	if not(e)
		 MAT  READ #ch_tmp,rec_tmp,792;VW5; 
		 if vw5[0] 
			LET M3[0]=VW5[0]           
			IF VW5[1] LET M3[1]=VW5[1] 
		endif
	endif
	close #ch_tmp
 endif

  !  Call "POVWHSE",PO_H3[3],PO_H4[1],X2[],M3[],J$,J$,J$,X
End If 
For X = 0 To 3
  If M1[X] Let MIN_TYPE = X
Next X
If MIN_TYPE <= 0
  For X = 4 To 7
    If M1[X] Let MIN_TYPE = X
  Next X
End If 
Return 
L_4000: Rem FIND REORDER QTY
Goto L_4050
If MAIN_W7[12] = 1 Gosub L_4630
If MAIN_W7[12] = 2 Gosub L_4730
If MAIN_W7[12] = 3 Gosub L_4500
If MAIN_W7[12] = 6 Gosub L_4795
L_4050: WHS = Main \ Gosub L_4580 ! on bo - trans
If MAIN_W3[0] + MAIN_W3[1] - QBO > MAIN_W3[5] Let MAIN_W3[11] = 0
REA$ = " ",REA$
If MAIN_W3[0] + MAIN_W3[1] - QBO <= MAIN_W3[5] Let REA$ = "BELOW LP"
If MAIN_W3[0] + MAIN_W3[1] - QBO < MAIN_W3[6] Let REA$ = "BELOW OP"
CNVTA[0] = MAIN_W3[11];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
MAIN_W3[11] = AMOUNT
Return 
L_4500: Rem "===================================== seasonal usage rate
Goto L_4630
MAIN_W3[8] = 0
MAIN_W3[9] = 0
If Not(MAIN_W2[2]) Goto L_4575
If MAIN_W2[2] > 11 Let MAIN_W2[2] = 11
X7 = AR_MONTH + 1 \ If X7 = 13 Let X7 = 1
For I = MAIN_W2[2] To 1 Step -1
  MAIN_W3[8] = MAIN_W3[8] + MAIN_WH5[X7]
  If MAIN_WH9[X7] Let MAIN_W3[9] = MAIN_W3[9] + MAIN_WH9[X7] Else Let MAIN_W3[9] = MAIN_W3[9] + MAIN_WH5[X7]
  X7 = X7 + 1 \ If X7 = 13 Let X7 = 1
Next I
MAIN_W3[8] = MAIN_W3[8] / MAIN_W2[2];MAIN_W3[8] = MAIN_W3[8] + (MAIN_W3[8] * (MAIN_WH7[1] / 100))
MAIN_W3[9] = MAIN_W3[9] / MAIN_W2[2];MAIN_W3[9] = MAIN_W3[9] + (MAIN_W3[9] * (MAIN_WH7[1] / 100))
L_4575: Return 

L_4580: Rem "=================================== calc qty back-ordered
QBO = 0;ONTR = 0;REQ_QTY=0
K10$ = " ",K10$;K10$[1,12] = K2$[1,12];K10$[13,14] = WHS Using "##"
J$ = K10$
L_4595: Search #ch_prlot,3,4;K10$,R10,E 
If E <> 0 Goto L_4625
If J$[1,14] <> K10$[1,14] Goto L_4625
Mat Read #ch_prlot,R10,82;P3;
Read #ch_prlot,R10,120;PLTR;
QBO = QBO + P3[4]
! ONTR = ONTR + PLTR ! done in L_4900!
Goto L_4595
L_4625: Gosub L_4900 ! transfers
Return 
L_4630: MAIN_W3[11] = 0
If MAIN_W3[9] > 0 If (MAIN_W3[13] * COST) <> 0
  MAIN_W3[11] = FNR(Sqr((24 * FIXPO * MAIN_W3[9]) / (MAIN_W3[13] * COST))) \ MAIN_W3[10] = MAIN_W3[11]
End If 
If MAIN_W3[11] > (MAIN_W3[9] * 12) Let MAIN_W3[11] = MAIN_W3[9] * 12
If MAIN_W3[11] < (MAIN_W3[9] * .25) Let MAIN_W3[11] = MAIN_W3[9] * .25
For UNT = 1 To 7
  If PFU1[UNT] = PFU1[10] Goto L_4680
Next UNT
FACTOR = 1 \ Goto L_4690
L_4680: If PFU1[UNT] = -1 Let FACTOR = 1 \ Goto L_4690
If PFU1[UNT] = -3 Let FACTOR = 1 \ Goto L_4690
FACTOR = PFU2[UNT - 1] \ If Not(FACTOR) Let FACTOR = 1
L_4690: If Fra(MAIN_W3[11] / FACTOR) >= .5
  MAIN_W3[11] = (1 + (Int(MAIN_W3[11] / FACTOR)) * FACTOR)
End If 
If Fra(MAIN_W3[11] / FACTOR) < .5
  MAIN_W3[11] = ((Int(MAIN_W3[11] / FACTOR)) * FACTOR)
End If 
Return 
L_4730: Rem "========================== order qty using INV CLASS (#2)
If MAIN_W7[6] = 13 Let MAIN_W3[11] = 0 \ Goto L_4745
MAIN_W3[11] = MAIN_W3[9] * MAIN_W7[6]
L_4745: Return 
L_4795: Rem "========================== order qty using MIN/MAX (#6)
If Not(MAIN_W3[4]) If Not(A1[1]) Goto L_4825
! Gosub L_4580
If Not(MAIN_W3[4]) If A1[1] Let MAIN_W3[4] = A1[1]
MAIN_W3[11] = MAIN_W3[4] - (MAIN_W3[0] + MAIN_W3[1] - MAIN_W3[2] - QBO)
If MAIN_W3[11] < 0 Let MAIN_W3[11] = 0
L_4825: Return 

L_4900: Rem on transfer - let's use the 393/397 way (by prodrec thru rol)
! does it once for every whse(WHS) called in L_4580
kol$=" ",kol$
kol$[1,6]=R2 using "######" ! prodrec
rolloop: ! all for product
search #ch_rol,3,2;kol$,r[29],e \ if e return
x2=kol$[1,6] \ if x2<>r2 return ! diff prod
mat read #ch_rol,r[29],16;L4;
mat read #ch_rol,r[29],140;L1$;
mat read #ch_rol,r[29],168;OL7;
If OL7[2]=0 goto rolloop ! no order - no need
!if l1$[1,12]<>k3$[1,12] goto rolloop ! diff product
for i=1 to 7 ! exclude in-process, cm's etc
	k18$=" ",k18$
	k18$[1,2]=I using "##"
	k18$[3]=kol$[7,12] ! order from line key
	search #ch_roh,2,1;k18$,r[18],e
	if not(e) goto gottord
next i
goto rolloop ! ord header not found!
gottord: ! got a header - check it
Mat Read #ch_roh,R[18],104;H5; \ If H5[7] <> 16 Goto rolloop ! not xfer
! 31796 - need on req and approved
mat read #ch_roh,R[18],486;OWHT;
IF L4[3]<1 OR L4[3]>99
	MAT READ #ch_roh,R[18],78;H4;
	LET L4[3]=H4[2]
ENDIF
if owht[0]=0 ! on req (not in sordlot yet!)
	if whs=H5[11] let req_qty=req_qty+(OL7[2] - OL7[0]) ! to
	if whs=L4[3] let req_qty=req_qty-(OL7[2]-OL7[0]) ! from
Endif
if owht[0]=1 and whs=h5[11] ! only approved and for to
	ONTR = ONTR + (OL7[2] - OL7[0])
Endif

Goto Rolloop 
! below is old way (thru ordlot?)
!K19$ = " ",K19$
!K19$[1,12] = K3$[1,12]
!L_4915: Search #ch_ordlot,3,1;K19$,R[19],E \ If E <>0 Goto L_4985
!If K19$[1,12] <> K3$[1,12] Goto L_4985
!Mat Read #ch_ordlot,R[19],36;OL1;
!If OL1[2] <> WHS Goto L_4915
!If OL1[1] <> 2 Goto L_4915
!Mat Read #ch_ordlot,R[19],60;OL3; \ If Not(OL3[4]) Goto L_4915
!Mat Read #ch_ordlot,R[19],44;OL2;
!K18$ = " ",K18$ \ K18$[1,6] = OL2[2] Using "######"
!K18$[7,12] = OL2[0] Using "######"
!Search #ch_roh,2,2;K18$,R[18],E \ If E Goto L_4915
!Mat Read #ch_roh,R[18],104;H5; \ If H5[7] <> 16 Goto L_4915
! 31796 - need on req and approved
!mat read #ch_roh,R[18],486;OWHT;
!let kol$=" ",kol$
!let kol$[1,6]=k18$[7,12]
!rolloop: ! thru each line
!search #ch_rol,3,1;kol$,r[29],E \ if e goto L_4915
!if kol$[1,6]<>K18$[7,12] goto L_4915 ! diff order
!mat read #ch_rol,r[29],16;L4;
!mat read #ch_rol,r[29],140;L1$;
!if l1$[1,12]<>k3$[1,12] goto rolloop ! diff product
!mat read #ch_rol,r[29],168;OL7;
!IF L4[3]<1 OR L4[3]>99
!	MAT READ #ch_roh,R[18],78;H4;
!	LET L4[3]=H4[2]
!ENDIF
!if owht[0]=0 ! whse from? if not same?
!		if whs=H5[11] let req_qty=req_qty+OL3[4] ! (OL7[2] - L7[0]) ! to
!		if whs=L4[3] let req_qty=req_qty-OL3[4] ! (L7[2]-L7[0]) ! from
!Endif
!if owht[0]=1 and whs=h5[11] ! only approved and for to
!		ONTR = ONTR + OL3[4] ! TRANSIN_QTY = TRANSIN_QTY + (L7[2] - L7[0])
!Endif

!Goto Rolloop ! was L_4915 ! now check each order line?
L_4985: Return 

L_5000: Rem DRAW SCREEN
Clear List$[]
List$[0]=bsdel$," USAGE HEADINGS ",fdel$
webstr$="VendID",fdel$
webstr$=webstr$,"VendName",fdel$
Webstr$=webstr$,"Telephone",fdel$
Webstr$=webstr$,"VendItemId",fdel$
Webstr$=webstr$,"ProdId",fdel$
Webstr$=webstr$,"ProdDesc1",fdel$
Webstr$=webstr$,"ProdDesc2",fdel$
Webstr$=webstr$,"BuyerId",fdel$
Webstr$=webstr$,"BuyerName",fdel$
webstr$=webstr$,"LeadTime",fdel$
webstr$=webstr$,"Unit",fdel$
webstr$=webstr$,"BaseFactor",fdel$
webstr$=webstr$,"BaseUnit",fdel$
!webstr$=webstr$,"POCost",fdel$
Webstr$=webstr$,"NetPoCost",fdel$   ! FLIPPED LABELS TO FIX FRONT END ISSUE
webstr$=webstr$,"POCost",fdel$		! FLIPPED LABELS TO FIX FRONT END ISSUE
Webstr$=webstr$,"SkidTierSize",fdel$
webstr$=webstr$,"DEALS",fdel$
webstr$=webstr$,"HILIGHTPID",fdel$
LIST$[1]=webstr$
if not(errtype) 
	Gosub L_8000 ! get vendor name
	Gosub L_8500 ! chk for deals
	webstr$=rtrim$(main_w2[3] using "######"),fdel$
	webstr$=webstr$,rtrim$(ven$[1,30]),fdel$
	webstr$=webstr$,rtrim$(a5$[1,20]),fdel$
	webstr$=webstr$,rtrim$(main_w1$[13,32]),fdel$
	webstr$=webstr$,rtrim$(prod$[1,12]),fdel$
	webstr$=webstr$,rtrim$(pf_a$[9,38]),fdel$
	webstr$=webstr$,rtrim$(pf_a$[63,92]),fdel$
	webstr$=webstr$,rtrim$(main_w1[2] using "###"),fdel$
	webstr$=webstr$,rtrim$(buyer$),fdel$
	webstr$=webstr$,rtrim$(fnr(main_w2[0]*mthdays) using "####.##")," DAYS",fdel$
	webstr$=webstr$,rtrim$(unt$[1,4]),fdel$
	webstr$=webstr$,rtrim$(factor using "######"),fdel$
	webstr$=webstr$,rtrim$(base$),fdel$
	let tmp$=""
	If COST_LEV[2] > 0 
		let tmp$=PO_COST Using "######.##"
	endif
	webstr$=webstr$,tmp$,fdel$ ! po cost
	tmp$=""
	If COST_LEV[0] > 0 And COST_LEV[1] > 0 And COST_LEV[2] > 0 And COST_LEV[3] > 0
		IF NET_PO_COST>0
			let tmp$=NET_PO_COST using "#####.##"
		endif
	End If
	webstr$=webstr$,tmp$,fdel$ ! net po cost
	UNT = PFU1[8] \ Gosub L_8100
	webstr$=webstr$,rtrim$(whmisc[4] using "####"),"/",rtrim$(unt$[1,4])," X",rtrim$(whmisc[5] using "###"),fdel$
	tmp$="N" \ if dealsof=1 let tmp$="Y"
	webstr$=webstr$,tmp$,fdel$ ! deals Y/N
	tmp$="N" \ if custom_customer$="MORRISETTE" and Int(U3)<>0 let tmp$="Y"
	! if Int(U3)<>0 tmp$="Y" ! TESTING ONLY - TESTING ONLY - TESTING ONLY - 
	webstr$=webstr$,tmp$,fdel$ ! Highlight Product Y/N
	list$[2]=webstr$
endif
Call AddToStr(e$,rstr$,List$[])                   
Call AddToStr(e$,rstr$,esdel$) ! end of section  

! next section is the warehouse stock info

Clear List$[]
List$[0]=bsdel$," WARHOUSE STOCK ",fdel$
webstr$="WhID",fdel$
webstr$=webstr$,"DesigName",fdel$
webstr$=webstr$,"On PO",fdel$
webstr$=webstr$,"Trans Req",fdel$
webstr$=webstr$,"On Transfer",fdel$
webstr$=webstr$,"On Hand",fdel$
webstr$=webstr$,"Committed",fdel$
webstr$=webstr$,"Available",fdel$
webstr$=webstr$,"BackOrder",fdel$
list$[1]=webstr$
row=2
if not (errflag)! alt wh 1
  If oldstyle ! wants orig style (4 whses only)
	let wh.desig$=""
	if alt_wh1>0 and alt_wh1<100
		let rec_wh=alt_wh1-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=rtrim$(alt_wh1 using "##"),fdel$
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	let webstr$=webstr$,ltrim$(ALT1_W3[1]  Using "-----------#"),fdel$ ! on po
	let webstr$=webstr$,ltrim$(TRREQ[ALT_WH1]  Using "-----------#"),fdel$ ! on transfer req
	let webstr$=webstr$,ltrim$(ONTRAN[ALT_WH1]  Using "-----------#"),fdel$ ! on transfer
	let webstr$=webstr$,ltrim$(ALT1_W3[0]  Using "-----------#"),fdel$ ! on hand
	let webstr$=webstr$,ltrim$(ALT1_W3[2]  Using "-----------#"),fdel$ ! on committed
	let webstr$=webstr$,ltrim$((ALT1_W3[0]-ALT1_W3[2])  Using "-----------#"),fdel$ ! on available
	let webstr$=webstr$,ltrim$(ONBO[ALT_WH1]  Using "-----------#"),fdel$ ! on backorder
	list$[row]=webstr$
	row=row+1
	! alt wh 2
	let wh.desig$=""
	if alt_wh2>0 and alt_wh2<100
		let rec_wh=alt_wh2-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=rtrim$(alt_wh2 using "##"),fdel$
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	let webstr$=webstr$,ltrim$(ALT2_W3[1]  Using "-----------#"),fdel$
	let webstr$=webstr$,ltrim$(TRREQ[ALT_WH2]  Using "-----------#"),fdel$ ! on transfer req
	let webstr$=webstr$,ltrim$(ONTRAN[ALT_WH2]  Using "-----------#"),fdel$ ! on transfer
	let webstr$=webstr$,ltrim$(ALT2_W3[0]  Using "-----------#"),fdel$ ! on hand
	let webstr$=webstr$,ltrim$(ALT2_W3[2]  Using "-----------#"),fdel$ ! on committed
	let webstr$=webstr$,ltrim$((ALT2_W3[0]-ALT2_W3[2])  Using "-----------#"),fdel$ ! on available
	let webstr$=webstr$,ltrim$(ONBO[ALT_WH2]  Using "-----------#"),fdel$ ! on backorder
	list$[row]=webstr$
	row=row+1
	! alt wh 3
	let wh.desig$=""
	if alt_wh3>0 and alt_wh3<100
		let rec_wh=alt_wh3-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=rtrim$(alt_wh3 using "##"),fdel$
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	let webstr$=webstr$,ltrim$(ALT3_W3[1]  Using "-----------#"),fdel$ ! on po
	let webstr$=webstr$,ltrim$(TRREQ[ALT_WH3]  Using "-----------#"),fdel$ ! on transfer req
	let webstr$=webstr$,ltrim$(ONTRAN[ALT_WH3]  Using "-----------#"),fdel$ ! on transfer
	let webstr$=webstr$,ltrim$(ALT3_W3[0]  Using "-----------#"),fdel$ ! on hand
	let webstr$=webstr$,ltrim$(ALT3_W3[2]  Using "-----------#"),fdel$ ! on committed
	let webstr$=webstr$,ltrim$((ALT3_W3[0]-ALT3_W3[2])  Using "-----------#"),fdel$ ! on available
	let webstr$=webstr$,ltrim$(ONBO[ALT_WH3]  Using "-----------#"),fdel$ ! on backorder
	list$[row]=webstr$
	row=row+1
  Endif ! of wants old style layout
	! main wh
	let wh.desig$=""
	if main>0 and main<100
		let rec_wh=main-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=rtrim$(main using "##"),fdel$
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	let webstr$=webstr$,ltrim$(MAIN_W3[1]  Using "-----------#"),fdel$ ! on po
	let webstr$=webstr$,ltrim$(TRREQ[MAIN]  Using "-----------#"),fdel$ ! on transfer req
	let webstr$=webstr$,ltrim$(ONTRAN[MAIN]  Using "-----------#"),fdel$ ! on transfer
	let webstr$=webstr$,ltrim$(MAIN_W3[0]  Using "-----------#"),fdel$ ! on hand
	let webstr$=webstr$,ltrim$(MAIN_W3[2]  Using "-----------#"),fdel$ ! on committed
	let webstr$=webstr$,ltrim$((MAIN_W3[0]-MAIN_W3[2])  Using "-----------#"),fdel$ ! on available
	let webstr$=webstr$,ltrim$(ONBO[MAIN]  Using "-----------#"),fdel$ ! on backorder
	list$[row]=webstr$
	row=row+1
   If not(oldstyle) gosub printallwhses ! main, all whses, total
	! totals
	let webstr$="",fdel$! whs id
	webstr$=webstr$,"TOTALS",fdel$ ! whs name
	let webstr$=webstr$,ltrim$(TOTAL_W3[1]  Using "-----------#"),fdel$ ! on po
	let webstr$=webstr$,ltrim$(TRREQ[0]  Using "-----------#"),fdel$ ! on transfer req
	let webstr$=webstr$,ltrim$(ONTRAN[0]  Using "-----------#"),fdel$ ! on transfer (was alt_wh3?)
	let webstr$=webstr$,ltrim$(TOTAL_W3[0]  Using "-----------#"),fdel$ ! on hand
	let webstr$=webstr$,ltrim$(TOTAL_W3[2]  Using "-----------#"),fdel$ ! on committed
	let webstr$=webstr$,ltrim$((TOTAL_W3[0]-TOTAL_W3[2])  Using "-----------#"),fdel$ ! on available
	let webstr$=webstr$,ltrim$(ONBO[0]  Using "-----------#"),fdel$ ! on backorder
	list$[row]=webstr$
	row=row+1
endif
Call AddToStr(e$,rstr$,List$[])                   
Call AddToStr(e$,rstr$,esdel$) ! end of section   


! usage sections
Clear List$[]
List$[0]=bsdel$," USAGE ",fdel$
webstr$="WhID",fdel$
webstr$=webstr$,"DesigName",fdel$
webstr$=webstr$,"Month1",fdel$
webstr$=webstr$,"Month2",fdel$
webstr$=webstr$,"Month3",fdel$
webstr$=webstr$,"Month4",fdel$
webstr$=webstr$,"Month5",fdel$
webstr$=webstr$,"Month6",fdel$
webstr$=webstr$,"Month7",fdel$
webstr$=webstr$,"Month8",fdel$
webstr$=webstr$,"Month9",fdel$
webstr$=webstr$,"Month10",fdel$
webstr$=webstr$,"Month11",fdel$
webstr$=webstr$,"Month12",fdel$
list$[1]=webstr$
row=2
if not(errflag) !! second headings
	webstr$="-1",fdel$ ! warehouse for heading
	webstr$=webstr$,"Usage",fdel$
	webstr$=webstr$,mth1$,fdel$
	webstr$=webstr$,mth2$,fdel$
	webstr$=webstr$,mth3$,fdel$
	webstr$=webstr$,mth4$,fdel$
	webstr$=webstr$,mth5$,fdel$
	webstr$=webstr$,mth6$,fdel$
	webstr$=webstr$,mth7$,fdel$
	webstr$=webstr$,mth8$,fdel$
	webstr$=webstr$,mth9$,fdel$
	webstr$=webstr$,mth10$,fdel$
	webstr$=webstr$,mth11$,fdel$
	webstr$=webstr$,mth12$,fdel$
	list$[row]=webstr$
	row=row+1
  If oldstyle ! wants the 4 whse version
	!! alt whs 1
	let webstr$=rtrim$(alt_wh1 using "##"),fdel$
	let wh.desig$=""
	if alt_wh1>0 and alt_wh1<100
		let rec_wh=alt_wh1-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	for ctr=1 to 12
		let webstr$=webstr$,ltrim$(usage1[ctr] using "--------#"),fdel$
	next ctr
	list$[row]=webstr$
	row=row+1
	!! alt whs 2
	let webstr$=rtrim$(alt_wh2 using "##"),fdel$
	let wh.desig$=""
	if alt_wh2>0 and alt_wh2<100
		let rec_wh=alt_wh2-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	for ctr=1 to 12
		let webstr$=webstr$,ltrim$(usage2[ctr] using "--------#"),fdel$
	next ctr
	list$[row]=webstr$
	row=row+1
	!! alt whs 3
	let webstr$=rtrim$(alt_wh3 using "##"),fdel$
	let wh.desig$=""
	if alt_wh3>0 and alt_wh3<100
		let rec_wh=alt_wh3-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	
	for ctr=1 to 12
		let webstr$=webstr$,ltrim$(usage3[ctr] using "--------#"),fdel$
	next ctr
	list$[row]=webstr$
	row=row+1
   Endif ! of wants old style
	!! Main
	let webstr$=rtrim$(main using "##"),fdel$
	let wh.desig$=""
	if main>0 and main<100
		let rec_wh=main-1
		read record #ch_wh,rec_wh;wh.;
	endif
	let webstr$=webstr$,rtrim$(wh.desig$),fdel$
	
	for ctr=1 to 12
		let webstr$=webstr$,ltrim$(usage0[ctr] using "--------#"),fdel$
	next ctr
	list$[row]=webstr$
	row=row+1
	if not(oldstyle) gosub prntallwusage ! new - main then all others
endif
Call AddToStr(e$,rstr$,List$[])                   
Call AddToStr(e$,rstr$,esdel$) ! end of section  
 
clear list$[]
list$[0]=bsdel$,"UsageInfo",fdel$
webstr$="QTR 1",fdel$
webstr$=webstr$,"QTR 2",fdel$
webstr$=webstr$,"QTR 3",fdel$
webstr$=webstr$,"QTR 4",fdel$
webstr$=webstr$,"MTD Qty",fdel$
webstr$=webstr$,"MTD Sales",fdel$
webstr$=webstr$,"MTD Cost",fdel$
webstr$=webstr$,"YTD Qty",fdel$
webstr$=webstr$,"YTD Sales",fdel$
webstr$=webstr$,"YTD Cost",fdel$
webstr$=webstr$,"Cube",fdel$
webstr$=webstr$,"Weight",fdel$
webstr$=webstr$,"Suggested",fdel$
webstr$=webstr$,"Truck Size",fdel$
LIST$[1]=WEBSTR$
if not(errflag)
	WEBSTR$=lTRIM$(QTR1 Using "------#"),fdel$
	WEBSTR$=webstr$,lTRIM$(QTR2 Using "------#"),fdel$
	WEBSTR$=webstr$,lTRIM$(QTR3 Using "------#"),fdel$
	WEBSTR$=webstr$,lTRIM$(QTR4 Using "------#"),fdel$
	WEBSTR$=webstr$,lTRIM$(a[9]  Using "------#"),fdel$ ! mtd qty
	WEBSTR$=webstr$,lTRIM$(a[7] Using "------.##"),fdel$ ! mtd sales
	WEBSTR$=webstr$,lTRIM$(a[11] Using "------.##"),fdel$ ! mtd sales
	WEBSTR$=webstr$,lTRIM$(a[10]  Using "--------#"),fdel$ ! ytd qty
	WEBSTR$=webstr$,lTRIM$(a[8] Using "--------.##"),fdel$ ! ytd sales
	WEBSTR$=webstr$,lTRIM$(a[12] Using "--------.##"),fdel$ ! ytd sales
	webstr$=webstr$,ltrim$(unt_cb using "####.##"),fdel$ ! unit cubes
	webstr$=webstr$,ltrim$(unt_wt using "####.##"),fdel$ ! unit weight
	webstr$=webstr$,ltrim$(rea$)," ",rtrim$(main_w3[11] using "####.##"),fdel$ !?????? suggested
	! truck size
	If P61$[63,63] = "Y" ! "try vendwhse for vendor & main whse
		 PO_H3[3] = VENDOR;PO_H4[1] = MAIN
		Gosub L_3320 ! vendtag
	End If 
	let tmp$=""
	if m3[0]
		let tmp$=m3[0] using "####### "
		if m3[1]=1 let tmp$=tmp$,"LBS"
		if m3[1]=2 let tmp$=tmp$,"CBF"
	endif
	webstr$=webstr$,rtrim$(tmp$),fdel$
	list$[2]=webstr$
endif
Call AddToStr(e$,rstr$,List$[])                   
Call AddToStr(e$,rstr$,esdel$) ! end of section  

clear list$[]
list$[0]=bsdel$,"Purchase Order Info",fdel$
webstr$="PO ID",fdel$
webstr$=webstr$,"QTY",fdel$
webstr$=webstr$,"COST",fdel$
List$[1]=webstr$
if not(errflag) 
	let row=2 ! 
	Gosub L_3000 ! look up purchase orders for passed WH
endif
Call AddToStr(e$,rstr$,List$[])                   
Call AddToStr(e$,rstr$,esdel$) ! end of section
Return 

Printallwhses: ! new style - start w/main then all other whses
! get data - all whses set up IN whinfo
	for ALTWH=1 TO 99
		IF UWHSE[ALTWH] ! ITs SETUP
		  IF ALTWH<>MAIN ! ALREADY DID MAIN
			let wh.desig$=""
			if altwh>0 and altwh<100
				let rec_wh=altwh-1
				read record #ch_wh,rec_wh;wh.;
			endif
			let webstr$=rtrim$(altwh using "##"),fdel$
			let webstr$=webstr$,rtrim$(wh.desig$),fdel$
			let webstr$=webstr$,ltrim$(WHSE_W31[altwh]  Using "-----------#"),fdel$ ! on po
			let webstr$=webstr$,ltrim$(TRREQ[ALTWH]  Using "-----------#"),fdel$ ! on transfer req
			let webstr$=webstr$,ltrim$(ONTRAN[ALTWH]  Using "-----------#"),fdel$ ! on transfer
			let webstr$=webstr$,ltrim$(WHSE_W30[ALTWH]  Using "-----------#"),fdel$ ! on hand
			let webstr$=webstr$,ltrim$(WHSE_W32[ALTWH]  Using "-----------#"),fdel$ ! on committed
			let webstr$=webstr$,ltrim$((WHSE_W30[ALTWH]-WHSE_W32[ALTWH])  Using "-----------#"),fdel$ ! on available
			let webstr$=webstr$,ltrim$(ONBO[ALTWH]  Using "-----------#"),fdel$ ! on backorder
			list$[row]=webstr$
			row=row+1
		  Endif ! of not main
		Endif ! of whse setup
	Next ALTWH
Return

prntallwusage: ! new style - main then all others
for ALTWH=1 TO 99
	IF UWHSE[ALTWH] ! ITs SETUP
	  IF ALTWH<>MAIN ! ALREADY DID MAIN
		let webstr$=rtrim$(altwh using "##"),fdel$
		let wh.desig$=""
		if altwh>0 and altwh<100
			let rec_wh=altwh-1
			read record #ch_wh,rec_wh;wh.;
		endif
		let webstr$=webstr$,rtrim$(wh.desig$),fdel$
		for ctr=1 to 12
			let webstr$=webstr$,ltrim$(usagew[altwh,ctr] using "--------#"),fdel$
		next ctr
		list$[row]=webstr$
		row=row+1
	  Endif ! of not main
	Endif ! of its setup
Next AltWh
Return

L_5900: Rem FIND PRODUCT & all whses
K2$ = " ",K2$
K2$[1,12] = PROD$[1,12]
Search #ch_prod,2,1;K2$,R2,E
If E
	let errflag=99\return  
End If 
Mat Read #ch_prod,R2,0;PF_A$;
Mat Read #ch_prod,R2,156;PF_B;
Mat Read #ch_prod,R2,256;A;
Mat Read #ch_prod,R2,460;PF_A1;
Mat Read #ch_prod,R2,512;PFU1;
Mat Read #ch_prod,R2,554;PFU2;
MAT  READ #ch_prod,R2,678;U3;
Mat Read #ch_prod,R2,974;PFCO;
Mat Read #ch_prod,R2,596;PRPARC;
Mat Read #ch_prsls,R2,16;S1;
Mat Read #ch_prsls,R2,256;S2;
QTR1 = 0;QTR2 = 0;QTR3 = 0;QTR4 = 0
For X = 0 To 2
  TOTAL_W3[X] = 0
Next X

UNT = PFU1[0] \ Gosub L_8100 \ BASE$ = UNT$[1,4]
DSP_UNIT = PFU1[10] \ UNT = DSP_UNIT \ Gosub L_8100
Gosub L_8150 ! set qtrs
K3$ = " ",K3$
K3$[1,12] = PROD$[1,12];K3$[13,14] = MAIN Using "##"
Search #ch_prwh,2,1;K3$,R3,E
If E
  For X = 0 To 24 \ MAIN_W3[X] = 0 \ Next X
  goto l_6385: ! next whse
End If 
Mat Read #ch_prwh,R3,0;MAIN_W1$
Mat Read #ch_prwh,R3,32;MAIN_W1
Mat Read #ch_prwh,R3,38;MAIN_W2
Mat Read #ch_prwh,R3,78;MAIN_W3
Mat Read #ch_prwh,R3,228;MAIN_WH5
Mat Read #ch_prwh,R3,428;MAIN_WH7
Mat Read #ch_prwh,R3,540;MAIN_WH9
Mat Read #ch_prwh,R3,696;MAIN_W7;
Mat Read #ch_prwh,R3,800;WHMISC;
If MAIN_W1[2] > 0 Mat Read #ch_buyer,MAIN_W1[2];BUYER$; Else Let BUYER$ = "NONE"
COST = 0
If P9$[32,32] = "Y" And (MAIN_W3[16] > 0 Or MAIN_W3[15] > 0)
  If MAIN_W3[16] Let COST = MAIN_W3[16] Else Let COST = MAIN_W3[15]
Else 
  If PF_B[10] Let COST = PF_B[10] Else Let COST = PF_B[21]
End If 
Gosub L_8000 ! vendor
Gosub L_4000 ! reord qty
CNVTA[0] = 1;CNVTU[0] = DSP_UNIT;CNVTU[1] = 0;CNVTU[2] = 1 \ Gosub L_20000
FACTOR = AMOUNT
If PF_A1[3] = 0 Let PF_A1[3] = 1
If A[5] = 0 Let A[5] = 1
UNT_WT = (A[6] * FACTOR) / A[5];UNT_CB = (PF_B[23] * FACTOR) / PF_A1[3]
For X = 0 To 2
  CNVTA[0] = MAIN_W3[X];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
  MAIN_W3[X] = AMOUNT
  TOTAL_W3[X] = TOTAL_W3[X] + MAIN_W3[X]
Next X
For X = 19 To 24
  If P9$[32,32] = "Y" And MAIN_W3[X] Let CNVTA[0] = MAIN_W3[X] Else Let CNVTA[0] = A[X + 1]
  CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 2 \ Gosub L_20000
  LIST[X - 18] = AMOUNT
Next X
If P9$[32,32] = "Y" And MAIN_W3[16] Let CNVTA[0] = MAIN_W3[16] Else Let CNVTA[0] = PF_B[10]
CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 2 \ Gosub L_20000
PO_COST = AMOUNT
If P9$[32,32] = "Y" And WHMISC[2] Let CNVTA[0] = WHMISC[2] Else Let CNVTA[0] = PRPARC[2]
CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 2 \ Gosub L_20000
NET_PO_COST = AMOUNT
CNVTA[0] = A[9];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
A[9] = AMOUNT
CNVTA[0] = A[10];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
A[10] = AMOUNT
If MAIN_W1$[13,15] = "   " Or MAIN_W1$[13,13] = "" Let MAIN_W1$[13,32] = PF_A$[93,112]
VEN_ITEM$ = MAIN_W1$[13,32]
MTH1 = ARMTH + 1
For CT = 1 To 12
  MTH1 = MTH1 - 1 \ If MTH1 < 1 Let MTH1 = 12
  If MAIN_WH9[MTH1]
    CNVTA[0] = MAIN_WH9[MTH1]
  Else 
    CNVTA[0] = MAIN_WH5[MTH1]
  End If 
  CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
  USAGE0[CT] = AMOUNT
Next CT
L_6385: Rem FIND WAREHOUSE RECORD
if not(oldstyle) ! not just 4 anymore
	! get data - all whses set up IN whinfo
	for ALTWH=1 TO 99
		IF UWHSE[ALTWH] ! NOT SETUP
		  IF ALTWH<>MAIN ! ALREADY DID MAIN
			K3$ = " ",K3$
			K3$[1,12] = PROD$[1,12];K3$[13,14] = ALTWH Using "##"
			Search #ch_prwh,2,1;K3$,R3,E
			If E
			  For X = 0 To 24 \ ALT1_W3[X] = 0 \ Next X
			  Goto WHNSUP ! next whse
			End If 
			Mat Read #ch_prwh,R3,0;ALT1_W1$
			Mat Read #ch_prwh,R3,32;ALT1_W1
			Mat Read #ch_prwh,R3,38;ALT1_W2
			Mat Read #ch_prwh,R3,78;ALT1_W3
			Mat Read #ch_prwh,R3,228;ALT1_WH5
			Mat Read #ch_prwh,R3,428;ALT1_WH7
			Mat Read #ch_prwh,R3,540;ALT1_WH9
			Mat Read #ch_prwh,R3,696;ALT1_W7;
			For X = 0 To 2
			  CNVTA[0] = ALT1_W3[X];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
			  if x=0 let WHSE_W30[altwh] = AMOUNT
			  IF X=1 LET WHSE_W31[ALTWH] = AMOUNT
			  IF X=2 LET WHSE_W32[ALTWH] = AMOUNT
			  TOTAL_W3[X] = TOTAL_W3[X] + AMOUNT
			Next X
			MTH1 = ARMTH + 1;CT = 0
			awusg: MTH1 = MTH1 - 1;CT = CT + 1 \ If MTH1 < 1 Let MTH1 = 12
			If ALT1_WH9[MTH1] Let CNVTA[0] = ALT1_WH9[MTH1] Else Let CNVTA[0] = ALT1_WH5[MTH1]
			CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
			USAGEW[ALTWH,CT] = AMOUNT
			If CT <> 12 Goto AWUSG
			WHNSUP: ! no pw record
		  Endif ! of setup whse
		Endif ! of whse is valid
	Next AltWh
	goto L_6820 ! DONE
endif
K3$ = " ",K3$
K3$[1,12] = PROD$[1,12];K3$[13,14] = ALT_WH1 Using "##"
Search #ch_prwh,2,1;K3$,R3,E
If E
  For X = 0 To 24 \ ALT1_W3[X] = 0 \ Next X
  Goto L_6530 ! next whse
End If 
Mat Read #ch_prwh,R3,0;ALT1_W1$
Mat Read #ch_prwh,R3,32;ALT1_W1
Mat Read #ch_prwh,R3,38;ALT1_W2
Mat Read #ch_prwh,R3,78;ALT1_W3
Mat Read #ch_prwh,R3,228;ALT1_WH5
Mat Read #ch_prwh,R3,428;ALT1_WH7
Mat Read #ch_prwh,R3,540;ALT1_WH9
Mat Read #ch_prwh,R3,696;ALT1_W7;
For X = 0 To 2
  CNVTA[0] = ALT1_W3[X];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
  ALT1_W3[X] = AMOUNT
  TOTAL_W3[X] = TOTAL_W3[X] + ALT1_W3[X]
Next X
MTH1 = ARMTH + 1;CT = 0
L_6505: MTH1 = MTH1 - 1;CT = CT + 1 \ If MTH1 < 1 Let MTH1 = 12
If ALT1_WH9[MTH1] Let CNVTA[0] = ALT1_WH9[MTH1] Else Let CNVTA[0] = ALT1_WH5[MTH1]
CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
USAGE1[CT] = AMOUNT
If CT <> 12 Goto L_6505

L_6530: Rem FIND WAREHOUSE RECORD
K3$ = " ",K3$
K3$[1,12] = PROD$[1,12];K3$[13,14] = ALT_WH2 Using "##"
Search #ch_prwh,2,1;K3$,R3,E
If E
  For X = 0 To 24 \ ALT2_W3[X] = 0 \ Next X
  Goto L_6675 ! next whse
End If 
Mat Read #ch_prwh,R3,0;ALT2_W1$
Mat Read #ch_prwh,R3,32;ALT2_W1
Mat Read #ch_prwh,R3,38;ALT2_W2
Mat Read #ch_prwh,R3,78;ALT2_W3
Mat Read #ch_prwh,R3,228;ALT2_WH5
Mat Read #ch_prwh,R3,428;ALT2_WH7
Mat Read #ch_prwh,R3,540;ALT2_WH9
Mat Read #ch_prwh,R3,696;ALT2_W7;
For X = 0 To 2
  CNVTA[0] = ALT2_W3[X];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
  ALT2_W3[X] = AMOUNT
  TOTAL_W3[X] = TOTAL_W3[X] + ALT2_W3[X]
Next X
MTH1 = ARMTH + 1;CT = 0
L_6650: MTH1 = MTH1 - 1;CT = CT + 1 \ If MTH1 < 1 Let MTH1 = 12
If ALT2_WH9[MTH1] Let CNVTA[0] = ALT2_WH9[MTH1] Else Let CNVTA[0] = ALT2_WH5[MTH1]
CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
USAGE2[CT] = AMOUNT
If CT <> 12 Goto L_6650
L_6675: Rem FIND WAREHOUSE RECORD
K3$ = " ",K3$
K3$[1,12] = PROD$[1,12];K3$[13,14] = ALT_WH3 Using "##"
Search #ch_prwh,2,1;K3$,R3,E
If E
  For X = 0 To 24 \ ALT3_W3[X] = 0 \ Next X
  Goto L_6820 ! bypass - get next
End If 
Mat Read #ch_prwh,R3,0;ALT3_W1$
Mat Read #ch_prwh,R3,32;ALT3_W1
Mat Read #ch_prwh,R3,38;ALT3_W2
Mat Read #ch_prwh,R3,78;ALT3_W3
Mat Read #ch_prwh,R3,228;ALT3_WH5
Mat Read #ch_prwh,R3,428;ALT3_WH7
Mat Read #ch_prwh,R3,540;ALT3_WH9
Mat Read #ch_prwh,R3,696;ALT3_W7;
For X = 0 To 2
  CNVTA[0] = ALT3_W3[X];CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
  ALT3_W3[X] = AMOUNT
  TOTAL_W3[X] = TOTAL_W3[X] + ALT3_W3[X]
Next X
MTH1 = ARMTH + 1;CT = 0
L_6795: MTH1 = MTH1 - 1;CT = CT + 1 \ If MTH1 < 1 Let MTH1 = 12
If ALT3_WH9[MTH1] Let CNVTA[0] = ALT3_WH9[MTH1] Else Let CNVTA[0] = ALT3_WH5[MTH1]
CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
USAGE3[CT] = AMOUNT
If CT <> 12 Goto L_6795
L_6820: Return 
L_6825: Rem CONVERSIONS
ONBO[0] = 0;ONTRAN[0] = 0;TRREQ[0]=0
WHS = MAIN \ Gosub L_4580 ! on bo - tran
CNVTA[0] = QBO;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONBO[WHS] = AMOUNT;ONBO[0] = ONBO[0] + ONBO[WHS]
CNVTA[0] = ONTR;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONTRAN[WHS] = AMOUNT;ONTRAN[0] = ONTRAN[0] + ONTRAN[WHS]
CNVTA[0] = req_qty;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
TRREQ[WHS] = AMOUNT;TRREQ[0] = TRREQ[0] + TRREQ[WHS]
if not(oldstyle) ! new - all whses
	! do get/convert
	! get data - all whses set up IN whinfo
	for ALTWH=1 TO 99
		IF UWHSE[ALTWH] ! NOT SETUP
		  IF ALTWH<>MAIN ! ALREADY DID MAIN
			whs=altwh \ gosub L_4580 ! on bo & transf
			CNVTA[0] = QBO;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
			ONBO[WHS] = AMOUNT;ONBO[0] = ONBO[0] + ONBO[WHS]
			CNVTA[0] = ONTR;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
			ONTRAN[WHS] = AMOUNT;ONTRAN[0] = ONTRAN[0] + ONTRAN[WHS]
			CNVTA[0] = req_qty;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
			TRREQ[WHS] = AMOUNT;TRREQ[0] = TRREQ[0] + TRREQ[WHS]
		  Endif ! not main
		Endif ! whse setup
	Next AltWH
	Return ! DONE
Endif
WHS = ALT_WH1 \ Gosub L_4580 ! on bo - trans
CNVTA[0] = QBO;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONBO[WHS] = AMOUNT;ONBO[0] = ONBO[0] + ONBO[WHS]
CNVTA[0] = ONTR;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONTRAN[WHS] = AMOUNT;ONTRAN[0] = ONTRAN[0] + ONTRAN[WHS]
CNVTA[0] = req_qty;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
TRREQ[WHS] = AMOUNT;TRREQ[0] = TRREQ[0] + TRREQ[WHS]
WHS = ALT_WH2 \ Gosub L_4580 ! on bo - trans
CNVTA[0] = QBO;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONBO[WHS] = AMOUNT;ONBO[0] = ONBO[0] + ONBO[WHS]
CNVTA[0] = ONTR;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONTRAN[WHS] = AMOUNT;ONTRAN[0] = ONTRAN[0] + ONTRAN[WHS]
CNVTA[0] = req_qty;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
TRREQ[WHS] = AMOUNT;TRREQ[0] = TRREQ[0] + TRREQ[WHS]
WHS = ALT_WH3 \ Gosub L_4580 ! on bo - trans
CNVTA[0] = QBO;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONBO[WHS] = AMOUNT;ONBO[0] = ONBO[0] + ONBO[WHS]
CNVTA[0] = ONTR;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
ONTRAN[WHS] = AMOUNT;ONTRAN[0] = ONTRAN[0] + ONTRAN[WHS]
CNVTA[0] = req_qty;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
TRREQ[WHS] = AMOUNT;TRREQ[0] = TRREQ[0] + TRREQ[WHS]
Return 


L_8000: Rem READ VENDOR FILE
K6$ = " ",K6$ \ If MAIN_W2[3] Let K6$[1,6] = MAIN_W2[3] Using "######"
If Not(MAIN_W2[3]) Let K6$[1,6] = PF_B[24] Using "######"
If Not(MAIN_W2[3]) Let MAIN_W2[3] = PF_B[24]
Search #ch_vend,2,1;K6$,R6,E
If E <>0
	Let VEN$ = "Vendor Not on File " 
else
	Mat Read #ch_vend,R6,0;VEN$;
	Mat Read #ch_vend,R6,400;VEND_C2$;
	Mat Read #ch_vend,R6,576;A5$;
endif
Return 

L_8100: Rem READ CCODES
If UNT = -1 Let UNT$ = "CWT "
If UNT = -2 Let UNT$ = "LOT "
If UNT = -3 Let UNT$ = "LB  "
If UNT > 0 Mat Read #ch_ccode,UNT,10;UNT$;
Return 

L_8150: Rem QUARTERS ?? - 
Read #ctlc,51,74;BOYMTH;
SMTH = BOYMTH;EMTH = BOYMTH + 2
If SMTH > 12 Let SMTH = SMTH - 12
If EMTH > 12 Let EMTH = EMTH - 12
For X = SMTH To EMTH
  QTR1 = QTR1 + S1[X,0]
Next X
SMTH = BOYMTH + 3;EMTH = BOYMTH + 5
If SMTH > 12 Let SMTH = SMTH - 12
If EMTH > 12 Let EMTH = EMTH - 12
For X = SMTH To EMTH
  QTR2 = QTR2 + S1[X,0]
Next X
SMTH = BOYMTH + 6;EMTH = BOYMTH + 8
If SMTH > 12 Let SMTH = SMTH - 12
If EMTH > 12 Let EMTH = EMTH - 12
For X = SMTH To EMTH
  QTR3 = QTR3 + S1[X,0]
Next X
SMTH = BOYMTH + 9;EMTH = BOYMTH + 11
If SMTH > 12 Let SMTH = SMTH - 12
If EMTH > 12 Let EMTH = EMTH - 12
For X = SMTH To EMTH
  QTR4 = QTR4 + S1[X,0]
Next X
CNVTA[0] = QTR1;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
QTR1 = AMOUNT
CNVTA[0] = QTR2;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
QTR2 = AMOUNT
CNVTA[0] = QTR3;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
QTR3 = AMOUNT
CNVTA[0] = QTR4;CNVTU[0] = 0;CNVTU[1] = DSP_UNIT;CNVTU[2] = 1 \ Gosub L_20000
QTR4 = AMOUNT
Return 

L_8500: Rem CHECK FOR VENDOR/PROD
dealsof=0
K12$ = " ",K12$
K12$[1,6] = VENDOR Using "######"
K12$[7,18] = PROD$[1,12]
Search #ch_deal,3,1;K12$,R12,E
If E Return 
X12 = K12$[1,6] \ If X12 <> VENDOR Return 
If K12$[7,6 + Len(PROD$)] <> PROD$[1,12] Return 
dealsof=1
Return 



L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
L_20050: Rem "====== unibasic 5+ logic
let amount=0\if not(cnvta) goto L_20160:
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG 
AMOUNT = CNVTA
L_20160: Return

Outend: ! End the subroutine 
if not (chan[0]) and ctlc<>1 close #ctlc! cntrl file #1
if not (chan[1]) close #ch_poh ! purchase order header  #8
if not (chan[2]) close #ch_pol! po lines #14
if not (chan[3]) close #ch_roh ! order header #18
if not (chan[4]) close #ch_prod! product file #2 * 
if not (chan[5]) close #ch_prwh! product warehouse #3 * 
if not (chan[7]) close #ch_ccode! unit of measure file #5* 
if not (chan[8]) close #ch_rol ! order lines #
If not (chan[12]) close #ch_deal! deals #12
If not (chan[16]) close #ch_prsls ! product sales #4
if not (chan[17]) close #ch_vend ! vendor #6
if not (chan[18]) close #ch_prlot! sprodlot #10
if not (chan[19]) close #ch_wh  ! WHinfo #13
if not (chan[20]) close #ch_vtag! Vendor Tag File
if not (chan[21]) close #ch_ordlot! sordlot
if not (chan[22]) close #ch_buyer ! buyer
Else
	 include "src/callsuberr.inc"
end try
end sub 

