! -- dxblockcallsgui.lib
! library of page block routines called by custom applications
!
! 1.0 03/31/2008 new
! gui version for dl4term gui
!
! loadsave -w -n 100,10 -o dxblockcallsgui.lib src/dxblockcallsgui.src
!
!all rights reserved. (c)copyright 2008 by: dynamicconcepts
!
declare intrinsic function findchannel,replace$
declare intrinsic sub dxget,dxset,dxsave,env,setglobals,getglobals
!
!
external lib "dxblockgeneral.lib" !general routines
declare external sub blocksuberr,blockmainerr,blockreadsystemfile,blockopenfiles,addtostr
declare external function blockgetprogrampath$,blockcrc$,blockgetmsg$
!
external lib "dxblockcustom.lib"
declare external sub blockprintersdroplist,blockstatesdroplist
!
External Lib "dxblockguigeneral.lib"
  Declare External Sub BlockScreenInit,guidroplist
  Declare External Sub PrintInputs,DatePrompt
  Declare External Sub PrintOptions,SearchOptions
  Declare External Function GetRadio,GetDate,GetCheckBox$,blockguipopup$
!
external lib "gui1.lib"
declare external sub guiquery,guibuttons
Declare External Function guiquery$
!
External Lib "gui2.lib"
Declare External Sub GUIInputBox
!
!
external lib "libfilehandler.lib"
declare external sub filehandler
!
!
include "src/dffiles.bsh"
include "src/dxblockfiles.bsh"
!
External Sub setpropertiesgui(e$,chaninplst,blockid$,plen,fields$[],element,column,row,...)
!-----------------------------------------------------------------
 Try
  !put this in setproperties call for generated code to access for each field
  !call setpropertiesgui(e$,fields$[])
  !pass plen prompts column length
  !can optionally pass rstr$, ~ seperated drop list with 'HT' separate value,description     
   Try Enter rstr$ Else Dim rstr$[1000]   
   dim blockinplst. as blockinplst
   dim tmp$[1000],tmpblockid$[8]
   dim type$[20],type2$[20],holdfield$[120],holdlabel$[120]
   dim array$[100,100]  !for U_ defaults to be read in, up to 100, 100char fields
   Print PChr$(element+1000,column,row,column+plen-1,row+10,fields$[2]);'WCLABEL';
   if fields$[9]=" " let fields$[9]="" !no space default
   sub setpropertiessub()
	!
	if fields$[7]="DATE" !date input
	 call dateprompt(element,fields$[9],"-1",column+plen,row)
	end if
	!
	if fields$[7]="TEXT" or fields$[7]="PASSWORD" or fields$[7]="PHONE" !textbox
      fieldlen=val(fields$[21]) \if fieldlen<1 let fieldlen=20
      maxlen=val(fields$[21]) \if maxlen=0 let maxlen=40
	  tmp$="string"
	  if fields$[7]="PASSWORD" let tmp$="password"
     Call GUIInputBox(-1,element,options,tmp$,"",column+plen,row,fieldlen,maxlen,fields$[9])
	 if fields$[19]<>""
	  !call addtostr(e$,rstr$,"LookupLink"+fdel$+fields$[19]+fdel$+rdel$)
	 end if
	  !call addtostr(e$,rstr$,"MinLength"+fdel$+fields$[20]+fdel$+rdel$) !deal at edit
    end if !TEXT

	if fields$[7]="NUMBER" !number textbox
	  fieldlen=len(fields$[22]) !len of mask
	  maxlen=fieldlen
      Call GUIInputBox(-1,element,options,"number","",column+plen,row,fieldlen,maxlen,fields$[9])

	  !call addtostr(e$,rstr$,"MinValue"+fdel$+fields$[20]+fdel$+rdel$) !deal at edit
	  !call addtostr(e$,rstr$,"MaxValue"+fdel$+fields$[21]+fdel$+rdel$) !deal at edit
	  !call addtostr(e$,rstr$,"Mask"+fdel$+fields$[22]+fdel$+rdel$) !deal at edit
	end if
	!
	if fields$[7]="CHECK"
     Print PChr$(element,column+plen,row,column + plen+10,row + 10,"",options);'WCCHECK';
	 if fields$[9]="checked"
	  Print pchr$(element);'WCSELECT';"1";'0WCSELECT';
	 end if
	  !call addtostr(e$,rstr$,"Value"+fdel$+fields$[23]+fdel$+rdel$) !deal at edit
	end if
	!
  end sub !setpropertiessub
    !
	!
    type$=fields$[7]
	if len(type$)>=4 if type$[1,4]="LIST" let type$="LIST"
	if type$="STATE" let type$="LIST"
	if len(type$)>5 if type$[1,5]="RADIO" let type$="RADIO"
	type2$=type$
!	 if i=8 let tmp$="Required" !deal at edit
    options=0
	if fields$[16]="Y" let options=options+1 !disabled  IsReadOnly=Y
	if fields$[17]<>"Y" let options=options+2 !tabstop  Y=NoTab
	!
    !
	if type2$="LIST" or type2$="RADIO"
	 if fields$[7]="LISTA"
	  let rstr$="1",'HT',"Active~2",'HT',"Inactive~3",'HT',"All~"
	 end if
	 if fields$[7]="STATE"
	  rstr$="GUI" \call blockstatesdroplist(rstr$)
	 end if
     If rstr$ = "" !!create drop list (rstr$),  (or can pass in rstr$ from a program)
	  if type2$=fields$[7] !std list or radio, read inplst file c[3]
	   if fields$[29]="U" or fields$[29]="UC" !if userdef1 is U  means read U_ variable of same field name to get defaults (set by a previous blockid)
	    !U_ defaults for drop lists not done yet, basically replicate code for other control types (checkboxes)
	   else if fields$[28]<>"" and fields$[28]<>" "!create droplist from file
	    call filehandler(e$,fields$[28],rstr$)
	   else
	    rstr$=""
	    seq=-2
	    tmpblockid$=blockid$
	    blockseq=fields$[1]
	    if fields$[27]<>"0" !get drop list from common prompts
	     tmpblockid$="        "
		 blockseq=fields$[27]
	    end if
        Try Search >= #chaninplst,1;tmpblockid$,blockseq Else Rem
        Do
         Try Read Record #chaninplst,seq;blockinplst. Else Exit Do
         if blockinplst.id$<>rtrim$(tmpblockid$) or blockinplst.seq<>blockseq exit do
		 rstr$=rstr$,blockinplst.value$,'HT',blockinplst.label$,"~"
         seq=-1 !get next
        Loop
	   end if !U/UC
	  end if !type2
	 end if !rstr$
	 if type2$="LIST"
	   default=-1
	   if fields$[9]<>"" !find default item
        itext = 1
		ditem=0
        Do
         tmp$ = rstr$[itext] To "~"
		 if tmp$="" exit do
		 xpos=pos(tmp$,= 'HT')
		 if xpos=0 if tmp$=fields$[9] let default=ditem \ exit do
		 if xpos if xpos>1 if tmp$[1,xpos-1]=fields$[9] let default=ditem \ exit do
		 if xpos if xpos<len(tmp$) if tmp$[xpos+1]=fields$[9] let default=ditem \ exit do
		 itext = itext + Len(tmp$) + 1
		 if itext>len(rstr$) exit do
		 ditem=ditem+1
	    Loop	   
	   end if
	   call guidroplist(element,default,rstr$,column,row,plen," ")
	 else if type2$="RADIO"
	 !???call searchoptions(element,defaultelement,text$,...)
	 end if
	else !not list or radio
	  call setpropertiessub()
	  if fields$[29]="U" or fields$[29]="UC" !if userdef1 is U  means read U_ variable of same field name to get defaults (set by a previous blockid)
	   !if its an array of data, send as an array of data, front end to generate multiples of the control for each default, and sequentially number them (ie multiple checkboxes)
       !UC indicates option to clear the U_field after getting it
	   call dxget("U_"+fields$[4],array$[])
	   if fields$[29]="UC" call dxset("U_"+fields$[4],"")
	   holdfield$=fields$[4]
	   holdlabel$=fields$[2]
	   for cnt=0 to ubound(array$[],1)
	    if cnt>0  !have to create a separate control for each one in the array!
	     if array$[cnt]="" exit for
		 element=element+1\row=row+12
		 fields$[4]=holdfield$,str$(cnt)    !first one, field name is as specified, rest are seq numbered, 1 thru x
         if type2$="CHECK" let fields$[2]=holdlabel$," ",array$[cnt] \let fields$[23]=array$[cnt] !CHECKBOX, U_ controls # of checkboxes,concats the label and determines value sent
		 call setpropertiessub()
	    end if !cnt>0
       next cnt
	  end if !fields$[29] U/UC
	end if !LIST, RADIO
	!
	!
	if fields$[18]="Y" print pchr$(element);'WCFOCUS'; !set focus
	!
	!
	if fields$[10]<>"" print @column+plen+500,row;fields$[10]; !help text
	!
	!
	element=element+1\row=row+12
	!end setproperties
 Else
  if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000 
 End Try
end sub !setproperties
!
!
external sub setblock(e$,blockid$,action$,programname$,...)
!--------------------------------------------------------------------
! reads page definition for passed blockid and sets xport values for template
! acton passsed to help determine block type, table,edit or prompt
! if optional rstr$ sent, no dxset's, populate rstr$ instead
!
!
Dim BlockHdr. As BlockHdr, blockcol. as blockcol, blockinp. as blockinp
dim blockinplst. as blockinplst
dim oldblockinp. as blockinp
!
sub hdrlist(e$,blockid$,rstr$)
!--------------------------------------------------------------------
! header routine
! dxset's block header parameters
! called by setblock!
 try
 !
  keys$=blockid$
  Try
   Search = #c[0],1;keys$ 
  Else 
   e$="Blockid ",blockid$," not in hdr"
   error 10000 
  End Try
  Read Record #c[0],-2;blockhdr.;
  !
  call dxset(10,"blockid",blockid$) !in tmp table for other programs to retrieve
  !
  if rtrim$(blockhdr.filename$)<>""
   type$=action$ !for SAVE and DELETE
   if action$="INPUT" or action$="SEARCH" let type$="TABLE" !else type$="EDIT"
   action$=type$
   programname$="block",replace$(blockhdr.filename$,".",""),".dl4"
    if rtrim$(blockhdr.programname$)<>"" let programname$=rtrim$(blockhdr.programname$) !override
	if programname$[len(programname$)-3]<>".dl4" let programname$=programname$,".dl4"

   if action$="VERIFY" let programname="lib",blockhdr.filename$,".lib"
  else
    type$="PROMPT" !printprompts
  end if
  !
  !initialize gui screen !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  type=3
  if type$="PROMPT" let type=4 !print prompts
  if focus$="" call blockscreeninit(status,type,blockid$+" "+blockhdr.title$,blockhdr.subtitle$)
   !tmp$=blockid$,fdel$,type$,fdel$,blockhdr.title$,fdel$,blockhdr.subtitle$,fdel$,rdel$ 
   
  !
else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !hdrlist
!
sub collist(e$,blockid$,rstr$)  !not used, in each file's code generated program
!--------------------------------------------------------------------
! columns routine
! dxset's block column parameters
! called by setblock!
 try
 !
  fieldcnt=11
  maxrowcnt=50
  free fields$
  dim fields$[maxrowcnt,fieldcnt,120] !#cols,#rows,maxfieldlength
  keys$=blockid$
  seq=-2
  Try Search >= #c[1],1;keys$ Else Rem
  Do
   Try Read Record #c[1],seq;blockcol.; Else Exit Do
   if blockcol.id$<>blockid$ exit do
   if cnt>maxrowcnt exit do
   !
   !if inpseq defined, use it as defaults/override
   if blockcol.inpseq
    Try
     Search = #c[2],1;blockid$,blockcol.inpseq
     Read Record #c[2],-2;blockinp.
	 !override the column definitions with the input definitions
	 blockcol.label$=blockinp.label$
	 blockcol.active$=blockinp.active$
	 blockcol.varname$=blockinp.varname$
	 blockcol.mask$=blockinp.mask$
    Else
     !shouldn't happen,but ignore if it does
    End Try
   end if
   !
   fields$[cnt,0]=blockcol.id$
   fields$[cnt,1]=str$(blockcol.seq)
   fields$[cnt,2]=blockcol.label$
   fields$[cnt,3]=blockcol.active$
   fields$[cnt,4]=blockcol.link$
   fields$[cnt,5]=blockcol.style$
   fields$[cnt,6]=blockcol.width$
   fields$[cnt,7]=str$(blockcol.dbposition)
   fields$[cnt,8]=str$(blockcol.dbprecision)
   fields$[cnt,9]=blockcol.dbtype$
   fields$[cnt,10]=blockcol.varname$
   if len(blockcol.varname$)>1 if blockcol.varname$[len(blockcol.varname$)]="$" let fields$[cnt,10]=blockcol.varname$[1,len(blockcol.varname$)-1],"qqq" !.net patch 3/20/08
   if blockcol.mask$="" let blockcol.mask$="#"
   fields$[cnt,11]=blockcol.mask$
   !
   cnt=cnt+1
   seq=-1 !get next
 Loop
 !
 if cnt>0 let cnt=cnt-1
 call dxset("colcnt",str$(cnt)) !# of columns in table
 !
 if rstr$=""
  For i=0 to cnt
   call dxset("coldef"+str$(i),fields$[i][])  !for template
  Next i
 else
  tmp$="<header>HEADING",fdel$,"LINK",fdel$,"ALIGN",fdel$,rdel$
  tmp$=tmp$,"ID",fdel$,fdel$,fdel$,rdel$ !always pass key/record # as first column
  call addtostr(e$,rstr$,tmp$)
  for control=0 to cnt !# of columns
   if fields$[control,3]="Y" !active
    tmp$=fields$[control,2],fdel$,fields$[control,4],fdel$
	if len(fields$[control,10])>3 if fields$[control,10,len(fields$[control,10])-2] = "qqq" let tmp$=tmp$,"LEFT" else let tmp$=tmp$,"RIGHT"
	tmp$=tmp$,fdel$,rdel$
    call addtostr(e$,rstr$,tmp$)  !for .net
   end if !active
  next control
 end if
 !
 for i=0 to cnt
  call dxset(10,"coldefvarname"+str$(i),fields$[i][10]) !tmp table
  call dxset(10,"coldefmask"+str$(i),fields$[i][11])
 next i
 !
 call addtostr(e$,rstr$,"</header>")
 !
 !
 else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !collist
!
sub inplist(e$,blockid$,rstr$)
!--------------------------------------------------------------------
! inputs routine
! dxset's block inputs (printer prompt page) parameters
! called by setblock!
 try
 !
  cnt=0
  fieldcnt=34
  rowcnt=50
  plen=170 !default
  free fields$
  dim fields$[rowcnt,fieldcnt,120],fields2$[fieldcnt,120] !#cols,#rows,maxfieldlength
  dim i$[500],mask$[60]
  keys$=blockid$
  seq=-2
  Try Search >= #c[2],1;keys$ Else Rem
  Do
 Try Read Record #c[2],seq;blockinp.; Else Exit Do
   if blockinp.id$<>blockid$ exit do
   if cnt>rowcnt exit do
   !
   fields$[cnt,0]=blockinp.id$
   fields$[cnt,1]=str$(blockinp.seq)
   fields$[cnt,27]=str$(blockinp.masterseq) !common seq to copy
   !if masterseq, read in common prompt fields for the rest
   if blockinp.masterseq
    oldblockinp. = blockinp.
    tmp$="        " !master blockid
	Try Search = #c[5],1;tmp$,blockinp.masterseq Else Rem
	Try Read Record #c[5],-2;blockinp. Else Rem
	!label,variable,shorthelp,default can be overridden at block inp level
	if oldblockinp.label$<>"" let blockinp.label$=oldblockinp.label$
	if oldblockinp.varname$<>"" let blockinp.varname$=oldblockinp.varname$
	if oldblockinp.helppage$<>"" let blockinp.helppage$=oldblockinp.helppage$
	if oldblockinp.default$<>"" let blockinp.default$=oldblockinp.default$
   end if
   if blockinp.type$="LISTA" if blockinp.label$="" let blockinp.label$="Select"
   fields$[cnt,2]=blockinp.label$
   if len(blockinp.label$)>plen/8 let plen=len(blockinp.label$)*8 !max prompt len to allow for
   fields$[cnt,3]=blockinp.active$
   fields$[cnt,4]=blockinp.varname$
   if len(blockinp.varname$)>1 if blockinp.varname$[len(blockinp.varname$)]="$" let fields$[cnt,4]=blockinp.varname$[1,len(blockinp.varname$)-1],"qqq" !.net patch 3/7/08
   fields$[cnt,5]=str$(blockinp.row)
   fields$[cnt,6]=str$(blockinp.column)
   fields$[cnt,7]=blockinp.type$
   fields$[cnt,8]=blockinp.required$
   fields$[cnt,9]=blockinp.default$
   fields$[cnt,10]=blockinp.helppage$
   fields$[cnt,11]=blockinp.onfocus$
   fields$[cnt,12]=blockinp.onchange$
   fields$[cnt,13]=str$(blockinp.dbposition)
   fields$[cnt,14]=str$(blockinp.dbprecision)
   fields$[cnt,15]=blockinp.dbtype$
   fields$[cnt,16]=blockinp.disabled$
   fields$[cnt,17]=blockinp.notab$
   fields$[cnt,18]=blockinp.focus$
   fields$[cnt,19]=blockinp.lookuplink$
   !text type or numeric type
   fields$[cnt,20]=str$(blockinp.minlength)
   fields$[cnt,21]=str$(blockinp.maxlength)
   !numeric type
   !if blockinp.mask$="" let blockinp.mask$="#" moved to blockartermcode.src
   fields$[cnt,22]=blockinp.mask$
   !check type
   fields$[cnt,23]=blockinp.checkvalue$
   !list type
   fields$[cnt,24]=str$(blockinp.maxselected)
   !list or text type
   fields$[cnt,25]=str$(blockinp.maxlisted) !beyond this,switches to text
   !
   fields$[cnt,26]=blockinp.helppage$ !short help text
   fields$[cnt,28]=blockinp.listfilename$ !filename to gen drop list from
   fields$[cnt,29]=blockinp.userdef1$
   fields$[cnt,30]=blockinp.userdef2$
   fields$[cnt,31]=blockinp.userdef3$
   fields$[cnt,32]=blockinp.userdef4$
   fields$[cnt,33]=blockinp.userdef5$  !
   !
   for i=0 to fieldcnt
    if fields$[cnt,i]="" let fields$[cnt,i]=" "
   next i
   !
  cnt=cnt+1
   seq=-1 !get next
 Loop
 if cnt>0 let cnt=cnt-1
 call dxset("inpcnt",str$(cnt)) !# of columns in table  read by blockartermcode
 !
 !not used UBS if rstr$="" 
  !For i=0 to fieldcnt
   !call dxset("inpdef"+str$(i),fields$[i][])  !for template
  !Next i
 if id$<>"" !means file maintenance, edit mode of existing record, so have to put all control parameters in a dx tmp table for blockartermcode to read to create xml of control with the record's defaults
  For i=0 to cnt
   call dxset(10,"inpdef"+str$(i),fields$[i][])  !for generated block programs
  Next i
 else !report prompts
  if focus$<>"" !coming back to screen to retry, set focus on field with the error, don't redisplay page
   For control = 0 To cnt !set lastelement value, held in 10 table
    Call dxget(10,"elementlast" + fields$[control,4],tmp$)
    fields$[control,34] = tmp$
   Next control
   !set focus on element
   ;pchr$(val(focus$));'WCFOCUS';
  else
  column=20\element=100\row=30 !initialize
  for control=0 to cnt !# of fields               
   if fields$[control,3]="Y" !active
    for i=0 to fieldcnt 
	 fields2$[i]=fields$[control,i] 
	next i !move from 3 dim array to 2
	type2$=fields2$[7]
	if len(type2$)>=4 if type2$[1,4]="LIST" let type2$="LIST"
	if len(type2$)>5 if type2$[1,5]="RADIO" let type2$="RADIO"
	!deal with multiple generated controls and/or U checkbox
	if type2$<>"PRINTER" if type2$<>"LIST" if type2$<>"RADIO"
	 if fields2$[29]="U" or fields2$[29]="UC"
	  call dxget("U_"+fields2$[4],array$[])
      if ubound(array$[],1) > 0 let fields2$[4]=fields2$[4],"0" !first one concat seq 0,  if more than 1 U set
	  if type2$="CHECK" let fields2$[2]=fields2$[2]," ",array$[0] \fields2$[23]=array$[0] !if CHECKbox, concat value to the label and set value to send if checked
     end if !U,UC
	end if !type2$ text
    call setpropertiesgui(e$,c[3],blockid$,plen,fields2$[],element,column,row)
	fields$[control,34]=element-1 !hold corresponding last element # (can be autogenerated element #'s prior
    Call dxset(10,"elementlast" + fields2$[4],fields$[control,34]) !hold in 10 table in case we come back with focus on error
   end if !active control
  next control
  !
  if len(type$)>=6 if type$[1,6]="PROMPT" if type$<>"PROMPT1"   !printer prompt unless, page block hdr custom1="1" then no printer prompt on this page
  !by default always send printer prompt control
     element=350 !std printer # element #
	 !printer list
	 xmloption=1\pdfoption=1 !yes
	 if len(type$)>6  !if X or P exclude them
	  if type$[7,7]="X" let xmloption=0
	  if type$[7,7]="P" let pdfoption=0
	  if len(type$)>7
	   if type$[8,8]="X" let xmloption=0
	   if type$[8,8]="P" let pdfoption=0
	  end if
	 end if !X or P
	 rstr$="GUI" \ call blockPrintersDropList(rstr$,xmloption,pdfoption) ! creates printer drop list
     !!!trail !!!Call blockprintersdroplist(rstr$)
	 call guidroplist(element,-1,rstr$,column,row,plen,"Select Printer")
	 element=element+1\row=row+12
   end if !printer prompt
   !by default, if u_promptdefaults = "Y" send Save Defaults checkbox control
   call dxget("u_promptdefaults",tmp$)
   if ucase$(tmp$)="Y" !element 351
    !WCCHECK
	Print PChr$(element+1000,column,row,column+plen-1,row+10,"Save Defaults");'WCLABEL';
    Print PChr$(element,column+plen,row,column + plen+10,row + 10,"",2);'WCCHECK';
	element=element+1\row=row+12
   end if !save defaults
   !buttons
   rstr$="&Process Data~E&xit~&Help"
   Call GuiButtons(Chan,3,26,rstr$,800,210,10,100,10)
   !Call GUIButtons(-1,nobuttons,Element,buttons$,WinWidth,VerPos,ButtonHt,width,gap)
  end if !prompt
 end if !retry/focus or initial display
   !
   !
 if type$="PROMPT"
   !for gui, now we can wait for inputs
   wait: Call PrintInputs(rstr$) ! returns printer # or E to exit
   If rstr$ = "E" Exit Sub
   nextelement=100
   for control=0 to cnt !# of fields               
   if fields$[control,3]="Y" !active
    lastelement=fields$[control,34] !normally save as nextelement, except if autogenerated prompts (trucks,zones,etc)
	for element=nextelement to lastelement
    if fields$[control,8]="Y" let emptyok=0 else let emptyok=1 !required field flag
    if fields$[control,7]="DATE"
	 e = GetDate(element,I$,emptyok) \ If e Goto wait !
	else if fields$[control,7]="CHECK"
	 i$ = getcheckbox$(element)
	 if i$="Y" if rtrim$(fields$[control,23])<>"" let i$=fields$[control,23]
	 if i$="N" let i$=""
	else
	 i$ = GUIQuery$(-1,element)
	 !edit checks, if fails goto wait
	 if emptyok=0 if i$="" 
	  i$ = blockguipopup$("E",fields$[control,2]+", this field is required!","","O")
      Print PChr$(element);'WCFOCUS';
	  goto wait
	 end if
	 if fields$[control,7]="NUMBER"
	  i=i$
	  minval= fields$[control,20]
	  if minval if i<minval
	   i$ = blockguipopup$("E",fields$[control,2]+", the minimum value for this field is "+str$(minval)+"!","","O")
       Print PChr$(element);'WCFOCUS';
	   goto wait
	  end if
	  maxval= fields$[control,21]
	  if maxval if i<maxval
	   i$ = blockguipopup$("E",fields$[control,2]+", the maximum value for this field is "+str$(maxval)+"!","","O")
       Print PChr$(element);'WCFOCUS';
	   goto wait
	  end if
	  if fields$[control,22]<>"" !mask
	   mask$=fields$[control,22]
	   if i<0 if mask$[1,1]<>"-"
	    i$ = blockguipopup$("E",fields$[control,2]+" can not be negative!","","O")
        Print PChr$(element);'WCFOCUS';
	    goto wait
	   end if
	   xpos=len(mask$)-pos(mask$,=".",-1) !allowed decimal places
	   ypos=len(i$)-pos(i$,=".",-1)  !actual decimal places
       if ypos>xpos
	    tmp$=fields$[control,2]+" has more than"+str$(xpos)+" decimal places!"
		if xpos=0 let tmp$=fields$[control,2]+" can not have any decimal places!"
	    i$ = blockguipopup$("E",tmp$,"","O")
        Print PChr$(element);'WCFOCUS';
	    goto wait
	   end if
	   i$=i using mask$
	   if i$[1,1]="*" 
	    i$ = blockguipopup$("E",fields$[control,2]+" is too large, mask is"+mask$+"!","","O")
        Print PChr$(element);'WCFOCUS';
	    goto wait
	   end if
	  end if !mask
	 else if fields$[control,7]="TEXT"
	  minlen= fields$[control,20]
	  if minlen if len(i$)<minlen
	   i$ = blockguipopup$("E",fields$[control,2]+", the minimum length for this field is "+str$(minlen)+"!","","O")
       Print PChr$(element);'WCFOCUS';
	   goto wait
	  end if
	 else if fields$[control,7]="PHONE"
	  !edit check to 7 or 10 numbers, reformat to xxx-xxx-xxxx or xxx-xxxx
	  for i=1 to len(i$)
	   if i$[i,i]>="0" if i$[i,i]<="9" let tmp$=i$[i,i]
	  next i
	  if len(i$)<>7 if len(i$)<>10
	    i$ = blockguipopup$("E",fields$[control,2]+", must be phone # format xxx-xxxx or xxx-xxx-xxxx!","","O")
        Print PChr$(element);'WCFOCUS';
	    goto wait
	  end if
      if len(i$)=7 let i$=tmp$[1,3],"-",i$[4] else let i$=tmp$[1,3],"-",i$[4,6],"-",i$[7]
	 end if
	 !
	end if !type
	if nextelement=lastelement !just 1
     call dxset(0,fields$[control,4], I$) !for print program to get
	 call dxset(0,"element"+fields$[control,4],str$(element)) !set the element # of each field, so if an error on an input, can set focus to the field
	else  !more than one, add seq # to field names
     call dxset(0,fields$[control,4]+str$(element-nextelement), I$) !for print program to get
	 call dxset(0,"element"+fields$[control,4]+str$(element-nextelement),str$(element)) !set the element # of each field, so if an error on an input, can set focus to the field	 
	end if
    next element
	nextelement=lastelement+1
   end if !active control
  next control
    !maybe save defaults
	tmp$ = getcheckbox$(351)
	if tmp$="Y"
	 !loop thru prompts and save defaults
	 keys$=blockid$
     seq=-2
     Try Search >= #c[2],1;keys$ Else Rem
     Do
      Try Read Record #c[2],seq;blockinp. Else Exit Do
      if blockinp.id$<>blockid$ exit do
      if blockinp.active$="Y"
       call dxget(blockinp.varname$,tmp$)
	   if blockinp.type$="CHECK"
	    if tmp$<>"" let blockinp.default$="CHECKED" else let blockinp.default$=""
	   else
        if blockinp.type$="DATE" and (blockinp.default$="T" or blockinp.default$="B" or blockinp.default$="E")
		 !don't overwrite
		else
         blockinp.default$=tmp$
		end if
	   end if
	   Write Record #c[2],seq;blockinp.;
      end if !active
	 loop
	end if !programdefaults
	!
	 programname$=blockid$
	if rtrim$(blockhdr.programname$)<>"" let programname$=rtrim$(blockhdr.programname$) !override
    if len(programname$)<5  let programname$=programname$,".dl4"
	if programname$[len(programname$)-3]<>".dl4" let programname$=programname$,".dl4"
	!!!!!!!!!!!!!!move on to print program
	!
 !??  move this section to inplist, chain in modal window, if any edit check errors, back to prompts??
 !?? maybe call by programname rather than chain, (print program has setglobal to pass error data then return if done or error...mainerr needs to return if not fatal
 !!!!note:if print program input edits find error, DXSets 'focus' field to element #  and error 100000, mainerr will display error popup and
 !!!!then passes control back to print program, which chains back to dxblockgui.dl4, when it calls setblock if DXGet focus is set, sets focus, doesn't redisplay page
  !
  end if !type PROMPT
 !
 for i=0 to cnt !# of fields
  call dxset(10,"inpdefvarname"+str$(i),fields$[i][4])  !fieldnames used by?
 next i
 !
!
!
  !
else
 if spc(8)<>10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
   !call programdump("")
  end if
  error 10000
 end try
end sub !inplist

!
! **main setblock  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !
 try
  try enter rstr$,... else dim rstr$[1]
 !
 Dim blockconfig. as blockconfig
 Dim 1%,c[20],3%,keys$[120],blockid$[8],id$[100]
 dim tmp$[1000],tmp1$[100],tmp2$[100]
 dim fdel$[10],rdel$[10],type$[20],type2$[20],focus$[5]
 dim array$[100,100]  !for U_ defaults to be read in, up to 100, 100char fields
 call env(1,"FDEL",fdel$)
 call env(1,"RDEL",rdel$)
 ! need to get filenames from dxsystem.txt
 !
 !read system file parameters
 Call blockReadSystemFile(e$,blockconfig.)
 call dxget(1,"focus",focus$)  !if set, coming back from gui error, set focus on field
 !
 ! open files
 !
  Call blockopenfiles(e$,blockconfig.,c[])
  call setglobals("blockxchan",0,c[3])  !channel # blockinplst is open on, for blockartermcode setdata drop list values
 !
 Call hdrlist(e$,blockid$,rstr$)
 !
 if type$="TABLE"  !maintentance table, put headings in rstr, put varname and mask in tmp dxset table or blockartermcode to access
  Call collist(e$,blockid$,rstr$)
 end if
 !
 if type$="EDIT"
  call dxget("ID",id$) !change mode,not add mode
  call inplist(e$,blockid$,rstr$) 
  !if change (ID<>"") puts edit prompts in tmp dxset table for blockartermcode to read and create control with default data from record
  !if add, works just like printer prompts, everything is done here.
  if id$="" call addtostr(e$,rstr$,"</block>") \action$=""\programname$="" !add mode
 end if
 !
 if type$="PROMPT" 
  Call inplist(e$,blockid$,rstr$) !print prompts
 end if
 !
 ! no buttons right now Call butlist(e$,blockid$,rstr$)
 !
 else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !setblock
!
!
external sub loadcols(e$,fields$[],cnt,a$,...)
!UBS NOT USED using structures so needs to be in calling program!!!
! reads a$,a1,a2,a3,a4 and populates fields$[] for row=cnt based on 
! column definitions for blockid lasted loaded by setblock
! pass fields$[] 3-dim array being populated by loadcols
! pass cnt, which is row in fields$[] array to populate 
! pass a$ string, and optionally numeric arrays 1%,2%,3%,4% in any order
 !
try 
   try
    enter a1[],...
    enter a2[],...
    enter a3[],...
    enter a4[]
   else
   end try
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !loadcols
!
!
external sub setcols(e$,blockno,fields$[])
! dxsets column arrays in fields$[] to output to xport
! column definitions from blockid lasted loaded by setblock
! pass blockno to use on web page 0=none, <0 = blockid
! pass fields$[] array previously loaded by loadcols
try
 dim tmp$[30],blockid$[8]
 for i=0 to ubound(fields$[],1)
 tmp$="col"+str$(i)
 if blockno>0 let tmp$=str$(blockno)+"col"+str$(i)
 !get blockid from setblock if blockno<0
 if blockno<0 call dxget(10,"blockid",blockid$) \ let tmp$=blockid$ +"col"+str$(i)
  call dxset(tmp$,fields$[i])
 next i
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !setcols
!
!
external sub setvalues(e$,blockno,a$,...)
! reads a$,a1,a2,a3,a4 and dxsets default value array to output to xport
! field definitions from blockid lasted loaded by setblock
! pass blockno to use on web page 0=none, <0 = blockid
! pass a$ string, and optionally numeric arrays 1%,2%,3%,4% in any order
 !
try
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !setvalues
!
!
external sub getvalues(e$,blockid$,blockno,a$,...)
! reads in xport values from blockno, based on field definitions in blockid$
! and populates a$ string, and optional numeric arrays
! pass blockid$ for field definitions
! pass blockno that matches blockno section of web page
! pass a$ string, and optionally numeric arrays 1%,2%,3%,4% in any orde 
 !
try
else
 if spc(8) <> 10000
   call blocksuberr(e$,Spc(8),Spc(10),Msc$(2))
  end if
  error 10000
 end try
end sub !getvalues
