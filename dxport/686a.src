! >>> Program 686A
!
! description   Customer Price Listing
!
! loadsave -w -n 100,10 -o prog/dxport/686a.dl4 src/686a.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
Rem MX686A - CUSTOMER PRICE BOOK WITH FORMULAS
Rem AUTHOR: DAVE DEVITO    MAY 22 1991
Rem LAST UPDATE:  roman 05/26/1991.  sort by commodity code!                                  pick price types
!                                  calculation formulas
!               roman 07/29/1991.  sort on x digit of commodity code
!               rek 02/08/93 add break tables
!               rns (06/15/1993) add sort by option/clean up
!               rns (05/16/1994) allow up to 999 dept's in lastprice
!               04/01/1997 - DATE COMPARE JULIAN
!               zyc 03/03/1998 cct120495 to check bracket1 not gt 10
! jliu 10/19/00 cct140901 if there is no breaking table setting in prod file
!               search it in commodity file
!
! THIS PROGRAM USES A NON-STANDARD SPECIAL PRICE GET ROUTINE
!
! cct167193 pricetype expansion
! jliu 8/11/08 cct125176 bring the prod group to rev9
Rem BEDIT Version: 2.2 OBJECT CODE     Created: NOV  7, 2005  13:01:17
Rem /w2/papermaster/r2005//usr/acct/valerie/work/r2005/mx/mx686a.src (univ2) [valerie] {63710}
Rem  Copyright (c) 2005 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
include "src/inc/fileprtdefault.inc" ! port default
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Sub getportdefault,GetCostLevels
Declare External Function OpenFile,PDate$,FormatDate2$,getuidinfo$,JDate$
External Lib "libprod.lib"
Declare External Sub ProdGroup
Declare Intrinsic Sub DateToJulian,InpBuf,String,Time,VerifyDate,programdump
!Option Default Dialect IRIS1

If Err 0 Gosub ERR_TRAP
!If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Def FNF(H) = Int((Abs(H) * 20 + .5) * Sgn(H)) / 20
Def FNP(X) = Sgn(X) * (Int(Abs(X) * 10 ^ Q0[1] + .5) / 10 ^ Q0[1])
Def FNR(X) = Sgn(X) * (Abs(Int((Abs(X) + .005) * 100) / 100))
Dim 1%,PFU1[20],CNVTU[2],UN[2]
Dim 2%,C4[8]
Dim 3%,PFU2[6],CNVTA,A[33],UWORK[10],FIELD,BASEC
Dim K33$[50],K34$[50],KCUST$[50],1%,TYPE,RB[2],RBL1[1],RBWH,RBUM[1]
Dim 2%,RB1[5],3%,RBCOST,RBSLCOST,RB5[2],RP_COST,SPSLCOST
Dim 1%,LM[1],WHLM[1],L9[1],PM5[5,4]
Dim 1%,C0,M5[3],M8,PTYPE,SPC3[2],SPCUM[1],F,X1,P0[100],B3
Dim 1%,LPBRK,JUMP_,SORT,DIR,LPEUN[2],DFT_COST,WHPARC[5],PD1[5]
Dim 1%,ccbrktbl,CCUPBRK,PRFAC,ccbase
Dim 2%,B[24],M6[3],CFC1[12],C4[8],SPC1[5],BRKLVL,L6[1]
Dim 2%,D4[2],D3[2],Q0[1],R[20],WHBD[2],W7[14],D9[20],DFWH,WHSE,PT[37]
Dim 2%,DT3[1],JWDATE,JPCDATE,SCRATCH$[80]
Dim 2%,CCUPCHG,LPDEPT,D2,CCMULTI
Dim 3%,X4,LPR[4],R9,AQQTY,DEXT,BRKAMT,B1[9,2],SPC5[4],PERM[1],L5[1],PF_LOAD2
Dim 3%,M7,BRACKET,BRACKET1,C5[5],SPC4[6],J,X3,T9[10],CUST1,CUST2,PRPARC[3]
Dim 3%,W3[24],WHLV[2],WHMISC[6],A4,PREC[1],WHMISC2[7],parm[5],x2[9]
Dim 1%,SPC6[4],aptype[8],abtype[8],amtype[8],3%,apfact[8],amqty[8],OrdQty ! add'l spcl prices2-9 
Dim CMDY1$[4],CMDY2$[4],K4$[50],K5$[50],C1$[142],Z1$[50],LP$[50],A3$[22]
Dim A2$[30],K9$[50],BK$[10],A$[156],I$[60],COMMBRK$[4],D$[35]
Dim J$[40],CNAME$[30],J2$[20],J3$[40],J4$[40],PCDATE$[8],UNIT$[4]
Dim K1$[50],K2$[20],K3$[20],X$[10],K9$[50],MESS$[50],KEY_CMDTY$[8]
Dim P9$[50],P60$[60],PMASK$[12],F1$[16],WHPROD$[12],W1$[32],WH$[2]
Dim P61$[256],KEYCOMM$[10],keyprod$[14] 
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
dim tmp$[800],tmp1$[800],tmp2$[800],Message$[600],msg$[100],rstr$[2000],webstr$[2000]
dim action$[30],options$[30],userid$[8],b$[200],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim Blank$[20]	  \ Blank$=" ",Blank$
dim prt. as prtdefault ! port defaults
Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
For J = 2 To 14
  Read J1 \ If J1 = -1 Goto L_830
  Read #1,88,J1;J$;
  Ropen #J,J$
L_830: Next J
Data "1792","2880","-1","752","1728","1808","1936","-1","1632","1712","1952","1376","1744"
COID = IntCo ! Int((Spc(5) - Int(Spc(5) / 16384) * 16384) / 64)
ROPEN #15,"2/SPRICEMARK"+Str$(COID)
CH_CHEAD = 4;CH_CMDTY = 16
J$ = "2/commodity"+Str$(COID)
Open #CH_CMDTY,J$
J$ = "2/commhead"+Str$(COID)
Open #CH_CHEAD,J$
Mat Read #1,19,50;P9$;
Mat Read #1,60,50;P60$;
Mat Read #1,61,0;P61$;
Mat Read #1,115,0;D9;
Read #1,3;CNAME$;
Read #1,0,112;X2; \ Gosub L_7700 \ PCDATE$ = X$[1,8]
PCDATE = X2
X2 = PCDATE \ Gosub L_7820 \ X2 = 0
If X2 Let JPCDATE = X2 Else Gosub L_7650
Mat Read #1,115,40;Q0; \ If Not(Q0[1]) Let Q0[1] = 2
PMASK$ = "##########"
X = Len(PMASK$) - Q0[1] \ If X < 0 Let X = Q0[1]
PMASK$[X,X] = "."
If Err 0 Let J8 = Spc(8)
J8 = 0 \ J9 = Chf(0)
If Err 0 Gosub ERR_TRAP
If J8 If J8 <> 49 Gosub ERR_TRAP
J9 = 60 \ If J8 Let J9 = 20
if j8 ! xml - not on this report!
	e$="Can not print to browser"
	goto Err_Msg
Endif
LPBRK = 0;AQQTY = 0
If P60$[33,33] = "Y" Let LPBRK = 1
!call dxsave(0,"tmp/686asv.txt!")
!Open #77,"PRTDFLT","USERPORT"
!Read #78,Spc(6),10;A4; \ If Not(A4) Let A4 = Spc(6)
!Mat Read #77,A4,0;PD1;
!Close #77,#78
call GetPortDefault(e$,IntCO,UserID$,portnum,rec_uac,prt.) ! get port default
DFWH = prt.Wh ! PD1[2]
eflag=0;e$=""
L_1000: Rem "================================ get ranges
! Gosub L_8000 ! screen
!Print 'CS'
!Print @0,0;"MX686A";@27,0;"CUSTOMER PRICE BOOK (WITH FORMULAS)"
!Print @0,4;"ENTER STARTING PRODUCT CODE, <CR> FOR FIRST,  E: TO EXIT:"
!Print @6,5;"ENDING   PRODUCT CODE, <CR> FOR LAST,   E: TO EXIT:"
!Print @0,6;"ENTER STARTING COMMODITY, <CR> FOR FIRST,  E: TO EXIT:"
!Print @6,7;"ENDING   COMMODITY, <CR> FOR LAST,   E: TO EXIT:"
!Print @0,8;"ENTER STARTING CUST, <CR> FOR FIRST,   E: TO EXIT:"
!Print @6,9;"ENDING   CUST, <CR> FOR LAST,   E: TO EXIT:"
!Print @0,11;"ENTER BRACKET NUMBER TO USE FOR TEN BRACKET PRICES OR <CR> FOR NO PRICE"
!Print @0,12;"ENTER THE PRICE TYPE (1-999 OR  0: ALL TYPES)"
!Print @0,13;"SORT BY:  1> PRODUCT CODE,  2> COMMODITY CODE"
!Print @0,14;"DIGITS TO SORT COMMODITY CODE BY <CR> FOR FOUR(4):"
!If P9$[32,32] = "Y" Print @0,15;'CL';"ENTER WAREHOUSE TO PRINT FOR,  0: FOR MAIN, OR  E: TO EXIT:  ";
L_1010: !Print @58,4;'CL'; \ Input ""K2$ \ If K2$ = "E" Goto OUTEND
call dxget("SPROD",K2$)
!Print @58,5;'CL'; \ Input ""K3$ \ If K3$ = "E" Goto OUTEND
call dxget("EPROD",K3$)
If K3$ = "" Let K3$ = "}}}}}}"
K2$ = K2$,"            ";K2$ = UCase$(K2$[1,12]);K3$ = K3$,"            ";K3$ = UCase$(K3$[1,12])
If K2$ <= K3$ Goto L_1035
!Gosub L_1400 \ Goto L_1010
eflag=eflag+1;e$=e$+" Invalid Product Range"
L_1035: ! Print @55,6;'CL'; \ Input ""CMDY1$ \ If CMDY1$ = "E" Goto OUTEND
call dxget("SCOMD",CMDY1$)
!Print @55,7;'CL'; \ Input ""CMDY2$ \ If CMDY2$ = "E" Goto OUTEND
call dxget("ECOMD",CMDY2$)
If CMDY2$ = "" Let CMDY2$ = "}}}}"
CMDY1$ = CMDY1$,"    ";CMDY1$ = UCase$(CMDY1$[1,4]);CMDY2$ = CMDY2$,"    ";CMDY2$ = UCase$(CMDY2$[1,4])
If CMDY1$ <= CMDY2$ Goto L_1060
!Gosub L_1400 \ Goto L_1035
eflag=eflag+1;e$=e$+" Invalid Commodity Range"
L_1060: !Print @51,8;'CL'; \ Input ""K4$ \ If K4$ = "E" Goto OUTEND
call dxget("SCUST",K4$)
Z = K4$;K4$ = Z Using "######"
! Print @51,9;'CL'; \ Input ""K5$ \ If K5$ = "E" Goto OUTEND
call dxget("ECUST",K5$)
If K5$ = "" Let K5$ = "999999"
Z = K5$;K5$ = Z Using "######"
If K4$ <= K5$ Goto L_1095
!Gosub L_1400 \ Goto L_1060
eflag=eflag+1;e$=e$+" Invalid Customer Range"
L_1095: !Print @73,11;'CL'; \ Input ""BK$ \ If BK$ = "E" Goto OUTEND
call dxget("PRBKT",BK$)
If BK$ = "" Let BRACKET = -9 Else Let BRACKET = BK$
If Not(BRACKET) ! Goto L_1095
	eflag=eflag+1;e$=e$+" Invalid Bracket"
Endif
L_1110: !Print @45,12;'CL'; \ Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("PRTYPE",J$)
PTYPE = J$
If PTYPE < 0 Or PTYPE > 999 ! Goto L_1110
	eflag=eflag+1;e$=e$+" Invalid Price Type"
Endif
L_1120: ! Print @47,13;'CL'; \ Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("SRTBY",J$)
SORT = J$
If SORT < 1 Or SORT > 2 ! Goto L_1120
	eflag=eflag+1;e$=e$+" Sort by is 1 or 2"
Endif
If SORT = 1 Goto L_1200 ! Print @51,14;"N/A" \ Goto L_1200
L_1135: !Print @51,14;'CL'; \ Input ""J$ \ If J$ = "E" Goto OUTEND
call dxget("COMDS",J$)
If J$ = "" Let COMM_DIGIT = 4 Else Let COMM_DIGIT = J$
If COMM_DIGIT < 1 Or COMM_DIGIT > 4 !Goto L_1135
	eflag=eflag+1;e$=e$+" Answer is 1 to 4"
Endif
L_1200: Rem WAREHOUSE
If P9$[32,32] <> "Y" Let WHSE = 0 \ Goto L_1450
Whse=0 !!Print @60,15;'CL'; \ WHSE = 0
!If DFWH < 10 Print Using "#";DFWH; Else Print Using "##";DFWH;
!Print @60,15;
!Input Len 16386;""WH$ \ If WH$ = "E" Goto OUTEND
call dxget("WHSE",WH$)
If WH$ = "" Let WHSE =Str$(DFWH) !  \ Goto L_1240
WHSE = WH$
L_1240: !
If WHSE < 0 Or WHSE > D9[5] ! Print 'RB'; \ Goto L_1200
	eflag=eflag+1;e$=e$+" Invalid Warehouse"
Endif
Goto L_1450
L_1400: Rem "=====
!Print @0,22;'RB';"ENDING VALUE MUST BE GREATER THAN OR EQUAL TO STARTING VALUE!"
!Signal 3,20
!Print @0,22;'CE';
Return 
L_1450: Rem "================== all picked
!Print @10,22;'CL'; \ Input "CHOOSE  P: Print,  R: Reselect,  E: Exit "Z1$ \ If Z1$ = "E" Goto OUTEND
!If Z1$ = "R" Goto L_1000
!If Z1$ <> "P" Goto L_1450
if eflag ! some entry issue - cannot print
	! let e$=message$ ! already in e$
	goto ERR_MSG
Endif
!call programdump("/tmp/686alog1!","")
If J8 = 0 !if pdf or print, new method, after edits,setouput,dxclose
  Call setoutput(e$,rstr$,2) !2 flag puts 0 status section in w/print in process msg, puts </page> in
  try call dxclose() else rem
Endif
J1 = 100;J2 = 0
DIR = SORT \ If SORT = 2 Let DIR = 3
!Print @0,22;"Printing...please wait";'CE'; \ Signal 3,0
!If J8 Print 'CS';
If Err 0 Gosub ERR_TRAP
J4$ = " ",J4$;J4$ = K4$
Search #7,2,1;J4$,R[7],E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_2035
L_2020: Search #7,3,1;J4$,R[7],E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_9100
If J4$ > K5$ Goto L_9100
L_2035: Mat Read #7,R[7],0;C1$;
Mat Read #7,R[7],142;CFC1;
If PTYPE If PTYPE <> CFC1[7] Goto L_2020
! Mat Read #7,R[7],194;C5; ! should be c2[]?
Mat Read #7,R[7],348;A2$;
Mat Read #7,R[7],388;A3$;
C0 = CFC1[7] \ J1 = 100
Mat Read #5,C0,28;PT;
DFT_COST = PT[0] \ If Not(DFT_COST) Let DFT_COST = P60$[29,29]
If SORT = 1 Let K1$ = K2$ Else Let K1$ = CMDY1$;COMMBRK$ = ""
Search #2,2,DIR;K1$,R1,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Goto L_2110
L_2090: Search #2,3,DIR;K1$,R1,E \ If E > 2 Gosub ERR_SEARCH
If E Goto L_2020
If SORT = 1 If K1$[1,12] > K3$ Goto L_2020
If SORT = 2 If K1$[1,4] > CMDY2$ Goto L_2020
L_2110: Mat Read #2,R1,0;A$;
If A$[140,151] = "Z ZZZZZZZZZZ" Goto L_2090
If A$[140,151] < K2$ Goto L_2090
If A$[140,151] > K3$ Goto L_2090
If A$[152,155] < CMDY1$ Goto L_2090
If A$[152,155] > CMDY2$ Goto L_2090
Mat Read #2,R1,156;B;
Mat Read #2,R1,256;A;
Mat Read #2,R1,512;PFU1;
Mat Read #2,R1,554;PFU2;
MAT  READ #2,R1,596;PRPARC;
Mat Read #2,R1,620;LM; \ PREC[0] = R1
Mat Read #2,R1,894;C4; \ Read #2,R1,938;PF_LOAD2;
if whse                                                              
   let keyprod$[1,12]=a$[140,151];keyprod$[13,14]=whse using "##"    
   search#14,2,1;keyprod$,r14,e \ if e goto nowhse:                  
   mat read#14,r14,846;whmisc2;                                      
   PARM[0] = 0                                                       
   PARM[1] = WHMISC2[0]                                              
   !Call "MXPRODGRP5",PARM[] 
   Call ProdGroup(e$,intco,Parm[])
   if not (parm[4]) goto L_2090: 
endif                                                                
nowhse: !  
If WHSE Gosub L_8100
Gosub L_12400
L5[1] = B[8] \ If DFT_COST = 2 Let L5[1] = PF_LOAD2
If DFT_COST = 3 Let L5[1] = B[21]
If DFT_COST = 4 Let L5[1] = B[10]
If DFT_COST = 5 Let L5[1] = C4[4]
PRICE = PFU1[12]
LPEUN[2] = 0;PERM[0] = 0;PERM[1] = 0 \ If LPBRK Gosub L_17000
Gosub L_3000
T9 = 0 \ T9[1] = 0 \ COL = 0 \ MESS$ = " ",MESS$
Gosub L_25000
If LPBRK And Not(L9[0]) And P60$[12,12] <> "Y" Gosub L_17600
If JUMP_ Let SPC3[1] = JUMP_
If T9 = -2 Let T9 = 0;BRKLVL = 0;JUMP_ = SPC3[1]
If T9 = -1 Let T9 = 0
If C4[2] = 1 If Not(T9) Gosub L_2400
If BRACKET If C4[2] = 2 If Not(T9) Gosub L_6500
If T9 Gosub L_4000
CNVTU[0] = 0 \ CNVTU[1] = PRICE
CNVTU[2] = 2 \ CNVTA = T9
CNVTA = CNVTA - L6[1]
If L6[0] Let CNVTA = CNVTA - (CNVTA * (L6[0] / 100))
Gosub L_20000
T9 = AMOUNT
If PFU1[12] = -1 Let UNIT$[1,4] = "CWT " \ Goto L_2280
If PFU1[12] = -2 Let UNIT$[1,4] = "LOT " \ Goto L_2280
If PFU1[12] = -3 Let UNIT$[1,4] = "LB  " \ Goto L_2280
Mat Read #6,PFU1[12],10;UNIT$;
L_2280: CNVTU[0] = 0;CNVTU[1] = PRICE;CNVTU[2] = 2
CNVTA = L6[1] \ If CNVTA Gosub L_20000 Else Let AMOUNT = 0
L6[1] = AMOUNT
If L6[0] Let MESS$[Len(MESS$)] = L6[0] Using "LESS ###% BREAK)"
If L6[1] Let MESS$[Len(MESS$)] = L6[1] Using "LESS ---#.## BREAK)"
If SORT = 2 If COMMBRK$ <> "" And COMMBRK$[1,COMM_DIGIT] <> A$[152,151 + COMM_DIGIT] Let J1 = 100
Gosub L_5800
Gosub L_5000
If SORT = 2 Let COMMBRK$[1,COMM_DIGIT] = A$[152,155]
L6[0] = 0;L6[1] = 0;L9[0] = 0;PERM[0] = 0;PERM[1] = 0;LPEUN[2] = 0
Goto L_2090
L_2400: Rem "========================= calc from comm file!
IF ccbase=10 LET FIELD=0
IF ccbase=1 LET FIELD=0
IF ccbase>2 and ccbase<9 LET FIELD=ccbase-2 ! "field 1-6
IF ccbase and ccbase<>2 and ccbase<>9 GOSUB L_12000:
IF ccbase=0 LET T9=A[ccmulti+19] \ LET MESS$="(LIST PRICE ",ccmulti,")" \ GOTO L_2590: ! "use one if the lists
IF ccbase=1 LET T9[1]=B[8] \ LET Z1$="WHSE" ! "use whse cost
IF ccbase=2 LET T9[1]=B[10] \ LET Z1$="LAST" ! "use last/po cost
IF ccbase=3 LET T9[1]=A[20] \ LET Z1$="LIST 1" ! "use list 1
IF ccbase=4 LET T9[1]=A[21] \ LET Z1$="LIST 2" ! "use list 2
IF ccbase=5 LET T9[1]=A[22] \ LET Z1$="LIST 3" ! "use list 3
IF ccbase=6 LET T9[1]=A[23] \ LET Z1$="LIST 4" ! "use list 4
IF ccbase=7 LET T9[1]=A[24] \ LET Z1$="LIST 5" ! "use list 5
IF ccbase=8 LET T9[1]=A[25] \ LET Z1$="LIST 6" ! "use list 6
IF ccbase=9 LET T9[1]=C4[4] \ LET Z1$="BASE" ! "use base cost
IF ccmulti=0 LET ccmulti=1 ! "check multiplier
LET T9=(T9[1]*ccmulti) ! "apply multipler to base
CNVTU[0] = 0 \ CNVTU[1] = PRICE
CNVTU[2] = 2 \ CNVTA = T9[1]
Gosub L_20000
LET MESS$="(",AMOUNT,"[",Z1$,"] x ",ccmulti,")"
L_2590: If T9 Let COL = 51
If Not(L9[0]) If T9 Let L9[0] = 1
Return 
L_3000: Rem "======================================== get commodity
J2$ = " ",J2$;J2$ = A$[152,155]
Search #CH_CHEAD,2,1;J2$,R[4],E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_3100
Mat Read #CH_CHEAD,R[4],0;D$;
KEY_CMDTY$ = J2$[1,4] + C0 Using "### "
Search #CH_CMDTY,2,1;KEY_CMDTY$,REC_CMDTY,E \ If E > 1 Gosub ERR_SEARCH
If E Goto L_3100
Mat Read #CH_CMDTY,REC_CMDTY,40;CCBASE
Mat Read #CH_CMDTY,REC_CMDTY,42;CCMULTI
Mat Read #CH_CMDTY,REC_CMDTY,46;CCBRKTBL
Mat Read #CH_CMDTY,REC_CMDTY,50;CCUPCHG
Mat Read #CH_CMDTY,REC_CMDTY,54;CCUPBRK;
If Not(CCMULTI) If Not(CCBASE) Let CCBASE = 1
Goto L_3120
L_3100: Rem NOT FOUND
D$[1,16] = J2$," NOT FOUND"
CCMULTI = 0 \ CCBASE = 1
L_3120: Return 
L_3500: Rem PRINT CUSTOMER
Print #0;"\15\"; Tab 30;"CUSTOMER: ";J4$[1,6];
Print #0; Tab 50;C1$[31,60]; Tab 83;"PRICE TYPE ";CFC1[7]
Print #0; Tab 50;C1$[61,90]
Print #0; Tab 50;C1$[121,135]; Tab 67;C1$[136,137]; Tab 70;A2$[1,10]
Return 
L_4000: Rem Quantity break routine (REK - 01/22/93)   NON-STANDARD VERSION
If P60$[12,12] = "Y" Goto L_4190
If C4[2] <> 1 Or (Not(CCBRKTBL) And P9$[10,10] = "Y") Goto L_4190
L6[0] = 0;L6[1] = 0
If L9[0] <> 1 And L9[0] <> 9 And Not(JUMP_) Goto L_4080
Gosub L_11000
If L6[1] > T9 Let L6[1] = T9;X4 = T9
L_4080: If (L6[0] Or L6[1]) Let L9[0] = 9 Else Let BRKLVL = 0
L_4190: Return 
L_4325: Rem BASE TYPE
FIELD = 0
If SPC3[1] = 2 Let FIELD = 0
If SPC3[1] > 3 If SPC3[1] < 10 Let FIELD = SPC3[1] - 3
If FIELD Gosub L_12000
If SPC3[1] = 1 Let BASEC = C4[4]
If SPC3[1] = 2 Let BASEC = B[8]
If SPC3[1] = 3 Let BASEC = B[10]
If SPC3[1] = 4 Let BASEC = A[20]
If SPC3[1] = 5 Let BASEC = A[21]
If SPC3[1] = 6 Let BASEC = A[22]
If SPC3[1] = 7 Let BASEC = A[23]
If SPC3[1] = 8 Let BASEC = A[24]
If SPC3[1] = 9 Let BASEC = A[25]
If SPC3[1] = 10 Let BASEC = RBCOST
If SPC3[1] = 11 Let BASEC = SPSLCOST \ If SPC5[3] = 4 Let BASEC = L5[1]
If SPC3[1] = 12
  If C4[2] = 1 Gosub L_2400
  If C4[2] = 2 Gosub L_6500
  BASEC = T9
  T9 = 0
End If 
Return 
L_5000: Rem PRINT LINE
Print #0; Tab 1;A$[140,151];
Print #0; Tab 21;A$[9,28];
Print #0; Tab 42;A$[152,155];
Print #0; Tab 47;UNIT$;
If T9 Print #0; Using PMASK$; Tab COL;T9; Tab 96;MESS$[1,30];
If Not(T9) Print #0; Tab 95;" NO PRICING FOR THIS PRODUCT";
Print #0;" "
Print #0; Tab 1;A$[93,112];
Print #0; Tab 21;A$[63,83];
Print #0; Tab 96;MESS$[31]
J1 = J1 + 2
Return 
L_5800: Rem HEADINGS ROUTINE
If J1 < J9 Return 
!If J2 If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
If J2 If Not(J8) Print #0;"\14\";
J2 = J2 + 1 \ J1 = 11
If Not(J8) Print #0;" "
Print #0; Tab 10;PCDATE$; Tab (64 - Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE";J2
Print #0;" - 686A - ";Msc$(3);
Print #0; Tab 45;"PRICE LIST WITH FORMULAS";
If WHSE Print #0;" - WAREHOUSE";WHSE;
Gosub L_3500
Print #0;" "
Print #0; Tab 1;"PRODUCT CODE"; Tab 21;"DESCRIPTION"; Tab 42;"COMM"; Tab 47;"PRICE"; Tab 55;"MATRIX";
Print #0; Tab 66;"SPECIAL"; Tab 77;"COMM"; Tab 88;"10 BRK"; Tab 100;"FORMULA / COMMENTS"
Print #0; Tab 1;"VENDOR ITEM #"; Tab 47;"U/M"; Tab 55;"PRICE"; Tab 66;"PRICE"; Tab 77;"PRICE"; Tab 88;"PRICE"
Print #0;" "
If SORT = 2 Print #0; Tab 10;D$[1,16] \ Print #0;" " \ J1 = J1 + 2
Return 
L_6500: Rem CALC BRACKET PRICE
If SPC3 = 4 Let BRACKET1 = SPC3[1] \ Goto L_6517
If BRACKET = -9 Let X3 = 0 \ Return 
BRACKET1 = BRACKET
If SPC3 = 5 Let BRACKET1 = BRACKET1 + (SPC3[1])
If BRACKET1 > 10 Let BRACKET1 = 10
L_6517: MESS$ = "(B",BRACKET1,":",C4[4],"BC"
B4 = (BRACKET1 * 1000) - 1000 + C4[3]
If B4 < 0 Let X3 = 0 \ Goto L_6690
Mat Read #11,B4,0;M5;
Mat Read #11,B4,10;M6;
If BRACKET1 > 1 If M6[0] = 0 Let BRACKET1 = BRACKET1 - 1 \ Goto L_6517
M7 = C4[4]
CNVTU[0] = 0 \ CNVTU[1] = PFU1[11] \ CNVTU[2] = 2 \ CNVTA = M7 \ Gosub L_20000 \ M7 = AMOUNT
For M8 = 0 To 3
  If Not(M6[M8]) Goto L_6630
  If M5[M8] Let M7 = M7 + (M6[M8]) \ MESS$ = MESS$,"+",M6[M8]
  If Not(M5[M8]) Let M7 = M7 + (M7 * (M6[M8] / 100)) \ MESS$ = MESS$,"+",M6[M8],"%"
Next M8
L_6630: MESS$ = MESS$,")"
If P60$[18,18] = "Y" Let M7 = FNF(M7)
X4 = M7
CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = X4 \ Gosub L_20000 \ X4 = AMOUNT
If P61$[50,50] = "Y" Gosub PRICEFAC
M7 = X4
T9 = M7 \ COL = 83
If SPC5[0] If T9 Let COL = 63
L_6690: Return 
L_7650: Rem GET JULIAN DATE
SCRATCH$ = "" \ Call Time(SCRATCH$)
SCRATCH$[13] = "" \ Call VerifyDate(SCRATCH$,X$,E) \ If E Gosub ERR_SEARCH
PCDATE = X$
Call DateToJulian(1,X$,X$,E) \ If E Gosub ERR_SEARCH
X2 = X$[1,5]
JPCDATE = X2
Return 
L_7700: Rem  *UNPACK DATE  X2 TO X$      V1.0  4/04/84  G.DOSCHER
X$ = " ",X$ \ X$[10] = ""
X$[1,3] = Int(X2 / 10 ^ 2 - Int(X2 / 10 ^ 4) * 10 ^ 2) + 10 ^ 2 Using "###"
X$[4,6] = Fra(X2 / 10 ^ 2) * 10 ^ 2 + 10 ^ 2 Using "###"
X$[7,9] = Int(X2 / 10 ^ 4) + 10 ^ 2 Using "###"
X$[4,4] = "/" \ X$[7,7] = "/" \ X$ = X$[2]
Return 
DT3[0] = X2;FLAG = 1;X$ = " "
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
Call VerifyDate(X$,X$,E) \ If E Let X$ = "    "
X2 = X$[1,6] \ Return 
L_7820: Rem  CONVERT YYMMDD TO JULIAN (RETURN=NOGOOD, +1=OKAY)
X$ = X2 Using "&&&&&&"
Call DateToJulian(1,X$,X$,E) \ If E Return 
X2 = X$[1,5] \ Return 1
DT3[0] = X2;DT3[1] = X2;FLAG = 0
Call "JULIANUTIL",DT3[],X$,FLAG
Return 
X$ = X2 Using "&&&&"
DT3[0] = X$[1,2];DT3[1] = X$[3,4]
If DT3[0] > 67 Let DT3[0] = 1900 + DT3[0]
If DT3[0] < 68 Let DT3[0] = 2000 + DT3[0]
X$[1,4] = DT3[0] Using "&&&&";X$[5,6] = DT3[1] Using "&&"
X2 = X$[1,6] \ Return 
L_8000: Rem "================================ display screen

Return 
L_8100: Rem GET WHSE INFO
WHPROD$[1,12] = A$[140,151]
WHBLD[0] = 14;WHBLD[1] = WHSE;WHBLD[2] = 0
Call "GETWHSE.dl4",WHPROD$,WHBLD[],W1$,W3[],WHPARC[],WHLV[],W7[],WHMISC[],E,e$,rstr$
If WHBLD[2] > 0 Mat Read #14,WHBLD[2],842;WHLM;
If P9$[32,32] = "Y" Gosub L_69000
B[8] = W3[17];B[10] = W3[16]
C4[4] = W3[18];PF_LOAD2 = W3[14]
B[21] = W3[15];prparc[2]=whmisc[2]
For CT = 20 To 25
  A[CT] = W3[CT - 1]
Next CT
Return 

L_9100: Rem END OF THIS RANGE
!If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
Goto OUTEND
Stop 
L_11000: Rem QUANTITY BREAK SUBROUTINE (REK - 01/22/93)  NON-STANDARD
If B[22] <= 0 Or B[22] > Chf(12) - 1
  B[22] = CCUPBRK
  If B[22] <= 0 Or B[22] > Chf(8) - 1 Goto L_11250
End If 
Mat Read #12,B[22],0;B1;
Read #12,B[22],200;B3; \ If B3 = 1 Or B3 = 3 Goto L_11050
Goto L_11250
L_11050: If JUMP_ < 0 Let BRKLVL = B[22] + (Abs(JUMP_) / 100);JUMP_ = 0
I = -1 \ If BRKLVL And Not(JUMP_) Let I = Int(Fra(BRKLVL) * 100) - 1 \ BRKLVL = 0
If I >= 0 And I <= 9 Let X4 = B1[I,2];T0 = B1[I,1] \ Goto L_11180
X4 = 0;T0 = 99;I1 = 9
If B3 = 1 Let BRKAMT = AQQTY
If B3 = 3 Let BRKAMT = DEXT
For I = I1 To 0 Step -1
  If B1[I,0] < 0 Goto L_11250
  If I > 0 And B1[I,0] = 0 Goto L_11150
  If AQQTY >= B1[I,0] Goto L_11160
L_11150: Next I
Goto L_11250
L_11160: If JUMP_ Let I = I + JUMP_ \ If I > 9 Let I = 9
L_11170: X4 = B1[I,2];T0 = B1[I,1]
L_11180: If Not(X4) And I > 0 ! "try again
  I = I - 1
  Goto L_11170
End If 
If Not(X4) Goto L_11250
If Not(T0) Let L6[0] = X4
If T0 <> 1 Goto L_11240
L6[1] = X4
CNVTU[0] = PFU1[8];CNVTU[1] = 0;CNVTU[2] = 2
CNVTA = L6[1] \ Gosub L_20000 \ L6[1] = AMOUNT;X4 = AMOUNT
L_11240: BRKLVL = B[22] + ((I + 1) / 100);JUMP_ = 0
L_11250: Return 
L_12000: ! CALC MATRIX L PRICES FROM TABLE
IF FIELD<1 OR FIELD>6 RETURN 
IF C4[2]<>1 RETURN 
IF C4[3]=0 RETURN 
Mat read #15,c4[3],18;pm5;
LET BASEC=C4[4] ! "base cost
if pm5[field-1,4]=1 let basec=b[10]
if pm5[field-1,4]=2 let basec=b[8]
if pm5[field-1,4]=3 let basec=pf_load2
if pm5[field-1,4]=4 let basec=b[21]
if pm5[field-1,4]=5 let basec=prparc[2]
GOSUB L_19000:
! X4 RETURNED
if p61$[50,50]="Y" gosub pricefac:
!
LET A[19+FIELD]=X4
Return 
L_12400: Rem CALC LOADS FROM LOAD MARKUP
If P9$[32,32] = "Y" And WHSE <> 0
  If WHLM[0]
    WH = WHSE;LTBL = WHLM[0];CNVTA = 0
    Gosub L_12610 \ W3[17] = CNVTA;B[8] = W3[17]
  End If 
  If WHLM[1]
    WH = WHSE;LTBL = WHLM[1];CNVTA = 0
    Gosub L_12610 \ W3[14] = CNVTA;PF_LOAD2 = W3[14]
  End If 
Else 
  If LM[0]
    WH = 0;LTBL = LM[0];CNVTA = 0
    Gosub L_12610 \ B[8] = CNVTA
  End If 
  If LM[1]
    WH = 0;LTBL = LM[1];CNVTA = 0
    Gosub L_12610 \ PF_LOAD2 = CNVTA
  End If 
End If 
Return 
L_12610: Rem CALL
OTYPE = 1
!Call "MXLOAD5",OTYPE,WH,LTBL,PREC[],CNVTA
Call "MXLOAD5.dl4",OTYPE,WH,LTBL,PREC[],CNVTA,intCO,e$,rstr$
Return 
L_17000: Rem "========================= check for last price data
D4[2] = 0;D3[0] = 0;D3[1] = 0
For D2 = 0 To Chf(10) - 1
  K9$ = " ",K9$
  K9$[1,6] = CFC1[1] Using "######"
  K9$[7,10] = D2 Using "####"
  K9$[11] = A$[140,151]
  Search #13,2,1;K9$,R9,E \ If E > 1 Gosub ERR_SEARCH
  If E Goto L_17120
  Mat Read #13,R9,16;D4;
  X2 = D4[2] \ Gosub L_7820 \ X2 = 0
  JWDATE = X2
  If Not(D3[0]) Let D3[0] = JWDATE;D3[1] = R9
  If D3[0] If D3[0] < JWDATE Let D3[0] = JWDATE;D3[1] = R9
L_17120: If P9$[44,44] <> "Y" Let D2 = CHF(10)+10 ! 999
Next D2
If Not(D3[1]) Goto L_17170
R9 = D3[1]
Mat Read #13,R9,168;LPR;
Mat Read #13,R9,214;LPEUN;
Mat Read #13,R9,262;PERM;
L_17170: Return 
L_17600: Rem ===== check permanent price
If Not(LPEUN[2]) Goto L_17970
T9 = 0
If LPEUN[2] <= -1 And LPEUN[2] >= -6 ! "lp 1-6
  If P9$[10,10] <> "Y" Or C4[2] <> 1 Goto L_17970
  If PERM[0] < 1 Or PERM[0] > 6 Goto L_17970
  FIELD = PERM[0] ! + 1
  Gosub L_12000
  A[19 + FIELD] = X4
  T9 = A[19 + FIELD]
  If T9 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
  If L9[0] Let COL = 63;MESS$ = "PERMANENT LIST PRICE",PERM[0]
End If 
If LPEUN[2] <= -8 And LPEUN[2] >= -17 ! "bracket 1-10
  If C4[2] <> 2 Goto L_17970
  If PERM[0] < 1 Or PERM[0] > 10 Goto L_17970
  SPC3[0] = 4;SPC3[1] = PERM[0];BRACKET = - PERM[0] \ Gosub L_6500
  If T9 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
  If L9[0] Let COL = 63;MESS$ = "PERMANENT BRACKET",PERM[0]
End If 
If LPEUN[2] = -7 ! "fixed price
  T9 = PERM[0] \ If T9 < 0 Let T9 = 0
  If T9 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
  If L9[0] Let COL = 63;MESS$ = "PERMANENT PRICE"
End If 
If LPEUN[2] = 9 ! "fixed break level
  If P9$[10,10] <> "Y" Or C4[2] <> 1 Goto L_17970
  If PERM[0] < 1 Or PERM[0] > 10 Goto L_17870
  T9 = 0;JUMP_ = - PERM[0];BRKLVL = 0
  COL = 63;MESS$ = "PERMANENT BREAK LEVEL",PERM[0]
L_17870: End If 
If LPEUN[2] = 10 ! "% discount
  If PERM[0] < 1 Or PERM[0] > 100 Goto L_17970
  L6[0] = PERM[0];L6[1] = 0;L9[0] = LPEUN[2];BRKLVL = 0;T9 = 0
  If L9[0] Let COL = 63;MESS$ = L6[0] Using "PERMANENT ###.##% DISCOUNT"
End If 
If LPEUN[2] = 14 ! "gtm %
  If PERM[0] < 1 Or PERM[0] >= 100 Goto L_17970
  If Not(PERM[0]) Let T9 = 0 \ Goto L_17950
  T9 = (L5[1] / ((100 - PERM[0]) / 100))
L_17950: If T9 Let L9[0] = LPEUN[2] Else Let L9[0] = 0
  If L9[0] Let COL = 63;MESS$ = PERM[0] Using "PERMANENT ###.##% GTM"
End If 
L_17970: Return 
L_19000: Rem MATRIX PRICING, RETURNS X4
Call "MX671BRK5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,C4[],FIELD,BASEC,e$,rstr$
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
X4 = CNVTA
Return 
L_20000: Rem UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Goto L_20050
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto L_20160
If CNVTU[2] = 0 Goto L_20050
If Not(CNVTA) Let AMOUNT = 0 \ Goto L_20160
L_20050: ! 
L_20120: Rem "====== unibasic 5+ logic
! Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
Call "MXPRCONV5.dl4",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG,e$,rstr$
If CNVTU[2] = 0 Goto L_20160
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
L_20160: Return 
L_23000: Rem CHECK FOR REBATE
RBCOST = 0 \ RBSLCOST = 0 \ SPSLCOST = 0
Read #1,88,320;F1$;
Ropen #33,F1$
Read #1,88,304;F1$;
Ropen #34,F1$
TYPE = 0
L_23070: K34$ = " ",K34$
If W2[3] Let K34$[1,6] = W2[3] Using "######" Else Let K34$[1,6] = B[24] Using "######"
X2 = 0 \ TYPE = TYPE + 1
If TYPE > 8 Goto L_23600
L_23110: Search #34,3,4;K34$,R34,E
If E > 2 Gosub ERR_SEARCH
If E Goto L_23070
X2 = K34$[1,6]
If W2[3] If X2 <> W2[3] Goto L_23070
If Not(W2[3]) If X2 <> B[24] Goto L_23070
KCUST$ = " ",KCUST$
If TYPE < 5 Let KCUST$[1,6] = CFC1[1] Using "######" Else Let KCUST$[1,6] = CFC1[7] Using "PT### "
KCUST$[7,12] = K34$[7,12]
Search #34,2,2;KCUST$,R34,E
If E Goto L_23110
K33$ = " ",K33$
If TYPE = 1 Or TYPE = 5
  K33$[1,12] = A$[140,151];K33$[13] = K34$[7,12],""
End If 
If TYPE = 2 Or TYPE = 6
	LET K33$[1,1]="-";K33$[2,12]=A$[116,126];K33$[13]=K34$[7,12],""
ENDIF 
IF TYPE=3 OR TYPE=7
  K33$[1,1] = "*";K33$[2,5] = A$[152,155];K33$[13] = K34$[7,12],""
End If 
If TYPE = 4 Or TYPE = 8
  K33$[1,1] = "#";K33$[13] = K34$[7,12],""
End If 
K33$[19] = ""
Search #33,2,2;K33$,R33,E
If E > 1 Gosub ERR_SEARCH
If E Goto L_23110
Mat Read #33,R33,12;RB1;
Mat Read #33,R33,36;RBUM;
Mat Read #33,R33,40;RB;
Mat Read #33,R33,118;RBWH;
Mat Read #33,R33,126;RBL1;
Mat Read #33,R33,138;RB5;
X2 = RB1[2] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE > JPCDATE Goto L_23110
X2 = RB1[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If RB1[4] If JWDATE < JPCDATE Goto L_23110
If P9$[32,32] = "Y" If RBWH If RBWH <> H4[2] Goto L_23110
If TYPE <> 1 And TYPE <> 5 Let RBUM[0] = PFU1[RBUM[0]] \ RBUM[1] = PFU1[RBUM[1]]
If P9$[32,32] = "Y" And W3[16] <> 0 Let RP_COST = W3[16] Else Let RP_COST = B[10]
If RB[0] = 3 ! FLAT REBATE COST
  RBCOST = RB5[0]
  If TYPE <> 1 And TYPE <> 5 Let CNVTU[0] = RBUM[0];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = RBCOST \ Gosub L_20000 \ RBCOST = AMOUNT
End If 
If RB[0] = 1 Let RBCOST = (RP_COST * ((100 - RB5[0]) / 100))
If RB[0] = 2 Let CNVTU[0] = 0;CNVTU[1] = RBUM[0];CNVTU[2] = 2;CNVTA = RP_COST \ Gosub L_20000
If RB[0] = 2 Let CNVTA = (AMOUNT - RB5[0]);CNVTU[0] = RBUM[0];CNVTU[1] = 0 \ Gosub L_20000
If RB[0] = 2 Let RBCOST = AMOUNT
If RBL1[0] = 4 Let RBSLCOST = 0
If RBL1[0] = 3
  RBSLCOST = RB5[1];RBSLCOST_TYPE = 99
  If TYPE <> 1 And TYPE <> 5 Let CNVTU[0] = RBUM[1];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = RBSLCOST \ Gosub L_20000 \ RBSLCOST = AMOUNT
End If 
If RBL1[0] = 1 Or RBL1[0] = 2
  If RBL1[1] = 1 Let BASEC = C4[4]
  If RBL1[1] = 1 If P9$[32,32] = "Y" If W3[18] Let BASEC = W3[18]
  If RBL1[1] = 2 Let BASEC = B[8]
  If RBL1[1] = 2 If P9$[32,32] = "Y" If W3[17] Let BASEC = W3[17]
  If RBL1[1] = 3 Let BASEC = B[10]
  If RBL1[1] = 3 If P9$[32,32] = "Y" If W3[16] Let BASEC = W3[16]
  If RBL1[1] = 4 Let BASEC = RBCOST
End If 
If RBL1[0] = 1 Let RBSLCOST = (BASEC * ((100 + RB5[1]) / 100))
If RBL1[0] = 2 Let CNVTU[0] = 0;CNVTU[1] = RBUM[1];CNVTU[2] = 2;CNVTA = BASEC \ Gosub L_20000
If RBL1[0] = 2 Let CNVTA = (AMOUNT + RB5[1]);CNVTU[0] = RBUM[1];CNVTU[1] = 0 \ Gosub L_20000
If RBL1[0] = 2 Let RBSLCOST = AMOUNT
If RBSLCOST And (Not(L5[1]) Or RBSLCOST < L5[1]) Let L5[1] = RBSLCOST
L_23600: Rem exit
Close #33
Close #34
Return 
L_24800: Rem Valid unit for product (special price)?
For X = 0 To 7
  If UNIT = PFU1[X] Return 1
Next X
Return 
L_24900: Rem ===== Check for cust/contract ======
I$ = " ",I$;I$[1,6] = CFC1[1] Using "######"
L_24920: Search #3,3,2;I$,R0,E \ If E Return 
X2 = I$[1,6] \ If X2 <> CFC1[1] Return 
K9$[1,6] = I$[7,12]
Search #8,2,1;K9$,Z8,E
If Not(E) Gosub L_25500 \ If T9 Goto L_24980
Goto L_24920
L_24980: Rem CONTRACT=I$[8,12] ! "retain contract #
Return 
L_25000: Rem Special Pricing (rek - 01/21/93) / NON-STANDARD VERSION
Gosub L_23000
T9 = 0;F8 = 0
PROD = 99;L9[0] = 2
K9$ = " ",K9$;K9$[1,6] = CFC1[1] Using "######";K9$[7,18] = A$[140,151];K9$[19] = ""
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
Gosub L_24900 \ If T9 Goto L_29980
K9$[1,6] = "999999";L9[0] = 3
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
!
LET PROD=0;L9[0]=15 ! "customer/cost group price
LET K9$=" ",K9$;K9$[1,6]=CFC1[1] USING "######";K9$[7,7]="-"
LET K9$[8,18]=A$[116,126];K9$[19]=""
SEARCH #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
IF NOT(E) GOSUB L_25500: \ IF T9 GOTO L_29980:
GOSUB L_24900: \ IF T9 GOTO L_29980: ! "check contracts/exit if one
LET K9$[1,6]="999999";L9[0]=16 ! "cost group promotion
SEARCH #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
IF NOT(E) GOSUB L_25500: \ IF T9 GOTO L_29980:
!
PROD = 0;L9[0] = 4
K9$ = " ",K9$;K9$[1,6] = CFC1[1] Using "######";K9$[7,7] = "*"
K9$[8,11] = A$[152,155];K9$[19] = ""
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
Gosub L_24900 \ If T9 Goto L_29980
K9$[1,6] = "999999";L9[0] = 7
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
L9[0] = 12
UNIT = PFU1[19] \ If UNIT > 0 Read #6,UNIT,10;UNIT$;
K9$ = " ",K9$;K9$[1,6] = CFC1[1] Using "######";K9$[7,7] = "&"
K9$[8,11] = UNIT$[1,4];K9$[12,15] = UNIT Using "####";K9$[19] = ""
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
Gosub L_24900 \ If T9 Goto L_29980
K9$[1,6] = "999999";L9[0] = 11
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
L9[0] = 6
K9$ = " ",K9$;K9$[1,6] = CFC1[1] Using "######";K9$[7,7] = "#";K9$[19] = ""
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
Gosub L_24900 \ If T9 Goto L_29980
K9$[1,6] = "999999";L9[0] = 8
Search #8,2,1;K9$,Z8,E \ If E > 1 Gosub ERR_SEARCH
If Not(E) Gosub L_25500 \ If T9 Goto L_29980
T9 = 0;L9[0] = 0 \ Goto L_29980
L_25500: Rem Now get special price
Mat Read #8,Z8,12;SPC1;
Mat Read #8,Z8,36;SPCUM;
Mat Read #8,Z8,40;SPC3;
Mat Read #8,Z8,46;SPC4;
Mat Read #8,Z8,138;SPC5;
Read #8,Z8,118;SPWH;
mat read #8,Z8,168;spc6; ! this & below - 9 add'l prices
mat read #8,Z8,178;aptype;
mat read #8,Z8,196;abtype;
mat read #8,Z8,214;amtype;
mat read #8,Z8,232;apfact;
mat read #8,Z8,286;amqty;
If SPWH And SPWH <> WHSE Goto L_29970
X2 = SPC1[2] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If JWDATE > JPCDATE Goto L_29970
If (SPC3[0] = 4 Or SPC3[0] = 5) And C4[2] <> 2 Goto L_29970
X2 = SPC1[4] \ Gosub L_7820 \ X2 = 0
JWDATE = X2
If SPC1[4] And JWDATE < JPCDATE Goto L_29970
!
if spc6[1]<>1 and spc6[1]<>2 let spc6[1]=1 ! default = qty min
! now the check of which price to use
let mlvl=0 ! no multiple levels yet
for x=0 to 8 \ if aptype[x] let mlvl=1 \ next x ! has a type (use prctype as decider)
if mlvl ! has levels - find right one - if not use main (orig)
	gosub MLVL_SPR:
Endif
! to make less changes - move whatever level into std var names
if spc6[1]<>1 and spc6[1]<>2 let spc6[1]=1 ! default = qty min
!
T9 = 0
T9 = SPC5[0]
UNIT = SPCUM[1] \ Gosub L_24800 \ SPCUM[1] = C3[4]
If PROD Let C3[4] = SPCUM[1]
If SPC5[3] = 3 And SPC5[1] Let SPSLCOST = SPC5[1]
If Not(PROD) If SPC5[3] = 3 And SPSLCOST Let CNVTA = SPSLCOST;CNVTU[0] = PFU1[11];CNVTU[1] = 0;CNVTU[2] = 2 \ Gosub L_20000 \ SPSLCOST = AMOUNT
If SPC5[4] = 1 Let BASEC = C4[4]
If SPC5[4] = 1 If P9$[32,32] = "Y" If W3[18] Let BASEC = W3[18]
If SPC5[4] = 2 Let BASEC = B[8]
If SPC5[4] = 2 If P9$[32,32] = "Y" If W3[17] Let BASEC = W3[17]
If SPC5[4] = 3 Let BASEC = B[10]
If SPC5[4] = 3 If P9$[32,32] = "Y" If W3[16] Let BASEC = W3[16]
If SPC5[4] = 4 Let BASEC = RBCOST
IF SPC5[4]=5 LET BASE=PF_LOAD2
IF SPC5[4]=5 IF P9$[32,32]="Y" IF W3[14] LET BASE=W3[14]
if spc5[4]=6 let base=prparc[2]
if spc5[4]=6 IF P9$[32,32]="Y" if WHMISC[2] let base=whmisc[2]
If SPC5[3] = 1 If BASEC Let SPSLCOST = (BASEC * ((100 + SPC5[1]) / 100))
If SPC5[3] = 2 If BASEC Let CNVTU[0] = 0;CNVTU[1] = SPCUM[1];CNVTU[2] = 2;CNVTA = BASEC \ Gosub L_20000
If SPC5[3] = 2 If AMOUNT Let CNVTA = (AMOUNT + SPC5[1]);CNVTU[0] = SPCUM[1];CNVTU[1] = 0 \ Gosub L_20000
If SPC5[3] = 2 If AMOUNT Let SPSLCOST = AMOUNT
If SPSLCOST And (Not(L5[1]) Or SPSLCOST < L5[1]) Let L5[1] = SPSLCOST
If RBSLCOST If Not(SPSLCOST) Let SPSLCOST = RBSLCOST
If Not(PROD) And SPC3[0] = 3 ! "fixed price for commdy, allprod or size sp's
  CNVTU[0] = PFU1[12];CNVTU[1] = 0;CNVTU[2] = 2;CNVTA = T9
  Gosub L_20000 \ T9 = AMOUNT
End If 
If Not(SPC5[0]) And (SPC3[0] = 4 Or SPC3[0] = 5) Let T9 = -1 \ Goto L_25750
If SPC3[0] = 6 Let T9 = -2 \ Goto L_25750
If SPC3[0] = 1 Or SPC3[0] = 2 Gosub L_4325
If SPC3[0] = 3 Let MESS$ = "FIXED PRICE" \ Goto L_25740
If C4[2] = 2 And SPC5[0] And (SPC3[0] = 4 Or SPC3[0] = 5)
  Gosub L_6500
  BASEC = T9;T9 = (BASEC * ((100 + SPC5[0]) / 100));Z1$ = " + "
  If SPC5[0] > 0 Let MESS$[Len(MESS$)] = ")+",SPC5[0],"%" Else Let MESS$[Len(MESS$)] = ")",SPC5[0],"%"
End If 
If SPC3[0] = 1 Let T9 = (BASEC * ((100 + SPC5[0]) / 100)) \ If SPC5[0] > 0 Let Z1$ = " +" Else Let Z1$ = " "
If SPC3[0] = 2 Let T9 = (BASEC / ((100 - SPC5[0]) / 100))
If Not(T9) Goto L_25740
CNVTU[0] = 0;CNVTU[1] = PRICE
CNVTU[2] = 2;CNVTA = BASEC \ Gosub L_20000
If SPC3[0] <> 4 And SPC3[0] <> 5 Let MESS$ = "(",AMOUNT,Z1$,SPC5[0],"%)"
If SPC3[0] = 2 Let MESS$ = "(",SPC5[0],"%"," GP% of ",AMOUNT,")"
L_25740: If T9
  F8 = 99
  If SPC3[0] = 3 And (L9[0] = 2 Or L9[0] = 4 Or L9[0] = 6 Or L9[0] = 12 OR L9[0]=15)
    L9[0] = 13
  End If 
Else 
  SPC5[0] = 0;SPC5[1] = 0
End If 
L_25750: If PROD Or ALLPROD Or SIZE_ If T9 Let COL = 63
If COMDY If T9 Let COL = 74
!
if l9[0] AND t9 let COL=63 ! SPECIAL!
IF L9[0]=4 OR L9[0]=7 AND T9 LET COL=74
!
L_29970: Return 
L_29980: Rem Exit from special pricing
Return 
!
! sort special price 1 - 10 by min qty/wgt
MLVL_SPR: ! multi level - return mlvl 1-10 (1 default)
UWork[0]=1;s3[4]=1
if spc3[2] ! qty um check
	let unit=spc3[2]
	! gosub CheckUnit: ! "check if valid unit
	if not(unit) let spc3[2]=0 ! "bad unit
Endif
amount=UWORK[0] ! base
if prod and spc3[2]
	let cnvtu[0]=0;cnvtu[1]=spc3[2];cnvtu[2]=1;cnvta=UWORK[0] ! "convert qty
	gosub L_20000: ! "get quantity in AMOUNT
Endif
if not(prod) and not(spc3[2])
	let cnvtu[0]=0; cnvtu[1]=pfu1[9]; cnvtu[2]=1; cnvta=UWORK[0]
   gosub L_20000:
Endif
OrdQty=amount ! for check of min=qty, s3[4]=weight
x2[1]=0;x2[2]=0;x2[3]=0;x2[4]=0 ! qty/wgt >=
if spc6[1]=1 ! main (price 1) - set the bar
	if ordqty>=spc4[0] and x2[1]<=spc4[0] let x2[1]=spc4[0];mlvl=1
Endif
if spc6[1]=2 ! main (price 1) - set the bar
	if s3[4]>=spc4[0] and x2[2]<=spc4[0] let x2[2]=spc4[0];mlvl=1
Endif
for x=0 to 8
	if aptype[x]>0 and aptype[x]<9 ! prctype determines used
		if amtype[x]<>2 let amtype[x]=1 ! default = qty
		if amtype[x]=1 ! qty
			if ordqty>=amqty[x] and x2[1]<=amqty[x] let x2[1]=amqty[x];x2[3]=x+2
		Endif
		if amtype[x]=2 ! wgt
			if s3[4]>=amqty[x] and x2[2]<=amqty[x] let x2[2]=amqty[x];x2[4]=x+2
		Endif
	Endif
Next x
! x2[3]=qtylvl;x2[4]=wgtlvl
if x2[3]=0 and x2[4]=0 RETURN ! no match of any other levels - use 1
if x2[1]=ordqty and X2[2]=s3[4] ! tie goes to wgt per specs
	if x2[4] 
		let mlvl=x2[4] 
		goto mlsprdone:
	Endif ! no wgt lvl - continue
Endif
MLvl=x2[4];x2[9]=0 ! wgt lvl has priority unless really low wgt lvl
if ordqty let X2[9]=s3[4]/ordqty ! unit wgt
if (x2[9]*x2[1])>x2[2] let mlvl=x2[3] ! qty lvl wgt>wgt lvl (ie: 20 cs>5 lbs)
If x2[1] and x2[2]=0 and x2[3]<>0 let mlvl=x2[3] ! qty level>0 - wght lvl=0
if x2[1]=0 and x2[2]=0 and x2[4]<>0 let mlvl=x2[4] ! both zero - use wgt
if mlvl=0 and x2[3]<>0 let Mlvl=x2[3] ! no wgt - use qty

MLSPRDone: ! done
if mlvl>1 ! from price 2-10 - move to standard vars
	x=mlvl-2 ! var displ 0-8
	C3[0]=APTYPE[X];C3[1]=ABTYPE[X]
	spc4[0]=amqty[x];spc6[1]=amtype[x]
	spc5[0]=apfact[x]
Endif
if mlvl<1 let mlvl=1
Return
!
!
L_69000: Rem ===== check/set warehouse with valid data
If P9$[32,32] = "Y" ! "warehouse pricing turned on
  X2 = W3[19] + W3[20] + W3[21] + W3[22] + W3[23] + W3[24]
  If WHPARC[1] Let C4[3] = WHPARC[1] Else If X2 Let C4[3] = 0
  For X2 = 20 To 25
    If Not(W3[X2 - 1]) Let W3[X2 - 1] = A[X2]
  Next X2
  If Not(WHLM[0]) And Not(W3[17]) Let WHLM[0] = LM[0]
  If Not(W3[17]) Let W3[17] = B[8]
  If Not(WHLM[1]) And Not(W3[14]) Let WHLM[1] = LM[1]
  If Not(W3[14]) Let W3[14] = PF_LOAD2
  If Not(W3[15]) Let W3[15] = B[21]
  If Not(W3[16]) Let W3[16] = B[10]
  If Not(W3[18]) Let W3[18] = C4[4]
  If Not(WHMISC[2]) Let WHMISC[2] = PRPARC[2]
  If WHPARC[0] Let B[22] = WHPARC[0]
  If Not(W2[3]) Let W2[3] = B[24]
End If 
Return 
PRICEFAC: Rem round prices based upon pricing factor
If P61$[50,50] <> "Y" Return 
KEYCOMM$ = A$[152,155]
Search #4,2,1;KEYCOMM$,R4,E
If Not(E)
  Mat Read #4,R4,40;PRFAC;
  If PRFAC
    CNVTA = X4;CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2
    Gosub L_20000
    Call "pricernd",PRFAC,AMOUNT
    CNVTA = AMOUNT;CNVTU[0] = PFU1[12];CNVTU[1] = 0;CNVTU[2] = 2
    Gosub L_20000
    X4 = AMOUNT
  End If 
End If 
Return 
OUTEND: Rem EXIT PROGRAM
!Print 'CS'
!Close 
!Chain "MX000"
!Stop
If j8 ! dx xml
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status section in, puts </page> in
End If 
!
try Call dxclose() else rem
End
Rem {begin rtn.error.s}
ERR_SEARCH: Rem                                            
ENUM = E;ELINE = Spc(16);CTERR = 0                         
If E = 5 Let CTERR = Err(8)                                
e$ = "RETURN STATUS",(E + (CTERR * .001))                  
e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM " + Msc$(4)       
Call programdump("tmp/686ase!","")                        
Goto ERR_MSG ! Error 10000                                 
Return ! End

ERR_MSG: ! send message                                    
ReturnStatus = 1 ! 0 ! no good (ONLY DISPLAYS IF =1 ??)    
Message$ = e$                                              
Call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)     
Call AddToStr(e$,rstr$,WebStr$)                            
Call SetOutPut(e$,rstr$)                                   
End                             

Rem {begin rtn.error.s}
ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
include "src/callmainerrnet.inc"
End