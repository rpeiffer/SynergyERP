! >>> Program 680c
!
! description 680c -Price Book - Price List
! loadsave -w -n 100,10 -o prog/dxport/680c.dl4 src/680c.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx



Rem BEDIT Version: 2.3 OBJECT CODE     Created: APR 11, 2012  16:14:14
Rem /w2/papermaster/r2005//usr/acct/mary/work/custom/xrev9/mx680c.src (univ2) [mary] {18513}
Rem  Copyright (c) 2012 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Declare Intrinsic Sub DateToJulian,FindF,InpBuf,String,VerifyDate,Time,Logic
Declare Intrinsic Sub JulianToDate
Declare Intrinsic Sub dxopen,dxget,dxset,dxclose,dxsave,getglobals
!Option Default Dialect IRIS1
Declare Intrinsic sub programdump,env
Declare Intrinsic function findchannel
! external libs for subs/functions
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
Declare External Function getmsg$,expandarray
External Lib "ubsfunc.dl4"
Declare External Function getuidrec,getuidinfo$
Declare External Function OpenFile
!
!!Option Default Dialect IRIS1
Try 

Rem BEDIT Version: 2.0 OBJECT CODE     Created: MAR 23, 2001  11:40:22
Rem /usr/acct/xindist//usr/acct/zyc/work/xindist/acme/mx680c.src (univ2) [zyc] {42929}
Rem  Copyright (c) 2001 Universal Business Systems, Inc.
Rem {begin src/inc/com.prod.i}
Com A$[156],HZ$[90],PR_A2$[30],C1$[32],PSN$[20],U3$[60]
Com PRFLG$[10],PRMKUPTYP$[4],PIC$[50],PRIML$[12]
Com 1%,LLC,PFTB[3],PFU1[20],LM[1],UPCT,PR_PO[1]
Com 1%,PRBASE,PRPARC2[3],PRD1[4],AGEDAY
Com 2%,A2,A3[2],B[24],PR_C4[10],PFCO[3],PLC[3],PSN[1],U2,U4[1]
Com 2%,STK[2],FDT[1],PRMKUP[3],PRD0[2]
Com 3%,A1[7],A[33],PF_LOAD2,PFU2[6],PLV[1],PRPARC[3],U3,PFN[1]
Com 3%,LBSORD,FUT[1],PRREDI[1],PRD2[3],PRD3
Rem {end com.prod.i}
Com 1%,SC,SR,CNVTU[2]
Com 3%,CNVTA
Com J4$[75]
Dim BCOMM$[4],BPROD$[12],CATDESC$[24],CODE$[10],COST$[8],COSTER$[8]
Dim COMD$[16],COMKEY$[4],CODER$[7],CNAME$[30],DATER$[22]
Dim ECOMM$[4],EPROD$[12],ECATDESC[24],F$[50],PROD_KEY$[12]
Dim J$[75],J0$[10],J1$[75],J5$[75],K$[75],OPT$[10],SORTED$[50]
Dim SCREEN$[50],TITLE$[50],TIMER$[5],UNIT$[4],UNDLINE$[131],X$[50]
Dim 1%,X
Dim 2%,BCAT[3],ECAT[3]
Dim 3%,SCAN[8]
Dim 4%,J1
Dim 3%!
Dim DEV$[20],HM$[30],nextblockid$[8],Message$[600],WebStr$[600]
Dim e$[500],buttonlist$[5,50],nextlist$[5,100] ! dx error handling variables
Dim tmp$[1500],tmp1$[200],blockid$[100],msg$[100],rstr$[2000]
Dim action$[30],options$[30],userid$[8],3%,fdel$[10],bsdel$[10],esdel$[10],rdel$[10]
dim groupid$[1]
dim blank$[200],endparam$[200]
!!! check this
Dim b$[200]!
let blank$=" ",blank$
let endparam$="z",endparam$
!call dxopen() ! needed?
! Call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
 Call getglobals("blockx",0,blockid$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)!
! browser or printer
j8 = 0
If Err 0 Let j8 = Spc(8)
try
	J9 = Chf(0) 
else
	let j8=99
end try
If Err 0 Gosub ERR_TRAP
j9=55;j2=0;j1=70
! open files
for ctr=1 to 99
	If ctr<>9
		Try Close #ctr Else Rem
	endif
next ctr
COID=IntCo 
tRY Close #1 eLSE rEM ! getsession open cntrl# as READONLY
J$="cntrl/cntrl"+Str$(COID)
Open #1,J$
eflag=0
returnstatus=1

OPEN_FILES: Rem
CH_PROD = 2 \ Read #1,88,1792;F$; \ Ropen #CH_PROD,F$
CH_PCAT = 3 \ Read #1,88,1984;F$; \ Ropen #CH_PCAT,F$
CH_CCOD = 4 \ Read #1,88,1728;F$; \ Ropen #CH_CCOD,F$
CH_COMC = 5 \ Read #1,88,2288;F$; \ Ropen #CH_COMC,F$
Read #1,3;CNAME$;


Def FNP(H) = Int(Abs(H) * 100 + .5) * .01 * Sgn(H)
INIT_VARS: Rem
Call Time(DATER$)
BCOMM$ = "    ";BPROD$ = "            "
ECOMM$ = "}",ECOMM$;EPROD$ = "}",EPROD$
OPT$ = "@%&-?/,*"
UNDLINE$ = "=",UNDLINE$
!!!!!
LET eflag=0
let message$=""
call dxget("BCOMM",BCOMM$) \  BCOMM$ = RTRIM$(UCase$(BCOMM$)),Blank$
call dxget("ECOMM",ECOMM$) \  ECOMM$ = RTRIM$(UCase$(ECOMM$)),EndParam$
if bcomm$>ecomm$
	let eflag=eflag+1
	let message$=message$+"Invalid Commodity Code Range. "
endif
call dxget("BPROD",BPROD$) \  BPROD$ = RTRIM$(UCase$(BPROD$)),Blank$
call dxget("EPROD",EPROD$) \  EPROD$ = RTRIM$(UCase$(EPROD$)),EndParam$
if bPROD$>ePROD$
	let eflag=eflag+1
	let message$=message$+"Invalid Product Code Range. "
endif
call dxget("BCAT",tmp$) \  let bcat=rtrim$(tmp$)
if rtrim$(tmp$)="" let bcat=1
call dxget("ECAT",tmp$) \  let ecat=rtrim$(tmp$)
if rtrim$(tmp$)="" 
	let ecat=20
endif
if bcat>ecat
	let eflag=eflag+1
	let message$=message$+"Invalid Sales Category Range. "
endif
If j8<>0 ! browser
		tmp$="Item No.",fdel$
		tmp$=tmp$,"Description",fdel$
		tmp$=tmp$,"Description2",fdel$
		tmp$=tmp$,"Price UM",fdel$
		tmp$=tmp$,"Cost",fdel$
		tmp$=tmp$,"Price",fdel$
		tmp$=tmp$,"Category",fdel$
		tmp$=tmp$,"Commodity",fdel$
		tmp$=tmp$,rdel$
	    Call addtostr(e$,rstr$,tmp$)
Endif
if eflag<>0 
	goto outend: ! errors have occured
endif




SORTER: Rem
! Print @0,23;'CL';"Sorting....Please wait";
K$ = " ",K$;K$ = BCOMM$,BPROD$[1,12];J1 = 70
PROD_KEY$ = " ",PROD_KEY$;PROD_KEY$ = BPROD$[1,12]
LOOP_: Rem
REC_PROD = 0
!If COMFLG
!  Search #CH_PROD,3,3;K$,REC_PROD,E \ If E Goto PRINTER
!Else 
  Search #CH_PROD,3,1;PROD_KEY$,REC_PROD,E \ If E Goto PRINTER
  Mat Read #CH_PROD,REC_PROD;A$;
  K$ = A$[152,155],PROD_KEY$[1,12]
  IF PROD_KEY$>EPROD$ GOTO Printer:
  if a$[152,155]<bcomm$ goto loop_:
  if a$[152,155]>ecomm$ goto loop_:
!End If 
!If COMFLG
!  If K$[1,4] > ECOMM$
!    Goto PRINTER
! ! End If 
!End If 
!If K$[5,16] > EPROD$
!  If COMFLG Goto LOOP_
!  Goto PRINTER
!End If 
Mat Read #CH_PROD,REC_PROD,156;B;
if b[11]<bcat goto loop_:
if b[11]>ecat goto loop_:
Read #CH_PCAT,B[11];CATDESC$;
LET SORTED$=" ",SORTED$
LET SORTED$[1,24]=CATDESC$[1,24]
LET SORTED$[25,28]=A$[152,155]
LET SORTED$[29,40]=PROD_KEY$[1,12]
!  SORTED$ = CATDESC$,K$[1,16]
Search #9,4,1;SORTED$,REC_PROD,E \ If E Gosub ERR_SEARCH
!End If 
Goto LOOP_
PRINTER: Rem
SORTED$ = " ",SORTED$;K$ = " ",K$
Gosub HEADER
LOOP_PRINT: Rem
Search #9,3,1;SORTED$,REC_PROD,E \ If E Goto OUTEND
If SORTED$[1,24] <> K$[1,24] ! sales cat change
  If K$[1,3] <> "   " Print #0;"" \ J1 = J1 + 1
  Gosub PRINT_CAT
End If 
If SORTED$[25,28] <> K$[25,28] ! comm code change
  Print #0;"" \ J1 = J1 + 1
  Gosub PRINT_COM
End If 
let k$=sorted$
Gosub READ_PROD
Read #CH_PCAT,B[11];CATDESC$;
If PFU1[12]> 0 Read #4,PFU1[12],10;UNIT$; Else Let UNIT$ = "NONE"
IF PFU1[12]=-1 LET UNIT$="CWT "
IF PFU1[12]=-2 LET UNIT$="LOT "
IF PFU1[12]=-3 LET UNIT$="LB  "
Gosub GET_COST
Gosub PRINT_LINE
Goto LOOP_PRINT
HEADER: Rem
If J1 < J9 Return 
!If J2
!  If J8 Input @0,23;"PRESS <CR> TO CONTINUE "J$ \ Print 'CS';
!End If 
If Not(J8)
  IF J2<>0 Print #0;"\14\";
  !Print @0,23;"Printing....please wait";
Else 
  Return ! browser !Print 'CS';
End If 
J2 = J2 + 1
Print #0; Tab 0;"MX680C"; Tab 64 - (Len(CNAME$) / 2);CNAME$; Tab 120;"PAGE ";J2
Print #0; Tab 0;DATER$[1,19];
Print #0; Tab 58;"*---PRICE LIST---*"
Print #0;""
Print #0; Tab 3;"ITEM"; Tab 80;"PRICE"
Print #0; Tab 3;" NO."; Tab 18;"DESCRIPTION";
Print #0; Tab 80;" U/M "; Tab 90;"COST"; Tab 101;"PRICE"
Print #0; Tab 0;UNDLINE$
J1 = 6
If J2 > 1 And Not(HFLG) Gosub PRINT_CAT
HFLG = 0
Return 
PRINT_LINE: Rem
totrec=totrec+1
if j8<>0
		tmp$=sorted$[29,40],fdel$
		tmp$=tmp$,A$[9,38],fdel$
		tmp$=tmp$,a$[63,92],fdel$
		tmp$=tmp$,unit$,fdel$
		tmp$=tmp$,Coder$,fdel$
		tmp$=tmp$,ltrim$(a[22] Using "#####.##"),fdel$
		tmp$=tmp$,ltrim$(b[11] using "##"),fdel$
		tmp$=tmp$,a$[152,155],fdel$ ! commoditu
		tmp$=tmp$,rdel$
	    Call addtostr(e$,rstr$,tmp$)
else
	If J1 > J9 Gosub HEADER
	Print #0; Tab 3;SORTED$[29,40];
	Print #0; Tab 18;A$[9,38];A$[63,92];
	Print #0; Tab 81;UNIT$;
	Print #0; Tab 87;CODER$;
	Print #0; Tab 98;A[22] Using "#####.##"
	J1 = J1 + 1
endif
Return 
PRINT_CAT: Rem
if j8<>0 return
If J1 + 3 > J9 Let J1 = J1 + 3 \ HFLG = 1 \ Gosub HEADER
Print #0; Tab 0;"SALES CATEGORY: ";SORTED$[1,24] \ J1 = J1 + 1
Gosub PRINT_COM
Return 
PRINT_COM: Rem
if j8<>0 return
If J1 + 2 > J9 Let J1 = J1 + 2 \ HFLG = 1 \ Gosub HEADER
COMKEY$ = " ",COMKEY$;COMKEY$ = SORTED$[25,28]
Search #CH_COMC,2,1;COMKEY$,REC_COMC,E
If E
  COMD$ = "  NOT FOUND     "
Else 
  Read #CH_COMC,REC_COMC;COMD$;
End If 
Print #0; Tab 9;"COMMODITY CODE: ";SORTED$[25,28];"  ";COMD$ \ J1 = J1 + 1
K$ = SORTED$
Return 
READ_PROD: Rem
Mat Read #CH_PROD,REC_PROD,0;A$
Mat Read #CH_PROD,REC_PROD,156;B
Mat Read #CH_PROD,REC_PROD,256;A
Mat Read #CH_PROD,REC_PROD,460;A1
Mat Read #CH_PROD,REC_PROD,508;A2
Mat Read #CH_PROD,REC_PROD,512;PFU1
Mat Read #CH_PROD,REC_PROD,554;PFU2
Mat Read #CH_PROD,REC_PROD,596;PRPARC
Mat Read #CH_PROD,REC_PROD,620;LM
Mat Read #CH_PROD,REC_PROD,624;PR_PO
Read #CH_PROD,REC_PROD,630;LLC
Mat Read #CH_PROD,REC_PROD,632;PSN$
Mat Read #CH_PROD,REC_PROD,652;PSN
Mat Read #CH_PROD,REC_PROD,660;U2
Mat Read #CH_PROD,REC_PROD,670;U4
Read #CH_PROD,REC_PROD,678;U3
Mat Read #CH_PROD,REC_PROD,684;U3$
Mat Read #CH_PROD,REC_PROD,744;HZ$
Mat Read #CH_PROD,REC_PROD,834;A3
Mat Read #CH_PROD,REC_PROD,846;PFTB
Read #CH_PROD,REC_PROD,854;UPCT
Mat Read #CH_PROD,REC_PROD,856;C1$
Mat Read #CH_PROD,REC_PROD,894;PR_C4
Read #CH_PROD,REC_PROD,938;PF_LOAD2
Mat Read #CH_PROD,REC_PROD,944;PR_A2$
Mat Read #CH_PROD,REC_PROD,974;PFCO
Mat Read #CH_PROD,REC_PROD,990;PLV
Mat Read #CH_PROD,REC_PROD,1002;PLC
Mat Read #CH_PROD,REC_PROD,1018;PFN
Mat Read #CH_PROD,REC_PROD,1030;FUT
Mat Read #CH_PROD,REC_PROD,1048;FDT
Mat Read #CH_PROD,REC_PROD,1056;PRFLG$
Mat Read #CH_PROD,REC_PROD,1066;PRBASE
Mat Read #CH_PROD,REC_PROD,1068;PRMKUP
Mat Read #CH_PROD,REC_PROD,1084;PRMKUPTYP$
CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2;CNVTA = A[22]
Gosub CONVERT
A[22] = AMOUNT
CNVTU[0] = 0;CNVTU[1] = PFU1[12];CNVTU[2] = 2;CNVTA = B[8]
Gosub CONVERT
B[8] = AMOUNT
Return 
GET_COST: Rem
CODE$ = "SAVEPROFIT";COST$ = " ",COST$;COSTER$ = " ",COSTER$;K = 0;CODER$ = " ",CODER$
COST$ = FNP(B[8]) Using "#####.&&"
COSTER$[1,5] = COST$[1,5];COSTER$[6,7] = COST$[7,8]
If B[8] < 1 Let COSTER$[5,5] = " "
For X = 7 To 1 Step -1
  If COSTER$[X,X] = " " Let CODER$[X,X] = " " \ Goto NEXTER
  Y = COSTER$[X,X]
  CODER$[X,X] = CODE$[Y + 1,Y + 1]
NEXTER: Next X
Return 

CONVERT: Rem "UNIT CONVERSION RETURNS AMOUNT  (rev 01/07/1992)   ! 20040 REM
If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTSTARTA
If CNVTU[2] = 1 And CNVTU[1] = CNVTU[0] Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[0] = -2 Or CNVTU[1] = -2 Let AMOUNT = CNVTA \ Goto CVTDONE
If CNVTU[2] = 0 Goto CVTSTARTA
If Not(CNVTA) Let AMOUNT = 0 \ Goto CVTDONE
CVTSTARTA: !If Spc(4) > 1280 Goto CVTSTARTB
!Swap 1,"MXPRCONV"
!If CNVTU[2] = 3 Or CNVTU[2] = 4 Goto CVTDONE
!CVTTRY: Rem "this is a remark
!Signal 2,X1,AMOUNT,FLAG \ If X1 = -1 Let E = 0 \ Gosub ERR_SEARCH
!If X1 <> Spc(6) Goto CVTTRY
!If CNVTU[2] = 0 Goto CVTDONE
!If FLAG Let E = FLAG \ Gosub ERR_SEARCH
!Goto CVTDONE
CVTSTARTB: Rem "====== unibasic 5+ logic
Call "MXPRCONV5",PFU1[],PFU2[],A[],CNVTU[],CNVTA,SC,SR,FLAG
If CNVTU[2] = 0 Goto CVTDONE
If FLAG Let E = FLAG \ Gosub ERR_SEARCH
AMOUNT = CNVTA
CVTDONE: Return 

ERR_SEARCH: Rem
ENUM = E ;ELINE = Spc(16);CTERR = 0
If E = 5 Let CTERR = Err(8)
msg$ = "RETURN STATUS",(E + (CTERR * .001))
msg$ = msg$,"/ STATEMENT",ELINE," IN PROGRAM "
E$=msg$ \ Error 10000
Return ! End



ERR_TRAP: Rem *Error routine (escape trap)   V3.1 8/94 G.DOSCHER/REK
!
! dx replace entire error routine
include "src/callmainerrnet.inc"
End 

OUTEND: Rem EXIT PROGRAM
If not(j8)
	Call addtostr(e$,rstr$,esdel$) !end section -- DXBLOCK 
	let returnstatus=0
	If Eflag>0
		ReturnStatus=1 ! ALWAYS - OTHERWISE NO DISPLAY 1=issues
		tmp$=""
	Endif
	if not(eflag)
		if not(totrec)
			returnstatus=1
			let message$=message$+"There are no transactions to print"
			message$=message$+"."
		else
			Let message$=message$+" "+str$(totrec)+" Transaction(s) Printed"
		endif
	endif
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
  Call addtostr(e$,rstr$,esdel$) !end section
  Call setoutput(e$,rstr$,1) !1 flag puts 0 status seciton in, puts </page> in
End If
!try Call dxclose() else rem
Else
!
	include "src/callmainerrnet.inc"
	end try
End ! the whole program