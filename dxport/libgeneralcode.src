! -- libgeneralcode.lib
!
! supporting library of general routines for programming
!
! loadsave -w -n 100,10 -o prog/dxport/libgeneralcode.lib src/libgeneralcode.src
!
! 1.0 06/27/07 new
!
include "src/copyright.inc"
!
declare intrinsic function findchannel
declare intrinsic sub DateToJulian,JulianToDate,findf,env,StringSearch
!
! List of Subs and functions for Library
!
!   F  ConvertDate      Converts numeric dates, date to julian & julian to date
!   F  MaskUpCharge$    Creates a display string of the up charge fields
!
! ---------------------------------------------------------
External Function ConvertDate(e$,DateIn,ConvertType,FormatType)
  !
  !  converts a numeric date to julian or julian to date and returns numeric date
  !
  !  e$           : programming error desc
  !  DateIn       : date to convert
  !  ConvertType  : 1 = date to julian, 2 = julian to date
  !  FormatType   : which julian date convert type to use in calls
  !
  !  DatetoJulian : 0 = yymmdd & yyddd     1 = yymmdd & ddddd     2 = yymmdd & yyyyddd
  !                 4 = yyyymmdd & yyddd   5 = yyyymmdd & ddddd   6 = yyyymmdd & yyyyddd
  !
  !  JuliantoDate : 0 = yyddd & mm/dd/yy   1 = ddddd & mm/dd/yy   2 = yyyyddd & mm/dd/yyyy
  !               : 4 = yyddd & mm/dd/yyyy 5 = ddddd & mm/dd/yyyy 6 = yyyyddd & mm/dd/yyyy
  !                 date is converted to yymmdd or yyyymmdd
  ! 
  !  DateOut      : output date, date not converted = -1
  !
  Try
    !
	dim DateIn$[10],DateOut$[10],tmp$[10]
	dim 1%,errflag
	dim 3%,DateOut
	!
	errflag=1 ! error converting date
	DateIn$=str$(DateIn)
	if ConvertType=1 call DateToJulian(FormatType,DateIn$,DateOut$,errflag)
	if ConvertType=2
	  call JulianToDate(FormatType,DateIn$,tmp$,errflag)
	  if errflag=0 
	    if FormatType<3 let DateOut$=tmp$[7,8] else DateOut$=tmp$[7,10] ! year
		DateOut$=DateOut$,tmp$[1,2],tmp$[4,5] ! month & day
	  endif
	endif
	if errflag=0 let DateOut=DateOut$ else DateOut=-1
  else
    include "src/callsuberr.inc"
  end try
  !
End Function DateOut ! ConvertDate
!
! ---------------------------------------------------------
External Function MaskUpCharge$(e$,UpChrgAmt,UpChrgType,UpChrgUM,UMChan)
  !
  !  converts up charge fields to a % or $ string and returns the string
  !
  !  e$           : programming error desc
  !  UpChrgAmt    : up charge amount
  !  UpChrgType   : up charge type
  !  UpChrgUM     : up charge u/m
  !
  ! output
  !  UpChrg$      : up charge display format, invalid set to null
  !
  Try
    !
	dim UpChrg$[10]
	dim M32$[6] \ M32$="###.##"
	dim 3%
	!
	if UpChrgType
	  UpChrg$="$",UpChrgAmt using M32$
    else
	  UpChrg$=UpChrgAmt using M32$,"%"
	endif
  else
    include "src/callsuberr.inc"
  end try
  !
End Function UpChrg$ ! MaskUpCharge$
!
! ---------------------------------------------------------
