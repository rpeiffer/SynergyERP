! serp368.dl4 - PO Status 
! 1.0 01/08/2010 - initial conversion
!
! loadsave -w -n 100,10 -o prog/dxport/serp368.dl4 src/serp368.src
!
! From the original code:Rem BEDIT Version: 2.2 OBJECT CODE     Created: APR  9, 2009  14:42:59
Rem /w2/papermaster/r2005//usr/acct/bill/work/r2005/mx2/mx229.src (univ2) [bill] {62103}
Rem  Copyright (c) 2009 Universal Business Systems, Inc.
Rem    **** ALL CHANGES MUST BE MADE IN SOURCE!!! ****
Rem
Rem PO368  PO BATCH STATUS
Rem  G.DOSCHER  11/82
Rem  LAST UPDATE: 5/92 - ADD "RESET" FOR IN PROCESS ORDERS
! borrowed from serp288.src and mods for po's
!
!include copyright, common libs, common intrinsics
include "src/copyright.inc"
Declare External Sub CreateNetStatus
!
!
!
!include structure,filehandler libs & default structure dims
! include "src/inc/file?.inc"

!
! *declare additional dl4 intrinsic subs & functionsDeclare Intrinsic Sub InpBuf,String
Declare Intrinsic Sub MiscStr,String,WhoLock

! External Lib "OLDCALLS.LIB"
! Option Default Dialect IRIS1
!
! *declare additional external libs & subs & functions
External Lib "ubsfunc.dl4"
!Declare External Function openfile,pdate$,jdate$,Formatdate2$
Declare External Function GetUIDRec,OpenFile
External Lib "libedittrack.lib"
Declare External Sub MakeEdittrack
Include "src/inc/fileedittrack.inc"
dim etRec. as edittrack
Declare Sub ResetStatusFatal
Declare Function StatusDescription$
dim e$[500],buttonlist$[5,50],nextlist$[5,100] !error handling variables
!
try
dim action$[30],action1$[30],action2$[30],options$[30],userid$[8],3%
dim bsdel$[20],esdel$[20],rdel$[20],fdel$[20],rstr$[1200] ! .net delimiters
dim tmp$[500],tmp2$[1000],b$[200],tmp1$[200]
b$=" ",b$
dim message$[150],webstr$[200]
OPTION BASE YEAR 1980  ! required to get SPC(2) to UB Year (DL4=1988)
!
! call dxopen() ! done in pomenu - for standalone
!
! call getsession(e$,CTLC,options$,action$,userid$,intCO,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$)
Call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,Action1$,Action2$)

DIM 2%,S9[9],t1[1],mcode[9],SEL,SEL$[5],1%,COST_LEV[3],3%,PARAM[9],T2[25],mcharge[9,1]
DIM 1%,mctxbl[9],dclvl,3%,TOT[4],CFIN[8],V1
! If Err 0 Gosub L_9500
! If Spc(13) = 11 Print @0,0;"\177\UWHOTSPOT.\\HOTSPOT\\HOTSPOTIN.hsf\177\";
Dim 1%,LOCKPORT,FILE,CH_ROH,CH_ROH_READ,CH_INVH[1],CH_USERPORT,P2,ch[99]
Dim A$[50],A1$[50],S$[64],S1$[200],X$[10],FILE$[16]
Dim J$[20],J0$[15],J1$[10],J2$[10],J4$[20],J8$[10],J5$[50]
Dim J7$[40],U3$[20],K2$[70],K3$[70],1%,F9[9],2%,S1,S2,H0[5],J9$[20]
Dim FRMSTAT$[2]
Dim 1%,SCR1,SUPERUSER,PASS,SCAN_STATUS,STAT,H4[2]
Dim 1%,ETLINE,ETSTAT,ETUNIT,ETNONSTOCK,CH_ET,LOCKTIME,C1,REC1,C2,ETPRINT
Dim 1%,ETPUNIT,POType
Dim 2%,ETORDER,ETDATE,ETTIME,ETPORT,ETACTION,ETCUST,ETSLS
Dim 2%,H3[4],PH[4],SORD,COID,OldStat
Dim 3%,REC,REC_OS,ETINVOICE,OREF[5],INV_
Dim 3%,ETOQTY[2],ETNQTY[2]
Dim 3%,ETUNITPRICE[1],ETLOADCOST[1],ETORIGTOT,ETWGT[1]
Dim KEY_$[50],OS$[50],RSTORDER$[6]
Dim SCRATCH$[80],ET$[80],ETPROD$[12],USER$[10],P60$[50]
Dim BLANK$[90],DL1$[20]
Dim DEVICE$[32],DIR$[32],FILENAMES$[512],TERM$[32]
Dim K11$[60],K17$[60],K177$[60],K1777$[60],S0$[36],OL2$[16]
Dim 1%,OL1[3],L3[3],SS2[1]
Dim 2%,CHAN[102],INFO[7],STATUS,STATUSCOUNT,STATUSOFF,SHIPTOTORD[1]
Dim 2%,L2[1],L4[3],L7[2],OL2[3],BYPASSQUEST,DELETELINEFLAG,ORDERSTATUS
Dim 3%,R2,R5,R11,R17,R177,H1
Dim fchan[1]
Dim 1%,FLAG,E,STATCOUNT
Dim 2%,SOSRCHH0[5],SOSRCHH3[4]
Dim 3%,SCR,SOSRREF[5]

U3$ = " ",U3$;BLANK$ = " ",BLANK$
LET S1$="ENTERED   PRINTED   REGISTEREDOPEN      IN PROCS  REC. REG'DCLOSED    "                                                                          
LET S1$[101]="DM ENTEREDDM PRINTEDDM REGIST.DM CLOSED STATUS 11  STATUS 12 "                                                                              
LET S1$[161]="DM IN PROCESS"                                              
CH_ROH = 8;CH_AUD = 34
CH_ROH_READ = 2
CH_USERPORT = 33
BYPASSQUEST = 0
For J = 0 To 9
	S9[J] = 0
Next J
SEL = 0
SEL$ = "0"

!
! open all the needed files
!
For J = 8 To 11
	Read J1 \ If J1 = -1 Goto L_270
	Read #1,88,Abs(J1);FILE$;
	If J1 < 0 Ropen #J,FILE$ Else Open #J,FILE$
L_270: Next J
Data "2416","-1","-1","-2432"
Read #1,88,2416;FILE$;
Rem open #ch_roh,file$   ! normal open
Ropen #2,FILE$
! No super user functionality ported
! key record is the user record, not the port
!
! Ropen #CH_USERPORT,"cntrl/userport"
! Read #CH_USERPORT,Spc(6);SCR1;
! Ropen #CH_USRCTL,"cntrl/usercntrl"
ch_usrctl = OpenFile(-9988,IntCo) \ if ch_usrctl = -1 Error 42
! If SCR1 = -1
! 	SUPERUSER = 1
! 	ETUSER$ = "SUPERUSER "
! Else
	REC1 = GetUIDRec(e$, IntCo, Userid$)
	SUPERUSER = 0
!	Mat Read #CH_USRCTL,REC1,260;ETUSER$;
! End If
! Close #CH_USERPORT,#CH_USRCTL
Mat Read #1,60,50;P60$;

!
! Main "action" sub-routine dispatcher
!
select case action1$
	case "GETLIST"
		gosub BuildList
		! status section
		Message$=""
	case "DETAIL"
		gosub BuildDetail
		! status section
		Message$=""
	case "SEARCH"
		gosub OrdInvSearch
		! status section
		Message$=""
	case "RESET"
		gosub ResetStatus
		! status section
		Message$="Status reset."
	case else
		e$ = "Unknown action1: "+action1$ \ error 10000
endselect
! message should be set.  if we got here - we've got a good status
ReturnStatus=1
call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
call addToStr(e$,rstr$,webstr$)
goto OutEnd:


! ***********************************************************************
! Nobody but us subroutines and exit code down here
! ***********************************************************************

!----------------------------------------------------------------------------
! build initial status list breakdown
!----------------------------------------------------------------------------
BuildList: !
	! Add section header and column defs
	tmp$=bsdel$+"StatusList"+fdel$+rdel$
	tmp$=tmp$+"Status"+fdel$+"Desc"+fdel$
	tmp$=tmp$+"First"+fdel$+"Last"+fdel$+"Number"+fdel$+rdel$
	call addToStr(e$,rstr$,tmp$)
	S4 = 0 \ S1 = 0
	A$ = " " \ F9[1] = 0;F9[2] = 0;F9[5] = 0
	do
		Search #2,3,1;A$,R1,E \ If E>2 gosub err_search:
		If E exit do
		S2 = A$[1,2]
		If S1 <> S2 Gosub StatusBreak
		N2 = A$[3] ! last order/inv number this status
		S3 = S3 + 1 ! number of order/inv this status
		S4 = S4 + 1 ! total number of order/inv
		F9[3] = 0
		try
			Mat Read #2,R1,0,10;H0;
		else
			F9[3] = Spc(8)
		end try
		If H0[0] <> S2 Let F9[1] = F9[1] + 1 ! status error
		If H0[2] <> N2 Let F9[2] = F9[2] + 1 ! key/data errors
	Loop
	Gosub StatusBreak
	call addToStr(e$, rstr$, esdel$)
	tmp$=bsdel$+"StatusWarnings"+fdel$+rdel$
	tmp$=tmp$+"Warning"+fdel$+rdel$
	call addToStr(e$,rstr$,tmp$)
	If F9[1]
		tmp$="WARNING!  "+str$(F9[1])+" STATUS ERROR(S) DETECTED!"
		call addToStr(e$, rstr$, tmp$+rdel$)
	end if
	If F9[2]
		tmp$="WARNING!  "+str$(F9[2])+" KEY/DATA ERROR(S) DETECTED!"
		call addToStr(e$, rstr$, tmp$+rdel$)
	end if
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! pass the status - get the description
!----------------------------------------------------------------------------
Function StatusDescription$(stat)
	Select Case stat
		case IS < 19
			exit function S1$[stat * 10 - 9,stat * 10]
		case 90
			exit function "IN PROCESS"
		case 91
			exit function "IN PROCESS"
		case 95
			exit function "PO PROC ERP"
		case 96
			exit function "RTS PROC ERP"
		case 97
			exit function "DM PROC ERP"
	end select
End Function "** UNKOWN **"

!----------------------------------------------------------------------------
! part of "BuildList"  - process break in status
!----------------------------------------------------------------------------
StatusBreak: !
	If S1
		tmp$ = str$(S1)+fdel$+StatusDescription$(S1)+fdel$
		tmp$=tmp$+str$(N1)+fdel$+str$(N2)+fdel$+str$(S3)+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
	End If
	S3 = 0
	If S1 >= 90 Let F9[5] = 9
	S1 = S2
	N1 = A$[3]
return

!----------------------------------------------------------------------------
! Get detail for a particular status
!----------------------------------------------------------------------------
BuildDetail: !
	Call DxGet("Status", tmp$) \ i = tmp$
	if i < 1 or i  > 99
		e$ = "Status to get detail of must be between 1 and 99!"
		error 10000
	end if
	FRMSTAT$ = i Using "##"
	! Add section header and column defs
	tmp$=bsdel$+"HouseKeeping"+fdel$+rdel$
	tmp$=tmp$+"Status"+fdel$+"Desc"+fdel$
	call addToStr(e$,rstr$,tmp$+rdel$)
	tmp$=str$(i)+fdel$+StatusDescription$(I)+fdel$+rdel$
	call addToStr(e$,rstr$,tmp$+esdel$)
	! Add section header and column defs
	tmp$=bsdel$+"DetailList"+fdel$+rdel$
	tmp$=tmp$+"PONumber"+fdel$+"Type"+fdel$+"LockedBy"+fdel$
	tmp$=tmp$+"PreviousStatus"+fdel$
	call addToStr(e$,rstr$,tmp$+rdel$)
	A$ = " ",A$ \ A$[1,2] = FRMSTAT$
	do
		Search #2,3,1;A$,R1,E \ if e>2 gosub err_search:
		If E Or A$[1,2] <> FRMSTAT$ exit do
		Read #2,R1,346;LOCKPORT;
		Mat Read #2,R1,242;POType;
		Mat Read #2,R1,326;OldStat;
		tmp1$=Str$(POTYPE)
		if potype=0 let tmp1$="W"
		if potype=1 let tmp1$="D"
		if potype=2 let tmp1$="I"
		IF POTYPE=4 LET TMP1$="IW"
		IF POTYPE=5 LET TMP1$="ID"
		IF POTYPE=6 LET TMP1$="II"
		tmp$=A$[3,8]+fdel$+TMP1$+fdel$
		If FRMSTAT$ >= "90"
			If LOCKPORT
				if FRMSTAT$ >= "95" and FRMSTAT$ <= "97"
				  try
					Mat Read #CH_USRCTL,LOCKPORT,260;USER$;
				  Else
					User$="Port "+Str$(Lockport)
				  End try
					tmp$=tmp$+"User "+RTrim$(USER$)
				else
					tmp$=tmp$+"Port "+str$(LOCKPORT)
				end if
			end if
			tmp$=tmp$+fdel$
			tmp$=tmp$+str$(OldStat)+fdel$
		Else
			tmp$=tmp$+fdel$+fdel$
		End If
		call addToStr(e$, rstr$, tmp$+rdel$)
	loop
	call addToStr(e$,rstr$,esdel$)
Return

!----------------------------------------------------------------------------
! reset status errored out - close additional "messages" section
! and set the message and status.
!----------------------------------------------------------------------------
sub ResetStatusFatal(msg$)
	call addToStr(e$, rstr$, esdel$)
	ReturnStatus=0
	call CreateNetStatus(e$,ReturnStatus,msg$,WebStr$)
	call addToStr(e$,rstr$,webstr$)
End Sub

!----------------------------------------------------------------------------
! Reset Status of an Order
!----------------------------------------------------------------------------
ResetStatus: !
	! * set up section for additional warning and/or error messages
	tmp$=bsdel$+"AdditionalMsgs"+fdel$+rdel$
	tmp$=tmp$+"Msg"+fdel$+rdel$
	call addToStr(e$, rstr$, tmp$)
	! * let's do it
	Call DxGet("Status", tmp$) \ A$ = tmp$
	If A$ <> "95" And A$ <> "91" and a$<>"96" AND A$<>"97"
		call ResetStatusFatal("Status reset only allowed on status 91, 95, 96 and 97!")
		goto outend
	end if
	STAT = A$[1,2]
	call DxGet("PONumber", tmp$) \ RSTORDER$ = tmp$
	T0 = 0;RSTORDER = RSTORDER$[1,6]
	A$ = " ",A$;A$[1,2] = STAT Using "##"
	A$[3] = RSTORDER Using "######"
	Search #CH_ROH,2,1;A$,R1,E \ if e>1 gosub err_search:
	If E
		call ResetStatusFatal("PO "+A$[3,8]+" is not in status ["+str$(STAT)+"]")
		goto outend
	End If
	A1$ = " ",A1$ \ A1$ = A$
	Gosub CheckOrderValid
	! ***************************************************************
	! Get the original status and the port that is said to be
	! locking the order.  Get the program # that said port is
	! currently said to be accessing.  If the status and the program
	! appear to be matching up, a check was offered to the user to
	! verify if the port is REALLY still logged in.
	!
	! Couple of problems:
	!   1. Need to verify, but under ERP, LOCKPORT is no longer
	!      a port, but a usercntrl record #
	!   2. Program access is not logged in userport for ERP.
	!
	! Temporary solution: if port happens to match up (as in the old
	! Unibasic / Paper Master style) this order is NOT available for
	! reset here.
	! ***************************************************************
	Mat Read #CH_ROH,R1,346;LOCKPORT;
	Ropen #CH_USERPORT,"cntrl/userport"
	! Read #CH_USERPORT,Spc(6),0;REC1; ! already set above
	if LOCKPORT<chf(CH_USERPORT)
		Read #CH_USERPORT,LOCKPORT,2;P2;
	Else
		p2=0
	Endif
	Close #CH_USERPORT
	L_3660: Rem check original status
	Mat Read #CH_ROH,R1,242;POType;
	Mat Read #CH_ROH,R1,242;H4;
	Read #CH_ROH,R1,326;S2;
	Mat Read #CH_ROH,R1,310;PH;
	! IN ERP (status 95), new POs have an original status of
	! 0.  If these are left hanging open, reset to status 1
	if stat = 95 AND S2 = 0 s2 = 1
	ORDERSTATUS = S2
	If S2 <= 0 Or S2 >= 15
		call ResetStatusFatal("NOT ABLE TO RESET PO ["+str$(H0[2])+"]") \ goto outend
	End If
	! Gosub CHECK_PROBLEM ! not done in 368 - 368 JUST DO IT
	A1$[1,2] = S2 Using "##"
	Gosub LogAudit
	Write #CH_ROH,R1,0;S2;
	S2 = 0 \ Write #CH_ROH,R1,326;S2;
	Search #CH_ROH,4,1;A1$,R1,E \ If E>1 gosub err_search:
	Search #CH_ROH,5,1;A$,R1,E \ If E gosub err_search:
	T0 = T0 + 1
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! for status 90s on reset, check to make sure the order is valid
!----------------------------------------------------------------------------
CheckOrderValid: !
	F9[6] = 0
	F9[7] = 0
	try
		Mat Read #CH_ROH,R1,0,10;H0;
		Mat Read #CH_ROH,R1,222;h3;
	else
		Let F9[7] = Spc(8)
	end try
	If F9[7] <> 0 If F9[7] <> 123 gosub err_search:
	If F9[7] = 123
		Call WhoLock(CH_ROH,R1,PORTLOCK)
		e$="PO # "+str$(H0[2])+"locked "
		If PORTLOCK <> -1 and PORTLOCK <> 0
			e$=e$+"by port "+str$(PORTLOCK)+" "
		end if
		e$=e$+"- reset is not permitted."
		call ResetStatusFatal(e$)
		goto outend
	End If
	! check / fix Dir 2
	K2$ = " ",K2$;K2$[1,6] = H3[3] Using "######";K2$[7] = H0[2] Using "######"
	!K3$ = " ",K3$;K3$[1,3] = H0[11] Using "###";K3$[4,9] = H0[2] Using "######"
	Search #CH_ROH,2,2;K2$,R2,E \ If E>1 gosub err_search:
	If E
		Search #CH_ROH,4,2;K2$,R1,E \ If E gosub err_search:
	End If
	!Search #CH_ROH,2,3;K3$,R2,E \ If E>1 gosub err_search:
	!If E
	!	Search #CH_ROH,4,3;K3$,R1,E \ If E gosub err_search:
	!End If
Return

!----------------------------------------------------------------------------
! for status 90s on reset order is not valid - attempt delete if possible
!----------------------------------------------------------------------------
OrderInvalid: ! NOT CURRENTLY USED - STILL ORDER DATA
	K11$ = " ",K11$
	K11$[1,6] = A1$[3,8]
	K11$[7] = ""
	Search #11,2,1;K11$,R11,E \ If E>1 gosub err_search:
	If E = 0
		tmp$="PO "+str$(H0[2])+" damaged- possible useful data - not deleteing."+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
	Else
		tmp$="This PO has internal problems. The PO is not recoverable."+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
		If F9[6] = 1
			tmp$="(Note: PO has invalid ship-to/total record numbers)"+fdel$
			call addToStr(e$, rstr$, tmp$+rdel$)
		end if
		If F9[6] = 2
			tmp$="(note: PO has invalid vendor/po number in data)"+fdel$
			call addToStr(e$, rstr$, tmp$+rdel$)
		end if
		If F9[6] = 3
			tmp$="(Note: po has garbage data where the keys are <> the data)"
			call addToStr(e$, rstr$, tmp$+rdel$)
		end if
		tmp$="Please contact Universal to check out this po."+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
		call ResetStatusFatal("PO status not reset!")
		goto outend
	End If
	tmp$="PO "+str$(H0[2])+" unsalvagable, bypassing."+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$)
	! check / fix dir 2 & 3
	!K2$ = " ",K2$;K2$[1,6] = H3[3] Using "######";K2$[7] = H0[2] Using "######"
	!K3$ = " ",K3$;K3$[1,3] = H0[11] Using "###";K3$[4,9] = H0[2] Using "######"
	!Search #CH_ROH,2,2;K2$,R2,E \ If E>1 gosub err_search:
	!If Not(E) And R1 = R2
	!	Search #CH_ROH,5,2;K2$,R2,E \ If E gosub err_search:
	!Else
	!	K2$ = " ",K2$
	!	do
	!		Search #CH_ROH,3,2;K2$,R2,E \ If E>2 gosub err_search:
	!		If E exit do
	!		If R2 = R1 and K2$[7,12] = A1$[3,8]
	!			Search #CH_ROH,5,2;K2$,R2,E \ If E gosub err_search:
	!		end if
	!	loop
	!End If
	
	!End If
	!Gosub LogAudit
Return

!----------------------------------------------------------------------------
! CHECK & CORRECT BAD DATA- HEADER, LINES, ETC-WMB 8/2002
!----------------------------------------------------------------------------
CHECK_PROBLEM: ! NOT DONE IN 368 - Still ORDER VARS
	DELETELINEFLAG = 0
	Rem FIRST GO THRU SORDFLEL FILE
	K11$ = " ",K11$
	K11$[1,6] = A1$[3,8]
	K11$[7] = ""
	CHECK_P1: Search #11,3,1;K11$,R11,E \ if E>2 gosub err_search:
	If E = 2 Goto CHECK_P2
	If K11$[1,6] <> A1$[3,8] Goto CHECK_P2
	Mat Read #11,R11,0;L2;
	Mat Read #11,R11,8;L3;
	Mat Read #11,R11,16;L4;
	Mat Read #11,R11,256;SS2;
	K2$ = " ",K2$
	K2$[1,6] = L2[1] Using "######"
	K2$[7,9] = L3[2] Using "###"
	If L3[2] = 0 And K2$[1,6] = K11$[1,6] And (K11$[10,10] = "A" Or K11$[10,10] = "B" Or K11$[10,10] = "C") Goto CHECK_P1
	If L3[2] >= 900 And L3[2] <= 999 And K2$[1,9] = K11$[1,9] Goto CHECK_P1
	If K2$[1,9] <> K11$[1,9] !BAD KEY
		Search #11,5,1;K11$,R2,E \ If E gosub err_search:
		K3$ = " ",K3$
		K3$ = K11$[1,10]
		K3$[10] = ""
		Search #12,5,1;K3$,R2,E \ If E>1 gosub err_search:
		K3$ = " ",K3$
		CHECK_P1A: Search #11,3,2;K3$,R2,E \ if E>2 gosub err_search:
			If E = 2 Goto CHECK_P1B
			If R2 <> R11 Goto CHECK_P1A
			If K11$[1,9] <> K3$[7,15] Goto CHECK_P1A
			Search #11,5,2;K3$,R2,E \ if E gosub err_search:
		Goto CHECK_P1A
		CHECK_P1B: Rem REM DELETE SORDLOT RECORDS
		K1777$ = " ",K1777$
		K1777$[1,9] = K11$[1,9]
		! Gosub CHECKDEL_SORDLOT ! NO SORDLOT ON QUOTES
		!If P60$[44,44] = "Y" !order audit flag
		!	Gosub EditTrackInit
		!	etRec.EtAction = 4
		!	etRec.LineNum = K11$[7,9]
		!	etRec.ProdCode$ = "DEL LN-BAD D"
		!	call MakeEdittrack(e$, IntCo, fchan[], etRec.)
		!End If
		ETLINE = K11$[7,9]
		Gosub ITSGONEMESSAGE
		DELETELINEFLAG = DELETELINEFLAG + 1
		Goto CHECK_P1
	End If
	If L3[0] = 1 If SS2[0] = 3 Goto CHECK_P1
	If L3[0] = 1 !NON-STOCK
		K3$ = " ",K3$
		K3$ = K11$[1,10]
		K3$[10] = ""
		Search #12,2,1;K3$,R2,E \ IF E>1 gosub err_search:
		If E = 1
			Search #11,5,1;K11$,R2,E \ If E gosub err_search:
			!If P60$[44,44] = "Y" !order audit flag
			!	Gosub EditTrackInit
			!	etRec.EtAction = 4
			!	etRec.LineNum = L3[2]
			!	etRec.ProdCode$ = "DEL LN-KEY N"
			!	call MakeEdittrack(e$, IntCo, fchan[], etRec.)
			!End If
			ETLINE = L3[2]
			Gosub ITSGONEMESSAGE
			DELETELINEFLAG = DELETELINEFLAG + 1
			Goto CHECK_P1
		End If
		Mat Read #12,R2,0;L7;
		K2$ = " ",K2$
		K2$[1,6] = L7[0] Using "######"
		K2$[7,9] = L7[1] Using "###"
		If K2$[1,9] <> K3$[1,9] !BAD KEY
			Search #12,5,1;K3$,R2,E \ if E gosub err_search:
			Search #11,5,1;K11$,R2,E \ if E gosub err_search:
			!If P60$[44,44] = "Y" !order audit flag
			!	Gosub EditTrackInit
			!	etRec.EtAction = 4
			!	etRec.LineNum = L3[2]
			!	etRec.ProdCode$ = "DEL LN-BADND"
			!	call MakeEdittrack(e$, IntCo, fchan[], etRec.)
			!End If
			ETLINE = L3[2]
			Gosub ITSGONEMESSAGE
			DELETELINEFLAG = DELETELINEFLAG + 1
			Goto CHECK_P1
		End If
		Goto CHECK_P1
	End If
	Rem STOCK ITEM- CK FOR PROBLEMS.
	K2$ = " ",K2$
	K2$[1,6] = L4[0] Using "######"
	K2$[7,12] = L2[1] Using "######"
	K2$[13,15] = L3[2] Using "###"
	K2$[16] = ""
	Search #11,2,2;K2$,R2,E \ if e>1 gosub err_search:
	If E = 0 Goto CHECK_P1
	Rem NOT THERE -WE HAVE PROBLEMS. IF OK IN SORDLOT, INSERT, OTHERWISE DEL
	K3$ = " ",K3$
	K3$[1,6] = L2[1] Using "######"
	K3$[7,9] = L3[2] Using "###"
	K3$[10] = ""
	Rem WE ARE LOOKING FOR 1 LINE IS SORDLOT- DON'T CARE IF MORE THEN 1 EXIST
	CHECK_P1C: Goto CHECK_P1J ! ISN'T A SORDLOT ON QUOTES!
	
	CHECK_P1J: Rem EVERYTHING ELSE IS OK, SO INSERT 2ND DIR INTO SORDFLEL
	K2$ = " ",K2$
	K2$[1,6] = L4[0] Using "######"
	K2$[7,12] = L2[1] Using "######"
	K2$[13,15] = L3[2] Using "###"
	Search #11,4,2;K2$,R2,E \ if E gosub err_search:
	Goto CHECK_P1
	Rem  ***************************************************
	CHECK_P2: Rem! NEXT GO THRU SORDLOT FILE
	Goto CHECK_P4 ! NO SORDLOTS ON QUOTES!
	
	CHECK_P4: Rem DONE WITH THE CHECKS
Return

!----------------------------------------------------------------------------
! DELETE ANY KEYS FOUND IN SORDLOT-SCAN 1ST & 2ND DIR
! 2 PARTS: AT START, DELETE ALL KEYS FOR THAT ORDER/LINE, IN THE
! 2ND OPTION, JUST DELETE KEYS ASSOCIATED WITH THAT ONE KEY IN SORDLOT.
!----------------------------------------------------------------------------
CHECKDEL_SORDLOT:
	
Return

!----------------------------------------------------------------------------
! DISPLAY WHAT LINES WERE DELETED
!----------------------------------------------------------------------------
ITSGONEMESSAGE: ! part of check - not on 368 - still order vars
	If DELETELINEFLAG = 0
		tmp$ = "There are problems with PO # "+str$(H0[2])+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
		tmp$ = "Lines that were deleted:"+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
	End If
	If Fra(DELETELINEFLAG) = 0
		tmp$="    "+str$(ETLINE)+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
	end if
	If Fra(DELETELINEFLAG) = .01
		tmp$="Note: In addition to any deleted lines, you should check on"+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
		tmp$="the following products:"+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
	End If
	If Fra(DELETELINEFLAG) <> 0
		tmp$ = "    "+S0$[1,12]+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
! 		If Fra(Fra(DELETELINEFLAG) * 25) = 0 Print " "
	End If
Return

!----------------------------------------------------------------------------
! log activity into audit file
!----------------------------------------------------------------------------
LogAudit:
	LOCKTIME = 100;P2 = 368;C1 = 1
	Open #CH_AUD,"cntrl/CNTRL.AUD"
	If Chf(CH_AUD) > 2 ^ 16 - 10
		tmp$="Warning! Audit log file full, transaction not logged!"+fdel$
		call addToStr(e$, rstr$, tmp$+rdel$)
	else
		try
			Write #CH_AUD,Chf(CH_AUD),0,LOCKTIME;P2,Spc(6),C1,REC1,(Spc(2) * 36000 + Spc(3)) / 600,IntCo;
		else
			error 10000
		end try
	end if
	Close #CH_AUD
Return



!----------------------------------------------------------------------------
! search for an order / PO or both
!----------------------------------------------------------------------------
OrdInvSearch: ! 
	call DxGet("PONumber", tmp$) \ SORD = tmp$
	call DxGet("OrderNumber", tmp$) \ INV_ = tmp$
	if not(SORD) and not(INV_)
		e$ = "Enter an order number, a PO number, or both."
		error 10000
	end if
	tmp$=bsdel$+"SearchResults"+fdel$+rdel$
	tmp$=tmp$+"PONumber"+fdel$+"OrderNumber"+fdel$
	tmp$=tmp$+"InFile"+fdel$+"Status"+fdel$+"Description"+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$)
	gosub check_roh
	! gosub check_invh ! no way
	call addToStr(e$, rstr$, esdel$)
Return

!----------------------------------------------------------------------------
! found one - add results to output
!----------------------------------------------------------------------------
SearchFind:
	tmp$=str$(sosrchh0[2])+fdel$+str$(x3)+fdel$
	If FILE < 2
		tmp$=tmp$+"In PO file"+fdel$
	Else
		tmp$=tmp$+"In order history"+fdel$
	End If
	tmp$=tmp$+str$(sosrchh0)+fdel$+StatusDescription$(sosrchh0)+fdel$
	call addToStr(e$, rstr$, tmp$+rdel$)
return

!----------------------------------------------------------------------------
! check order file
!----------------------------------------------------------------------------
CHECK_ROH: Rem
	FILE = 1
	STATCOUNT = 1
	KEY_$ = " ",KEY_$
	KEY_$[1] = STATCOUNT Using "##"
	If Not(INV_)
		KEY_$[3] = SORD Using "######"
		KEY_$[8] = ""
	End If
	do
		gotHit = 0
		Search #CH_ROH,3,1;KEY_$,REC,E \ if e>2 gosub err_search:
		if E exit do
		SCR = KEY_$[3]
		If SORD
			If SCR = SORD
				FLAG = 1
				Mat Read #CH_ROH,REC;SOSRCHH0;
				mat read #ch_roh,rec,222;sosrchh3;
				gotHit = 1
				let x3=sosrchh3[4]
				gosub SearchFind
				exit do
			Else
				X = KEY_$[1,2]
				If INV_ = 0 And (SCR > SORD Or X > STATCOUNT)
						STATCOUNT = STATCOUNT + 1
						If STATCOUNT > 99 exit do
						KEY_$ = " ",KEY_$
						KEY_$[1,2] = STATCOUNT Using "##"
						KEY_$[3] = SORD Using "######"
						KEY_$[8] = ""
				End If
			End If
		End If
		if INV_ <> 0 and not(gotHit)
			Mat Read #CH_ROH,REC;SOSRCHH0;
			mat read #ch_roh,rec,222;sosrchh3;
			let x3=sosrchh3[4] ! ord#created
			If X3 = INV_ ! " sosrchH0[6] = inv
				gosub SearchFind
			End If
		end if
	loop
Return

ERR_SEARCH: Rem
	ENUM = E ;ELINE = Spc(16);CTERR = 0
	If E = 5 Let CTERR = Err(8)
	e$ = "SEARCH ERROR RETURN STATUS",(E + (CTERR * .001))
	e$ = e$,"/ STATEMENT",ELINE," IN PROGRAM "+msc$(4)
	error 9999 ! (1 less than 10000, bogus, but causes full dump)
Return ! End

OUTEND: Rem EXIT ROUTINE
call setoutput(e$,rstr$)
Close
else ! main try failure
 include "src/callmainerrnet.inc"
end try
end