! serpbuildcart
!     SERP - build faux cart files so we can call buildorder
!
! loadsave -w -n 100,10 -o prog/dxport/serpbuildcart.dl4 src/serpbuildcart.src
!
! 1.0 mm/dd/yyyy change??
!
include "src/copyright.inc" ! dx
!
! cartfile hdr - filename = SFCARTHDR
! key = userid & custid (PASSED TO BUILDORDER)
Def Struct fcarthdr                                  
 member userid$[8]      : Item 0                    
 member custid$[10]     : Item 8                   
 member po$[20]         : Item 18                  
 member shipdate$[8]    : Item 38                  
 member shipto$[6]      : Item 46                  
 member shiptoname$[30] : Item 52                  
 member shiptoaddr1$[30]: Item 82                  
 member shiptoaddr2$[30]: Item 112                
 member shiptocity$[15] : Item 142
 member shiptostate$[2] : Item 157
 member shiptozip$[13]  : Item 159              
 member 1%,ordertype    : Item 172             
 member 2%,miscchargecode[9]    : Item 174          
 member 3%,misccharge[9]: Item 214          
 member 3%,miscchargecost[9]    : Item 274  
 member 3%,orderdiscount        : Item 334
 member 3%,pooverride     : Item 340
 member attn$[30]         : Item 346
 member 1%,terms          : Item 376
 member 1%,routing        : Item 378
 member shipcust$[6]	  : Item 380
 member 3%,ordernum	      : Item 386
 member headwh$[2]	      : Item 392
 member 2%,hdept	      : Item 394
 member 2%,taxcode        : Item 400
 member shipvia$[12]      : Item 404
 member country$[18]      : Item 416
 member 3%,taxpct         : Item 434
 member 3%,frgtcost       : Item 440
 member 3%,frgtamt        : Item 446
 member 3%,taxamt         : Item 452
 member 3%,othamt         : Item 458
 member 3%,miscamt        : Item 464
 member cctype$[20]       : Item 470
 member ccnum$[30]        : Item 490
 member ccexp$[10]        : Item 520
 member cctrns$[30]       : Item 530
 member ccappr$[10]       : Item 560
 member 3%,ccamt          : Item 570
 member 3%,discamt        : Item 576
 member cctrtype$[4]      : Item 582
 member ccname$[30]       : Item 586
 member cczip$[10]        : Item 616
 member ccseccd$[6]       : Item 626
 member ccaddr$[30]       : Item 632
End Def
! cartfile dtl - filename = SFCARTDET
Def Struct fcartdet                                                            
! 3/sfcartdet#                                                                  
! Dir 1= UUUUUUUUCCCCCCCCCCTLLLPPPPPPPPPPPPDDDD  U=User ID C=Customer ID T=Line Type L=Line Num 
! Dir 2= UUUUUUUUCCCCCCCCCCPPPPPPPPPPPPTLLLDDDD                                     
! U=User Id C=Customer Id P=Prod Code T=Line Type L=Line Num  D=dept                  
Member UserId$[8]      : Item 0        
Member CustId$[10]     : Item 8        
Member Prod$[12]       : Item 18
Member LWH$[2]         : Item 30
Member LType$[1]       : Item 48       
Member QUM$[4]         : Item 50       
Member PUM$[4]         : Item 54       
Member 1%,lineno       : Item 58       
Member 1%,perm         : Item 60       
Member 3%,qty          : Item 62       
Member 3%,price        : Item 68
Member 3%,cost         : Item 74       
Member 3%,gp           : Item 80 
Member Notes$[600]     : Item 86  
Member 3%,ucost        : Item 686
Member 3%,uprice       : Item 692 
Member 2%,taxable      : Item 698
Member 2%,dept         : Item 702
Member 3%,L7           : Item 706
Member 3%,rol0         : Item 712  
Member Rolkey$[10]     : Item 718
Member 3%,PAR		: Item 728
Member 3%,Count		: Item 734
Member 3%,lp1disc   : Item 740
Member 3%,discpct   : Item 746
Member 3%,discdol   : Item 752
Member 3%,frtadd	: Item 758
Member poline$[30]	: Item 764
Member jobline$[30]	: Item 794
Member sintr$[30]	: Item 824
End Def                                                                         
! 
! cart messages SFCARTSP
! layout:  INDEX=USER,CUSTID,type,line
!USER$[1,8]      8     0
!CUSTID$[1,10]  10     8
!SPTYPE$[1,1]    1    18
!                1    19
!SP1$[1,40]     40    20
!               40    60
!1%,lineno			 100

! cartfile nonstk (B2B) - filename = SFCARTNS
! use standard = sfcartns
include "src/inc/filesfcartns.inc"
! 600 wrds - 1 dir

External Lib "ubsfunc.dl4"
Declare External Function OpenFile,clrtxtc$
!
External Lib "libgeneral.lib"
Declare External Sub GetSession,AddToStr,SetOutput,CreateNetStatus
!
Declare Intrinsic Function findchannel
Declare Intrinsic Sub FINDF
!
Declare sub Crteheadr,CrteLine,crtespmsg,crteoscosum
Try
	Dim E$[500],Msg$[500],V$[60],filename$[64],filename2$[128]
	Dim buttonlist$[5,50],nextlist$[5,100] !error handling variables
	dim action$[30],options$[30],userid$[8],b$[200],action1$[30],Action2$[30]
	Dim bsdel$[10],esdel$[10],rdel$[10],fdel$[10],rstr$[3000]
	dim tmp$[1200],tmp1$[300],Msgdesc$[150],List$[1000,1000]
	Dim Webstr$[200],Message$[200],p1$[10],custid$[10]
	Dim WRKKEY$[20],RESULT$[80],X$[50],lastflag$[1]
	Dim SPType$[2],SP1$[80],spkey$[60],work$[1200]
	Dim LNkey$[60],LN2key$[60],Prod$[12]
	DIM OSKEY1$[60],OSKEY2$[60],Blank$[120]
	DIM BOXID$[24]
	dim custom_customer$[30]
	DIM 1%,BOXNP[2]
	DIM 2%,OSSSUM[5]
	Dim 1%,WRKFLE[5],3%,FLESPEC[40],2%,PROB[30]
	dim 1%,spline, DWH, sldwh
	Dim 2%,custid
	Dim 3%,PROB[99],R[99]
	Dim 4%,Shipid
	Dim 3%
	dim crh. as fcarthdr
	dim crd. as fcartdet
	dim crns. as sfcartns
	! call dxopen() ! already done in oemenu
	call GetSession(e$,CTLC,options$,action$,UserID$,intCo,intSls,fdel$,rstr$,bsdel$,esdel$,rdel$,action1$,action2$)
	B$=" ",B$;blank$=" ",blank$
	call dxsave(0,"tmp/bldord.txt!") ! save input
	action1$=UCase$(RTrim$(action1$))
	action2$=UCase$(RTrim$(action2$))
	close #ctlc
	ctlc=Openfile (9999,Intco) \ if ctlc=-1 error 42 ! re-open as read/write!!
	
	Read #ctlc,115,60;custom_customer$;
	custom_customer$=UCASE$(TRIM$(custom_customer$))

	! build the faux cart files
	carthc=findchannel()
	filename$="files/3/fkcarthdr"+Str$(SPC(6)) ! not intco (multiple users active!)
	filename2$="<666> [10:364] ",filename$,"!"
   Build #carthc,filename2$ As "Universal Indexed-Contiguous"
   Rem key lengths in words
   r = 9 ! (18 CHARS)
   Search #carthc,0,1;v$,r,e 
   IF E ERROR 11000
   v$=""\r=0\e=0
    Search #carthc,0,0;v$,r,e
	IF E ERROR 11000
	close #carthc
	open #carthc,filename$
	! lines (detail)
	cartdc=findchannel()
	filename$="files/3/fkcartdtl"+Str$(SPC(6)) ! not intco (multiple users active!)
	filename2$="<666> [10:500] ",filename$,"!"
   Build #cartdc,filename2$ As "Universal Indexed-Contiguous"
   Rem key lengths in words
   r =20 ! (40 CHARS)
   Search #cartdc,0,1;v$,r,e 
   IF E ERROR 11000
   r=20  ! (40 chars
   Search #cartdc,0,2;v$,r,e 
   IF E ERROR 11000
   v$=""\r=0\e=0
    Search #cartdc,0,0;v$,r,e
	IF E ERROR 11000
	close #cartdc
	open #cartdc,filename$
	! message
	cartsc=findchannel()
	filename$="files/3/fkcartmsg"+Str$(SPC(6)) ! not intco (multiple users active!)
	filename2$="<666> [10:128] ",filename$,"!"
   Build #cartsc,filename2$ As "Universal Indexed-Contiguous"
   Rem key lengths in words
   r =15 ! (30 CHARS)
   Search #cartsc,0,1;v$,r,e 
   IF E ERROR 11000
   v$=""\r=0\e=0
    Search #cartsc,0,0;v$,r,e
	IF E ERROR 11000
	close #cartsc
	open #cartsc,filename$
	! nonstock - IF / WHEN NEEDED
	cartns=findchannel()
	filename$="files/3/fkcartnts"+Str$(SPC(6)) ! not intco (multiple users active!)
	filename2$="<666> [10:128] ",filename$,"!"
   Build #cartns,filename2$ As "Universal Indexed-Contiguous"
   Rem key lengths in words
   r =17 ! (34 CHARS)
   Search #cartns,0,1;v$,r,e 
   IF E ERROR 11000
   v$=""\r=0\e=0
    Search #cartns,0,0;v$,r,e
	IF E ERROR 11000
	close #cartns
	open #cartns,filename$
	! OPEN ANY STANDARD FILES
	ch_prod=Openfile(1792,Intco) \ if ch_prod=-1 error 42
	ch_prwh=Openfile(1744,Intco) \ if ch_prwh=-1 error 42
	ch_ccode=OpenFile(-1728,Intco) \ if ch_ccode=-1 error 42
	ch_cust=OpenFile(1808,IntCo) \ if ch_cust=-1 error 42
	ch_ship=OpenFile(-2112,Intco) \ if ch_ship=-1 error 42
	CH_OSS=FINDCHANNEL()
	TMP$="3/OSCOSUM"+str$(Intco)
	open #ch_oss,tmp$
	! 
	! OK Let's start this thing
	clear crh.
	clear crd.
	clear crns.
	call dxget("CUSTID",tmp$)
	let custid=tmp$
	if custid<1 or custid>999999 or fra(custid)
		let returnstatus=0
		message$="Invalid customer id"
		goto OutDone
	endif
	V$=B$
	v$=custid using "######"
	search #ch_cust,2,1;v$,R[2],E
	if e
		returnstatus=0
		message$="Customer id not found"
		goto outdone
	else
		read #ch_cust,r[2],696;dwh;
	endif
	Custid$=str$(custid)+B$
	call dxget("SHIPCUST",tmp$)
	shipcust=tmp$
	if shipcust=0 let shipcust=custid
	call dxget("SHIPID",tmp$)
	let shipid=tmp$ ! send 6.6? we're looking for 6
	if rtrim$(tmp$)<>""
		V$=B$
		v$=shipcust using "######"
		v$[7,7]=".";V$[8]=shipid using "&&&&&&"
		search #ch_ship,2,1;v$,R[3],E
		if e
			returnstatus=0
			message$="Shipping id not found"
			goto outdone
		else
			read #ch_ship,r[3],394;sldwh;
		endif
	else
		shipid=-1 ! sent nothing
	endif ! sent id
	if custom_customer$="UPCW" let crh.ordertype = 12
	! if custom_customer$="BUTLER" let crh.ordertype = 12
	crh.userid$=userid$+B$
	crh.custid$=str$(custid)+B$
	if shipid>=0 let crh.shipto$=str$(shipid)+B$
	crh.shipcust$=str$(shipcust)+B$
	call dxget("CUSTPO",tmp$)
	crh.po$=tmp$+B$
	call dxget("WEBORDID",tmp$)
	worderid=tmp$
	system "mkdir omni 2>/dev/null"  ! try to build folder
	Call dxsave(0,"omni/bldord." + Str$(Tim(3)) + "." + tmp$ + "!")
	! gotta have it & send it for osco ship summ file!
	if RTrim$(tmp$)=""
		let tmp$=Str$(SPC(6)) ! port number
		worderid=tmp$ ! only active during "build"
		tmp$=tmp$+"  TEMPPORT"
	Endif
	! store in internal messages
	if rtrim$(tmp$)<>""
		sptype$="8 ";mline=1
		sp1$="WEBORDER "+RTrim$(tmp$)+B$ ! DO NOT CHANGE - USED IN BUILDORDER ALSO
		call crtespmsg()
	endif
	call dxget("SHIPDATE",tmp$) ! MM/DD/YYYY
	if rtrim$(tmp$)<>"" ! send it
		let x$=tmp$[7,10],tmp$[1,2],tmp$[4,5]
		crh.shipdate$=x$
	endif
	call dxget("WHSE",tmp$) ! optional
	if rtrim$(tmp$)<>""
		whse=tmp$ \ if whse<1 or whse>99 or fra(whse) let whse=0
		if whse let crh.headwh$=str$(Whse)
	else
		if dwh let whse = dwh \ crh.headwh$ = str$(whse)
		if sldwh let whse = sldwh \ crh.headwh$ = str$(whse)
	endif
	call dxget("TAXCODE",tmp$)
	crh.taxcode=tmp$
	call dxget("SHIPNAME",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.shiptoname$=tmp$+B$
	call dxget("SHIPADDR1",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.shiptoaddr1$=tmp$+B$
	call dxget("SHIPADDR2",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.shiptoaddr2$=tmp$+B$
	! crh.shiptoaddr3$=B$ ! layout has 3
	call dxget("SHIPCITY",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.shiptocity$=tmp$+B$
	call dxget("SHIPSTATE",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.shiptostate$=tmp$+B$
	call dxget("SHIPZIP",tmp$)
	crh.shiptozip$=tmp$+B$
	call dxget("SHIPCOUNTRY",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.country$=tmp$+B$
	call dxget("SHIPVIA",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.shipvia$=tmp$+B$ 
	call dxget("ATTN",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.attn$=tmp$+B$
	call dxget("TERMS",tmp$)
	crh.terms=tmp$
	!call dxget("TAXCODE",tmp$)
	!crh.taxcode=tmp$
	call dxget("DISCDOL",tmp$)
	crh.discamt=tmp$
	call dxget("TAXPCT",TMP$)
	crh.taxpct=tmp$
	call dxget("TAXDOL",tmp$)
	crh.taxamt=tmp$
	call dxget("FRGTCOST",tmp$)
	crh.frgtcost=tmp$
	call dxget("FRGTCHRG",tmp$)
	crh.frgtamt=tmp$
	call dxget("OTHRCHRG",TMP$)
	crh.othamt=tmp$
	call dxget("MISCCHRG",tmp$)
	crh.miscamt=tmp$
	call dxget("CCTYPE",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.cctype$=tmp$+B$ ! mc,visa,
	call dxget("CCNUM",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.ccnum$=tmp$+B$
	call dxget("CCEXP",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.ccexp$=tmp$+B$ ! expires on
	call dxget("CCTRANS",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.cctrns$=tmp$+B$ ! "marathon trans id
	call dxget("CCAPPR",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.ccappr$=tmp$+B$ ! approval #
	Call dxget("CCTRTYPE",work$)
	tmp$=clrtxtc$(e$,work$)
	crh.cctrtype$=tmp$+B$ ! marathon transaction type
	call dxget("CCAMT",tmp$)
	crh.ccamt=tmp$
	call dxget("CCNAME",work$)
	tmp$=clrtxtc$(e$,work$) ! name on cc
	crh.ccname$=tmp$+B$
	call dxget("CCADDR",work$)
	tmp$=clrtxtc$(e$,work$) ! address?
	crh.ccaddr$=tmp$+B$
	call dxget("CCZIP",work$)
	tmp$=clrtxtc$(e$,work$) ! zip code
	crh.cczip$=tmp$+B$
	call dxget("CCSECCD",work$)
	tmp$=clrtxtc$(e$,work$) ! security code
	crh.ccseccd$=tmp$+B$
	call Crteheadr()
	! get osco summary
	call crteoscosum() ! osco packing summary for UPS, etc?
	! first the osco ship summary!
	! now get pick ticket box summ from the file:
	oskey1$=" ",oskey1$;oskey1$="W"
	oskey1$[2]=OSSSUM[0] using "#####" ! limited to 5
	OSSMSG: ! loop for all "S"
	Search #ch_oss,3,1;oskey1$,r[20],E
	x2=oskey1$[2,6] \ if x2<>OSSSUM[0] let e=2
	if not(e)
		if oskey1$[7,7]<>"S" goto ossmsg ! not shipsumm
		!mat read #ch_oss,r[20],0;osssum;
		mat read #ch_oss,r[20],24;boxid$;
		mat read #ch_oss,r[20],48;boxnp;
		SP1$=" ",sp1$;mline=1;sptype$="2 "
		sp1$="Carton "+str$(BOXNP[1])+"  "+boxid$[1,12]+Blank$ ! box # and boxname
		call crtespmsg() ! add to file
		goto ossmsg
	endif
	! messages 
	call dxget("NUMMSGS",tmp$) ! number of messages being sent
	totmsg=tmp$
	if totmsg>0
		msgnum=1;mline=1;sptype$="2 "
		for m9=1 to totmsg
			call dxget("SPMSG"+Str$(M9),work$)
			tmp$=clrtxtc$(e$,work$)
			BMSGLOOP: ! in case a big message - loop here
			if RTrim$(tmp$)<>""
				! as front end may send LARGE Messages
				if len(tmp$)>40 ! as front end may not parse
					xm=len(tmp$)
					work$=tmp$[1,40] ! try at 40
					if work$[40,40]<>" " and tmp$[41,41]<>" " ! split a word
						pos0=1;pos1=0;lpos=0
						flsploop: ! find last space
						search work$[pos0]," ",pos1
						if pos1
							lpos=pos0+pos1
							pos0=pos0+pos1
							goto flsploop ! try for next space
						endif
						! lpos holds last position of space
						If lpos > 1 Let lpos = lpos - 1 ! ! up /include space
						if lpos<1 let lpos=40 ! no spaces - just 40
						tmp1$=tmp$[1,lpos]
						if msgnum=1 let sp1$[1,40]=tmp1$+B$ \ call crtespmsg()
						! 
						! if msgnum=2 let sp1$[41,80]=tmp1$+B$
						! if msgnum=2 call crtespmsg() ! add to file
						! msgnum=msgnum+1  !# can't we just send each 
						if msgnum>2 Let Msgnum=1 ! only 1 & 2 used
						clear work$ ! clear what we used
						work$=tmp$[lpos+1]
						clear tmp$ ! clear for re-fill
						tmp$=work$ ! filled with remainder?
						goto BMSGLoop ! check if still >40
					Endif ! split word
					!--------- Mulitline user msg---
					sp1$=work$
					If RTrim$(SP1$) <> ""
					  sptype$ = "2 "
					  Call crtespmsg() ! for if a part
					End If
					if xm>40
							work$=tmp$[41],b$ 
							tmp$=RTrim$(work$)
							Goto BMSGLoop
					end if                                     
					!--------------------------------
				endif ! parse it
				if msgnum=1 let sp1$[1,40]=tmp$+B$ \ call crtespmsg() ! add to file
				! if msgnum=2 let sp1$[41,80]=tmp$+B$
				! if msgnum=2 call crtespmsg() ! add to file
				! msgnum=msgnum+1
				if msgnum>2 Let Msgnum=1 ! only 1 & 2 used
			endif
		Next M9
		if RTrim$(sp1$)<>"" 
			sptype$="2 "
			call crtespmsg() ! for if a part
		endif
	Endif ! sent messages
	! NOW the Lines
	call dxget("NUMPRODS",tmp$) ! how many products
	totprods=tmp$
	if totprods>0 ! if none - still create an order or exit now?
		for pr9=1 to totprods
			clear crd.
			crd.userid$=userid$+B$
			crd.custid$=str$(custid)+B$
			call dxget("PRODID"+Str$(pr9),work$)
			tmp$=clrtxtc$(e$,work$)
			if rtrim$(tmp$)="" goto bpbdprod ! nothing sent - bypass
			prod$=UCase$(Rtrim$(tmp$))
			Search #ch_prod,2,1;prod$,R[4],E
			if e 
				returnstatus=0
				message$="PRODUCT "+Str$(PR9)+" NOT ON FILE"
				goto bpbdprod
			Endif
			crd.Prod$=Prod$+B$
			call dxget("QTY"+Str$(PR9),tmp$)
			let x3=tmp$
			crd.qty=x3 ! store it as entered
			call dxget("QTYUM"+Str$(PR9),work$)
			tmp$=clrtxtc$(e$,work$)
			crd.QUM$=tmp$+B$
			call dxget("WHSE"+Str$(Pr9),tmp$)
			crd.LWH$=tmp$+B$
			call dxget("BASEPRICE"+Str$(Pr9),tmp$)
			crd.price=tmp$ ! desc wrong - price=base, uprice=net
			call dxget("PRICEUM"+Str$(PR9),work$)
			tmp$=clrtxtc$(e$,work$)
			crd.PUM$=tmp$+B$
			call dxget("TAXABLE"+Str$(PR9),tmp$)
			X=0 \ IF UCASE$(RTRIM$(TMP$))="Y" LET X=1
			crd.taxable=X
			call dxget("DISCPCT"+Str$(PR9),tmp$)
			crd.discpct=tmp$
			call dxget("DISCDOL"+str$(PR9),tmp$)
			crd.discdol=tmp$
			call dxget("FRTADD"+str$(PR9),tmp$)
			crd.frtadd=tmp$
			call dxget("NETPRICE"+Str$(Pr9),tmp$)
			crd.uprice=tmp$   ! desc is wrong - price=base, uprice=net
			call dxget("UCTYPE"+Str$(Pr9),tmp$)
			X$=UCase$(tmp$)
			call dxget("UPCHRG"+Str$(Pr9),tmp$)
			x3=tmp$
			if X$[1,1]="P" let crd.L7=x3
			if x$[1,1]="D" let crd.L7=0-x3
			! first osco, then entered!
			! we now get from oscofile
			x=0;tmp$=" ",tmp$
			clear tmp$
			oskey2$=" ",oskey2$;oskey2$="W"
			oskey2$[2]=OSSSUM[0] using "#####"
			OSPMSG: ! loop for all "P"
			Search #ch_oss,3,1;oskey2$,r[20],E
			x2=oskey2$[2,6] \ if x2<>OSSSUM[0] let e=2
			if not(e)
				if oskey2$[7,7]<>"P" goto ospmsg ! not prod detail
				if oskey2$[11,22]<>Prod$ goto ospmsg ! not correct product
				mat read #ch_oss,r[20],0;osssum;
				mat read #ch_oss,r[20],24;boxid$;
				mat read #ch_oss,r[20],48;boxnp;
				if x>0 let tmp$=tmp$,", " ! comma separate after 1st
				tmp$=tmp$,str$(boxnp[1]),"-",Str$(boxnp[0]) ! box# - qty in box
				x=x+1
				goto osPmsg
			endif
			! pad to multiple of 30?
			if len(tmp$)<30 
				tmp$=tmp$+Blank$
				tmp$[31]=""
			else ! >30
				if len(tmp$)<60
					tmp$=tmp$+Blank$
					tmp$[61]=""
				endif
			endif ! should be <30 normally per customer 
			Call dxget("NOTES"+Str$(PR9),work$)
			tmp1$=clrtxtc$(e$,work$) ! split at 30 with "|"
			clear work$ ! clear orig stuff
			work$=RTrim$(tmp$)+RTrim$(tmp1$) ! osco, then entered
			Contwork: ! loop back
			if len(work$)>30
				crd.Notes$=crd.Notes$+Work$[1,30]+"|"
				clear TMP$ ! clear it
				let TMP$=work$[31] ! get after 30 for next loop
				work$=tmp$ ! shorten it to remainder of string
				goto contwork
			Else
				crd.Notes$=crd.Notes$+work$+"|" ! end on pipe?
			endif
			!---------------------------------------------------
			call dxget("POLINE"+Str$(pr9),work$)
			tmp$=clrtxtc$(e$,work$)
			crd.poline$=tmp$,b$
			call dxget("JOBLINE"+Str$(pr9),work$)
			tmp$=clrtxtc$(e$,work$)
			crd.jobline$=tmp$,b$
			call dxget("SINTRUCTIONS"+Str$(pr9),work$)
			tmp$=clrtxtc$(e$,work$)
			crd.sintr$=tmp$,b$
			!---------------------------------------------------			
			crd.LType$=" " ! "9"=Non-Stock
			! ok - send to file
			crd.lineno=pr9 ! line number
			call CrteLine()
			BPBDPROD: ! next
		Next pr9
	Endif ! 
	! set up for the call
	clear FLESPEC[]
	FLESPEC[3]=ch_prod
	FLESPEC[5]=ch_cust
	FLESPEC[17]=ch_ccode
	FLESPEC[29]=ch_ship
	FLESPEC[30]=ch_prwh
	! call off to buildorder
	WRKFLE[1] = carthc;WRKFLE[2] = cartdc;WRKFLE[3] = cartsc ! "cart files
	WRKFLE[4]=cartns ! nonstock cart file
	FLESPEC[0]=-1 !no printing
	WRKFLE[0]=-1 ! SHOW FROM OMNI RETAIL
	WRKKEY$=userid$,custid$
	Rem let's try it - using code from salespro_base_9 dxport "SFORDER"
	If action2$="SFQUOTE"
		call dxget("lastprice",lastflag$)
		Call "BUILDQUOTE",WRKFLE[],FLESPEC[],RESULT$,WRKKEY$,PROB[],lastflag$   
	else
		! it's an order - let see if this needs to be "logged"
		call dxget("u_option_order_log", tmp$) \ tmp$ = rtrim$(tmp$)
		if tmp$ <> "" ! something set
			logPrinter = tmp$
			if logPrinter ! it's a printer number - open it up
				LptChan=FindChannel()
				Open #LptChan,"cntrl/cntrl.lpt"
				READ #LptChan,logPrinter;P1$;
				close #LptChan
				try
					open #0,"$/usr/ub/sys/"+lcase$(rtrim$(P1$[2]))
					flespec[0] = 0 ! printer opened and ready
				else
					e$= "Couldn't open printer: "+str$(logPrinter)+" - Order not submitted!"
					error 10000
				end try
			else ! not hard copy printer
				tmp$=rtrim$(lcase$(tmp$))
				search tmp$,"@",E
				if E ! must be an email address
					try
						open #0,"(From="+tmp$+",subject=Omni Order Submitted) "+tmp$   as "email"
						flespec[0] = 0 ! email channel opened
					else
						e$ = "Couldn't open email for logging to "+tmp$+" - Order not submitted!"
						error 10000
					end try
					print #0;"Omni Order Submitted"
					print #0;
				else ! OK, not a printer or email, assume a file
					call findf(tmp$,e)
					if not(e) ! file doesn't exist
						try
							build #0,tmp$ as "Text"
						else
							e$ = "Couldn't build log file: "+tmp$+" - Order not submitted!"
							error 10000
						end try
						! bug in dl4 - close so changes are saved
						close #0
					end if
					try
						open #0,tmp$ as "Text"
					else
						e$ = "Couldn't open log file: "+tmp$+" - Order not submitted!"
						error 10000
					end try
					setfp #0,chf(400)/512,chf(400) MOD 512;
					! position to end of file
					flespec[0] = 0 ! log file opened
				end if
			end if ! printer / email
		end if ! if something in logging option
		if flespec[0] = 0
			print #0;""
			print #0;"***** BEGINNING OF ORDER"
		end if
		hldfspc=flespec[0] ! retain - as it's changed in buildorder
		Call "BUILDORDER",WRKFLE[],FLESPEC[],RESULT$,WRKKEY$,PROB[]
		if hldfspc = 0
			print #0;""
			print #0;"***** END OF ORDER - Assigned order #"+str$(flespec[1])
		end if
	endif ! option
	! prob[0]=hold,[1]=low or no stk,[2]=price<cost,
	! prob[3]=No net price,[4]=no unit price
	if flespec[1] and Prob[0]=0 ! 1 means issue (+1 = ON HOLD)
		returnstatus=1
		message$=str$(flespec[1]) ! was "Created order #"+str$(flespec[1])
	Else ! on hold
		if flespec[1] and prob[0]>0 ! on hold
			returnstatus=1
			message$=str$(flespec[1]) ! was "Created order #"+str$(flespec[1])+" HOLD = "+Str$(Prob[0])
		Else ! no order# returned
			returnstatus=0
			message$=Result$ ! ?
		endif
	endif
	outdone: ! we are outta here
	close
	filename$="files/3/fkcarthdr"+Str$(SPC(6)) ! not intco (multiple users active!)
	Try kill filename$ Else Rem ! clear the clutter
	filename$="files/3/fkcartdtl"+Str$(SPC(6)) ! not intco (multiple users active!)
	Try kill filename$ Else Rem ! clear the clutter
	filename$="files/3/fkcartmsg"+Str$(SPC(6)) ! not intco (multiple users active!)
	Try kill filename$ Else Rem ! clear the clutter
	filename$="files/3/fkcartnts"+Str$(SPC(6)) ! not intco (multiple users active!)
	Try kill filename$ Else Rem ! clear the clutter
	! status section
	call CreateNetStatus(e$,ReturnStatus,Message$,WebStr$)
	call AddToStr(e$,rstr$,WebStr$)
	call SetOutPut(e$,rstr$)
else
	include "src/callmainerrnet.inc"
end try
END ! of main program
! subs start below
!------------------------------------------------------------------------
Sub Crteheadr()
! get and write header file
try
	! any preprocessing?
	WRKKEY$=" ",WRKKEY$
	WRKKEY$=userid$,custid$
	let e=2;r=0
	search #carthc,1,0;WRKKEY$,R,E
	if e error 11000
	let r[carthc]=R
	Search #carthc,4,1;WRKKEY$,R,E
	if e error 11000
	write record #carthc,R[carthc],0;crh.;
else
	include "src/callsuberr.inc"
end try
End sub
!------------------------------------------------------------------------
Sub CrteLine()
! create and write a line record
! Dir 1= UUUUUUUUCCCCCCCCCCTLLLPPPPPPPPPPPPDDDD  U=User ID C=Customer ID T=Line Type L=Line Num 
! Dir 2= UUUUUUUUCCCCCCCCCCPPPPPPPPPPPPTLLLDDDD                                     
! U=User Id C=Customer Id P=Prod Code T=Line Type L=Line Num  D=dept  
Try
	AddNewLn: ! incase
	if crd.lineno>999 error 11000
	LNKey$=" ",LNKey$
	LNKey$[1,18]=crd.Userid$,crd.Custid$
	LNkey$[19,19]=crd.ltype$
	LNKey$[20,22]=crd.lineno using "###"
	LNKey$[23,34]=crd.prod$
	LNKey$[35]=crd.dept using "####" ! dept
	Search #cartdc,2,1;LNKey$,R,E
	if not(e)
		crd.lineno=crd.lineno+1
		goto AddNewLn
	Endif
	if e<>1 error 11000
	E=2;R=0
	Search #cartdc,1,0;LNKey$,R,E
	if e error 11000
	let r[cartdc]=R
	Search #cartdc,4,1;LNKey$,R,E \ if e error 11000
	LN2Key$=" ",LN2Key$
	LN2key$[1,18]=LNKey$;LN2key$[19,30]=crd.prod$
	LN2key$[31,34]=LNkey$[19,22];LN2key$[35]=LNKey$[35]
	Search #cartdc,4,2;LN2Key$,R,E \ if e error 11000
	write record #cartdc,R[cartdc],0;crd.;
	! all done
else
	include "src/callsuberr.inc"
end try
END Sub
!------------------------------------------------------------------------
Sub crtespmsg()
! add special messages to the file
Try
	AddNewSPM: ! 
	! SPType$="2 " ! order print message (send it!!)
	if mline>999 exit sub
	SPKey$=Userid$,Custid$,sptype$[1,1]
	SPKey$=SPKey$+MLine Using "###"
	Search #cartsc,2,1;SPKey$,R,E
	if Not(E) ! already there
		MLine=MLine+1
		goto AddNewSPM
	Endif
	If E<>1 error 11000 ! 
	Let E=2;R=0
	Search #cartsc,1,0;spkey$,R,E
	if e error 11000
	let r[cartsc]=R
	Search #cartsc,4,1;spkey$,R,E
	if e error 11000
	SPLine=MLine
	Write #cartsc,r[cartsc],0;Userid$[1,8];
	write #cartsc,r[cartsc],8;custid$[1,10];
	write #cartsc,r[cartsc],18;sptype$[1,2];
	Mat write #cartsc,R[cartsc],20;SP1$;
	Write #cartsc,R[cartsc],100;SPLine;
	MLine=Mline+1
	SP1$=" ",SP1$ ! clear for next use
else
	include "src/callsuberr.inc"
end try
End sub
!------------------------------------------------------------------------
Sub crteoscosum()
! add shipping summary to the file
! have the product rec and summary (1 per box)
Try
	Dim 3%
	
	
	clear osssum[]
	osssum[0]=worderid
	if osssum[0]>99999 ! limit is 5 chars!
		tmp$=osssum[0] using "########"
		osssum[0]=tmp$[4] ! drop 1st 2
	endif
	!! get all data
	call dxget("OSCOLineCount",tmp$) ! one each prod in every box on order?
	numbox=tmp$
	if numbox<=0 goto OSSDone
	for x8=1 to numbox
		call dxget("BOXORDID"+Str$(X8),tmp$) ! already know this!
		call dxget("BOXNUM"+Str$(X8),tmp$)
		BOXNP[1]=tmp$ ! BOX NUMBER (KEY)
		call dxget("BoxName"+Str$(X8),work$)
		tmp$=clrtxtc$(e$,work$)
		boxid$[1,12]=tmp$+Blank$
		call dxget("BOXSKU"+Str$(X8),tmp$)
		boxid$[13,24]=tmp$+blank$ ! nested id??
		call dxget("BoxWeight"+Str$(X8),tmp$)
		osssum[1]=tmp$
		CALL dxget("BoxCube"+Str$(X8),tmp$) ! or BoxSkuVolume?
		osssum[2]=tmp$
		call dxget("BoxHeight"+Str$(X8),tmp$)
		osssum[3]=tmp$
		call dxget("BoxWidth"+Str$(X8),tmp$)
		osssum[4]=tmp$
		call dxget("BoxLength"+Str$(X8),tmp$)
		osssum[5]=tmp$
		call dxget("BoxSkuCount"+Str$(X8),tmp$)
		boxnp[0]=tmp$
		! now write the file (SUMMARY FIRST)
		oskey1$=" ",oskey1$
		oskey1$[1,1]="W" ! so diff from actual orders!
		oskey1$[2]=osssum[0] using "#####"
		OSKEY1$[7]="S"+BOXNP[1] USING "###"
		oskey1$[11]=boxid$[1,12] ! box id
		search #ch_oss,2,1;oskey1$,r,e
		if e>1 error 11000
		if e=1
			let e=2;r=0
			search #ch_oss,1,0;oskey1$,r,e
			if e error 11000
			search #ch_oss,4,1;oskey1$,r,e \ if e error 11000
			
			let r[90]=r
		else
			let r[90]=r
		endif
		! should pass same box data on each product
		mat write #ch_oss,r[90],0;osssum;
		mat write #ch_oss,r[90],24;boxid$;
		mat write #ch_oss,r[90],48;boxnp;
		! now write the file PRODUCT\
		! every line has product data - we need for box-qty
		oskey2$=" ",oskey2$
		oskey2$[1,1]="W" ! so diff from actual order!
		oskey2$[2]=osssum[0] using "#####"
		OSKEY2$[7]="P"+BOXNP[1] USING "###"
		oskey2$[11]=boxid$[13,24] ! box id
		search #ch_oss,2,1;oskey2$,r,e
		if e>1 error 11000
		if e=1
			let e=2;r=0
			search #ch_oss,1,0;oskey2$,r,e
			if e error 11000
			search #ch_oss,4,1;oskey2$,r,e \ if e error 11000
			
			let r[90]=r
		else
			let r[90]=r
		endif
		mat write #ch_oss,r[90],0;osssum;
		mat write #ch_oss,r[90],24;boxid$;
		mat write #ch_oss,r[90],48;boxnp;
	next x8
	OSSDone: !! done
	!try close #ch_oss Else Rem
else
	include "src/callsuberr.inc"
end try
End sub
! 
!--------------------------------------------------------------------